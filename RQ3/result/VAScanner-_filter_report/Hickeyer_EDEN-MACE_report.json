{
    "project name": "Hickeyer_EDEN-MACE",
    "modules": {
        "cn.dist:dist-parent": {
            "vulnerable dependencies": {
                "org.apache.shiro:shiro-core:1.4.0": {
                    "used-method num": 66,
                    "used method": [
                        "org.apache.shiro.authc.UsernamePasswordToken:void <init>(java.lang.String,char[])",
                        "org.apache.shiro.codec.Base64:byte[] decode(java.lang.String)",
                        "org.apache.shiro.util.MapContext:java.util.Collection values()",
                        "org.apache.shiro.authz.SimpleAuthorizationInfo:void <init>()",
                        "org.apache.shiro.config.Ini:org.apache.shiro.config.Ini$Section get(java.lang.Object)",
                        "org.apache.shiro.config.Ini:int size()",
                        "org.apache.shiro.config.Ini$Section:boolean isEmpty()",
                        "org.apache.shiro.util.MapContext:java.lang.Object put(java.lang.Object,java.lang.Object)",
                        "org.apache.shiro.subject.SimplePrincipalCollection:java.lang.String toString()",
                        "org.apache.shiro.authz.SimpleAuthorizationInfo:void addRoles(java.util.Collection)",
                        "org.apache.shiro.realm.AuthenticatingRealm:void setCredentialsMatcher(org.apache.shiro.authc.credential.CredentialsMatcher)",
                        "org.apache.shiro.authc.SimpleAuthenticationInfo:java.lang.String toString()",
                        "org.apache.shiro.authz.permission.WildcardPermission:java.lang.String toString()",
                        "org.apache.shiro.config.Ini:java.util.Set keySet()",
                        "org.apache.shiro.config.Ini$Section:java.util.Collection values()",
                        "org.apache.shiro.config.Ini$Section:int size()",
                        "org.apache.shiro.config.Ini$Section:java.lang.String toString()",
                        "org.apache.shiro.authz.SimpleAuthorizationInfo:void addStringPermissions(java.util.Collection)",
                        "org.apache.shiro.authc.SimpleAuthenticationInfo:void <init>(java.lang.Object,java.lang.Object,org.apache.shiro.util.ByteSource,java.lang.String)",
                        "org.apache.shiro.crypto.hash.SimpleHash:boolean equals(java.lang.Object)",
                        "org.apache.shiro.util.MapContext:void clear()",
                        "org.apache.shiro.config.Ini$Section:boolean containsKey(java.lang.Object)",
                        "org.apache.shiro.crypto.hash.SimpleHash:java.lang.String toString()",
                        "org.apache.shiro.config.Ini$Section:boolean equals(java.lang.Object)",
                        "org.apache.shiro.config.Ini:java.util.Set entrySet()",
                        "org.apache.shiro.subject.SimplePrincipalCollection:java.lang.Object getPrimaryPrincipal()",
                        "org.apache.shiro.authc.LockedAccountException:void <init>()",
                        "org.apache.shiro.authz.permission.WildcardPermission:boolean equals(java.lang.Object)",
                        "org.apache.shiro.subject.SimplePrincipalCollection:java.util.Iterator iterator()",
                        "org.apache.shiro.codec.Base64:void <clinit>()",
                        "org.apache.shiro.util.MapContext:java.util.Set entrySet()",
                        "org.apache.shiro.authc.SimpleAuthenticationInfo:boolean equals(java.lang.Object)",
                        "org.apache.shiro.subject.SimplePrincipalCollection:boolean equals(java.lang.Object)",
                        "org.apache.shiro.authc.credential.HashedCredentialsMatcher:void setHashAlgorithmName(java.lang.String)",
                        "org.apache.shiro.util.SimpleByteSource:java.lang.String toString()",
                        "org.apache.shiro.config.Ini:java.lang.String toString()",
                        "org.apache.shiro.authc.credential.HashedCredentialsMatcher:void <init>()",
                        "org.apache.shiro.util.MapContext:java.lang.Object get(java.lang.Object)",
                        "org.apache.shiro.realm.AuthorizingRealm:void <init>()",
                        "org.apache.shiro.config.Ini:java.lang.Object put(java.lang.Object,java.lang.Object)",
                        "org.apache.shiro.authc.CredentialsException:void <init>()",
                        "org.apache.shiro.crypto.hash.SimpleHash:void <init>(java.lang.String,java.lang.Object,java.lang.Object,int)",
                        "org.apache.shiro.util.SimpleByteSource:boolean equals(java.lang.Object)",
                        "org.apache.shiro.realm.AuthorizingRealm:void <clinit>()",
                        "org.apache.shiro.authc.UsernamePasswordToken:java.lang.String toString()",
                        "org.apache.shiro.config.Ini$Section:java.util.Set entrySet()",
                        "org.apache.shiro.config.Ini:void clear()",
                        "org.apache.shiro.crypto.hash.Md5Hash:void <init>(java.lang.Object)",
                        "org.apache.shiro.realm.CachingRealm:void <clinit>()",
                        "org.apache.shiro.config.Ini:boolean equals(java.lang.Object)",
                        "org.apache.shiro.authc.UsernamePasswordToken:java.lang.String getUsername()",
                        "org.apache.shiro.util.MapContext:boolean containsKey(java.lang.Object)",
                        "org.apache.shiro.util.MapContext:int size()",
                        "org.apache.shiro.realm.CachingRealm:java.lang.String getName()",
                        "org.apache.shiro.config.Ini$Section:void clear()",
                        "org.apache.shiro.config.Ini$Section:java.lang.Object put(java.lang.Object,java.lang.Object)",
                        "org.apache.shiro.config.Ini:java.util.Collection values()",
                        "org.apache.shiro.SecurityUtils:org.apache.shiro.subject.Subject getSubject()",
                        "org.apache.shiro.session.InvalidSessionException:void <init>()",
                        "org.apache.shiro.realm.AuthenticatingRealm:void <clinit>()",
                        "org.apache.shiro.config.Ini:boolean isEmpty()",
                        "org.apache.shiro.util.MapContext:boolean isEmpty()",
                        "org.apache.shiro.util.MapContext:java.util.Set keySet()",
                        "org.apache.shiro.config.Ini$Section:java.util.Set keySet()",
                        "org.apache.shiro.config.Ini$Section:java.lang.String get(java.lang.Object)",
                        "org.apache.shiro.config.Ini:boolean containsKey(java.lang.Object)"
                    ]
                },
                "org.apache.zookeeper:zookeeper:3.4.9": {
                    "used-method num": 128,
                    "used method": [
                        "org.apache.zookeeper.txn.ErrorTxn:java.lang.String toString()",
                        "org.apache.zookeeper.MultiTransactionRecord:java.util.Iterator iterator()",
                        "org.apache.zookeeper.proto.GetSASLRequest:java.lang.String toString()",
                        "org.apache.zookeeper.proto.GetDataResponse:java.lang.String toString()",
                        "org.apache.zookeeper.proto.SetACLResponse:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.OpResult$SetDataResult:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.proto.GetDataRequest:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.proto.GetChildrenRequest:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.proto.ExistsRequest:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.proto.ConnectRequest:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.proto.SetDataResponse:boolean equals(java.lang.Object)",
                        "org.ietf.jgss.Oid:boolean equals(java.lang.Object)",
                        "org.ietf.jgss.Oid:java.lang.String toString()",
                        "org.apache.zookeeper.txn.MultiTxn:java.lang.String toString()",
                        "org.apache.zookeeper.proto.AuthPacket:java.lang.String toString()",
                        "org.apache.zookeeper.txn.DeleteTxn:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.txn.CheckVersionTxn:java.lang.String toString()",
                        "org.apache.zookeeper.txn.SetACLTxn:java.lang.String toString()",
                        "org.apache.zookeeper.txn.CreateTxnV0:java.lang.String toString()",
                        "org.apache.zookeeper.proto.CreateResponse:java.lang.String toString()",
                        "org.apache.zookeeper.proto.ReplyHeader:java.lang.String toString()",
                        "org.apache.zookeeper.server.Request:java.lang.String toString()",
                        "org.apache.zookeeper.KeeperException:java.lang.String getMessage()",
                        "org.ietf.jgss.GSSException:java.lang.String getMessage()",
                        "org.apache.zookeeper.StatsTrack:java.lang.String toString()",
                        "org.apache.zookeeper.proto.SyncResponse:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.OpResult$ErrorResult:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.ClientCnxn$Packet:java.lang.String toString()",
                        "org.apache.zookeeper.proto.GetACLRequest:java.lang.String toString()",
                        "org.apache.zookeeper.proto.GetChildrenResponse:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.server.quorum.LearnerHandler:java.lang.String toString()",
                        "org.apache.zookeeper.data.Id:java.lang.String toString()",
                        "org.apache.zookeeper.proto.ErrorResponse:java.lang.String toString()",
                        "org.apache.zookeeper.common.PathTrie$TrieNode:java.lang.String toString()",
                        "org.apache.zookeeper.server.auth.KerberosName$Rule:java.lang.String toString()",
                        "org.apache.zookeeper.data.Stat:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.proto.SetACLResponse:java.lang.String toString()",
                        "org.apache.zookeeper.server.WatchManager:java.lang.String toString()",
                        "org.apache.zookeeper.proto.CreateRequest:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.server.quorum.Observer:java.lang.String toString()",
                        "org.apache.zookeeper.proto.ExistsResponse:java.lang.String toString()",
                        "org.apache.zookeeper.ClientCnxn:java.lang.String toString()",
                        "org.apache.zookeeper.proto.SetSASLResponse:java.lang.String toString()",
                        "org.apache.zookeeper.server.quorum.QuorumPacket:java.lang.String toString()",
                        "org.apache.zookeeper.proto.WatcherEvent:java.lang.String toString()",
                        "org.apache.zookeeper.txn.CreateSessionTxn:java.lang.String toString()",
                        "org.apache.zookeeper.server.SessionTrackerImpl:java.lang.String toString()",
                        "org.apache.zookeeper.server.quorum.Vote:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.proto.SetDataRequest:java.lang.String toString()",
                        "org.apache.zookeeper.proto.GetChildrenResponse:java.lang.String toString()",
                        "org.apache.zookeeper.MultiTransactionRecord:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.server.auth.KerberosName:java.lang.String toString()",
                        "org.apache.zookeeper.proto.SetWatches:java.lang.String toString()",
                        "org.apache.zookeeper.server.quorum.QuorumStats:java.lang.String toString()",
                        "org.apache.zookeeper.server.ServerStats:java.lang.String toString()",
                        "org.apache.zookeeper.proto.ExistsRequest:java.lang.String toString()",
                        "org.apache.zookeeper.proto.SetDataRequest:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.proto.GetChildren2Response:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.server.quorum.LearnerInfo:java.lang.String toString()",
                        "org.apache.zookeeper.server.persistence.FileHeader:java.lang.String toString()",
                        "org.apache.zookeeper.txn.CreateTxn:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.proto.GetChildren2Response:java.lang.String toString()",
                        "org.apache.zookeeper.proto.GetChildrenRequest:java.lang.String toString()",
                        "org.apache.zookeeper.proto.SetDataResponse:java.lang.String toString()",
                        "org.apache.zookeeper.proto.SyncRequest:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.server.quorum.Vote:java.lang.String toString()",
                        "org.apache.zookeeper.proto.DeleteRequest:java.lang.String toString()",
                        "org.apache.zookeeper.Op$Delete:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.txn.CreateTxnV0:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.proto.SetSASLResponse:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.proto.SetACLRequest:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.proto.CreateRequest:java.lang.String toString()",
                        "org.apache.zookeeper.Op$SetData:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.data.ACL:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.data.Stat:java.lang.String toString()",
                        "org.apache.zookeeper.data.StatPersistedV1:java.lang.String toString()",
                        "org.apache.zookeeper.Op$Check:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.proto.AuthPacket:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.txn.CheckVersionTxn:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.txn.MultiTxn:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.proto.GetACLResponse:java.lang.String toString()",
                        "org.apache.zookeeper.proto.CheckVersionRequest:java.lang.String toString()",
                        "org.apache.zookeeper.MultiResponse:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.MultiResponse:java.util.Iterator iterator()",
                        "org.apache.zookeeper.txn.CreateTxn:java.lang.String toString()",
                        "org.apache.zookeeper.proto.SetWatches:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.txn.Txn:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.txn.TxnHeader:java.lang.String toString()",
                        "org.apache.zookeeper.txn.Txn:java.lang.String toString()",
                        "org.apache.zookeeper.server.quorum.Follower:java.lang.String toString()",
                        "org.apache.zookeeper.proto.CheckVersionRequest:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.proto.ConnectResponse:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.proto.CreateResponse:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.OpResult$CreateResult:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.proto.ExistsResponse:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.OpResult$CheckResult:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.Environment$Entry:java.lang.String toString()",
                        "org.apache.zookeeper.OpResult$DeleteResult:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.data.StatPersisted:java.lang.String toString()",
                        "org.apache.zookeeper.server.ReferenceCountedACLCache$AtomicLongWithEquals:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.proto.DeleteRequest:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.proto.GetChildren2Request:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.proto.SyncRequest:java.lang.String toString()",
                        "org.apache.zookeeper.proto.GetACLResponse:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.server.quorum.FastLeaderElection$Notification:java.lang.String toString()",
                        "org.apache.zookeeper.proto.ConnectResponse:java.lang.String toString()",
                        "org.apache.zookeeper.proto.MultiHeader:java.lang.String toString()",
                        "org.ietf.jgss.GSSException:java.lang.String toString()",
                        "org.apache.zookeeper.Op$Create:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.proto.GetChildren2Request:java.lang.String toString()",
                        "org.apache.zookeeper.proto.SetACLRequest:java.lang.String toString()",
                        "org.apache.zookeeper.txn.SetDataTxn:java.lang.String toString()",
                        "org.apache.zookeeper.proto.GetSASLRequest:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.proto.GetDataRequest:java.lang.String toString()",
                        "org.apache.zookeeper.data.ACL:java.lang.String toString()",
                        "org.apache.zookeeper.data.Id:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.proto.RequestHeader:java.lang.String toString()",
                        "org.apache.zookeeper.proto.ConnectRequest:java.lang.String toString()",
                        "org.apache.zookeeper.server.quorum.QuorumPacket:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.proto.SyncResponse:java.lang.String toString()",
                        "org.apache.zookeeper.proto.GetDataResponse:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.server.quorum.Leader$Proposal:java.lang.String toString()",
                        "org.apache.zookeeper.txn.DeleteTxn:java.lang.String toString()",
                        "org.apache.zookeeper.proto.GetACLRequest:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.txn.SetDataTxn:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.WatchedEvent:java.lang.String toString()",
                        "org.apache.zookeeper.proto.WatcherEvent:boolean equals(java.lang.Object)",
                        "org.apache.zookeeper.txn.SetACLTxn:boolean equals(java.lang.Object)"
                    ]
                },
                "org.quartz-scheduler:quartz:2.2.3": {
                    "used-method num": 56,
                    "used method": [
                        "org.quartz.impl.StdScheduler:boolean checkExists(org.quartz.JobKey)",
                        "org.quartz.utils.DirtyFlagMap:java.lang.Object clone()",
                        "org.quartz.utils.DirtyFlagMap:boolean isEmpty()",
                        "org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntryIterator:org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntry next()",
                        "org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntry:java.lang.Object getValue()",
                        "org.quartz.impl.JobExecutionContextImpl:java.lang.String toString()",
                        "org.quartz.SchedulerException:java.lang.String toString()",
                        "org.quartz.utils.DirtyFlagMap:java.util.Collection values()",
                        "org.quartz.impl.JobDetailImpl:java.lang.String toString()",
                        "org.quartz.utils.DirtyFlagMap:boolean containsKey(java.lang.Object)",
                        "org.quartz.impl.StdScheduler:java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)",
                        "org.quartz.TriggerBuilder:org.quartz.TriggerBuilder newTrigger()",
                        "org.quartz.utils.DirtyFlagMap:java.util.Set keySet()",
                        "org.quartz.impl.matchers.StringMatcher:boolean equals(java.lang.Object)",
                        "org.quartz.impl.JobDetailImpl:org.quartz.JobDataMap getJobDataMap()",
                        "org.quartz.TriggerBuilder:org.quartz.TriggerBuilder startNow()",
                        "org.quartz.utils.DirtyFlagMap:java.util.Set entrySet()",
                        "org.quartz.impl.RemoteScheduler:void start()",
                        "org.quartz.utils.DirtyFlagMap:java.lang.Object get(java.lang.Object)",
                        "org.quartz.utils.StringKeyDirtyFlagMap:java.lang.Object put(java.lang.String,java.lang.Object)",
                        "org.quartz.JobBuilder:org.quartz.JobDetail build()",
                        "org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntrySet:java.util.Iterator iterator()",
                        "org.quartz.utils.DirtyFlagMap$DirtyFlagIterator:boolean hasNext()",
                        "org.quartz.impl.matchers.EverythingMatcher:boolean equals(java.lang.Object)",
                        "org.quartz.utils.StringKeyDirtyFlagMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
                        "org.quartz.utils.DirtyFlagMap:int size()",
                        "org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntry:boolean equals(java.lang.Object)",
                        "org.quartz.utils.Key:boolean equals(java.lang.Object)",
                        "org.quartz.impl.StdScheduler:void start()",
                        "org.quartz.TriggerBuilder:org.quartz.TriggerBuilder withIdentity(java.lang.String,java.lang.String)",
                        "org.quartz.CronExpression:java.lang.Object clone()",
                        "org.quartz.impl.triggers.AbstractTrigger:boolean equals(java.lang.Object)",
                        "org.quartz.TriggerBuilder:org.quartz.Trigger build()",
                        "org.quartz.JobBuilder:org.quartz.JobBuilder newJob(java.lang.Class)",
                        "org.quartz.impl.triggers.CronTriggerImpl:java.lang.Object clone()",
                        "org.quartz.utils.DirtyFlagMap$DirtyFlagCollection:int size()",
                        "org.quartz.impl.RemoteScheduler:java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)",
                        "org.quartz.impl.StdSchedulerFactory:org.quartz.Scheduler getScheduler()",
                        "org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntry:java.lang.Object getKey()",
                        "org.quartz.SchedulerMetaData:java.lang.String toString()",
                        "org.quartz.impl.JobDetailImpl:boolean equals(java.lang.Object)",
                        "org.quartz.JobBuilder:org.quartz.JobBuilder withIdentity(java.lang.String,java.lang.String)",
                        "org.quartz.impl.StdSchedulerFactory:void <init>()",
                        "org.quartz.utils.counter.sampled.TimeStampedCounterValue:java.lang.String toString()",
                        "org.quartz.impl.JobDetailImpl:org.quartz.JobKey getKey()",
                        "org.quartz.TriggerBuilder:org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)",
                        "org.quartz.impl.triggers.AbstractTrigger:java.lang.String toString()",
                        "org.quartz.utils.DirtyFlagMap:void clear()",
                        "org.quartz.utils.StringKeyDirtyFlagMap:boolean equals(java.lang.Object)",
                        "org.quartz.CronScheduleBuilder:org.quartz.CronScheduleBuilder cronSchedule(java.lang.String)",
                        "org.quartz.impl.RemoteScheduler:boolean checkExists(org.quartz.JobKey)",
                        "org.quartz.utils.DirtyFlagMap$DirtyFlagCollection:java.util.Iterator iterator()",
                        "org.quartz.impl.triggers.AbstractTrigger:java.lang.Object clone()",
                        "org.quartz.impl.JobDetailImpl:java.lang.Object clone()",
                        "org.quartz.utils.DirtyFlagMap$DirtyFlagIterator:java.lang.Object next()",
                        "org.quartz.utils.Key:java.lang.String toString()"
                    ]
                },
                "junit:junit:4.11": {
                    "used-method num": 0,
                    "used method": []
                },
                "org.springframework:spring-web:4.3.8.RELEASE": {
                    "used-method num": 29,
                    "used method": [
                        "org.springframework.http.ResponseEntity:void <init>(java.lang.Object,org.springframework.util.MultiValueMap,org.springframework.http.HttpStatus)",
                        "org.springframework.http.HttpHeaders:void <init>()",
                        "org.springframework.http.MediaType:void <clinit>()",
                        "org.springframework.web.context.request.RequestContextListener:void <clinit>()",
                        "org.springframework.web.util.HierarchicalUriComponents$FullPathComponent:boolean equals(java.lang.Object)",
                        "org.springframework.http.HttpHeaders:boolean equals(java.lang.Object)",
                        "org.springframework.web.util.HierarchicalUriComponents$1:boolean equals(java.lang.Object)",
                        "org.springframework.web.context.request.RequestContextListener:void <init>()",
                        "org.springframework.web.util.UriComponents:java.lang.String toString()",
                        "org.springframework.web.util.HierarchicalUriComponents:boolean equals(java.lang.Object)",
                        "org.springframework.http.HttpEntity:boolean equals(java.lang.Object)",
                        "org.springframework.web.context.request.ServletRequestAttributes:javax.servlet.http.HttpServletResponse getResponse()",
                        "org.springframework.http.HttpEntity:java.lang.String toString()",
                        "org.springframework.http.HttpHeaders:void <clinit>()",
                        "org.springframework.web.context.request.RequestContextHolder:org.springframework.web.context.request.RequestAttributes getRequestAttributes()",
                        "org.springframework.http.HttpHeaders:void setContentType(org.springframework.http.MediaType)",
                        "org.springframework.web.context.request.RequestContextHolder:void <clinit>()",
                        "org.springframework.web.context.request.ServletRequestAttributes:java.lang.String toString()",
                        "org.springframework.web.context.request.ServletRequestAttributes:javax.servlet.http.HttpServletRequest getRequest()",
                        "org.springframework.http.ResponseEntity:boolean equals(java.lang.Object)",
                        "org.springframework.http.HttpHeaders:void setContentDispositionFormData(java.lang.String,java.lang.String)",
                        "org.springframework.http.HttpStatus:void <clinit>()",
                        "org.springframework.web.util.OpaqueUriComponents:boolean equals(java.lang.Object)",
                        "org.springframework.http.HttpEntity:void <clinit>()",
                        "org.springframework.http.ResponseEntity:java.lang.String toString()",
                        "org.springframework.http.HttpStatus:java.lang.String toString()",
                        "org.springframework.web.util.UriComponentsBuilder:java.lang.Object clone()",
                        "org.springframework.web.util.HierarchicalUriComponents$PathSegmentComponent:boolean equals(java.lang.Object)",
                        "org.springframework.http.HttpHeaders:java.lang.String toString()"
                    ]
                },
                "org.apache.httpcomponents:httpclient:4.5.2": {
                    "used-method num": 4,
                    "used method": [
                        "org.ietf.jgss.Oid:boolean equals(java.lang.Object)",
                        "org.ietf.jgss.Oid:java.lang.String toString()",
                        "org.ietf.jgss.GSSException:java.lang.String getMessage()",
                        "org.ietf.jgss.GSSException:java.lang.String toString()"
                    ]
                }
            }
        },
        "org.springframework.boot:spring-boot-starter-parent": {
            "vulnerable dependencies": {
                "org.apache.shiro:shiro-core:1.4.0": {
                    "used-method num": 0,
                    "used method": []
                },
                "org.apache.zookeeper:zookeeper:3.4.9": {
                    "used-method num": 0,
                    "used method": []
                },
                "org.quartz-scheduler:quartz:2.2.3": {
                    "used-method num": 0,
                    "used method": []
                },
                "junit:junit:4.11": {
                    "used-method num": 0,
                    "used method": []
                },
                "org.springframework:spring-web:4.3.8.RELEASE": {
                    "used-method num": 0,
                    "used method": []
                },
                "org.apache.httpcomponents:httpclient:4.5.2": {
                    "used-method num": 0,
                    "used method": []
                }
            }
        }
    }
}