{
    "project name": "ShifuML_guagua",
    "modules": {
        "ml.shifu:guagua-core": {
            "vulnerable dependencies": {
                "org.apache.zookeeper:zookeeper:3.4.5": {
                    "used-method num": 112,
                    "used method": [
                        "org.apache.zookeeper.proto.SetACLResponse:java.lang.String toString()",
                        "org.apache.zookeeper.server.quorum.QuorumPeer:void run()",
                        "org.apache.zookeeper.server.WatchManager:java.lang.String toString()",
                        "org.apache.zookeeper.server.quorum.CommitProcessor:void run()",
                        "org.apache.zookeeper.server.quorum.LearnerInfo:java.lang.String toString()",
                        "org.apache.zookeeper.server.SessionTrackerImpl:void run()",
                        "org.apache.zookeeper.server.quorum.Observer:java.lang.String toString()",
                        "org.apache.zookeeper.ClientCnxn$SendThread:void run()",
                        "org.apache.zookeeper.server.quorum.QuorumPeer$ResponderThread:void run()",
                        "org.apache.zookeeper.txn.ErrorTxn:java.lang.String toString()",
                        "org.apache.zookeeper.server.persistence.FileHeader:java.lang.String toString()",
                        "org.apache.zookeeper.proto.GetChildren2Response:java.lang.String toString()",
                        "org.apache.zookeeper.proto.GetChildrenRequest:java.lang.String toString()",
                        "org.apache.zookeeper.MultiTransactionRecord:java.util.Iterator iterator()",
                        "org.apache.zookeeper.proto.GetSASLRequest:java.lang.String toString()",
                        "org.apache.zookeeper.WatchedEvent:org.apache.zookeeper.Watcher$Event$EventType getType()",
                        "org.apache.zookeeper.proto.SetDataResponse:java.lang.String toString()",
                        "org.apache.zookeeper.server.quorum.Vote:java.lang.String toString()",
                        "org.apache.zookeeper.proto.GetDataResponse:java.lang.String toString()",
                        "org.apache.zookeeper.proto.DeleteRequest:java.lang.String toString()",
                        "org.apache.zookeeper.proto.ExistsResponse:java.lang.String toString()",
                        "org.apache.zookeeper.ZooKeeper:long getSessionId()",
                        "org.apache.zookeeper.server.SyncRequestProcessor$1:void run()",
                        "org.apache.zookeeper.ClientCnxn:java.lang.String toString()",
                        "org.apache.zookeeper.proto.SetSASLResponse:java.lang.String toString()",
                        "org.apache.zookeeper.server.quorum.QuorumPacket:java.lang.String toString()",
                        "org.apache.zookeeper.Environment$Entry:java.lang.String toString()",
                        "org.apache.zookeeper.proto.WatcherEvent:java.lang.String toString()",
                        "org.apache.zookeeper.server.quorum.QuorumPeer$1:void run()",
                        "org.apache.zookeeper.server.quorum.ObserverRequestProcessor:void run()",
                        "org.apache.zookeeper.ClientCnxn$SendThread:void close()",
                        "org.apache.zookeeper.txn.MultiTxn:java.lang.String toString()",
                        "org.apache.zookeeper.txn.CreateSessionTxn:java.lang.String toString()",
                        "org.apache.zookeeper.ZooDefs$Ids:void <clinit>()",
                        "org.apache.zookeeper.proto.CreateRequest:java.lang.String toString()",
                        "org.apache.zookeeper.Watcher$Event$EventType:void <clinit>()",
                        "org.apache.zookeeper.proto.AuthPacket:java.lang.String toString()",
                        "org.apache.zookeeper.data.Stat:java.lang.String toString()",
                        "org.apache.zookeeper.WatchedEvent:java.lang.String getPath()",
                        "org.apache.zookeeper.server.SessionTrackerImpl:java.lang.String toString()",
                        "org.apache.zookeeper.data.StatPersisted:java.lang.String toString()",
                        "org.apache.zookeeper.txn.CheckVersionTxn:java.lang.String toString()",
                        "org.apache.zookeeper.server.quorum.ReadOnlyRequestProcessor:void run()",
                        "org.apache.zookeeper.ZooKeeper:org.apache.zookeeper.data.Stat exists(java.lang.String,org.apache.zookeeper.Watcher)",
                        "org.apache.zookeeper.proto.SetDataRequest:java.lang.String toString()",
                        "org.apache.zookeeper.txn.SetACLTxn:java.lang.String toString()",
                        "org.apache.zookeeper.ZooKeeper:void <init>(java.lang.String,int,org.apache.zookeeper.Watcher)",
                        "org.apache.zookeeper.proto.SyncRequest:java.lang.String toString()",
                        "org.apache.zookeeper.proto.GetChildrenResponse:java.lang.String toString()",
                        "org.apache.zookeeper.ZooKeeper:org.apache.zookeeper.data.Stat setData(java.lang.String,byte[],int)",
                        "org.apache.zookeeper.ZooKeeper:void delete(java.lang.String,int)",
                        "org.apache.zookeeper.ZooKeeper:org.apache.zookeeper.data.Stat exists(java.lang.String,boolean)",
                        "org.apache.zookeeper.proto.ConnectResponse:java.lang.String toString()",
                        "org.apache.zookeeper.server.quorum.QuorumCnxManager$Listener:void run()",
                        "org.apache.zookeeper.txn.CreateTxnV0:java.lang.String toString()",
                        "org.apache.zookeeper.proto.MultiHeader:java.lang.String toString()",
                        "org.apache.zookeeper.ZooKeeper:byte[] getData(java.lang.String,boolean,org.apache.zookeeper.data.Stat)",
                        "org.apache.zookeeper.server.quorum.QuorumCnxManager$RecvWorker:void run()",
                        "org.apache.zookeeper.proto.GetACLResponse:java.lang.String toString()",
                        "org.apache.zookeeper.proto.CheckVersionRequest:java.lang.String toString()",
                        "org.apache.zookeeper.proto.GetChildren2Request:java.lang.String toString()",
                        "org.apache.zookeeper.Shell$1:void run()",
                        "org.apache.zookeeper.proto.CreateResponse:java.lang.String toString()",
                        "org.apache.zookeeper.proto.SetACLRequest:java.lang.String toString()",
                        "org.apache.zookeeper.proto.ReplyHeader:java.lang.String toString()",
                        "org.apache.zookeeper.txn.SetDataTxn:java.lang.String toString()",
                        "org.apache.zookeeper.server.Request:java.lang.String toString()",
                        "org.apache.zookeeper.MultiResponse:java.util.Iterator iterator()",
                        "org.apache.zookeeper.txn.CreateTxn:java.lang.String toString()",
                        "org.apache.zookeeper.ZooKeeper:java.lang.String create(java.lang.String,byte[],java.util.List,org.apache.zookeeper.CreateMode)",
                        "org.apache.zookeeper.proto.GetDataRequest:java.lang.String toString()",
                        "org.apache.zookeeper.server.quorum.Leader$LearnerCnxAcceptor:void run()",
                        "org.apache.zookeeper.server.quorum.QuorumCnxManager$SendWorker:void run()",
                        "org.apache.zookeeper.data.ACL:java.lang.String toString()",
                        "org.apache.zookeeper.StatsTrack:java.lang.String toString()",
                        "org.apache.zookeeper.server.auth.KerberosName:java.lang.String toString()",
                        "org.apache.zookeeper.WatchedEvent:org.apache.zookeeper.Watcher$Event$KeeperState getState()",
                        "org.apache.zookeeper.proto.RequestHeader:java.lang.String toString()",
                        "org.apache.zookeeper.server.quorum.QuorumPeerMain:void main(java.lang.String[])",
                        "org.apache.zookeeper.ClientCnxn$EventThread:void run()",
                        "org.apache.zookeeper.ClientCnxn$Packet:java.lang.String toString()",
                        "org.apache.zookeeper.server.quorum.LearnerHandler$1:void run()",
                        "org.apache.zookeeper.proto.GetACLRequest:java.lang.String toString()",
                        "org.apache.zookeeper.proto.SetWatches:java.lang.String toString()",
                        "org.apache.zookeeper.server.PrepRequestProcessor:void run()",
                        "org.apache.zookeeper.server.quorum.LearnerHandler:void run()",
                        "org.apache.zookeeper.proto.ConnectRequest:java.lang.String toString()",
                        "org.apache.zookeeper.server.quorum.QuorumStats:java.lang.String toString()",
                        "org.apache.zookeeper.Watcher$Event$KeeperState:void <clinit>()",
                        "org.apache.zookeeper.proto.SyncResponse:java.lang.String toString()",
                        "org.apache.zookeeper.ZooKeeper:void <clinit>()",
                        "org.apache.zookeeper.server.ServerStats:java.lang.String toString()",
                        "org.apache.zookeeper.server.quorum.LearnerHandler:java.lang.String toString()",
                        "org.apache.zookeeper.server.quorum.Leader$Proposal:java.lang.String toString()",
                        "org.apache.zookeeper.txn.DeleteTxn:java.lang.String toString()",
                        "org.apache.zookeeper.txn.TxnHeader:java.lang.String toString()",
                        "org.apache.zookeeper.ZooKeeper:byte[] getData(java.lang.String,org.apache.zookeeper.Watcher,org.apache.zookeeper.data.Stat)",
                        "org.apache.zookeeper.txn.Txn:java.lang.String toString()",
                        "org.apache.zookeeper.ZooKeeper:void close()",
                        "org.apache.zookeeper.server.quorum.Follower:java.lang.String toString()",
                        "org.apache.zookeeper.data.Id:java.lang.String toString()",
                        "org.apache.zookeeper.ZooKeeper:java.util.List getChildren(java.lang.String,boolean)",
                        "org.apache.zookeeper.proto.ExistsRequest:java.lang.String toString()",
                        "org.apache.zookeeper.ZooKeeper:java.lang.String toString()",
                        "org.apache.zookeeper.server.SyncRequestProcessor:void run()",
                        "org.apache.zookeeper.server.quorum.QuorumPeer:void start()",
                        "org.apache.zookeeper.WatchedEvent:java.lang.String toString()",
                        "org.apache.zookeeper.proto.ErrorResponse:java.lang.String toString()",
                        "org.apache.zookeeper.common.PathTrie$TrieNode:java.lang.String toString()",
                        "org.apache.zookeeper.server.auth.KerberosName$Rule:java.lang.String toString()",
                        "org.apache.zookeeper.server.quorum.FollowerRequestProcessor:void run()",
                        "org.apache.zookeeper.CreateMode:void <clinit>()"
                    ],
                    "CVE": [
                        "CVE-2019-0201"
                    ],
                    "used vul-method": [
                        "org.apache.zookeeper.server.quorum.CommitProcessor:void run()",
                        "org.apache.zookeeper.server.PrepRequestProcessor:void run()",
                        "org.apache.zookeeper.server.SyncRequestProcessor:void run()"
                    ],
                    "vul-called frequency": 9,
                    "related vul root method": {
                        "CVE-2019-0201": [
                            "org.apache.zookeeper.server.FinalRequestProcessor:void processRequest(org.apache.zookeeper.server.Request)"
                        ]
                    },
                    "CVE-API": {
                        "CVE-2019-0201": [
                            "org.apache.zookeeper.server.quorum.CommitProcessor:void run()",
                            "org.apache.zookeeper.server.PrepRequestProcessor:void run()",
                            "org.apache.zookeeper.server.SyncRequestProcessor:void run()"
                        ]
                    }
                },
                "org.apache.commons:commons-compress:1.5": {
                    "used-method num": 2,
                    "used method": [
                        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void <init>(java.io.InputStream)",
                        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void <init>(java.io.OutputStream)"
                    ]
                },
                "io.netty:netty:3.6.2.Final": {
                    "used-method num": 108,
                    "used method": [
                        "org.jboss.netty.buffer.ReadOnlyChannelBuffer:org.jboss.netty.buffer.ChannelBuffer slice(int,int)",
                        "org.jboss.netty.channel.DefaultChannelPipeline:java.lang.String toString()",
                        "org.jboss.netty.util.HashedWheelTimer$HashedWheelTimeout:java.lang.String toString()",
                        "org.jboss.netty.buffer.ChannelBufferOutputStream:void writeBoolean(boolean)",
                        "org.jboss.netty.buffer.LittleEndianHeapChannelBuffer:void setInt(int,int)",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$KeySet:java.util.Iterator iterator()",
                        "org.jboss.netty.channel.DownstreamChannelStateEvent:java.lang.Object getValue()",
                        "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void <clinit>()",
                        "org.jboss.netty.channel.UpstreamChannelStateEvent:org.jboss.netty.channel.ChannelState getState()",
                        "org.jboss.netty.buffer.ChannelBufferOutputStream:void writeByte(int)",
                        "org.jboss.netty.util.MapBackedSet:java.util.Iterator iterator()",
                        "org.jboss.netty.channel.AbstractChannel:org.jboss.netty.channel.ChannelFuture write(java.lang.Object)",
                        "org.jboss.netty.channel.DownstreamChannelStateEvent:java.lang.String toString()",
                        "org.jboss.netty.buffer.SlicedChannelBuffer:void setInt(int,int)",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:java.lang.String toString()",
                        "org.jboss.netty.channel.AbstractChannel:org.jboss.netty.channel.ChannelFuture close()",
                        "org.jboss.netty.util.internal.ConcurrentHashMap$KeySet:java.util.Iterator iterator()",
                        "org.jboss.netty.buffer.BigEndianHeapChannelBuffer:void setInt(int,int)",
                        "org.jboss.netty.buffer.DuplicatedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer slice(int,int)",
                        "org.jboss.netty.buffer.ChannelBufferOutputStream:void <init>(org.jboss.netty.buffer.ChannelBuffer)",
                        "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void <init>()",
                        "org.jboss.netty.buffer.ReadOnlyChannelBuffer:void setInt(int,int)",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap:void clear()",
                        "org.jboss.netty.util.internal.ConcurrentHashMap$KeyIterator:java.lang.Object next()",
                        "org.jboss.netty.channel.DefaultExceptionEvent:java.lang.String toString()",
                        "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:java.lang.String toString()",
                        "org.jboss.netty.buffer.CompositeChannelBuffer:org.jboss.netty.buffer.ChannelBuffer slice(int,int)",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$EntryIterator:java.util.Map$Entry next()",
                        "org.jboss.netty.channel.DownstreamMessageEvent:java.lang.Object getMessage()",
                        "org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext:org.jboss.netty.channel.Channel getChannel()",
                        "org.jboss.netty.buffer.AbstractChannelBuffer:void readBytes(byte[])",
                        "org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder:void <init>(int,int,int,int,int)",
                        "org.jboss.netty.buffer.TruncatedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer slice(int,int)",
                        "org.jboss.netty.buffer.ChannelBufferOutputStream:void writeInt(int)",
                        "org.jboss.netty.channel.ChannelState:void <clinit>()",
                        "org.jboss.netty.channel.DownstreamMessageEvent:java.lang.String toString()",
                        "org.jboss.netty.buffer.AbstractChannelBuffer:int writerIndex()",
                        "org.jboss.netty.bootstrap.ServerBootstrap:org.jboss.netty.channel.Channel bind(java.net.SocketAddress)",
                        "org.jboss.netty.bootstrap.ServerBootstrap:void <init>(org.jboss.netty.channel.ChannelFactory)",
                        "org.jboss.netty.channel.UpstreamChannelStateEvent:java.lang.String toString()",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap:boolean containsKey(java.lang.Object)",
                        "org.jboss.netty.channel.UpstreamMessageEvent:java.lang.String toString()",
                        "org.jboss.netty.channel.DownstreamChannelStateEvent:org.jboss.netty.channel.ChannelState getState()",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
                        "org.jboss.netty.buffer.AbstractChannelBuffer:int readableBytes()",
                        "org.jboss.netty.buffer.ChannelBuffers:void <clinit>()",
                        "org.jboss.netty.channel.DefaultChannelFuture:org.jboss.netty.channel.ChannelFuture awaitUninterruptibly()",
                        "org.jboss.netty.util.internal.ConcurrentHashMap$ValueIterator:java.lang.Object next()",
                        "org.jboss.netty.buffer.DynamicChannelBuffer:org.jboss.netty.buffer.ChannelBuffer slice(int,int)",
                        "org.jboss.netty.channel.DefaultWriteCompletionEvent:java.lang.String toString()",
                        "org.jboss.netty.channel.socket.nio.NioServerSocketChannel:org.jboss.netty.channel.socket.ServerSocketChannelConfig getConfig()",
                        "org.jboss.netty.util.internal.ConcurrentHashMap$KeyIterator:java.lang.Object nextElement()",
                        "org.jboss.netty.handler.codec.serialization.ObjectEncoder:void <init>()",
                        "org.jboss.netty.channel.DefaultChannelFuture:org.jboss.netty.channel.Channel getChannel()",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap:java.util.Set entrySet()",
                        "org.jboss.netty.channel.DefaultExceptionEvent:java.lang.Throwable getCause()",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$HashIterator:boolean hasNext()",
                        "org.jboss.netty.channel.CompleteChannelFuture:boolean await(long,java.util.concurrent.TimeUnit)",
                        "org.jboss.netty.buffer.TruncatedChannelBuffer:void setInt(int,int)",
                        "org.jboss.netty.channel.CompleteChannelFuture:org.jboss.netty.channel.Channel getChannel()",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$ValueIterator:java.lang.Object nextElement()",
                        "org.jboss.netty.handler.codec.frame.FrameDecoder:void <clinit>()",
                        "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress)",
                        "org.jboss.netty.buffer.HeapChannelBuffer:org.jboss.netty.buffer.ChannelBuffer slice(int,int)",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Values:java.util.Iterator iterator()",
                        "org.jboss.netty.channel.DefaultChannelConfig:org.jboss.netty.buffer.ChannelBufferFactory getBufferFactory()",
                        "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
                        "org.jboss.netty.buffer.ByteBufferBackedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer slice(int,int)",
                        "org.jboss.netty.channel.DefaultChildChannelStateEvent:java.lang.String toString()",
                        "org.jboss.netty.buffer.DuplicatedChannelBuffer:void setInt(int,int)",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$KeyIterator:java.lang.Object nextElement()",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$HashIterator:boolean hasMoreElements()",
                        "org.jboss.netty.buffer.AbstractChannelBuffer:java.lang.String toString()",
                        "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void <init>(java.util.concurrent.Executor,java.util.concurrent.Executor)",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap:java.lang.Object get(java.lang.Object)",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$ValueIterator:java.lang.Object next()",
                        "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelPipeline pipeline(org.jboss.netty.channel.ChannelHandler[])",
                        "org.jboss.netty.util.internal.ConcurrentHashMap$ValueIterator:java.lang.Object nextElement()",
                        "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void <init>(java.util.concurrent.Executor,java.util.concurrent.Executor)",
                        "org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder:java.lang.Object decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)",
                        "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:java.lang.Object getKey()",
                        "org.jboss.netty.channel.DefaultExceptionEvent:org.jboss.netty.channel.Channel getChannel()",
                        "org.jboss.netty.buffer.ChannelBufferOutputStream:void write(byte[])",
                        "org.jboss.netty.bootstrap.Bootstrap:void setPipelineFactory(org.jboss.netty.channel.ChannelPipelineFactory)",
                        "org.jboss.netty.util.internal.ConcurrentHashMap$HashIterator:boolean hasMoreElements()",
                        "org.jboss.netty.channel.AbstractServerChannel:org.jboss.netty.channel.ChannelFuture write(java.lang.Object)",
                        "org.jboss.netty.channel.UpstreamMessageEvent:java.lang.Object getMessage()",
                        "org.jboss.netty.util.internal.ConcurrentHashMap$EntrySet:java.util.Iterator iterator()",
                        "org.jboss.netty.channel.DefaultServerChannelConfig:org.jboss.netty.buffer.ChannelBufferFactory getBufferFactory()",
                        "org.jboss.netty.buffer.AbstractChannelBuffer:int readInt()",
                        "org.jboss.netty.channel.AbstractChannel:java.lang.String toString()",
                        "org.jboss.netty.bootstrap.ClientBootstrap:void <init>(org.jboss.netty.channel.ChannelFactory)",
                        "org.jboss.netty.buffer.DynamicChannelBuffer:void setInt(int,int)",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$KeyIterator:java.lang.Object next()",
                        "org.jboss.netty.util.internal.ConcurrentHashMap$HashIterator:boolean hasNext()",
                        "org.jboss.netty.channel.socket.nio.NioSocketChannel:org.jboss.netty.channel.socket.nio.NioSocketChannelConfig getConfig()",
                        "org.jboss.netty.buffer.CompositeChannelBuffer:java.lang.String toString()",
                        "org.jboss.netty.channel.DefaultChannelFuture:boolean await(long,java.util.concurrent.TimeUnit)",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:java.lang.Object getKey()",
                        "org.jboss.netty.channel.UpstreamChannelStateEvent:java.lang.Object getValue()",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$EntrySet:java.util.Iterator iterator()",
                        "org.jboss.netty.util.internal.ConcurrentHashMap$EntryIterator:java.util.Map$Entry next()",
                        "org.jboss.netty.buffer.CompositeChannelBuffer:void setInt(int,int)",
                        "org.jboss.netty.buffer.SlicedChannelBuffer:org.jboss.netty.buffer.ChannelBuffer slice(int,int)",
                        "org.jboss.netty.channel.CompleteChannelFuture:org.jboss.netty.channel.ChannelFuture awaitUninterruptibly()",
                        "org.jboss.netty.buffer.ChannelBufferOutputStream:org.jboss.netty.buffer.ChannelBuffer buffer()",
                        "org.jboss.netty.util.internal.ConcurrentHashMap$Values:java.util.Iterator iterator()",
                        "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer dynamicBuffer(int,org.jboss.netty.buffer.ChannelBufferFactory)"
                    ]
                },
                "org.apache.hadoop:hadoop-hdfs:2.2.0": {
                    "used-method num": 0,
                    "used method": []
                },
                "org.apache.hadoop:hadoop-common:2.2.0": {
                    "used-method num": 0,
                    "used method": []
                }
            }
        },
        "ml.shifu:guagua-mapreduce": {
            "vulnerable dependencies": {
                "org.apache.zookeeper:zookeeper:3.4.5": {
                    "used-method num": 22,
                    "used method": [
                        "org.apache.zookeeper.server.quorum.QuorumPeer:void run()",
                        "org.apache.zookeeper.server.quorum.CommitProcessor:void run()",
                        "org.apache.zookeeper.server.SessionTrackerImpl:void run()",
                        "org.apache.zookeeper.ClientCnxn$SendThread:void run()",
                        "org.apache.zookeeper.server.quorum.QuorumPeer$ResponderThread:void run()",
                        "org.apache.zookeeper.server.SyncRequestProcessor$1:void run()",
                        "org.apache.zookeeper.server.quorum.QuorumPeer$1:void run()",
                        "org.apache.zookeeper.server.quorum.ObserverRequestProcessor:void run()",
                        "org.apache.zookeeper.server.quorum.ReadOnlyRequestProcessor:void run()",
                        "org.apache.zookeeper.server.quorum.QuorumCnxManager$Listener:void run()",
                        "org.apache.zookeeper.server.quorum.QuorumCnxManager$RecvWorker:void run()",
                        "org.apache.zookeeper.Shell$1:void run()",
                        "org.apache.zookeeper.KeeperException:java.lang.String getMessage()",
                        "org.apache.zookeeper.server.quorum.Leader$LearnerCnxAcceptor:void run()",
                        "org.apache.zookeeper.server.quorum.QuorumCnxManager$SendWorker:void run()",
                        "org.apache.zookeeper.ClientCnxn$EventThread:void run()",
                        "org.apache.zookeeper.server.quorum.LearnerHandler$1:void run()",
                        "org.apache.zookeeper.server.PrepRequestProcessor:void run()",
                        "org.apache.zookeeper.server.quorum.LearnerHandler:void run()",
                        "org.apache.zookeeper.server.SyncRequestProcessor:void run()",
                        "org.apache.zookeeper.server.quorum.QuorumPeer:void start()",
                        "org.apache.zookeeper.server.quorum.FollowerRequestProcessor:void run()"
                    ],
                    "CVE": [
                        "CVE-2019-0201"
                    ],
                    "used vul-method": [
                        "org.apache.zookeeper.server.quorum.CommitProcessor:void run()",
                        "org.apache.zookeeper.server.PrepRequestProcessor:void run()",
                        "org.apache.zookeeper.server.SyncRequestProcessor:void run()"
                    ],
                    "vul-called frequency": 3,
                    "related vul root method": {
                        "CVE-2019-0201": [
                            "org.apache.zookeeper.server.FinalRequestProcessor:void processRequest(org.apache.zookeeper.server.Request)"
                        ]
                    },
                    "CVE-API": {
                        "CVE-2019-0201": [
                            "org.apache.zookeeper.server.quorum.CommitProcessor:void run()",
                            "org.apache.zookeeper.server.PrepRequestProcessor:void run()",
                            "org.apache.zookeeper.server.SyncRequestProcessor:void run()"
                        ]
                    }
                },
                "org.apache.commons:commons-compress:1.5": {
                    "used-method num": 0,
                    "used method": []
                },
                "io.netty:netty:3.6.2.Final": {
                    "used-method num": 0,
                    "used method": []
                },
                "org.apache.hadoop:hadoop-hdfs:2.2.0": {
                    "used-method num": 0,
                    "used method": []
                },
                "org.apache.hadoop:hadoop-common:2.2.0": {
                    "used-method num": 132,
                    "used method": [
                        "org.apache.hadoop.fs.FileStatus:long getBlockSize()",
                        "org.apache.hadoop.conf.Configuration:java.lang.ClassLoader getClassLoader()",
                        "org.apache.hadoop.fs.FileSystem:org.apache.hadoop.fs.FSDataInputStream open(org.apache.hadoop.fs.Path)",
                        "org.apache.hadoop.conf.Configuration:java.util.Iterator iterator()",
                        "org.apache.hadoop.io.IOUtils:void closeStream(java.io.Closeable)",
                        "org.apache.hadoop.conf.Configuration:void setBoolean(java.lang.String,boolean)",
                        "org.apache.hadoop.io.NullWritable:void write(java.io.DataOutput)",
                        "org.apache.hadoop.fs.FileStatus:long getLen()",
                        "org.apache.hadoop.io.LongWritable:void <init>()",
                        "org.apache.hadoop.io.Text:void <clinit>()",
                        "org.apache.hadoop.conf.Configuration:boolean getBoolean(java.lang.String,boolean)",
                        "org.apache.hadoop.fs.FSDataInputStream:void seek(long)",
                        "org.apache.hadoop.io.LongWritable:void <clinit>()",
                        "org.apache.hadoop.ipc.ProtobufRpcEngine$RpcResponseMessageWrapper:void write(java.io.DataOutput)",
                        "org.apache.hadoop.security.token.Token:int hashCode()",
                        "org.apache.hadoop.fs.FSDataOutputStream:void close()",
                        "org.apache.hadoop.io.compress.DefaultCodec:org.apache.hadoop.io.compress.CompressionInputStream createInputStream(java.io.InputStream)",
                        "org.apache.hadoop.io.BytesWritable:void write(java.io.DataOutput)",
                        "org.apache.hadoop.conf.Configuration:void setLong(java.lang.String,long)",
                        "org.apache.hadoop.conf.Configuration:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.security.Credentials:void write(java.io.DataOutput)",
                        "org.apache.hadoop.fs.permission.FsPermission$ImmutableFsPermission:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.ipc.Client$Connection:void run()",
                        "org.apache.hadoop.fs.FileSystem:void <clinit>()",
                        "org.apache.hadoop.fs.FileSystem:org.apache.hadoop.fs.FileStatus[] globStatus(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter)",
                        "org.apache.hadoop.conf.Configuration:java.lang.String get(java.lang.String)",
                        "org.apache.hadoop.conf.Configuration:void setClassLoader(java.lang.ClassLoader)",
                        "org.apache.hadoop.fs.FileStatus:int hashCode()",
                        "org.apache.hadoop.fs.LocatedFileStatus:boolean equals(java.lang.Object)",
                        "org.apache.hadoop.fs.FileSystem:void setDefaultUri(org.apache.hadoop.conf.Configuration,java.lang.String)",
                        "org.apache.hadoop.util.Shell$1:void run()",
                        "org.apache.hadoop.io.SequenceFile$Metadata:void write(java.io.DataOutput)",
                        "org.apache.hadoop.conf.Configuration:long getLong(java.lang.String,long)",
                        "org.apache.hadoop.conf.Configuration:void set(java.lang.String,java.lang.String)",
                        "org.apache.hadoop.io.UTF8:int hashCode()",
                        "org.apache.hadoop.security.token.Token:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.io.BytesWritable:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.ipc.ProtobufRpcEngine$RpcResponseWrapper:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.fs.Path:void <clinit>()",
                        "org.apache.hadoop.fs.Path:void <init>(java.lang.String)",
                        "org.apache.hadoop.fs.FileSystem:boolean exists(org.apache.hadoop.fs.Path)",
                        "org.apache.hadoop.ipc.ProtobufRpcEngine$RpcMessageWithHeader:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.io.UTF8:void write(java.io.DataOutput)",
                        "org.apache.hadoop.io.IntWritable:void write(java.io.DataOutput)",
                        "org.apache.hadoop.fs.FileSystem:org.apache.hadoop.fs.FileStatus[] listStatus(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter)",
                        "org.apache.hadoop.conf.Configuration:void setInt(java.lang.String,int)",
                        "org.apache.hadoop.ipc.ProtobufRpcEngine$RpcMessageWithHeader:void write(java.io.DataOutput)",
                        "org.apache.hadoop.io.Text:boolean equals(java.lang.Object)",
                        "org.apache.hadoop.fs.RawLocalFileSystem:boolean delete(org.apache.hadoop.fs.Path,boolean)",
                        "org.apache.hadoop.io.Text:int hashCode()",
                        "org.apache.hadoop.fs.permission.FsPermission:void write(java.io.DataOutput)",
                        "org.apache.hadoop.io.LongWritable:void write(java.io.DataOutput)",
                        "org.apache.hadoop.security.token.Token:void write(java.io.DataOutput)",
                        "org.apache.hadoop.fs.FsServerDefaults:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.fs.FileSystem:org.apache.hadoop.fs.LocalFileSystem getLocal(org.apache.hadoop.conf.Configuration)",
                        "org.apache.hadoop.conf.Configuration:void addResource(org.apache.hadoop.fs.Path)",
                        "org.apache.hadoop.fs.FileStatus:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.ipc.Server$Listener$Reader:void run()",
                        "org.apache.hadoop.security.authorize.AccessControlList:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.io.IntWritable:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.fs.FileStatus:boolean equals(java.lang.Object)",
                        "org.apache.hadoop.ipc.ProtobufRpcEngine$RpcRequestMessageWrapper:void write(java.io.DataOutput)",
                        "org.apache.hadoop.fs.Path:java.lang.String getName()",
                        "org.apache.hadoop.io.compress.CompressionCodecFactory:void <clinit>()",
                        "org.apache.hadoop.io.LongWritable:void <init>(long)",
                        "org.apache.hadoop.ipc.Server$Listener:void run()",
                        "org.apache.hadoop.fs.Path:org.apache.hadoop.fs.Path makeQualified(org.apache.hadoop.fs.FileSystem)",
                        "org.apache.hadoop.fs.FileStatus:void write(java.io.DataOutput)",
                        "org.apache.hadoop.ipc.Server$Responder:void run()",
                        "org.apache.hadoop.io.UTF8:boolean equals(java.lang.Object)",
                        "org.apache.hadoop.security.Credentials:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.io.Text:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.io.IOUtils:void copyBytes(java.io.InputStream,java.io.OutputStream,int,boolean)",
                        "org.apache.hadoop.fs.Path:java.lang.String toString()",
                        "org.apache.hadoop.conf.Configuration:void <clinit>()",
                        "org.apache.hadoop.io.SequenceFile$Metadata:boolean equals(java.lang.Object)",
                        "org.apache.hadoop.conf.Configuration:void write(java.io.DataOutput)",
                        "org.apache.hadoop.io.SequenceFile$Metadata:int hashCode()",
                        "org.apache.hadoop.conf.Configuration$IntegerRanges$RangeNumberIterator:java.lang.Integer next()",
                        "org.apache.hadoop.ipc.ProtobufRpcEngine$RpcRequestMessageWrapper:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.fs.FileSystem:org.apache.hadoop.fs.FSDataOutputStream create(org.apache.hadoop.fs.Path)",
                        "org.apache.hadoop.fs.GlobFilter:boolean accept(org.apache.hadoop.fs.Path)",
                        "org.apache.hadoop.util.ShutdownHookManager$1:void run()",
                        "org.apache.hadoop.fs.RawLocalFileSystem$RawLocalFileStatus:void write(java.io.DataOutput)",
                        "org.apache.hadoop.fs.permission.FsPermission:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.conf.Configuration$IntegerRanges$RangeNumberIterator:boolean hasNext()",
                        "org.apache.hadoop.fs.FileContext$1:boolean accept(org.apache.hadoop.fs.Path)",
                        "org.apache.hadoop.fs.LocatedFileStatus:int hashCode()",
                        "org.apache.hadoop.util.StringUtils:java.lang.String escapeString(java.lang.String)",
                        "org.apache.hadoop.conf.Configuration:void <init>()",
                        "org.apache.hadoop.fs.FileStatus:org.apache.hadoop.fs.Path getPath()",
                        "org.apache.hadoop.ipc.ProtobufRpcEngine$RpcResponseMessageWrapper:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.util.LineReader:int readLine(org.apache.hadoop.io.Text,int,int)",
                        "org.apache.hadoop.fs.GlobFilter$1:boolean accept(org.apache.hadoop.fs.Path)",
                        "org.apache.hadoop.fs.FsServerDefaults:void write(java.io.DataOutput)",
                        "org.apache.hadoop.io.LongWritable:void set(long)",
                        "org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext$PathIterator:org.apache.hadoop.fs.Path next()",
                        "org.apache.hadoop.io.UTF8:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.io.SequenceFile$Metadata:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.metrics2.impl.MetricsSinkAdapter$1:void run()",
                        "org.apache.hadoop.fs.permission.FsPermission:int hashCode()",
                        "org.apache.hadoop.fs.Path:void <init>(java.lang.String,java.lang.String)",
                        "org.apache.hadoop.io.BytesWritable:int hashCode()",
                        "org.apache.hadoop.io.LongWritable:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.fs.FileSystem:org.apache.hadoop.fs.BlockLocation[] getFileBlockLocations(org.apache.hadoop.fs.FileStatus,long,long)",
                        "org.apache.hadoop.io.compress.CompressionCodecFactory:void <init>(org.apache.hadoop.conf.Configuration)",
                        "org.apache.hadoop.fs.permission.FsPermission:boolean equals(java.lang.Object)",
                        "org.apache.hadoop.ipc.ProtobufRpcEngine$RpcResponseWrapper:void write(java.io.DataOutput)",
                        "org.apache.hadoop.fs.RawLocalFileSystem:boolean mkdirs(org.apache.hadoop.fs.Path)",
                        "org.apache.hadoop.io.Text:void <init>()",
                        "org.apache.hadoop.io.Text:void write(java.io.DataOutput)",
                        "org.apache.hadoop.io.NullWritable:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.util.StringUtils:java.lang.String arrayToString(java.lang.String[])",
                        "org.apache.hadoop.security.token.Token:boolean equals(java.lang.Object)",
                        "org.apache.hadoop.util.LineReader:void close()",
                        "org.apache.hadoop.fs.FileSystem:org.apache.hadoop.fs.FileSystem get(org.apache.hadoop.conf.Configuration)",
                        "org.apache.hadoop.util.StringUtils:java.lang.String[] split(java.lang.String)",
                        "org.apache.hadoop.ipc.Server$Handler:void run()",
                        "org.apache.hadoop.fs.FileSystem:org.apache.hadoop.fs.Path makeQualified(org.apache.hadoop.fs.Path)",
                        "org.apache.hadoop.security.authorize.AccessControlList:void write(java.io.DataOutput)",
                        "org.apache.hadoop.io.compress.GzipCodec:org.apache.hadoop.io.compress.CompressionInputStream createInputStream(java.io.InputStream)",
                        "org.apache.hadoop.util.StringUtils:void <clinit>()",
                        "org.apache.hadoop.fs.FileSystem:long getDefaultBlockSize()",
                        "org.apache.hadoop.util.LineReader:void <init>(java.io.InputStream,int)",
                        "org.apache.hadoop.io.compress.CompressionCodecFactory:org.apache.hadoop.io.compress.CompressionCodec getCodec(org.apache.hadoop.fs.Path)",
                        "org.apache.hadoop.conf.Configuration:java.lang.String get(java.lang.String,java.lang.String)",
                        "org.apache.hadoop.conf.Configuration:int getInt(java.lang.String,int)",
                        "org.apache.hadoop.conf.Configuration:void addDefaultResource(java.lang.String)",
                        "org.apache.hadoop.fs.Path:org.apache.hadoop.fs.FileSystem getFileSystem(org.apache.hadoop.conf.Configuration)",
                        "org.apache.hadoop.io.BytesWritable:boolean equals(java.lang.Object)",
                        "org.apache.hadoop.io.Text:void <init>(java.lang.String)",
                        "org.apache.hadoop.util.StringUtils:java.lang.String unEscapeString(java.lang.String)"
                    ]
                }
            }
        },
        "ml.shifu:guagua-yarn": {
            "vulnerable dependencies": {
                "org.apache.zookeeper:zookeeper:3.4.5": {
                    "used-method num": 72,
                    "used method": [
                        "org.apache.zookeeper.common.IOUtils:void closeStream(java.io.Closeable)",
                        "org.apache.zookeeper.server.quorum.LearnerInfo:java.lang.String toString()",
                        "org.apache.zookeeper.txn.ErrorTxn:java.lang.String toString()",
                        "org.apache.zookeeper.server.persistence.FileHeader:java.lang.String toString()",
                        "org.apache.zookeeper.proto.GetChildren2Response:java.lang.String toString()",
                        "org.apache.zookeeper.proto.GetChildrenRequest:java.lang.String toString()",
                        "org.apache.zookeeper.MultiTransactionRecord:java.util.Iterator iterator()",
                        "org.apache.zookeeper.proto.GetSASLRequest:java.lang.String toString()",
                        "org.apache.zookeeper.proto.SetDataResponse:java.lang.String toString()",
                        "org.apache.zookeeper.server.quorum.Vote:java.lang.String toString()",
                        "org.apache.zookeeper.proto.GetDataResponse:java.lang.String toString()",
                        "org.apache.zookeeper.proto.DeleteRequest:java.lang.String toString()",
                        "org.apache.zookeeper.txn.MultiTxn:java.lang.String toString()",
                        "org.apache.zookeeper.proto.CreateRequest:java.lang.String toString()",
                        "org.apache.zookeeper.proto.AuthPacket:java.lang.String toString()",
                        "org.apache.zookeeper.data.Stat:java.lang.String toString()",
                        "org.apache.zookeeper.txn.CheckVersionTxn:java.lang.String toString()",
                        "org.apache.zookeeper.txn.SetACLTxn:java.lang.String toString()",
                        "org.apache.zookeeper.txn.CreateTxnV0:java.lang.String toString()",
                        "org.apache.zookeeper.proto.GetACLResponse:java.lang.String toString()",
                        "org.apache.zookeeper.proto.CheckVersionRequest:java.lang.String toString()",
                        "org.apache.zookeeper.proto.CreateResponse:java.lang.String toString()",
                        "org.apache.zookeeper.proto.ReplyHeader:java.lang.String toString()",
                        "org.apache.zookeeper.server.Request:java.lang.String toString()",
                        "org.apache.zookeeper.MultiResponse:java.util.Iterator iterator()",
                        "org.apache.zookeeper.KeeperException:java.lang.String getMessage()",
                        "org.apache.zookeeper.txn.CreateTxn:java.lang.String toString()",
                        "org.apache.zookeeper.StatsTrack:java.lang.String toString()",
                        "org.apache.zookeeper.ClientCnxn$Packet:java.lang.String toString()",
                        "org.apache.zookeeper.proto.GetACLRequest:java.lang.String toString()",
                        "org.apache.zookeeper.server.quorum.LearnerHandler:java.lang.String toString()",
                        "org.apache.zookeeper.txn.TxnHeader:java.lang.String toString()",
                        "org.apache.zookeeper.txn.Txn:java.lang.String toString()",
                        "org.apache.zookeeper.server.quorum.Follower:java.lang.String toString()",
                        "org.apache.zookeeper.data.Id:java.lang.String toString()",
                        "org.apache.zookeeper.ZooKeeper:java.lang.String toString()",
                        "org.apache.zookeeper.proto.ErrorResponse:java.lang.String toString()",
                        "org.apache.zookeeper.common.PathTrie$TrieNode:java.lang.String toString()",
                        "org.apache.zookeeper.server.auth.KerberosName$Rule:java.lang.String toString()",
                        "org.apache.zookeeper.proto.SetACLResponse:java.lang.String toString()",
                        "org.apache.zookeeper.server.WatchManager:java.lang.String toString()",
                        "org.apache.zookeeper.server.quorum.Observer:java.lang.String toString()",
                        "org.apache.zookeeper.proto.ExistsResponse:java.lang.String toString()",
                        "org.apache.zookeeper.ClientCnxn:java.lang.String toString()",
                        "org.apache.zookeeper.proto.SetSASLResponse:java.lang.String toString()",
                        "org.apache.zookeeper.server.quorum.QuorumPacket:java.lang.String toString()",
                        "org.apache.zookeeper.Environment$Entry:java.lang.String toString()",
                        "org.apache.zookeeper.proto.WatcherEvent:java.lang.String toString()",
                        "org.apache.zookeeper.txn.CreateSessionTxn:java.lang.String toString()",
                        "org.apache.zookeeper.server.SessionTrackerImpl:java.lang.String toString()",
                        "org.apache.zookeeper.data.StatPersisted:java.lang.String toString()",
                        "org.apache.zookeeper.proto.SetDataRequest:java.lang.String toString()",
                        "org.apache.zookeeper.proto.SyncRequest:java.lang.String toString()",
                        "org.apache.zookeeper.proto.GetChildrenResponse:java.lang.String toString()",
                        "org.apache.zookeeper.proto.ConnectResponse:java.lang.String toString()",
                        "org.apache.zookeeper.proto.MultiHeader:java.lang.String toString()",
                        "org.apache.zookeeper.proto.GetChildren2Request:java.lang.String toString()",
                        "org.apache.zookeeper.proto.SetACLRequest:java.lang.String toString()",
                        "org.apache.zookeeper.txn.SetDataTxn:java.lang.String toString()",
                        "org.apache.zookeeper.proto.GetDataRequest:java.lang.String toString()",
                        "org.apache.zookeeper.data.ACL:java.lang.String toString()",
                        "org.apache.zookeeper.server.auth.KerberosName:java.lang.String toString()",
                        "org.apache.zookeeper.proto.RequestHeader:java.lang.String toString()",
                        "org.apache.zookeeper.proto.SetWatches:java.lang.String toString()",
                        "org.apache.zookeeper.proto.ConnectRequest:java.lang.String toString()",
                        "org.apache.zookeeper.server.quorum.QuorumStats:java.lang.String toString()",
                        "org.apache.zookeeper.proto.SyncResponse:java.lang.String toString()",
                        "org.apache.zookeeper.server.ServerStats:java.lang.String toString()",
                        "org.apache.zookeeper.server.quorum.Leader$Proposal:java.lang.String toString()",
                        "org.apache.zookeeper.txn.DeleteTxn:java.lang.String toString()",
                        "org.apache.zookeeper.proto.ExistsRequest:java.lang.String toString()",
                        "org.apache.zookeeper.WatchedEvent:java.lang.String toString()"
                    ]
                },
                "org.apache.commons:commons-compress:1.5": {
                    "used-method num": 1,
                    "used method": [
                        "org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding$Simple8BitChar:java.lang.String toString()"
                    ]
                },
                "io.netty:netty:3.6.2.Final": {
                    "used-method num": 89,
                    "used method": [
                        "org.jboss.netty.handler.codec.serialization.SoftReferenceMap:java.util.Set entrySet()",
                        "org.jboss.netty.channel.DownstreamChannelStateEvent:java.lang.Object getValue()",
                        "org.jboss.netty.channel.UpstreamChannelStateEvent:org.jboss.netty.channel.ChannelState getState()",
                        "org.jboss.netty.util.MapBackedSet:java.util.Iterator iterator()",
                        "org.jboss.netty.channel.DownstreamChannelStateEvent:java.lang.String toString()",
                        "org.jboss.netty.buffer.ChannelBufferInputStream:int readInt()",
                        "org.jboss.netty.channel.DefaultExceptionEvent:java.lang.String toString()",
                        "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:java.lang.String toString()",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$EntryIterator:java.util.Map$Entry next()",
                        "org.jboss.netty.channel.ChannelState:void <clinit>()",
                        "org.jboss.netty.channel.DownstreamMessageEvent:java.lang.String toString()",
                        "org.jboss.netty.bootstrap.ServerBootstrap:org.jboss.netty.channel.Channel bind(java.net.SocketAddress)",
                        "org.jboss.netty.channel.UpstreamChannelStateEvent:java.lang.String toString()",
                        "org.jboss.netty.buffer.ChannelBufferInputStream:boolean readBoolean()",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap:boolean containsKey(java.lang.Object)",
                        "org.jboss.netty.channel.UpstreamMessageEvent:java.lang.String toString()",
                        "org.jboss.netty.channel.DefaultChannelFuture:org.jboss.netty.channel.ChannelFuture awaitUninterruptibly()",
                        "org.jboss.netty.handler.codec.serialization.SoftReferenceMap:boolean containsKey(java.lang.Object)",
                        "org.jboss.netty.channel.DefaultWriteCompletionEvent:java.lang.String toString()",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap:java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)",
                        "org.jboss.netty.channel.DefaultChannelFuture:org.jboss.netty.channel.Channel getChannel()",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap:java.util.Set entrySet()",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$HashIterator:boolean hasNext()",
                        "org.jboss.netty.channel.CompleteChannelFuture:org.jboss.netty.channel.Channel getChannel()",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap:java.lang.Object remove(java.lang.Object)",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$Values:java.util.Iterator iterator()",
                        "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$KeyIterator:java.lang.Object nextElement()",
                        "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void <init>(java.util.concurrent.Executor,java.util.concurrent.Executor)",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap:java.lang.Object get(java.lang.Object)",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$ValueIterator:java.lang.Object next()",
                        "org.jboss.netty.util.internal.ConcurrentHashMap$ValueIterator:java.lang.Object nextElement()",
                        "org.jboss.netty.util.internal.ConcurrentHashMap$SimpleEntry:java.lang.Object getKey()",
                        "org.jboss.netty.channel.DefaultExceptionEvent:org.jboss.netty.channel.Channel getChannel()",
                        "org.jboss.netty.channel.UpstreamMessageEvent:java.lang.Object getMessage()",
                        "org.jboss.netty.util.internal.ConcurrentHashMap$EntrySet:java.util.Iterator iterator()",
                        "org.jboss.netty.channel.AbstractChannel:java.lang.String toString()",
                        "org.jboss.netty.bootstrap.ClientBootstrap:void <init>(org.jboss.netty.channel.ChannelFactory)",
                        "org.jboss.netty.util.internal.ConcurrentHashMap$HashIterator:boolean hasNext()",
                        "org.jboss.netty.handler.codec.serialization.WeakReferenceMap:java.util.Set entrySet()",
                        "org.jboss.netty.buffer.CompositeChannelBuffer:java.lang.String toString()",
                        "org.jboss.netty.channel.DefaultChannelFuture:boolean await(long,java.util.concurrent.TimeUnit)",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$EntrySet:java.util.Iterator iterator()",
                        "org.jboss.netty.util.internal.ConcurrentHashMap$EntryIterator:java.util.Map$Entry next()",
                        "org.jboss.netty.channel.CompleteChannelFuture:org.jboss.netty.channel.ChannelFuture awaitUninterruptibly()",
                        "org.jboss.netty.util.internal.ConcurrentHashMap$Values:java.util.Iterator iterator()",
                        "org.jboss.netty.channel.DefaultChannelPipeline:java.lang.String toString()",
                        "org.jboss.netty.util.HashedWheelTimer$HashedWheelTimeout:java.lang.String toString()",
                        "org.jboss.netty.buffer.ChannelBufferOutputStream:void writeBoolean(boolean)",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$KeySet:java.util.Iterator iterator()",
                        "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void <clinit>()",
                        "org.jboss.netty.channel.AbstractChannel:org.jboss.netty.channel.ChannelFuture write(java.lang.Object)",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:java.lang.String toString()",
                        "org.jboss.netty.channel.AbstractChannel:org.jboss.netty.channel.ChannelFuture close()",
                        "org.jboss.netty.util.internal.ConcurrentHashMap$KeySet:java.util.Iterator iterator()",
                        "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void <init>()",
                        "org.jboss.netty.util.internal.ConcurrentHashMap$KeyIterator:java.lang.Object next()",
                        "org.jboss.netty.channel.DownstreamMessageEvent:java.lang.Object getMessage()",
                        "org.jboss.netty.buffer.ChannelBufferOutputStream:void writeInt(int)",
                        "org.jboss.netty.bootstrap.ServerBootstrap:void <init>(org.jboss.netty.channel.ChannelFactory)",
                        "org.jboss.netty.util.internal.ConcurrentHashMap$HashIterator:void remove()",
                        "org.jboss.netty.channel.DownstreamChannelStateEvent:org.jboss.netty.channel.ChannelState getState()",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
                        "org.jboss.netty.util.internal.ConcurrentHashMap$ValueIterator:java.lang.Object next()",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$HashIterator:void remove()",
                        "org.jboss.netty.util.internal.ConcurrentHashMap$KeyIterator:java.lang.Object nextElement()",
                        "org.jboss.netty.handler.codec.serialization.ObjectEncoder:void <init>()",
                        "org.jboss.netty.handler.codec.serialization.SoftReferenceMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
                        "org.jboss.netty.channel.CompleteChannelFuture:boolean await(long,java.util.concurrent.TimeUnit)",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$ValueIterator:java.lang.Object nextElement()",
                        "org.jboss.netty.handler.codec.frame.FrameDecoder:void <clinit>()",
                        "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress)",
                        "org.jboss.netty.handler.codec.serialization.ClassResolvers:org.jboss.netty.handler.codec.serialization.ClassResolver cacheDisabled(java.lang.ClassLoader)",
                        "org.jboss.netty.handler.codec.serialization.WeakReferenceMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
                        "org.jboss.netty.channel.DefaultChildChannelStateEvent:java.lang.String toString()",
                        "org.jboss.netty.handler.codec.serialization.ObjectDecoder:void <init>(org.jboss.netty.handler.codec.serialization.ClassResolver)",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$HashIterator:boolean hasMoreElements()",
                        "org.jboss.netty.buffer.AbstractChannelBuffer:java.lang.String toString()",
                        "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelPipeline pipeline(org.jboss.netty.channel.ChannelHandler[])",
                        "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void <init>(java.util.concurrent.Executor,java.util.concurrent.Executor)",
                        "org.jboss.netty.bootstrap.Bootstrap:void setPipelineFactory(org.jboss.netty.channel.ChannelPipelineFactory)",
                        "org.jboss.netty.util.internal.ConcurrentHashMap$HashIterator:boolean hasMoreElements()",
                        "org.jboss.netty.channel.AbstractServerChannel:org.jboss.netty.channel.ChannelFuture write(java.lang.Object)",
                        "org.jboss.netty.handler.codec.serialization.SoftReferenceMap:java.lang.Object get(java.lang.Object)",
                        "org.jboss.netty.handler.codec.serialization.WeakReferenceMap:java.lang.Object get(java.lang.Object)",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$KeyIterator:java.lang.Object next()",
                        "org.jboss.netty.handler.codec.serialization.WeakReferenceMap:boolean containsKey(java.lang.Object)",
                        "org.jboss.netty.util.internal.ConcurrentIdentityHashMap$SimpleEntry:java.lang.Object getKey()",
                        "org.jboss.netty.channel.UpstreamChannelStateEvent:java.lang.Object getValue()"
                    ]
                },
                "org.apache.hadoop:hadoop-hdfs:2.2.0": {
                    "used-method num": 0,
                    "used method": []
                },
                "org.apache.hadoop:hadoop-common:2.2.0": {
                    "used-method num": 223,
                    "used method": [
                        "org.apache.hadoop.fs.FileSystem:org.apache.hadoop.fs.FSDataInputStream open(org.apache.hadoop.fs.Path)",
                        "org.apache.hadoop.conf.Configuration:java.util.Iterator iterator()",
                        "org.apache.hadoop.security.UserGroupInformation:java.lang.String toString()",
                        "org.apache.hadoop.ipc.protobuf.ProtocolInfoProtos$GetProtocolVersionsRequestProto$Builder:org.apache.hadoop.ipc.protobuf.ProtocolInfoProtos$GetProtocolVersionsRequestProto$Builder clone()",
                        "org.apache.hadoop.io.NullWritable:void write(java.io.DataOutput)",
                        "org.apache.hadoop.fs.FileStatus:long getLen()",
                        "org.apache.hadoop.conf.Configuration:boolean getBoolean(java.lang.String,boolean)",
                        "org.apache.hadoop.metrics2.util.SampleQuantiles:java.lang.String toString()",
                        "org.apache.hadoop.service.AbstractService:void stop()",
                        "org.apache.hadoop.io.LongWritable:void <clinit>()",
                        "org.apache.hadoop.security.token.Token:org.apache.hadoop.io.Text getKind()",
                        "org.apache.hadoop.metrics2.impl.MetricsConfig$1:java.util.Iterator iterator()",
                        "org.apache.hadoop.metrics2.impl.MsInfo:java.lang.String toString()",
                        "org.apache.hadoop.security.Credentials:void <init>()",
                        "org.apache.hadoop.util.Shell$ShellCommandExecutor:java.lang.String toString()",
                        "org.apache.hadoop.security.authorize.AccessControlList:java.lang.String toString()",
                        "org.apache.hadoop.security.Credentials:void write(java.io.DataOutput)",
                        "org.apache.hadoop.fs.DF:java.lang.String toString()",
                        "org.apache.hadoop.util.DataChecksum:java.lang.String toString()",
                        "org.apache.hadoop.fs.permission.FsPermission$ImmutableFsPermission:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.fs.FileSystem:void <clinit>()",
                        "org.apache.hadoop.conf.Configuration:java.lang.String get(java.lang.String)",
                        "org.apache.hadoop.ipc.Server$Call:java.lang.String toString()",
                        "org.apache.hadoop.conf.Configuration:void setClassLoader(java.lang.ClassLoader)",
                        "org.apache.hadoop.fs.FileSystem:long getDefaultBlockSize(org.apache.hadoop.fs.Path)",
                        "org.apache.hadoop.security.UserGroupInformation:void setConfiguration(org.apache.hadoop.conf.Configuration)",
                        "org.apache.hadoop.ipc.Server$Connection:java.lang.String toString()",
                        "org.apache.hadoop.io.SequenceFile$Metadata:void write(java.io.DataOutput)",
                        "org.apache.hadoop.service.Service$STATE:java.lang.String toString()",
                        "org.apache.hadoop.fs.FileSystem:org.apache.hadoop.fs.FSDataOutputStream create(org.apache.hadoop.fs.FileSystem,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.permission.FsPermission)",
                        "org.apache.hadoop.util.StringUtils:java.lang.String[] getStrings(java.lang.String)",
                        "org.apache.hadoop.security.token.Token:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext$PathIterator:void remove()",
                        "org.apache.hadoop.io.VersionMismatchException:java.lang.String toString()",
                        "org.apache.hadoop.io.UTF8:void write(java.io.DataOutput)",
                        "org.apache.hadoop.conf.Configuration:void writeXml(java.io.OutputStream)",
                        "org.apache.hadoop.security.UserGroupInformation:org.apache.hadoop.security.UserGroupInformation createRemoteUser(java.lang.String)",
                        "org.apache.hadoop.security.UserGroupInformation:void <clinit>()",
                        "org.apache.hadoop.io.Text:boolean equals(java.lang.Object)",
                        "org.apache.hadoop.fs.RawLocalFileSystem:org.apache.hadoop.fs.FileStatus getFileStatus(org.apache.hadoop.fs.Path)",
                        "org.apache.hadoop.fs.RawLocalFileSystem:boolean delete(org.apache.hadoop.fs.Path,boolean)",
                        "org.apache.hadoop.io.SequenceFile$Metadata:java.lang.String toString()",
                        "org.apache.hadoop.io.LongWritable:java.lang.String toString()",
                        "org.apache.hadoop.security.UserGroupInformation:boolean isSecurityEnabled()",
                        "org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcResponseHeaderProto$Builder:org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcResponseHeaderProto$Builder clone()",
                        "org.apache.hadoop.metrics2.util.SampleQuantiles$SampleItem:java.lang.String toString()",
                        "org.apache.hadoop.security.UserGroupInformation:void addCredentials(org.apache.hadoop.security.Credentials)",
                        "org.apache.hadoop.fs.FsServerDefaults:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.fs.FileSystem:org.apache.hadoop.fs.LocalFileSystem getLocal(org.apache.hadoop.conf.Configuration)",
                        "org.apache.hadoop.conf.Configuration:void addResource(org.apache.hadoop.fs.Path)",
                        "org.apache.hadoop.fs.FileStatus:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.io.BytesWritable:void <init>()",
                        "org.apache.hadoop.security.authorize.AccessControlList:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.io.WritableUtils:void writeVInt(java.io.DataOutput,int)",
                        "org.apache.hadoop.io.IntWritable:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.ipc.protobuf.IpcConnectionContextProtos$IpcConnectionContextProto$Builder:org.apache.hadoop.ipc.protobuf.IpcConnectionContextProtos$IpcConnectionContextProto$Builder clone()",
                        "org.apache.hadoop.ipc.ProtobufRpcEngine$RpcRequestMessageWrapper:void write(java.io.DataOutput)",
                        "org.apache.hadoop.io.serializer.SerializationFactory:org.apache.hadoop.io.serializer.Deserializer getDeserializer(java.lang.Class)",
                        "org.apache.hadoop.fs.Path:org.apache.hadoop.fs.Path makeQualified(org.apache.hadoop.fs.FileSystem)",
                        "org.apache.hadoop.metrics2.impl.MetricsBuffer:java.util.Iterator iterator()",
                        "org.apache.hadoop.io.Text:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.fs.Path:java.lang.String toString()",
                        "org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcRequestHeaderProto$Builder:org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcRequestHeaderProto$Builder clone()",
                        "org.apache.hadoop.conf.Configuration$IntegerRanges:java.util.Iterator iterator()",
                        "org.apache.hadoop.io.ReadaheadPool$ReadaheadRequestImpl:java.lang.String toString()",
                        "org.apache.hadoop.security.token.Token:java.lang.String toString()",
                        "org.apache.hadoop.conf.Configuration$IntegerRanges$RangeNumberIterator:java.lang.Integer next()",
                        "org.apache.hadoop.io.retry.RetryPolicies$MultipleLinearRandomRetry$Pair:java.lang.String toString()",
                        "org.apache.hadoop.io.serializer.SerializationFactory:org.apache.hadoop.io.serializer.Serializer getSerializer(java.lang.Class)",
                        "org.apache.hadoop.fs.FileSystem:org.apache.hadoop.fs.FSDataOutputStream create(org.apache.hadoop.fs.Path)",
                        "org.apache.hadoop.fs.GlobFilter:boolean accept(org.apache.hadoop.fs.Path)",
                        "org.apache.hadoop.fs.RawLocalFileSystem$RawLocalFileStatus:void write(java.io.DataOutput)",
                        "org.apache.hadoop.io.DataOutputBuffer:void <init>()",
                        "org.apache.hadoop.io.BytesWritable:void <clinit>()",
                        "org.apache.hadoop.util.StringUtils:java.lang.String escapeString(java.lang.String)",
                        "org.apache.hadoop.io.retry.RetryPolicy$RetryAction:java.lang.String toString()",
                        "org.apache.hadoop.fs.FileSystem:void copyFromLocalFile(boolean,boolean,org.apache.hadoop.fs.Path,org.apache.hadoop.fs.Path)",
                        "org.apache.hadoop.ipc.ProtobufRpcEngine$RpcResponseMessageWrapper:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.io.DataOutputBuffer:byte[] getData()",
                        "org.apache.hadoop.fs.GlobFilter$1:boolean accept(org.apache.hadoop.fs.Path)",
                        "org.apache.hadoop.io.LongWritable:void set(long)",
                        "org.apache.hadoop.io.UTF8:java.lang.String toString()",
                        "org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext$PathIterator:org.apache.hadoop.fs.Path next()",
                        "org.apache.hadoop.fs.FileSystem:org.apache.hadoop.fs.FSDataOutputStream create(org.apache.hadoop.fs.Path,boolean)",
                        "org.apache.hadoop.fs.FileStatus:java.lang.String toString()",
                        "org.apache.hadoop.ipc.protobuf.ProtocolInfoProtos$GetProtocolVersionsResponseProto$Builder:org.apache.hadoop.ipc.protobuf.ProtocolInfoProtos$GetProtocolVersionsResponseProto$Builder clone()",
                        "org.apache.hadoop.io.DataOutputBuffer:int getLength()",
                        "org.apache.hadoop.io.nativeio.NativeIOException:java.lang.String toString()",
                        "org.apache.hadoop.io.SequenceFile$Metadata:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.io.LongWritable:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcSaslProto$SaslAuth$Builder:org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcSaslProto$SaslAuth$Builder clone()",
                        "org.apache.hadoop.io.compress.CompressionCodecFactory:void <init>(org.apache.hadoop.conf.Configuration)",
                        "org.apache.hadoop.ipc.ProtobufRpcEngine$RpcResponseWrapper:void write(java.io.DataOutput)",
                        "org.apache.hadoop.io.Text:void <init>()",
                        "org.apache.hadoop.util.StringUtils:java.lang.String arrayToString(java.lang.String[])",
                        "org.apache.hadoop.io.BytesWritable:java.lang.String toString()",
                        "org.apache.hadoop.util.LineReader:void close()",
                        "org.apache.hadoop.util.StringUtils:java.lang.String[] split(java.lang.String)",
                        "org.apache.hadoop.ipc.protobuf.ProtocolInfoProtos$ProtocolVersionProto$Builder:org.apache.hadoop.ipc.protobuf.ProtocolInfoProtos$ProtocolVersionProto$Builder clone()",
                        "org.apache.hadoop.fs.FileStatus:long getModificationTime()",
                        "org.apache.hadoop.security.UserGroupInformation$RealUser:java.lang.String toString()",
                        "org.apache.hadoop.service.AbstractService:void init(org.apache.hadoop.conf.Configuration)",
                        "org.apache.hadoop.fs.FileSystem:org.apache.hadoop.fs.Path makeQualified(org.apache.hadoop.fs.Path)",
                        "org.apache.hadoop.security.authorize.AccessControlList:void write(java.io.DataOutput)",
                        "org.apache.hadoop.conf.Configuration:java.lang.String get(java.lang.String,java.lang.String)",
                        "org.apache.hadoop.util.LineReader:void <init>(java.io.InputStream,int,byte[])",
                        "org.apache.hadoop.io.retry.RetryPolicies$RetryLimited:java.lang.String toString()",
                        "org.apache.hadoop.util.StringUtils:java.lang.String unEscapeString(java.lang.String)",
                        "org.apache.hadoop.fs.FileStatus:long getBlockSize()",
                        "org.apache.hadoop.security.UserGroupInformation:org.apache.hadoop.security.Credentials getCredentials()",
                        "org.apache.hadoop.conf.Configuration:java.lang.ClassLoader getClassLoader()",
                        "org.apache.hadoop.conf.Configuration:java.lang.String toString()",
                        "org.apache.hadoop.io.IOUtils:void closeStream(java.io.Closeable)",
                        "org.apache.hadoop.conf.Configuration:void setBoolean(java.lang.String,boolean)",
                        "org.apache.hadoop.io.LongWritable:void <init>()",
                        "org.apache.hadoop.metrics2.lib.MetricsRegistry:java.lang.String toString()",
                        "org.apache.hadoop.ipc.protobuf.ProtocolInfoProtos$ProtocolSignatureProto$Builder:org.apache.hadoop.ipc.protobuf.ProtocolInfoProtos$ProtocolSignatureProto$Builder clone()",
                        "org.apache.hadoop.io.Text:void <clinit>()",
                        "org.apache.hadoop.fs.ContentSummary:java.lang.String toString()",
                        "org.apache.hadoop.fs.RawLocalFileSystem:java.net.URI getUri()",
                        "org.apache.hadoop.fs.Path:java.net.URI toUri()",
                        "org.apache.hadoop.fs.FSDataInputStream:void seek(long)",
                        "org.apache.hadoop.io.Text:java.lang.String toString()",
                        "org.apache.hadoop.ipc.protobuf.ProtobufRpcEngineProtos$RequestHeaderProto$Builder:org.apache.hadoop.ipc.protobuf.ProtobufRpcEngineProtos$RequestHeaderProto$Builder clone()",
                        "org.apache.hadoop.ipc.ProtobufRpcEngine$RpcResponseMessageWrapper:void write(java.io.DataOutput)",
                        "org.apache.hadoop.fs.FileSystem:boolean setReplication(org.apache.hadoop.fs.Path,short)",
                        "org.apache.hadoop.fs.FSDataOutputStream:void close()",
                        "org.apache.hadoop.io.retry.RetryPolicies$MultipleLinearRandomRetry:java.lang.String toString()",
                        "org.apache.hadoop.io.compress.DefaultCodec:org.apache.hadoop.io.compress.CompressionInputStream createInputStream(java.io.InputStream)",
                        "org.apache.hadoop.io.BytesWritable:void write(java.io.DataOutput)",
                        "org.apache.hadoop.conf.Configuration:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.ipc.RemoteException:java.lang.String toString()",
                        "org.apache.hadoop.fs.FileSystem:org.apache.hadoop.security.token.Token[] addDelegationTokens(java.lang.String,org.apache.hadoop.security.Credentials)",
                        "org.apache.hadoop.fs.FileSystem:org.apache.hadoop.fs.FileStatus[] globStatus(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter)",
                        "org.apache.hadoop.conf.Configuration$IntegerRanges$RangeNumberIterator:void remove()",
                        "org.apache.hadoop.io.IntWritable:java.lang.String toString()",
                        "org.apache.hadoop.conf.Configured:void setConf(org.apache.hadoop.conf.Configuration)",
                        "org.apache.hadoop.fs.FileStatus:boolean isDirectory()",
                        "org.apache.hadoop.fs.FileSystem:void setDefaultUri(org.apache.hadoop.conf.Configuration,java.lang.String)",
                        "org.apache.hadoop.conf.Configuration:long getLong(java.lang.String,long)",
                        "org.apache.hadoop.metrics2.impl.MetricsConfig:java.lang.String toString()",
                        "org.apache.hadoop.conf.Configuration:void set(java.lang.String,java.lang.String)",
                        "org.apache.hadoop.conf.Configuration:java.lang.String[] getStrings(java.lang.String,java.lang.String[])",
                        "org.apache.hadoop.fs.FSDataOutputStream:long getPos()",
                        "org.apache.hadoop.io.BytesWritable:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.ipc.ProtobufRpcEngine$RpcResponseWrapper:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.fs.Path:void <clinit>()",
                        "org.apache.hadoop.fs.Path:void <init>(java.lang.String)",
                        "org.apache.hadoop.fs.FileSystem:boolean exists(org.apache.hadoop.fs.Path)",
                        "org.apache.hadoop.ipc.ProtobufRpcEngine$RpcMessageWithHeader:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.security.Credentials:void <clinit>()",
                        "org.apache.hadoop.io.IntWritable:void write(java.io.DataOutput)",
                        "org.apache.hadoop.fs.FileSystem:org.apache.hadoop.fs.FileStatus[] listStatus(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter)",
                        "org.apache.hadoop.conf.Configuration:void setInt(java.lang.String,int)",
                        "org.apache.hadoop.ipc.ProtobufRpcEngine$RpcMessageWithHeader:void write(java.io.DataOutput)",
                        "org.apache.hadoop.io.serializer.SerializationFactory:void <init>(org.apache.hadoop.conf.Configuration)",
                        "org.apache.hadoop.ipc.protobuf.ProtocolInfoProtos$GetProtocolSignatureRequestProto$Builder:org.apache.hadoop.ipc.protobuf.ProtocolInfoProtos$GetProtocolSignatureRequestProto$Builder clone()",
                        "org.apache.hadoop.security.Credentials:void writeTokenStorageToStream(java.io.DataOutputStream)",
                        "org.apache.hadoop.fs.permission.FsPermission:void write(java.io.DataOutput)",
                        "org.apache.hadoop.conf.Configured:org.apache.hadoop.conf.Configuration getConf()",
                        "org.apache.hadoop.io.LongWritable:void write(java.io.DataOutput)",
                        "org.apache.hadoop.security.token.Token:void write(java.io.DataOutput)",
                        "org.apache.hadoop.io.Text:int writeString(java.io.DataOutput,java.lang.String)",
                        "org.apache.hadoop.io.serializer.SerializationFactory:void <clinit>()",
                        "org.apache.hadoop.conf.Configuration$IntegerRanges:java.lang.String toString()",
                        "org.apache.hadoop.ipc.Client$ConnectionId:java.lang.String toString()",
                        "org.apache.hadoop.io.Text:java.lang.String readString(java.io.DataInput)",
                        "org.apache.hadoop.security.UserGroupInformation:java.lang.Object doAs(java.security.PrivilegedAction)",
                        "org.apache.hadoop.net.NodeBase:java.lang.String toString()",
                        "org.apache.hadoop.fs.Path:java.lang.String getName()",
                        "org.apache.hadoop.io.compress.CompressionCodecFactory:void <clinit>()",
                        "org.apache.hadoop.fs.permission.FsPermission:void <clinit>()",
                        "org.apache.hadoop.service.AbstractService:java.lang.String toString()",
                        "org.apache.hadoop.fs.permission.FsPermission:java.lang.String toString()",
                        "org.apache.hadoop.fs.FileStatus:void write(java.io.DataOutput)",
                        "org.apache.hadoop.fs.FileSystem$Cache$Key:java.lang.String toString()",
                        "org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcSaslProto$Builder:org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcSaslProto$Builder clone()",
                        "org.apache.hadoop.security.Credentials:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.metrics2.impl.MetricsRecordFiltered$1:java.util.Iterator iterator()",
                        "org.apache.hadoop.io.IOUtils:void copyBytes(java.io.InputStream,java.io.OutputStream,int,boolean)",
                        "org.apache.hadoop.fs.Path:void <init>(org.apache.hadoop.fs.Path,java.lang.String)",
                        "org.apache.hadoop.conf.Configuration:void <clinit>()",
                        "org.apache.hadoop.service.AbstractService:void start()",
                        "org.apache.hadoop.io.NullWritable:java.lang.String toString()",
                        "org.apache.hadoop.conf.Configuration:void write(java.io.DataOutput)",
                        "org.apache.hadoop.ipc.ProtobufRpcEngine$RpcRequestMessageWrapper:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.io.compress.CompressionCodecFactory:java.lang.String toString()",
                        "org.apache.hadoop.fs.permission.FsPermission:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.conf.Configuration$IntegerRanges$RangeNumberIterator:boolean hasNext()",
                        "org.apache.hadoop.ipc.protobuf.ProtocolInfoProtos$GetProtocolSignatureResponseProto$Builder:org.apache.hadoop.ipc.protobuf.ProtocolInfoProtos$GetProtocolSignatureResponseProto$Builder clone()",
                        "org.apache.hadoop.fs.FileContext$1:boolean accept(org.apache.hadoop.fs.Path)",
                        "org.apache.hadoop.fs.Path:void <init>(java.net.URI)",
                        "org.apache.hadoop.metrics2.util.Quantile:java.lang.String toString()",
                        "org.apache.hadoop.ipc.Server$WrappedRpcServerException:java.lang.String toString()",
                        "org.apache.hadoop.conf.Configuration:void <init>()",
                        "org.apache.hadoop.fs.FileStatus:org.apache.hadoop.fs.Path getPath()",
                        "org.apache.hadoop.fs.permission.FsPermission:void <init>(org.apache.hadoop.fs.permission.FsPermission)",
                        "org.apache.hadoop.util.LineReader:int readLine(org.apache.hadoop.io.Text,int,int)",
                        "org.apache.hadoop.fs.FsServerDefaults:void write(java.io.DataOutput)",
                        "org.apache.hadoop.metrics2.impl.MetricsCollectorImpl:java.util.Iterator iterator()",
                        "org.apache.hadoop.service.AbstractService:void <clinit>()",
                        "org.apache.hadoop.io.UTF8:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.security.UserGroupInformation:org.apache.hadoop.security.UserGroupInformation getCurrentUser()",
                        "org.apache.hadoop.ipc.ProtobufRpcEngine$RpcRequestWrapper:java.lang.String toString()",
                        "org.apache.hadoop.conf.Configuration:java.lang.Class getClassByName(java.lang.String)",
                        "org.apache.hadoop.fs.Path:void <init>(java.lang.String,java.lang.String)",
                        "org.apache.hadoop.fs.FileSystem:org.apache.hadoop.fs.BlockLocation[] getFileBlockLocations(org.apache.hadoop.fs.FileStatus,long,long)",
                        "org.apache.hadoop.conf.Configured:void <init>()",
                        "org.apache.hadoop.fs.RawLocalFileSystem:boolean mkdirs(org.apache.hadoop.fs.Path)",
                        "org.apache.hadoop.io.Text:void write(java.io.DataOutput)",
                        "org.apache.hadoop.io.NullWritable:void readFields(java.io.DataInput)",
                        "org.apache.hadoop.fs.FileSystem:org.apache.hadoop.fs.FileSystem get(org.apache.hadoop.conf.Configuration)",
                        "org.apache.hadoop.security.Credentials:java.util.Collection getAllTokens()",
                        "org.apache.hadoop.metrics2.MetricsTag:java.lang.String toString()",
                        "org.apache.hadoop.util.StringUtils:void <clinit>()",
                        "org.apache.hadoop.io.compress.GzipCodec:org.apache.hadoop.io.compress.CompressionInputStream createInputStream(java.io.InputStream)",
                        "org.apache.hadoop.util.LineReader:void <init>(java.io.InputStream,int)",
                        "org.apache.hadoop.io.compress.CompressionCodecFactory:org.apache.hadoop.io.compress.CompressionCodec getCodec(org.apache.hadoop.fs.Path)",
                        "org.apache.hadoop.util.Progress:java.lang.String toString()",
                        "org.apache.hadoop.conf.Configuration:int getInt(java.lang.String,int)",
                        "org.apache.hadoop.ipc.protobuf.IpcConnectionContextProtos$UserInformationProto$Builder:org.apache.hadoop.ipc.protobuf.IpcConnectionContextProtos$UserInformationProto$Builder clone()",
                        "org.apache.hadoop.conf.Configuration:void addDefaultResource(java.lang.String)",
                        "org.apache.hadoop.fs.Path:org.apache.hadoop.fs.FileSystem getFileSystem(org.apache.hadoop.conf.Configuration)"
                    ]
                }
            }
        },
        "ml.shifu:guagua-client": {
            "vulnerable dependencies": {
                "org.apache.zookeeper:zookeeper:3.4.5": {
                    "used-method num": 0,
                    "used method": []
                },
                "org.apache.commons:commons-compress:1.5": {
                    "used-method num": 0,
                    "used method": []
                },
                "io.netty:netty:3.6.2.Final": {
                    "used-method num": 0,
                    "used method": []
                },
                "org.apache.hadoop:hadoop-hdfs:2.2.0": {
                    "used-method num": 0,
                    "used method": []
                },
                "org.apache.hadoop:hadoop-common:2.2.0": {
                    "used-method num": 0,
                    "used method": []
                }
            }
        },
        "ml.shifu:guagua-examples": {
            "vulnerable dependencies": {
                "org.apache.zookeeper:zookeeper:3.4.5": {
                    "used-method num": 0,
                    "used method": []
                },
                "org.apache.commons:commons-compress:1.5": {
                    "used-method num": 0,
                    "used method": []
                },
                "io.netty:netty:3.6.2.Final": {
                    "used-method num": 0,
                    "used method": []
                },
                "org.apache.hadoop:hadoop-hdfs:2.2.0": {
                    "used-method num": 0,
                    "used method": []
                },
                "org.apache.hadoop:hadoop-common:2.2.0": {
                    "used-method num": 24,
                    "used method": [
                        "org.apache.hadoop.conf.Configuration:java.util.Iterator iterator()",
                        "org.apache.hadoop.io.IOUtils:void closeStream(java.io.Closeable)",
                        "org.apache.hadoop.io.LongWritable:void <init>(long)",
                        "org.apache.hadoop.io.Text:java.lang.String toString()",
                        "org.apache.hadoop.io.LongWritable:void <clinit>()",
                        "org.apache.hadoop.metrics2.impl.MetricsConfig$1:java.util.Iterator iterator()",
                        "org.apache.hadoop.metrics2.impl.MetricsRecordFiltered$1:java.util.Iterator iterator()",
                        "org.apache.hadoop.metrics2.impl.MetricsBuffer:java.util.Iterator iterator()",
                        "org.apache.hadoop.fs.Path:java.lang.String toString()",
                        "org.apache.hadoop.fs.Path:void <init>(org.apache.hadoop.fs.Path,java.lang.String)",
                        "org.apache.hadoop.conf.Configuration:void <clinit>()",
                        "org.apache.hadoop.conf.Configuration$IntegerRanges:java.util.Iterator iterator()",
                        "org.apache.hadoop.conf.Configuration$IntegerRanges$RangeNumberIterator:java.lang.Integer next()",
                        "org.apache.hadoop.fs.FileSystem:org.apache.hadoop.fs.FSDataOutputStream create(org.apache.hadoop.fs.Path)",
                        "org.apache.hadoop.fs.FileSystem:void <clinit>()",
                        "org.apache.hadoop.conf.Configuration$IntegerRanges$RangeNumberIterator:boolean hasNext()",
                        "org.apache.hadoop.io.LongWritable:long get()",
                        "org.apache.hadoop.conf.Configuration:void <init>()",
                        "org.apache.hadoop.fs.LocalDirAllocator$AllocatorPerContext$PathIterator:org.apache.hadoop.fs.Path next()",
                        "org.apache.hadoop.metrics2.impl.MetricsCollectorImpl:java.util.Iterator iterator()",
                        "org.apache.hadoop.fs.Path:void <clinit>()",
                        "org.apache.hadoop.fs.Path:void <init>(java.lang.String)",
                        "org.apache.hadoop.fs.RawLocalFileSystem:boolean mkdirs(org.apache.hadoop.fs.Path)",
                        "org.apache.hadoop.fs.FileSystem:org.apache.hadoop.fs.FileSystem get(org.apache.hadoop.conf.Configuration)"
                    ]
                }
            }
        }
    }
}