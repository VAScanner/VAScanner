{
    "project name": "tamingtext_book",
    "vulnerable dependencies": {
        "org.apache.tika:tika-parsers:0.10": {
            "used-method num": 0,
            "used method": []
        },
        "org.apache.opennlp:opennlp-tools:1.5.3": {
            "used-method num": 95,
            "used method": [
                "opennlp.tools.postag.POSSample:java.lang.String toString()",
                "opennlp.tools.util.Span:java.lang.String[] spansToStrings(opennlp.tools.util.Span[],java.lang.CharSequence)",
                "opennlp.tools.doccat.DocumentSample:void <init>(java.lang.String,java.lang.String[])",
                "opennlp.tools.doccat.DocumentCategorizerME:opennlp.tools.doccat.DoccatModel train(java.lang.String,opennlp.tools.util.ObjectStream,int,int,opennlp.tools.doccat.FeatureGenerator[])",
                "opennlp.tools.coref.mention.JWNLDictionary:java.lang.String[] getParentSenseKeys(java.lang.String,java.lang.String,int)",
                "opennlp.tools.postag.POSDictionary$1:opennlp.tools.dictionary.serializer.Entry next()",
                "opennlp.tools.parser.Parse:java.lang.String getText()",
                "opennlp.tools.doccat.DocumentCategorizerME:void <clinit>()",
                "opennlp.tools.util.Cache:java.lang.Object put(java.lang.Object,java.lang.Object)",
                "opennlp.tools.postag.POSDictionary:java.lang.String toString()",
                "opennlp.tools.dictionary.Dictionary$3:boolean hasNext()",
                "opennlp.tools.coref.mention.JWNLDictionary:void <init>(java.lang.String)",
                "opennlp.tools.chunker.ChunkSample:java.lang.String toString()",
                "opennlp.tools.util.Span:int getStart()",
                "opennlp.tools.ngram.NGramModel$2:opennlp.tools.dictionary.serializer.Entry next()",
                "opennlp.tools.parser.Parse:opennlp.tools.parser.Parse[] getChildren()",
                "opennlp.tools.doccat.DocumentSample:java.lang.String toString()",
                "opennlp.tools.namefind.TokenNameFinderModel:void <init>(java.io.InputStream)",
                "opennlp.tools.util.Version:java.lang.String toString()",
                "opennlp.tools.namefind.NameFinderME:void <init>(opennlp.tools.namefind.TokenNameFinderModel)",
                "opennlp.tools.namefind.NameSample:java.lang.String toString()",
                "opennlp.tools.util.Cache:java.lang.Object get(java.lang.Object)",
                "opennlp.tools.namefind.NameFinderME:opennlp.tools.util.Span[] find(java.lang.String[])",
                "opennlp.tools.util.StringList:java.lang.String toString()",
                "opennlp.tools.parser.Parse:opennlp.tools.parser.Parse getHead()",
                "opennlp.tools.dictionary.Dictionary:java.lang.String toString()",
                "opennlp.tools.dictionary.Dictionary$3:opennlp.tools.dictionary.serializer.Entry next()",
                "opennlp.tools.ngram.NGramModel$2:boolean hasNext()",
                "opennlp.tools.tokenize.SimpleTokenizer:opennlp.tools.util.Span[] tokenizePos(java.lang.String)",
                "opennlp.tools.namefind.TokenNameFinderModel:void createArtifactSerializers(java.util.Map)",
                "opennlp.tools.postag.POSTaggerME:java.lang.String[] tag(java.lang.String[])",
                "opennlp.tools.postag.POSTaggerME:void <init>(opennlp.tools.postag.POSModel)",
                "opennlp.tools.util.StringList$1:java.lang.String next()",
                "opennlp.tools.dictionary.Dictionary$4$1:java.lang.String next()",
                "opennlp.tools.chunker.ChunkerME:void <init>(opennlp.tools.chunker.ChunkerModel)",
                "opennlp.tools.sentdetect.SentenceDetectorME:void <clinit>()",
                "opennlp.tools.dictionary.Dictionary$4:java.util.Iterator iterator()",
                "opennlp.tools.sentdetect.SentenceDetectorME:void <init>(opennlp.tools.sentdetect.SentenceModel)",
                "opennlp.tools.util.Span:void <init>(int,int)",
                "opennlp.tools.parser.Parse:void insert(opennlp.tools.parser.Parse)",
                "opennlp.tools.util.featuregen.WindowFeatureGenerator:java.lang.String toString()",
                "opennlp.tools.parser.Parse:java.lang.Object clone()",
                "opennlp.tools.dictionary.Dictionary$4:int size()",
                "opennlp.tools.chunker.ChunkerModel:void <init>(java.io.InputStream)",
                "opennlp.tools.ngram.NGramModel:java.lang.String toString()",
                "opennlp.tools.tokenize.WhitespaceTokenizer:opennlp.tools.util.Span[] tokenizePos(java.lang.String)",
                "opennlp.tools.parser.Parse:boolean equals(java.lang.Object)",
                "opennlp.tools.util.Cache:java.util.Set keySet()",
                "opennlp.tools.tokenize.AbstractTokenizer:java.lang.String[] tokenize(java.lang.String)",
                "opennlp.tools.doccat.DoccatModel:void <init>(java.io.InputStream)",
                "opennlp.tools.coref.mention.JWNLDictionary:java.lang.String[] getLemmas(java.lang.String,java.lang.String)",
                "opennlp.tools.doccat.DocumentCategorizerME:java.lang.String getBestCategory(double[])",
                "opennlp.tools.chunker.ChunkerME:java.lang.String[] chunk(java.lang.String[],java.lang.String[])",
                "opennlp.tools.postag.POSDictionary$1:boolean hasNext()",
                "opennlp.tools.dictionary.Dictionary$StringListWrapper:java.lang.String toString()",
                "opennlp.tools.parser.Parse:void addProb(double)",
                "opennlp.tools.parser.Parse:void <init>(java.lang.String,opennlp.tools.util.Span,java.lang.String,double,opennlp.tools.parser.Parse)",
                "opennlp.tools.util.Sequence:java.lang.String toString()",
                "opennlp.tools.parser.Parse:opennlp.tools.parser.Parse[] getTagNodes()",
                "opennlp.tools.doccat.DocumentCategorizerME:void <init>(opennlp.tools.doccat.DoccatModel,opennlp.tools.doccat.FeatureGenerator[])",
                "opennlp.tools.util.StringList$1:boolean hasNext()",
                "opennlp.tools.namefind.NameFinderME:void <clinit>()",
                "opennlp.tools.sentdetect.SentenceModel:void <init>(java.io.InputStream)",
                "opennlp.tools.util.Span:java.lang.String toString()",
                "opennlp.tools.util.model.BaseModel:void serialize(java.io.OutputStream)",
                "opennlp.tools.doccat.DocumentCategorizerEventStream$1:opennlp.model.Event next()",
                "opennlp.tools.util.model.GenericModelSerializer:void <init>()",
                "opennlp.tools.util.Span:int getEnd()",
                "opennlp.tools.parser.Parse:boolean isFlat()",
                "opennlp.tools.util.featuregen.CachedFeatureGenerator:java.lang.String toString()",
                "opennlp.tools.dictionary.Dictionary$2:boolean hasNext()",
                "opennlp.tools.doccat.DoccatModel:opennlp.model.AbstractModel getChunkerModel()",
                "opennlp.tools.dictionary.Dictionary$2:opennlp.tools.util.StringList next()",
                "opennlp.tools.parser.Parse:void <init>(java.lang.String,opennlp.tools.util.Span,java.lang.String,double,int)",
                "opennlp.tools.sentdetect.SentenceDetectorME:opennlp.tools.util.Span[] sentPosDetect(java.lang.String)",
                "opennlp.tools.doccat.DocumentCategorizerME:double[] categorize(java.lang.String[])",
                "opennlp.tools.parser.Parse:java.lang.String getType()",
                "opennlp.tools.namefind.TokenNameFinderModel:void <init>(java.lang.String,opennlp.model.AbstractModel,byte[],java.util.Map,java.util.Map)",
                "opennlp.tools.cmdline.parser.ParserTool:void <clinit>()",
                "opennlp.tools.postag.POSSampleSequenceIterator:opennlp.model.Sequence next()",
                "opennlp.tools.parser.Parse:java.lang.String toString()",
                "opennlp.tools.cmdline.parser.ParserTool:opennlp.tools.parser.Parse[] parseLine(java.lang.String,opennlp.tools.parser.Parser,int)",
                "opennlp.tools.namefind.TokenNameFinderModel:void <init>(java.lang.String,opennlp.model.AbstractModel,java.util.Map,java.util.Map)",
                "opennlp.tools.dictionary.Dictionary$4:boolean contains(java.lang.Object)",
                "opennlp.tools.tokenize.SimpleTokenizer:void <clinit>()",
                "opennlp.tools.doccat.BagOfWordsFeatureGenerator:void <init>()",
                "opennlp.tools.doccat.DoccatModel:void <init>(java.lang.String,opennlp.model.AbstractModel)",
                "opennlp.tools.parser.Parse:void <clinit>()",
                "opennlp.tools.util.Cache:java.util.Collection values()",
                "opennlp.tools.postag.POSModel:void <init>(java.io.InputStream)",
                "opennlp.tools.parser.Parse:boolean isPosTag()",
                "opennlp.tools.cmdline.TerminateToolException:java.lang.String getMessage()",
                "opennlp.tools.parser.Parse:opennlp.tools.util.Span getSpan()",
                "opennlp.tools.parser.Parse:opennlp.tools.parser.Parse getParent()",
                "opennlp.tools.namefind.NameSampleSequenceIterator:opennlp.model.Sequence next()"
            ]
        }
    }
}