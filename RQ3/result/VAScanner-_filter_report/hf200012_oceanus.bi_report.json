{
    "project name": "hf200012_oceanus.bi",
    "vulnerable dependencies": {
        "org.apache.httpcomponents:httpclient:4.1.3": {
            "used-method num": 0,
            "used method": []
        },
        "mysql:mysql-connector-java:8.0.15": {
            "used-method num": 0,
            "used method": []
        },
        "commons-fileupload:commons-fileupload:1.3.3": {
            "used-method num": 2,
            "used method": [
                "org.apache.commons.fileupload.FileUploadException:void <init>(java.lang.String)",
                "org.apache.commons.fileupload.FileUploadException:void printStackTrace(java.io.PrintWriter)"
            ]
        },
        "com.alibaba:fastjson:1.2.70": {
            "used-method num": 37,
            "used method": [
                "com.alibaba.fastjson.serializer.JSONSerializer:java.lang.String toString()",
                "com.alibaba.fastjson.JSON:java.lang.Object parseObject(java.lang.String,java.lang.Class)",
                "com.alibaba.fastjson.JSON:java.lang.String toString()",
                "com.alibaba.fastjson.parser.ParserConfig:com.alibaba.fastjson.parser.ParserConfig getGlobalInstance()",
                "com.alibaba.fastjson.JSONPObject:java.lang.String toString()",
                "com.alibaba.fastjson.JSONObject:java.lang.String getString(java.lang.String)",
                "com.alibaba.fastjson.JSON:com.alibaba.fastjson.JSONObject parseObject(java.lang.String)",
                "com.alibaba.fastjson.JSON:java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializerFeature[])",
                "com.alibaba.fastjson.serializer.SerialContext:java.lang.String toString()",
                "com.alibaba.fastjson.JSONObject:java.lang.Object clone()",
                "com.alibaba.fastjson.JSON:void <clinit>()",
                "com.alibaba.fastjson.JSONObject:java.lang.Object put(java.lang.Object,java.lang.Object)",
                "com.alibaba.fastjson.JSON:java.lang.Object toJSON(java.lang.Object)",
                "com.alibaba.fastjson.JSONObject:java.lang.Object remove(java.lang.Object)",
                "com.alibaba.fastjson.JSONObject:void clear()",
                "com.alibaba.fastjson.JSONObject:java.util.Set keySet()",
                "com.alibaba.fastjson.parser.ParseContext:java.lang.String toString()",
                "com.alibaba.fastjson.JSONArray:java.util.Iterator iterator()",
                "com.alibaba.fastjson.JSONArray:boolean contains(java.lang.Object)",
                "com.alibaba.fastjson.JSONObject:java.util.Collection values()",
                "com.alibaba.fastjson.JSONObject:boolean containsKey(java.lang.Object)",
                "com.alibaba.fastjson.parser.ParserConfig:void setAutoTypeSupport(boolean)",
                "com.alibaba.fastjson.JSONObject:java.util.Set entrySet()",
                "com.alibaba.fastjson.JSONObject:java.lang.Object get(java.lang.Object)",
                "com.alibaba.fastjson.JSON:java.lang.String toJSONString(java.lang.Object)",
                "com.alibaba.fastjson.parser.ParserConfig:void <clinit>()",
                "com.alibaba.fastjson.JSONArray:boolean isEmpty()",
                "com.alibaba.fastjson.JSONArray:int size()",
                "com.alibaba.fastjson.serializer.SerializeWriter:java.lang.String toString()",
                "com.alibaba.fastjson.util.GenericArrayTypeImpl:java.lang.String toString()",
                "com.alibaba.fastjson.serializer.SerializerFeature:void <clinit>()",
                "com.alibaba.fastjson.JSONObject:boolean isEmpty()",
                "com.alibaba.fastjson.JSONArray:java.lang.Object clone()",
                "com.alibaba.fastjson.JSONArray:java.lang.Object get(int)",
                "com.alibaba.fastjson.JSONArray:boolean add(java.lang.Object)",
                "com.alibaba.fastjson.util.ParameterizedTypeImpl:java.lang.reflect.Type[] getActualTypeArguments()",
                "com.alibaba.fastjson.JSON:java.lang.Object parse(java.lang.String)"
            ],
            "CVE": [
                "CVE-2022-25845"
            ],
            "used vul-method": [
                "com.alibaba.fastjson.JSON:java.lang.Object parseObject(java.lang.String,java.lang.Class)",
                "com.alibaba.fastjson.JSON:java.lang.String toString()",
                "com.alibaba.fastjson.JSONPObject:java.lang.String toString()",
                "com.alibaba.fastjson.JSON:com.alibaba.fastjson.JSONObject parseObject(java.lang.String)",
                "com.alibaba.fastjson.JSON:java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializerFeature[])",
                "com.alibaba.fastjson.JSON:java.lang.Object toJSON(java.lang.Object)",
                "com.alibaba.fastjson.JSON:java.lang.String toJSONString(java.lang.Object)",
                "com.alibaba.fastjson.JSON:java.lang.Object parse(java.lang.String)"
            ],
            "vul-called frequency": 62,
            "related vul root method": {
                "CVE-2022-25845": [
                    "com.alibaba.fastjson.parser.ParserConfig:java.lang.Class checkAutoType(java.lang.String,java.lang.Class,int)"
                ]
            },
            "CVE-API": {
                "CVE-2022-25845": [
                    "com.alibaba.fastjson.JSON:java.lang.Object parseObject(java.lang.String,java.lang.Class)",
                    "com.alibaba.fastjson.JSON:java.lang.String toString()",
                    "com.alibaba.fastjson.JSONPObject:java.lang.String toString()",
                    "com.alibaba.fastjson.JSON:com.alibaba.fastjson.JSONObject parseObject(java.lang.String)",
                    "com.alibaba.fastjson.JSON:java.lang.String toJSONString(java.lang.Object,com.alibaba.fastjson.serializer.SerializerFeature[])",
                    "com.alibaba.fastjson.JSON:java.lang.Object toJSON(java.lang.Object)",
                    "com.alibaba.fastjson.JSON:java.lang.String toJSONString(java.lang.Object)",
                    "com.alibaba.fastjson.JSON:java.lang.Object parse(java.lang.String)"
                ]
            }
        },
        "org.apache.poi:poi-ooxml:3.17": {
            "used-method num": 106,
            "used method": [
                "org.apache.poi.xssf.usermodel.XSSFWorkbook:org.apache.poi.xssf.usermodel.XSSFFont createFont()",
                "org.apache.poi.xssf.usermodel.XSSFRow:int getPhysicalNumberOfCells()",
                "org.apache.poi.xssf.streaming.SXSSFWorkbook:org.apache.poi.xssf.streaming.SXSSFSheet createSheet()",
                "org.apache.poi.xssf.streaming.SXSSFRow$CellIterator:boolean hasNext()",
                "org.apache.poi.xssf.usermodel.XSSFWorkbook$SheetIterator:void remove()",
                "org.apache.poi.xssf.usermodel.XSSFCellStyle:void setTopBorderColor(short)",
                "org.apache.poi.xssf.usermodel.XSSFWorkbook$SheetIterator:org.apache.poi.ss.usermodel.Sheet next()",
                "org.apache.poi.xssf.usermodel.XSSFSheet:org.apache.poi.ss.usermodel.DataValidationHelper getDataValidationHelper()",
                "org.apache.poi.xssf.usermodel.XSSFCellStyle:void cloneStyleFrom(org.apache.poi.ss.usermodel.CellStyle)",
                "org.apache.poi.xssf.usermodel.XSSFSheet:void addValidationData(org.apache.poi.ss.usermodel.DataValidation)",
                "org.apache.poi.xssf.usermodel.XSSFWorkbook:org.apache.poi.xssf.usermodel.XSSFCellStyle createCellStyle()",
                "org.apache.poi.xssf.streaming.SXSSFWorkbook$SheetIterator:org.apache.poi.ss.usermodel.Sheet next()",
                "org.apache.poi.xssf.usermodel.XSSFRow:org.apache.poi.xssf.usermodel.XSSFCell createCell(int)",
                "org.apache.poi.xssf.usermodel.XSSFCell:void setCellValue(java.lang.String)",
                "org.apache.poi.xssf.streaming.SXSSFSheet:org.apache.poi.xssf.streaming.SXSSFRow createRow(int)",
                "org.apache.poi.xssf.usermodel.XSSFTextParagraph:java.lang.String toString()",
                "org.apache.poi.xssf.streaming.SXSSFWorkbook:void <init>(int)",
                "org.apache.poi.xssf.streaming.SXSSFWorkbook$SheetIterator:boolean hasNext()",
                "org.apache.poi.xssf.usermodel.XSSFTextRun:java.lang.String toString()",
                "org.apache.poi.xssf.streaming.SXSSFWorkbook:void setSheetName(int,java.lang.String)",
                "org.apache.poi.xssf.usermodel.XSSFSheet:void setColumnWidth(int,int)",
                "org.apache.poi.xssf.usermodel.XSSFCellStyle:java.lang.Object clone()",
                "org.apache.poi.xssf.usermodel.XSSFConditionalFormatting:java.lang.String toString()",
                "org.apache.poi.openxml4j.opc.PackagePartName:java.lang.String toString()",
                "org.apache.poi.xssf.streaming.SXSSFRow$CellIterator:org.apache.poi.ss.usermodel.Cell next()",
                "org.apache.poi.POIXMLDocument:void close()",
                "org.apache.poi.xssf.usermodel.XSSFCell:void setCellValue(double)",
                "org.apache.poi.xssf.streaming.SXSSFRow:org.apache.poi.xssf.streaming.SXSSFCell createCell(int)",
                "org.apache.poi.xssf.usermodel.XSSFRichTextString:java.lang.String toString()",
                "org.apache.poi.xssf.usermodel.XSSFCellStyle:void setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment)",
                "org.apache.poi.xssf.streaming.SXSSFWorkbook:org.apache.poi.xssf.streaming.SXSSFSheet getSheet(java.lang.String)",
                "org.apache.poi.xssf.streaming.SXSSFSheet:org.apache.poi.ss.usermodel.DataValidationHelper getDataValidationHelper()",
                "org.apache.poi.xssf.usermodel.XSSFCell:java.lang.String toString()",
                "org.apache.poi.xssf.usermodel.XSSFCell:byte getErrorCellValue()",
                "org.apache.poi.xssf.usermodel.XSSFRow:void setHeight(short)",
                "org.apache.poi.POIXMLDocument:void write(java.io.OutputStream)",
                "org.apache.poi.xssf.streaming.SXSSFWorkbook:void close()",
                "org.apache.poi.xssf.usermodel.XSSFFont:void setColor(short)",
                "org.apache.poi.xssf.usermodel.XSSFCellStyle:void setLeftBorderColor(short)",
                "org.apache.poi.xssf.usermodel.XSSFSheet:org.apache.poi.xssf.usermodel.XSSFRow getRow(int)",
                "org.apache.poi.xssf.streaming.SXSSFSheet:org.apache.poi.xssf.streaming.SXSSFRow getRow(int)",
                "org.apache.poi.xssf.streaming.SXSSFCell:java.lang.String toString()",
                "org.apache.poi.xssf.usermodel.XSSFFont:java.lang.String toString()",
                "org.apache.poi.xssf.usermodel.XSSFCellStyle:void setBottomBorderColor(short)",
                "org.apache.poi.xssf.usermodel.XSSFCellStyle:void setBorderLeft(org.apache.poi.ss.usermodel.BorderStyle)",
                "org.apache.poi.xssf.usermodel.XSSFWorkbook:org.apache.poi.xssf.usermodel.XSSFSheet createSheet()",
                "org.apache.poi.xssf.streaming.SXSSFRow$CellIterator:void remove()",
                "org.apache.poi.xssf.streaming.SXSSFWorkbook:org.apache.poi.ss.usermodel.CellStyle createCellStyle()",
                "org.apache.poi.xssf.usermodel.XSSFSheet:int getPhysicalNumberOfRows()",
                "org.apache.poi.openxml4j.opc.internal.ContentType:java.lang.String toString()",
                "org.apache.poi.xssf.usermodel.XSSFCell:void setCellType(org.apache.poi.ss.usermodel.CellType)",
                "org.apache.poi.xssf.usermodel.XSSFDialogsheet:org.apache.poi.xssf.usermodel.XSSFRow createRow(int)",
                "org.apache.poi.xssf.streaming.SXSSFCell:void setCellValue(double)",
                "org.apache.poi.xssf.usermodel.XSSFRow:java.lang.String toString()",
                "org.apache.poi.xssf.usermodel.XSSFRow:org.apache.poi.xssf.usermodel.XSSFCell getCell(int)",
                "org.apache.poi.xssf.streaming.SXSSFCell:byte getErrorCellValue()",
                "org.apache.poi.xssf.usermodel.XSSFWorkbook:org.apache.poi.xssf.usermodel.XSSFSheet getSheetAt(int)",
                "org.apache.poi.openxml4j.opc.internal.MemoryPackagePartOutputStream:void write(byte[],int,int)",
                "org.apache.poi.xssf.streaming.SXSSFCell:double getNumericCellValue()",
                "org.apache.poi.xssf.usermodel.XSSFWorkbook:void setSheetName(int,java.lang.String)",
                "org.apache.poi.openxml4j.opc.internal.MemoryPackagePartOutputStream:void close()",
                "org.apache.poi.xssf.usermodel.XSSFCell:org.apache.poi.ss.usermodel.CellType getCellTypeEnum()",
                "org.apache.poi.xssf.usermodel.XSSFFont:void setFontHeightInPoints(short)",
                "org.apache.poi.xssf.usermodel.XSSFCellStyle:void setFillForegroundColor(short)",
                "org.apache.poi.xssf.streaming.SXSSFWorkbook$SheetIterator:void remove()",
                "org.apache.poi.xssf.streaming.SXSSFCell:java.lang.String getStringCellValue()",
                "org.apache.poi.openxml4j.opc.PackageRelationship:java.lang.String toString()",
                "org.apache.poi.ss.usermodel.WorkbookFactory:org.apache.poi.ss.usermodel.Workbook create(java.io.InputStream)",
                "org.apache.poi.xssf.streaming.SXSSFWorkbook:org.apache.poi.xssf.streaming.SXSSFSheet getSheetAt(int)",
                "org.apache.poi.xssf.streaming.SXSSFRow:org.apache.poi.xssf.streaming.SXSSFCell getCell(int)",
                "org.apache.poi.xssf.usermodel.XSSFCellStyle:void setFont(org.apache.poi.ss.usermodel.Font)",
                "org.apache.poi.xssf.streaming.SXSSFWorkbook:org.apache.poi.ss.usermodel.Font createFont()",
                "org.apache.poi.xssf.usermodel.XSSFDataValidationHelper:org.apache.poi.ss.usermodel.DataValidationConstraint createCustomConstraint(java.lang.String)",
                "org.apache.poi.xssf.usermodel.XSSFCell:java.lang.String getStringCellValue()",
                "org.apache.poi.xssf.usermodel.XSSFCell:void setCellStyle(org.apache.poi.ss.usermodel.CellStyle)",
                "org.apache.poi.xssf.streaming.SXSSFSheet:void setColumnWidth(int,int)",
                "org.apache.poi.xssf.usermodel.XSSFCellStyle:void setBorderRight(org.apache.poi.ss.usermodel.BorderStyle)",
                "org.apache.poi.xssf.usermodel.XSSFCellStyle:void setRightBorderColor(short)",
                "org.apache.poi.xssf.usermodel.XSSFDataValidation:void createPromptBox(java.lang.String,java.lang.String)",
                "org.apache.poi.xssf.usermodel.XSSFDataValidationHelper:org.apache.poi.ss.usermodel.DataValidationConstraint createExplicitListConstraint(java.lang.String[])",
                "org.apache.poi.xssf.usermodel.XSSFSheet:org.apache.poi.xssf.usermodel.XSSFRow createRow(int)",
                "org.apache.poi.xssf.streaming.SXSSFWorkbook:void write(java.io.OutputStream)",
                "org.apache.poi.xssf.usermodel.XSSFFont:void setFontName(java.lang.String)",
                "org.apache.poi.xssf.usermodel.XSSFCell:double getNumericCellValue()",
                "org.apache.poi.xssf.streaming.SXSSFRow$FilledCellIterator:void remove()",
                "org.apache.poi.xssf.streaming.SXSSFSheet:int getPhysicalNumberOfRows()",
                "org.apache.poi.xssf.usermodel.XSSFClientAnchor:java.lang.String toString()",
                "org.apache.poi.xssf.usermodel.XSSFCell:boolean getBooleanCellValue()",
                "org.apache.poi.xssf.usermodel.XSSFCellStyle:void setBorderBottom(org.apache.poi.ss.usermodel.BorderStyle)",
                "org.apache.poi.xssf.usermodel.XSSFDataValidation:void setSuppressDropDownArrow(boolean)",
                "org.apache.poi.xssf.streaming.SXSSFCell:org.apache.poi.ss.usermodel.CellType getCellTypeEnum()",
                "org.apache.poi.POIXMLDocumentPart:java.lang.String toString()",
                "org.apache.poi.openxml4j.opc.PackageRelationshipCollection:java.lang.String toString()",
                "org.apache.poi.xssf.streaming.SXSSFRow$FilledCellIterator:org.apache.poi.ss.usermodel.Cell next()",
                "org.apache.poi.xssf.usermodel.XSSFDataValidationHelper:org.apache.poi.ss.usermodel.DataValidation createValidation(org.apache.poi.ss.usermodel.DataValidationConstraint,org.apache.poi.ss.util.CellRangeAddressList)",
                "org.apache.poi.xssf.usermodel.XSSFCellStyle:void setAlignment(org.apache.poi.ss.usermodel.HorizontalAlignment)",
                "org.apache.poi.xssf.streaming.SXSSFRow:int getPhysicalNumberOfCells()",
                "org.apache.poi.xssf.streaming.SXSSFCell:void setCellValue(java.lang.String)",
                "org.apache.poi.xssf.streaming.SXSSFCell:boolean getBooleanCellValue()",
                "org.apache.poi.xssf.usermodel.XSSFCellStyle:void setFillPattern(org.apache.poi.ss.usermodel.FillPatternType)",
                "org.apache.poi.xssf.streaming.SXSSFCell:void setCellType(org.apache.poi.ss.usermodel.CellType)",
                "org.apache.poi.xssf.usermodel.XSSFCellStyle:void setBorderTop(org.apache.poi.ss.usermodel.BorderStyle)",
                "org.apache.poi.xssf.usermodel.XSSFWorkbook$SheetIterator:boolean hasNext()",
                "org.apache.poi.openxml4j.opc.PackagePart:java.lang.String toString()",
                "org.apache.poi.xssf.streaming.SXSSFSheet:void addValidationData(org.apache.poi.ss.usermodel.DataValidation)",
                "org.apache.poi.xssf.usermodel.XSSFWorkbook:org.apache.poi.xssf.usermodel.XSSFSheet getSheet(java.lang.String)"
            ],
            "CVE": [
                "CVE-2019-12415"
            ],
            "used vul-method": [
                "org.apache.poi.xssf.streaming.SXSSFSheet:org.apache.poi.xssf.streaming.SXSSFRow createRow(int)",
                "org.apache.poi.xssf.streaming.SXSSFRow:org.apache.poi.xssf.streaming.SXSSFCell createCell(int)",
                "org.apache.poi.xssf.streaming.SXSSFCell:java.lang.String toString()",
                "org.apache.poi.xssf.streaming.SXSSFCell:void setCellValue(double)",
                "org.apache.poi.xssf.streaming.SXSSFCell:java.lang.String getStringCellValue()",
                "org.apache.poi.xssf.streaming.SXSSFRow:org.apache.poi.xssf.streaming.SXSSFCell getCell(int)",
                "org.apache.poi.xssf.streaming.SXSSFCell:void setCellValue(java.lang.String)",
                "org.apache.poi.xssf.streaming.SXSSFCell:void setCellType(org.apache.poi.ss.usermodel.CellType)"
            ],
            "vul-called frequency": 30,
            "related vul root method": {
                "CVE-2019-12415": [
                    "org.apache.poi.xssf.streaming.SheetDataWriter:void writeCell(int,org.apache.poi.ss.usermodel.Cell)",
                    "org.apache.poi.xssf.streaming.SXSSFCell:java.lang.String getStringCellValue()",
                    "org.apache.poi.xssf.streaming.SXSSFCell:void setCellValue(java.lang.String)"
                ]
            },
            "CVE-API": {
                "CVE-2019-12415": [
                    "org.apache.poi.xssf.streaming.SXSSFSheet:org.apache.poi.xssf.streaming.SXSSFRow createRow(int)",
                    "org.apache.poi.xssf.streaming.SXSSFRow:org.apache.poi.xssf.streaming.SXSSFCell createCell(int)",
                    "org.apache.poi.xssf.streaming.SXSSFCell:java.lang.String toString()",
                    "org.apache.poi.xssf.streaming.SXSSFCell:void setCellValue(double)",
                    "org.apache.poi.xssf.streaming.SXSSFCell:java.lang.String getStringCellValue()",
                    "org.apache.poi.xssf.streaming.SXSSFRow:org.apache.poi.xssf.streaming.SXSSFCell getCell(int)",
                    "org.apache.poi.xssf.streaming.SXSSFCell:void setCellValue(java.lang.String)",
                    "org.apache.poi.xssf.streaming.SXSSFCell:void setCellType(org.apache.poi.ss.usermodel.CellType)"
                ]
            }
        },
        "org.quartz-scheduler:quartz:2.3.1": {
            "used-method num": 63,
            "used method": [
                "org.quartz.TriggerBuilder:org.quartz.TriggerBuilder withIdentity(org.quartz.TriggerKey)",
                "org.quartz.utils.DirtyFlagMap$DirtyFlagIterator:void remove()",
                "org.quartz.JobKey:org.quartz.JobKey jobKey(java.lang.String,java.lang.String)",
                "org.quartz.impl.StdScheduler:boolean checkExists(org.quartz.JobKey)",
                "org.quartz.utils.DirtyFlagMap:java.lang.Object clone()",
                "org.quartz.utils.DirtyFlagMap:java.lang.Object remove(java.lang.Object)",
                "org.quartz.utils.DirtyFlagMap:boolean isEmpty()",
                "org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntryIterator:org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntry next()",
                "org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntry:java.lang.Object getValue()",
                "org.quartz.impl.JobExecutionContextImpl:java.lang.String toString()",
                "org.quartz.SchedulerException:java.lang.String toString()",
                "org.quartz.utils.DirtyFlagMap:java.util.Collection values()",
                "org.quartz.impl.JobDetailImpl:java.lang.String toString()",
                "org.quartz.utils.DirtyFlagMap:boolean containsKey(java.lang.Object)",
                "org.quartz.CronScheduleBuilder:org.quartz.CronScheduleBuilder withMisfireHandlingInstructionFireAndProceed()",
                "org.quartz.impl.StdScheduler:java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)",
                "org.quartz.TriggerBuilder:org.quartz.TriggerBuilder newTrigger()",
                "org.quartz.utils.DirtyFlagMap:java.util.Set keySet()",
                "org.quartz.impl.JobDetailImpl:org.quartz.JobDataMap getJobDataMap()",
                "org.quartz.utils.DirtyFlagMap:java.util.Set entrySet()",
                "org.quartz.utils.DirtyFlagMap:java.lang.Object get(java.lang.Object)",
                "org.quartz.utils.StringKeyDirtyFlagMap:java.lang.Object put(java.lang.String,java.lang.Object)",
                "org.quartz.JobBuilder:org.quartz.JobDetail build()",
                "org.quartz.impl.RemoteScheduler:void resumeJob(org.quartz.JobKey)",
                "org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntrySet:java.util.Iterator iterator()",
                "org.quartz.impl.StdScheduler:void clear()",
                "org.quartz.JobDataMap:void <init>()",
                "org.quartz.JobBuilder:org.quartz.JobBuilder withIdentity(org.quartz.JobKey)",
                "org.quartz.utils.DirtyFlagMap$DirtyFlagIterator:boolean hasNext()",
                "org.quartz.utils.StringKeyDirtyFlagMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
                "org.quartz.CronExpression:java.lang.Object clone()",
                "org.quartz.TriggerBuilder:org.quartz.Trigger build()",
                "org.quartz.JobBuilder:org.quartz.JobBuilder newJob(java.lang.Class)",
                "org.quartz.impl.triggers.CronTriggerImpl:java.lang.Object clone()",
                "org.quartz.impl.RemoteScheduler:void triggerJob(org.quartz.JobKey,org.quartz.JobDataMap)",
                "org.quartz.impl.RemoteScheduler:boolean deleteJob(org.quartz.JobKey)",
                "org.quartz.impl.RemoteScheduler:java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)",
                "org.quartz.impl.StdScheduler:boolean deleteJob(org.quartz.JobKey)",
                "org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntry:java.lang.Object getKey()",
                "org.quartz.SchedulerMetaData:java.lang.String toString()",
                "org.quartz.CronScheduleBuilder:org.quartz.CronScheduleBuilder withMisfireHandlingInstructionDoNothing()",
                "org.quartz.impl.StdScheduler:void resumeJob(org.quartz.JobKey)",
                "org.quartz.utils.counter.sampled.TimeStampedCounterValue:java.lang.String toString()",
                "org.quartz.CronExpression:void <init>(java.lang.String)",
                "org.quartz.TriggerBuilder:org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)",
                "org.quartz.impl.triggers.AbstractTrigger:java.lang.String toString()",
                "org.quartz.utils.DirtyFlagMap:void clear()",
                "org.quartz.impl.RemoteScheduler:void pauseJob(org.quartz.JobKey)",
                "org.quartz.xml.ValidationException:java.lang.String getMessage()",
                "org.quartz.CronScheduleBuilder:org.quartz.CronScheduleBuilder cronSchedule(java.lang.String)",
                "org.quartz.impl.RemoteScheduler:void clear()",
                "org.quartz.impl.RemoteScheduler:boolean checkExists(org.quartz.JobKey)",
                "org.quartz.utils.DirtyFlagMap$DirtyFlagCollection:java.util.Iterator iterator()",
                "org.quartz.CronExpression:boolean isValidExpression(java.lang.String)",
                "org.quartz.TriggerKey:org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)",
                "org.quartz.CronExpression:void <clinit>()",
                "org.quartz.impl.triggers.AbstractTrigger:java.lang.Object clone()",
                "org.quartz.impl.JobDetailImpl:java.lang.Object clone()",
                "org.quartz.CronExpression:java.util.Date getNextValidTimeAfter(java.util.Date)",
                "org.quartz.utils.DirtyFlagMap$DirtyFlagIterator:java.lang.Object next()",
                "org.quartz.impl.StdScheduler:void pauseJob(org.quartz.JobKey)",
                "org.quartz.utils.Key:java.lang.String toString()",
                "org.quartz.impl.StdScheduler:void triggerJob(org.quartz.JobKey,org.quartz.JobDataMap)"
            ]
        }
    }
}