{
    "project name": "JamesZBL_db-hospital-drug",
    "vulnerable dependencies": {
        "org.apache.shiro:shiro-core:1.3.2": {
            "used-method num": 46,
            "used method": [
                "org.apache.shiro.session.mgt.eis.AbstractSessionDAO:java.io.Serializable generateSessionId(org.apache.shiro.session.Session)",
                "org.apache.shiro.authz.SimpleAuthorizationInfo:void <init>()",
                "org.apache.shiro.config.Ini:org.apache.shiro.config.Ini$Section get(java.lang.Object)",
                "org.apache.shiro.util.ByteSource$Util:org.apache.shiro.util.ByteSource bytes(java.lang.String)",
                "org.apache.shiro.util.SimpleByteSource:java.lang.String toString()",
                "org.apache.shiro.authc.UsernamePasswordToken:java.lang.Object getCredentials()",
                "org.apache.shiro.config.Ini:int size()",
                "org.apache.shiro.config.Ini:java.lang.String toString()",
                "org.apache.shiro.util.MapContext:java.lang.Object put(java.lang.Object,java.lang.Object)",
                "org.apache.shiro.subject.SimplePrincipalCollection:java.lang.String toString()",
                "org.apache.shiro.authz.SimpleAuthorizationInfo:void setStringPermissions(java.util.Set)",
                "org.apache.shiro.util.MapContext:java.lang.Object get(java.lang.Object)",
                "org.apache.shiro.session.mgt.eis.AbstractSessionDAO:void <init>()",
                "org.apache.shiro.realm.AuthorizingRealm:void <init>()",
                "org.apache.shiro.config.Ini:java.lang.Object put(java.lang.Object,java.lang.Object)",
                "org.apache.shiro.subject.support.DefaultSubjectContext:void <clinit>()",
                "org.apache.shiro.crypto.hash.SimpleHash:void <init>(java.lang.String,java.lang.Object,java.lang.Object,int)",
                "org.apache.shiro.authc.SimpleAuthenticationInfo:java.lang.String toString()",
                "org.apache.shiro.realm.AuthorizingRealm:void <clinit>()",
                "org.apache.shiro.authz.permission.WildcardPermission:java.lang.String toString()",
                "org.apache.shiro.authc.UsernamePasswordToken:java.lang.String toString()",
                "org.apache.shiro.config.Ini$Section:int size()",
                "org.apache.shiro.config.Ini$Section:java.lang.String toString()",
                "org.apache.shiro.session.mgt.eis.MemorySessionDAO:void <init>()",
                "org.apache.shiro.crypto.hash.SimpleHash:java.lang.String toHex()",
                "org.apache.shiro.realm.CachingRealm:void <clinit>()",
                "org.apache.shiro.session.mgt.eis.AbstractSessionDAO:void assignSessionId(org.apache.shiro.session.Session,java.io.Serializable)",
                "org.apache.shiro.authc.UsernamePasswordToken:void <init>(java.lang.String,java.lang.String)",
                "org.apache.shiro.util.MapContext:int size()",
                "org.apache.shiro.authc.UsernamePasswordToken:java.lang.Object getPrincipal()",
                "org.apache.shiro.crypto.hash.SimpleHash:java.lang.String toString()",
                "org.apache.shiro.cache.CacheException:void <init>(java.lang.Throwable)",
                "org.apache.shiro.subject.SimplePrincipalCollection:void <init>()",
                "org.apache.shiro.realm.CachingRealm:java.lang.String getName()",
                "org.apache.shiro.util.CollectionUtils:boolean isEmpty(java.util.Collection)",
                "org.apache.shiro.session.mgt.eis.MemorySessionDAO:java.util.Collection getActiveSessions()",
                "org.apache.shiro.subject.SimplePrincipalCollection:java.lang.Object getPrimaryPrincipal()",
                "org.apache.shiro.authc.IncorrectCredentialsException:void <init>(java.lang.String)",
                "org.apache.shiro.config.Ini$Section:java.lang.Object put(java.lang.Object,java.lang.Object)",
                "org.apache.shiro.authc.LockedAccountException:void <init>(java.lang.String)",
                "org.apache.shiro.SecurityUtils:org.apache.shiro.subject.Subject getSubject()",
                "org.apache.shiro.realm.AuthenticatingRealm:void <clinit>()",
                "org.apache.shiro.session.mgt.eis.AbstractSessionDAO:org.apache.shiro.session.Session readSession(java.io.Serializable)",
                "org.apache.shiro.authc.UnknownAccountException:void <init>(java.lang.String)",
                "org.apache.shiro.authc.SimpleAuthenticationInfo:void <init>(java.lang.Object,java.lang.Object,java.lang.String)",
                "org.apache.shiro.config.Ini$Section:java.lang.String get(java.lang.Object)"
            ]
        },
        "org.quartz-scheduler:quartz:2.2.1": {
            "used-method num": 68,
            "used method": [
                "org.quartz.TriggerBuilder:org.quartz.TriggerBuilder withIdentity(org.quartz.TriggerKey)",
                "org.quartz.impl.StdScheduler:void triggerJob(org.quartz.JobKey)",
                "org.quartz.JobBuilder:org.quartz.JobBuilder newJob(java.lang.Class)",
                "org.quartz.impl.RemoteScheduler:void triggerJob(org.quartz.JobKey)",
                "org.quartz.utils.Key:java.lang.String getGroup()",
                "org.quartz.JobKey:org.quartz.JobKey jobKey(java.lang.String,java.lang.String)",
                "org.quartz.impl.RemoteScheduler:java.util.Date rescheduleJob(org.quartz.TriggerKey,org.quartz.Trigger)",
                "org.quartz.impl.RemoteScheduler:java.util.List getCurrentlyExecutingJobs()",
                "org.quartz.utils.DirtyFlagMap$DirtyFlagCollection:int size()",
                "org.quartz.impl.RemoteScheduler:boolean deleteJob(org.quartz.JobKey)",
                "org.quartz.impl.StdScheduler:org.quartz.Trigger getTrigger(org.quartz.TriggerKey)",
                "org.quartz.impl.RemoteScheduler:java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)",
                "org.quartz.impl.StdScheduler:boolean deleteJob(org.quartz.JobKey)",
                "org.quartz.impl.StdScheduler:boolean isShutdown()",
                "org.quartz.DateBuilder:java.util.Date futureDate(int,org.quartz.DateBuilder$IntervalUnit)",
                "org.quartz.impl.triggers.AbstractTrigger:org.quartz.TriggerKey getKey()",
                "org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntryIterator:org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntry next()",
                "org.quartz.impl.JobExecutionContextImpl:org.quartz.JobDetail getJobDetail()",
                "org.quartz.DateBuilder:void <clinit>()",
                "org.quartz.impl.JobExecutionContextImpl:java.lang.String toString()",
                "org.quartz.SchedulerMetaData:java.lang.String toString()",
                "org.quartz.impl.JobExecutionContextImpl:org.quartz.Trigger getTrigger()",
                "org.quartz.SchedulerException:java.lang.String toString()",
                "org.quartz.impl.StdScheduler:void resumeJob(org.quartz.JobKey)",
                "org.quartz.JobBuilder:org.quartz.JobBuilder withIdentity(java.lang.String,java.lang.String)",
                "org.quartz.impl.JobDetailImpl:java.lang.String toString()",
                "org.quartz.utils.counter.sampled.TimeStampedCounterValue:java.lang.String toString()",
                "org.quartz.impl.JobDetailImpl:org.quartz.JobKey getKey()",
                "org.quartz.impl.triggers.AbstractTrigger:org.quartz.TriggerBuilder getTriggerBuilder()",
                "org.quartz.impl.StdScheduler:java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)",
                "org.quartz.TriggerBuilder:org.quartz.TriggerBuilder newTrigger()",
                "org.quartz.impl.StdScheduler:java.util.Date rescheduleJob(org.quartz.TriggerKey,org.quartz.Trigger)",
                "org.quartz.TriggerBuilder:org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)",
                "org.quartz.impl.triggers.AbstractTrigger:java.lang.String toString()",
                "org.quartz.impl.triggers.CronTriggerImpl:java.lang.String getCronExpression()",
                "org.quartz.impl.RemoteScheduler:void pauseJob(org.quartz.JobKey)",
                "org.quartz.impl.RemoteScheduler:java.util.List getTriggersOfJob(org.quartz.JobKey)",
                "org.quartz.TriggerBuilder:org.quartz.TriggerBuilder startNow()",
                "org.quartz.impl.RemoteScheduler:void start()",
                "org.quartz.impl.RemoteScheduler:java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher)",
                "org.quartz.utils.DirtyFlagMap:java.lang.Object get(java.lang.Object)",
                "org.quartz.xml.ValidationException:java.lang.String getMessage()",
                "org.quartz.CronScheduleBuilder:org.quartz.CronScheduleBuilder cronSchedule(java.lang.String)",
                "org.quartz.JobBuilder:org.quartz.JobDetail build()",
                "org.quartz.impl.RemoteScheduler:void resumeJob(org.quartz.JobKey)",
                "org.quartz.TriggerBuilder:org.quartz.TriggerBuilder startAt(java.util.Date)",
                "org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntrySet:java.util.Iterator iterator()",
                "org.quartz.impl.RemoteScheduler:boolean isShutdown()",
                "org.quartz.utils.DirtyFlagMap$DirtyFlagCollection:java.util.Iterator iterator()",
                "org.quartz.utils.DirtyFlagMap$DirtyFlagIterator:boolean hasNext()",
                "org.quartz.TriggerKey:org.quartz.TriggerKey triggerKey(java.lang.String,java.lang.String)",
                "org.quartz.impl.StdScheduler:java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher)",
                "org.quartz.impl.StdScheduler:java.util.List getCurrentlyExecutingJobs()",
                "org.quartz.utils.StringKeyDirtyFlagMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
                "org.quartz.utils.DirtyFlagMap:int size()",
                "org.quartz.utils.DirtyFlagMap$DirtyFlagIterator:java.lang.Object next()",
                "org.quartz.impl.StdScheduler:void start()",
                "org.quartz.DateBuilder$IntervalUnit:void <clinit>()",
                "org.quartz.impl.RemoteScheduler:org.quartz.Trigger getTrigger(org.quartz.TriggerKey)",
                "org.quartz.impl.StdScheduler:java.util.List getTriggersOfJob(org.quartz.JobKey)",
                "org.quartz.impl.StdScheduler:org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)",
                "org.quartz.impl.StdScheduler:void pauseJob(org.quartz.JobKey)",
                "org.quartz.TriggerBuilder:org.quartz.TriggerBuilder withIdentity(java.lang.String,java.lang.String)",
                "org.quartz.utils.Key:java.lang.String getName()",
                "org.quartz.utils.Key:java.lang.String toString()",
                "org.quartz.impl.matchers.GroupMatcher:org.quartz.impl.matchers.GroupMatcher anyJobGroup()",
                "org.quartz.impl.RemoteScheduler:org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)",
                "org.quartz.TriggerBuilder:org.quartz.Trigger build()"
            ]
        }
    }
}