{
    "project name": "ushahidi_Chambua",
    "vulnerable dependencies": {
        "org.springframework:spring-webmvc:3.2.0.RELEASE": {
            "used-method num": 0,
            "used method": []
        },
        "xerces:xercesImpl:2.11.0": {
            "used-method num": 0,
            "used method": []
        },
        "ch.qos.logback:logback-classic:1.0.13": {
            "used-method num": 2,
            "used method": [
                "ch.qos.logback.classic.Logger:void error(java.lang.String,java.lang.Object)",
                "ch.qos.logback.classic.Logger:void debug(java.lang.String,java.lang.Object)"
            ]
        },
        "edu.stanford.nlp:stanford-corenlp:3.3.0": {
            "used-method num": 133,
            "used method": [
                "edu.stanford.nlp.util.Iterables$8:edu.stanford.nlp.util.Pair next()",
                "edu.stanford.nlp.classify.RVFDataset$1:edu.stanford.nlp.ling.RVFDatum next()",
                "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.Set labels()",
                "edu.stanford.nlp.stats.Counters$8:boolean containsKey(java.lang.Object)",
                "edu.stanford.nlp.stats.Counters$7$1:int size()",
                "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.lang.String backgroundSymbol()",
                "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:boolean hasNext()",
                "edu.stanford.nlp.util.Iterables$1$1:boolean hasNext()",
                "edu.stanford.nlp.ling.tokensregex.SequenceMatcher$1:boolean hasNext()",
                "edu.stanford.nlp.stats.Counters$7$3$1:java.lang.Object next()",
                "edu.stanford.nlp.util.DeltaCollectionValuedMap:boolean containsKey(java.lang.Object)",
                "edu.stanford.nlp.ling.tokensregex.PhraseTable$PhraseTableIterator:edu.stanford.nlp.ling.tokensregex.PhraseTable$Phrase next()",
                "edu.stanford.nlp.util.Iterables$14$1$1$1:boolean hasNext()",
                "edu.stanford.nlp.util.BinaryHeapPriorityQueue:java.lang.Object next()",
                "edu.stanford.nlp.trees.GrammaticalStructure$LazyLoadTreesByParsing$1:edu.stanford.nlp.trees.Tree next()",
                "edu.stanford.nlp.util.TwoDimensionalMap$TwoDimensionalMapIterator:boolean hasNext()",
                "edu.stanford.nlp.stats.IntCounter$1$1:java.util.Map$Entry next()",
                "edu.stanford.nlp.trees.CompositeTreebank$CompositeTreebankIterator:edu.stanford.nlp.trees.Tree next()",
                "edu.stanford.nlp.util.FixedPrioritiesPriorityQueue:java.lang.Object next()",
                "edu.stanford.nlp.stats.Counters$6$1$1:java.util.Map$Entry next()",
                "edu.stanford.nlp.stats.Counters$7$1:java.util.Iterator iterator()",
                "edu.stanford.nlp.classify.CrossValidator$CrossValidationIterator:edu.stanford.nlp.util.Triple next()",
                "edu.stanford.nlp.stats.Counters$7$1$1:java.util.Map$Entry next()",
                "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.lang.String classifyWithInlineXML(java.lang.String)",
                "edu.stanford.nlp.util.ArraySet:java.util.Iterator iterator()",
                "edu.stanford.nlp.util.Iterables$14$1:java.lang.Iterable next()",
                "edu.stanford.nlp.util.Iterables$3$1:java.lang.Object next()",
                "edu.stanford.nlp.stats.IntCounter$1$1:boolean hasNext()",
                "edu.stanford.nlp.stats.IntCounter$1:int size()",
                "edu.stanford.nlp.util.DeltaCollectionValuedMap$1:int size()",
                "edu.stanford.nlp.util.ArrayCoreMap$1$1:boolean hasNext()",
                "edu.stanford.nlp.util.FixedPrioritiesPriorityQueue:java.util.Iterator iterator()",
                "edu.stanford.nlp.util.DeltaCollectionValuedMap:java.util.Collection get(java.lang.Object)",
                "edu.stanford.nlp.util.CollectionValuedMap:boolean containsKey(java.lang.Object)",
                "edu.stanford.nlp.objectbank.LineIterator:boolean hasNext()",
                "edu.stanford.nlp.io.IOUtils$GetLinesIterable$1:boolean hasNext()",
                "edu.stanford.nlp.stats.Counters$6$1:java.util.Iterator iterator()",
                "edu.stanford.nlp.util.ArraySet:boolean add(java.lang.Object)",
                "edu.stanford.nlp.stats.ClassicCounter$2:java.util.Iterator iterator()",
                "edu.stanford.nlp.util.BinaryHeapPriorityQueue:int size()",
                "edu.stanford.nlp.util.Iterables$6$1:java.lang.Object next()",
                "edu.stanford.nlp.io.IOUtils$GetLinesIterable$1:java.lang.String next()",
                "edu.stanford.nlp.util.BinaryHeapPriorityQueue:java.util.Iterator iterator()",
                "edu.stanford.nlp.ie.AbstractSequenceClassifier:void <clinit>()",
                "edu.stanford.nlp.util.Beam:int size()",
                "edu.stanford.nlp.util.TwoDimensionalMap$TwoDimensionalMapValueIterator:java.lang.Object next()",
                "edu.stanford.nlp.stats.ClassicCounter$2:int size()",
                "edu.stanford.nlp.util.FixedPrioritiesPriorityQueue:int size()",
                "edu.stanford.nlp.util.ArrayHeap:java.util.Iterator iterator()",
                "edu.stanford.nlp.util.TwoDimensionalMap$TwoDimensionalMapIterator:edu.stanford.nlp.util.TwoDimensionalMap$Entry next()",
                "edu.stanford.nlp.stats.ClassicCounter$2$1:boolean hasNext()",
                "edu.stanford.nlp.util.Iterables$6$1:boolean hasNext()",
                "edu.stanford.nlp.util.FilteredIterator:boolean hasNext()",
                "edu.stanford.nlp.stats.ClassicCounter$1$1:boolean hasNext()",
                "edu.stanford.nlp.stats.Counters$7$3:java.util.Iterator iterator()",
                "edu.stanford.nlp.trees.TransformingTreebank$TransformingTreebankIterator:boolean hasNext()",
                "edu.stanford.nlp.process.AbstractTokenizer:boolean hasNext()",
                "edu.stanford.nlp.objectbank.ReaderIteratorFactory$ReaderIterator:boolean hasNext()",
                "edu.stanford.nlp.util.BinaryHeapPriorityQueue:boolean add(java.lang.Object)",
                "edu.stanford.nlp.util.FixedPrioritiesPriorityQueue:boolean hasNext()",
                "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:edu.stanford.nlp.trees.Tree next()",
                "edu.stanford.nlp.trees.tregex.Relation$SearchNodeIterator:edu.stanford.nlp.trees.Tree next()",
                "edu.stanford.nlp.sequences.ObjectBankWrapper$WrappedIterator:boolean hasNext()",
                "edu.stanford.nlp.util.IterableIterator:java.lang.Object next()",
                "edu.stanford.nlp.io.IOUtils$EolPreservingLineReaderIterable$1:boolean hasNext()",
                "edu.stanford.nlp.trees.TransformingTreebank$TransformingTreebankIterator:edu.stanford.nlp.trees.Tree next()",
                "edu.stanford.nlp.util.BinaryHeapPriorityQueue:boolean hasNext()",
                "edu.stanford.nlp.util.ConcatenationIterator:boolean hasNext()",
                "edu.stanford.nlp.stats.IntCounter$1:java.util.Iterator iterator()",
                "edu.stanford.nlp.util.ArrayCoreMap$1$1:java.lang.Class next()",
                "edu.stanford.nlp.stats.ClassicCounter$1$1:java.lang.Double next()",
                "edu.stanford.nlp.process.AbstractTokenizer:java.lang.Object next()",
                "edu.stanford.nlp.io.IOUtils$EolPreservingLineReaderIterable$1:java.lang.String next()",
                "edu.stanford.nlp.objectbank.LineIterator:java.lang.Object next()",
                "edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper$GsIterator:edu.stanford.nlp.trees.GrammaticalStructure next()",
                "edu.stanford.nlp.util.ArrayMap:java.lang.Object get(java.lang.Object)",
                "edu.stanford.nlp.util.Iterables$14$1$1$1:java.lang.Object next()",
                "edu.stanford.nlp.util.Iterables$2$1:boolean hasNext()",
                "edu.stanford.nlp.util.DeltaMap:boolean containsKey(java.lang.Object)",
                "edu.stanford.nlp.util.Iterables$2$1:java.lang.Object next()",
                "edu.stanford.nlp.objectbank.ObjectBank$OBIterator:boolean hasNext()",
                "edu.stanford.nlp.util.DeltaMap$1$1NullingIterator:java.util.Map$Entry next()",
                "edu.stanford.nlp.stats.Counters$8:java.lang.Double get(java.lang.Object)",
                "edu.stanford.nlp.util.DeltaMap:java.lang.Object get(java.lang.Object)",
                "edu.stanford.nlp.io.IOUtils$LineReaderIterable$1:java.lang.String next()",
                "edu.stanford.nlp.util.TwoDimensionalMap$TwoDimensionalMapValueIterator:boolean hasNext()",
                "edu.stanford.nlp.util.Iterables$9$1:boolean hasNext()",
                "edu.stanford.nlp.trees.tregex.Relation$SearchNodeIterator:boolean hasNext()",
                "edu.stanford.nlp.classify.RVFDataset$1:boolean hasNext()",
                "edu.stanford.nlp.util.FilteredIterator:java.lang.Object next()",
                "edu.stanford.nlp.io.IOUtils$1$1:boolean hasNext()",
                "edu.stanford.nlp.util.CacheMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
                "edu.stanford.nlp.trees.CompositeTreebank$CompositeTreebankIterator:boolean hasNext()",
                "edu.stanford.nlp.util.DeltaMap$1$1NullingIterator:boolean hasNext()",
                "edu.stanford.nlp.util.IdentityHashSet:boolean add(java.lang.Object)",
                "edu.stanford.nlp.classify.CrossValidator$CrossValidationIterator:boolean hasNext()",
                "edu.stanford.nlp.util.IterableIterator:boolean hasNext()",
                "edu.stanford.nlp.util.CacheMap:java.lang.Object get(java.lang.Object)",
                "edu.stanford.nlp.util.ArrayHeap:int size()",
                "edu.stanford.nlp.util.Beam:boolean add(java.lang.Object)",
                "edu.stanford.nlp.stats.Counters$7$3:int size()",
                "edu.stanford.nlp.util.ArraySet:int size()",
                "edu.stanford.nlp.util.Iterables$9$1:edu.stanford.nlp.util.Pair next()",
                "edu.stanford.nlp.util.ArrayHeap:boolean add(java.lang.Object)",
                "edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper$GsIterator:boolean hasNext()",
                "edu.stanford.nlp.stats.Counters$7$4$1:java.lang.Double next()",
                "edu.stanford.nlp.util.ConcatenationIterator:java.lang.Object next()",
                "edu.stanford.nlp.math.DoubleAD:float floatValue()",
                "edu.stanford.nlp.util.DeltaMap$1:int size()",
                "edu.stanford.nlp.util.logging.Redwood$RecordHandlerTree$1:edu.stanford.nlp.util.logging.LogRecordHandler next()",
                "edu.stanford.nlp.ling.tokensregex.SequenceMatcher$1:edu.stanford.nlp.ling.tokensregex.SequenceMatchResult next()",
                "edu.stanford.nlp.util.DeltaMap$1:java.util.Iterator iterator()",
                "edu.stanford.nlp.util.IdentityHashSet:int size()",
                "edu.stanford.nlp.util.logging.Redwood$RecordHandlerTree$1:boolean hasNext()",
                "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.ie.crf.CRFClassifier getClassifierNoExceptions(java.lang.String)",
                "edu.stanford.nlp.objectbank.ObjectBank$OBIterator:java.lang.Object next()",
                "edu.stanford.nlp.stats.ClassicCounter$2$1:java.util.Map$Entry next()",
                "edu.stanford.nlp.util.CollectionValuedMap:java.util.Collection get(java.lang.Object)",
                "edu.stanford.nlp.util.DeltaCollectionValuedMap$1:java.util.Iterator iterator()",
                "edu.stanford.nlp.io.IOUtils$1$1:java.io.File next()",
                "edu.stanford.nlp.util.ArrayCoreMap$1:java.util.Iterator iterator()",
                "edu.stanford.nlp.util.ArrayCoreMap$1:int size()",
                "edu.stanford.nlp.objectbank.ReaderIteratorFactory$ReaderIterator:java.io.Reader next()",
                "edu.stanford.nlp.process.WordShapeClassifier$DistributionalClusters$LcMap:java.lang.Object get(java.lang.Object)",
                "edu.stanford.nlp.sequences.ObjectBankWrapper$WrappedIterator:java.util.List next()",
                "edu.stanford.nlp.util.Iterables$1$1:java.lang.Object next()",
                "edu.stanford.nlp.stats.Counters$7$3$1:boolean hasNext()",
                "edu.stanford.nlp.util.Beam:java.util.Iterator iterator()",
                "edu.stanford.nlp.trees.MemoryTreebank:java.util.Iterator iterator()",
                "edu.stanford.nlp.ie.crf.CRFClassifier:void <clinit>()",
                "edu.stanford.nlp.trees.GrammaticalStructure$LazyLoadTreesByParsing$1:boolean hasNext()",
                "edu.stanford.nlp.stats.IntCounter$3$1:java.lang.Double next()",
                "edu.stanford.nlp.util.IdentityHashSet:java.util.Iterator iterator()"
            ],
            "CVE": [
                "CVE-2021-3869"
            ],
            "used vul-method": [
                "edu.stanford.nlp.trees.GrammaticalStructure$LazyLoadTreesByParsing$1:edu.stanford.nlp.trees.Tree next()",
                "edu.stanford.nlp.trees.CompositeTreebank$CompositeTreebankIterator:edu.stanford.nlp.trees.Tree next()",
                "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:edu.stanford.nlp.trees.Tree next()",
                "edu.stanford.nlp.trees.TransformingTreebank$TransformingTreebankIterator:edu.stanford.nlp.trees.Tree next()",
                "edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper$GsIterator:edu.stanford.nlp.trees.GrammaticalStructure next()"
            ],
            "vul-called frequency": 15,
            "related vul root method": {
                "CVE-2021-3869": [
                    "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
                ]
            },
            "CVE-API": {
                "CVE-2021-3869": [
                    "edu.stanford.nlp.trees.GrammaticalStructure$LazyLoadTreesByParsing$1:edu.stanford.nlp.trees.Tree next()",
                    "edu.stanford.nlp.trees.CompositeTreebank$CompositeTreebankIterator:edu.stanford.nlp.trees.Tree next()",
                    "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:edu.stanford.nlp.trees.Tree next()",
                    "edu.stanford.nlp.trees.TransformingTreebank$TransformingTreebankIterator:edu.stanford.nlp.trees.Tree next()",
                    "edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper$GsIterator:edu.stanford.nlp.trees.GrammaticalStructure next()"
                ]
            }
        },
        "junit:junit:4.11": {
            "used-method num": 0,
            "used method": []
        }
    }
}