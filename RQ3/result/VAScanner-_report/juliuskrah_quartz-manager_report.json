{
    "project name": "juliuskrah_quartz-manager",
    "vulnerable dependencies": {
        "org.quartz-scheduler:quartz:2.3.0": {
            "used-method num": 51,
            "used method": [
                "org.quartz.CronScheduleBuilder:org.quartz.CronScheduleBuilder withMisfireHandlingInstructionFireAndProceed()",
                "org.quartz.impl.StdScheduler:void resumeJob(org.quartz.JobKey)",
                "org.quartz.JobDataMap:void <init>()",
                "org.quartz.impl.StdScheduler:void scheduleJob(org.quartz.JobDetail,java.util.Set,boolean)",
                "org.quartz.JobBuilder:org.quartz.JobDetail build()",
                "org.quartz.impl.RemoteScheduler:void scheduleJob(org.quartz.JobDetail,java.util.Set,boolean)",
                "org.quartz.TriggerBuilder:org.quartz.TriggerBuilder newTrigger()",
                "org.quartz.JobBuilder:org.quartz.JobBuilder newJob(java.lang.Class)",
                "org.quartz.impl.RemoteScheduler:void addJob(org.quartz.JobDetail,boolean)",
                "org.quartz.SimpleScheduleBuilder:org.quartz.SimpleScheduleBuilder simpleSchedule()",
                "org.quartz.utils.StringKeyDirtyFlagMap:boolean equals(java.lang.Object)",
                "org.quartz.CronExpression:void <clinit>()",
                "org.quartz.utils.DirtyFlagMap:java.lang.Object get(java.lang.Object)",
                "org.quartz.impl.RemoteScheduler:void pauseJob(org.quartz.JobKey)",
                "org.quartz.impl.triggers.AbstractTrigger:org.quartz.JobDataMap getJobDataMap()",
                "org.quartz.impl.JobDetailImpl:org.quartz.JobDataMap getJobDataMap()",
                "org.quartz.impl.triggers.AbstractTrigger:org.quartz.TriggerKey getKey()",
                "org.quartz.impl.StdScheduler:void pauseJob(org.quartz.JobKey)",
                "org.quartz.impl.RemoteScheduler:void resumeJob(org.quartz.JobKey)",
                "org.quartz.impl.StdScheduler:boolean deleteJob(org.quartz.JobKey)",
                "org.quartz.TriggerBuilder:org.quartz.TriggerBuilder startAt(java.util.Date)",
                "org.quartz.impl.RemoteScheduler:java.util.List getTriggersOfJob(org.quartz.JobKey)",
                "org.quartz.TriggerBuilder:org.quartz.TriggerBuilder usingJobData(java.lang.String,java.lang.String)",
                "org.quartz.impl.StdScheduler:org.quartz.JobDetail getJobDetail(org.quartz.JobKey)",
                "org.quartz.utils.Key:java.lang.String getGroup()",
                "org.quartz.JobBuilder:org.quartz.JobBuilder withIdentity(java.lang.String,java.lang.String)",
                "org.quartz.utils.StringKeyDirtyFlagMap:void put(java.lang.String,java.lang.String)",
                "org.quartz.utils.DirtyFlagMap$DirtyFlagIterator:boolean hasNext()",
                "org.quartz.utils.StringKeyDirtyFlagMap:java.lang.String getString(java.lang.String)",
                "org.quartz.CronExpression:boolean isValidExpression(java.lang.String)",
                "org.quartz.JobDataMap:void <init>(java.util.Map)",
                "org.quartz.impl.JobDetailImpl:org.quartz.JobBuilder getJobBuilder()",
                "org.quartz.CronScheduleBuilder:org.quartz.CronScheduleBuilder inTimeZone(java.util.TimeZone)",
                "org.quartz.TriggerBuilder:org.quartz.TriggerBuilder withIdentity(java.lang.String,java.lang.String)",
                "org.quartz.utils.DirtyFlagMap$DirtyFlagIterator:java.lang.Object next()",
                "org.quartz.TriggerBuilder:org.quartz.Trigger build()",
                "org.quartz.utils.Key:java.lang.String getName()",
                "org.quartz.impl.RemoteScheduler:org.quartz.JobDetail getJobDetail(org.quartz.JobKey)",
                "org.quartz.TriggerBuilder:org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)",
                "org.quartz.JobKey:org.quartz.JobKey jobKey(java.lang.String,java.lang.String)",
                "org.quartz.impl.RemoteScheduler:boolean deleteJob(org.quartz.JobKey)",
                "org.quartz.SimpleScheduleBuilder:org.quartz.SimpleScheduleBuilder withMisfireHandlingInstructionNextWithExistingCount()",
                "org.quartz.impl.StdScheduler:void addJob(org.quartz.JobDetail,boolean)",
                "org.quartz.TriggerBuilder:org.quartz.TriggerBuilder usingJobData(org.quartz.JobDataMap)",
                "org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntryIterator:org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntry next()",
                "org.quartz.JobBuilder:org.quartz.JobBuilder usingJobData(org.quartz.JobDataMap)",
                "org.quartz.impl.StdScheduler:java.util.List getTriggersOfJob(org.quartz.JobKey)",
                "org.quartz.utils.StringKeyDirtyFlagMap:int hashCode()",
                "org.quartz.utils.StringKeyDirtyFlagMap:java.lang.Object put(java.lang.String,java.lang.Object)",
                "org.quartz.CronScheduleBuilder:org.quartz.CronScheduleBuilder cronSchedule(java.lang.String)",
                "org.quartz.impl.JobDetailImpl:org.quartz.JobKey getKey()"
            ]
        },
        "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.8.10": {
            "used-method num": 0,
            "used method": []
        }
    }
}