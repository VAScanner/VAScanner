{
    "project name": "boubei-com_boubei-tss",
    "vulnerable dependencies": {
        "com.thoughtworks.xstream:xstream:1.4.15": {
            "used-method num": 86,
            "used method": [
                "com.thoughtworks.xstream.core.util.PresortedSet:java.lang.Object[] toArray()",
                "com.thoughtworks.xstream.core.util.Base64Encoder:void <init>()",
                "com.thoughtworks.xstream.core.util.OrderRetainingMap:void clear()",
                "com.thoughtworks.xstream.XStream:void <clinit>()",
                "com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator:boolean hasNext()",
                "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int available()",
                "com.thoughtworks.xstream.io.xml.XmlFriendlyNameCoder:java.lang.Object clone()",
                "com.thoughtworks.xstream.core.util.WeakCache:int size()",
                "com.thoughtworks.xstream.core.util.Base64Encoder:void <clinit>()",
                "com.thoughtworks.xstream.core.util.PresortedSet:boolean add(java.lang.Object)",
                "com.thoughtworks.xstream.converters.reflection.FieldKey:int hashCode()",
                "com.thoughtworks.xstream.core.util.PresortedMap:boolean containsValue(java.lang.Object)",
                "com.thoughtworks.xstream.core.util.WeakCache:boolean containsKey(java.lang.Object)",
                "com.thoughtworks.xstream.core.util.CustomObjectInputStream:void close()",
                "com.thoughtworks.xstream.io.path.Path:java.lang.String toString()",
                "com.thoughtworks.xstream.core.util.PresortedSet:int hashCode()",
                "com.thoughtworks.xstream.core.util.PresortedSet:boolean equals(java.lang.Object)",
                "com.thoughtworks.xstream.security.PrimitiveTypePermission:boolean equals(java.lang.Object)",
                "com.thoughtworks.xstream.converters.reflection.FieldKey:java.lang.String toString()",
                "com.thoughtworks.xstream.core.util.WeakCache:boolean equals(java.lang.Object)",
                "com.thoughtworks.xstream.core.util.ObjectIdDictionary$WeakIdWrapper:java.lang.String toString()",
                "com.thoughtworks.xstream.core.util.PresortedSet:java.util.Iterator iterator()",
                "com.thoughtworks.xstream.core.util.PresortedMap:java.lang.Object get(java.lang.Object)",
                "com.thoughtworks.xstream.XStream:java.lang.String toXML(java.lang.Object)",
                "com.thoughtworks.xstream.core.util.PresortedMap:java.util.Collection values()",
                "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int read(byte[])",
                "com.thoughtworks.xstream.core.util.WeakCache:java.lang.Object put(java.lang.Object,java.lang.Object)",
                "com.thoughtworks.xstream.core.util.WeakCache:void clear()",
                "com.thoughtworks.xstream.core.util.WeakCache:boolean containsValue(java.lang.Object)",
                "com.thoughtworks.xstream.core.util.WeakCache:java.util.Collection values()",
                "com.thoughtworks.xstream.core.util.PresortedMap:java.util.Set keySet()",
                "com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper:java.lang.String toString()",
                "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int read()",
                "com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator:java.lang.Object next()",
                "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$NamedItemType:int hashCode()",
                "com.thoughtworks.xstream.core.util.FastField:java.lang.String toString()",
                "com.thoughtworks.xstream.core.util.WeakCache:java.lang.Object remove(java.lang.Object)",
                "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$NamedItemType:boolean equals(java.lang.Object)",
                "com.thoughtworks.xstream.core.util.PresortedSet:boolean contains(java.lang.Object)",
                "com.thoughtworks.xstream.core.util.PresortedSet:boolean addAll(java.util.Collection)",
                "com.thoughtworks.xstream.core.util.OrderRetainingMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
                "com.thoughtworks.xstream.core.util.WeakCache:int hashCode()",
                "com.thoughtworks.xstream.core.util.PresortedMap:int size()",
                "com.thoughtworks.xstream.core.util.CompositeClassLoader$1:boolean addAll(java.util.Collection)",
                "com.thoughtworks.xstream.XStream:void <init>()",
                "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$FieldLocation:boolean equals(java.lang.Object)",
                "com.thoughtworks.xstream.core.util.WeakCache:java.util.Set keySet()",
                "com.thoughtworks.xstream.io.path.Path:boolean equals(java.lang.Object)",
                "com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator:void remove()",
                "com.thoughtworks.xstream.core.util.WeakCache:java.lang.String toString()",
                "com.thoughtworks.xstream.converters.collections.TreeSetConverter$1$1:boolean add(java.lang.Object)",
                "com.thoughtworks.xstream.security.AnyTypePermission:boolean equals(java.lang.Object)",
                "com.thoughtworks.xstream.converters.reflection.FieldKey:boolean equals(java.lang.Object)",
                "com.thoughtworks.xstream.core.util.ObjectIdDictionary$WeakIdWrapper:boolean equals(java.lang.Object)",
                "com.thoughtworks.xstream.core.util.OrderRetainingMap:java.util.Collection values()",
                "com.thoughtworks.xstream.core.util.PresortedMap:boolean isEmpty()",
                "com.thoughtworks.xstream.core.util.PresortedMap:java.lang.Object remove(java.lang.Object)",
                "com.thoughtworks.xstream.core.util.WeakCache:java.lang.Object get(java.lang.Object)",
                "com.thoughtworks.xstream.converters.ErrorWritingException:java.lang.String getMessage()",
                "com.thoughtworks.xstream.core.util.PresortedSet:boolean isEmpty()",
                "com.thoughtworks.xstream.core.util.OrderRetainingMap:java.lang.Object remove(java.lang.Object)",
                "com.thoughtworks.xstream.core.util.OrderRetainingMap:java.util.Set entrySet()",
                "com.thoughtworks.xstream.core.util.DependencyInjectionFactory$TypedValue:java.lang.String toString()",
                "com.thoughtworks.xstream.core.util.PresortedMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
                "com.thoughtworks.xstream.core.util.CompositeClassLoader$1:boolean add(java.lang.Object)",
                "com.thoughtworks.xstream.core.util.PresortedSet:int size()",
                "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void close()",
                "com.thoughtworks.xstream.core.util.PresortedSet:boolean remove(java.lang.Object)",
                "com.thoughtworks.xstream.core.util.PresortedMap:void putAll(java.util.Map)",
                "com.thoughtworks.xstream.core.util.FastField:boolean equals(java.lang.Object)",
                "com.thoughtworks.xstream.converters.collections.TreeSetConverter$1$1:int size()",
                "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$FieldLocation:int hashCode()",
                "com.thoughtworks.xstream.core.util.PresortedSet:void clear()",
                "com.thoughtworks.xstream.core.util.ThreadSafeSimpleDateFormat:java.lang.String toString()",
                "com.thoughtworks.xstream.core.util.PresortedMap:void clear()",
                "com.thoughtworks.xstream.security.ArrayTypePermission:boolean equals(java.lang.Object)",
                "com.thoughtworks.xstream.core.util.Base64Encoder:java.lang.String encode(byte[])",
                "com.thoughtworks.xstream.core.util.OrderRetainingMap:void putAll(java.util.Map)",
                "com.thoughtworks.xstream.core.util.Base64Encoder:byte[] decode(java.lang.String)",
                "com.thoughtworks.xstream.io.path.Path:int hashCode()",
                "com.thoughtworks.xstream.security.InterfaceTypePermission:boolean equals(java.lang.Object)",
                "com.thoughtworks.xstream.core.util.OrderRetainingMap:java.util.Set keySet()",
                "com.thoughtworks.xstream.core.util.WeakCache:java.util.Set entrySet()",
                "com.thoughtworks.xstream.core.util.FastStack:java.lang.String toString()",
                "com.thoughtworks.xstream.core.util.FastField:int hashCode()",
                "com.thoughtworks.xstream.security.NoTypePermission:boolean equals(java.lang.Object)"
            ],
            "CVE": [
                "CVE-2021-29505",
                "CVE-2021-43859"
            ],
            "used vul-method": [
                "com.thoughtworks.xstream.XStream:void <init>()",
                "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int read(byte[])",
                "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int read()"
            ],
            "vul-called frequency": 5,
            "related vul root method": {
                "CVE-2021-29505": [
                    "com.thoughtworks.xstream.XStream:void setupSecurity()"
                ],
                "CVE-2021-43859": [
                    "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
                    "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
                ]
            },
            "CVE-API": {
                "CVE-2021-29505": [
                    "com.thoughtworks.xstream.XStream:void <init>()"
                ],
                "CVE-2021-43859": [
                    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int read(byte[])",
                    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int read()"
                ]
            }
        },
        "dom4j:dom4j:1.6.1": {
            "used-method num": 117,
            "used method": [
                "org.dom4j.tree.AbstractDocument:java.lang.String toString()",
                "org.dom4j.tree.ConcurrentReaderHashMap$HashIterator:java.lang.Object nextElement()",
                "org.dom4j.tree.ContentListFacade:int indexOf(java.lang.Object)",
                "org.dom4j.tree.AbstractCDATA:java.lang.String toString()",
                "org.dom4j.Namespace:boolean equals(java.lang.Object)",
                "org.dom4j.tree.ConcurrentReaderHashMap$KeySet:java.util.Iterator iterator()",
                "org.dom4j.tree.AbstractElement:java.lang.String getName()",
                "org.dom4j.tree.ContentListFacade:boolean removeAll(java.util.Collection)",
                "org.dom4j.xpath.DefaultXPath:java.lang.String toString()",
                "org.dom4j.tree.AbstractComment:java.lang.String toString()",
                "org.dom4j.tree.ConcurrentReaderHashMap$Values:java.util.Iterator iterator()",
                "org.dom4j.QName:int hashCode()",
                "org.dom4j.tree.DefaultCDATA:void <init>(java.lang.String)",
                "org.dom4j.tree.DefaultDocument:java.lang.Object clone()",
                "org.dom4j.tree.ConcurrentReaderHashMap$EntrySet:boolean contains(java.lang.Object)",
                "org.dom4j.tree.ContentListFacade:java.lang.Object remove(int)",
                "org.dom4j.DocumentHelper:org.dom4j.Document parseText(java.lang.String)",
                "org.dom4j.tree.ConcurrentReaderHashMap:void putAll(java.util.Map)",
                "org.dom4j.tree.ConcurrentReaderHashMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
                "org.dom4j.tree.ConcurrentReaderHashMap$HashIterator:void remove()",
                "org.dom4j.tree.DefaultDocument:org.dom4j.Element getRootElement()",
                "org.dom4j.tree.AbstractElement:java.util.Iterator elementIterator(java.lang.String)",
                "org.dom4j.tree.ConcurrentReaderHashMap$KeySet:int size()",
                "org.dom4j.tree.AbstractElement:java.util.Iterator elementIterator()",
                "org.dom4j.tree.ConcurrentReaderHashMap$Entry:boolean equals(java.lang.Object)",
                "org.dom4j.io.SAXReader:org.dom4j.Document read(java.net.URL)",
                "org.dom4j.io.SAXReader:org.dom4j.Document read(java.io.File)",
                "org.dom4j.tree.FlyweightCDATA:java.lang.String getText()",
                "org.dom4j.tree.FlyweightComment:java.lang.String getText()",
                "org.dom4j.tree.ConcurrentReaderHashMap:java.lang.Object remove(java.lang.Object)",
                "org.dom4j.io.SAXReader:org.dom4j.Document read(java.io.InputStream)",
                "org.dom4j.tree.DefaultNamespace:boolean equals(java.lang.Object)",
                "org.dom4j.tree.AbstractNode:void <clinit>()",
                "org.dom4j.tree.AbstractElement:org.dom4j.Element addAttribute(java.lang.String,java.lang.String)",
                "org.dom4j.DocumentException:void printStackTrace(java.io.PrintWriter)",
                "org.dom4j.tree.DefaultElement:void clearContent()",
                "org.dom4j.tree.AbstractBranch:java.lang.String getText()",
                "org.dom4j.tree.ConcurrentReaderHashMap:boolean containsKey(java.lang.Object)",
                "org.dom4j.xpath.XPathPattern:java.lang.String toString()",
                "org.dom4j.tree.ConcurrentReaderHashMap$EntrySet:boolean remove(java.lang.Object)",
                "org.dom4j.tree.AbstractElement:java.lang.String toString()",
                "org.dom4j.io.SAXReader:org.dom4j.Document read(java.lang.String)",
                "org.dom4j.tree.ConcurrentReaderHashMap$HashIterator:java.lang.Object next()",
                "org.dom4j.tree.ConcurrentReaderHashMap$Entry:java.lang.String toString()",
                "org.dom4j.tree.AbstractAttribute:java.lang.String getName()",
                "org.dom4j.tree.DefaultElement:java.util.List attributes()",
                "org.dom4j.tree.ConcurrentReaderHashMap:void clear()",
                "org.dom4j.tree.AbstractText:java.lang.String toString()",
                "org.dom4j.tree.ContentListFacade:int size()",
                "org.dom4j.DocumentException:java.lang.String getMessage()",
                "org.dom4j.tree.AbstractNode:java.lang.Object clone()",
                "org.dom4j.tree.AbstractAttribute:java.lang.String getText()",
                "org.dom4j.io.XMLWriter:void write(org.dom4j.Document)",
                "org.dom4j.dtd.InternalEntityDecl:java.lang.String toString()",
                "org.dom4j.tree.AbstractNode:org.dom4j.Node selectSingleNode(java.lang.String)",
                "org.dom4j.dtd.ExternalEntityDecl:java.lang.String toString()",
                "org.dom4j.tree.ContentListFacade:java.lang.Object get(int)",
                "org.dom4j.tree.ContentListFacade:java.lang.Object set(int,java.lang.Object)",
                "org.dom4j.dtd.ElementDecl:java.lang.String toString()",
                "org.dom4j.tree.ConcurrentReaderHashMap:boolean containsValue(java.lang.Object)",
                "org.dom4j.Namespace:java.lang.String getText()",
                "org.dom4j.QName:boolean equals(java.lang.Object)",
                "org.dom4j.tree.ConcurrentReaderHashMap:java.util.Collection values()",
                "org.dom4j.tree.ContentListFacade:boolean add(java.lang.Object)",
                "org.dom4j.tree.AbstractElement:void <clinit>()",
                "org.dom4j.tree.AbstractDocument:java.lang.String asXML()",
                "org.dom4j.tree.ConcurrentReaderHashMap$HashIterator:boolean hasMoreElements()",
                "org.dom4j.tree.ConcurrentReaderHashMap:java.lang.Object get(java.lang.Object)",
                "org.dom4j.Namespace:int hashCode()",
                "org.dom4j.tree.ContentListFacade:java.lang.Object[] toArray()",
                "org.dom4j.tree.ConcurrentReaderHashMap$Entry:int hashCode()",
                "org.dom4j.tree.ContentListFacade:void add(int,java.lang.Object)",
                "org.dom4j.tree.AbstractDocumentType:java.lang.String toString()",
                "org.dom4j.tree.DefaultElement:void <clinit>()",
                "org.dom4j.QName:java.lang.String toString()",
                "org.dom4j.tree.ConcurrentReaderHashMap$KeySet:void clear()",
                "org.dom4j.Namespace:java.lang.String toString()",
                "org.dom4j.tree.ContentListFacade:boolean addAll(java.util.Collection)",
                "org.dom4j.io.XMLWriter:void close()",
                "org.dom4j.io.OutputFormat:org.dom4j.io.OutputFormat createPrettyPrint()",
                "org.dom4j.tree.AbstractNode:java.util.List selectNodes(java.lang.String)",
                "org.dom4j.tree.AbstractEntity:java.lang.String toString()",
                "org.dom4j.tree.ConcurrentReaderHashMap:java.lang.Object clone()",
                "org.dom4j.tree.ConcurrentReaderHashMap:java.util.Set keySet()",
                "org.dom4j.tree.ConcurrentReaderHashMap$KeySet:boolean remove(java.lang.Object)",
                "org.dom4j.tree.DefaultElement:java.lang.String getText()",
                "org.dom4j.tree.ConcurrentReaderHashMap:java.util.Set entrySet()",
                "org.dom4j.tree.ConcurrentReaderHashMap$EntrySet:void clear()",
                "org.dom4j.tree.FlyweightEntity:java.lang.String getText()",
                "org.dom4j.tree.AbstractElement:java.lang.String attributeValue(java.lang.String)",
                "org.dom4j.tree.ConcurrentReaderHashMap$EntrySet:java.util.Iterator iterator()",
                "org.dom4j.tree.ContentListFacade:boolean contains(java.lang.Object)",
                "org.dom4j.tree.AbstractElement:void add(org.dom4j.Element)",
                "org.dom4j.io.XMLWriter:void <clinit>()",
                "org.dom4j.tree.AbstractAttribute:java.lang.String toString()",
                "org.dom4j.io.XMLWriter:void <init>(java.io.OutputStream,org.dom4j.io.OutputFormat)",
                "org.dom4j.tree.DefaultElement:java.util.Iterator attributeIterator()",
                "org.dom4j.tree.NamespaceStack:java.lang.String toString()",
                "org.dom4j.tree.AbstractElement:java.lang.String asXML()",
                "org.dom4j.tree.ConcurrentReaderHashMap$HashIterator:boolean hasNext()",
                "org.dom4j.tree.ConcurrentReaderHashMap$EntrySet:int size()",
                "org.dom4j.io.SAXReader:void <init>()",
                "org.dom4j.tree.ContentListFacade:boolean remove(java.lang.Object)",
                "org.dom4j.tree.AbstractDocumentType:java.lang.String getText()",
                "org.dom4j.tree.DefaultElement:java.lang.Object clone()",
                "org.dom4j.tree.AbstractProcessingInstruction:java.lang.String toString()",
                "org.dom4j.tree.ContentListFacade:boolean isEmpty()",
                "org.dom4j.tree.AbstractNode:java.lang.String valueOf(java.lang.String)",
                "org.dom4j.tree.DefaultElement:void <init>(java.lang.String)",
                "org.dom4j.tree.AbstractElement:void add(org.dom4j.CDATA)",
                "org.dom4j.tree.ConcurrentReaderHashMap:int size()",
                "org.dom4j.tree.ConcurrentReaderHashMap$KeySet:boolean contains(java.lang.Object)",
                "org.dom4j.dtd.AttributeDecl:java.lang.String toString()",
                "org.dom4j.tree.FlyweightText:java.lang.String getText()",
                "org.dom4j.tree.DefaultNamespace:int hashCode()",
                "org.dom4j.tree.FlyweightProcessingInstruction:java.lang.String getText()",
                "org.dom4j.tree.FlyweightAttribute:java.lang.String getValue()"
            ],
            "CVE": [
                "CVE-2020-10683"
            ],
            "used vul-method": [
                "org.dom4j.tree.DefaultDocument:java.lang.Object clone()",
                "org.dom4j.DocumentHelper:org.dom4j.Document parseText(java.lang.String)",
                "org.dom4j.io.SAXReader:org.dom4j.Document read(java.net.URL)",
                "org.dom4j.io.SAXReader:org.dom4j.Document read(java.io.File)",
                "org.dom4j.io.SAXReader:org.dom4j.Document read(java.io.InputStream)",
                "org.dom4j.tree.AbstractElement:org.dom4j.Element addAttribute(java.lang.String,java.lang.String)",
                "org.dom4j.io.SAXReader:org.dom4j.Document read(java.lang.String)",
                "org.dom4j.tree.DefaultElement:java.lang.Object clone()"
            ],
            "vul-called frequency": 14,
            "root vul-called frequency": 2,
            "related vul root method": {
                "CVE-2020-10683": [
                    "org.dom4j.io.SAXReader:org.xml.sax.XMLReader installXMLFilter(org.xml.sax.XMLReader)",
                    "org.dom4j.io.SAXReader:org.dom4j.Document read(org.xml.sax.InputSource)",
                    "org.dom4j.io.SAXReader:void configureReader(org.xml.sax.XMLReader,org.xml.sax.helpers.DefaultHandler)",
                    "org.dom4j.io.SAXReader:org.dom4j.Document read(java.lang.String)",
                    "org.dom4j.io.SAXReader:org.dom4j.Document read(java.io.Reader)",
                    "org.dom4j.io.SAXReader:org.dom4j.Document read(java.io.File)",
                    "org.dom4j.io.SAXReader:org.dom4j.Document read(java.io.InputStream)",
                    "org.dom4j.io.SAXReader:org.dom4j.Document read(java.io.Reader,java.lang.String)",
                    "org.dom4j.io.SAXReader:void setXMLReader(org.xml.sax.XMLReader)",
                    "org.dom4j.io.SAXHelper:org.xml.sax.XMLReader createXMLReader(boolean)",
                    "org.dom4j.DocumentHelper:org.dom4j.Document parseText(java.lang.String)",
                    "org.dom4j.io.SAXReader:org.dom4j.Document read(java.net.URL)"
                ]
            },
            "CVE-API": {
                "CVE-2020-10683": [
                    "org.dom4j.tree.DefaultDocument:java.lang.Object clone()",
                    "org.dom4j.DocumentHelper:org.dom4j.Document parseText(java.lang.String)",
                    "org.dom4j.io.SAXReader:org.dom4j.Document read(java.net.URL)",
                    "org.dom4j.io.SAXReader:org.dom4j.Document read(java.io.File)",
                    "org.dom4j.io.SAXReader:org.dom4j.Document read(java.io.InputStream)",
                    "org.dom4j.tree.AbstractElement:org.dom4j.Element addAttribute(java.lang.String,java.lang.String)",
                    "org.dom4j.io.SAXReader:org.dom4j.Document read(java.lang.String)",
                    "org.dom4j.tree.DefaultElement:java.lang.Object clone()"
                ]
            }
        },
        "org.hibernate:hibernate-core:5.3.7.Final": {
            "used-method num": 0,
            "used method": []
        },
        "com.mchange:c3p0:0.9.5.2": {
            "used-method num": 69,
            "used method": [
                "com.mchange.v2.c3p0.impl.NewProxyPreparedStatement:java.sql.ResultSet getGeneratedKeys()",
                "com.mchange.v2.c3p0.impl.NewProxyCallableStatement:java.sql.ResultSet getGeneratedKeys()",
                "com.mchange.v2.c3p0.impl.NewProxyConnection:void rollback()",
                "com.mchange.v2.c3p0.impl.NewProxyPreparedStatement:boolean execute()",
                "com.mchange.v2.c3p0.impl.NewProxyConnection:java.sql.PreparedStatement prepareStatement(java.lang.String)",
                "com.mchange.v2.c3p0.impl.NewProxyPreparedStatement:void close()",
                "com.mchange.v2.c3p0.impl.NewProxyCallableStatement:void setTimestamp(int,java.sql.Timestamp)",
                "com.mchange.v2.c3p0.impl.NewProxyPreparedStatement:java.sql.ResultSet executeQuery()",
                "com.mchange.v2.c3p0.impl.NewProxyResultSet:boolean next()",
                "com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData:java.lang.String toString()",
                "com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager$1ContextClassLoaderPoolsInitThread:void run()",
                "com.mchange.v2.c3p0.stmt.SimpleStatementCacheKey:int hashCode()",
                "com.mchange.v2.c3p0.impl.NewProxyPreparedStatement:void setLong(int,long)",
                "com.mchange.v2.c3p0.impl.C3P0PooledConnection$1ProxyCallableStatement:void close()",
                "com.mchange.v2.c3p0.impl.NewProxyPreparedStatement:void setObject(int,java.lang.Object)",
                "com.mchange.v2.c3p0.impl.NewProxyStatement:java.lang.String toString()",
                "com.mchange.v2.c3p0.impl.NewProxyCallableStatement:java.sql.ResultSet executeQuery()",
                "com.mchange.v2.c3p0.impl.NewProxyConnection:void commit()",
                "com.mchange.v2.c3p0.impl.NewProxyPreparedStatement:int executeUpdate()",
                "com.mchange.v2.c3p0.impl.NewProxyPreparedStatement:int getUpdateCount()",
                "com.mchange.v2.c3p0.impl.NewProxyConnection:boolean getAutoCommit()",
                "com.mchange.v2.c3p0.impl.NewProxyPreparedStatement:void setInt(int,int)",
                "com.mchange.v2.c3p0.impl.NewProxyStatement:int getUpdateCount()",
                "com.mchange.v2.c3p0.impl.AbstractIdentityTokenized:boolean equals(java.lang.Object)",
                "com.mchange.v2.c3p0.impl.NewProxyPreparedStatement:java.lang.String toString()",
                "com.mchange.v2.c3p0.impl.C3P0PooledConnection$1ProxyPreparedStatement:void close()",
                "com.mchange.v2.c3p0.impl.NewProxyCallableStatement:int getUpdateCount()",
                "com.mchange.v2.c3p0.impl.NewProxyPreparedStatement:int[] executeBatch()",
                "com.mchange.v2.c3p0.impl.NewProxyCallableStatement:boolean execute()",
                "com.mchange.v2.c3p0.impl.NewProxyResultSet:int getInt(int)",
                "com.mchange.v2.c3p0.impl.NewProxyStatement:void close()",
                "com.mchange.v2.c3p0.impl.NewProxyResultSet:java.lang.Object getObject(int)",
                "com.mchange.v2.c3p0.stmt.SimpleStatementCacheKey:boolean equals(java.lang.Object)",
                "com.mchange.v2.c3p0.impl.NewProxyConnection:java.lang.String toString()",
                "com.mchange.v2.c3p0.impl.NewProxyResultSet:java.sql.ResultSetMetaData getMetaData()",
                "com.mchange.v2.c3p0.AbstractComboPooledDataSource:java.lang.String toString()",
                "com.mchange.v2.c3p0.impl.NewProxyStatement:boolean execute(java.lang.String)",
                "com.mchange.v2.c3p0.impl.NewProxyResultSet:java.lang.String toString()",
                "com.mchange.v2.c3p0.impl.NewProxyCallableStatement:void setLong(int,long)",
                "com.mchange.v2.c3p0.impl.NewProxyPreparedStatement:boolean execute(java.lang.String)",
                "com.mchange.v2.resourcepool.BasicResourcePool$5:void run()",
                "com.mchange.v2.c3p0.impl.NewProxyCallableStatement:void setInt(int,int)",
                "com.mchange.v2.c3p0.impl.NewProxyConnection:boolean isClosed()",
                "com.mchange.v2.c3p0.impl.NewProxyConnection:java.sql.DatabaseMetaData getMetaData()",
                "com.mchange.v2.c3p0.impl.NewProxyPreparedStatement:void setTimestamp(int,java.sql.Timestamp)",
                "com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData:java.lang.String getDriverName()",
                "com.mchange.v2.c3p0.impl.NewProxyPreparedStatement:void setString(int,java.lang.String)",
                "com.mchange.v2.c3p0.impl.NewProxyCallableStatement:void close()",
                "com.mchange.v2.c3p0.impl.NewProxyCallableStatement:int[] executeBatch()",
                "com.mchange.v2.c3p0.impl.NewProxyConnection:java.sql.Statement createStatement()",
                "com.mchange.v2.c3p0.impl.NewProxyCallableStatement:java.lang.String toString()",
                "com.mchange.v2.c3p0.stmt.MemoryCoalescedStatementCacheKey:int hashCode()",
                "com.mchange.v2.c3p0.impl.NewProxyConnection:void close()",
                "com.mchange.v2.c3p0.stmt.StatementCacheKey:java.lang.String toString()",
                "com.mchange.v2.c3p0.impl.NewProxyCallableStatement:boolean execute(java.lang.String)",
                "com.mchange.v2.c3p0.impl.C3P0PooledConnection$1ProxyStatement:void close()",
                "com.mchange.v2.c3p0.impl.NewProxyCallableStatement:int executeUpdate()",
                "com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData:java.lang.String getURL()",
                "com.mchange.v2.c3p0.stmt.MemoryCoalescedStatementCacheKey:boolean equals(java.lang.Object)",
                "com.mchange.v2.c3p0.impl.NewProxyCallableStatement:void setString(int,java.lang.String)",
                "com.mchange.v2.c3p0.impl.C3P0PooledConnection$ProxyConnectionInvocationHandler:java.lang.String toString()",
                "com.mchange.v2.c3p0.impl.NewProxyCallableStatement:void addBatch()",
                "com.mchange.v2.c3p0.impl.NewProxyPreparedStatement:void addBatch()",
                "com.mchange.v2.c3p0.impl.NewProxyConnection:java.sql.PreparedStatement prepareStatement(java.lang.String,int)",
                "com.mchange.v2.c3p0.impl.NewProxyResultSet:void close()",
                "com.mchange.v2.c3p0.impl.NewProxyCallableStatement:void setObject(int,java.lang.Object)",
                "com.mchange.v2.c3p0.impl.AuthMaskingProperties:java.lang.String toString()",
                "com.mchange.v2.c3p0.impl.DbAuth:boolean equals(java.lang.Object)",
                "com.mchange.v2.c3p0.impl.NewProxyConnection:void setAutoCommit(boolean)"
            ]
        },
        "org.postgresql:postgresql:42.1.4.jre6": {
            "used-method num": 0,
            "used method": []
        },
        "org.apache.poi:poi-ooxml:3.17": {
            "used-method num": 111,
            "used method": [
                "org.apache.poi.openxml4j.opc.internal.ContentType:int hashCode()",
                "org.apache.poi.xssf.usermodel.XSSFRow:int getPhysicalNumberOfCells()",
                "org.apache.poi.xssf.streaming.SXSSFRow$CellIterator:boolean hasNext()",
                "org.apache.poi.xssf.usermodel.XSSFColor:int hashCode()",
                "org.apache.poi.xssf.streaming.SXSSFRow:int hashCode()",
                "org.apache.poi.xssf.usermodel.XSSFWorkbook$SheetIterator:void remove()",
                "org.apache.poi.xssf.usermodel.XSSFWorkbook:void <clinit>()",
                "org.apache.poi.xssf.usermodel.XSSFWorkbook$SheetIterator:org.apache.poi.ss.usermodel.Sheet next()",
                "org.apache.poi.xssf.usermodel.XSSFSheet:org.apache.poi.ss.usermodel.DataValidationHelper getDataValidationHelper()",
                "org.apache.poi.xssf.streaming.SXSSFWorkbook:void <init>(int)",
                "org.apache.poi.openxml4j.opc.PackageRelationship:boolean equals(java.lang.Object)",
                "org.apache.poi.xssf.usermodel.XSSFCellStyle:java.lang.Object clone()",
                "org.apache.poi.xssf.usermodel.extensions.XSSFCellBorder:boolean equals(java.lang.Object)",
                "org.apache.poi.xssf.usermodel.XSSFRow:org.apache.poi.xssf.usermodel.XSSFCell createCell(int,org.apache.poi.ss.usermodel.CellType)",
                "org.apache.poi.xssf.usermodel.XSSFRichTextString:java.lang.String toString()",
                "org.apache.poi.xssf.streaming.SXSSFWorkbook:void close()",
                "org.apache.poi.xssf.usermodel.XSSFSheet:org.apache.poi.xssf.usermodel.XSSFRow getRow(int)",
                "org.apache.poi.xssf.streaming.SXSSFWorkbook:org.apache.poi.ss.usermodel.CellStyle createCellStyle()",
                "org.apache.poi.xssf.usermodel.XSSFSheet:int getPhysicalNumberOfRows()",
                "org.apache.poi.xssf.usermodel.XSSFRow:org.apache.poi.xssf.usermodel.XSSFCell getCell(int)",
                "org.apache.poi.xssf.usermodel.XSSFName:int hashCode()",
                "org.apache.poi.xssf.usermodel.XSSFSheet:java.lang.String getSheetName()",
                "org.apache.poi.xssf.streaming.SXSSFCell:double getNumericCellValue()",
                "org.apache.poi.openxml4j.util.ZipSecureFile:java.io.InputStream getInputStream(java.util.zip.ZipEntry)",
                "org.apache.poi.xssf.streaming.SXSSFWorkbook$SheetIterator:void remove()",
                "org.apache.poi.xssf.streaming.SXSSFCell:java.lang.String getStringCellValue()",
                "org.apache.poi.xssf.streaming.SXSSFWorkbook:org.apache.poi.xssf.streaming.SXSSFSheet getSheetAt(int)",
                "org.apache.poi.xssf.streaming.SXSSFCell:java.util.Date getDateCellValue()",
                "org.apache.poi.xssf.usermodel.XSSFClientAnchor:int hashCode()",
                "org.apache.poi.xssf.streaming.SXSSFSheet:java.lang.String getSheetName()",
                "org.apache.poi.xssf.streaming.SXSSFWorkbook:org.apache.poi.ss.usermodel.Font createFont()",
                "org.apache.poi.xssf.usermodel.XSSFCell:java.lang.String getStringCellValue()",
                "org.apache.poi.xssf.usermodel.XSSFComment:int hashCode()",
                "org.apache.poi.xssf.usermodel.XSSFDataValidation:void createPromptBox(java.lang.String,java.lang.String)",
                "org.apache.poi.xssf.usermodel.XSSFDataValidationHelper:org.apache.poi.ss.usermodel.DataValidationConstraint createExplicitListConstraint(java.lang.String[])",
                "org.apache.poi.xssf.usermodel.XSSFSheet:org.apache.poi.xssf.usermodel.XSSFRow createRow(int)",
                "org.apache.poi.openxml4j.util.ZipSecureFile$ThresholdInputStream:int available()",
                "org.apache.poi.xssf.streaming.SXSSFSheet:int getPhysicalNumberOfRows()",
                "org.apache.poi.xssf.streaming.SXSSFWorkbook:org.apache.poi.ss.usermodel.SheetVisibility getSheetVisibility(int)",
                "org.apache.poi.xssf.streaming.SXSSFCell:org.apache.poi.ss.usermodel.CellType getCellTypeEnum()",
                "org.apache.poi.xssf.streaming.SXSSFWorkbook:java.util.Iterator iterator()",
                "org.apache.poi.xssf.usermodel.XSSFDataValidationHelper:org.apache.poi.ss.usermodel.DataValidation createValidation(org.apache.poi.ss.usermodel.DataValidationConstraint,org.apache.poi.ss.util.CellRangeAddressList)",
                "org.apache.poi.xssf.streaming.SXSSFRow:int getPhysicalNumberOfCells()",
                "org.apache.poi.xssf.usermodel.extensions.XSSFCellFill:boolean equals(java.lang.Object)",
                "org.apache.poi.xssf.streaming.SXSSFCell:void setCellValue(java.lang.String)",
                "org.apache.poi.xssf.streaming.SXSSFWorkbook:org.apache.poi.xssf.streaming.SXSSFSheet createSheet(java.lang.String)",
                "org.apache.poi.xssf.streaming.SXSSFSheet:void addValidationData(org.apache.poi.ss.usermodel.DataValidation)",
                "org.apache.poi.xssf.usermodel.XSSFSheet:void addValidationData(org.apache.poi.ss.usermodel.DataValidation)",
                "org.apache.poi.xssf.streaming.SXSSFWorkbook$SheetIterator:org.apache.poi.ss.usermodel.Sheet next()",
                "org.apache.poi.openxml4j.util.ZipInputStreamZipEntrySource$EntryEnumerator:java.util.zip.ZipEntry nextElement()",
                "org.apache.poi.xssf.streaming.SXSSFRow:boolean equals(java.lang.Object)",
                "org.apache.poi.xssf.usermodel.XSSFCell:void setCellValue(java.lang.String)",
                "org.apache.poi.xssf.usermodel.XSSFRow:void setHeightInPoints(float)",
                "org.apache.poi.openxml4j.util.ZipInputStreamZipEntrySource$EntryEnumerator:boolean hasMoreElements()",
                "org.apache.poi.xssf.streaming.SXSSFSheet:org.apache.poi.xssf.streaming.SXSSFRow createRow(int)",
                "org.apache.poi.xssf.usermodel.XSSFTextParagraph:java.lang.String toString()",
                "org.apache.poi.xssf.usermodel.XSSFFont:int hashCode()",
                "org.apache.poi.xssf.streaming.SXSSFWorkbook$SheetIterator:boolean hasNext()",
                "org.apache.poi.xssf.usermodel.XSSFTextRun:java.lang.String toString()",
                "org.apache.poi.xssf.usermodel.XSSFConditionalFormatting:java.lang.String toString()",
                "org.apache.poi.openxml4j.opc.PackagePartName:java.lang.String toString()",
                "org.apache.poi.xssf.streaming.SXSSFRow$CellIterator:org.apache.poi.ss.usermodel.Cell next()",
                "org.apache.poi.POIXMLDocument:void close()",
                "org.apache.poi.xssf.streaming.SXSSFRow:org.apache.poi.xssf.streaming.SXSSFCell createCell(int,org.apache.poi.ss.usermodel.CellType)",
                "org.apache.poi.xssf.streaming.SXSSFSheet:org.apache.poi.ss.usermodel.DataValidationHelper getDataValidationHelper()",
                "org.apache.poi.xssf.usermodel.XSSFCell:java.lang.String toString()",
                "org.apache.poi.xssf.usermodel.XSSFFont:void setColor(short)",
                "org.apache.poi.xssf.usermodel.extensions.XSSFCellBorder:int hashCode()",
                "org.apache.poi.xssf.streaming.SXSSFSheet:org.apache.poi.xssf.streaming.SXSSFRow getRow(int)",
                "org.apache.poi.xssf.streaming.SXSSFCell:java.lang.String toString()",
                "org.apache.poi.xssf.usermodel.XSSFFont:java.lang.String toString()",
                "org.apache.poi.xssf.streaming.SXSSFRow$CellIterator:void remove()",
                "org.apache.poi.openxml4j.opc.internal.ContentType:java.lang.String toString()",
                "org.apache.poi.xssf.usermodel.XSSFDialogsheet:org.apache.poi.xssf.usermodel.XSSFRow createRow(int)",
                "org.apache.poi.xssf.usermodel.XSSFRow:java.lang.String toString()",
                "org.apache.poi.xssf.usermodel.XSSFColor:boolean equals(java.lang.Object)",
                "org.apache.poi.xssf.usermodel.XSSFWorkbook:org.apache.poi.xssf.usermodel.XSSFSheet getSheetAt(int)",
                "org.apache.poi.xssf.usermodel.XSSFName:boolean equals(java.lang.Object)",
                "org.apache.poi.openxml4j.opc.PackageRelationship:int hashCode()",
                "org.apache.poi.xssf.usermodel.XSSFCell:org.openxmlformats.schemas.spreadsheetml.x2006.main.CTCell getCTCell()",
                "org.apache.poi.xssf.usermodel.XSSFRow:boolean equals(java.lang.Object)",
                "org.apache.poi.openxml4j.opc.internal.MemoryPackagePartOutputStream:void close()",
                "org.apache.poi.xssf.usermodel.XSSFCell:org.apache.poi.ss.usermodel.CellType getCellTypeEnum()",
                "org.apache.poi.xssf.usermodel.XSSFWorkbook:void <init>(java.io.InputStream)",
                "org.apache.poi.xssf.usermodel.XSSFWorkbook:org.apache.poi.ss.usermodel.SheetVisibility getSheetVisibility(int)",
                "org.apache.poi.openxml4j.util.ZipSecureFile:void setMinInflateRatio(double)",
                "org.apache.poi.openxml4j.opc.internal.ContentType:boolean equals(java.lang.Object)",
                "org.apache.poi.openxml4j.opc.PackageRelationship:java.lang.String toString()",
                "org.apache.poi.xssf.usermodel.extensions.XSSFCellFill:int hashCode()",
                "org.apache.poi.xssf.streaming.SXSSFRow:org.apache.poi.xssf.streaming.SXSSFCell getCell(int)",
                "org.apache.poi.openxml4j.opc.PackagePartName:boolean equals(java.lang.Object)",
                "org.apache.poi.xssf.usermodel.XSSFCellStyle:void setFont(org.apache.poi.ss.usermodel.Font)",
                "org.apache.poi.xssf.usermodel.XSSFWorkbook:java.util.Iterator iterator()",
                "org.apache.poi.xssf.usermodel.XSSFCell:void setCellStyle(org.apache.poi.ss.usermodel.CellStyle)",
                "org.apache.poi.xssf.streaming.SXSSFWorkbook:void write(java.io.OutputStream)",
                "org.apache.poi.xssf.usermodel.XSSFFont:boolean equals(java.lang.Object)",
                "org.apache.poi.xssf.usermodel.XSSFCell:double getNumericCellValue()",
                "org.apache.poi.xssf.streaming.SXSSFRow$FilledCellIterator:void remove()",
                "org.apache.poi.xssf.usermodel.XSSFClientAnchor:java.lang.String toString()",
                "org.apache.poi.xssf.usermodel.XSSFDataValidation:void setSuppressDropDownArrow(boolean)",
                "org.apache.poi.POIXMLDocumentPart:java.lang.String toString()",
                "org.apache.poi.openxml4j.opc.PackageRelationshipCollection:java.lang.String toString()",
                "org.apache.poi.xssf.usermodel.XSSFComment:boolean equals(java.lang.Object)",
                "org.apache.poi.xssf.streaming.SXSSFRow$FilledCellIterator:org.apache.poi.ss.usermodel.Cell next()",
                "org.apache.poi.xssf.usermodel.XSSFClientAnchor:boolean equals(java.lang.Object)",
                "org.apache.poi.openxml4j.util.ZipSecureFile$ThresholdInputStream:int read()",
                "org.apache.poi.xssf.usermodel.XSSFCell:java.util.Date getDateCellValue()",
                "org.apache.poi.xssf.usermodel.XSSFRow:int hashCode()",
                "org.apache.poi.xssf.usermodel.XSSFWorkbook$SheetIterator:boolean hasNext()",
                "org.apache.poi.openxml4j.opc.PackagePart:java.lang.String toString()",
                "org.apache.poi.openxml4j.opc.PackagePartName:int hashCode()"
            ],
            "CVE": [
                "CVE-2019-12415"
            ],
            "used vul-method": [
                "org.apache.poi.xssf.streaming.SXSSFCell:java.lang.String getStringCellValue()",
                "org.apache.poi.xssf.streaming.SXSSFCell:void setCellValue(java.lang.String)",
                "org.apache.poi.xssf.streaming.SXSSFSheet:org.apache.poi.xssf.streaming.SXSSFRow createRow(int)",
                "org.apache.poi.xssf.streaming.SXSSFRow:org.apache.poi.xssf.streaming.SXSSFCell createCell(int,org.apache.poi.ss.usermodel.CellType)",
                "org.apache.poi.xssf.streaming.SXSSFCell:java.lang.String toString()",
                "org.apache.poi.xssf.streaming.SXSSFRow:org.apache.poi.xssf.streaming.SXSSFCell getCell(int)"
            ],
            "vul-called frequency": 53,
            "related vul root method": {
                "CVE-2019-12415": [
                    "org.apache.poi.xssf.streaming.SXSSFCell:java.lang.String getStringCellValue()",
                    "org.apache.poi.xssf.streaming.SXSSFCell:void setCellValue(java.lang.String)",
                    "org.apache.poi.xssf.streaming.SheetDataWriter:void writeCell(int,org.apache.poi.ss.usermodel.Cell)"
                ]
            },
            "CVE-API": {
                "CVE-2019-12415": [
                    "org.apache.poi.xssf.streaming.SXSSFCell:java.lang.String getStringCellValue()",
                    "org.apache.poi.xssf.streaming.SXSSFCell:void setCellValue(java.lang.String)",
                    "org.apache.poi.xssf.streaming.SXSSFSheet:org.apache.poi.xssf.streaming.SXSSFRow createRow(int)",
                    "org.apache.poi.xssf.streaming.SXSSFRow:org.apache.poi.xssf.streaming.SXSSFCell createCell(int,org.apache.poi.ss.usermodel.CellType)",
                    "org.apache.poi.xssf.streaming.SXSSFCell:java.lang.String toString()",
                    "org.apache.poi.xssf.streaming.SXSSFRow:org.apache.poi.xssf.streaming.SXSSFCell getCell(int)"
                ]
            }
        },
        "junit:junit:4.12": {
            "used-method num": 0,
            "used method": []
        }
    }
}