{
    "project name": "menacher_nerdronix",
    "modules": {
        "com.github.menacher:nerdronix": {
            "vulnerable dependencies": {
                "io.netty:netty-all:4.0.4.Final": {
                    "used-method num": 34,
                    "used method": [
                        "io.netty.bootstrap.AbstractBootstrap:io.netty.bootstrap.AbstractBootstrap option(io.netty.channel.ChannelOption,java.lang.Object)",
                        "io.netty.bootstrap.ServerBootstrap:io.netty.channel.ChannelFuture bind(java.net.SocketAddress)",
                        "io.netty.util.internal.chmv8.ConcurrentHashMapV8:io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView keySet()",
                        "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise sync()",
                        "io.netty.bootstrap.ServerBootstrap:io.netty.bootstrap.ServerBootstrap group(io.netty.channel.EventLoopGroup,io.netty.channel.EventLoopGroup)",
                        "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeyIterator:java.lang.Object next()",
                        "io.netty.bootstrap.ServerBootstrap:void <init>()",
                        "io.netty.channel.MultithreadEventLoopGroup:void <clinit>()",
                        "io.netty.channel.ChannelInitializer:void <init>()",
                        "io.netty.channel.nio.NioEventLoopGroup:void <init>(int)",
                        "io.netty.bootstrap.ServerBootstrap:io.netty.bootstrap.ServerBootstrap childHandler(io.netty.channel.ChannelHandler)",
                        "io.netty.channel.ChannelInboundHandlerAdapter:void channelInactive(io.netty.channel.ChannelHandlerContext)",
                        "io.netty.channel.SimpleChannelInboundHandler:void <init>()",
                        "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.Channel channel()",
                        "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntrySetView:java.util.Iterator iterator()",
                        "io.netty.util.internal.chmv8.ConcurrentHashMapV8$BaseIterator:boolean hasNext()",
                        "io.netty.handler.codec.string.StringDecoder:void <init>()",
                        "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise sync()",
                        "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:java.util.Iterator iterator()",
                        "io.netty.channel.DefaultChannelPromise:io.netty.channel.Channel channel()",
                        "io.netty.channel.FailedChannelFuture:io.netty.channel.ChannelFuture sync()",
                        "io.netty.channel.ChannelInboundHandlerAdapter:void channelActive(io.netty.channel.ChannelHandlerContext)",
                        "io.netty.channel.nio.SelectedSelectionKeySet:java.util.Iterator iterator()",
                        "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ValueIterator:java.lang.Object next()",
                        "io.netty.channel.CompleteChannelFuture:io.netty.channel.ChannelFuture sync()",
                        "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntryIterator:java.util.Map$Entry next()",
                        "io.netty.bootstrap.AbstractBootstrap:io.netty.bootstrap.AbstractBootstrap channel(java.lang.Class)",
                        "io.netty.bootstrap.ServerBootstrap:void <clinit>()",
                        "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object get(java.lang.Object)",
                        "io.netty.channel.ChannelOption:void <clinit>()",
                        "io.netty.handler.codec.string.StringEncoder:void <init>()",
                        "io.netty.channel.CompleteChannelFuture:io.netty.channel.Channel channel()",
                        "io.netty.channel.DefaultChannelHandlerContext:io.netty.channel.Channel channel()",
                        "io.netty.util.UniqueName:void <clinit>()"
                    ]
                }
            }
        }
    }
}