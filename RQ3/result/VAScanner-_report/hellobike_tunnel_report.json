{
    "project name": "hellobike_tunnel",
    "modules": {
        "com.hellobike.base.tunnel:tunnel-all": {
            "vulnerable dependencies": {
                "com.alibaba:fastjson:1.2.51": {
                    "used-method num": 35,
                    "used method": [
                        "com.alibaba.fastjson.JSONObject:void clear()",
                        "com.alibaba.fastjson.serializer.JSONSerializer:java.lang.String toString()",
                        "com.alibaba.fastjson.JSON:java.lang.Object parseObject(java.lang.String,java.lang.Class)",
                        "com.alibaba.fastjson.parser.ParseContext:java.lang.String toString()",
                        "com.alibaba.fastjson.JSONArray:java.util.Iterator iterator()",
                        "com.alibaba.fastjson.JSON:java.lang.String toString()",
                        "com.alibaba.fastjson.parser.JSONLexerBase:void close()",
                        "com.alibaba.fastjson.JSONArray:boolean contains(java.lang.Object)",
                        "com.alibaba.fastjson.JSONArray:boolean equals(java.lang.Object)",
                        "com.alibaba.fastjson.JSONObject:java.util.Collection values()",
                        "com.alibaba.fastjson.JSONObject:int hashCode()",
                        "com.alibaba.fastjson.util.ParameterizedTypeImpl:boolean equals(java.lang.Object)",
                        "com.alibaba.fastjson.parser.DefaultJSONParser:void close()",
                        "com.alibaba.fastjson.JSONArray:void clear()",
                        "com.alibaba.fastjson.JSONObject:java.util.Set entrySet()",
                        "com.alibaba.fastjson.JSONObject:java.lang.Object get(java.lang.Object)",
                        "com.alibaba.fastjson.JSON:java.lang.String toJSONString(java.lang.Object)",
                        "com.alibaba.fastjson.JSONPObject:java.lang.String toString()",
                        "com.alibaba.fastjson.JSONArray:boolean addAll(java.util.Collection)",
                        "com.alibaba.fastjson.serializer.SerializeWriter:void close()",
                        "com.alibaba.fastjson.JSONArray:boolean isEmpty()",
                        "com.alibaba.fastjson.JSONArray:int hashCode()",
                        "com.alibaba.fastjson.serializer.SerialContext:java.lang.String toString()",
                        "com.alibaba.fastjson.JSONArray:int size()",
                        "com.alibaba.fastjson.serializer.SerializeWriter:java.lang.String toString()",
                        "com.alibaba.fastjson.JSONObject:java.lang.Object clone()",
                        "com.alibaba.fastjson.JSONObject:boolean equals(java.lang.Object)",
                        "com.alibaba.fastjson.JSON:void <clinit>()",
                        "com.alibaba.fastjson.JSONObject:java.lang.Object put(java.lang.Object,java.lang.Object)",
                        "com.alibaba.fastjson.JSONObject:void putAll(java.util.Map)",
                        "com.alibaba.fastjson.JSONObject:boolean isEmpty()",
                        "com.alibaba.fastjson.JSONArray:java.lang.Object clone()",
                        "com.alibaba.fastjson.JSONArray:java.lang.Object get(int)",
                        "com.alibaba.fastjson.JSONObject:java.lang.Object remove(java.lang.Object)",
                        "com.alibaba.fastjson.JSONArray:boolean add(java.lang.Object)"
                    ],
                    "CVE": [
                        "CVE-2022-25845"
                    ],
                    "used vul-method": [
                        "com.alibaba.fastjson.JSON:java.lang.Object parseObject(java.lang.String,java.lang.Class)",
                        "com.alibaba.fastjson.JSON:java.lang.String toString()",
                        "com.alibaba.fastjson.JSON:java.lang.String toJSONString(java.lang.Object)",
                        "com.alibaba.fastjson.JSONPObject:java.lang.String toString()"
                    ],
                    "vul-called frequency": 8,
                    "related vul root method": {
                        "CVE-2022-25845": [
                            "com.alibaba.fastjson.parser.ParserConfig:java.lang.Class checkAutoType(java.lang.String,java.lang.Class,int)"
                        ]
                    },
                    "CVE-API": {
                        "CVE-2022-25845": [
                            "com.alibaba.fastjson.JSON:java.lang.Object parseObject(java.lang.String,java.lang.Class)",
                            "com.alibaba.fastjson.JSON:java.lang.String toString()",
                            "com.alibaba.fastjson.JSON:java.lang.String toJSONString(java.lang.Object)",
                            "com.alibaba.fastjson.JSONPObject:java.lang.String toString()"
                        ]
                    }
                },
                "junit:junit:4.12": {
                    "used-method num": 0,
                    "used method": []
                },
                "org.apache.kafka:kafka-clients:2.0.0": {
                    "used-method num": 224,
                    "used method": [
                        "org.apache.kafka.common.requests.CreateAclsRequest$AclCreation:java.lang.String toString()",
                        "org.apache.kafka.common.acl.AccessControlEntryData:java.lang.String toString()",
                        "org.apache.kafka.common.requests.ListOffsetResponse$PartitionData:java.lang.String toString()",
                        "org.apache.kafka.common.requests.FetchRequest$Builder:java.lang.String toString()",
                        "org.apache.kafka.common.requests.UpdateMetadataRequest$Broker:java.lang.String toString()",
                        "org.apache.kafka.common.record.AbstractLegacyRecordBatch:java.lang.String toString()",
                        "org.apache.kafka.common.requests.SaslHandshakeRequest$Builder:java.lang.String toString()",
                        "org.apache.kafka.common.record.AbstractLegacyRecordBatch$ByteBufferLegacyRecordBatch:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.config.ConfigResource:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.requests.CreateTopicsRequest$TopicDetails:java.lang.String toString()",
                        "org.apache.kafka.common.requests.RequestHeader:java.lang.String toString()",
                        "org.apache.kafka.common.record.MemoryRecords:java.lang.String toString()",
                        "org.apache.kafka.common.resource.Resource:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.record.KafkaLZ4BlockOutputStream:void close()",
                        "org.apache.kafka.common.network.Selector:void close()",
                        "org.apache.kafka.common.utils.LogContext$LocationAwareKafkaLogger:void warn(java.lang.String,java.lang.Throwable)",
                        "org.apache.kafka.common.utils.CopyOnWriteMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
                        "org.apache.kafka.common.requests.AbstractRequest:java.lang.String toString()",
                        "org.apache.kafka.common.utils.LogContext$LocationIgnorantKafkaLogger:void info(java.lang.String,java.lang.Object,java.lang.Object)",
                        "org.apache.kafka.common.config.ConfigDef$NonEmptyString:java.lang.String toString()",
                        "org.apache.kafka.common.resource.ResourcePattern:java.lang.String toString()",
                        "org.apache.kafka.common.header.internals.RecordHeaders:java.lang.String toString()",
                        "org.apache.kafka.common.requests.InitProducerIdResponse:java.lang.String toString()",
                        "org.apache.kafka.common.config.types.Password:java.lang.String toString()",
                        "org.apache.kafka.common.metrics.Quota:java.lang.String toString()",
                        "org.apache.kafka.common.requests.AddOffsetsToTxnResponse:java.lang.String toString()",
                        "org.apache.kafka.common.requests.SaslAuthenticateRequest$Builder:java.lang.String toString()",
                        "org.apache.kafka.common.record.FileRecords$TimestampAndOffset:java.lang.String toString()",
                        "org.apache.kafka.common.record.DefaultRecordBatch$1:void close()",
                        "org.apache.kafka.common.network.ListenerName:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.requests.InitProducerIdRequest$Builder:java.lang.String toString()",
                        "org.apache.kafka.common.security.token.delegation.TokenInformation:java.lang.String toString()",
                        "org.ietf.jgss.Oid:boolean equals(java.lang.Object)",
                        "org.apache.kafka.clients.producer.internals.ProducerBatch:java.lang.String toString()",
                        "org.apache.kafka.common.requests.TxnOffsetCommitResponse:java.lang.String toString()",
                        "org.apache.kafka.common.MetricName:java.lang.String toString()",
                        "org.apache.kafka.common.requests.ListOffsetRequest$PartitionData:java.lang.String toString()",
                        "org.ietf.jgss.Oid:java.lang.String toString()",
                        "org.apache.kafka.common.requests.UpdateMetadataRequest$PartitionState:java.lang.String toString()",
                        "org.apache.kafka.common.requests.FetchRequest$PartitionData:java.lang.String toString()",
                        "org.apache.kafka.common.utils.CopyOnWriteMap:java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)",
                        "org.apache.kafka.common.requests.EpochEndOffset:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.utils.LogContext$LocationIgnorantKafkaLogger:void info(java.lang.String)",
                        "org.apache.kafka.common.record.DefaultRecordBatch$RecordIterator:boolean hasNext()",
                        "org.apache.kafka.common.MetricNameTemplate:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.requests.StopReplicaResponse:java.lang.String toString()",
                        "org.apache.kafka.common.security.authenticator.DefaultKafkaPrincipalBuilder:void close()",
                        "org.apache.kafka.common.record.AbstractLegacyRecordBatch$BasicLegacyRecordBatch:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.config.ConfigDef$ValidString:java.lang.String toString()",
                        "org.apache.kafka.common.requests.FetchMetadata:java.lang.String toString()",
                        "org.apache.kafka.common.security.authenticator.LoginManager$LoginMetadata:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.security.kerberos.KerberosRule:java.lang.String toString()",
                        "org.apache.kafka.common.requests.FetchResponse$AbortedTransaction:java.lang.String toString()",
                        "org.apache.kafka.common.utils.LogContext$LocationAwareKafkaLogger:void info(java.lang.String)",
                        "org.apache.kafka.clients.ClientResponse:java.lang.String toString()",
                        "org.apache.kafka.common.requests.TxnOffsetCommitRequest$CommittedOffset:java.lang.String toString()",
                        "org.apache.kafka.common.acl.AclBindingFilter:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.requests.DescribeLogDirsResponse$LogDirInfo:java.lang.String toString()",
                        "org.apache.kafka.common.requests.DeleteRecordsResponse$PartitionResponse:java.lang.String toString()",
                        "org.apache.kafka.common.network.SslChannelBuilder$SslAuthenticator:void close()",
                        "org.apache.kafka.common.header.internals.RecordHeader:java.lang.String toString()",
                        "org.apache.kafka.common.network.SaslChannelBuilder:void close()",
                        "org.apache.kafka.common.utils.LogContext$LocationIgnorantKafkaLogger:void warn(java.lang.String,java.lang.Object)",
                        "org.apache.kafka.common.utils.Java$Version:java.lang.String toString()",
                        "org.apache.kafka.common.acl.AccessControlEntryFilter:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.PartitionInfo:java.lang.String toString()",
                        "org.apache.kafka.clients.producer.KafkaProducer:void <clinit>()",
                        "org.apache.kafka.common.acl.AclBinding:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.acl.AclBinding:java.lang.String toString()",
                        "org.apache.kafka.common.Cluster:java.lang.String toString()",
                        "org.apache.kafka.common.protocol.types.Struct:java.lang.String toString()",
                        "org.apache.kafka.clients.NetworkClient$InFlightRequest:java.lang.String toString()",
                        "org.apache.kafka.common.record.DefaultRecordBatch$2:void close()",
                        "org.apache.kafka.common.requests.UpdateMetadataRequest$EndPoint:java.lang.String toString()",
                        "org.apache.kafka.common.network.PlaintextChannelBuilder:void close()",
                        "org.apache.kafka.clients.producer.RecordMetadata:java.lang.String toString()",
                        "org.apache.kafka.common.requests.DeleteAclsResponse:java.lang.String toString()",
                        "org.apache.kafka.common.config.types.Password:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.requests.ListOffsetRequest$Builder:java.lang.String toString()",
                        "org.apache.kafka.common.requests.FetchResponse$PartitionData:boolean equals(java.lang.Object)",
                        "org.ietf.jgss.GSSException:java.lang.String getMessage()",
                        "org.apache.kafka.common.config.ConfigValue:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.requests.AddOffsetsToTxnRequest$Builder:java.lang.String toString()",
                        "org.apache.kafka.common.metrics.Metrics:void close()",
                        "org.apache.kafka.common.record.FileLogInputStream$FileChannelRecordBatch:boolean equals(java.lang.Object)",
                        "org.apache.kafka.clients.producer.KafkaProducer:void <init>(java.util.Properties)",
                        "org.apache.kafka.clients.producer.ProducerRecord:java.lang.String toString()",
                        "org.apache.kafka.common.requests.ApiVersionsResponse$ApiVersion:java.lang.String toString()",
                        "org.apache.kafka.common.utils.CopyOnWriteMap:void putAll(java.util.Map)",
                        "org.apache.kafka.common.network.ListenerName:java.lang.String toString()",
                        "org.apache.kafka.common.utils.LogContext$LocationAwareKafkaLogger:void warn(java.lang.String)",
                        "org.apache.kafka.common.requests.FetchResponse$AbortedTransaction:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.record.DefaultRecord:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.record.DefaultRecordBatch:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.requests.WriteTxnMarkersRequest$TxnMarkerEntry:java.lang.String toString()",
                        "org.apache.kafka.common.header.internals.RecordHeaders$2:boolean hasNext()",
                        "org.apache.kafka.common.requests.AddPartitionsToTxnResponse:java.lang.String toString()",
                        "org.apache.kafka.common.config.AbstractConfig$RecordingMap:java.lang.Object get(java.lang.Object)",
                        "org.apache.kafka.clients.producer.KafkaProducer:java.util.concurrent.Future send(org.apache.kafka.clients.producer.ProducerRecord)",
                        "org.apache.kafka.common.utils.CopyOnWriteMap:java.util.Set entrySet()",
                        "org.apache.kafka.common.utils.LogContext$LocationIgnorantKafkaLogger:void warn(java.lang.String,java.lang.Throwable)",
                        "org.apache.kafka.common.security.ssl.SslFactory$CertificateEntries:boolean equals(java.lang.Object)",
                        "org.apache.kafka.clients.producer.KafkaProducer:java.util.concurrent.Future send(org.apache.kafka.clients.producer.ProducerRecord,org.apache.kafka.clients.producer.Callback)",
                        "org.apache.kafka.common.requests.MetadataResponse$TopicMetadata:java.lang.String toString()",
                        "org.apache.kafka.common.record.FileRecords$LogOffsetPosition:java.lang.String toString()",
                        "org.apache.kafka.common.requests.WriteTxnMarkersRequest$TxnMarkerEntry:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.utils.LogContext$LocationAwareKafkaLogger:void warn(java.lang.String,java.lang.Object)",
                        "org.apache.kafka.common.requests.OffsetFetchRequest$Builder:java.lang.String toString()",
                        "org.apache.kafka.common.resource.ResourceFilter:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.requests.FetchRequest$PartitionData:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.record.LegacyRecord:java.lang.String toString()",
                        "org.apache.kafka.common.requests.LeaderAndIsrResponse:java.lang.String toString()",
                        "org.apache.kafka.common.record.RecordConversionStats:java.lang.String toString()",
                        "org.apache.kafka.common.acl.AccessControlEntryData:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.requests.EndTxnRequest$Builder:java.lang.String toString()",
                        "org.apache.kafka.common.network.KafkaChannel:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.security.auth.KafkaPrincipal:java.lang.String toString()",
                        "org.apache.kafka.common.utils.LogContext$LocationAwareKafkaLogger:void error(java.lang.String,java.lang.Throwable)",
                        "org.apache.kafka.clients.ClientRequest:java.lang.String toString()",
                        "org.apache.kafka.common.protocol.types.ArrayOf:java.lang.String toString()",
                        "org.apache.kafka.common.requests.ApiError:java.lang.String toString()",
                        "org.apache.kafka.clients.producer.KafkaProducer:void close()",
                        "org.apache.kafka.common.requests.MetadataRequest$Builder:java.lang.String toString()",
                        "org.apache.kafka.common.TopicPartition:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.record.FileRecords$LogOffsetPosition:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.ClusterResource:java.lang.String toString()",
                        "org.apache.kafka.common.serialization.ExtendedSerializer$Wrapper:void close()",
                        "org.apache.kafka.common.utils.AbstractIterator:java.lang.Object next()",
                        "org.apache.kafka.common.security.kerberos.KerberosShortNamer:java.lang.String toString()",
                        "org.apache.kafka.common.record.FileLogInputStream$FileChannelRecordBatch:java.lang.String toString()",
                        "org.apache.kafka.common.header.internals.RecordHeader:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.record.LegacyRecord:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.requests.FindCoordinatorRequest$Builder:java.lang.String toString()",
                        "org.apache.kafka.common.record.MemoryRecords:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.security.token.delegation.DelegationToken:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.requests.ProduceResponse$PartitionResponse:java.lang.String toString()",
                        "org.apache.kafka.clients.producer.ProducerRecord:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.requests.FindCoordinatorResponse:java.lang.String toString()",
                        "org.apache.kafka.common.record.FileRecords:java.lang.String toString()",
                        "org.apache.kafka.common.resource.ResourcePatternFilter:java.lang.String toString()",
                        "org.apache.kafka.clients.NetworkClient$DefaultMetadataUpdater:void close()",
                        "org.apache.kafka.common.acl.AccessControlEntryFilter:java.lang.String toString()",
                        "org.apache.kafka.common.utils.LogContext$LocationIgnorantKafkaLogger:void error(java.lang.String,java.lang.Throwable)",
                        "org.apache.kafka.clients.producer.ProducerRecord:void <init>(java.lang.String,java.lang.Object,java.lang.Object)",
                        "org.apache.kafka.clients.ClusterConnectionStates$NodeConnectionState:java.lang.String toString()",
                        "org.apache.kafka.common.requests.RequestHeader:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.record.DefaultRecord:java.lang.String toString()",
                        "org.apache.kafka.common.requests.OffsetCommitRequest$PartitionData:java.lang.String toString()",
                        "org.apache.kafka.clients.producer.internals.ProducerIdAndEpoch:java.lang.String toString()",
                        "org.apache.kafka.common.security.token.delegation.DelegationToken:java.lang.String toString()",
                        "org.apache.kafka.common.utils.CopyOnWriteMap:java.lang.Object get(java.lang.Object)",
                        "org.apache.kafka.common.TopicPartition:java.lang.String toString()",
                        "org.apache.kafka.common.config.AbstractConfig:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.security.authenticator.SaslClientAuthenticator:void close()",
                        "org.apache.kafka.common.resource.ResourceFilter:java.lang.String toString()",
                        "org.apache.kafka.common.header.internals.RecordHeaders:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.network.PlaintextTransportLayer:void close()",
                        "org.apache.kafka.common.requests.EpochEndOffset:java.lang.String toString()",
                        "org.apache.kafka.common.security.authenticator.LoginManager:java.lang.String toString()",
                        "org.apache.kafka.common.utils.CopyOnWriteMap:java.lang.Object remove(java.lang.Object)",
                        "org.apache.kafka.common.protocol.types.BoundField:java.lang.String toString()",
                        "org.apache.kafka.common.record.FileRecords$TimestampAndOffset:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.Node:java.lang.String toString()",
                        "org.apache.kafka.common.resource.ResourcePattern:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.header.internals.RecordHeaders$2:org.apache.kafka.common.header.Header next()",
                        "org.apache.kafka.common.requests.FetchResponse$PartitionData:java.lang.String toString()",
                        "org.apache.kafka.common.Node:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.record.KafkaLZ4BlockInputStream:void close()",
                        "org.apache.kafka.common.config.ConfigValue:java.lang.String toString()",
                        "org.apache.kafka.common.utils.LogContext$LocationIgnorantKafkaLogger:void info(java.lang.String,java.lang.Throwable)",
                        "org.apache.kafka.common.record.DefaultRecordBatch:java.lang.String toString()",
                        "org.apache.kafka.common.config.ConfigResource:java.lang.String toString()",
                        "org.apache.kafka.common.requests.CreateAclsResponse$AclCreationResponse:java.lang.String toString()",
                        "org.apache.kafka.common.requests.LeaderAndIsrRequest$PartitionState:java.lang.String toString()",
                        "org.apache.kafka.common.requests.DeleteAclsResponse$AclFilterResponse:java.lang.String toString()",
                        "org.apache.kafka.common.requests.JoinGroupResponse:java.lang.String toString()",
                        "org.ietf.jgss.GSSException:java.lang.String toString()",
                        "org.apache.kafka.common.utils.LogContext$LocationAwareKafkaLogger:void info(java.lang.String,java.lang.Object,java.lang.Object)",
                        "org.apache.kafka.common.requests.MetadataResponse$PartitionMetadata:java.lang.String toString()",
                        "org.apache.kafka.clients.producer.internals.ProducerInterceptors:void close()",
                        "org.apache.kafka.common.security.kerberos.KerberosName:java.lang.String toString()",
                        "org.apache.kafka.clients.Metadata:void close()",
                        "org.apache.kafka.common.config.ConfigDef$ValidList:java.lang.String toString()",
                        "org.apache.kafka.common.security.authenticator.SaslServerAuthenticator:void close()",
                        "org.apache.kafka.common.utils.LogContext$LocationAwareKafkaLogger:void info(java.lang.String,java.lang.Throwable)",
                        "org.apache.kafka.common.requests.FetchMetadata:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.requests.AddPartitionsToTxnRequest$Builder:java.lang.String toString()",
                        "org.apache.kafka.common.requests.ProduceRequest$Builder:java.lang.String toString()",
                        "org.apache.kafka.common.network.SslChannelBuilder:void close()",
                        "org.apache.kafka.common.resource.Resource:java.lang.String toString()",
                        "org.apache.kafka.common.record.EndTransactionMarker:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.utils.LogContext$LocationIgnorantKafkaLogger:void info(java.lang.String,java.lang.Object[])",
                        "org.apache.kafka.common.record.DefaultRecordBatch$RecordIterator:org.apache.kafka.common.record.Record next()",
                        "org.apache.kafka.common.utils.CopyOnWriteMap:void clear()",
                        "org.apache.kafka.common.security.token.delegation.TokenInformation:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.utils.LogContext$LocationIgnorantKafkaLogger:void warn(java.lang.String)",
                        "org.apache.kafka.common.network.NetworkReceive:void close()",
                        "org.apache.kafka.common.requests.ListOffsetResponse:java.lang.String toString()",
                        "org.apache.kafka.common.requests.DeleteAclsResponse$AclDeletionResult:java.lang.String toString()",
                        "org.apache.kafka.common.requests.DescribeLogDirsResponse$ReplicaInfo:java.lang.String toString()",
                        "org.apache.kafka.common.security.auth.KafkaPrincipal:boolean equals(java.lang.Object)",
                        "org.apache.kafka.clients.NetworkClient:void close()",
                        "org.apache.kafka.common.MetricNameTemplate:java.lang.String toString()",
                        "org.apache.kafka.common.requests.WriteTxnMarkersRequest:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.acl.AccessControlEntry:java.lang.String toString()",
                        "org.apache.kafka.common.acl.AclBindingFilter:java.lang.String toString()",
                        "org.apache.kafka.common.record.FileRecords:void close()",
                        "org.apache.kafka.common.utils.LogContext$LocationAwareKafkaLogger:void info(java.lang.String,java.lang.Object)",
                        "org.apache.kafka.common.requests.EndTxnResponse:java.lang.String toString()",
                        "org.apache.kafka.common.security.ssl.SslFactory$CertificateEntries:java.lang.String toString()",
                        "org.apache.kafka.common.MetricName:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.utils.LogContext$LocationIgnorantKafkaLogger:void info(java.lang.String,java.lang.Object)",
                        "org.apache.kafka.clients.NodeApiVersions:java.lang.String toString()",
                        "org.apache.kafka.common.config.ConfigDef$Range:java.lang.String toString()",
                        "org.apache.kafka.common.protocol.types.Schema:java.lang.String toString()",
                        "org.apache.kafka.common.network.PlaintextChannelBuilder$PlaintextAuthenticator:void close()",
                        "org.apache.kafka.common.requests.TxnOffsetCommitRequest$Builder:java.lang.String toString()",
                        "org.apache.kafka.common.protocol.types.Struct:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.utils.LogContext$LocationAwareKafkaLogger:void info(java.lang.String,java.lang.Object[])",
                        "org.apache.kafka.common.utils.AbstractIterator:boolean hasNext()",
                        "org.apache.kafka.clients.admin.NewPartitions:java.lang.String toString()",
                        "org.apache.kafka.common.network.SslTransportLayer:void close()",
                        "org.apache.kafka.common.resource.ResourcePatternFilter:boolean equals(java.lang.Object)",
                        "org.apache.kafka.common.acl.AccessControlEntry:boolean equals(java.lang.Object)"
                    ],
                    "CVE": [
                        "CVE-2021-38153"
                    ],
                    "used vul-method": [
                        "org.apache.kafka.common.security.token.delegation.DelegationToken:boolean equals(java.lang.Object)"
                    ],
                    "vul-called frequency": 1,
                    "related vul root method": {
                        "CVE-2021-38153": [
                            "org.apache.kafka.common.security.token.delegation.DelegationToken:boolean equals(java.lang.Object)"
                        ]
                    },
                    "CVE-API": {
                        "CVE-2021-38153": [
                            "org.apache.kafka.common.security.token.delegation.DelegationToken:boolean equals(java.lang.Object)"
                        ]
                    }
                },
                "org.postgresql:postgresql:42.2.5": {
                    "used-method num": 77,
                    "used method": [
                        "org.postgresql.replication.LogSequenceNumber:long asLong()",
                        "org.postgresql.jdbc.PgStatement:void close()",
                        "org.postgresql.util.PGobject:java.lang.String toString()",
                        "org.postgresql.jdbc.PgPreparedStatement:boolean execute(java.lang.String)",
                        "org.postgresql.geometric.PGpoint:boolean equals(java.lang.Object)",
                        "org.postgresql.util.ExpressionProperties:java.lang.String getProperty(java.lang.String,java.lang.String)",
                        "org.postgresql.jdbc.PgStatement:boolean execute(java.lang.String)",
                        "org.postgresql.core.v3.BatchedQuery:java.lang.String toString()",
                        "org.postgresql.core.PGStream:void close()",
                        "org.postgresql.shaded.com.ongres.scram.common.message.ServerFinalMessage:java.lang.String toString()",
                        "org.postgresql.core.v3.SimpleParameterList:java.lang.String toString()",
                        "org.postgresql.core.ServerVersion$1:java.lang.String toString()",
                        "org.postgresql.shaded.com.ongres.scram.common.message.ClientFirstMessage:java.lang.String toString()",
                        "org.postgresql.hostchooser.MultiHostChooser$3:java.lang.Object get(int)",
                        "org.postgresql.jdbc.PgPreparedStatement:java.lang.String toString()",
                        "org.ietf.jgss.Oid:boolean equals(java.lang.Object)",
                        "org.postgresql.core.CachedQuery:java.lang.String toString()",
                        "org.postgresql.jdbc.PgConnection:org.postgresql.replication.PGReplicationConnection getReplicationAPI()",
                        "org.ietf.jgss.Oid:java.lang.String toString()",
                        "org.postgresql.jdbc.PgResultSet:void close()",
                        "org.postgresql.shaded.com.ongres.scram.common.message.ServerFirstMessage:java.lang.String toString()",
                        "org.postgresql.replication.fluent.ReplicationStreamBuilder:org.postgresql.replication.fluent.logical.ChainedLogicalStreamBuilder logical()",
                        "org.postgresql.hostchooser.MultiHostChooser$1:org.postgresql.hostchooser.CandidateHost get(int)",
                        "org.postgresql.PGProperty:void set(java.util.Properties,java.lang.String)",
                        "org.postgresql.jdbc.PgConnection:java.sql.Statement createStatement()",
                        "org.postgresql.core.VisibleBufferedInputStream:void close()",
                        "org.postgresql.jdbc.FieldMetadata$Key:boolean equals(java.lang.Object)",
                        "org.postgresql.replication.LogSequenceNumber:boolean equals(java.lang.Object)",
                        "org.postgresql.hostchooser.MultiHostChooser$2:int size()",
                        "org.postgresql.replication.LogSequenceNumber:java.lang.String toString()",
                        "org.postgresql.xa.RecoveredXid:java.lang.String toString()",
                        "org.postgresql.util.PGobject:java.lang.Object clone()",
                        "org.postgresql.core.PGStream$1:void close()",
                        "org.ietf.jgss.GSSException:java.lang.String getMessage()",
                        "org.postgresql.replication.PGReplicationConnectionImpl:org.postgresql.replication.fluent.ChainedStreamBuilder replicationStream()",
                        "org.postgresql.jdbc.FieldMetadata$Key:java.lang.String toString()",
                        "org.postgresql.replication.fluent.logical.LogicalCreateSlotBuilder:void make()",
                        "org.postgresql.util.PGobject:boolean equals(java.lang.Object)",
                        "org.postgresql.core.ServerVersion$1:boolean equals(java.lang.Object)",
                        "org.postgresql.util.HostSpec:java.lang.String toString()",
                        "org.postgresql.replication.fluent.logical.LogicalCreateSlotBuilder:org.postgresql.replication.fluent.logical.ChainedLogicalCreateSlotBuilder withOutputPlugin(java.lang.String)",
                        "org.postgresql.util.PSQLWarning:java.lang.String getMessage()",
                        "org.postgresql.xa.RecoveredXid:boolean equals(java.lang.Object)",
                        "org.postgresql.core.CommandCompleteParser:java.lang.String toString()",
                        "org.postgresql.jdbc.PgConnection:java.lang.Object unwrap(java.lang.Class)",
                        "org.postgresql.hostchooser.MultiHostChooser$3:int size()",
                        "org.postgresql.jdbc.PgArray:java.lang.String toString()",
                        "org.postgresql.largeobject.BlobInputStream:void close()",
                        "org.postgresql.core.v3.CompositeQuery:java.lang.String toString()",
                        "org.postgresql.hostchooser.MultiHostChooser$2:java.lang.Object get(int)",
                        "org.postgresql.replication.fluent.ReplicationCreateSlotBuilder:org.postgresql.replication.fluent.logical.ChainedLogicalCreateSlotBuilder logical()",
                        "org.postgresql.core.CommandCompleteParser:boolean equals(java.lang.Object)",
                        "org.postgresql.hostchooser.MultiHostChooser$1:int size()",
                        "org.postgresql.replication.fluent.logical.LogicalStreamBuilder:org.postgresql.replication.PGReplicationStream start()",
                        "org.postgresql.shaded.com.ongres.scram.common.util.AbstractStringWritable:java.lang.String toString()",
                        "org.postgresql.core.v3.replication.V3PGReplicationStream:boolean isClosed()",
                        "org.postgresql.hostchooser.GlobalHostStatusTracker$HostSpecStatus:java.lang.String toString()",
                        "org.postgresql.jdbc.PgConnection:void close()",
                        "org.postgresql.replication.fluent.logical.LogicalStreamBuilder:org.postgresql.replication.fluent.logical.ChainedLogicalStreamBuilder withSlotOption(java.lang.String,boolean)",
                        "org.postgresql.core.Field:java.lang.String toString()",
                        "org.postgresql.util.HostSpec:boolean equals(java.lang.Object)",
                        "org.postgresql.jdbc.PgConnection:boolean isClosed()",
                        "org.postgresql.core.v3.SimpleQuery:java.lang.String toString()",
                        "org.postgresql.util.ServerErrorMessage:java.lang.String toString()",
                        "org.ietf.jgss.GSSException:java.lang.String toString()",
                        "org.postgresql.PGProperty:void <clinit>()",
                        "org.postgresql.shaded.com.ongres.scram.common.message.ClientFinalMessage:java.lang.String toString()",
                        "org.postgresql.util.StreamWrapper$1:void close()",
                        "org.postgresql.geometric.PGpoint:java.lang.Object clone()",
                        "org.postgresql.core.v3.replication.V3PGReplicationStream:java.nio.ByteBuffer readPending()",
                        "org.postgresql.jdbc.FieldMetadata:java.lang.String toString()",
                        "org.postgresql.replication.PGReplicationConnectionImpl:org.postgresql.replication.fluent.ChainedCreateReplicationSlotBuilder createReplicationSlot()",
                        "org.postgresql.geometric.PGbox:java.lang.Object clone()",
                        "org.postgresql.largeobject.BlobOutputStream:void close()",
                        "org.postgresql.core.v3.replication.V3PGReplicationStream:void close()",
                        "org.postgresql.largeobject.LargeObject:void close()",
                        "org.postgresql.util.StreamWrapper:java.lang.String toString()"
                    ]
                }
            }
        }
    }
}