{
    "project name": "javabypatel_spring-boot-quartz-demo",
    "vulnerable dependencies": {
        "org.postgresql:postgresql:9.4.1208": {
            "used-method num": 0,
            "used method": []
        },
        "org.quartz-scheduler:quartz:2.2.3": {
            "used-method num": 60,
            "used method": [
                "org.quartz.impl.StdScheduler:void resumeJob(org.quartz.JobKey)",
                "org.quartz.JobDataMap:void <init>()",
                "org.quartz.impl.triggers.CronTriggerImpl:java.util.Date getStartTime()",
                "org.quartz.impl.StdScheduler:java.util.List getCurrentlyExecutingJobs()",
                "org.quartz.impl.StdScheduler:java.util.List getJobGroupNames()",
                "org.quartz.impl.triggers.CalendarIntervalTriggerImpl:java.util.Date getPreviousFireTime()",
                "org.quartz.impl.StdScheduler:void triggerJob(org.quartz.JobKey)",
                "org.quartz.impl.matchers.GroupMatcher:org.quartz.impl.matchers.GroupMatcher jobGroupEquals(java.lang.String)",
                "org.quartz.impl.RemoteScheduler:boolean interrupt(org.quartz.JobKey)",
                "org.quartz.utils.DirtyFlagMap:java.lang.Object remove(java.lang.Object)",
                "org.quartz.impl.StdScheduler:java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher)",
                "org.quartz.impl.triggers.AbstractTrigger:org.quartz.JobKey getJobKey()",
                "org.quartz.impl.triggers.CalendarIntervalTriggerImpl:java.util.Date getNextFireTime()",
                "org.quartz.impl.RemoteScheduler:java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)",
                "org.quartz.impl.RemoteScheduler:void pauseJob(org.quartz.JobKey)",
                "org.quartz.TriggerKey:void <init>(java.lang.String)",
                "org.quartz.impl.RemoteScheduler:void triggerJob(org.quartz.JobKey)",
                "org.quartz.utils.DirtyFlagMap$DirtyFlagCollection:java.util.Iterator iterator()",
                "org.quartz.impl.triggers.AbstractTrigger:org.quartz.TriggerKey getKey()",
                "org.quartz.impl.StdScheduler:void pauseJob(org.quartz.JobKey)",
                "org.quartz.impl.RemoteScheduler:void resumeJob(org.quartz.JobKey)",
                "org.quartz.impl.StdScheduler:boolean deleteJob(org.quartz.JobKey)",
                "org.quartz.impl.RemoteScheduler:java.util.List getTriggersOfJob(org.quartz.JobKey)",
                "org.quartz.impl.triggers.CalendarIntervalTriggerImpl:java.util.Date getStartTime()",
                "org.quartz.impl.StdScheduler:boolean checkExists(org.quartz.JobKey)",
                "org.quartz.impl.triggers.CronTriggerImpl:java.util.Date getNextFireTime()",
                "org.quartz.impl.RemoteScheduler:org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)",
                "org.quartz.impl.RemoteScheduler:boolean checkExists(org.quartz.JobKey)",
                "org.quartz.impl.StdScheduler:org.quartz.JobDetail getJobDetail(org.quartz.JobKey)",
                "org.quartz.utils.Key:java.lang.String getGroup()",
                "org.quartz.utils.StringKeyDirtyFlagMap:void put(java.lang.String,java.lang.String)",
                "org.quartz.utils.DirtyFlagMap$DirtyFlagIterator:boolean hasNext()",
                "org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntrySet:java.util.Iterator iterator()",
                "org.quartz.impl.StdScheduler:java.util.Date rescheduleJob(org.quartz.TriggerKey,org.quartz.Trigger)",
                "org.quartz.utils.StringKeyDirtyFlagMap:java.lang.String getString(java.lang.String)",
                "org.quartz.impl.triggers.SimpleTriggerImpl:java.util.Date getNextFireTime()",
                "org.quartz.impl.RemoteScheduler:boolean unscheduleJob(org.quartz.TriggerKey)",
                "org.quartz.impl.StdScheduler:java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)",
                "org.quartz.utils.DirtyFlagMap$DirtyFlagIterator:java.lang.Object next()",
                "org.quartz.utils.Key:java.lang.String getName()",
                "org.quartz.xml.ValidationException:java.lang.String getMessage()",
                "org.quartz.impl.RemoteScheduler:org.quartz.JobDetail getJobDetail(org.quartz.JobKey)",
                "org.quartz.Trigger$TriggerState:void <clinit>()",
                "org.quartz.impl.RemoteScheduler:boolean deleteJob(org.quartz.JobKey)",
                "org.quartz.impl.triggers.SimpleTriggerImpl:java.util.Date getStartTime()",
                "org.quartz.impl.RemoteScheduler:java.util.List getJobGroupNames()",
                "org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntryIterator:org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntry next()",
                "org.quartz.impl.RemoteScheduler:java.util.Date rescheduleJob(org.quartz.TriggerKey,org.quartz.Trigger)",
                "org.quartz.impl.RemoteScheduler:java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher)",
                "org.quartz.impl.StdScheduler:java.util.List getTriggersOfJob(org.quartz.JobKey)",
                "org.quartz.impl.triggers.CronTriggerImpl:java.util.Date getPreviousFireTime()",
                "org.quartz.JobKey:void <init>(java.lang.String,java.lang.String)",
                "org.quartz.impl.triggers.SimpleTriggerImpl:java.util.Date getPreviousFireTime()",
                "org.quartz.impl.StdScheduler:org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)",
                "org.quartz.impl.StdScheduler:boolean interrupt(org.quartz.JobKey)",
                "org.quartz.impl.StdScheduler:boolean unscheduleJob(org.quartz.TriggerKey)",
                "org.quartz.impl.JobExecutionContextImpl:org.quartz.JobDetail getJobDetail()",
                "org.quartz.impl.JobDetailImpl:org.quartz.JobKey getKey()",
                "org.quartz.TriggerKey:org.quartz.TriggerKey triggerKey(java.lang.String)",
                "org.quartz.impl.RemoteScheduler:java.util.List getCurrentlyExecutingJobs()"
            ]
        }
    }
}