{
    "project name": "ksfzhaohui_gserver",
    "modules": {
        "com.gserver:gserver": {
            "vulnerable dependencies": {
                "io.netty:netty:3.5.2.Final": {
                    "used-method num": 80,
                    "used method": [
                        "org.jboss.netty.buffer.AbstractChannelBuffer:void writeByte(int)",
                        "org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory:void <init>()",
                        "org.jboss.netty.util.internal.LegacyLinkedTransferQueue$Itr:java.lang.Object next()",
                        "org.jboss.netty.buffer.HeapChannelBuffer:boolean hasArray()",
                        "org.jboss.netty.channel.socket.nio.NioProviderMetadata$SelectorLoop:void run()",
                        "org.jboss.netty.buffer.AbstractChannelBuffer:void resetReaderIndex()",
                        "org.jboss.netty.buffer.ByteBufferBackedChannelBuffer:boolean hasArray()",
                        "org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink$Boss:void run()",
                        "org.jboss.netty.util.internal.LinkedTransferQueue$Itr:boolean hasNext()",
                        "org.jboss.netty.buffer.AbstractChannelBuffer:int readerIndex()",
                        "org.jboss.netty.util.ThreadRenamingRunnable:void run()",
                        "org.jboss.netty.buffer.DynamicChannelBuffer:void writeByte(int)",
                        "org.jboss.netty.channel.Channels$3:void run()",
                        "org.jboss.netty.channel.socket.nio.NioWorker$RegisterTask:void run()",
                        "org.jboss.netty.util.internal.LegacyLinkedTransferQueue$Itr:boolean hasNext()",
                        "org.jboss.netty.buffer.DuplicatedChannelBuffer:boolean hasArray()",
                        "org.jboss.netty.bootstrap.ServerBootstrap:void <init>(org.jboss.netty.channel.ChannelFactory)",
                        "org.jboss.netty.buffer.AbstractChannelBuffer:org.jboss.netty.buffer.ChannelBuffer readBytes(int)",
                        "org.jboss.netty.channel.AbstractServerChannel:org.jboss.netty.channel.ChannelFuture write(java.lang.Object)",
                        "org.jboss.netty.buffer.AbstractChannelBuffer:void writeBytes(byte[])",
                        "org.jboss.netty.buffer.CompositeChannelBuffer:int arrayOffset()",
                        "org.jboss.netty.util.internal.DeadLockProofWorker$1:void run()",
                        "org.jboss.netty.channel.Channels$2:void run()",
                        "org.jboss.netty.buffer.DuplicatedChannelBuffer:byte[] array()",
                        "org.jboss.netty.util.internal.ConcurrentHashMap$EntrySet:java.util.Iterator iterator()",
                        "org.jboss.netty.buffer.AbstractChannelBuffer:int readInt()",
                        "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer wrappedBuffer(byte[])",
                        "org.jboss.netty.channel.Channels$7:void run()",
                        "org.jboss.netty.buffer.ChannelBuffers:org.jboss.netty.buffer.ChannelBuffer dynamicBuffer()",
                        "org.jboss.netty.buffer.AbstractChannelBuffer:void markReaderIndex()",
                        "org.jboss.netty.buffer.SlicedChannelBuffer:int arrayOffset()",
                        "org.jboss.netty.channel.socket.nio.NioWorker:void run()",
                        "org.jboss.netty.handler.codec.oneone.OneToOneEncoder:void <init>()",
                        "org.jboss.netty.bootstrap.ClientBootstrap:void <init>(org.jboss.netty.channel.ChannelFactory)",
                        "org.jboss.netty.channel.CompleteChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
                        "org.jboss.netty.buffer.TruncatedChannelBuffer:boolean hasArray()",
                        "org.jboss.netty.buffer.DuplicatedChannelBuffer:int arrayOffset()",
                        "org.jboss.netty.channel.Channels$5:void run()",
                        "org.jboss.netty.channel.AbstractChannel:org.jboss.netty.channel.ChannelFuture write(java.lang.Object)",
                        "org.jboss.netty.buffer.AbstractChannelBuffer:int readableBytes()",
                        "org.jboss.netty.buffer.ChannelBuffers:void <clinit>()",
                        "org.jboss.netty.buffer.TruncatedChannelBuffer:int arrayOffset()",
                        "org.jboss.netty.handler.codec.frame.FrameDecoder:void <init>()",
                        "org.jboss.netty.buffer.CompositeChannelBuffer:byte[] array()",
                        "org.jboss.netty.util.internal.ConcurrentHashMap$HashIterator:boolean hasNext()",
                        "org.jboss.netty.handler.codec.oneone.OneToOneDecoder:void <init>()",
                        "org.jboss.netty.buffer.CompositeChannelBuffer:boolean hasArray()",
                        "org.jboss.netty.handler.codec.frame.CorruptedFrameException:void <init>(java.lang.String)",
                        "org.jboss.netty.util.internal.LinkedTransferQueue$Itr:java.lang.Object next()",
                        "org.jboss.netty.util.internal.ConcurrentHashMap$ValueIterator:java.lang.Object next()",
                        "org.jboss.netty.util.internal.ConcurrentHashMap$KeySet:java.util.Iterator iterator()",
                        "org.jboss.netty.channel.DefaultChannelFuture:void addListener(org.jboss.netty.channel.ChannelFutureListener)",
                        "org.jboss.netty.buffer.HeapChannelBuffer:byte[] array()",
                        "org.jboss.netty.buffer.SlicedChannelBuffer:boolean hasArray()",
                        "org.jboss.netty.channel.socket.nio.NioSocketChannel:boolean isConnected()",
                        "org.jboss.netty.buffer.AbstractChannelBuffer:byte readByte()",
                        "org.jboss.netty.buffer.ByteBufferBackedChannelBuffer:byte[] array()",
                        "org.jboss.netty.util.internal.ConcurrentHashMap$EntryIterator:java.util.Map$Entry next()",
                        "org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink$Boss:void run()",
                        "org.jboss.netty.buffer.ChannelBufferInputStream:void <init>(org.jboss.netty.buffer.ChannelBuffer)",
                        "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void <init>(java.util.concurrent.Executor,java.util.concurrent.Executor)",
                        "org.jboss.netty.buffer.DynamicChannelBuffer:boolean hasArray()",
                        "org.jboss.netty.channel.DefaultChannelFuture:org.jboss.netty.channel.Channel getChannel()",
                        "org.jboss.netty.util.internal.ConcurrentHashMap$KeyIterator:java.lang.Object next()",
                        "org.jboss.netty.buffer.DynamicChannelBuffer:int arrayOffset()",
                        "org.jboss.netty.buffer.DynamicChannelBuffer:void writeInt(int)",
                        "org.jboss.netty.channel.Channels$4:void run()",
                        "org.jboss.netty.channel.socket.nio.NioClientSocketPipelineSink$RegisterTask:void run()",
                        "org.jboss.netty.buffer.HeapChannelBuffer:int arrayOffset()",
                        "org.jboss.netty.buffer.SlicedChannelBuffer:byte[] array()",
                        "org.jboss.netty.buffer.DynamicChannelBuffer:byte[] array()",
                        "org.jboss.netty.channel.DefaultChannelFuture:boolean cancel()",
                        "org.jboss.netty.buffer.TruncatedChannelBuffer:byte[] array()",
                        "org.jboss.netty.channel.AbstractServerChannel:boolean isConnected()",
                        "org.jboss.netty.channel.CompleteChannelFuture:org.jboss.netty.channel.Channel getChannel()",
                        "org.jboss.netty.channel.Channels$6:void run()",
                        "org.jboss.netty.buffer.ReadOnlyChannelBuffer:int arrayOffset()",
                        "org.jboss.netty.buffer.AbstractChannelBuffer:void writeInt(int)",
                        "org.jboss.netty.buffer.ReadOnlyChannelBuffer:byte[] array()",
                        "org.jboss.netty.channel.Channels$8:void run()"
                    ]
                }
            }
        }
    }
}