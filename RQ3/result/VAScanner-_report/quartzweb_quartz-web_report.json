{
    "project name": "quartzweb_quartz-web",
    "vulnerable dependencies": {
        "org.apache.logging.log4j:log4j-core:2.3": {
            "used-method num": 0,
            "used method": []
        },
        "org.quartz-scheduler:quartz:2.2.1": {
            "used-method num": 157,
            "used method": [
                "org.quartz.impl.StdScheduler:void addJob(org.quartz.JobDetail,boolean,boolean)",
                "org.quartz.impl.triggers.CronTriggerImpl:java.util.Date getStartTime()",
                "org.quartz.JobBuilder:org.quartz.JobBuilder withDescription(java.lang.String)",
                "org.quartz.impl.RemoteScheduler:void scheduleJob(org.quartz.JobDetail,java.util.Set,boolean)",
                "org.quartz.impl.RemoteScheduler:void pauseTrigger(org.quartz.TriggerKey)",
                "org.quartz.JobBuilder:org.quartz.JobBuilder newJob(java.lang.Class)",
                "org.quartz.impl.RemoteScheduler:void addJob(org.quartz.JobDetail,boolean)",
                "org.quartz.impl.RemoteScheduler:void pauseJob(org.quartz.JobKey)",
                "org.quartz.impl.JobDetailImpl:org.quartz.JobDataMap getJobDataMap()",
                "org.quartz.impl.triggers.CronTriggerImpl:java.lang.Object clone()",
                "org.quartz.impl.RemoteScheduler:java.util.List getTriggersOfJob(org.quartz.JobKey)",
                "org.quartz.utils.Key:java.lang.String getGroup()",
                "org.quartz.impl.RemoteScheduler:org.quartz.JobDetail getJobDetail(org.quartz.JobKey)",
                "org.quartz.TriggerBuilder:org.quartz.TriggerBuilder withPriority(int)",
                "org.quartz.impl.RemoteScheduler:void resumeTrigger(org.quartz.TriggerKey)",
                "org.quartz.utils.DirtyFlagMap:java.util.Set entrySet()",
                "org.quartz.impl.RemoteScheduler:void start()",
                "org.quartz.impl.RemoteScheduler:java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher)",
                "org.quartz.impl.RemoteScheduler:java.util.Date rescheduleJob(org.quartz.TriggerKey,org.quartz.Trigger)",
                "org.quartz.impl.RemoteScheduler:boolean checkExists(org.quartz.TriggerKey)",
                "org.quartz.impl.StdScheduler:void resumeTrigger(org.quartz.TriggerKey)",
                "org.quartz.utils.DirtyFlagMap:java.lang.Object get(java.lang.Object)",
                "org.quartz.impl.triggers.AbstractTrigger:org.quartz.JobDataMap getJobDataMap()",
                "org.quartz.core.QuartzScheduler:java.lang.String getVersionMinor()",
                "org.quartz.impl.RemoteScheduler:void triggerJob(org.quartz.JobKey,org.quartz.JobDataMap)",
                "org.quartz.impl.triggers.AbstractTrigger:java.lang.String getDescription()",
                "org.quartz.impl.triggers.CronTriggerImpl:java.util.Date getFinalFireTime()",
                "org.quartz.impl.RemoteScheduler:boolean deleteJob(org.quartz.JobKey)",
                "org.quartz.JobKey:void <init>(java.lang.String,java.lang.String)",
                "org.quartz.utils.StringKeyDirtyFlagMap:java.lang.Object put(java.lang.String,java.lang.Object)",
                "org.quartz.CronScheduleBuilder:org.quartz.CronScheduleBuilder cronSchedule(java.lang.String)",
                "org.quartz.impl.StdScheduler:org.quartz.Trigger getTrigger(org.quartz.TriggerKey)",
                "org.quartz.JobBuilder:org.quartz.JobDetail build()",
                "org.quartz.impl.triggers.SimpleTriggerImpl:java.util.Date getFinalFireTime()",
                "org.quartz.impl.RemoteScheduler:java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)",
                "org.quartz.impl.SchedulerRepository:java.util.Collection lookupAll()",
                "org.quartz.impl.RemoteScheduler:void resumeJob(org.quartz.JobKey)",
                "org.quartz.impl.StdScheduler:boolean deleteJob(org.quartz.JobKey)",
                "org.quartz.TriggerBuilder:org.quartz.TriggerBuilder startAt(java.util.Date)",
                "org.quartz.impl.SchedulerRepository:org.quartz.impl.SchedulerRepository getInstance()",
                "org.quartz.impl.StdScheduler:boolean checkExists(org.quartz.JobKey)",
                "org.quartz.impl.RemoteScheduler:boolean checkExists(org.quartz.JobKey)",
                "org.quartz.impl.SchedulerRepository:org.quartz.Scheduler lookup(java.lang.String)",
                "org.quartz.impl.StdScheduler:org.quartz.JobDetail getJobDetail(org.quartz.JobKey)",
                "org.quartz.utils.StringKeyDirtyFlagMap:void put(java.lang.String,java.lang.String)",
                "org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntrySet:java.util.Iterator iterator()",
                "org.quartz.impl.StdScheduler:boolean isShutdown()",
                "org.quartz.impl.StdSchedulerFactory:org.quartz.Scheduler getScheduler()",
                "org.quartz.impl.triggers.CronTriggerImpl:java.util.Date getEndTime()",
                "org.quartz.impl.triggers.SimpleTriggerImpl:java.util.Date getStartTime()",
                "org.quartz.impl.RemoteScheduler:java.util.List getJobGroupNames()",
                "org.quartz.simpl.SimpleThreadPool$WorkerThread:void run()",
                "org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntry:java.lang.Object getKey()",
                "org.quartz.impl.RemoteScheduler:boolean isShutdown()",
                "org.quartz.utils.DirtyFlagMap:java.lang.Object clone()",
                "org.quartz.impl.StdScheduler:java.util.Date scheduleJob(org.quartz.Trigger)",
                "org.quartz.JobDataMap:void <init>()",
                "org.quartz.impl.StdScheduler:void scheduleJob(org.quartz.JobDetail,java.util.Set,boolean)",
                "org.quartz.impl.RemoteScheduler:boolean isInStandbyMode()",
                "org.quartz.utils.DirtyFlagMap$DirtyFlagCollection:java.util.Iterator iterator()",
                "org.quartz.impl.triggers.AbstractTrigger:org.quartz.TriggerKey getKey()",
                "org.quartz.impl.matchers.GroupMatcher:org.quartz.impl.matchers.GroupMatcher groupEquals(java.lang.String)",
                "org.quartz.utils.DirtyFlagMap:boolean isEmpty()",
                "org.quartz.impl.StdScheduler:void shutdown(boolean)",
                "org.quartz.impl.RemoteScheduler:java.lang.String getSchedulerName()",
                "org.quartz.impl.triggers.CronTriggerImpl:java.util.Date getNextFireTime()",
                "org.quartz.impl.StdScheduler:boolean isStarted()",
                "org.quartz.impl.triggers.AbstractTrigger:int getMisfireInstruction()",
                "org.quartz.impl.jdbcjobstore.JobStoreSupport$MisfireHandler:void run()",
                "org.quartz.utils.DirtyFlagMap$DirtyFlagIterator:boolean hasNext()",
                "org.quartz.CronExpression:boolean isValidExpression(java.lang.String)",
                "org.quartz.impl.jdbcjobstore.JobStoreSupport$ClusterManager:void run()",
                "org.quartz.impl.StdSchedulerFactory:void <init>(java.util.Properties)",
                "org.quartz.core.QuartzScheduler:void <clinit>()",
                "org.quartz.TriggerBuilder:org.quartz.TriggerBuilder usingJobData(org.quartz.JobDataMap)",
                "org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntryIterator:org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntry next()",
                "org.quartz.impl.StdScheduler:void startDelayed(int)",
                "org.quartz.impl.StdScheduler:org.quartz.SchedulerContext getContext()",
                "org.quartz.impl.triggers.SimpleTriggerImpl:java.util.Date getPreviousFireTime()",
                "org.quartz.impl.StdScheduler:boolean unscheduleJob(org.quartz.TriggerKey)",
                "org.quartz.impl.JobDetailImpl:boolean isConcurrentExectionDisallowed()",
                "org.quartz.impl.StdScheduler:boolean checkExists(org.quartz.TriggerKey)",
                "org.quartz.impl.StdScheduler:java.util.Set getJobKeys(org.quartz.impl.matchers.GroupMatcher)",
                "org.quartz.impl.RemoteScheduler:void addJob(org.quartz.JobDetail,boolean,boolean)",
                "org.quartz.impl.triggers.AbstractTrigger:int compareTo(java.lang.Object)",
                "org.quartz.impl.JobDetailImpl:java.lang.Class getJobClass()",
                "org.quartz.impl.triggers.CronTriggerImpl:java.util.Date getFireTimeAfter(java.util.Date)",
                "org.quartz.impl.triggers.SimpleTriggerImpl:java.util.Date getNextFireTime()",
                "org.quartz.impl.RemoteScheduler:java.util.Date scheduleJob(org.quartz.Trigger)",
                "org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntry:java.lang.Object getValue()",
                "org.quartz.impl.RemoteScheduler:org.quartz.SchedulerContext getContext()",
                "org.quartz.impl.JobExecutionContextImpl:java.lang.String toString()",
                "org.quartz.SchedulerMetaData:java.lang.String toString()",
                "org.quartz.impl.RemoteScheduler:boolean isStarted()",
                "org.quartz.SchedulerException:java.lang.String toString()",
                "org.quartz.utils.DirtyFlagMap:java.util.Collection values()",
                "org.quartz.impl.StdScheduler:void resumeJob(org.quartz.JobKey)",
                "org.quartz.impl.StdScheduler:java.util.List getJobGroupNames()",
                "org.quartz.impl.StdScheduler:void pauseTrigger(org.quartz.TriggerKey)",
                "org.quartz.utils.StringKeyDirtyFlagMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
                "org.quartz.utils.DirtyFlagMap:int size()",
                "org.quartz.CronExpression:void <clinit>()",
                "org.quartz.impl.RemoteScheduler:void startDelayed(int)",
                "org.quartz.impl.StdScheduler:java.lang.String getSchedulerName()",
                "org.quartz.impl.triggers.AbstractTrigger:java.lang.Object clone()",
                "org.quartz.impl.JobDetailImpl:java.lang.Object clone()",
                "org.quartz.TriggerBuilder:org.quartz.TriggerBuilder forJob(java.lang.String,java.lang.String)",
                "org.quartz.JobBuilder:org.quartz.JobBuilder withIdentity(java.lang.String,java.lang.String)",
                "org.quartz.impl.JobDetailImpl:java.lang.String toString()",
                "org.quartz.core.QuartzScheduler:java.lang.String getVersionMajor()",
                "org.quartz.impl.JobDetailImpl:boolean isPersistJobDataAfterExecution()",
                "org.quartz.utils.DirtyFlagMap$DirtyFlagIterator:java.lang.Object next()",
                "org.quartz.TriggerBuilder:org.quartz.TriggerBuilder withDescription(java.lang.String)",
                "org.quartz.impl.StdSchedulerFactory:void <init>()",
                "org.quartz.Trigger$TriggerState:void <clinit>()",
                "org.quartz.impl.StdScheduler:void start()",
                "org.quartz.utils.DirtyFlagMap:boolean containsKey(java.lang.Object)",
                "org.quartz.impl.RemoteScheduler:org.quartz.Trigger getTrigger(org.quartz.TriggerKey)",
                "org.quartz.utils.Key:int compareTo(java.lang.Object)",
                "org.quartz.utils.counter.sampled.TimeStampedCounterValue:java.lang.String toString()",
                "org.quartz.impl.RemoteScheduler:void shutdown(boolean)",
                "org.quartz.impl.StdScheduler:java.util.List getTriggersOfJob(org.quartz.JobKey)",
                "org.quartz.impl.StdScheduler:org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)",
                "org.quartz.impl.JobDetailImpl:java.lang.String getDescription()",
                "org.quartz.impl.JobDetailImpl:org.quartz.JobKey getKey()",
                "org.quartz.TriggerKey:void <init>(java.lang.String,java.lang.String)",
                "org.quartz.impl.StdScheduler:void pauseJob(org.quartz.JobKey)",
                "org.quartz.impl.StdScheduler:void shutdown()",
                "org.quartz.core.QuartzSchedulerThread:void run()",
                "org.quartz.impl.StdScheduler:boolean isInStandbyMode()",
                "org.quartz.TriggerBuilder:org.quartz.TriggerBuilder withIdentity(java.lang.String,java.lang.String)",
                "org.quartz.impl.StdScheduler:java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)",
                "org.quartz.utils.Key:java.lang.String getName()",
                "org.quartz.utils.Key:java.lang.String toString()",
                "org.quartz.core.QuartzScheduler:java.lang.String getVersionIteration()",
                "org.quartz.impl.triggers.CronTriggerImpl:java.util.Date getPreviousFireTime()",
                "org.quartz.CronExpression:java.lang.Object clone()",
                "org.quartz.JobExecutionException:void <init>(java.lang.Throwable)",
                "org.quartz.TriggerBuilder:org.quartz.TriggerBuilder newTrigger()",
                "org.quartz.TriggerBuilder:org.quartz.TriggerBuilder endAt(java.util.Date)",
                "org.quartz.impl.triggers.AbstractTrigger:org.quartz.JobKey getJobKey()",
                "org.quartz.utils.DirtyFlagMap:java.util.Set keySet()",
                "org.quartz.impl.RemoteScheduler:org.quartz.Trigger$TriggerState getTriggerState(org.quartz.TriggerKey)",
                "org.quartz.impl.triggers.AbstractTrigger:int getPriority()",
                "org.quartz.impl.StdScheduler:void triggerJob(org.quartz.JobKey,org.quartz.JobDataMap)",
                "org.quartz.impl.triggers.AbstractTrigger:java.lang.String getCalendarName()",
                "org.quartz.impl.StdScheduler:java.util.Date rescheduleJob(org.quartz.TriggerKey,org.quartz.Trigger)",
                "org.quartz.impl.triggers.SimpleTriggerImpl:java.util.Date getFireTimeAfter(java.util.Date)",
                "org.quartz.impl.RemoteScheduler:boolean unscheduleJob(org.quartz.TriggerKey)",
                "org.quartz.TriggerBuilder:org.quartz.Trigger build()",
                "org.quartz.TriggerBuilder:org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)",
                "org.quartz.impl.StdScheduler:void addJob(org.quartz.JobDetail,boolean)",
                "org.quartz.impl.JobDetailImpl:boolean isDurable()",
                "org.quartz.impl.triggers.SimpleTriggerImpl:java.util.Date getEndTime()",
                "org.quartz.impl.RemoteScheduler:void shutdown()",
                "org.quartz.impl.triggers.AbstractTrigger:java.lang.String toString()",
                "org.quartz.impl.triggers.CronTriggerImpl:java.lang.String getCronExpression()"
            ]
        },
        "org.eclipse.jetty:jetty-server:8.1.22.v20160922": {
            "used-method num": 18,
            "used method": [
                "org.eclipse.jetty.server.Server:java.lang.String toString()",
                "org.eclipse.jetty.server.Dispatcher$ForwardAttributes:java.lang.String toString()",
                "org.eclipse.jetty.server.ShutdownMonitor$ShutdownMonitorThread:void run()",
                "org.eclipse.jetty.server.session.AbstractSession:void removeAttribute(java.lang.String)",
                "org.eclipse.jetty.server.AbstractHttpConnection:java.lang.String toString()",
                "org.eclipse.jetty.server.handler.HandlerWrapper:void setHandler(org.eclipse.jetty.server.Handler)",
                "org.eclipse.jetty.server.Server:void <clinit>()",
                "org.eclipse.jetty.server.session.AbstractSession:java.lang.String toString()",
                "org.eclipse.jetty.server.ShutdownMonitor:java.lang.String toString()",
                "org.eclipse.jetty.server.Dispatcher$IncludeAttributes:java.lang.String toString()",
                "org.eclipse.jetty.server.ServletResponseHttpWrapper:void sendRedirect(java.lang.String)",
                "org.eclipse.jetty.server.AbstractConnector:java.lang.String toString()",
                "org.eclipse.jetty.server.AsyncContinuation:java.lang.String toString()",
                "org.eclipse.jetty.server.ShutdownMonitor$ShutdownMonitorThread:void start()",
                "org.eclipse.jetty.server.Server:void <init>(int)",
                "org.eclipse.jetty.server.handler.ContextHandler$Context:java.lang.String toString()",
                "org.eclipse.jetty.server.session.AbstractSession:java.lang.Object getAttribute(java.lang.String)",
                "org.eclipse.jetty.server.session.AbstractSession:void setAttribute(java.lang.String,java.lang.Object)"
            ]
        },
        "org.eclipse.jetty:jetty-webapp:8.1.22.v20160922": {
            "used-method num": 6,
            "used method": [
                "org.eclipse.jetty.webapp.WebAppContext:void <init>()",
                "org.eclipse.jetty.webapp.WebAppClassLoader:java.net.URL getResource(java.lang.String)",
                "org.eclipse.jetty.webapp.WebAppClassLoader:java.lang.Class loadClass(java.lang.String)",
                "org.eclipse.jetty.webapp.Descriptor:java.lang.String toString()",
                "org.eclipse.jetty.webapp.WebAppClassLoader:java.lang.String toString()",
                "org.eclipse.jetty.webapp.WebAppContext:java.lang.String toString()"
            ]
        },
        "junit:junit:4.12": {
            "used-method num": 0,
            "used method": []
        },
        "commons-beanutils:commons-beanutils:1.9.3": {
            "used-method num": 0,
            "used method": []
        }
    }
}