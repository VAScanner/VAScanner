{
    "project name": "luotuo_springboot-security-wechat",
    "vulnerable dependencies": {
        "junit:junit:4.12": {
            "used-method num": 0,
            "used method": []
        },
        "commons-fileupload:commons-fileupload:1.3.3": {
            "used-method num": 0,
            "used method": []
        },
        "org.springframework.security.oauth:spring-security-oauth2:2.0.13.RELEASE": {
            "used-method num": 110,
            "used method": [
                "org.springframework.security.oauth2.client.http.OAuth2ErrorHandler$1:org.springframework.http.HttpHeaders getHeaders()",
                "org.springframework.security.oauth2.client.DefaultOAuth2ClientContext:void setAccessToken(org.springframework.security.oauth2.common.OAuth2AccessToken)",
                "org.springframework.security.oauth2.provider.OAuth2Request:boolean equals(java.lang.Object)",
                "org.springframework.security.oauth2.common.exceptions.InvalidTokenException:void <init>(java.lang.String)",
                "org.springframework.security.oauth2.client.token.grant.redirect.AbstractRedirectResourceDetails:java.lang.String getRedirectUri(org.springframework.security.oauth2.client.token.AccessTokenRequest)",
                "org.springframework.security.oauth2.client.OAuth2RestTemplate:void <init>(org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails,org.springframework.security.oauth2.client.OAuth2ClientContext)",
                "org.springframework.security.oauth2.client.token.OAuth2AccessTokenSupport:void <init>()",
                "org.springframework.security.oauth2.client.token.grant.implicit.ImplicitAccessTokenProvider:org.springframework.security.oauth2.common.OAuth2AccessToken obtainAccessToken(org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails,org.springframework.security.oauth2.client.token.AccessTokenRequest)",
                "org.springframework.security.oauth2.client.resource.BaseOAuth2ProtectedResourceDetails:java.lang.String getClientId()",
                "org.springframework.security.oauth2.client.token.grant.password.ResourceOwnerPasswordAccessTokenProvider:boolean supportsRefresh(org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails)",
                "org.springframework.security.oauth2.common.DefaultOAuth2AccessToken:void <init>(org.springframework.security.oauth2.common.OAuth2AccessToken)",
                "org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken:boolean equals(java.lang.Object)",
                "org.springframework.security.oauth2.client.resource.UserApprovalRequiredException:void <init>(java.lang.String,java.util.Map,java.lang.String,java.util.List)",
                "org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationDetails:void <clinit>()",
                "org.springframework.security.oauth2.client.resource.UserRedirectRequiredException:java.lang.String getStateKey()",
                "org.springframework.security.oauth2.common.DefaultOAuth2AccessToken:boolean equals(java.lang.Object)",
                "org.springframework.security.oauth2.common.DefaultOAuth2AccessToken:void setTokenType(java.lang.String)",
                "org.springframework.security.oauth2.common.DefaultOAuth2AccessToken:org.springframework.security.oauth2.common.OAuth2RefreshToken getRefreshToken()",
                "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeAccessTokenProvider:org.springframework.security.oauth2.common.OAuth2AccessToken obtainAccessToken(org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails,org.springframework.security.oauth2.client.token.AccessTokenRequest)",
                "org.springframework.security.oauth2.client.http.AccessTokenRequiredException:void <init>(java.lang.String,org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails)",
                "org.springframework.security.oauth2.client.http.OAuth2ErrorHandler:void <init>(org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails)",
                "org.springframework.security.oauth2.client.token.DefaultRequestEnhancer:void <init>()",
                "org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationDetails:boolean equals(java.lang.Object)",
                "org.springframework.security.oauth2.client.token.DefaultRequestEnhancer:void enhance(org.springframework.security.oauth2.client.token.AccessTokenRequest,org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails,org.springframework.util.MultiValueMap,org.springframework.http.HttpHeaders)",
                "org.springframework.security.oauth2.client.token.DefaultAccessTokenRequest:void set(java.lang.Object,java.lang.Object)",
                "org.springframework.security.oauth2.client.token.AccessTokenProviderChain:org.springframework.security.oauth2.common.OAuth2AccessToken obtainAccessToken(org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails,org.springframework.security.oauth2.client.token.AccessTokenRequest)",
                "org.springframework.security.oauth2.client.filter.OAuth2AuthenticationFailureEvent:void <init>(org.springframework.security.core.AuthenticationException)",
                "org.springframework.security.oauth2.common.DefaultOAuth2AccessToken:java.lang.String toString()",
                "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeAccessTokenProvider$2:org.springframework.http.ResponseEntity extractData(org.springframework.http.client.ClientHttpResponse)",
                "org.springframework.security.oauth2.client.token.DefaultAccessTokenRequest:java.lang.String getAuthorizationCode()",
                "org.springframework.security.oauth2.client.resource.BaseOAuth2ProtectedResourceDetails:void <init>()",
                "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeAccessTokenProvider:org.springframework.security.oauth2.common.OAuth2AccessToken refreshAccessToken(org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails,org.springframework.security.oauth2.common.OAuth2RefreshToken,org.springframework.security.oauth2.client.token.AccessTokenRequest)",
                "org.springframework.security.oauth2.client.resource.BaseOAuth2ProtectedResourceDetails:int hashCode()",
                "org.springframework.security.oauth2.client.resource.OAuth2AccessDeniedException:void <init>(java.lang.String,org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails)",
                "org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationDetailsSource:void <init>()",
                "org.springframework.security.oauth2.client.token.DefaultAccessTokenRequest:java.util.Map toSingleValueMap()",
                "org.springframework.security.oauth2.client.token.OAuth2AccessTokenSupport:void setMessageConverters(java.util.List)",
                "org.springframework.security.oauth2.client.token.grant.password.ResourceOwnerPasswordAccessTokenProvider:org.springframework.security.oauth2.common.OAuth2AccessToken obtainAccessToken(org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails,org.springframework.security.oauth2.client.token.AccessTokenRequest)",
                "org.springframework.security.oauth2.common.util.OAuth2Utils:java.lang.String formatParameterList(java.util.Collection)",
                "org.springframework.security.oauth2.common.DefaultOAuth2AccessToken:java.lang.String getTokenType()",
                "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeAccessTokenProvider$1:org.springframework.http.ResponseEntity extractData(org.springframework.http.client.ClientHttpResponse)",
                "org.springframework.security.oauth2.client.DefaultOAuth2RequestAuthenticator:void <init>()",
                "org.springframework.security.oauth2.client.resource.UserRedirectRequiredException:void setStateToPreserve(java.lang.Object)",
                "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeAccessTokenProvider:boolean supportsRefresh(org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails)",
                "org.springframework.security.oauth2.client.http.OAuth2ErrorHandler$1:org.springframework.http.HttpStatus getStatusCode()",
                "org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsAccessTokenProvider:boolean supportsResource(org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails)",
                "org.springframework.security.oauth2.common.DefaultOAuth2AccessToken:void <init>(java.lang.String)",
                "org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken:java.lang.String toString()",
                "org.springframework.security.oauth2.common.DefaultOAuth2AccessToken:java.lang.String getValue()",
                "org.springframework.security.oauth2.common.DefaultOAuth2AccessToken:java.util.Map getAdditionalInformation()",
                "org.springframework.security.oauth2.client.resource.BaseOAuth2ProtectedResourceDetails:boolean isScoped()",
                "org.springframework.security.oauth2.client.DefaultOAuth2ClientContext:org.springframework.security.oauth2.client.token.AccessTokenRequest getAccessTokenRequest()",
                "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeAccessTokenProvider:boolean supportsResource(org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails)",
                "org.springframework.security.oauth2.client.token.OAuth2AccessTokenSupport:org.springframework.web.client.ResponseExtractor getResponseExtractor()",
                "org.springframework.security.oauth2.client.token.DefaultAccessTokenRequest:java.lang.String getStateKey()",
                "org.springframework.security.oauth2.client.resource.UserRedirectRequiredException:void setStateKey(java.lang.String)",
                "org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsAccessTokenProvider:void <init>()",
                "org.springframework.security.oauth2.provider.OAuth2Authentication:boolean equals(java.lang.Object)",
                "org.springframework.security.oauth2.client.OAuth2RestTemplate:org.springframework.security.oauth2.common.OAuth2AccessToken getAccessToken()",
                "org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationDetailsSource:java.lang.Object buildDetails(java.lang.Object)",
                "org.springframework.security.oauth2.common.DefaultOAuth2AccessToken:void setRefreshToken(org.springframework.security.oauth2.common.OAuth2RefreshToken)",
                "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails:void <init>()",
                "org.springframework.security.oauth2.client.resource.UserRedirectRequiredException:void <init>(java.lang.String,java.util.Map)",
                "org.springframework.security.oauth2.client.token.DefaultAccessTokenRequest:java.lang.Object getFirst(java.lang.Object)",
                "org.springframework.security.oauth2.provider.OAuth2Request:int hashCode()",
                "org.springframework.security.oauth2.client.resource.BaseOAuth2ProtectedResourceDetails:boolean equals(java.lang.Object)",
                "org.springframework.security.oauth2.client.DefaultOAuth2ClientContext:void <init>()",
                "org.springframework.security.oauth2.client.token.OAuth2AccessTokenSupport:org.springframework.web.client.RequestCallback getRequestCallback(org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails,org.springframework.util.MultiValueMap,org.springframework.http.HttpHeaders)",
                "org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken:java.lang.String getValue()",
                "org.springframework.security.oauth2.client.resource.BaseOAuth2ProtectedResourceDetails:java.util.List getScope()",
                "org.springframework.security.oauth2.client.token.OAuth2AccessTokenSupport:org.springframework.web.client.RestOperations getRestTemplate()",
                "org.springframework.security.oauth2.client.token.auth.DefaultClientAuthenticationHandler:void authenticateTokenRequest(org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails,org.springframework.util.MultiValueMap,org.springframework.http.HttpHeaders)",
                "org.springframework.security.oauth2.common.exceptions.OAuth2Exception:java.lang.String toString()",
                "org.springframework.security.oauth2.client.token.grant.password.ResourceOwnerPasswordAccessTokenProvider:boolean supportsResource(org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails)",
                "org.springframework.security.oauth2.client.token.DefaultAccessTokenRequest:void setExistingToken(org.springframework.security.oauth2.common.OAuth2AccessToken)",
                "org.springframework.security.oauth2.client.DefaultOAuth2ClientContext:void setPreservedState(java.lang.String,java.lang.Object)",
                "org.springframework.security.oauth2.client.filter.state.DefaultStateKeyGenerator:void <init>()",
                "org.springframework.security.oauth2.provider.OAuth2Request:void <init>(java.util.Map,java.lang.String,java.util.Collection,boolean,java.util.Set,java.util.Set,java.lang.String,java.util.Set,java.util.Map)",
                "org.springframework.security.oauth2.common.util.OAuth2Utils:java.util.Map extractMap(java.lang.String)",
                "org.springframework.security.oauth2.client.token.grant.password.ResourceOwnerPasswordAccessTokenProvider:void <init>()",
                "org.springframework.security.oauth2.client.token.DefaultAccessTokenRequest:boolean isError()",
                "org.springframework.security.oauth2.client.token.DefaultAccessTokenRequest:java.util.List get(java.lang.Object)",
                "org.springframework.security.oauth2.common.exceptions.OAuth2Exception:org.springframework.security.oauth2.common.exceptions.OAuth2Exception valueOf(java.util.Map)",
                "org.springframework.security.oauth2.client.token.DefaultAccessTokenRequest:void add(java.lang.Object,java.lang.Object)",
                "org.springframework.security.oauth2.client.resource.OAuth2AccessDeniedException:void <init>(java.lang.String,org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails,java.lang.Throwable)",
                "org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken:int hashCode()",
                "org.springframework.security.oauth2.client.resource.BaseOAuth2ProtectedResourceDetails:void setClientId(java.lang.String)",
                "org.springframework.security.oauth2.client.filter.state.DefaultStateKeyGenerator:java.lang.String generateKey(org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails)",
                "org.springframework.security.oauth2.client.token.grant.redirect.AbstractRedirectResourceDetails:java.lang.String getPreEstablishedRedirectUri()",
                "org.springframework.security.oauth2.provider.OAuth2Authentication:int hashCode()",
                "org.springframework.security.oauth2.common.exceptions.InvalidRequestException:void <init>(java.lang.String)",
                "org.springframework.security.oauth2.client.token.AccessTokenProviderChain:org.springframework.security.oauth2.common.OAuth2AccessToken refreshAccessToken(org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails,org.springframework.security.oauth2.common.OAuth2RefreshToken,org.springframework.security.oauth2.client.token.AccessTokenRequest)",
                "org.springframework.security.oauth2.client.token.grant.implicit.ImplicitAccessTokenProvider:boolean supportsResource(org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails)",
                "org.springframework.security.oauth2.common.DefaultOAuth2AccessToken:boolean isExpired()",
                "org.springframework.security.oauth2.client.token.OAuth2AccessTokenSupport:void <clinit>()",
                "org.springframework.security.oauth2.client.token.auth.DefaultClientAuthenticationHandler:void <init>()",
                "org.springframework.security.oauth2.provider.OAuth2Authentication:void <init>(org.springframework.security.oauth2.provider.OAuth2Request,org.springframework.security.core.Authentication)",
                "org.springframework.security.oauth2.client.DefaultOAuth2ClientContext:org.springframework.security.oauth2.common.OAuth2AccessToken getAccessToken()",
                "org.springframework.security.oauth2.common.DefaultOAuth2AccessToken:int hashCode()",
                "org.springframework.security.oauth2.client.OAuth2RestTemplate:org.springframework.security.oauth2.client.OAuth2ClientContext getOAuth2ClientContext()",
                "org.springframework.security.oauth2.client.token.grant.redirect.AbstractRedirectResourceDetails:java.lang.String getUserAuthorizationUri()",
                "org.springframework.security.oauth2.client.DefaultOAuth2ClientContext:java.lang.Object removePreservedState(java.lang.String)",
                "org.springframework.security.oauth2.client.token.DefaultAccessTokenRequest:org.springframework.security.oauth2.common.OAuth2AccessToken getExistingToken()",
                "org.springframework.security.oauth2.client.OAuth2RestTemplate:void setErrorHandler(org.springframework.web.client.ResponseErrorHandler)",
                "org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsAccessTokenProvider:org.springframework.security.oauth2.common.OAuth2AccessToken obtainAccessToken(org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails,org.springframework.security.oauth2.client.token.AccessTokenRequest)",
                "org.springframework.security.oauth2.client.token.DefaultAccessTokenRequest:void setPreservedState(java.lang.Object)",
                "org.springframework.security.oauth2.client.OAuth2RestTemplate:void <init>(org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails)",
                "org.springframework.security.oauth2.client.token.grant.password.ResourceOwnerPasswordAccessTokenProvider:org.springframework.security.oauth2.common.OAuth2AccessToken refreshAccessToken(org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails,org.springframework.security.oauth2.common.OAuth2RefreshToken,org.springframework.security.oauth2.client.token.AccessTokenRequest)",
                "org.springframework.security.oauth2.client.token.grant.implicit.ImplicitAccessTokenProvider$ImplicitResponseExtractor:org.springframework.security.oauth2.common.OAuth2AccessToken extractData(org.springframework.http.client.ClientHttpResponse)",
                "org.springframework.security.oauth2.client.token.grant.implicit.ImplicitAccessTokenProvider:void <init>()"
            ]
        }
    }
}