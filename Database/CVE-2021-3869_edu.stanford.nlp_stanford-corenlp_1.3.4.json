{
    "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()": {
        "isVulRoot": true,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.french.FrenchTreeReader:void <init>(java.io.Reader,edu.stanford.nlp.trees.TreeFactory,edu.stanford.nlp.trees.TreeNormalizer)"
        ]
    },
    "edu.stanford.nlp.trees.international.french.FrenchTreeReader:void <init>(java.io.Reader,edu.stanford.nlp.trees.TreeFactory,edu.stanford.nlp.trees.TreeNormalizer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.french.FrenchTreeReader:void <init>(java.io.Reader)"
        ]
    },
    "edu.stanford.nlp.util.XMLUtils:org.w3c.dom.Document readDocumentFromFile(java.lang.String)": {
        "isVulRoot": true,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:org.w3c.dom.Document readDocumentFromFile(java.lang.String)"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.XMLUtils:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.util.XMLUtils:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:org.w3c.dom.Document readDocumentFromFile(java.lang.String)"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getValidatingXmlParser(java.io.File)": {
        "isVulRoot": true,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getValidatingXmlParser(java.io.File)"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.XMLUtils:org.w3c.dom.Document readDocumentFromString(java.lang.String)": {
        "isVulRoot": true,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:org.w3c.dom.Document readDocumentFromString(java.lang.String)"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Document createDocument()": {
        "isVulRoot": true,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Document createDocument()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.XMLUtils:void <clinit>()",
            "edu.stanford.nlp.time.SUTimeMain:org.w3c.dom.Document annotationToXmlDocument(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.time.XMLUtils:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Document createDocument()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.SUTimeMain:org.w3c.dom.Document annotationToXmlDocument(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Document createDocument()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:java.lang.String textToAnnotatedXml(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Element parseElement(java.lang.String)": {
        "isVulRoot": true,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Element parseElement(java.lang.String)"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.Timex:edu.stanford.nlp.time.Timex fromXml(java.lang.String)",
            "edu.stanford.nlp.time.GUTimeAnnotator:void annotate(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.time.HeidelTimeAnnotator:void annotate(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.time.Timex:edu.stanford.nlp.time.Timex fromXml(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Element parseElement(java.lang.String)"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.GUTimeAnnotator:void annotate(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Element parseElement(java.lang.String)"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.GUTimeAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.time.HeidelTimeAnnotator:void annotate(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Element parseElement(java.lang.String)"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.HeidelTimeAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)": {
        "isVulRoot": true,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDomReader:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument parseDocument(java.io.File)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDomReader:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument parseDocument(java.io.File)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument parseDocument(java.lang.String,boolean)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument parseDocument(java.lang.String,boolean,java.lang.String)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDomReader:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.international.french.FrenchTreeReader:void <init>(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.french.FrenchTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)"
        ]
    },
    "edu.stanford.nlp.time.SUTimeMain:java.lang.String textToAnnotatedXml(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Document createDocument()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:void processTextFile(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.time.SUTimeMain:void processText(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.time.GUTimeAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Element parseElement(java.lang.String)"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.HeidelTimeAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Element parseElement(java.lang.String)"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument parseDocument(java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:java.util.List readDocument(java.lang.String,edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument parseDocument(java.lang.String,boolean,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:java.util.List readDocument(java.lang.String,edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDomReader:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.french.FrenchTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader,java.lang.String)",
            "edu.stanford.nlp.trees.MemoryTreebank:void processFile(java.io.File)",
            "edu.stanford.nlp.trees.international.french.FrenchTreeReader:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:boolean primeNextFile()"
        ]
    },
    "edu.stanford.nlp.time.SUTimeMain:void processTextFile(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Document createDocument()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.time.SUTimeMain:void processText(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Document createDocument()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:java.util.List readDocument(java.lang.String,edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:java.util.List readDocument(java.io.File,edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader)"
        ]
    },
    "edu.stanford.nlp.trees.MemoryTreebank:void processFile(java.io.File)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.FilePathProcessor:void processPath(java.io.File,java.io.FileFilter,edu.stanford.nlp.util.FileProcessor)"
        ]
    },
    "edu.stanford.nlp.trees.international.french.FrenchTreeReader:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:boolean primeNextFile()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:edu.stanford.nlp.trees.Tree primeNextTree()",
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:void <init>(edu.stanford.nlp.trees.DiskTreebank)"
        ]
    },
    "edu.stanford.nlp.time.SUTimeMain:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Document createDocument()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:java.util.List readDocument(java.io.File,edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:edu.stanford.nlp.pipeline.Annotation read(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.tregex.TregexPattern:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.util.FilePathProcessor:void processPath(java.io.File,java.io.FileFilter,edu.stanford.nlp.util.FileProcessor)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.MemoryTreebank:void loadPath(java.lang.String,java.io.FileFilter,java.lang.String)",
            "edu.stanford.nlp.trees.MemoryTreebank:void loadPath(java.io.File,java.io.FileFilter)",
            "edu.stanford.nlp.util.FilePathProcessor:void processPath(java.io.File,java.lang.String,boolean,edu.stanford.nlp.util.FileProcessor)",
            "edu.stanford.nlp.util.FilePathProcessor:void processPath(java.io.File,java.io.FileFilter,edu.stanford.nlp.util.FileProcessor)",
            "edu.stanford.nlp.util.FilePathProcessor:void processPath(java.lang.String,java.lang.String,boolean,edu.stanford.nlp.util.FileProcessor)"
        ]
    },
    "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:edu.stanford.nlp.trees.Tree primeNextTree()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:void <init>(edu.stanford.nlp.trees.DiskTreebank)",
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:edu.stanford.nlp.trees.Tree next()"
        ]
    },
    "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:void <init>(edu.stanford.nlp.trees.DiskTreebank)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:void <init>(edu.stanford.nlp.trees.DiskTreebank,edu.stanford.nlp.trees.DiskTreebank$1)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:edu.stanford.nlp.pipeline.Annotation read(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.pipeline.Annotation parse(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.TregexPattern:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.MemoryTreebank:void loadPath(java.lang.String,java.io.FileFilter,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.MemoryTreebank:void loadPath(java.io.File,java.io.FileFilter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Treebank:void loadPath(java.io.File,java.lang.String,boolean)",
            "edu.stanford.nlp.trees.Treebank:void loadPath(java.lang.String,java.io.FileFilter)",
            "edu.stanford.nlp.trees.Treebank:void loadPath(java.lang.String,java.lang.String,boolean)"
        ]
    },
    "edu.stanford.nlp.util.FilePathProcessor:void processPath(java.io.File,java.lang.String,boolean,edu.stanford.nlp.util.FileProcessor)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.FilePathProcessor:void processPath(java.lang.String,java.lang.String,boolean,edu.stanford.nlp.util.FileProcessor)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:edu.stanford.nlp.trees.Tree next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:java.lang.Object next()"
        ]
    },
    "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:void <init>(edu.stanford.nlp.trees.DiskTreebank,edu.stanford.nlp.trees.DiskTreebank$1)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.DiskTreebank:java.util.Iterator iterator()"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.pipeline.Annotation parse(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.ACEMentionExtractor:edu.stanford.nlp.dcoref.Document nextDoc()",
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.Treebank:void loadPath(java.io.File,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Treebank:void loadPath(java.io.File)"
        ]
    },
    "edu.stanford.nlp.trees.Treebank:void loadPath(java.lang.String,java.io.FileFilter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.io.TreeTaggedFileReader:void <init>(edu.stanford.nlp.tagger.io.TaggedFileRecord)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.TreebankAnnotator:java.util.List getTrees(java.lang.String,int,int,int,int)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.DiskTreebank makeSecondaryTreebank(java.lang.String,edu.stanford.nlp.parser.lexparser.Options,java.io.FileFilter)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:edu.stanford.nlp.trees.Treebank makeTreebank(java.lang.String,edu.stanford.nlp.parser.lexparser.Options,java.io.FileFilter)",
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:java.util.Set getEnglishSplitCategories(java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Treebank makeTreebank(java.lang.String,edu.stanford.nlp.parser.lexparser.Options,java.io.FileFilter)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.Treebank:void loadPath(java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreeBinarizer:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.tregex.TregexPattern:void extractSubtrees(java.util.List,java.lang.String)",
            "edu.stanford.nlp.trees.tregex.TregexPattern:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreebankAnnotator:java.util.List getTrees(java.lang.String,int,int,int,int)",
            "edu.stanford.nlp.parser.lexparser.TreeBinarizer:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:void tallyTrees(java.util.Collection,double)",
            "edu.stanford.nlp.parser.metrics.LeafAncestorEval:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.TreePrint:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.TransformingTreebank$TransformingTreebankIterator:edu.stanford.nlp.trees.Tree next()",
            "edu.stanford.nlp.parser.metrics.UnlabeledAttachmentEval:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.Collection,double)",
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.metrics.Evalb:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.FilteringTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void saveTrees(java.util.Collection,double,java.util.Collection,double)",
            "edu.stanford.nlp.parser.metrics.TaggingEval:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.TransformingTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:java.util.List getTuningSet(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.FactoredLexicon,edu.stanford.nlp.parser.lexparser.TreebankLangParserParams)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.DiskTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void tune(java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.FilteringTreebank$FilteringTreebankIterator:void primeNext()",
            "edu.stanford.nlp.trees.WordStemmer:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.CompositeTreebank$CompositeTreebankIterator:edu.stanford.nlp.trees.Tree next()",
            "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.Treebank:java.lang.String textualSummary(edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.tagger.io.TreeTaggedFileReader:void findNext()"
        ]
    },
    "edu.stanford.nlp.trees.DiskTreebank:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreebankAnnotator:java.util.List getTrees(java.lang.String,int,int,int,int)",
            "edu.stanford.nlp.parser.lexparser.TreeBinarizer:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.CompositeTreebank$CompositeTreebankIterator:void <init>(java.util.Collection,java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:void tallyTrees(java.util.Collection,double)",
            "edu.stanford.nlp.parser.metrics.LeafAncestorEval:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.TreePrint:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.metrics.UnlabeledAttachmentEval:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.Collection,double)",
            "edu.stanford.nlp.trees.FilteringTreebank:java.util.Iterator iterator()",
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.metrics.Evalb:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.FilteringTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void saveTrees(java.util.Collection,double,java.util.Collection,double)",
            "edu.stanford.nlp.parser.metrics.TaggingEval:void main(java.lang.String[])",
            "edu.stanford.nlp.tagger.io.TreeTaggedFileReader:void <init>(edu.stanford.nlp.tagger.io.TaggedFileRecord)",
            "edu.stanford.nlp.trees.TransformingTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:java.util.List getTuningSet(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.FactoredLexicon,edu.stanford.nlp.parser.lexparser.TreebankLangParserParams)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.DiskTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void tune(java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.WordStemmer:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.Treebank:java.lang.String textualSummary(edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.trees.TransformingTreebank:java.util.Iterator iterator()"
        ]
    },
    "edu.stanford.nlp.dcoref.ACEMentionExtractor:edu.stanford.nlp.dcoref.Document nextDoc()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:double runAndScoreCoref(edu.stanford.nlp.dcoref.SieveCoreferenceSystem,edu.stanford.nlp.dcoref.MentionExtractor,java.util.Properties,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.Treebank:void loadPath(java.io.File)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.LeafAncestorEval:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.Treebank:void loadPath(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.tagger.io.TreeTaggedFileReader:void <init>(edu.stanford.nlp.tagger.io.TaggedFileRecord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.io.TaggedFileRecord:edu.stanford.nlp.tagger.io.TaggedFileReader reader()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.TreebankAnnotator:java.util.List getTrees(java.lang.String,int,int,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreebankAnnotator:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.CNFTransformers:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.DiskTreebank makeSecondaryTreebank(java.lang.String,edu.stanford.nlp.parser.lexparser.Options,java.io.FileFilter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:edu.stanford.nlp.trees.Treebank makeTreebank(java.lang.String,edu.stanford.nlp.parser.lexparser.Options,java.io.FileFilter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:java.util.Set getEnglishSplitCategories(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreebankAnnotator:void <init>(edu.stanford.nlp.parser.lexparser.Options,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Treebank makeTreebank(java.lang.String,edu.stanford.nlp.parser.lexparser.Options,java.io.FileFilter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser trainFromTreebank(java.lang.String,java.io.FileFilter,edu.stanford.nlp.parser.lexparser.Options)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.TreeBinarizer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.TregexPattern:void extractSubtrees(java.util.List,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.TregexPattern:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:void tallyTrees(java.util.Collection,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:java.lang.Object extract(java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:java.lang.Object extract(java.util.Collection,double,java.util.Collection,double)"
        ]
    },
    "edu.stanford.nlp.parser.metrics.LeafAncestorEval:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.TreePrint:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.TransformingTreebank$TransformingTreebankIterator:edu.stanford.nlp.trees.Tree next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TransformingTreebank$TransformingTreebankIterator:java.lang.Object next()"
        ]
    },
    "edu.stanford.nlp.parser.metrics.UnlabeledAttachmentEval:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.Collection,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.Treebank,java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.metrics.Evalb:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.FilteringTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Treebank:int size()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void saveTrees(java.util.Collection,double,java.util.Collection,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void extract(java.util.Collection,double,java.util.Collection,double)"
        ]
    },
    "edu.stanford.nlp.parser.metrics.TaggingEval:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.TransformingTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Treebank:int size()",
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:java.util.Set getSplitCategories(edu.stanford.nlp.trees.Treebank,boolean,int,double,double,edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.trees.Treebank:java.lang.String toString()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.FactoredLexicon:java.util.List getTuningSet(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.FactoredLexicon,edu.stanford.nlp.parser.lexparser.TreebankLangParserParams)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.DiskTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.Treebank:int size()",
            "edu.stanford.nlp.trees.international.french.DybroFrenchHeadFinder:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.tregex.TregexPattern:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:java.util.Set getSplitCategories(edu.stanford.nlp.trees.Treebank,boolean,int,double,double,edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.parser.lexparser.SisterAnnotationStats:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.Treebank:java.lang.String toString()",
            "edu.stanford.nlp.trees.international.french.FrenchHeadFinder:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.machinereading.common.NoPunctuationHeadFinder:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.CollinsHeadFinder:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void tune(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.Treebank,java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.FilteringTreebank$FilteringTreebankIterator:void primeNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.FilteringTreebank$FilteringTreebankIterator:edu.stanford.nlp.trees.Tree next()",
            "edu.stanford.nlp.trees.FilteringTreebank$FilteringTreebankIterator:void <init>(java.util.Iterator,edu.stanford.nlp.util.Filter)"
        ]
    },
    "edu.stanford.nlp.trees.WordStemmer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.CompositeTreebank$CompositeTreebankIterator:edu.stanford.nlp.trees.Tree next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.CompositeTreebank$CompositeTreebankIterator:java.lang.Object next()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.Treebank:java.lang.String textualSummary(edu.stanford.nlp.trees.TreebankLanguagePack)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:double testOnTreebank(edu.stanford.nlp.trees.Treebank)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.trees.Treebank:java.lang.String textualSummary()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.Treebank,java.util.List)"
        ]
    },
    "edu.stanford.nlp.tagger.io.TreeTaggedFileReader:void findNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.io.TreeTaggedFileReader:void <init>(edu.stanford.nlp.tagger.io.TaggedFileRecord)",
            "edu.stanford.nlp.tagger.io.TreeTaggedFileReader:java.util.List next()"
        ]
    },
    "edu.stanford.nlp.trees.CompositeTreebank$CompositeTreebankIterator:void <init>(java.util.Collection,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.CompositeTreebank:java.util.Iterator iterator()"
        ]
    },
    "edu.stanford.nlp.trees.FilteringTreebank:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void tune(java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:void tallyTrees(java.util.Collection,double)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.Collection,double)",
            "edu.stanford.nlp.trees.FilteringTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.trees.FilteringTreebank:java.util.Iterator iterator()",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void saveTrees(java.util.Collection,double,java.util.Collection,double)"
        ]
    },
    "edu.stanford.nlp.trees.TransformingTreebank:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.CompositeTreebank$CompositeTreebankIterator:void <init>(java.util.Collection,java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void tune(java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:void tallyTrees(java.util.Collection,double)",
            "edu.stanford.nlp.trees.TransformingTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.Collection,double)",
            "edu.stanford.nlp.trees.FilteringTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.trees.Treebank:java.lang.String textualSummary(edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.trees.FilteringTreebank:java.util.Iterator iterator()",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void saveTrees(java.util.Collection,double,java.util.Collection,double)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.trees.TransformingTreebank:java.util.Iterator iterator()"
        ]
    },
    "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:double runAndScoreCoref(edu.stanford.nlp.dcoref.SieveCoreferenceSystem,edu.stanford.nlp.dcoref.MentionExtractor,java.util.Properties,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void main(java.lang.String[])",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void optimizeSieveOrdering(edu.stanford.nlp.dcoref.MentionExtractor,java.util.Properties,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.Treebank:void loadPath(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.TaggingEval:void main(java.lang.String[])",
            "edu.stanford.nlp.tagger.io.TreeTaggedFileReader:void <init>(edu.stanford.nlp.tagger.io.TaggedFileRecord)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.DiskTreebank makeSecondaryTreebank(java.lang.String,edu.stanford.nlp.parser.lexparser.Options,java.io.FileFilter)",
            "edu.stanford.nlp.trees.TreePrint:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:edu.stanford.nlp.trees.Treebank makeTreebank(java.lang.String,edu.stanford.nlp.parser.lexparser.Options,java.io.FileFilter)",
            "edu.stanford.nlp.parser.metrics.UnlabeledAttachmentEval:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.TransformingTreebank:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.CollinsHeadFinder:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.international.french.DybroFrenchHeadFinder:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.GrammaticalStructure:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.WordStemmer:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.SisterAnnotationStats:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.MemoryTreebank:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.metrics.Evalb:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.international.french.FrenchHeadFinder:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Treebank makeTreebank(java.lang.String,edu.stanford.nlp.parser.lexparser.Options,java.io.FileFilter)",
            "edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.machinereading.common.NoPunctuationHeadFinder:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.tagger.io.TaggedFileRecord:edu.stanford.nlp.tagger.io.TaggedFileReader reader()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TestClassifier:void test(edu.stanford.nlp.tagger.maxent.TaggerConfig,java.lang.String,edu.stanford.nlp.tagger.maxent.MaxentTagger)",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.TreebankAnnotator:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.CNFTransformers:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.TreebankAnnotator:void <init>(edu.stanford.nlp.parser.lexparser.Options,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreebankAnnotator:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.CNFTransformers:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser trainFromTreebank(java.lang.String,java.io.FileFilter,edu.stanford.nlp.parser.lexparser.Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:java.lang.Object extract(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.Treebank,java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:java.lang.Object extract(java.util.Collection,double,java.util.Collection,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.Treebank,java.util.List)"
        ]
    },
    "edu.stanford.nlp.trees.TransformingTreebank$TransformingTreebankIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void tune(java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:void tallyTrees(java.util.Collection,double)",
            "edu.stanford.nlp.trees.FilteringTreebank$FilteringTreebankIterator:void primeNext()",
            "edu.stanford.nlp.trees.TransformingTreebank$TransformingTreebankIterator:edu.stanford.nlp.trees.Tree next()",
            "edu.stanford.nlp.trees.TransformingTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.trees.CompositeTreebank$CompositeTreebankIterator:edu.stanford.nlp.trees.Tree next()",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.Collection,double)",
            "edu.stanford.nlp.trees.FilteringTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.trees.Treebank:java.lang.String textualSummary(edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void saveTrees(java.util.Collection,double,java.util.Collection,double)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.Collection,java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.Treebank,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser trainFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.Treebank:int size()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.DiskTreebank makeSecondaryTreebank(java.lang.String,edu.stanford.nlp.parser.lexparser.Options,java.io.FileFilter)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Treebank makeTreebank(java.lang.String,edu.stanford.nlp.parser.lexparser.Options,java.io.FileFilter)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.Treebank,java.util.List)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void saveTrees(java.util.Collection,double,java.util.Collection,double)",
            "edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void extract(java.util.Collection,double,java.util.Collection,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.Treebank,java.util.List)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void extract(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:java.util.Set getSplitCategories(edu.stanford.nlp.trees.Treebank,boolean,int,double,double,edu.stanford.nlp.trees.TreebankLanguagePack)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:java.util.Set getSplitCategories(edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter getSegmenterDataFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)"
        ]
    },
    "edu.stanford.nlp.trees.Treebank:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Pair:void save(java.io.DataOutputStream)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.french.DybroFrenchHeadFinder:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.SisterAnnotationStats:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.french.FrenchHeadFinder:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.common.NoPunctuationHeadFinder:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.CollinsHeadFinder:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.FilteringTreebank$FilteringTreebankIterator:edu.stanford.nlp.trees.Tree next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.FilteringTreebank$FilteringTreebankIterator:java.lang.Object next()"
        ]
    },
    "edu.stanford.nlp.trees.FilteringTreebank$FilteringTreebankIterator:void <init>(java.util.Iterator,edu.stanford.nlp.util.Filter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.FilteringTreebank:java.util.Iterator iterator()"
        ]
    },
    "edu.stanford.nlp.trees.CompositeTreebank$CompositeTreebankIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TransformingTreebank$TransformingTreebankIterator:edu.stanford.nlp.trees.Tree next()",
            "edu.stanford.nlp.trees.TransformingTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.trees.CompositeTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:double testOnTreebank(edu.stanford.nlp.trees.Treebank)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.Treebank:java.lang.String textualSummary()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.TaggingEval:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.metrics.LeafAncestorEval:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.metrics.UnlabeledAttachmentEval:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter getSegmenterDataFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.parser.metrics.Evalb:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.tagger.io.TreeTaggedFileReader:java.util.List next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.io.TreeTaggedFileReader:java.lang.Object next()"
        ]
    },
    "edu.stanford.nlp.trees.CompositeTreebank:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TransformingTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.trees.CompositeTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.trees.TransformingTreebank:java.util.Iterator iterator()"
        ]
    },
    "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void optimizeSieveOrdering(edu.stanford.nlp.dcoref.MentionExtractor,java.util.Properties,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.TransformingTreebank:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.MemoryTreebank:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.TestClassifier:void test(edu.stanford.nlp.tagger.maxent.TaggerConfig,java.lang.String,edu.stanford.nlp.tagger.maxent.MaxentTagger)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TestClassifier:void <init>(edu.stanford.nlp.tagger.maxent.TaggerConfig,edu.stanford.nlp.tagger.maxent.MaxentTagger)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger(edu.stanford.nlp.tagger.maxent.TaggerConfig)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.Collection,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.Treebank,java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser trainFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser trainFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void extract(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.Treebank,java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:java.util.Set getSplitCategories(edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.trees.TreebankLanguagePack)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:java.util.Set getEnglishSplitCategories(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter getSegmenterDataFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void <init>(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)"
        ]
    },
    "edu.stanford.nlp.util.Pair:void save(java.io.DataOutputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.FilteringTreebank$FilteringTreebankIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void tune(java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:void tallyTrees(java.util.Collection,double)",
            "edu.stanford.nlp.trees.FilteringTreebank$FilteringTreebankIterator:void primeNext()",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.Collection,double)",
            "edu.stanford.nlp.trees.FilteringTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void saveTrees(java.util.Collection,double,java.util.Collection,double)"
        ]
    },
    "edu.stanford.nlp.trees.CompositeTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:java.util.Set getSplitCategories(edu.stanford.nlp.trees.Treebank,boolean,int,double,double,edu.stanford.nlp.trees.TreebankLanguagePack)"
        ]
    },
    "edu.stanford.nlp.tagger.io.TreeTaggedFileReader:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TestClassifier:void test(edu.stanford.nlp.tagger.maxent.TaggerConfig,java.lang.String,edu.stanford.nlp.tagger.maxent.MaxentTagger)",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger(java.lang.Iterable,java.io.BufferedWriter,edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TestClassifier:void <init>(edu.stanford.nlp.tagger.maxent.TaggerConfig,edu.stanford.nlp.tagger.maxent.MaxentTagger)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTest(edu.stanford.nlp.tagger.maxent.TaggerConfig)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger(edu.stanford.nlp.tagger.maxent.TaggerConfig)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser trainFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser trainFromTreebank(java.lang.String,java.io.FileFilter,edu.stanford.nlp.parser.lexparser.Options)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void <init>(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger(java.lang.Iterable,java.io.BufferedWriter,edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger(java.io.BufferedReader,java.io.BufferedWriter,java.lang.String,edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle)",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger()"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTest(edu.stanford.nlp.tagger.maxent.TaggerConfig)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger(java.io.BufferedReader,java.io.BufferedWriter,java.lang.String,edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger()"
        ]
    }
}