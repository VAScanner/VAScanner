{
    "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()": {
        "isVulRoot": true,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.french.FrenchXMLTreeReader:void <init>(java.io.Reader,edu.stanford.nlp.trees.TreeFactory,edu.stanford.nlp.trees.TreeNormalizer)"
        ]
    },
    "edu.stanford.nlp.trees.international.french.FrenchXMLTreeReader:void <init>(java.io.Reader,edu.stanford.nlp.trees.TreeFactory,edu.stanford.nlp.trees.TreeNormalizer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.french.FrenchXMLTreeReader:void <init>(java.io.Reader,boolean)"
        ]
    },
    "edu.stanford.nlp.util.XMLUtils:org.w3c.dom.Document readDocumentFromFile(java.lang.String)": {
        "isVulRoot": true,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:org.w3c.dom.Document readDocumentFromFile(java.lang.String)",
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Document createDocument()",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:void processTempEval3File(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.util.XMLUtils:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.time.SUTimeMain:void processTempEval3File(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:org.w3c.dom.Document readDocumentFromFile(java.lang.String)",
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Document createDocument()",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:void processTempEval3(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.util.XMLUtils:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:org.w3c.dom.Document readDocumentFromFile(java.lang.String)",
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Document createDocument()",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getValidatingXmlParser(java.io.File)": {
        "isVulRoot": true,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getValidatingXmlParser(java.io.File)"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.XMLUtils:org.w3c.dom.Document readDocumentFromString(java.lang.String)": {
        "isVulRoot": true,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:org.w3c.dom.Document readDocumentFromString(java.lang.String)"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.XMLUtils:java.util.List getTextContentFromTagsFromFileSAXException(java.io.File,java.lang.String)": {
        "isVulRoot": true,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:java.util.List getTextContentFromTagsFromFileSAXException(java.io.File,java.lang.String)"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.XMLUtils:java.util.List getTextContentFromTagsFromFile(java.io.File,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.util.XMLUtils:java.util.List getTextContentFromTagsFromFile(java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:java.util.List getTextContentFromTagsFromFileSAXException(java.io.File,java.lang.String)"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.XMLUtils:java.util.List getTagElementsFromFileSAXException(java.io.File,java.lang.String)": {
        "isVulRoot": true,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:java.util.List getTagElementsFromFileSAXException(java.io.File,java.lang.String)"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.XMLUtils:java.util.List getTagElementsFromFile(java.io.File,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.util.XMLUtils:java.util.List getTagElementsFromFile(java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:java.util.List getTagElementsFromFileSAXException(java.io.File,java.lang.String)"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Document createDocument()": {
        "isVulRoot": true,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Document createDocument()",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:void processTempEval3File(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.time.XMLUtils:void <clinit>()",
            "edu.stanford.nlp.time.SUTimeMain:org.w3c.dom.Document annotationToXmlDocument(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.time.XMLUtils:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Document createDocument()",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.SUTimeMain:org.w3c.dom.Document annotationToXmlDocument(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Document createDocument()",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:java.lang.String textToAnnotatedXml(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Element parseElement(java.lang.String)": {
        "isVulRoot": true,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Element parseElement(java.lang.String)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.Timex:edu.stanford.nlp.time.Timex fromXml(java.lang.String)",
            "edu.stanford.nlp.time.GUTimeAnnotator:void annotate(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.time.HeidelTimeAnnotator:void annotate(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.time.Timex:edu.stanford.nlp.time.Timex fromXml(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Element parseElement(java.lang.String)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.GUTimeAnnotator:void annotate(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Element parseElement(java.lang.String)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.GUTimeAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.time.HeidelTimeAnnotator:void annotate(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Element parseElement(java.lang.String)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.HeidelTimeAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)": {
        "isVulRoot": true,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDomReader:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument parseDocument(java.io.File)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDomReader:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument parseDocument(java.io.File)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument parseDocument(java.lang.String,boolean)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument parseDocument(java.lang.String,boolean,java.lang.String)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDomReader:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.international.french.FrenchXMLTreeReader:void <init>(java.io.Reader,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.french.FrenchXMLTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)"
        ]
    },
    "edu.stanford.nlp.time.SUTimeMain:void processTempEval3(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:org.w3c.dom.Document readDocumentFromFile(java.lang.String)",
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Document createDocument()",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.time.SUTimeMain:java.lang.String textToAnnotatedXml(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Document createDocument()",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:void processTextFile(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.time.SUTimeMain:void processText(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.time.GUTimeAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Element parseElement(java.lang.String)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.HeidelTimeAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Element parseElement(java.lang.String)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument parseDocument(java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:java.util.List readDocument(java.lang.String,edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument parseDocument(java.lang.String,boolean,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:java.util.List readDocument(java.lang.String,edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDomReader:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.french.FrenchXMLTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.french.FrenchXMLTreeReader:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader,java.lang.String)",
            "edu.stanford.nlp.trees.MemoryTreebank:void processFile(java.io.File)",
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:boolean primeNextFile()"
        ]
    },
    "edu.stanford.nlp.time.SUTimeMain:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:org.w3c.dom.Document readDocumentFromFile(java.lang.String)",
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Document createDocument()",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.SUTimeMain:void processTextFile(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Document createDocument()",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.time.SUTimeMain:void processText(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Document createDocument()",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:java.util.List readDocument(java.lang.String,edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:java.util.List readDocument(java.io.File,edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.trees.international.french.FrenchXMLTreeReader:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader)"
        ]
    },
    "edu.stanford.nlp.trees.MemoryTreebank:void processFile(java.io.File)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.FilePathProcessor:void processPath(java.io.File,java.io.FileFilter,edu.stanford.nlp.util.FileProcessor)"
        ]
    },
    "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:boolean primeNextFile()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:edu.stanford.nlp.trees.Tree primeNextTree()",
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:void <init>(edu.stanford.nlp.trees.DiskTreebank)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:java.util.List readDocument(java.io.File,edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:edu.stanford.nlp.pipeline.Annotation read(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.tregex.TregexPattern:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.util.FilePathProcessor:void processPath(java.io.File,java.io.FileFilter,edu.stanford.nlp.util.FileProcessor)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.MemoryTreebank:void loadPath(java.lang.String,java.io.FileFilter,java.lang.String)",
            "edu.stanford.nlp.trees.MemoryTreebank:void loadPath(java.io.File,java.io.FileFilter)",
            "edu.stanford.nlp.util.FilePathProcessor:void processPath(java.io.File,java.lang.String,boolean,edu.stanford.nlp.util.FileProcessor)",
            "edu.stanford.nlp.util.FilePathProcessor:void processPath(java.io.File,java.io.FileFilter,edu.stanford.nlp.util.FileProcessor)",
            "edu.stanford.nlp.util.FilePathProcessor:void processPath(java.lang.String,java.lang.String,boolean,edu.stanford.nlp.util.FileProcessor)"
        ]
    },
    "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:edu.stanford.nlp.trees.Tree primeNextTree()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:void <init>(edu.stanford.nlp.trees.DiskTreebank)",
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:edu.stanford.nlp.trees.Tree next()"
        ]
    },
    "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:void <init>(edu.stanford.nlp.trees.DiskTreebank)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:void <init>(edu.stanford.nlp.trees.DiskTreebank,edu.stanford.nlp.trees.DiskTreebank$1)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:edu.stanford.nlp.pipeline.Annotation read(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.pipeline.Annotation parse(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.TregexPattern:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.MemoryTreebank:void loadPath(java.lang.String,java.io.FileFilter,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.MemoryTreebank:void loadPath(java.io.File,java.io.FileFilter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.FilteringTreebank:void loadPath(java.io.File,java.io.FileFilter)",
            "edu.stanford.nlp.trees.Treebank:void loadPath(java.io.File,java.lang.String,boolean)",
            "edu.stanford.nlp.trees.Treebank:void loadPath(java.lang.String,java.io.FileFilter)",
            "edu.stanford.nlp.trees.Treebank:void loadPath(java.lang.String,java.lang.String,boolean)"
        ]
    },
    "edu.stanford.nlp.util.FilePathProcessor:void processPath(java.io.File,java.lang.String,boolean,edu.stanford.nlp.util.FileProcessor)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.FilePathProcessor:void processPath(java.lang.String,java.lang.String,boolean,edu.stanford.nlp.util.FileProcessor)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:edu.stanford.nlp.trees.Tree next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:java.lang.Object next()"
        ]
    },
    "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:void <init>(edu.stanford.nlp.trees.DiskTreebank,edu.stanford.nlp.trees.DiskTreebank$1)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.DiskTreebank:java.util.Iterator iterator()"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.pipeline.Annotation parse(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.roth.RothCONLL04Reader:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.machinereading.MachineReading:edu.stanford.nlp.pipeline.Annotation loadOrMakeSerializedSentences(java.lang.String,edu.stanford.nlp.ie.machinereading.GenericDataSetReader,java.io.File)",
            "edu.stanford.nlp.dcoref.ACEMentionExtractor:edu.stanford.nlp.dcoref.Document nextDoc()",
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.FilteringTreebank:void loadPath(java.io.File,java.io.FileFilter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.FilteringTreebank:void loadPath(java.io.File,java.io.FileFilter)",
            "edu.stanford.nlp.trees.Treebank:void loadPath(java.lang.String,java.io.FileFilter)",
            "edu.stanford.nlp.trees.Treebank:void loadPath(java.lang.String,java.lang.String,boolean)"
        ]
    },
    "edu.stanford.nlp.trees.Treebank:void loadPath(java.io.File,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.FileTreeModel:void addFileFolder(java.util.EnumMap,java.io.File[])",
            "edu.stanford.nlp.trees.Treebank:void loadPath(java.io.File)"
        ]
    },
    "edu.stanford.nlp.trees.Treebank:void loadPath(java.lang.String,java.io.FileFilter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.io.TreeTaggedFileReader:void <init>(edu.stanford.nlp.tagger.io.TaggedFileRecord)",
            "edu.stanford.nlp.parser.lexparser.TreebankAnnotator:java.util.List getTrees(java.lang.String,int,int,int,int)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.DiskTreebank makeSecondaryTreebank(java.lang.String,edu.stanford.nlp.parser.lexparser.Options,java.io.FileFilter)",
            "edu.stanford.nlp.parser.dvparser.DVParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:edu.stanford.nlp.trees.Treebank makeTreebank(java.lang.String,edu.stanford.nlp.parser.lexparser.Options,java.io.FileFilter)",
            "edu.stanford.nlp.sentiment.SentimentUtils:java.util.List readTreesWithLabels(java.lang.String,java.lang.Class)",
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:java.util.Set getEnglishSplitCategories(java.lang.String)",
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:edu.stanford.nlp.trees.Treebank readTreebank(java.lang.String,java.io.FileFilter)",
            "edu.stanford.nlp.trees.Treebanks:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.dvparser.CacheParseHypotheses:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void main(java.lang.String[])",
            "edu.stanford.nlp.sentiment.SentimentPipeline:java.util.List getAnnotations(edu.stanford.nlp.pipeline.StanfordCoreNLP,edu.stanford.nlp.sentiment.SentimentPipeline$Input,java.lang.String,boolean)",
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Treebank makeTreebank(java.lang.String,edu.stanford.nlp.parser.lexparser.Options,java.io.FileFilter)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.Treebank:void loadPath(java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreeBinarizer:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.tregex.TregexPattern:void extractSubtrees(java.util.List,java.lang.String)",
            "edu.stanford.nlp.trees.tregex.TregexPattern:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.Treebanks:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreebankAnnotator:java.util.List getTrees(java.lang.String,int,int,int,int)",
            "edu.stanford.nlp.trees.Treebanks:void runTiming(edu.stanford.nlp.trees.Treebank)",
            "edu.stanford.nlp.parser.lexparser.TreeBinarizer:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.NERFeatureFactory:java.util.Collection featuresC(edu.stanford.nlp.util.PaddedList,int)",
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:void tallyTrees(java.util.Collection,double)",
            "edu.stanford.nlp.parser.metrics.LeafAncestorEval:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.TreePrint:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.TransformingTreebank$TransformingTreebankIterator:edu.stanford.nlp.trees.Tree next()",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void triggerAllHooks(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.parser.metrics.UnlabeledAttachmentEval:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.Collection,double)",
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:void main(java.lang.String[])",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Iterable)",
            "edu.stanford.nlp.parser.metrics.Evalb:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.FilteringTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void saveTrees(java.util.Collection,double,java.util.Collection,double)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processEdge(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.parser.metrics.TaggingEval:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.Treebanks:void printPunct(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.TreebankLanguagePack,java.io.PrintWriter)",
            "edu.stanford.nlp.trees.TransformingTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.trees.EnglishPTBTreebankCorrector:edu.stanford.nlp.trees.MemoryTreebank transformTrees(edu.stanford.nlp.trees.Treebank)",
            "edu.stanford.nlp.parser.nndep.Classifier$CostFunction:edu.stanford.nlp.parser.nndep.Classifier$Cost process(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processHook(edu.stanford.nlp.parser.lexparser.Hook)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.DiskTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void triggerHooks(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void tune(java.util.Collection)",
            "edu.stanford.nlp.trees.FilteringTreebank$FilteringTreebankIterator:void primeNext()",
            "edu.stanford.nlp.trees.CompositeTreebank$CompositeTreebankIterator:edu.stanford.nlp.trees.Tree next()",
            "edu.stanford.nlp.trees.WordStemmer:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.Treebank:void decimate(java.io.Writer,java.io.Writer,java.io.Writer)",
            "edu.stanford.nlp.trees.Treebanks:void sentenceLengths(edu.stanford.nlp.trees.Treebank,java.lang.String,java.lang.String,java.io.PrintWriter)",
            "edu.stanford.nlp.trees.Treebank:java.lang.String textualSummary(edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams:void main(java.lang.String[])",
            "edu.stanford.nlp.tagger.io.TreeTaggedFileReader:void findNext()",
            "edu.stanford.nlp.naturalli.ClauseSplitter:boolean lambda$null$108(edu.stanford.nlp.naturalli.OpenIE,java.util.Collection,java.util.List,edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$Featurizer,java.util.Optional,edu.stanford.nlp.classify.WeightedDataset,edu.stanford.nlp.util.Triple)"
        ]
    },
    "edu.stanford.nlp.trees.DiskTreebank:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreebankAnnotator:java.util.List getTrees(java.lang.String,int,int,int,int)",
            "edu.stanford.nlp.trees.CompositeTreebank$CompositeTreebankIterator:void <init>(java.util.Collection,java.util.Collection)",
            "edu.stanford.nlp.trees.Treebanks:void runTiming(edu.stanford.nlp.trees.Treebank)",
            "edu.stanford.nlp.parser.lexparser.TreeBinarizer:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.NERFeatureFactory:java.util.Collection featuresC(edu.stanford.nlp.util.PaddedList,int)",
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:void tallyTrees(java.util.Collection,double)",
            "edu.stanford.nlp.parser.metrics.LeafAncestorEval:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.TreePrint:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void triggerAllHooks(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.parser.metrics.UnlabeledAttachmentEval:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.Collection,double)",
            "edu.stanford.nlp.trees.FilteringTreebank:java.util.Iterator iterator()",
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:void main(java.lang.String[])",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Iterable)",
            "edu.stanford.nlp.parser.metrics.Evalb:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.FilteringTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void saveTrees(java.util.Collection,double,java.util.Collection,double)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processEdge(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.parser.metrics.TaggingEval:void main(java.lang.String[])",
            "edu.stanford.nlp.tagger.io.TreeTaggedFileReader:void <init>(edu.stanford.nlp.tagger.io.TaggedFileRecord)",
            "edu.stanford.nlp.trees.Treebanks:void printPunct(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.TreebankLanguagePack,java.io.PrintWriter)",
            "edu.stanford.nlp.trees.TransformingTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.trees.EnglishPTBTreebankCorrector:edu.stanford.nlp.trees.MemoryTreebank transformTrees(edu.stanford.nlp.trees.Treebank)",
            "edu.stanford.nlp.parser.nndep.Classifier$CostFunction:edu.stanford.nlp.parser.nndep.Classifier$Cost process(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processHook(edu.stanford.nlp.parser.lexparser.Hook)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.DiskTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void triggerHooks(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void tune(java.util.Collection)",
            "edu.stanford.nlp.trees.WordStemmer:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.Treebank:void decimate(java.io.Writer,java.io.Writer,java.io.Writer)",
            "edu.stanford.nlp.trees.Treebanks:void sentenceLengths(edu.stanford.nlp.trees.Treebank,java.lang.String,java.lang.String,java.io.PrintWriter)",
            "edu.stanford.nlp.trees.Treebank:java.lang.String textualSummary(edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.TransformingTreebank:java.util.Iterator iterator()",
            "edu.stanford.nlp.naturalli.ClauseSplitter:boolean lambda$null$108(edu.stanford.nlp.naturalli.OpenIE,java.util.Collection,java.util.List,edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$Featurizer,java.util.Optional,edu.stanford.nlp.classify.WeightedDataset,edu.stanford.nlp.util.Triple)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.roth.RothCONLL04Reader:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.MachineReading:edu.stanford.nlp.pipeline.Annotation loadOrMakeSerializedSentences(java.lang.String,edu.stanford.nlp.ie.machinereading.GenericDataSetReader,java.io.File)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.MachineReading:java.util.List run()"
        ]
    },
    "edu.stanford.nlp.dcoref.ACEMentionExtractor:edu.stanford.nlp.dcoref.Document nextDoc()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:double runAndScoreCoref(edu.stanford.nlp.dcoref.SieveCoreferenceSystem,edu.stanford.nlp.dcoref.MentionExtractor,java.util.Properties,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.gui.FileTreeModel:void addFileFolder(java.util.EnumMap,java.io.File[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.FilePanel:void loadFiles(java.util.EnumMap,java.io.File[])"
        ]
    },
    "edu.stanford.nlp.trees.Treebank:void loadPath(java.io.File)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.LeafAncestorEval:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.Treebank:void loadPath(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.tagger.io.TreeTaggedFileReader:void <init>(edu.stanford.nlp.tagger.io.TaggedFileRecord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.io.TaggedFileRecord:edu.stanford.nlp.tagger.io.TaggedFileReader reader()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.TreebankAnnotator:java.util.List getTrees(java.lang.String,int,int,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreebankAnnotator:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.CNFTransformers:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.DiskTreebank makeSecondaryTreebank(java.lang.String,edu.stanford.nlp.parser.lexparser.Options,java.io.FileFilter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.dvparser.DVParser:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:edu.stanford.nlp.trees.Treebank makeTreebank(java.lang.String,edu.stanford.nlp.parser.lexparser.Options,java.io.FileFilter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.sentiment.SentimentUtils:java.util.List readTreesWithLabels(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.SentimentUtils:java.util.List readTreesWithPredictedLabels(java.lang.String)",
            "edu.stanford.nlp.sentiment.SentimentUtils:java.util.List readTreesWithGoldLabels(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:java.util.Set getEnglishSplitCategories(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreebankAnnotator:void <init>(edu.stanford.nlp.parser.lexparser.Options,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:edu.stanford.nlp.trees.Treebank readTreebank(java.lang.String,java.io.FileFilter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:void train(java.util.List,edu.stanford.nlp.util.Pair,java.lang.String)",
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:java.util.List readBinarizedTreebank(java.lang.String,java.io.FileFilter)"
        ]
    },
    "edu.stanford.nlp.trees.Treebanks:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.dvparser.CacheParseHypotheses:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sentiment.SentimentPipeline:java.util.List getAnnotations(edu.stanford.nlp.pipeline.StanfordCoreNLP,edu.stanford.nlp.sentiment.SentimentPipeline$Input,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.SentimentPipeline:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Treebank makeTreebank(java.lang.String,edu.stanford.nlp.parser.lexparser.Options,java.io.FileFilter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser trainFromTreebank(java.lang.String,java.io.FileFilter,edu.stanford.nlp.parser.lexparser.Options)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.TreeBinarizer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.TregexPattern:void extractSubtrees(java.util.List,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.TregexPattern:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.Treebanks:void runTiming(edu.stanford.nlp.trees.Treebank)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Treebanks:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.NERFeatureFactory:java.util.Collection featuresC(edu.stanford.nlp.util.PaddedList,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.NERFeatureFactory:java.util.Collection getCliqueFeatures(edu.stanford.nlp.util.PaddedList,int,edu.stanford.nlp.sequences.Clique)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:void tallyTrees(java.util.Collection,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:java.lang.Object extract(java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:java.lang.Object extract(java.util.Collection,double,java.util.Collection,double)"
        ]
    },
    "edu.stanford.nlp.parser.metrics.LeafAncestorEval:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.TreePrint:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.TransformingTreebank$TransformingTreebankIterator:edu.stanford.nlp.trees.Tree next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TransformingTreebank$TransformingTreebankIterator:java.lang.Object next()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void triggerAllHooks(edu.stanford.nlp.parser.lexparser.Edge)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processEdge(edu.stanford.nlp.parser.lexparser.Edge)"
        ]
    },
    "edu.stanford.nlp.parser.metrics.UnlabeledAttachmentEval:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.Collection,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.Treebank,java.util.List)"
        ]
    },
    "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Iterable)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.parser.metrics.Evalb:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.FilteringTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Treebanks:void countTaggings(edu.stanford.nlp.trees.Treebank,java.io.PrintWriter)",
            "edu.stanford.nlp.trees.Treebank:int size()",
            "edu.stanford.nlp.trees.Treebanks:void runTiming(edu.stanford.nlp.trees.Treebank)",
            "edu.stanford.nlp.trees.Treebanks:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void saveTrees(java.util.Collection,double,java.util.Collection,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void extract(java.util.Collection,double,java.util.Collection,double)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processEdge(edu.stanford.nlp.parser.lexparser.Edge)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processItem(edu.stanford.nlp.parser.lexparser.Item)"
        ]
    },
    "edu.stanford.nlp.parser.metrics.TaggingEval:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.Treebanks:void printPunct(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.TreebankLanguagePack,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Treebanks:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.TransformingTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Treebank:int size()",
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:java.util.Set getSplitCategories(edu.stanford.nlp.trees.Treebank,boolean,int,double,double,edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.trees.Treebank:java.lang.String toString()"
        ]
    },
    "edu.stanford.nlp.trees.EnglishPTBTreebankCorrector:edu.stanford.nlp.trees.MemoryTreebank transformTrees(edu.stanford.nlp.trees.Treebank)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Treebanks:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.nndep.Classifier$CostFunction:edu.stanford.nlp.parser.nndep.Classifier$Cost process(edu.stanford.nlp.util.Pair)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.nndep.Classifier$CostFunction:java.lang.Object process(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processHook(edu.stanford.nlp.parser.lexparser.Hook)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser$N5BiLexPCFGParser:void relaxTempHook()",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processItem(edu.stanford.nlp.parser.lexparser.Item)"
        ]
    },
    "edu.stanford.nlp.trees.DiskTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Treebanks:void countTaggings(edu.stanford.nlp.trees.Treebank,java.io.PrintWriter)",
            "edu.stanford.nlp.trees.Treebanks:void runTiming(edu.stanford.nlp.trees.Treebank)",
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:java.util.Set getSplitCategories(edu.stanford.nlp.trees.Treebank,boolean,int,double,double,edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.trees.CollinsHeadFinder:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.Treebanks:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.Treebank:int size()",
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.international.french.DybroFrenchHeadFinder:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.tregex.TregexPattern:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.SisterAnnotationStats:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.international.spanish.SpanishHeadFinder:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.Treebank:java.lang.String toString()",
            "edu.stanford.nlp.trees.international.french.FrenchHeadFinder:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.machinereading.common.NoPunctuationHeadFinder:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void triggerHooks(edu.stanford.nlp.parser.lexparser.Edge)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processEdge(edu.stanford.nlp.parser.lexparser.Edge)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void tune(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.Treebank,java.util.List)"
        ]
    },
    "edu.stanford.nlp.trees.FilteringTreebank$FilteringTreebankIterator:void primeNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.FilteringTreebank$FilteringTreebankIterator:edu.stanford.nlp.trees.Tree next()",
            "edu.stanford.nlp.trees.FilteringTreebank$FilteringTreebankIterator:void <init>(java.util.Iterator,java.util.function.Predicate)"
        ]
    },
    "edu.stanford.nlp.trees.CompositeTreebank$CompositeTreebankIterator:edu.stanford.nlp.trees.Tree next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.CompositeTreebank$CompositeTreebankIterator:java.lang.Object next()"
        ]
    },
    "edu.stanford.nlp.trees.WordStemmer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.Treebank:void decimate(java.io.Writer,java.io.Writer,java.io.Writer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Treebanks:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.Treebanks:void sentenceLengths(edu.stanford.nlp.trees.Treebank,java.lang.String,java.lang.String,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Treebanks:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.Treebank:java.lang.String textualSummary(edu.stanford.nlp.trees.TreebankLanguagePack)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:double testOnTreebank(edu.stanford.nlp.trees.Treebank)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.trees.Treebank:java.lang.String textualSummary()",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.Treebank,java.util.List)"
        ]
    },
    "edu.stanford.nlp.tagger.io.TreeTaggedFileReader:void findNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.io.TreeTaggedFileReader:void <init>(edu.stanford.nlp.tagger.io.TaggedFileRecord)",
            "edu.stanford.nlp.tagger.io.TreeTaggedFileReader:java.util.List next()"
        ]
    },
    "edu.stanford.nlp.naturalli.ClauseSplitter:boolean lambda$null$108(edu.stanford.nlp.naturalli.OpenIE,java.util.Collection,java.util.List,edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$Featurizer,java.util.Optional,edu.stanford.nlp.classify.WeightedDataset,edu.stanford.nlp.util.Triple)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void search(edu.stanford.nlp.ling.IndexedWord,java.util.function.Predicate,edu.stanford.nlp.classify.Classifier,java.util.Map,java.util.function.Function,java.util.Collection,int)"
        ]
    },
    "edu.stanford.nlp.trees.CompositeTreebank$CompositeTreebankIterator:void <init>(java.util.Collection,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.CompositeTreebank:java.util.Iterator iterator()"
        ]
    },
    "edu.stanford.nlp.trees.FilteringTreebank:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Treebanks:void printPunct(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.TreebankLanguagePack,java.io.PrintWriter)",
            "edu.stanford.nlp.trees.Treebanks:void runTiming(edu.stanford.nlp.trees.Treebank)",
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:void tallyTrees(java.util.Collection,double)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void tune(java.util.Collection)",
            "edu.stanford.nlp.trees.Treebank:void decimate(java.io.Writer,java.io.Writer,java.io.Writer)",
            "edu.stanford.nlp.trees.FilteringTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.Collection,double)",
            "edu.stanford.nlp.trees.EnglishPTBTreebankCorrector:edu.stanford.nlp.trees.MemoryTreebank transformTrees(edu.stanford.nlp.trees.Treebank)",
            "edu.stanford.nlp.trees.Treebanks:void sentenceLengths(edu.stanford.nlp.trees.Treebank,java.lang.String,java.lang.String,java.io.PrintWriter)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void saveTrees(java.util.Collection,double,java.util.Collection,double)",
            "edu.stanford.nlp.trees.Treebank:java.lang.String textualSummary(edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.trees.FilteringTreebank:java.util.Iterator iterator()"
        ]
    },
    "edu.stanford.nlp.trees.TransformingTreebank:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.CompositeTreebank$CompositeTreebankIterator:void <init>(java.util.Collection,java.util.Collection)",
            "edu.stanford.nlp.ie.NERFeatureFactory:java.util.Collection featuresC(edu.stanford.nlp.util.PaddedList,int)",
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:void tallyTrees(java.util.Collection,double)",
            "edu.stanford.nlp.trees.TransformingTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void triggerAllHooks(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.Collection,double)",
            "edu.stanford.nlp.parser.nndep.Classifier$CostFunction:edu.stanford.nlp.parser.nndep.Classifier$Cost process(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.trees.FilteringTreebank:java.util.Iterator iterator()",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processHook(edu.stanford.nlp.parser.lexparser.Hook)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void triggerHooks(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Iterable)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void tune(java.util.Collection)",
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:java.util.List binarizeTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.trees.FilteringTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void saveTrees(java.util.Collection,double,java.util.Collection,double)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processEdge(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.trees.Treebank:java.lang.String textualSummary(edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.trees.TransformingTreebank:java.util.Iterator iterator()",
            "edu.stanford.nlp.naturalli.ClauseSplitter:boolean lambda$null$108(edu.stanford.nlp.naturalli.OpenIE,java.util.Collection,java.util.List,edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$Featurizer,java.util.Optional,edu.stanford.nlp.classify.WeightedDataset,edu.stanford.nlp.util.Triple)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.MachineReading:java.util.List run()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.MachineReading:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:double runAndScoreCoref(edu.stanford.nlp.dcoref.SieveCoreferenceSystem,edu.stanford.nlp.dcoref.MentionExtractor,java.util.Properties,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:java.lang.String initializeAndRunCoref(java.util.Properties)",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void optimizeSieveOrdering(edu.stanford.nlp.dcoref.MentionExtractor,java.util.Properties,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.FilePanel:void loadFiles(java.util.EnumMap,java.io.File[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.TregexGUI$3:void run()"
        ]
    },
    "edu.stanford.nlp.trees.Treebank:void loadPath(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.DiskTreebank makeSecondaryTreebank(java.lang.String,edu.stanford.nlp.parser.lexparser.Options,java.io.FileFilter)",
            "edu.stanford.nlp.trees.TreePrint:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.TransformingTreebank:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.metrics.UnlabeledAttachmentEval:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.CollinsHeadFinder:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.international.french.DybroFrenchHeadFinder:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.GrammaticalStructure:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.metrics.Evalb:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.MemoryTreebank:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Treebank makeTreebank(java.lang.String,edu.stanford.nlp.parser.lexparser.Options,java.io.FileFilter)",
            "edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.metrics.TaggingEval:void main(java.lang.String[])",
            "edu.stanford.nlp.tagger.io.TreeTaggedFileReader:void <init>(edu.stanford.nlp.tagger.io.TaggedFileRecord)",
            "edu.stanford.nlp.semgraph.semgrex.SemgrexPattern:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:edu.stanford.nlp.trees.Treebank makeTreebank(java.lang.String,edu.stanford.nlp.parser.lexparser.Options,java.io.FileFilter)",
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:java.util.Iterator treebankIterator(java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.WordStemmer:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.SisterAnnotationStats:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.international.spanish.SpanishHeadFinder:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.international.french.FrenchHeadFinder:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.machinereading.common.NoPunctuationHeadFinder:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.tagger.io.TaggedFileRecord:edu.stanford.nlp.tagger.io.TaggedFileReader reader()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TestClassifier:void test()",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.TreebankAnnotator:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.CNFTransformers:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sentiment.SentimentUtils:java.util.List readTreesWithPredictedLabels(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sentiment.SentimentUtils:java.util.List readTreesWithGoldLabels(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.Evaluate:void main(java.lang.String[])",
            "edu.stanford.nlp.sentiment.SentimentPipeline:java.util.List getAnnotations(edu.stanford.nlp.pipeline.StanfordCoreNLP,edu.stanford.nlp.sentiment.SentimentPipeline$Input,java.lang.String,boolean)",
            "edu.stanford.nlp.sentiment.SentimentTraining:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.TreebankAnnotator:void <init>(edu.stanford.nlp.parser.lexparser.Options,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreebankAnnotator:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.CNFTransformers:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:void train(java.util.List,edu.stanford.nlp.util.Pair,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:java.util.List readBinarizedTreebank(java.lang.String,java.io.FileFilter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:void train(java.util.List,edu.stanford.nlp.util.Pair,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.sentiment.SentimentPipeline:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser trainFromTreebank(java.lang.String,java.io.FileFilter,edu.stanford.nlp.parser.lexparser.Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.NERFeatureFactory:java.util.Collection getCliqueFeatures(edu.stanford.nlp.util.PaddedList,int,edu.stanford.nlp.sequences.Clique)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:java.lang.Object extract(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.Treebank,java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:java.lang.Object extract(java.util.Collection,double,java.util.Collection,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.Treebank,java.util.List)"
        ]
    },
    "edu.stanford.nlp.trees.TransformingTreebank$TransformingTreebankIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.NERFeatureFactory:java.util.Collection featuresC(edu.stanford.nlp.util.PaddedList,int)",
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:void tallyTrees(java.util.Collection,double)",
            "edu.stanford.nlp.trees.TransformingTreebank$TransformingTreebankIterator:edu.stanford.nlp.trees.Tree next()",
            "edu.stanford.nlp.trees.TransformingTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void triggerAllHooks(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.Collection,double)",
            "edu.stanford.nlp.parser.nndep.Classifier$CostFunction:edu.stanford.nlp.parser.nndep.Classifier$Cost process(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processHook(edu.stanford.nlp.parser.lexparser.Hook)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void triggerHooks(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Iterable)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void tune(java.util.Collection)",
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:java.util.List binarizeTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.trees.FilteringTreebank$FilteringTreebankIterator:void primeNext()",
            "edu.stanford.nlp.trees.CompositeTreebank$CompositeTreebankIterator:edu.stanford.nlp.trees.Tree next()",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.trees.FilteringTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void saveTrees(java.util.Collection,double,java.util.Collection,double)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processEdge(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.trees.Treebank:java.lang.String textualSummary(edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.naturalli.ClauseSplitter:boolean lambda$null$108(edu.stanford.nlp.naturalli.OpenIE,java.util.Collection,java.util.List,edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$Featurizer,java.util.Optional,edu.stanford.nlp.classify.WeightedDataset,edu.stanford.nlp.util.Triple)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.Collection,java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.Treebank,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser trainFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.IntCounter:void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String)",
            "edu.stanford.nlp.stats.Counters$2:void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String)",
            "edu.stanford.nlp.stats.ClassicCounter:void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String)",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.Object)",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(java.lang.String,java.lang.Object)",
            "edu.stanford.nlp.util.logging.Redwood$RedwoodChannels:void prettyLog(java.lang.String,java.lang.Object)",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.util.Map)",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Iterable)",
            "edu.stanford.nlp.util.ArrayCoreMap:void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String)",
            "edu.stanford.nlp.stats.Counters$1:void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String)",
            "edu.stanford.nlp.util.Pair:void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String)",
            "edu.stanford.nlp.util.Quadruple:void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String)",
            "edu.stanford.nlp.util.Triple:void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String)",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.trees.Treebanks:void countTaggings(edu.stanford.nlp.trees.Treebank,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Treebanks:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.Treebank:int size()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Treebanks:void runTiming(edu.stanford.nlp.trees.Treebank)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.DiskTreebank makeSecondaryTreebank(java.lang.String,edu.stanford.nlp.parser.lexparser.Options,java.io.FileFilter)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.Treebank,java.util.List)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Treebank makeTreebank(java.lang.String,edu.stanford.nlp.parser.lexparser.Options,java.io.FileFilter)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void saveTrees(java.util.Collection,double,java.util.Collection,double)",
            "edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void postMortem()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void extract(java.util.Collection,double,java.util.Collection,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.Treebank,java.util.List)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void extract(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processItem(edu.stanford.nlp.parser.lexparser.Item)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:boolean parse(java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:java.util.Set getSplitCategories(edu.stanford.nlp.trees.Treebank,boolean,int,double,double,edu.stanford.nlp.trees.TreebankLanguagePack)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:java.util.Set getSplitCategories(edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter getSegmenterDataFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)"
        ]
    },
    "edu.stanford.nlp.trees.Treebank:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Pair:void save(java.io.DataOutputStream)",
            "edu.stanford.nlp.patterns.ConstantsAndVariables$ScorePhraseMeasures:int compareTo(java.lang.Object)",
            "edu.stanford.nlp.patterns.surface.Token:boolean equals(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.parser.nndep.Classifier$CostFunction:java.lang.Object process(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser$N5BiLexPCFGParser:void relaxTempHook()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void triggerHooks(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void triggerAllHooks(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void projectHooks(edu.stanford.nlp.parser.lexparser.Edge)"
        ]
    },
    "edu.stanford.nlp.trees.CollinsHeadFinder:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.french.DybroFrenchHeadFinder:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.SisterAnnotationStats:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.spanish.SpanishHeadFinder:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.french.FrenchHeadFinder:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.common.NoPunctuationHeadFinder:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.FilteringTreebank$FilteringTreebankIterator:edu.stanford.nlp.trees.Tree next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.FilteringTreebank$FilteringTreebankIterator:java.lang.Object next()"
        ]
    },
    "edu.stanford.nlp.trees.FilteringTreebank$FilteringTreebankIterator:void <init>(java.util.Iterator,java.util.function.Predicate)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.FilteringTreebank:java.util.Iterator iterator()"
        ]
    },
    "edu.stanford.nlp.trees.CompositeTreebank$CompositeTreebankIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TransformingTreebank$TransformingTreebankIterator:edu.stanford.nlp.trees.Tree next()",
            "edu.stanford.nlp.trees.TransformingTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.trees.CompositeTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:double testOnTreebank(edu.stanford.nlp.trees.Treebank)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.DVParser:void train(java.util.List,java.util.IdentityHashMap,edu.stanford.nlp.trees.Treebank,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.parser.dvparser.DVParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:void trainModel(java.lang.String,edu.stanford.nlp.tagger.common.Tagger,java.util.Random,java.util.List,java.util.List,edu.stanford.nlp.trees.Treebank,int,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.Treebank:java.lang.String textualSummary()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.TaggingEval:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.metrics.LeafAncestorEval:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.metrics.UnlabeledAttachmentEval:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.metrics.Evalb:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter getSegmenterDataFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.trees.Treebanks:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.tagger.io.TreeTaggedFileReader:java.util.List next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.io.TreeTaggedFileReader:java.lang.Object next()"
        ]
    },
    "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void search(edu.stanford.nlp.ling.IndexedWord,java.util.function.Predicate,edu.stanford.nlp.classify.Classifier,java.util.Map,java.util.function.Function,java.util.Collection,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void search(java.util.function.Predicate,edu.stanford.nlp.classify.Classifier,java.util.Map,java.util.function.Function,int)"
        ]
    },
    "edu.stanford.nlp.trees.CompositeTreebank:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TransformingTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.trees.CompositeTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.trees.TransformingTreebank:java.util.Iterator iterator()"
        ]
    },
    "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:java.util.List binarizeTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:java.util.List readBinarizedTreebank(java.lang.String,java.io.FileFilter)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.MachineReading:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:java.lang.String initializeAndRunCoref(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void optimizeSieveOrdering(edu.stanford.nlp.dcoref.MentionExtractor,java.util.Properties,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:java.lang.String initializeAndRunCoref(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.TregexGUI$3:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.TransformingTreebank:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.MemoryTreebank:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.semgrex.SemgrexPattern:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:java.util.Iterator treebankIterator(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TestClassifier:void test()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TestClassifier:void <init>(edu.stanford.nlp.tagger.maxent.MaxentTagger,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger(edu.stanford.nlp.tagger.maxent.TaggerConfig)"
        ]
    },
    "edu.stanford.nlp.sentiment.Evaluate:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sentiment.SentimentTraining:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.Collection,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.Treebank,java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser trainFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser trainFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)"
        ]
    },
    "edu.stanford.nlp.stats.IntCounter:void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.stats.Counters$2:void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.ClassicCounter:void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood$RedwoodChannels:void prettyLog(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.util.logging.PrettyLogger:void log(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood$Util:void prettyLog(java.lang.String,java.lang.Object)",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$RedwoodChannels:void prettyLog(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Object)",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.util.Dictionary)"
        ]
    },
    "edu.stanford.nlp.util.ArrayCoreMap:void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.stats.Counters$1:void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.Pair:void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.util.Quadruple:void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.Triple:void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void postMortem()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void extract(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.Treebank,java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:boolean parse(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:boolean parseInternal(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:java.util.Set getSplitCategories(edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.trees.TreebankLanguagePack)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:java.util.Set getEnglishSplitCategories(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter getSegmenterDataFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void <init>(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)"
        ]
    },
    "edu.stanford.nlp.util.Pair:void save(java.io.DataOutputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.ConstantsAndVariables$ScorePhraseMeasures:int compareTo(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Interval:java.lang.Comparable min(java.lang.Comparable,java.lang.Comparable)",
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:int compare(edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry,edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry)",
            "edu.stanford.nlp.util.Pair$BySecondReversePairComparator:int compare(edu.stanford.nlp.util.Pair,edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.Interval:int getRelationFlags(edu.stanford.nlp.util.Interval)",
            "edu.stanford.nlp.util.Interval:boolean overlaps(edu.stanford.nlp.util.Interval)",
            "edu.stanford.nlp.util.Interval:java.lang.Comparable max(java.lang.Comparable,java.lang.Comparable)",
            "edu.stanford.nlp.util.Interval:edu.stanford.nlp.util.Interval toInterval(java.lang.Comparable,java.lang.Comparable,int)",
            "edu.stanford.nlp.util.Pair$ByFirstReversePairComparator:int compare(edu.stanford.nlp.util.Pair,edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.IntervalTree:void getOverlapping(edu.stanford.nlp.util.IntervalTree$TreeNode,edu.stanford.nlp.util.Interval,java.util.List)",
            "edu.stanford.nlp.util.Pair$BySecondPairComparator:int compare(edu.stanford.nlp.util.Pair,edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.Interval:boolean containsOpen(java.lang.Comparable)",
            "edu.stanford.nlp.util.Pair$ByFirstPairComparator:int compare(edu.stanford.nlp.util.Pair,edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.Triple:int compareTo(edu.stanford.nlp.util.Triple)",
            "edu.stanford.nlp.util.Interval:edu.stanford.nlp.util.Interval$RelType getRelation(edu.stanford.nlp.util.Interval)",
            "edu.stanford.nlp.stats.IntCounter$NaturalComparator:int compare(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.util.IntervalTree:boolean contains(edu.stanford.nlp.util.IntervalTree$TreeNode,edu.stanford.nlp.util.Interval,java.util.function.Function)",
            "edu.stanford.nlp.util.Interval:void <init>(java.lang.Comparable,java.lang.Comparable,int)",
            "edu.stanford.nlp.util.Interval:boolean contains(java.lang.Comparable)",
            "edu.stanford.nlp.util.IntervalTree:boolean overlaps(edu.stanford.nlp.util.IntervalTree$TreeNode,edu.stanford.nlp.util.Interval)",
            "edu.stanford.nlp.util.Pair:int compareTo(edu.stanford.nlp.util.Pair)"
        ]
    },
    "edu.stanford.nlp.patterns.surface.Token:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object get(java.lang.Object)",
            "edu.stanford.nlp.util.Pair:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayUtils:java.lang.Boolean lambda$getSubListIndex$278(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.ArrayMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.Triple:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayCoreMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap$Entry:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.fsm.TransducerGraph$Arc:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.lang.Boolean lambda$labelWords$130(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object remove(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void projectHooks(edu.stanford.nlp.parser.lexparser.Edge)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processEdge(edu.stanford.nlp.parser.lexparser.Edge)"
        ]
    },
    "edu.stanford.nlp.trees.FilteringTreebank$FilteringTreebankIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Treebanks:void printPunct(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.TreebankLanguagePack,java.io.PrintWriter)",
            "edu.stanford.nlp.trees.Treebanks:void runTiming(edu.stanford.nlp.trees.Treebank)",
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:void tallyTrees(java.util.Collection,double)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void tune(java.util.Collection)",
            "edu.stanford.nlp.trees.FilteringTreebank$FilteringTreebankIterator:void primeNext()",
            "edu.stanford.nlp.trees.Treebank:void decimate(java.io.Writer,java.io.Writer,java.io.Writer)",
            "edu.stanford.nlp.trees.FilteringTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.Collection,double)",
            "edu.stanford.nlp.trees.EnglishPTBTreebankCorrector:edu.stanford.nlp.trees.MemoryTreebank transformTrees(edu.stanford.nlp.trees.Treebank)",
            "edu.stanford.nlp.trees.Treebanks:void sentenceLengths(edu.stanford.nlp.trees.Treebank,java.lang.String,java.lang.String,java.io.PrintWriter)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void saveTrees(java.util.Collection,double,java.util.Collection,double)",
            "edu.stanford.nlp.trees.Treebank:java.lang.String textualSummary(edu.stanford.nlp.trees.TreebankLanguagePack)"
        ]
    },
    "edu.stanford.nlp.trees.CompositeTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:java.util.Set getSplitCategories(edu.stanford.nlp.trees.Treebank,boolean,int,double,double,edu.stanford.nlp.trees.TreebankLanguagePack)"
        ]
    },
    "edu.stanford.nlp.parser.dvparser.DVParser:void train(java.util.List,java.util.IdentityHashMap,edu.stanford.nlp.trees.Treebank,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.DVParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:void trainModel(java.lang.String,edu.stanford.nlp.tagger.common.Tagger,java.util.Random,java.util.List,java.util.List,edu.stanford.nlp.trees.Treebank,int,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:void trainModel(java.lang.String,edu.stanford.nlp.tagger.common.Tagger,java.util.Random,java.util.List,java.util.List,edu.stanford.nlp.trees.Treebank,int)"
        ]
    },
    "edu.stanford.nlp.tagger.io.TreeTaggedFileReader:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TestClassifier:void test()",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger(java.lang.Iterable,java.io.BufferedWriter,edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle)"
        ]
    },
    "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void search(java.util.function.Predicate,edu.stanford.nlp.classify.Classifier,java.util.Map,java.util.function.Function,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void search(java.util.function.Predicate)",
            "edu.stanford.nlp.naturalli.ClauseSplitter:void lambda$train$109(edu.stanford.nlp.naturalli.OpenIE,edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$Featurizer,java.util.Optional,edu.stanford.nlp.classify.WeightedDataset,java.util.concurrent.atomic.AtomicInteger,edu.stanford.nlp.util.Pair)"
        ]
    },
    "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.TestClassifier:void <init>(edu.stanford.nlp.tagger.maxent.MaxentTagger,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TestClassifier:void <init>(edu.stanford.nlp.tagger.maxent.MaxentTagger)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger(edu.stanford.nlp.tagger.maxent.TaggerConfig)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser trainFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser trainFromTreebank(java.lang.String,java.io.FileFilter,edu.stanford.nlp.parser.lexparser.Options)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$RedwoodChannels:void prettyLog(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.Redwood$Util:void prettyLog(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.PrettyLogger:void log(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood$Util:void prettyLog(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.util.Dictionary)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:boolean parseInternal(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:boolean parse(java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void <init>(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.util.Interval:java.lang.Comparable min(java.lang.Comparable,java.lang.Comparable)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Interval:edu.stanford.nlp.util.Interval intersect(edu.stanford.nlp.util.Interval)",
            "edu.stanford.nlp.util.Interval:edu.stanford.nlp.util.Interval expand(edu.stanford.nlp.util.Interval)"
        ]
    },
    "edu.stanford.nlp.util.BinaryHeapPriorityQueue:int compare(edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry,edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:void heapifyDown(edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry)",
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:void heapifyUp(edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry)"
        ]
    },
    "edu.stanford.nlp.util.Pair$BySecondReversePairComparator:int compare(edu.stanford.nlp.util.Pair,edu.stanford.nlp.util.Pair)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Pair$BySecondReversePairComparator:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.util.Interval:int getRelationFlags(edu.stanford.nlp.util.Interval)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Interval:boolean isIntervalComparable(edu.stanford.nlp.util.Interval)",
            "edu.stanford.nlp.util.Interval:int compareIntervalOrder(edu.stanford.nlp.util.Interval)"
        ]
    },
    "edu.stanford.nlp.util.Interval:boolean overlaps(edu.stanford.nlp.util.Interval)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.Interval:java.lang.Comparable max(java.lang.Comparable,java.lang.Comparable)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Interval:edu.stanford.nlp.util.Interval intersect(edu.stanford.nlp.util.Interval)",
            "edu.stanford.nlp.util.IntervalTree:boolean remove(edu.stanford.nlp.util.IntervalTree$TreeNode,edu.stanford.nlp.util.HasInterval)",
            "edu.stanford.nlp.util.IntervalTree:void adjustUpwards(edu.stanford.nlp.util.IntervalTree$TreeNode,edu.stanford.nlp.util.IntervalTree$TreeNode)",
            "edu.stanford.nlp.util.IntervalTree:boolean add(edu.stanford.nlp.util.IntervalTree$TreeNode,edu.stanford.nlp.util.HasInterval,double)",
            "edu.stanford.nlp.util.Interval:edu.stanford.nlp.util.Interval expand(edu.stanford.nlp.util.Interval)"
        ]
    },
    "edu.stanford.nlp.util.Interval:edu.stanford.nlp.util.Interval toInterval(java.lang.Comparable,java.lang.Comparable,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression:boolean extractAnnotation(java.util.List,edu.stanford.nlp.pipeline.CoreMapAggregator)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringMatchedExpressionExtractor:edu.stanford.nlp.ling.tokensregex.MatchedExpression apply(java.util.regex.MatchResult)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$BasicSequenceExtractRule:boolean extract(java.util.List,java.util.List)",
            "edu.stanford.nlp.util.Interval:edu.stanford.nlp.util.Interval toInterval(java.lang.Comparable,java.lang.Comparable)",
            "edu.stanford.nlp.ling.tokensregex.matcher.Match:edu.stanford.nlp.util.Interval getInterval()",
            "edu.stanford.nlp.pipeline.ChunkAnnotationUtils:edu.stanford.nlp.util.Interval getChunkOffsetsUsingCharOffsets(java.util.List,int,int)",
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression:boolean extractAnnotation(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.pipeline.CoreMapAggregator)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchResult$GroupToIntervalFunc:edu.stanford.nlp.util.Interval apply(java.util.regex.MatchResult)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequenceMatchedExpressionExtractor:edu.stanford.nlp.ling.tokensregex.MatchedExpression apply(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult)",
            "edu.stanford.nlp.ling.tokensregex.PhraseTable$PhraseMatch:edu.stanford.nlp.util.Interval getInterval()"
        ]
    },
    "edu.stanford.nlp.util.Pair$ByFirstReversePairComparator:int compare(edu.stanford.nlp.util.Pair,edu.stanford.nlp.util.Pair)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Pair$ByFirstReversePairComparator:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.util.IntervalTree:void getOverlapping(edu.stanford.nlp.util.IntervalTree$TreeNode,edu.stanford.nlp.util.Interval,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.IntervalTree:void getOverlapping(edu.stanford.nlp.util.IntervalTree$TreeNode,java.lang.Comparable,java.util.List)",
            "edu.stanford.nlp.util.IntervalTree:java.util.List getOverlapping(edu.stanford.nlp.util.IntervalTree$TreeNode,edu.stanford.nlp.util.Interval)"
        ]
    },
    "edu.stanford.nlp.util.Pair$BySecondPairComparator:int compare(edu.stanford.nlp.util.Pair,edu.stanford.nlp.util.Pair)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Pair$BySecondPairComparator:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.util.Interval:boolean containsOpen(java.lang.Comparable)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Interval:boolean contains(edu.stanford.nlp.util.Interval)"
        ]
    },
    "edu.stanford.nlp.util.Pair$ByFirstPairComparator:int compare(edu.stanford.nlp.util.Pair,edu.stanford.nlp.util.Pair)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Pair$ByFirstPairComparator:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.util.Triple:int compareTo(edu.stanford.nlp.util.Triple)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Triple:int compareTo(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.util.Interval:edu.stanford.nlp.util.Interval$RelType getRelation(edu.stanford.nlp.util.Interval)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression$4:int compare(edu.stanford.nlp.ling.tokensregex.MatchedExpression,edu.stanford.nlp.ling.tokensregex.MatchedExpression)"
        ]
    },
    "edu.stanford.nlp.stats.IntCounter$NaturalComparator:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.IntCounter:java.lang.Object argmax(java.util.Comparator)",
            "edu.stanford.nlp.util.ArrayHeap:int decreaseKey(java.lang.Object)",
            "edu.stanford.nlp.stats.IntCounter:java.lang.Object argmin(java.util.Comparator)",
            "edu.stanford.nlp.util.ArrayHeap:int compare(edu.stanford.nlp.util.ArrayHeap$HeapEntry,edu.stanford.nlp.util.ArrayHeap$HeapEntry)"
        ]
    },
    "edu.stanford.nlp.util.IntervalTree:boolean contains(edu.stanford.nlp.util.IntervalTree$TreeNode,edu.stanford.nlp.util.Interval,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.IntervalTree:boolean contains(edu.stanford.nlp.util.IntervalTree,edu.stanford.nlp.util.Interval,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.util.Interval:void <init>(java.lang.Comparable,java.lang.Comparable,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Interval:edu.stanford.nlp.util.Interval toValidInterval(java.lang.Comparable,java.lang.Comparable,int)",
            "edu.stanford.nlp.util.Interval:edu.stanford.nlp.util.Interval toInterval(java.lang.Comparable,java.lang.Comparable,int)",
            "edu.stanford.nlp.util.FuzzyInterval:void <init>(edu.stanford.nlp.util.FuzzyInterval$FuzzyComparable,edu.stanford.nlp.util.FuzzyInterval$FuzzyComparable,int)"
        ]
    },
    "edu.stanford.nlp.util.Interval:boolean contains(java.lang.Comparable)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Interval:boolean contains(edu.stanford.nlp.util.Interval)"
        ]
    },
    "edu.stanford.nlp.util.IntervalTree:boolean overlaps(edu.stanford.nlp.util.IntervalTree$TreeNode,edu.stanford.nlp.util.Interval)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.IntervalTree:boolean overlaps(edu.stanford.nlp.util.HasInterval)",
            "edu.stanford.nlp.util.IntervalTree:boolean overlaps(edu.stanford.nlp.util.IntervalTree$TreeNode,java.lang.Comparable)"
        ]
    },
    "edu.stanford.nlp.util.Pair:int compareTo(edu.stanford.nlp.util.Pair)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Pair$MutableInternedPair:int compareTo(java.lang.Object)",
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression$4:int compare(edu.stanford.nlp.ling.tokensregex.MatchedExpression,edu.stanford.nlp.ling.tokensregex.MatchedExpression)",
            "edu.stanford.nlp.util.IntervalTree:boolean add(edu.stanford.nlp.util.IntervalTree$TreeNode,edu.stanford.nlp.util.HasInterval,double)",
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression$3:int compare(edu.stanford.nlp.ling.tokensregex.MatchedExpression,edu.stanford.nlp.ling.tokensregex.MatchedExpression)",
            "edu.stanford.nlp.util.Pair:int compareTo(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.util.ArrayMap:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:java.lang.String normalizedNumberStringQuiet(java.lang.String,double,java.lang.String,java.lang.Number)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:java.lang.String toXml(int)",
            "edu.stanford.nlp.time.GUTimeAnnotator:java.util.List toTimexCoreMaps(org.w3c.dom.Element,edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:edu.stanford.nlp.trees.Tree getTree(edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser$Vertex,int,int)",
            "edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve:java.util.List getOrderedAntecedents(int,int,java.util.List,java.util.List,edu.stanford.nlp.dcoref.Mention,int,java.util.Map,edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.semgraph.SemanticGraph:void <init>(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Map)",
            "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:java.lang.String normalizedMoneyString(java.lang.String,java.lang.Number)",
            "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:void <init>(edu.stanford.nlp.parser.shiftreduce.PerceptronModel)",
            "edu.stanford.nlp.semgraph.semgrex.Alignment:java.lang.String toString(java.lang.String)",
            "edu.stanford.nlp.trees.international.negra.NegraHeadFinder:edu.stanford.nlp.trees.Tree determineNonTrivialHead(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.scoref.MetadataWriter:void process(int,edu.stanford.nlp.hcoref.data.Document)",
            "edu.stanford.nlp.wordseg.Sighan2005DocumentReaderAndWriter:void tagLatticeToAnswerLattice(edu.stanford.nlp.fsm.DFSAState,edu.stanford.nlp.fsm.DFSAState,java.lang.StringBuilder,edu.stanford.nlp.util.MutableInteger,int,double,java.util.Map,edu.stanford.nlp.fsm.DFSA,edu.stanford.nlp.ling.CoreLabel[])",
            "edu.stanford.nlp.parser.lexparser.HookChart:java.util.Collection getPostHooks(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.semgraph.semgrex.SemgrexPattern:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.tregex.VariableStrings:java.lang.String getString(java.lang.String)",
            "edu.stanford.nlp.graph.DijkstraShortestPath:java.util.List getShortestPath(edu.stanford.nlp.graph.Graph,java.lang.Object,java.lang.Object,boolean)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceToken:java.lang.String isTriggerWord(java.lang.String)",
            "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String sentenceStringWithMention(int,edu.stanford.nlp.hcoref.data.Document,boolean,boolean)",
            "edu.stanford.nlp.scoref.BestFirstCorefSystem:void runCoref(edu.stanford.nlp.hcoref.data.Document)",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void treatCC(java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.HookChart:java.util.Collection getRealEdgesWithR(int,int)",
            "edu.stanford.nlp.neural.Embedding:org.ejml.simple.SimpleMatrix getUnknownWordVector()",
            "edu.stanford.nlp.parser.lexparser.UnaryGrammar:edu.stanford.nlp.parser.lexparser.UnaryRule getRule(edu.stanford.nlp.parser.lexparser.UnaryRule)",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void collapsePrepAndPoss(java.util.Collection)",
            "edu.stanford.nlp.neural.rnn.TopNGramRecord:java.lang.String toString()",
            "edu.stanford.nlp.dcoref.Dictionaries:java.lang.String lookupCanonicalAmericanStateName(java.lang.String)",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$ALIGNMENT$1:void advance()",
            "edu.stanford.nlp.parser.lexparser.Lattice:void addEdge(edu.stanford.nlp.parser.lexparser.LatticeEdge)",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void printTopK(java.util.logging.Logger,edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.Semantics)",
            "edu.stanford.nlp.graph.DirectedMultiGraph:void deleteDuplicateEdges()",
            "edu.stanford.nlp.international.arabic.Buckwalter:java.lang.String convert(java.lang.String,boolean)",
            "edu.stanford.nlp.tagger.maxent.Dictionary:int getCountThat(java.lang.String)",
            "edu.stanford.nlp.neural.Embedding:org.ejml.simple.SimpleMatrix get(java.lang.String)",
            "edu.stanford.nlp.util.ArrayMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.patterns.InvertedIndexByTokens:void add(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.classify.RVFDataset:void printFullFeatureMatrixWithValues(java.io.PrintWriter)",
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:void printStats()",
            "edu.stanford.nlp.graph.DirectedMultiGraph:java.lang.String toString()",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:java.lang.Object get(java.lang.String)",
            "edu.stanford.nlp.tagger.maxent.Dictionary:edu.stanford.nlp.tagger.maxent.TagCount get(java.lang.String)",
            "edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher:java.lang.String getRelnString(java.lang.String)",
            "edu.stanford.nlp.dcoref.Mention:void setSemantics(edu.stanford.nlp.dcoref.Dictionaries,edu.stanford.nlp.dcoref.Semantics,edu.stanford.nlp.dcoref.MentionExtractor)",
            "edu.stanford.nlp.dcoref.ScorerBCubed:void calculateRecallBall(edu.stanford.nlp.dcoref.Document)",
            "edu.stanford.nlp.dcoref.ScorerMUC:void calculatePrecision(edu.stanford.nlp.dcoref.Document)",
            "edu.stanford.nlp.dcoref.ScorerPairwise:void calculateRecall(edu.stanford.nlp.dcoref.Document)",
            "edu.stanford.nlp.pipeline.CustomAnnotationSerializer:int countMentions(edu.stanford.nlp.hcoref.data.CorefChain)",
            "edu.stanford.nlp.dcoref.Document:edu.stanford.nlp.dcoref.SpeakerInfo getSpeakerInfo(java.lang.String)",
            "edu.stanford.nlp.util.logging.OutputHandler:boolean formatChannel(java.lang.StringBuilder,java.lang.String,java.lang.Object)",
            "edu.stanford.nlp.ie.machinereading.common.StringDictionary:java.lang.String get(int)",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:int addMap(java.util.Map)",
            "edu.stanford.nlp.dcoref.MentionExtractor:java.util.List arrange(edu.stanford.nlp.pipeline.Annotation,java.util.List,java.util.List,java.util.List,boolean)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:int size()",
            "edu.stanford.nlp.util.ThreeDimensionalMap:edu.stanford.nlp.util.TwoDimensionalMap getTwoDimensionalMap(java.lang.Object)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void outputBetas()",
            "edu.stanford.nlp.dcoref.Document:java.lang.String findNextParagraphSpeaker(java.util.List,int,edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.stats.GeneralizedCounter:double getCount(java.lang.Object)",
            "edu.stanford.nlp.ie.NERFeatureFactory:void readGazette(java.io.BufferedReader)",
            "edu.stanford.nlp.maxent.Feature:double getVal(int,int)",
            "edu.stanford.nlp.graph.DirectedMultiGraph:boolean removeEdge(java.lang.Object,java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void buildGrammars()",
            "edu.stanford.nlp.hcoref.Rules:boolean contextIncompatible(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.dcoref.ACEMentionExtractor:void printRawDoc(java.util.List,java.util.List,java.lang.String,boolean)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:edu.stanford.nlp.stats.ClassicCounter getCounter(java.lang.Object)",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:java.util.Set getAllTranslations(java.lang.String)",
            "edu.stanford.nlp.dcoref.CorefChain:java.util.Set getMentionsWithSameHead(edu.stanford.nlp.util.IntPair)",
            "edu.stanford.nlp.dcoref.Document:void processDiscourse(edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.parser.metrics.LeafAncestorEval:boolean validateCommandLine(java.lang.String[])",
            "edu.stanford.nlp.tagger.maxent.Dictionary:int sum(java.lang.String)",
            "edu.stanford.nlp.process.DistSimClassifier:java.lang.String distSimClass(java.lang.String)",
            "edu.stanford.nlp.ling.AnnotationLookup:java.lang.Class getValueType(java.lang.Class)",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:java.util.Map getReverseMap()",
            "edu.stanford.nlp.hcoref.CorefPrinter:boolean isFirstMention(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Map mapTreeToSg(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.hcoref.Rules:int getSpeakerClusterId(edu.stanford.nlp.hcoref.data.Document,java.lang.String)",
            "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader:boolean include(java.util.Map,edu.stanford.nlp.util.Pair,java.lang.String)",
            "edu.stanford.nlp.ie.machinereading.common.StringDictionary:edu.stanford.nlp.ie.machinereading.common.StringDictionary$IndexAndCount getIndexAndCount(java.lang.String)",
            "edu.stanford.nlp.trees.tregex.gui.FileTreeModel:void findLoadableFiles(java.util.EnumMap,java.io.File[],java.util.List,edu.stanford.nlp.trees.tregex.gui.FileTreeNode)",
            "edu.stanford.nlp.util.TwoDimensionalCollectionValuedMap:edu.stanford.nlp.util.CollectionValuedMap getCollectionValuedMap(java.lang.Object)",
            "edu.stanford.nlp.stats.ClassicCounter:double getCount(java.lang.Object)",
            "edu.stanford.nlp.tagger.maxent.Dictionary:int getCountRB(java.lang.String)",
            "edu.stanford.nlp.hcoref.data.CorefChain:java.util.Set getMentionsWithSameHead(edu.stanford.nlp.util.IntPair)",
            "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.Map getOutgoingEdgesMap(java.lang.Object)",
            "edu.stanford.nlp.wordseg.ChineseDictionary:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.crf.LabelDictionary:void increment(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.tagger.maxent.Distsim:edu.stanford.nlp.tagger.maxent.Distsim initLexicon(java.lang.String)",
            "edu.stanford.nlp.dcoref.Mention:edu.stanford.nlp.dcoref.Dictionaries$Gender getGender(edu.stanford.nlp.dcoref.Dictionaries,java.util.List)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void treatCC(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry getEntry(java.lang.Object)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void combineWeights(edu.stanford.nlp.ie.crf.CRFClassifier,double)",
            "edu.stanford.nlp.tagger.maxent.TestSentence:double[] getHistories(java.lang.String[],edu.stanford.nlp.tagger.maxent.History)",
            "edu.stanford.nlp.sequences.Clique:edu.stanford.nlp.sequences.Clique intern(edu.stanford.nlp.sequences.Clique)",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:java.util.Map corefReturnHybridOutput(edu.stanford.nlp.dcoref.Document)",
            "edu.stanford.nlp.util.TwoDimensionalMap:java.util.Map getMap(java.lang.Object)",
            "edu.stanford.nlp.util.Maps:java.util.Map compose(java.util.Map,java.util.Map)",
            "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.List getEdges(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.parser.metrics.UnlabeledAttachmentEval:void main(java.lang.String[])",
            "edu.stanford.nlp.dcoref.Rules:boolean contextIncompatible(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.tagger.maxent.Distsim:java.lang.String getMapping(java.lang.String)",
            "edu.stanford.nlp.tagger.maxent.CTBunkDict:java.util.Set get(java.lang.String)",
            "edu.stanford.nlp.dcoref.Document:void initializeCorefCluster()",
            "edu.stanford.nlp.parser.lexparser.HookChart:java.util.Collection getPreHooks(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.trees.international.pennchinese.RadicalMap:java.util.Set getChars(char)",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$ALIGNMENT:boolean satisfies(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:java.util.Collection findHighestScoringTransitions(edu.stanford.nlp.parser.shiftreduce.State,java.util.List,boolean,int,java.util.List)",
            "edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle:edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle fromShortName(java.lang.String)",
            "edu.stanford.nlp.tagger.maxent.TemplateHash:int[] getXValues(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.parser.metrics.LeafAncestorEval:void display(boolean,java.io.PrintWriter)",
            "edu.stanford.nlp.trees.international.pennchinese.RadicalMap:char getRadical(char)",
            "edu.stanford.nlp.tagger.maxent.ASBCunkDict:java.util.Set get(java.lang.String)",
            "edu.stanford.nlp.stats.GeneralizedCounter:java.util.Set entrySet(java.util.Set,java.lang.Object[],boolean)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:boolean containsKey(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.parser.lexparser.TregexPoweredTreebankParserParams:java.lang.String getAnnotationString(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void remove(java.lang.Object)",
            "edu.stanford.nlp.util.TwoDimensionalCollectionValuedMap:void add(java.lang.Object,java.lang.Object,java.util.Collection)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Expression getExpression(java.lang.String)",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:void collapsePrepAndPoss(java.util.Collection)",
            "edu.stanford.nlp.util.Maps:void putIntoValueCollection(java.util.Map,java.lang.Object,java.lang.Object,edu.stanford.nlp.util.CollectionFactory)",
            "edu.stanford.nlp.patterns.InvertedIndexByTokens:java.util.Set getFileSentIds(edu.stanford.nlp.util.CollectionValuedMap)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:void extractEnumerations(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.trees.UniversalSemanticHeadFinder:void ruleChanges()",
            "edu.stanford.nlp.util.TwoDimensionalMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.trees.TreePrint:void printTreeInternal(edu.stanford.nlp.trees.Tree,java.io.PrintWriter,boolean)",
            "edu.stanford.nlp.pipeline.ChunkAnnotationUtils:void annotateChunk(edu.stanford.nlp.util.CoreMap,java.util.Map)",
            "edu.stanford.nlp.parser.lexparser.HookChart:void insert(java.util.Map,java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:void remove(java.lang.Object)",
            "edu.stanford.nlp.util.ThreeDimensionalMap:java.util.Set thirdKeySet()",
            "edu.stanford.nlp.trees.tregex.tsurgeon.FetchNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:boolean checkClusters(java.util.logging.Logger,java.lang.String,edu.stanford.nlp.dcoref.Document)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void serializeTextClassifier(java.io.PrintWriter)",
            "edu.stanford.nlp.trees.tregex.gui.MatchesPanel:edu.stanford.nlp.util.Pair getSelectedMatch()",
            "edu.stanford.nlp.neural.rnn.TopNGramRecord:java.util.PriorityQueue getPriorityQueue(int,int,java.util.Map)",
            "edu.stanford.nlp.neural.Embedding:org.ejml.simple.SimpleMatrix getEndWordVector()",
            "edu.stanford.nlp.parser.lexparser.ChineseSimWordAvgDepGrammar:java.util.Map getMap(java.lang.String)",
            "edu.stanford.nlp.trees.ModCollinsHeadFinder:void <init>(edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.stats.GeneralizedCounter:double getCount(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.graph.DirectedMultiGraph:boolean removeEdges(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.international.morph.MorphoFeatures:java.lang.String toString()",
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:int setOptionFlag(java.lang.String[],int)",
            "edu.stanford.nlp.time.TimeFormatter$TimeZoneComponent:java.lang.StringBuilder appendRegex0(java.lang.StringBuilder)",
            "edu.stanford.nlp.time.TimeFormatter$TimeZoneIdComponent:org.joda.time.DateTimeZone parseDateTimeZone(java.lang.String)",
            "edu.stanford.nlp.trees.tregex.gui.FileTreeModel:int getChildCount(java.lang.Object)",
            "edu.stanford.nlp.fsm.TransducerGraph:boolean removeArc(edu.stanford.nlp.fsm.TransducerGraph$Arc)",
            "edu.stanford.nlp.parser.lexparser.HookChart:java.util.Collection getEdges(edu.stanford.nlp.parser.lexparser.Hook)",
            "edu.stanford.nlp.util.DeltaMap:boolean containsKey(java.lang.Object)",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void printRawDoc(edu.stanford.nlp.dcoref.Document,boolean)",
            "edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher:edu.stanford.nlp.ling.IndexedWord getNode(java.lang.String)",
            "edu.stanford.nlp.tagger.maxent.TemplateHash:void add(int,edu.stanford.nlp.tagger.maxent.History,int)",
            "edu.stanford.nlp.util.DeltaMap:java.lang.Object get(java.lang.Object)",
            "edu.stanford.nlp.dcoref.Dictionaries:java.util.Set getDemonyms(java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.BaseUnknownWordModelTrainer:edu.stanford.nlp.parser.lexparser.UnknownWordModel finishTraining()",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void rescaleTemporaryBetas(edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.ThreeDimensionalMap)",
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:void processTreeHelper(java.lang.String,java.lang.String,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.fsm.TransducerGraph:java.util.Set getArcsByTargetAndInput(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.wordseg.CorpusChar:java.lang.String getTag(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.fsm.TransducerGraph:edu.stanford.nlp.fsm.TransducerGraph$Arc getArcBySourceAndInput(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.hcoref.data.Mention:void setSemantics(edu.stanford.nlp.hcoref.data.Dictionaries,edu.stanford.nlp.hcoref.data.Semantics)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceRelation getRelation(java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.BaseUnknownWordModel:float scoreGT(java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:edu.stanford.nlp.util.PriorityQueue getCandidates(edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser$Vertex,int)",
            "edu.stanford.nlp.parser.lexparser.AbstractDependencyGrammar:edu.stanford.nlp.parser.lexparser.IntDependency intern(edu.stanford.nlp.parser.lexparser.IntTaggedWord,edu.stanford.nlp.parser.lexparser.IntTaggedWord,boolean,short)",
            "edu.stanford.nlp.pipeline.AnnotatorPool:edu.stanford.nlp.pipeline.Annotator get(java.lang.String)",
            "edu.stanford.nlp.hcoref.Rules:boolean entityIsAcronym(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster)",
            "edu.stanford.nlp.parser.metrics.EvalbByCat:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)",
            "edu.stanford.nlp.time.HeidelTimeAnnotator:java.util.List toTimexCoreMaps(org.w3c.dom.Element,edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.parser.lexparser.ChineseSimWordAvgDepGrammar:double probSimilarWordAvg(edu.stanford.nlp.parser.lexparser.IntDependency)",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void printLogs(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Document,int)",
            "edu.stanford.nlp.tagger.maxent.Dictionary:void save(java.io.DataOutputStream)",
            "edu.stanford.nlp.parser.lexparser.UnaryGrammar:boolean relaxRule(edu.stanford.nlp.parser.lexparser.UnaryRule)",
            "edu.stanford.nlp.time.SUTimeMain:java.util.List updateTimexText(java.util.Map,edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.scoref.StatisticalCorefUtils:void mergeCoreferenceClusters(edu.stanford.nlp.util.Pair,edu.stanford.nlp.hcoref.data.Document)",
            "edu.stanford.nlp.trees.tregex.gui.FileTreeModel:edu.stanford.nlp.trees.tregex.gui.FileTreeNode getChild(java.lang.Object,int)",
            "edu.stanford.nlp.neural.Embedding:org.ejml.simple.SimpleMatrix getStartWordVector()",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void mergeStates()",
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:void setHeadFinder(edu.stanford.nlp.trees.HeadFinder)",
            "edu.stanford.nlp.trees.GrammaticalStructure:edu.stanford.nlp.trees.TreeGraphNode getNodeByIndex(int)",
            "edu.stanford.nlp.hcoref.Preprocessor:void extractGoldClusters(edu.stanford.nlp.hcoref.data.Document)",
            "edu.stanford.nlp.parser.lexparser.UnaryGrammar:double scoreRule(edu.stanford.nlp.parser.lexparser.UnaryRule)",
            "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.List getOutgoingEdges(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayHeap:edu.stanford.nlp.util.ArrayHeap$HeapEntry getEntry(java.lang.Object)",
            "edu.stanford.nlp.dcoref.Rules:int getSpeakerClusterId(edu.stanford.nlp.dcoref.Document,java.lang.String)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:edu.stanford.nlp.ie.machinereading.structure.RelationMention convertAceRelationMention(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceRelationMention,java.lang.String,edu.stanford.nlp.util.CoreMap,java.util.Map)",
            "edu.stanford.nlp.trees.tregex.gui.FileTreeModel:int getIndexOfChild(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.graph.DirectedMultiGraph:boolean isEdge(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.international.arabic.ArabicMorphoFeatureSpecification$ArabicMorphoFeatures:java.lang.String getTag(java.lang.String)",
            "edu.stanford.nlp.tagger.maxent.Distsim:void <init>(java.lang.String)",
            "edu.stanford.nlp.util.TwoDimensionalCollectionValuedMap:void addKey(java.lang.Object)",
            "edu.stanford.nlp.sentiment.ReadSentimentDataset:edu.stanford.nlp.trees.Tree convertTree(java.util.List,java.util.List,java.util.Map,java.util.Map,edu.stanford.nlp.process.PTBEscapingProcessor)",
            "edu.stanford.nlp.hcoref.Rules:boolean sentenceContextIncompatible(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.tagger.maxent.TagCount:int get(java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.RandomWalk:double score(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.pipeline.CoreMapAttributeAggregator:edu.stanford.nlp.pipeline.CoreMapAttributeAggregator getAggregator(java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.BaseUnknownWordModelTrainer:void train(edu.stanford.nlp.ling.TaggedWord,int,double)",
            "edu.stanford.nlp.ie.crf.LabelDictionary:void lock(int,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph deepCopyFromGraphs(java.util.List,java.util.List)",
            "edu.stanford.nlp.util.ThreeDimensionalMap:boolean contains(java.lang.Object,java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:edu.stanford.nlp.semgraph.SemanticGraph resetVerticeOrdering(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader:void writeTabSep(java.io.PrintWriter,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CollectionValuedMap)",
            "edu.stanford.nlp.dcoref.Document:void findTwinMentionsRelaxed()",
            "edu.stanford.nlp.stats.IntCounter:java.lang.String toString(java.text.NumberFormat)",
            "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.Set getParents(java.lang.Object)",
            "edu.stanford.nlp.trees.tregex.TregexMatcher:edu.stanford.nlp.trees.Tree getNode(java.lang.String)",
            "edu.stanford.nlp.parser.metrics.TaggingEval:void main(java.lang.String[])",
            "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.Map getIncomingEdgesMap(java.lang.Object)",
            "edu.stanford.nlp.trees.Dependencies:java.util.Map govToDepMap(java.util.List)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceRelationMention getRelationMention(java.lang.String)",
            "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:void trainModel(java.lang.String,edu.stanford.nlp.tagger.common.Tagger,java.util.Random,java.util.List,java.util.List,edu.stanford.nlp.trees.Treebank,int,java.util.Set)",
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:void getSplitters(double,java.util.Map,java.util.Map,java.util.Map,java.util.Set)",
            "edu.stanford.nlp.trees.MemoryTreebank:void processFile(java.io.File)",
            "edu.stanford.nlp.util.MapList:int size(java.lang.Object)",
            "edu.stanford.nlp.time.SUTimeMain:edu.stanford.nlp.time.SUTimeMain$TimexAttributes findTimex(java.util.Map,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.ChineseUnknownWordModel:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:java.util.Map buildMergeCorrespondence(java.util.List)",
            "edu.stanford.nlp.graph.DirectedMultiGraph:int getInDegree(java.lang.Object)",
            "edu.stanford.nlp.pipeline.CustomAnnotationSerializer:java.util.Map loadCorefChains(java.io.BufferedReader)",
            "edu.stanford.nlp.parser.lexparser.BinaryGrammar:double scoreRule(edu.stanford.nlp.parser.lexparser.BinaryRule)",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.util.Map)",
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.scoref.DocumentExamples extract(int,edu.stanford.nlp.hcoref.data.Document,java.util.Map,edu.stanford.nlp.scoref.Compressor)",
            "edu.stanford.nlp.trees.tregex.gui.FileTreeModel:boolean isLeaf(java.lang.Object)",
            "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Set)",
            "edu.stanford.nlp.ie.machinereading.common.StringDictionary:int get(java.lang.String,boolean)",
            "edu.stanford.nlp.util.HashIndex:int addToIndexUnsafe(java.lang.Object)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void writeMatchedTokensAndSents(java.lang.String,java.util.Map,java.lang.String,edu.stanford.nlp.util.CollectionValuedMap)",
            "edu.stanford.nlp.dcoref.Document:void extractGoldLinks()",
            "edu.stanford.nlp.util.logging.RedirectOutputHandler:void print(java.lang.Object[],java.lang.String)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:edu.stanford.nlp.ie.machinereading.structure.EventMention convertAceEventMention(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEventMention,java.lang.String,edu.stanford.nlp.util.CoreMap,java.util.Map,int)",
            "edu.stanford.nlp.util.DeltaCollectionValuedMap:boolean containsKey(java.lang.Object)",
            "edu.stanford.nlp.tagger.maxent.Dictionary:void addVThatTaking(java.lang.String)",
            "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:void condenseFeatures()",
            "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String printConllOutput(edu.stanford.nlp.hcoref.data.Document,java.util.List,boolean)",
            "edu.stanford.nlp.dcoref.Document:java.lang.String findParagraphSpeaker(java.util.List,int,java.lang.String,int,edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.hcoref.data.CorefChain:void <init>(edu.stanford.nlp.hcoref.data.CorefCluster,java.util.Map)",
            "edu.stanford.nlp.trees.MemoryTreebank:void readSRLFile(java.lang.String)",
            "edu.stanford.nlp.time.SUTimeMain:void processTempEval2(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.ie.NERFeatureFactory:void distSimAnnotate(edu.stanford.nlp.util.PaddedList)",
            "edu.stanford.nlp.tagger.maxent.CtbDict:void readCtbDict(java.lang.String)",
            "edu.stanford.nlp.dcoref.ScorerBCubed:void calculatePrecisionBall(edu.stanford.nlp.dcoref.Document)",
            "edu.stanford.nlp.time.TimeFormatter$TextDateComponent:java.lang.Integer parseValue(java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon:edu.stanford.nlp.stats.Distribution getBackedOffDist(java.util.List)",
            "edu.stanford.nlp.dcoref.Document:void findSpeakers(edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.trees.SemanticHeadFinder:void ruleChanges()",
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void goToNextNodeMatch()",
            "edu.stanford.nlp.neural.rnn.TopNGramRecord:void countTree(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntity getEntity(java.lang.String)",
            "edu.stanford.nlp.time.SUTimeMain:void processTempEval2Tab(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String,java.util.Map)",
            "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:void findCoreferentAntecedent(edu.stanford.nlp.hcoref.data.Mention,int,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.StringBuilder)",
            "edu.stanford.nlp.parser.lexparser.ChineseUnknownWordModelTrainer:void train(edu.stanford.nlp.ling.TaggedWord,int,double)",
            "edu.stanford.nlp.stats.Counters$2:double getCount(java.lang.Object)",
            "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon:void finishTraining()",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:void clean()",
            "edu.stanford.nlp.wordseg.CorpusChar:java.util.Map readDict(java.lang.String)",
            "edu.stanford.nlp.ie.machinereading.common.StringDictionary:int getCount(int)",
            "edu.stanford.nlp.stats.IntCounter:java.lang.String toString(java.text.NumberFormat,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.international.arabic.process.ArabicLexer:java.lang.String normalizeToken(java.lang.String,boolean)",
            "edu.stanford.nlp.fsm.TransducerGraph:edu.stanford.nlp.fsm.TransducerGraph$Arc getArc(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void mergeTransitions(edu.stanford.nlp.trees.Tree,java.util.IdentityHashMap,java.util.IdentityHashMap,java.util.IdentityHashMap,java.util.IdentityHashMap,double[],java.util.Map)",
            "edu.stanford.nlp.util.DeltaCollectionValuedMap:java.util.Collection get(java.lang.Object)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:void lazyNext(edu.stanford.nlp.util.PriorityQueue,edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser$Derivation,int)",
            "edu.stanford.nlp.semgraph.semgrex.Alignment:edu.stanford.nlp.semgraph.semgrex.Alignment patchedAlignment(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.hcoref.data.Dictionaries:java.util.Set getDemonyms(java.lang.String)",
            "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.Set getChildren(java.lang.Object)",
            "edu.stanford.nlp.stats.GeneralizedCounter:double getCount(java.lang.Object,java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.parser.lexparser.Lattice:java.util.List getEdgesOverSpan(int,int)",
            "edu.stanford.nlp.ie.pascal.ISODateInstance:void <init>(edu.stanford.nlp.ie.pascal.ISODateInstance,java.lang.String)",
            "edu.stanford.nlp.simple.Sentence:java.util.Map coref()",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:boolean checkValue()",
            "edu.stanford.nlp.hcoref.data.Document:void extractGoldCorefClusters()",
            "edu.stanford.nlp.scoref.FeatureExtractorRunner:void process(int,edu.stanford.nlp.hcoref.data.Document)",
            "edu.stanford.nlp.parser.lexparser.BaseUnknownWordModel:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,java.lang.String)",
            "edu.stanford.nlp.pipeline.TrueCaseAnnotator:void setTrueCaseText(edu.stanford.nlp.ling.CoreLabel)",
            "edu.stanford.nlp.trees.tregex.Relation:edu.stanford.nlp.trees.tregex.Relation getRelation(java.lang.String,java.util.function.Function,edu.stanford.nlp.trees.HeadFinder)",
            "edu.stanford.nlp.hcoref.data.Document:void extractGoldLinks()",
            "edu.stanford.nlp.trees.GrammaticalStructure:java.lang.String toStringIndex(edu.stanford.nlp.trees.TypedDependency,java.util.Map)",
            "edu.stanford.nlp.dcoref.Rules:boolean entityHaveDifferentLocation(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.util.MapList:java.util.List ensureList(java.lang.Object)",
            "edu.stanford.nlp.util.logging.Redwood:void queueTask(long,java.lang.Runnable)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument parseDocument(java.lang.String,boolean)",
            "edu.stanford.nlp.util.HashIndex:int addToIndex(java.lang.Object)",
            "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String printErrorLogDcoref(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,int,java.lang.String)",
            "edu.stanford.nlp.graph.DirectedMultiGraph:boolean removeVertex(java.lang.Object)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceToken:boolean exists(java.util.Map,java.lang.String)",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:edu.stanford.nlp.trees.GrammaticalRelation determinePrepRelation(java.util.Map,java.util.List,edu.stanford.nlp.trees.TypedDependency,edu.stanford.nlp.trees.TypedDependency,boolean)",
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:void removeBaselineFeature(java.lang.String)",
            "edu.stanford.nlp.util.StringUtils:java.util.Map argsToMap(java.lang.String[],java.util.Map)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntityMention getEntityMention(java.lang.String)",
            "edu.stanford.nlp.time.SUTimeMain:java.util.Map readTimexAttrExts(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.hcoref.Rules:boolean entityHaveDifferentLocation(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.util.TwoDimensionalCollectionValuedMap:void add(java.lang.Object,java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.parser.lexparser.RandomWalk:void train(java.util.Collection)",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void printDiscourseStructure(edu.stanford.nlp.dcoref.Document)",
            "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:void averageModels(java.util.Collection)",
            "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader:boolean include(java.util.Map,edu.stanford.nlp.util.Pair,java.lang.String)",
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void goToNextTreeNodeMatch()",
            "edu.stanford.nlp.ie.NERFeatureFactory:java.util.Collection featuresC(edu.stanford.nlp.util.PaddedList,int)",
            "edu.stanford.nlp.trees.TreePrint:void main(java.lang.String[])",
            "edu.stanford.nlp.patterns.surface.CreatePatterns$CreatePatternsThread:java.lang.Boolean call()",
            "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.List getIncomingEdges(java.lang.Object)",
            "edu.stanford.nlp.hcoref.Preprocessor:void findTwinMentionsRelaxed(edu.stanford.nlp.hcoref.data.Document)",
            "edu.stanford.nlp.util.HashIndex:int indexOf(java.lang.Object)",
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:double[] makeDatumUsingEmbedding(java.util.List,int,java.util.List,edu.stanford.nlp.util.PaddedList,java.util.List,java.util.List)",
            "edu.stanford.nlp.util.StringUtils:java.util.Properties argsToProperties(java.lang.String[],java.util.Map)",
            "edu.stanford.nlp.hcoref.Preprocessor:java.lang.String findParagraphSpeaker(edu.stanford.nlp.hcoref.data.Document,java.util.List,int,java.lang.String,int,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.fsm.TransducerGraph:java.util.Set getArcsByTarget(java.lang.Object)",
            "edu.stanford.nlp.parser.lexparser.RandomWalk:void <init>(java.util.Collection,int)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEvent getEvent(java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:void lazyKthBest(edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser$Vertex,int,int)",
            "edu.stanford.nlp.trees.tregex.gui.FileTreeModel:edu.stanford.nlp.trees.tregex.gui.FileTreeNode addToMap(java.io.File,edu.stanford.nlp.trees.tregex.gui.FileTreeNode)",
            "edu.stanford.nlp.tagger.maxent.TemplateHash:void addPrev(int,edu.stanford.nlp.tagger.maxent.History)",
            "edu.stanford.nlp.hcoref.data.CorefChain:java.util.Set getMentionsWithSameHead(int,int)",
            "edu.stanford.nlp.dcoref.CorefChain:void <init>(edu.stanford.nlp.dcoref.CorefCluster,java.util.Map)",
            "edu.stanford.nlp.ie.pascal.ISODateInstance:void incrementDay(edu.stanford.nlp.ie.pascal.ISODateInstance,edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.optimization.GoldenSectionLineSearch:void dumpMemory()",
            "edu.stanford.nlp.dcoref.ScorerMUC:void calculateRecall(edu.stanford.nlp.dcoref.Document)",
            "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String printErrorLog(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.stats.Counter,int,edu.stanford.nlp.hcoref.data.Dictionaries,edu.stanford.nlp.hcoref.sieve.RFSieve)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEventMention getEventMention(java.lang.String)",
            "edu.stanford.nlp.tagger.maxent.TagCount:java.lang.String getFirstTag()",
            "edu.stanford.nlp.trees.Dependencies:java.util.Set getGovMaxChains(java.util.Map,edu.stanford.nlp.ling.IndexedWord,int)",
            "edu.stanford.nlp.tagger.maxent.ReadDataTagged:void loadFile(edu.stanford.nlp.tagger.io.TaggedFileReader,java.util.Map)",
            "edu.stanford.nlp.sentiment.ReadSentimentDataset:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEventMention:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntityMention getArg(java.lang.String)",
            "edu.stanford.nlp.stats.IntCounter:int getIntCount(java.lang.Object)",
            "edu.stanford.nlp.tagger.maxent.CTBunkDict:void readCTBunkDict(java.lang.String)",
            "edu.stanford.nlp.util.TwoDimensionalMap:void <init>(edu.stanford.nlp.util.TwoDimensionalMap)",
            "edu.stanford.nlp.hcoref.sieve.RFSieve:edu.stanford.nlp.ling.RVFDatum extractDatum(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,int,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.String)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:edu.stanford.nlp.stats.IntCounter totalCounts()",
            "edu.stanford.nlp.parser.lexparser.ChineseSimWordAvgDepGrammar:double probTBwithSimWords(edu.stanford.nlp.parser.lexparser.IntDependency)",
            "edu.stanford.nlp.parser.lexparser.ChineseUnknownWordModelTrainer:edu.stanford.nlp.parser.lexparser.UnknownWordModel finishTraining()",
            "edu.stanford.nlp.tagger.maxent.Dictionary:java.lang.String getFirstTag(java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:java.util.List getKBestParses(int)",
            "edu.stanford.nlp.parser.metrics.EvalbByCat:java.util.Map makeObjectsByCat(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.stats.GeneralizedCounter:edu.stanford.nlp.stats.GeneralizedCounter conditionalizeHelper(java.lang.Object)",
            "edu.stanford.nlp.tagger.maxent.TemplateHash:void addPositions(int,int,edu.stanford.nlp.tagger.maxent.FeatureKey)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void clean()",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:int size()",
            "edu.stanford.nlp.dcoref.MUCMentionExtractor:edu.stanford.nlp.dcoref.Document nextDoc()",
            "edu.stanford.nlp.util.MapList:java.lang.Object get(java.lang.Object,int)",
            "edu.stanford.nlp.parser.lexparser.HookChart:java.util.Collection getRealEdgesWithL(int,int)",
            "edu.stanford.nlp.parser.lexparser.GrammarCompactor:edu.stanford.nlp.fsm.TransducerGraph getGraphFromMap(java.util.Map,java.lang.String)",
            "edu.stanford.nlp.tagger.maxent.Dictionary:int getCountIn(java.lang.String)",
            "edu.stanford.nlp.hcoref.data.Dictionaries:java.lang.String lookupCanonicalAmericanStateName(java.lang.String)",
            "edu.stanford.nlp.trees.tregex.TregexPattern:void main(java.lang.String[])",
            "edu.stanford.nlp.dcoref.Rules:boolean sentenceContextIncompatible(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.pipeline.CleanXmlAnnotator:java.util.Set annotateWithTag(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.XMLUtils$XMLTag,edu.stanford.nlp.util.CollectionValuedMap,java.util.Map,java.util.Collection,java.util.Map)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:void constructSentenceRelationMentions()",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:edu.stanford.nlp.stats.IntCounter getCounter(java.lang.Object)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:int recalculateTemporaryBetas(edu.stanford.nlp.trees.Tree,double[],int,java.util.IdentityHashMap,java.util.IdentityHashMap,java.util.Map,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.ThreeDimensionalMap)",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:java.util.List filterMentionsWithSingletonClusters(edu.stanford.nlp.dcoref.Document,java.util.List)",
            "edu.stanford.nlp.pipeline.SentimentAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.dcoref.ScorerPairwise:void calculatePrecision(edu.stanford.nlp.dcoref.Document)",
            "edu.stanford.nlp.parser.metrics.LeafAncestorEval:void updateCatAverages(java.util.List,double)",
            "edu.stanford.nlp.fsm.TransducerGraph:boolean addArc(edu.stanford.nlp.fsm.TransducerGraph$Arc)",
            "edu.stanford.nlp.fsm.TransducerGraph:java.util.Set getArcsBySource(java.lang.Object)",
            "edu.stanford.nlp.dcoref.Document:void extractGoldCorefClusters()",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:void matchCharSeqs(java.lang.String)",
            "edu.stanford.nlp.hcoref.data.Document:void mergeAcronymCache(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Value getValue(java.lang.String)",
            "edu.stanford.nlp.dcoref.ScorerBCubed:void calculateRecallBconll(edu.stanford.nlp.dcoref.Document)",
            "edu.stanford.nlp.hcoref.Preprocessor:boolean findSubject(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,int,int)",
            "edu.stanford.nlp.process.Americanize:java.lang.String americanize(java.lang.String,boolean)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument parseDocument(java.lang.String,boolean,java.lang.String)",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:void main(java.lang.String[])",
            "edu.stanford.nlp.dcoref.Rules:boolean entityPersonDisagree(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.graph.DirectedMultiGraph$EdgeIterator:void remove()",
            "edu.stanford.nlp.tagger.maxent.Dictionary:void fillWordTagCounts(java.util.Map)",
            "edu.stanford.nlp.international.morph.MorphoFeatures:java.lang.String getValue(edu.stanford.nlp.international.morph.MorphoFeatureSpecification$MorphoFeatureType)",
            "edu.stanford.nlp.parser.lexparser.Interner:java.lang.Object intern(java.lang.Object)",
            "edu.stanford.nlp.ling.tokensregex.ComplexNodePattern:void populate(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map,java.util.function.Function)",
            "edu.stanford.nlp.hcoref.data.Mention:edu.stanford.nlp.hcoref.data.Dictionaries$Gender getGender(edu.stanford.nlp.hcoref.data.Dictionaries,java.util.List)",
            "edu.stanford.nlp.pipeline.AnnotatorPool:boolean register(java.lang.String,edu.stanford.nlp.pipeline.AnnotatorFactory)",
            "edu.stanford.nlp.dcoref.Document:boolean findSpeaker(int,int,java.util.List,int,int,edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.graph.DirectedMultiGraph:void add(java.lang.Object,java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.graph.DirectedMultiGraph:int getOutDegree(java.lang.Object)",
            "edu.stanford.nlp.classify.GeneralizedExpectationObjectiveFunction:void computeEmpiricalStatistics(java.util.List)",
            "edu.stanford.nlp.hcoref.data.Document:boolean isCoref(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)",
            "edu.stanford.nlp.util.logging.Redwood:void endThreads(java.lang.String)",
            "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:void reportWeights(edu.stanford.nlp.classify.LinearClassifier,java.lang.String)",
            "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader:void writeTabSep(java.io.PrintWriter,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CollectionValuedMap)",
            "edu.stanford.nlp.hcoref.data.Document:edu.stanford.nlp.hcoref.data.SpeakerInfo getSpeakerInfo(java.lang.String)",
            "edu.stanford.nlp.tagger.maxent.TTags:void save(java.io.DataOutputStream,java.util.Map)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void trainUnannotated(java.util.List,double)",
            "edu.stanford.nlp.hcoref.sieve.Sieve:boolean isReallyCoref(edu.stanford.nlp.hcoref.data.Document,int,int)",
            "edu.stanford.nlp.trees.tregex.gui.MatchesPanel:void setMatches(java.util.List,java.util.Map)",
            "edu.stanford.nlp.time.TimeFormatter$TimeZoneComponent:org.joda.time.DateTimeZone parseDateTimeZone(java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.RandomWalk:double step(java.lang.Object,java.lang.Object,int)",
            "edu.stanford.nlp.trees.international.pennchinese.RadicalMap:void main(java.lang.String[])",
            "edu.stanford.nlp.time.TimeFormatter$TimeZoneComponent:void <init>(java.util.Locale)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Value attemptTypeConversion(edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue,edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.hcoref.Preprocessor:void processDiscourse(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void countMergeEffects(edu.stanford.nlp.trees.Tree,java.util.Map,java.util.Map,java.util.IdentityHashMap,java.util.IdentityHashMap)",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void coreference(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve)",
            "edu.stanford.nlp.util.DeltaCollectionValuedMap:void removeMapping(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.tagger.maxent.Dictionary:int getCountPart(java.lang.String)",
            "edu.stanford.nlp.hcoref.Preprocessor:java.lang.String findNextParagraphSpeaker(edu.stanford.nlp.hcoref.data.Document,java.util.List,int,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:void main(java.lang.String[])",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void printConllOutput(edu.stanford.nlp.dcoref.Document,java.io.PrintWriter,java.util.List,boolean)",
            "edu.stanford.nlp.dcoref.ScorerBCubed:void calculateRecallBcai(edu.stanford.nlp.dcoref.Document)",
            "edu.stanford.nlp.tagger.maxent.Dictionary:int getCount(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.trees.international.negra.NegraLabel:java.lang.String featureValue(java.lang.String)",
            "edu.stanford.nlp.semgraph.semgrex.VariableStrings:java.lang.String getString(java.lang.Object)",
            "edu.stanford.nlp.fsm.DFSAState:edu.stanford.nlp.fsm.DFSATransition transition(java.lang.Object)",
            "edu.stanford.nlp.hcoref.sieve.Sieve:void merge(edu.stanford.nlp.hcoref.data.Document,int,int)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:boolean containsKey(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.util.logging.Redwood:void attemptThreadControlThreadsafe(long)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass$CalculateSufficientStatsThreads:edu.stanford.nlp.util.Triple call()",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(edu.stanford.nlp.ling.TaggedWord,int,double)",
            "edu.stanford.nlp.ie.NumberNormalizer:java.lang.Number wordToNumber(java.lang.String)",
            "edu.stanford.nlp.maxent.Feature:void <init>(edu.stanford.nlp.maxent.Experiments,double[],edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.util.HashIndex:boolean add(java.lang.Object)",
            "edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries,java.util.Set,edu.stanford.nlp.dcoref.Semantics)",
            "edu.stanford.nlp.trees.international.tuebadz.TueBaDZHeadFinder:edu.stanford.nlp.trees.Tree determineNonTrivialHead(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:java.lang.String getFirstTranslation(java.lang.String)",
            "edu.stanford.nlp.parser.metrics.TaggingEval:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)",
            "edu.stanford.nlp.tagger.maxent.ASBCunkDict:void readASBCunkDict(java.lang.String)",
            "edu.stanford.nlp.util.DeltaCollectionValuedMap:void add(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.tagger.maxent.CtbDict:java.util.Set getpre(java.lang.String)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass$LabelWithSeedWords:edu.stanford.nlp.util.Pair call()",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:void readCEDict(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.tagger.maxent.CtbDict:java.util.Set getsuf(java.lang.String)",
            "edu.stanford.nlp.fsm.TransducerGraph:java.util.Set getArcsByInput(java.lang.Object)",
            "edu.stanford.nlp.graph.DirectedMultiGraph:void removeZeroDegreeNodes()",
            "edu.stanford.nlp.hcoref.CorefSystem:java.util.List filterMentionsWithSingletonClusters(edu.stanford.nlp.hcoref.data.Document,java.util.List)",
            "edu.stanford.nlp.hcoref.Rules:boolean entityPersonDisagree(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.graph.DirectedMultiGraph$EdgeIterator:void <init>(java.util.Map,java.lang.Object)",
            "edu.stanford.nlp.trees.tregex.VariableStrings:java.lang.String toString()",
            "edu.stanford.nlp.dcoref.ScorerBCubed:void calculatePrecisionBcai(edu.stanford.nlp.dcoref.Document)",
            "edu.stanford.nlp.parser.lexparser.LatticeEdge:java.lang.String getAttr(java.lang.String)",
            "edu.stanford.nlp.trees.AbstractCollinsHeadFinder:edu.stanford.nlp.trees.Tree determineNonTrivialHead(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.tagger.maxent.TagCount:void save(java.io.DataOutputStream)",
            "edu.stanford.nlp.hcoref.md.MentionDetectionClassifier:void classifyMentions(java.util.List,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)",
            "edu.stanford.nlp.parser.metrics.TaggingEval:java.util.Map makeObjectsByCat(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.tagger.maxent.TemplateHash:int[] getPositions(edu.stanford.nlp.tagger.maxent.FeatureKey)"
        ]
    },
    "edu.stanford.nlp.util.Pair:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object get(java.lang.Object)",
            "edu.stanford.nlp.util.Pair:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.fsm.TransducerGraph$Arc:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object remove(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayUtils:java.lang.Boolean lambda$getSubListIndex$278(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.ArrayMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.Triple:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayCoreMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.HashableCoreMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap$Entry:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.Interval:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.patterns.surface.SurfacePatternFactory:edu.stanford.nlp.util.Triple getContextTokenStr(edu.stanford.nlp.ling.CoreLabel)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.lang.Boolean lambda$labelWords$130(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.util.ArrayCoreMap:boolean equals(edu.stanford.nlp.util.ArrayCoreMap)"
        ]
    },
    "edu.stanford.nlp.util.ArrayUtils:java.lang.Boolean lambda$getSubListIndex$278(edu.stanford.nlp.util.Pair)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.ArrayUtils:java.util.List getSubListIndex(java.lang.Object[],java.lang.Object[],java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.util.ArrayMap:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object get(java.lang.Object)",
            "edu.stanford.nlp.util.Pair:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.stats.IntCounter:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$SimpleValue:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.fsm.TransducerGraph$Arc:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$SimpleExpression:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object remove(java.lang.Object)",
            "edu.stanford.nlp.graph.DirectedMultiGraph:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayUtils:java.lang.Boolean lambda$getSubListIndex$278(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.semgraph.semgrex.Alignment:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.TwoDimensionalMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.Triple:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.stats.ClassicCounter:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayCoreMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.HashableCoreMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.HashIndex:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap$Entry:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.patterns.surface.SurfacePatternFactory:edu.stanford.nlp.util.Triple getContextTokenStr(edu.stanford.nlp.ling.CoreLabel)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.lang.Boolean lambda$labelWords$130(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.DeltaMap:void main(java.lang.String[])",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.util.ArrayCoreMap:boolean equals(edu.stanford.nlp.util.ArrayCoreMap)"
        ]
    },
    "edu.stanford.nlp.util.Triple:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object get(java.lang.Object)",
            "edu.stanford.nlp.util.Pair:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.fsm.TransducerGraph$Arc:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object remove(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayUtils:java.lang.Boolean lambda$getSubListIndex$278(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.ArrayMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.Triple:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayCoreMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.HashableCoreMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap$Entry:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.patterns.surface.SurfacePatternFactory:edu.stanford.nlp.util.Triple getContextTokenStr(edu.stanford.nlp.ling.CoreLabel)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.lang.Boolean lambda$labelWords$130(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.util.ArrayCoreMap:boolean equals(edu.stanford.nlp.util.ArrayCoreMap)"
        ]
    },
    "edu.stanford.nlp.util.ArrayCoreMap:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object get(java.lang.Object)",
            "edu.stanford.nlp.trees.international.negra.NegraPennTreeNormalizer$2:boolean test(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.util.Pair:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.fsm.TransducerGraph$Arc:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object remove(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayUtils:java.lang.Boolean lambda$getSubListIndex$278(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.ArrayMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.Triple:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void combine(edu.stanford.nlp.ie.crf.CRFClassifier,double)",
            "edu.stanford.nlp.util.ArrayCoreMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.HashableCoreMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap$Entry:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.patterns.surface.SurfacePatternFactory:edu.stanford.nlp.util.Triple getContextTokenStr(edu.stanford.nlp.ling.CoreLabel)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.lang.Boolean lambda$labelWords$130(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.util.ArrayCoreMap:boolean equals(edu.stanford.nlp.util.ArrayCoreMap)"
        ]
    },
    "edu.stanford.nlp.util.ArrayMap$Entry:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.fsm.TransducerGraph$Arc:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object get(java.lang.Object)",
            "edu.stanford.nlp.util.Pair:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayUtils:java.lang.Boolean lambda$getSubListIndex$278(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.ArrayMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.Triple:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayCoreMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap$Entry:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.fsm.TransducerGraph$Arc:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.lang.Boolean lambda$labelWords$130(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object remove(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.lang.Boolean lambda$labelWords$130(edu.stanford.nlp.util.Pair)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.ArrayUtils:java.util.List getSubListIndex(java.lang.Object[],java.lang.Object[],java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.util.ArrayMap:java.lang.Object put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void readEmbeddingsData()",
            "edu.stanford.nlp.time.GUTimeAnnotator:java.util.List toTimexCoreMaps(org.w3c.dom.Element,edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.parser.metrics.LeafAncestorEval:void <clinit>()",
            "edu.stanford.nlp.util.Maps:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:java.util.Map buildMergeCorrespondence(java.util.List)",
            "edu.stanford.nlp.maxent.Feature:void initHashVals()",
            "edu.stanford.nlp.pipeline.CustomAnnotationSerializer:java.util.Map loadCorefChains(java.io.BufferedReader)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AuxiliaryTree:void initializeNamesNodesMaps(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.international.spanish.SpanishHeadFinder:void <init>(edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.semgraph.SemanticGraph:void <init>(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Map)",
            "edu.stanford.nlp.ie.machinereading.common.StringDictionary:int get(java.lang.String,boolean)",
            "edu.stanford.nlp.util.HashIndex:int addToIndexUnsafe(java.lang.Object)",
            "edu.stanford.nlp.parser.lexparser.UnaryGrammar:void addRule(edu.stanford.nlp.parser.lexparser.UnaryRule)",
            "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:void <init>(edu.stanford.nlp.parser.shiftreduce.PerceptronModel)",
            "edu.stanford.nlp.dcoref.Document:void extractGoldLinks()",
            "edu.stanford.nlp.io.IOUtils:java.util.Map readMap(java.lang.String)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AuxiliaryTree:edu.stanford.nlp.util.Pair copyHelper(edu.stanford.nlp.trees.Tree,java.util.Map,edu.stanford.nlp.trees.TreeFactory,edu.stanford.nlp.ling.LabelFactory)",
            "edu.stanford.nlp.tagger.maxent.Dictionary:void addVThatTaking(java.lang.String)",
            "edu.stanford.nlp.wordseg.Sighan2005DocumentReaderAndWriter:void tagLatticeToAnswerLattice(edu.stanford.nlp.fsm.DFSAState,edu.stanford.nlp.fsm.DFSAState,java.lang.StringBuilder,edu.stanford.nlp.util.MutableInteger,int,double,java.util.Map,edu.stanford.nlp.fsm.DFSA,edu.stanford.nlp.ling.CoreLabel[])",
            "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String printConllOutput(edu.stanford.nlp.hcoref.data.Document,java.util.List,boolean)",
            "edu.stanford.nlp.stats.ClassicCounter:void setCount(java.lang.Object,double)",
            "edu.stanford.nlp.semgraph.semgrex.SemgrexPattern:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.GrammaticalStructure:java.lang.String dependenciesToString(edu.stanford.nlp.trees.GrammaticalStructure,java.util.Collection,edu.stanford.nlp.trees.Tree,boolean,boolean)",
            "edu.stanford.nlp.dcoref.Document:java.lang.String findParagraphSpeaker(java.util.List,int,java.lang.String,int,edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.hcoref.data.CorefChain:void <init>(edu.stanford.nlp.hcoref.data.CorefCluster,java.util.Map)",
            "edu.stanford.nlp.trees.MemoryTreebank:void readSRLFile(java.lang.String)",
            "edu.stanford.nlp.neural.Embedding:void loadWordVectors(java.lang.String)",
            "edu.stanford.nlp.hcoref.CorefSystem:java.util.Map makeCorefOutput(edu.stanford.nlp.hcoref.data.Document)",
            "edu.stanford.nlp.time.SUTimeMain:void processTempEval2(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.graph.DijkstraShortestPath:java.util.List getShortestPath(edu.stanford.nlp.graph.Graph,java.lang.Object,java.lang.Object,boolean)",
            "edu.stanford.nlp.trees.CollinsHeadFinder:void <init>(edu.stanford.nlp.trees.TreebankLanguagePack,java.lang.String[])",
            "edu.stanford.nlp.hcoref.data.Dictionaries:void loadSignatures(java.lang.String,java.util.Map)",
            "edu.stanford.nlp.trees.international.pennchinese.SunJurafskyChineseHeadFinder:void <init>(edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String sentenceStringWithMention(int,edu.stanford.nlp.hcoref.data.Document,boolean,boolean)",
            "edu.stanford.nlp.tagger.maxent.CtbDict:void readCtbDict(java.lang.String)",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void treatCC(java.util.Collection)",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void collapsePrepAndPoss(java.util.Collection)",
            "edu.stanford.nlp.dcoref.Document:void findSpeakers(edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.trees.SemanticHeadFinder:void ruleChanges()",
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void goToNextNodeMatch()",
            "edu.stanford.nlp.io.IOUtils:java.util.List readCSVWithHeader(java.lang.String,char,char)",
            "edu.stanford.nlp.parser.lexparser.ChineseUnknownWordModelTrainer:void train(edu.stanford.nlp.ling.TaggedWord,int,double)",
            "edu.stanford.nlp.parser.lexparser.Lattice:void addEdge(edu.stanford.nlp.parser.lexparser.LatticeEdge)",
            "edu.stanford.nlp.tagger.maxent.Dictionary:void read(java.io.DataInputStream)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:java.util.Map SetAttrValue(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map)",
            "edu.stanford.nlp.tagger.maxent.TaggerConfig:void <clinit>()",
            "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon:void finishTraining()",
            "edu.stanford.nlp.parser.lexparser.BinaryGrammar:void addRule(edu.stanford.nlp.parser.lexparser.BinaryRule)",
            "edu.stanford.nlp.wordseg.CorpusChar:java.util.Map readDict(java.lang.String)",
            "edu.stanford.nlp.util.XMLUtils$XMLTag:void <init>(java.lang.String)",
            "edu.stanford.nlp.stats.GeneralizedCounter:void incrementCount1D(java.lang.Object,double)",
            "edu.stanford.nlp.hcoref.Preprocessor:void initializeClusters(edu.stanford.nlp.hcoref.data.Document)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceToken:void loadDictionary(java.util.Map,java.lang.String)",
            "edu.stanford.nlp.patterns.InvertedIndexByTokens:void add(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.SpanishTreebankParserParams:void buildAnnotations()",
            "edu.stanford.nlp.classify.RVFDataset:void printFullFeatureMatrixWithValues(java.io.PrintWriter)",
            "edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle:void <clinit>()",
            "edu.stanford.nlp.hcoref.Preprocessor:void fillMentionInfo(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,edu.stanford.nlp.classify.LogisticClassifier,edu.stanford.nlp.trees.HeadFinder)",
            "edu.stanford.nlp.util.PropertiesUtils:java.util.Map asMap(java.util.Properties)",
            "edu.stanford.nlp.util.Maps:java.util.Map invert(java.util.Map)",
            "edu.stanford.nlp.parser.lexparser.TregexPoweredTreebankParserParams:void compileAnnotations(edu.stanford.nlp.trees.HeadFinder)",
            "edu.stanford.nlp.parser.lexparser.BinaryGrammar:void readObject(java.io.ObjectInputStream)",
            "edu.stanford.nlp.semgraph.semgrex.Alignment:edu.stanford.nlp.semgraph.semgrex.Alignment patchedAlignment(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.util.TwoDimensionalMap:java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.process.PTBTokenizer:java.util.Map optionArgDefs()",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:void extractEnumerations(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.classify.LinearClassifier:java.util.Map weightsAsMapOfCounters()",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:void addEventMention(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEventMention)",
            "edu.stanford.nlp.tagger.maxent.Dictionary:void readTags(java.io.DataInputStream)",
            "edu.stanford.nlp.util.logging.OutputHandler:boolean formatChannel(java.lang.StringBuilder,java.lang.String,java.lang.Object)",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:int addMap(java.util.Map)",
            "edu.stanford.nlp.dcoref.MentionExtractor:java.util.List arrange(edu.stanford.nlp.pipeline.Annotation,java.util.List,java.util.List,java.util.List,boolean)",
            "edu.stanford.nlp.util.ThreeDimensionalMap:edu.stanford.nlp.util.TwoDimensionalMap getTwoDimensionalMap(java.lang.Object)",
            "edu.stanford.nlp.hcoref.data.Document:void extractGoldCorefClusters()",
            "edu.stanford.nlp.ie.machinereading.common.StringDictionary:void load(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.pipeline.QuoteAnnotator:void <clinit>()",
            "edu.stanford.nlp.ie.NERFeatureFactory:void readGazette(java.io.BufferedReader)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:java.util.Map AttrValue(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map)",
            "edu.stanford.nlp.trees.tregex.gui.InputPanel$TRegexGUITreeVisitor:void visitTree(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.stats.IntCounter:void setCount(java.lang.Object,int)",
            "edu.stanford.nlp.util.DeltaMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.trees.international.french.DybroFrenchHeadFinder:void <init>(edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.trees.international.pennchinese.RadicalMap:void <clinit>()",
            "edu.stanford.nlp.dcoref.ACEMentionExtractor:void printRawDoc(java.util.List,java.util.List,java.lang.String,boolean)",
            "edu.stanford.nlp.hcoref.data.Document:void extractGoldLinks()",
            "edu.stanford.nlp.ie.NumberNormalizer:void <clinit>()",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:edu.stanford.nlp.stats.ClassicCounter getCounter(java.lang.Object)",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:java.util.Map coref(edu.stanford.nlp.dcoref.Document)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEventMention:void addArg(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntityMention,java.lang.String)",
            "edu.stanford.nlp.dcoref.Document:void processDiscourse(edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:void addEntityMention(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntityMention)",
            "edu.stanford.nlp.tagger.maxent.Dictionary:void read(java.io.DataInputStream,java.lang.String)",
            "edu.stanford.nlp.ling.AnnotationLookup:java.lang.Class getValueType(java.lang.Class)",
            "edu.stanford.nlp.util.MapList:java.util.List ensureList(java.lang.Object)",
            "edu.stanford.nlp.util.logging.Redwood:void queueTask(long,java.lang.Runnable)",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:java.util.Map getReverseMap()",
            "edu.stanford.nlp.ie.pascal.ISODateInstance:void <clinit>()",
            "edu.stanford.nlp.util.HashIndex:int addToIndex(java.lang.Object)",
            "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String printErrorLogDcoref(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,int,java.lang.String)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Map mapTreeToSg(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.ie.machinereading.common.StringDictionary:edu.stanford.nlp.ie.machinereading.common.StringDictionary$IndexAndCount getIndexAndCount(java.lang.String)",
            "edu.stanford.nlp.hcoref.data.Dictionaries:void loadStateAbbreviation(java.lang.String)",
            "edu.stanford.nlp.trees.tregex.gui.FileTreeModel:void findLoadableFiles(java.util.EnumMap,java.io.File[],java.util.List,edu.stanford.nlp.trees.tregex.gui.FileTreeNode)",
            "edu.stanford.nlp.util.TwoDimensionalCollectionValuedMap:edu.stanford.nlp.util.CollectionValuedMap getCollectionValuedMap(java.lang.Object)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:void set(java.lang.String,java.lang.Object)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Collection removeDuplicates(java.util.Collection)",
            "edu.stanford.nlp.trees.international.negra.NegraHeadFinder:void <init>(edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.parser.lexparser.UnknownGTTrainer:void finishTraining()",
            "edu.stanford.nlp.optimization.GoldenSectionLineSearch:void discretizeCompute(java.util.function.Function,int,double,double)",
            "edu.stanford.nlp.trees.international.tuebadz.TueBaDZHeadFinder:void <init>()",
            "edu.stanford.nlp.util.StringUtils:java.util.Map argsToMap(java.lang.String[],java.util.Map)",
            "edu.stanford.nlp.parser.metrics.TaggingEval:void <clinit>()",
            "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.Map getOutgoingEdgesMap(java.lang.Object)",
            "edu.stanford.nlp.wordseg.ChineseDictionary:void main(java.lang.String[])",
            "edu.stanford.nlp.time.SUTimeMain:java.util.Map readTimexAttrExts(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:edu.stanford.nlp.stats.ClassicCounter setCounter(java.lang.Object,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.ie.crf.LabelDictionary:void increment(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.tagger.maxent.Distsim:edu.stanford.nlp.tagger.maxent.Distsim initLexicon(java.lang.String)",
            "edu.stanford.nlp.util.TwoDimensionalCollectionValuedMap:void add(java.lang.Object,java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.parser.lexparser.RandomWalk:void train(java.util.Collection)",
            "edu.stanford.nlp.process.DistSimClassifier:void <init>(java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean,java.lang.String)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void treatCC(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void combineWeights(edu.stanford.nlp.ie.crf.CRFClassifier,double)",
            "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:void averageModels(java.util.Collection)",
            "edu.stanford.nlp.tagger.maxent.TestSentence:double[] getHistories(java.lang.String[],edu.stanford.nlp.tagger.maxent.History)",
            "edu.stanford.nlp.international.morph.MorphoFeatures:void addFeature(edu.stanford.nlp.international.morph.MorphoFeatureSpecification$MorphoFeatureType,java.lang.String)",
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void goToNextTreeNodeMatch()",
            "edu.stanford.nlp.util.logging.RedirectOutputHandler:edu.stanford.nlp.util.logging.RedirectOutputHandler fromJavaUtilLogging(java.util.logging.Logger)",
            "edu.stanford.nlp.ie.NERFeatureFactory:java.util.Collection featuresC(edu.stanford.nlp.util.PaddedList,int)",
            "edu.stanford.nlp.sequences.Clique:edu.stanford.nlp.sequences.Clique intern(edu.stanford.nlp.sequences.Clique)",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:java.util.Map corefReturnHybridOutput(edu.stanford.nlp.dcoref.Document)",
            "edu.stanford.nlp.util.TwoDimensionalMap:java.util.Map getMap(java.lang.Object)",
            "edu.stanford.nlp.util.Maps:java.util.Map compose(java.util.Map,java.util.Map)",
            "edu.stanford.nlp.neural.rnn.TopNGramRecord:void <init>(int,int,int)",
            "edu.stanford.nlp.trees.TreePrint:void main(java.lang.String[])",
            "edu.stanford.nlp.semgraph.semgrex.SemgrexParser:edu.stanford.nlp.semgraph.semgrex.NodePattern Description(edu.stanford.nlp.semgraph.semgrex.GraphRelation)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:edu.stanford.nlp.stats.IntCounter setCounter(java.lang.Object,edu.stanford.nlp.stats.IntCounter)",
            "edu.stanford.nlp.hcoref.Preprocessor:void findTwinMentionsRelaxed(edu.stanford.nlp.hcoref.data.Document)",
            "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:void <clinit>()",
            "edu.stanford.nlp.international.arabic.process.ArabicSegmenter:java.util.Map optionArgDefs()",
            "edu.stanford.nlp.dcoref.Document:void initializeCorefCluster()",
            "edu.stanford.nlp.hcoref.Preprocessor:java.lang.String findParagraphSpeaker(edu.stanford.nlp.hcoref.data.Document,java.util.List,int,java.lang.String,int,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.parser.lexparser.RandomWalk:void <init>(java.util.Collection,int)",
            "edu.stanford.nlp.stats.Counters$2:void setCount(java.lang.Object,double)",
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:void initializeAnnotationPatterns()",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:void lazyKthBest(edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser$Vertex,int,int)",
            "edu.stanford.nlp.tagger.maxent.TemplateHash:void addPrev(int,edu.stanford.nlp.tagger.maxent.History)",
            "edu.stanford.nlp.util.TwoDimensionalCollectionValuedMap:void add(java.lang.Object,java.lang.Object,java.util.Collection)",
            "edu.stanford.nlp.util.StringUtils:java.util.Map mapStringToMap(java.lang.String)",
            "edu.stanford.nlp.sentiment.BuildBinarizedDataset:void extractLabels(java.util.Map,java.util.List,java.lang.String)",
            "edu.stanford.nlp.dcoref.Dictionaries:void loadStateAbbreviation(java.lang.String)",
            "edu.stanford.nlp.dcoref.CorefChain:void <init>(edu.stanford.nlp.dcoref.CorefCluster,java.util.Map)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:java.util.List readDocument(java.lang.String,edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.neural.Embedding:void loadWordVectors(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry makeEntry(java.lang.Object)",
            "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String printErrorLog(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.stats.Counter,int,edu.stanford.nlp.hcoref.data.Dictionaries,edu.stanford.nlp.hcoref.sieve.RFSieve)",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:void collapsePrepAndPoss(java.util.Collection)",
            "edu.stanford.nlp.util.Maps:void putIntoValueCollection(java.util.Map,java.lang.Object,java.lang.Object,edu.stanford.nlp.util.CollectionFactory)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:void extractEnumerations(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.hcoref.data.Dictionaries:void loadGenderNumber(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.time.TimeFormatter$TimeZoneComponent:void updateTimeZoneNames(java.util.Locale)",
            "edu.stanford.nlp.pipeline.CoreMapAttributeAggregator:void <clinit>()",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:void addRelation(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceRelation)",
            "edu.stanford.nlp.tagger.maxent.ReadDataTagged:void loadFile(edu.stanford.nlp.tagger.io.TaggedFileReader,java.util.Map)",
            "edu.stanford.nlp.sentiment.ReadSentimentDataset:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.UniversalSemanticHeadFinder:void ruleChanges()",
            "edu.stanford.nlp.trees.TreePrint:void printTreeInternal(edu.stanford.nlp.trees.Tree,java.io.PrintWriter,boolean)",
            "edu.stanford.nlp.tagger.maxent.CTBunkDict:void readCTBunkDict(java.lang.String)",
            "edu.stanford.nlp.graph.DirectedMultiGraph:void <init>(edu.stanford.nlp.graph.DirectedMultiGraph)",
            "edu.stanford.nlp.pipeline.TokenizerAnnotator$TokenizerType:java.util.Map initializeNameMap()",
            "edu.stanford.nlp.util.TwoDimensionalMap:void <init>(edu.stanford.nlp.util.TwoDimensionalMap)",
            "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.Map toMap()",
            "edu.stanford.nlp.parser.lexparser.HookChart:void insert(java.util.Map,java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.stats.ClassicCounter:double logIncrementCount(java.lang.Object,double)",
            "edu.stanford.nlp.parser.lexparser.ChineseUnknownWordModelTrainer:edu.stanford.nlp.parser.lexparser.UnknownWordModel finishTraining()",
            "edu.stanford.nlp.dcoref.Document:void <init>(edu.stanford.nlp.pipeline.Annotation,java.util.List,java.util.List,edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.international.arabic.Buckwalter:void <init>()",
            "edu.stanford.nlp.fsm.TransducerGraph:java.util.Map samplePathsFromGraph(int)",
            "edu.stanford.nlp.trees.GrammaticalStructure:void addNodeToIndexMap(int,edu.stanford.nlp.trees.TreeGraphNode)",
            "edu.stanford.nlp.tagger.maxent.TagCount:edu.stanford.nlp.tagger.maxent.TagCount readTagCount(java.io.DataInputStream)",
            "edu.stanford.nlp.parser.metrics.EvalbByCat:java.util.Map makeObjectsByCat(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.international.arabic.ArabicHeadFinder:void <init>(edu.stanford.nlp.trees.TreebankLanguagePack,edu.stanford.nlp.trees.international.arabic.ArabicHeadFinder$TagSet)",
            "edu.stanford.nlp.stats.GeneralizedCounter:edu.stanford.nlp.stats.GeneralizedCounter conditionalizeHelper(java.lang.Object)",
            "edu.stanford.nlp.neural.rnn.TopNGramRecord:java.util.PriorityQueue getPriorityQueue(int,int,java.util.Map)",
            "edu.stanford.nlp.parser.lexparser.ChineseSimWordAvgDepGrammar:java.util.Map getMap(java.lang.String)",
            "edu.stanford.nlp.util.StringUtils:java.util.Map parseCommandLineArguments(java.lang.String[],boolean)",
            "edu.stanford.nlp.parser.lexparser.LatticeEdge:void setAttr(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.trees.ModCollinsHeadFinder:void <init>(edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.parser.metrics.Evalb:java.util.Map optionArgDefs()",
            "edu.stanford.nlp.optimization.GoldenSectionLineSearch:double minimize(java.util.function.Function)",
            "edu.stanford.nlp.util.DeltaMap:void clear()",
            "edu.stanford.nlp.international.spanish.process.SpanishTokenizer:java.util.Map argOptionDefs()",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:void addEvent(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEvent)",
            "edu.stanford.nlp.international.morph.MorphoFeatures:void <init>(edu.stanford.nlp.international.morph.MorphoFeatures)",
            "edu.stanford.nlp.dcoref.MUCMentionExtractor:edu.stanford.nlp.dcoref.Document nextDoc()",
            "edu.stanford.nlp.parser.lexparser.GrammarCompactor:edu.stanford.nlp.fsm.TransducerGraph getGraphFromMap(java.util.Map,java.lang.String)",
            "edu.stanford.nlp.trees.tregex.TregexPattern:void main(java.lang.String[])",
            "edu.stanford.nlp.pipeline.CleanXmlAnnotator:java.util.Set annotateWithTag(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.XMLUtils$XMLTag,edu.stanford.nlp.util.CollectionValuedMap,java.util.Map,java.util.Collection,java.util.Map)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:edu.stanford.nlp.stats.IntCounter getCounter(java.lang.Object)",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void printRawDoc(edu.stanford.nlp.dcoref.Document,boolean)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:int recalculateTemporaryBetas(edu.stanford.nlp.trees.Tree,double[],int,java.util.IdentityHashMap,java.util.IdentityHashMap,java.util.Map,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.ThreeDimensionalMap)",
            "edu.stanford.nlp.pipeline.SentimentAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.semgraph.semgrex.Alignment:edu.stanford.nlp.semgraph.semgrex.Alignment makeFromIndexArray(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraph,int[],double,java.lang.String)",
            "edu.stanford.nlp.parser.metrics.LeafAncestorEval:void updateCatAverages(java.util.List,double)",
            "edu.stanford.nlp.tagger.maxent.TemplateHash:void add(int,edu.stanford.nlp.tagger.maxent.History,int)",
            "edu.stanford.nlp.fsm.TransducerGraph:boolean addArc(edu.stanford.nlp.fsm.TransducerGraph$Arc)",
            "edu.stanford.nlp.trees.tregex.gui.FileTreeModel:void <init>(edu.stanford.nlp.trees.tregex.gui.FileTreeNode)",
            "edu.stanford.nlp.hcoref.Preprocessor:void findSpeakersInConversation(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.dcoref.Document:void extractGoldCorefClusters()",
            "edu.stanford.nlp.time.JollyDayHolidays:java.util.Map getAllHolidaysMap(java.util.Set)",
            "edu.stanford.nlp.international.french.process.FrenchTokenizer:java.util.Map argOptionDefs()",
            "edu.stanford.nlp.parser.lexparser.BaseUnknownWordModelTrainer:edu.stanford.nlp.parser.lexparser.UnknownWordModel finishTraining()",
            "edu.stanford.nlp.hcoref.data.Document:void mergeAcronymCache(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster)",
            "edu.stanford.nlp.util.CollectionUtils:java.util.Collection uniqueNonhashableObjects(java.util.Collection,java.util.function.Function)",
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:void processTreeHelper(java.lang.String,java.lang.String,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.util.logging.OutputHandler:void colorChannel(java.lang.String,edu.stanford.nlp.util.logging.Color)",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseSemanticHeadFinder:void ruleChanges()",
            "edu.stanford.nlp.pipeline.TokenizerAnnotator$TokenizerType:java.util.Map initializeClassMap()",
            "edu.stanford.nlp.hcoref.data.Dictionaries:void loadDemonymLists(java.lang.String)",
            "edu.stanford.nlp.scoref.StatisticalCorefSystem:void annotate(edu.stanford.nlp.pipeline.Annotation,boolean)",
            "edu.stanford.nlp.hcoref.Preprocessor:boolean findSubject(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,int,int)",
            "edu.stanford.nlp.ie.NERFeatureFactory:void initLexicon(edu.stanford.nlp.sequences.SeqClassifierFlags)",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:void main(java.lang.String[])",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:java.util.Map FieldValue(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map)",
            "edu.stanford.nlp.util.DeltaCollectionValuedMap:java.util.Collection remove(java.lang.Object)",
            "edu.stanford.nlp.semgraph.semgrex.VariableStrings:void setVar(java.lang.Object,java.lang.String)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:void addEntity(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntity)",
            "edu.stanford.nlp.trees.international.negra.NegraHeadFinder:edu.stanford.nlp.trees.HeadFinder negraSemanticHeadFinder()",
            "edu.stanford.nlp.time.TimeFormatter$TextDateComponent:void addValue(java.lang.String,int)",
            "edu.stanford.nlp.tagger.maxent.Dictionary:void fillWordTagCounts(java.util.Map)",
            "edu.stanford.nlp.parser.lexparser.Interner:java.lang.Object intern(java.lang.Object)",
            "edu.stanford.nlp.graph.DirectedMultiGraph:boolean addVertex(java.lang.Object)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:edu.stanford.nlp.util.PriorityQueue getCandidates(edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser$Vertex,int)",
            "edu.stanford.nlp.parser.lexparser.AbstractDependencyGrammar:edu.stanford.nlp.parser.lexparser.IntDependency intern(edu.stanford.nlp.parser.lexparser.IntTaggedWord,edu.stanford.nlp.parser.lexparser.IntTaggedWord,boolean,short)",
            "edu.stanford.nlp.pipeline.AnnotatorPool:boolean register(java.lang.String,edu.stanford.nlp.pipeline.AnnotatorFactory)",
            "edu.stanford.nlp.pipeline.AnnotatorPool:edu.stanford.nlp.pipeline.Annotator get(java.lang.String)",
            "edu.stanford.nlp.hcoref.Rules:boolean entityIsAcronym(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster)",
            "edu.stanford.nlp.dcoref.Document:boolean findSpeaker(int,int,java.util.List,int,int,edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.graph.DirectedMultiGraph:void add(java.lang.Object,java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.parser.lexparser.UnaryGrammar:void purgeRules()",
            "edu.stanford.nlp.classify.GeneralizedExpectationObjectiveFunction:void computeEmpiricalStatistics(java.util.List)",
            "edu.stanford.nlp.trees.international.negra.NegraLabel:void setFeatureValue(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.pipeline.TrueCaseAnnotator:java.util.Map loadMixedCaseMap(java.lang.String)",
            "edu.stanford.nlp.util.DeltaMap:void main(java.lang.String[])",
            "edu.stanford.nlp.dcoref.Dictionaries:void loadDemonymLists(java.lang.String)",
            "edu.stanford.nlp.time.HeidelTimeAnnotator:java.util.List toTimexCoreMaps(org.w3c.dom.Element,edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.stats.ClassicCounter:double incrementCount(java.lang.Object,double)",
            "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader:void writeTabSep(java.io.PrintWriter,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CollectionValuedMap)",
            "edu.stanford.nlp.parser.lexparser.UnaryGrammar:boolean relaxRule(edu.stanford.nlp.parser.lexparser.UnaryRule)",
            "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader:java.util.Map makeDocInfo(edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$CoNLLDocument)",
            "edu.stanford.nlp.trees.international.negra.NegraLabel$NegraLabelFactory:edu.stanford.nlp.ling.Label newLabel(edu.stanford.nlp.ling.Label)",
            "edu.stanford.nlp.simple.Document:java.util.Map coref(java.util.Properties)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void loadTextClassifier(java.io.BufferedReader)",
            "edu.stanford.nlp.trees.tregex.gui.MatchesPanel:void setMatches(java.util.List,java.util.Map)",
            "edu.stanford.nlp.trees.tregex.VariableStrings:void unsetVar(java.lang.String)",
            "edu.stanford.nlp.hcoref.Preprocessor:void extractGoldClusters(edu.stanford.nlp.hcoref.data.Document)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:void addRelationMention(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceRelationMention)",
            "edu.stanford.nlp.trees.international.pennchinese.RadicalMap:void main(java.lang.String[])",
            "edu.stanford.nlp.dcoref.Document:void findSpeakersInConversation(edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.time.TimeFormatter$TimeZoneIdComponent:void <clinit>()",
            "edu.stanford.nlp.hcoref.Preprocessor:void processDiscourse(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.util.ArrayHeap:edu.stanford.nlp.util.ArrayHeap$HeapEntry getEntry(java.lang.Object)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void countMergeEffects(edu.stanford.nlp.trees.Tree,java.util.Map,java.util.Map,java.util.IdentityHashMap,java.util.IdentityHashMap)",
            "edu.stanford.nlp.util.DeltaCollectionValuedMap:void removeMapping(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.fsm.DFSAState:void addTransition(edu.stanford.nlp.fsm.DFSATransition)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.NodePattern CoreMapWordPattern(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:void main(java.lang.String[])",
            "edu.stanford.nlp.process.DocumentPreprocessor:java.util.Map argOptionDefs()",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void printConllOutput(edu.stanford.nlp.dcoref.Document,java.io.PrintWriter,java.util.List,boolean)",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.util.Dictionary)",
            "edu.stanford.nlp.tagger.maxent.Distsim:void <init>(java.lang.String)",
            "edu.stanford.nlp.trees.GrammaticalRelation:void <init>(edu.stanford.nlp.international.Language,java.lang.String,java.lang.String,edu.stanford.nlp.trees.GrammaticalRelation,java.lang.String,edu.stanford.nlp.trees.tregex.TregexPatternCompiler,java.lang.String[],java.lang.String)",
            "edu.stanford.nlp.util.TwoDimensionalCollectionValuedMap:void addKey(java.lang.Object)",
            "edu.stanford.nlp.parser.metrics.UnlabeledAttachmentEval:void <clinit>()",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(edu.stanford.nlp.ling.TaggedWord,int,double)",
            "edu.stanford.nlp.maxent.Feature:void <init>(edu.stanford.nlp.maxent.Experiments,double[],edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.tagger.maxent.Dictionary:void read(java.lang.String)",
            "edu.stanford.nlp.util.HashIndex:boolean add(java.lang.Object)",
            "edu.stanford.nlp.util.logging.OutputHandler:void styleChannel(java.lang.String,edu.stanford.nlp.util.logging.Style)",
            "edu.stanford.nlp.tagger.maxent.ASBCunkDict:void readASBCunkDict(java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.BaseUnknownWordModelTrainer:void train(edu.stanford.nlp.ling.TaggedWord,int,double)",
            "edu.stanford.nlp.util.DeltaCollectionValuedMap:void add(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.process.Americanize:void <clinit>()",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph deepCopyFromGraphs(java.util.List,java.util.List)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:edu.stanford.nlp.semgraph.SemanticGraph resetVerticeOrdering(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader:void writeTabSep(java.io.PrintWriter,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CollectionValuedMap)",
            "edu.stanford.nlp.dcoref.Document:void findTwinMentionsRelaxed()",
            "edu.stanford.nlp.tagger.maxent.TagCount:void <init>(edu.stanford.nlp.stats.IntCounter)",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:void readCEDict(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Map anonymyizeNodes(java.lang.Iterable,java.lang.String)",
            "edu.stanford.nlp.trees.tregex.Relation:void <clinit>()",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceToken:void loadProximityClasses(java.lang.String)",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseHeadFinder:void <init>(edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.trees.international.french.FrenchHeadFinder:void <init>(edu.stanford.nlp.trees.international.french.FrenchTreebankLanguagePack)",
            "edu.stanford.nlp.semgraph.semgrex.NodePattern:void <init>(edu.stanford.nlp.semgraph.semgrex.GraphRelation,boolean,java.util.Map,boolean,boolean,java.lang.String,java.util.List)",
            "edu.stanford.nlp.hcoref.Preprocessor:void findSpeakers(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.dcoref.Dictionaries:void loadSignatures(java.lang.String,java.util.Map)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.NodePattern CoreMapNode(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.Map getIncomingEdgesMap(java.lang.Object)",
            "edu.stanford.nlp.stats.IntCounter:int incrementCount(java.lang.Object,int)",
            "edu.stanford.nlp.international.arabic.process.ArabicLexer:void setupNormalizationMap()",
            "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams:void initializeAnnotationPatterns()",
            "edu.stanford.nlp.trees.Dependencies:java.util.Map govToDepMap(java.util.List)",
            "edu.stanford.nlp.trees.international.pennchinese.BikelChineseHeadFinder:void <init>(edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.util.TwoDimensionalMap:void put(java.lang.Object)",
            "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:void trainModel(java.lang.String,edu.stanford.nlp.tagger.common.Tagger,java.util.Random,java.util.List,java.util.List,edu.stanford.nlp.trees.Treebank,int,java.util.Set)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Collection removeDuplicates(java.util.Collection,java.util.Collection)",
            "edu.stanford.nlp.semgraph.semgrex.VariableStrings:void unsetVar(java.lang.Object)",
            "edu.stanford.nlp.trees.MemoryTreebank:void processFile(java.io.File)",
            "edu.stanford.nlp.trees.tregex.VariableStrings:void setVar(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.hcoref.md.MentionDetectionClassifier:void classifyMentions(java.util.List,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)",
            "edu.stanford.nlp.parser.metrics.TaggingEval:java.util.Map makeObjectsByCat(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.util.DeltaCollectionValuedMap:void clear()"
        ]
    },
    "edu.stanford.nlp.util.ArrayMap:java.lang.Object remove(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.TwoDimensionalMap:java.lang.Object remove(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.hcoref.sieve.Sieve:void merge(edu.stanford.nlp.hcoref.data.Document,int,int)",
            "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:void findCoreferentAntecedent(edu.stanford.nlp.hcoref.data.Mention,int,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.StringBuilder)",
            "edu.stanford.nlp.graph.DirectedMultiGraph:boolean removeEdge(java.lang.Object,java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.scoref.StatisticalCorefUtils:void mergeCoreferenceClusters(edu.stanford.nlp.util.Pair,edu.stanford.nlp.hcoref.data.Document)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:void clean()",
            "edu.stanford.nlp.hcoref.Preprocessor:void findTwinMentionsRelaxed(edu.stanford.nlp.hcoref.data.Document)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:void remove(java.lang.Object)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:int remove(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.hcoref.data.CorefChain:void deleteMention(edu.stanford.nlp.hcoref.data.CorefChain$CorefMention)",
            "edu.stanford.nlp.hcoref.CorefSystem:void postProcessing(edu.stanford.nlp.hcoref.data.Document)",
            "edu.stanford.nlp.parser.lexparser.GrammarCompactor:edu.stanford.nlp.util.Triple compactGrammar(edu.stanford.nlp.util.Pair,java.util.Map,java.util.Map,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:double remove(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void postProcessing(edu.stanford.nlp.dcoref.Document)",
            "edu.stanford.nlp.dcoref.Document:void findTwinMentionsRelaxed()",
            "edu.stanford.nlp.graph.DirectedMultiGraph:boolean removeVertex(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayHeap:void removeLast(edu.stanford.nlp.util.ArrayHeap$HeapEntry)",
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void decommitNamedRelations()",
            "edu.stanford.nlp.scoref.StatisticalCorefUtils:void removeSingletonClusters(edu.stanford.nlp.hcoref.data.Document)",
            "edu.stanford.nlp.graph.DirectedMultiGraph:void removeZeroDegreeNodes()",
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:void removeLastEntry()",
            "edu.stanford.nlp.util.TwoDimensionalCollectionValuedMap:void retainAll(java.util.Set)",
            "edu.stanford.nlp.stats.IntCounter:double remove(java.lang.Object)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void clean()",
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void decommitNamedNodes()",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void remove(java.lang.Object)",
            "edu.stanford.nlp.graph.DirectedMultiGraph:boolean removeEdges(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.util.ThreeDimensionalMap:void remove(java.lang.Object,java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.dcoref.CorefChain:void deleteMention(edu.stanford.nlp.dcoref.CorefChain$CorefMention)",
            "edu.stanford.nlp.hcoref.Preprocessor:void processDiscourse(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.simple.Sentence:java.util.Map coref()",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void coreference(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void removeZeroCounts()",
            "edu.stanford.nlp.stats.ClassicCounter:edu.stanford.nlp.util.MutableDouble mutableRemove(java.lang.Object)",
            "edu.stanford.nlp.stats.Counters$2:double remove(java.lang.Object)",
            "edu.stanford.nlp.fsm.TransducerGraph:boolean removeArc(edu.stanford.nlp.fsm.TransducerGraph$Arc)",
            "edu.stanford.nlp.pipeline.AnnotatorPool:boolean register(java.lang.String,edu.stanford.nlp.pipeline.AnnotatorFactory)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.util.Map loadFromSavedPatternsWordsDir(edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass,java.util.Properties)",
            "edu.stanford.nlp.util.ArrayMap$1:boolean remove(java.lang.Object)",
            "edu.stanford.nlp.util.DeltaMap:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void removeNamedNodes()",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:void removeZeroCounts()",
            "edu.stanford.nlp.util.TwoDimensionalMap:void remove(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:void trainModel(java.lang.String,edu.stanford.nlp.tagger.common.Tagger,java.util.Random,java.util.List,java.util.List,edu.stanford.nlp.trees.Treebank,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:void train(java.util.List,edu.stanford.nlp.util.Pair,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger(java.lang.Iterable,java.io.BufferedWriter,edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger(java.io.BufferedReader,java.io.BufferedWriter,java.lang.String,edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle)",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger()"
        ]
    },
    "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void search(java.util.function.Predicate)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:java.util.List topClauses(double)"
        ]
    },
    "edu.stanford.nlp.naturalli.ClauseSplitter:void lambda$train$109(edu.stanford.nlp.naturalli.OpenIE,edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$Featurizer,java.util.Optional,edu.stanford.nlp.classify.WeightedDataset,java.util.concurrent.atomic.AtomicInteger,edu.stanford.nlp.util.Pair)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.TestClassifier:void <init>(edu.stanford.nlp.tagger.maxent.MaxentTagger)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTest(edu.stanford.nlp.tagger.maxent.TaggerConfig)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.Redwood$Util:void prettyLog(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:boolean parse(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.DVParser:java.util.List getTopParsesForOneTree(edu.stanford.nlp.parser.lexparser.LexicalizedParser,int,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreeTransformer)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:boolean parseAndReport(java.util.List,java.io.PrintWriter)",
            "edu.stanford.nlp.parser.common.ParsingThreadsafeProcessor:edu.stanford.nlp.parser.common.ParserQuery process(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Tree parseTree(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.RerankingParserQuery:boolean parse(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Tree parse(java.util.List)"
        ]
    },
    "edu.stanford.nlp.util.Interval:edu.stanford.nlp.util.Interval intersect(edu.stanford.nlp.util.Interval)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.Interval:edu.stanford.nlp.util.Interval expand(edu.stanford.nlp.util.Interval)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.BinaryHeapPriorityQueue:void heapifyDown(edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:boolean decreasePriority(java.lang.Object,double)",
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:void heapify(edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry)"
        ]
    },
    "edu.stanford.nlp.util.BinaryHeapPriorityQueue:void heapifyUp(edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:boolean relaxPriority(java.lang.Object,double)",
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:void heapify(edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry)"
        ]
    },
    "edu.stanford.nlp.util.Pair$BySecondReversePairComparator:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.Interval:boolean isIntervalComparable(edu.stanford.nlp.util.Interval)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.Interval:int compareIntervalOrder(edu.stanford.nlp.util.Interval)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.IntervalTree:boolean remove(edu.stanford.nlp.util.IntervalTree$TreeNode,edu.stanford.nlp.util.HasInterval)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.IntervalTree:boolean remove(edu.stanford.nlp.util.IntervalTree$TreeNode,edu.stanford.nlp.util.HasInterval)",
            "edu.stanford.nlp.util.IntervalTree:boolean remove(edu.stanford.nlp.util.HasInterval)"
        ]
    },
    "edu.stanford.nlp.util.IntervalTree:void adjustUpwards(edu.stanford.nlp.util.IntervalTree$TreeNode,edu.stanford.nlp.util.IntervalTree$TreeNode)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.IntervalTree:boolean remove(edu.stanford.nlp.util.IntervalTree$TreeNode,edu.stanford.nlp.util.HasInterval)",
            "edu.stanford.nlp.util.IntervalTree:void adjust(edu.stanford.nlp.util.IntervalTree$TreeNode)",
            "edu.stanford.nlp.util.IntervalTree:void adjustUpwards(edu.stanford.nlp.util.IntervalTree$TreeNode)"
        ]
    },
    "edu.stanford.nlp.util.IntervalTree:boolean add(edu.stanford.nlp.util.IntervalTree$TreeNode,edu.stanford.nlp.util.HasInterval,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.IntervalTree:boolean add(edu.stanford.nlp.util.IntervalTree$TreeNode,edu.stanford.nlp.util.HasInterval)",
            "edu.stanford.nlp.util.IntervalTree:boolean add(edu.stanford.nlp.util.HasInterval)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.MatchedExpression:boolean extractAnnotation(java.util.List,edu.stanford.nlp.pipeline.CoreMapAggregator)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression:boolean extractAnnotation(edu.stanford.nlp.ling.tokensregex.Env,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringMatchedExpressionExtractor:edu.stanford.nlp.ling.tokensregex.MatchedExpression apply(java.util.regex.MatchResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringMatchedExpressionExtractor:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$BasicSequenceExtractRule:boolean extract(java.util.List,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$BasicSequenceExtractRule:boolean extract(java.lang.Object,java.util.List)"
        ]
    },
    "edu.stanford.nlp.util.Interval:edu.stanford.nlp.util.Interval toInterval(java.lang.Comparable,java.lang.Comparable)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Interval:edu.stanford.nlp.util.Interval intersect(edu.stanford.nlp.util.Interval)",
            "edu.stanford.nlp.ling.tokensregex.MultiCoreMapNodePattern:java.util.Collection match(java.util.List,int)",
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression:edu.stanford.nlp.util.Interval lambda$static$31(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.util.IntervalTree:void getOverlapping(edu.stanford.nlp.util.IntervalTree$TreeNode,java.lang.Comparable,java.util.List)",
            "edu.stanford.nlp.ie.NumberNormalizer:edu.stanford.nlp.util.Interval lambda$findAndAnnotateNumericExpressionsWithRanges$30(java.lang.Integer,edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.ie.NumberNormalizer:edu.stanford.nlp.util.Interval lambda$findAndMergeNumbers$29(java.lang.Integer,edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.util.IntervalTree:boolean containsInterval(edu.stanford.nlp.util.IntervalTree,java.lang.Comparable,boolean)",
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression:edu.stanford.nlp.util.Interval lambda$static$32(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.util.Interval:edu.stanford.nlp.util.Interval expand(edu.stanford.nlp.util.Interval)",
            "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$PartialApproxMatch:edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$PartialApproxMatch withMatch(edu.stanford.nlp.ling.tokensregex.matcher.MatchCostFunction,double,java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression:boolean extractAnnotation(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.pipeline.CoreMapAggregator)",
            "edu.stanford.nlp.util.IntervalTree:boolean overlaps(edu.stanford.nlp.util.IntervalTree$TreeNode,java.lang.Comparable)",
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:edu.stanford.nlp.util.Interval lambda$extractCoreMapsMergedWithTokens$38(java.lang.Integer,edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.Match:edu.stanford.nlp.util.Interval getInterval()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.ChunkAnnotationUtils:edu.stanford.nlp.util.Interval getChunkOffsetsUsingCharOffsets(java.util.List,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression:boolean extractAnnotation(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.pipeline.CoreMapAggregator)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.MatchedExpression:boolean extractAnnotation(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.pipeline.CoreMapAggregator)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression:boolean extractAnnotation(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchResult$GroupToIntervalFunc:edu.stanford.nlp.util.Interval apply(java.util.regex.MatchResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult:edu.stanford.nlp.util.Interval getInterval()",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchResult$GroupToIntervalFunc:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequenceMatchedExpressionExtractor:edu.stanford.nlp.ling.tokensregex.MatchedExpression apply(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequenceMatchedExpressionExtractor:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.PhraseTable$PhraseMatch:edu.stanford.nlp.util.Interval getInterval()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.Pair$ByFirstReversePairComparator:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.IntervalTree:void getOverlapping(edu.stanford.nlp.util.IntervalTree$TreeNode,java.lang.Comparable,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.IntervalTree:java.util.List getOverlapping(edu.stanford.nlp.util.IntervalTree$TreeNode,java.lang.Comparable)"
        ]
    },
    "edu.stanford.nlp.util.IntervalTree:java.util.List getOverlapping(edu.stanford.nlp.util.IntervalTree$TreeNode,edu.stanford.nlp.util.Interval)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.IntervalTree:java.util.List getOverlapping(edu.stanford.nlp.util.HasInterval)"
        ]
    },
    "edu.stanford.nlp.util.Pair$BySecondPairComparator:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.Interval:boolean contains(edu.stanford.nlp.util.Interval)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.Pair$ByFirstPairComparator:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.Triple:int compareTo(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Interval:java.lang.Comparable min(java.lang.Comparable,java.lang.Comparable)",
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:int compare(edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry,edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry)",
            "edu.stanford.nlp.util.Pair$BySecondReversePairComparator:int compare(edu.stanford.nlp.util.Pair,edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.Interval:int getRelationFlags(edu.stanford.nlp.util.Interval)",
            "edu.stanford.nlp.util.Interval:boolean overlaps(edu.stanford.nlp.util.Interval)",
            "edu.stanford.nlp.util.Interval:java.lang.Comparable max(java.lang.Comparable,java.lang.Comparable)",
            "edu.stanford.nlp.util.Interval:edu.stanford.nlp.util.Interval toInterval(java.lang.Comparable,java.lang.Comparable,int)",
            "edu.stanford.nlp.util.Pair$ByFirstReversePairComparator:int compare(edu.stanford.nlp.util.Pair,edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.IntervalTree:void getOverlapping(edu.stanford.nlp.util.IntervalTree$TreeNode,edu.stanford.nlp.util.Interval,java.util.List)",
            "edu.stanford.nlp.util.Pair$BySecondPairComparator:int compare(edu.stanford.nlp.util.Pair,edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.Interval:boolean containsOpen(java.lang.Comparable)",
            "edu.stanford.nlp.util.Pair$ByFirstPairComparator:int compare(edu.stanford.nlp.util.Pair,edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.Triple:int compareTo(edu.stanford.nlp.util.Triple)",
            "edu.stanford.nlp.util.Interval:edu.stanford.nlp.util.Interval$RelType getRelation(edu.stanford.nlp.util.Interval)",
            "edu.stanford.nlp.stats.IntCounter$NaturalComparator:int compare(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.util.IntervalTree:boolean contains(edu.stanford.nlp.util.IntervalTree$TreeNode,edu.stanford.nlp.util.Interval,java.util.function.Function)",
            "edu.stanford.nlp.util.Interval:void <init>(java.lang.Comparable,java.lang.Comparable,int)",
            "edu.stanford.nlp.util.Interval:boolean contains(java.lang.Comparable)",
            "edu.stanford.nlp.util.IntervalTree:boolean overlaps(edu.stanford.nlp.util.IntervalTree$TreeNode,edu.stanford.nlp.util.Interval)",
            "edu.stanford.nlp.util.Pair:int compareTo(edu.stanford.nlp.util.Pair)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.MatchedExpression$4:int compare(edu.stanford.nlp.ling.tokensregex.MatchedExpression,edu.stanford.nlp.ling.tokensregex.MatchedExpression)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression$4:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.stats.IntCounter:java.lang.Object argmax(java.util.Comparator)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.IntCounter:java.lang.Object argmax()"
        ]
    },
    "edu.stanford.nlp.util.ArrayHeap:int decreaseKey(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void relaxTempHook()",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void relaxTempEdge()",
            "edu.stanford.nlp.util.ArrayHeap:boolean add(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.stats.IntCounter:java.lang.Object argmin(java.util.Comparator)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.IntCounter:java.lang.Object argmin()"
        ]
    },
    "edu.stanford.nlp.util.ArrayHeap:int compare(edu.stanford.nlp.util.ArrayHeap$HeapEntry,edu.stanford.nlp.util.ArrayHeap$HeapEntry)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.ArrayHeap:int heapifyUp(edu.stanford.nlp.util.ArrayHeap$HeapEntry)",
            "edu.stanford.nlp.util.ArrayHeap:void heapifyDown(edu.stanford.nlp.util.ArrayHeap$HeapEntry)",
            "edu.stanford.nlp.util.ArrayHeap:void verify()"
        ]
    },
    "edu.stanford.nlp.util.IntervalTree:boolean contains(edu.stanford.nlp.util.IntervalTree,edu.stanford.nlp.util.Interval,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.IntervalTree:boolean containsInterval(edu.stanford.nlp.util.IntervalTree,edu.stanford.nlp.util.Interval,boolean)",
            "edu.stanford.nlp.util.IntervalTree:boolean containsValue(edu.stanford.nlp.util.IntervalTree,edu.stanford.nlp.util.HasInterval)"
        ]
    },
    "edu.stanford.nlp.util.Interval:edu.stanford.nlp.util.Interval toValidInterval(java.lang.Comparable,java.lang.Comparable,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Interval:edu.stanford.nlp.util.Interval toValidInterval(java.lang.Comparable,java.lang.Comparable)"
        ]
    },
    "edu.stanford.nlp.util.FuzzyInterval:void <init>(edu.stanford.nlp.util.FuzzyInterval$FuzzyComparable,edu.stanford.nlp.util.FuzzyInterval$FuzzyComparable,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.FuzzyInterval:edu.stanford.nlp.util.FuzzyInterval toValidInterval(edu.stanford.nlp.util.FuzzyInterval$FuzzyComparable,edu.stanford.nlp.util.FuzzyInterval$FuzzyComparable,int)",
            "edu.stanford.nlp.util.FuzzyInterval:edu.stanford.nlp.util.FuzzyInterval toInterval(edu.stanford.nlp.util.FuzzyInterval$FuzzyComparable,edu.stanford.nlp.util.FuzzyInterval$FuzzyComparable,int)"
        ]
    },
    "edu.stanford.nlp.util.IntervalTree:boolean overlaps(edu.stanford.nlp.util.HasInterval)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.IntervalTree:boolean addNonOverlapping(edu.stanford.nlp.util.HasInterval)"
        ]
    },
    "edu.stanford.nlp.util.IntervalTree:boolean overlaps(edu.stanford.nlp.util.IntervalTree$TreeNode,java.lang.Comparable)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.Pair$MutableInternedPair:int compareTo(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.MatchedExpression$3:int compare(edu.stanford.nlp.ling.tokensregex.MatchedExpression,edu.stanford.nlp.ling.tokensregex.MatchedExpression)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression$3:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.util.Pair:int compareTo(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Interval:java.lang.Comparable min(java.lang.Comparable,java.lang.Comparable)",
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:int compare(edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry,edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry)",
            "edu.stanford.nlp.util.Pair$BySecondReversePairComparator:int compare(edu.stanford.nlp.util.Pair,edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.Interval:int getRelationFlags(edu.stanford.nlp.util.Interval)",
            "edu.stanford.nlp.util.Interval:boolean overlaps(edu.stanford.nlp.util.Interval)",
            "edu.stanford.nlp.util.Interval:java.lang.Comparable max(java.lang.Comparable,java.lang.Comparable)",
            "edu.stanford.nlp.util.Interval:edu.stanford.nlp.util.Interval toInterval(java.lang.Comparable,java.lang.Comparable,int)",
            "edu.stanford.nlp.util.Pair$ByFirstReversePairComparator:int compare(edu.stanford.nlp.util.Pair,edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.IntervalTree:void getOverlapping(edu.stanford.nlp.util.IntervalTree$TreeNode,edu.stanford.nlp.util.Interval,java.util.List)",
            "edu.stanford.nlp.util.Pair$BySecondPairComparator:int compare(edu.stanford.nlp.util.Pair,edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.Interval:boolean containsOpen(java.lang.Comparable)",
            "edu.stanford.nlp.util.Pair$ByFirstPairComparator:int compare(edu.stanford.nlp.util.Pair,edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.Triple:int compareTo(edu.stanford.nlp.util.Triple)",
            "edu.stanford.nlp.util.Interval:edu.stanford.nlp.util.Interval$RelType getRelation(edu.stanford.nlp.util.Interval)",
            "edu.stanford.nlp.stats.IntCounter$NaturalComparator:int compare(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.util.IntervalTree:boolean contains(edu.stanford.nlp.util.IntervalTree$TreeNode,edu.stanford.nlp.util.Interval,java.util.function.Function)",
            "edu.stanford.nlp.util.Interval:void <init>(java.lang.Comparable,java.lang.Comparable,int)",
            "edu.stanford.nlp.util.Interval:boolean contains(java.lang.Comparable)",
            "edu.stanford.nlp.util.IntervalTree:boolean overlaps(edu.stanford.nlp.util.IntervalTree$TreeNode,edu.stanford.nlp.util.Interval)",
            "edu.stanford.nlp.util.Pair:int compareTo(edu.stanford.nlp.util.Pair)"
        ]
    },
    "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:java.lang.String normalizedNumberStringQuiet(java.lang.String,double,java.lang.String,java.lang.Number)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:java.lang.String normalizedOrdinalStringQuiet(java.lang.String,java.lang.Number)",
            "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:java.lang.String normalizedMoneyString(java.lang.String,java.lang.Number)",
            "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:java.lang.String normalizedNumberString(java.lang.String,java.lang.String,java.lang.Number)",
            "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:java.lang.String normalizedPercentString(java.lang.String,java.lang.Number)",
            "edu.stanford.nlp.ie.pascal.ISODateInstance:java.lang.String foundMiscYearPattern(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:java.lang.String toXml(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:java.lang.String toString()"
        ]
    },
    "edu.stanford.nlp.time.GUTimeAnnotator:java.util.List toTimexCoreMaps(org.w3c.dom.Element,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.GUTimeAnnotator:void annotate(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:edu.stanford.nlp.trees.Tree getTree(edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser$Vertex,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:java.util.List getKBestParses(int)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:edu.stanford.nlp.trees.Tree getTree(edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser$Vertex,int,int)"
        ]
    },
    "edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve:java.util.List getOrderedAntecedents(int,int,java.util.List,java.util.List,edu.stanford.nlp.dcoref.Mention,int,java.util.Map,edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void printTopK(java.util.logging.Logger,edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.Semantics)",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void coreference(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:void <init>(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:java.lang.String normalizedMoneyString(java.lang.String,java.lang.Number)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:java.util.List processEntity(java.util.List,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:void <init>(edu.stanford.nlp.parser.shiftreduce.PerceptronModel)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:void trainModel(java.lang.String,edu.stanford.nlp.tagger.common.Tagger,java.util.Random,java.util.List,java.util.List,edu.stanford.nlp.trees.Treebank,int,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.Alignment:java.lang.String toString(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.Alignment:java.lang.String toString()"
        ]
    },
    "edu.stanford.nlp.trees.international.negra.NegraHeadFinder:edu.stanford.nlp.trees.Tree determineNonTrivialHead(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.AbstractCollinsHeadFinder:edu.stanford.nlp.trees.Tree determineHead(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.scoref.MetadataWriter:void process(int,edu.stanford.nlp.hcoref.data.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.DocumentProcessor:void run(edu.stanford.nlp.hcoref.CorefDocMaker)"
        ]
    },
    "edu.stanford.nlp.wordseg.Sighan2005DocumentReaderAndWriter:void tagLatticeToAnswerLattice(edu.stanford.nlp.fsm.DFSAState,edu.stanford.nlp.fsm.DFSAState,java.lang.StringBuilder,edu.stanford.nlp.util.MutableInteger,int,double,java.util.Map,edu.stanford.nlp.fsm.DFSA,edu.stanford.nlp.ling.CoreLabel[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.wordseg.Sighan2005DocumentReaderAndWriter:void tagLatticeToAnswerLattice(edu.stanford.nlp.fsm.DFSAState,edu.stanford.nlp.fsm.DFSAState,java.lang.StringBuilder,edu.stanford.nlp.util.MutableInteger,int,double,java.util.Map,edu.stanford.nlp.fsm.DFSA,edu.stanford.nlp.ling.CoreLabel[])",
            "edu.stanford.nlp.wordseg.Sighan2005DocumentReaderAndWriter:void printLattice(edu.stanford.nlp.fsm.DFSA,java.util.List,java.io.PrintWriter)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.HookChart:java.util.Collection getPostHooks(edu.stanford.nlp.parser.lexparser.Edge)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processEdge(edu.stanford.nlp.parser.lexparser.Edge)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.VariableStrings:java.lang.String getString(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void goToNextTreeNodeMatch()",
            "edu.stanford.nlp.trees.tregex.TregexMatcher:java.lang.String getVariableString(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.graph.DijkstraShortestPath:java.util.List getShortestPath(edu.stanford.nlp.graph.Graph,java.lang.Object,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.List getShortestPath(java.lang.Object,java.lang.Object,boolean)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceToken:java.lang.String isTriggerWord(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String sentenceStringWithMention(int,edu.stanford.nlp.hcoref.data.Document,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String printErrorLog(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.stats.Counter,int,edu.stanford.nlp.hcoref.data.Dictionaries,edu.stanford.nlp.hcoref.sieve.RFSieve)",
            "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String printRawDoc(edu.stanford.nlp.hcoref.data.Document,boolean,boolean)",
            "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String printErrorLogDcoref(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,int,java.lang.String)",
            "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String printMentionDetectionLog(edu.stanford.nlp.hcoref.data.Document)"
        ]
    },
    "edu.stanford.nlp.scoref.BestFirstCorefSystem:void runCoref(edu.stanford.nlp.hcoref.data.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.StatisticalCorefSystem:void annotate(edu.stanford.nlp.pipeline.Annotation,boolean)",
            "edu.stanford.nlp.scoref.StatisticalCorefSystem$1:void process(int,edu.stanford.nlp.hcoref.data.Document)"
        ]
    },
    "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void treatCC(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void collapseDependencies(java.util.List,boolean,edu.stanford.nlp.trees.GrammaticalStructure$Extras)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.HookChart:java.util.Collection getRealEdgesWithR(int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void triggerHooks(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void triggerAllHooks(edu.stanford.nlp.parser.lexparser.Edge)"
        ]
    },
    "edu.stanford.nlp.neural.Embedding:org.ejml.simple.SimpleMatrix getUnknownWordVector()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.UnaryGrammar:edu.stanford.nlp.parser.lexparser.UnaryRule getRule(edu.stanford.nlp.parser.lexparser.UnaryRule)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void collapsePrepAndPoss(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void collapseDependencies(java.util.List,boolean,edu.stanford.nlp.trees.GrammaticalStructure$Extras)"
        ]
    },
    "edu.stanford.nlp.neural.rnn.TopNGramRecord:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.Dictionaries:java.lang.String lookupCanonicalAmericanStateName(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Mention:boolean isDemonym(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$ALIGNMENT$1:void advance()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$ALIGNMENT:void setAlignment(edu.stanford.nlp.semgraph.semgrex.Alignment,boolean,edu.stanford.nlp.semgraph.semgrex.GraphRelation$SearchNodeIterator)",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$SearchNodeIterator:edu.stanford.nlp.ling.IndexedWord next()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.Lattice:void addEdge(edu.stanford.nlp.parser.lexparser.LatticeEdge)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.Lattice:void addBoundary()"
        ]
    },
    "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void printTopK(java.util.logging.Logger,edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.Semantics)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:double runAndScoreCoref(edu.stanford.nlp.dcoref.SieveCoreferenceSystem,edu.stanford.nlp.dcoref.MentionExtractor,java.util.Properties,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph:void deleteDuplicateEdges()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:void deleteDuplicateEdges()"
        ]
    },
    "edu.stanford.nlp.international.arabic.Buckwalter:java.lang.String convert(java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.arabic.Buckwalter:java.lang.String unicodeToBuckwalter(java.lang.String)",
            "edu.stanford.nlp.international.arabic.Buckwalter:java.lang.String buckwalterToUnicode(java.lang.String)",
            "edu.stanford.nlp.international.arabic.Buckwalter:java.lang.String apply(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.Dictionary:int getCountThat(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.neural.Embedding:org.ejml.simple.SimpleMatrix get(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.SentimentModel:void readWordVectors()",
            "edu.stanford.nlp.parser.dvparser.DVModel:void readWordVectors()"
        ]
    },
    "edu.stanford.nlp.patterns.InvertedIndexByTokens:void add(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.InvertedIndexByTokens:void add(java.util.List,java.lang.String,boolean)"
        ]
    },
    "edu.stanford.nlp.classify.RVFDataset:void printFullFeatureMatrixWithValues(java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:void printStats()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:java.lang.Object get(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$StandardTemporalType:edu.stanford.nlp.time.SUTime$Temporal create(edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.Dictionary:edu.stanford.nlp.tagger.maxent.TagCount get(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.Dictionary:java.lang.String[] getTags(java.lang.String)",
            "edu.stanford.nlp.tagger.maxent.Dictionary:void save(java.io.DataOutputStream)",
            "edu.stanford.nlp.tagger.maxent.Dictionary:int getAmbClass(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher:java.lang.String getRelnString(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Mention:edu.stanford.nlp.util.Pair findDependentVerb(edu.stanford.nlp.hcoref.data.Mention)",
            "edu.stanford.nlp.naturalli.OpenIE:java.util.List entailmentsFromClause(edu.stanford.nlp.naturalli.SentenceFragment)",
            "edu.stanford.nlp.dcoref.Mention:edu.stanford.nlp.util.Pair findDependentVerb(edu.stanford.nlp.dcoref.Mention)"
        ]
    },
    "edu.stanford.nlp.dcoref.Mention:void setSemantics(edu.stanford.nlp.dcoref.Dictionaries,edu.stanford.nlp.dcoref.Semantics,edu.stanford.nlp.dcoref.MentionExtractor)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Mention:void process(edu.stanford.nlp.dcoref.Dictionaries,edu.stanford.nlp.dcoref.Semantics,edu.stanford.nlp.dcoref.MentionExtractor)"
        ]
    },
    "edu.stanford.nlp.dcoref.ScorerBCubed:void calculateRecallBall(edu.stanford.nlp.dcoref.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.ScorerBCubed:void calculateRecall(edu.stanford.nlp.dcoref.Document)"
        ]
    },
    "edu.stanford.nlp.dcoref.ScorerMUC:void calculatePrecision(edu.stanford.nlp.dcoref.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.ScorerPairwise:void calculateRecall(edu.stanford.nlp.dcoref.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.CustomAnnotationSerializer:int countMentions(edu.stanford.nlp.hcoref.data.CorefChain)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.CustomAnnotationSerializer:void saveCorefChain(java.io.PrintWriter,int,edu.stanford.nlp.hcoref.data.CorefChain)"
        ]
    },
    "edu.stanford.nlp.dcoref.Document:edu.stanford.nlp.dcoref.SpeakerInfo getSpeakerInfo(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Rules:boolean antecedentMatchesMentionSpeakerAnnotation(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Document)",
            "edu.stanford.nlp.dcoref.Rules:int getSpeakerClusterId(edu.stanford.nlp.dcoref.Document,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.util.logging.OutputHandler:boolean formatChannel(java.lang.StringBuilder,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.OutputHandler:java.util.List handle(edu.stanford.nlp.util.logging.Redwood$Record)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.common.StringDictionary:java.lang.String get(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:boolean isApposition(int,int)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceToken:java.lang.String display()",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:boolean isChunkHead(int)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:int findChunkEnd(int)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:int countCommas(int,int)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:int countVerbs(int,int)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:int findChunkStart(int)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:boolean sameChunk(int,int)"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:int addMap(java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.MentionExtractor:java.util.List arrange(edu.stanford.nlp.pipeline.Annotation,java.util.List,java.util.List,java.util.List,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.MentionExtractor:edu.stanford.nlp.dcoref.Document arrange(edu.stanford.nlp.pipeline.Annotation,java.util.List,java.util.List,java.util.List,java.util.List,boolean)"
        ]
    },
    "edu.stanford.nlp.stats.TwoDimensionalIntCounter:int size()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.ThreeDimensionalMap:edu.stanford.nlp.util.TwoDimensionalMap getTwoDimensionalMap(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.ThreeDimensionalMap:java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.util.ThreeDimensionalMap:edu.stanford.nlp.util.TwoDimensionalMap get(java.lang.Object)",
            "edu.stanford.nlp.util.ThreeDimensionalMap:java.lang.Object get(java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void outputBetas()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:boolean recalculateBetas(boolean)"
        ]
    },
    "edu.stanford.nlp.dcoref.Document:java.lang.String findNextParagraphSpeaker(java.util.List,int,edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Document:java.lang.String findParagraphSpeaker(java.util.List,int,java.lang.String,int,edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter:double getCount(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter:double getCount(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.stats.GeneralizedCounter:double[] getCounts(java.util.List)",
            "edu.stanford.nlp.stats.GeneralizedCounter$OneDimensionalCounterView:double getCount(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ie.NERFeatureFactory:void readGazette(java.io.BufferedReader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.NERFeatureFactory:void initGazette()"
        ]
    },
    "edu.stanford.nlp.maxent.Feature:double getVal(int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.maxent.iis.LambdaSolve:double GSFSecond(double,edu.stanford.nlp.maxent.Feature)",
            "edu.stanford.nlp.maxent.iis.LambdaSolve:double pcondFAlfa(double,int,int,edu.stanford.nlp.maxent.Feature)",
            "edu.stanford.nlp.maxent.iis.LambdaSolve:double ZAlfa(double,edu.stanford.nlp.maxent.Feature,int)"
        ]
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph:boolean removeEdge(java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:boolean removeEdge(edu.stanford.nlp.semgraph.SemanticGraphEdge)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void buildGrammars()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void extract(java.util.Collection,double,java.util.Collection,double)"
        ]
    },
    "edu.stanford.nlp.hcoref.Rules:boolean contextIncompatible(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.dcoref.ACEMentionExtractor:void printRawDoc(java.util.List,java.util.List,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.ACEMentionExtractor:edu.stanford.nlp.dcoref.Document nextDoc()"
        ]
    },
    "edu.stanford.nlp.stats.TwoDimensionalCounter:edu.stanford.nlp.stats.ClassicCounter getCounter(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Treebanks:void countTaggings(edu.stanford.nlp.trees.Treebank,java.io.PrintWriter)",
            "edu.stanford.nlp.patterns.ScorePhrases:double numNonRedundantPatterns(edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.patterns.CandidatePhrase)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:edu.stanford.nlp.stats.Counter sumInnerCounter()",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:void subtractAll(java.lang.Object,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:edu.stanford.nlp.stats.ClassicCounter flatten()",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.stats.Counter getPatterns(java.lang.String,java.util.Set,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.Counter,java.util.Set)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:double remove(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.TwoDimensionalCounter scale(edu.stanford.nlp.stats.TwoDimensionalCounter,double)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:edu.stanford.nlp.stats.Counter getCounter(java.lang.Object)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:edu.stanford.nlp.stats.TwoDimensionalCounter reverseIndexOrder(edu.stanford.nlp.stats.TwoDimensionalCounter)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:void addAll(edu.stanford.nlp.stats.TwoDimensionalCounterInterface)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:java.util.Set secondKeySet()",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:void addAll(java.lang.Object,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:double getCount(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter chooseTopWords(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.Counter,java.util.Set,double)",
            "edu.stanford.nlp.stats.Counters:void addInPlace(edu.stanford.nlp.stats.TwoDimensionalCounter,double)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:java.lang.String toString()",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void outputCalibrationInfo(java.io.PrintWriter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter)",
            "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter learnNewPhrasesPrivate(java.lang.String,edu.stanford.nlp.patterns.surface.PatternsForEachToken,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.util.Set,edu.stanford.nlp.util.CollectionValuedMap,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,java.lang.String,java.util.Set,boolean)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:edu.stanford.nlp.stats.ClassicCounter setCounter(java.lang.Object,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:void subtractAll(edu.stanford.nlp.stats.TwoDimensionalCounterInterface,boolean)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:void incrementCount(java.lang.Object,java.lang.Object,double)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:void setCount(java.lang.Object,java.lang.Object,double)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:void removeZeroCounts()",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:double totalCount(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:java.util.Set getAllTranslations(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.dcoref.CorefChain:java.util.Set getMentionsWithSameHead(edu.stanford.nlp.util.IntPair)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.CorefChain:java.util.Set getMentionsWithSameHead(int,int)"
        ]
    },
    "edu.stanford.nlp.dcoref.Document:void processDiscourse(edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Document:void <init>(edu.stanford.nlp.pipeline.Annotation,java.util.List,java.util.List,edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.parser.metrics.LeafAncestorEval:boolean validateCommandLine(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.LeafAncestorEval:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.Dictionary:int sum(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:boolean isRare(java.lang.String)",
            "edu.stanford.nlp.tagger.maxent.AmbiguityClasses:int getClass(java.lang.String,edu.stanford.nlp.tagger.maxent.Dictionary,int,edu.stanford.nlp.tagger.maxent.TTags)"
        ]
    },
    "edu.stanford.nlp.process.DistSimClassifier:java.lang.String distSimClass(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EnglishUnknownWordModel:void getSignature8(java.lang.String,java.lang.StringBuilder)"
        ]
    },
    "edu.stanford.nlp.ling.AnnotationLookup:java.lang.Class getValueType(java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ChunkAnnotationUtils:void annotateChunk(edu.stanford.nlp.util.CoreMap,java.util.Map)",
            "edu.stanford.nlp.ling.CoreLabel:void initFromStrings(java.lang.String[],java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:java.util.Map getReverseMap()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.CorefPrinter:boolean isFirstMention(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String printErrorLog(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.stats.Counter,int,edu.stanford.nlp.hcoref.data.Dictionaries,edu.stanford.nlp.hcoref.sieve.RFSieve)",
            "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String printErrorLogDcoref(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,int,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Map mapTreeToSg(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.Rules:int getSpeakerClusterId(edu.stanford.nlp.hcoref.data.Document,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.Rules:boolean entityPersonDisagree(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.hcoref.Rules:boolean entitySameSpeaker(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)"
        ]
    },
    "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader:boolean include(java.util.Map,edu.stanford.nlp.util.Pair,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader:void writeTabSep(java.io.PrintWriter,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CollectionValuedMap)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.common.StringDictionary:edu.stanford.nlp.ie.machinereading.common.StringDictionary$IndexAndCount getIndexAndCount(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.common.StringDictionary:int getCount(int)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.FileTreeModel:void findLoadableFiles(java.util.EnumMap,java.io.File[],java.util.List,edu.stanford.nlp.trees.tregex.gui.FileTreeNode)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.FileTreeModel:void findLoadableFiles(java.util.EnumMap,java.io.File[],java.util.List,edu.stanford.nlp.trees.tregex.gui.FileTreeNode)",
            "edu.stanford.nlp.trees.tregex.gui.FileTreeModel:void addFileFolder(java.util.EnumMap,java.io.File[])"
        ]
    },
    "edu.stanford.nlp.util.TwoDimensionalCollectionValuedMap:edu.stanford.nlp.util.CollectionValuedMap getCollectionValuedMap(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.TwoDimensionalCollectionValuedMap:java.util.Set secondKeySet()",
            "edu.stanford.nlp.util.TwoDimensionalCollectionValuedMap:java.util.Collection get(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.util.TwoDimensionalCollectionValuedMap:java.util.Collection values()"
        ]
    },
    "edu.stanford.nlp.stats.ClassicCounter:double getCount(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:java.lang.String normalizedNumberStringQuiet(java.lang.String,double,java.lang.String,java.lang.Number)",
            "edu.stanford.nlp.trees.Treebanks:void countTaggings(edu.stanford.nlp.trees.Treebank,java.io.PrintWriter)",
            "edu.stanford.nlp.parser.lexparser.ChineseUnknownWordModel:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.FrenchUnknownWordModel:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,int,double,double,double,java.lang.String)",
            "edu.stanford.nlp.fsm.TransducerGraph:edu.stanford.nlp.fsm.TransducerGraph createGraphFromPaths(edu.stanford.nlp.stats.ClassicCounter,int)",
            "edu.stanford.nlp.parser.lexparser.EnglishUnknownWordModel:double scoreProbTagGivenWordSignature(edu.stanford.nlp.parser.lexparser.IntTaggedWord,int,double,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.FrenchUnknownWordModelTrainer:void train(edu.stanford.nlp.ling.TaggedWord,int,double)",
            "edu.stanford.nlp.stats.Counters:void logInPlace(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.Counters$3:java.lang.Double get(java.lang.Object)",
            "edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams$1:edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar formResult()",
            "edu.stanford.nlp.classify.LinearClassifier:void justificationOfRVFDatum(edu.stanford.nlp.ling.RVFDatum,java.io.PrintWriter)",
            "edu.stanford.nlp.parser.lexparser.ChineseSimWordAvgDepGrammar:double probTBwithSimWords(edu.stanford.nlp.parser.lexparser.IntDependency)",
            "edu.stanford.nlp.stats.Counters:double dotProduct(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.parser.lexparser.ChineseUnknownWordModelTrainer:edu.stanford.nlp.parser.lexparser.UnknownWordModel finishTraining()",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter scale(edu.stanford.nlp.stats.Counter,double)",
            "edu.stanford.nlp.ling.RVFDatum:double getFeatureCount(java.lang.Object)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void printResults(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.parser.metrics.TaggingEval:void display(boolean,java.io.PrintWriter)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:edu.stanford.nlp.stats.TwoDimensionalCounter reverseIndexOrder(edu.stanford.nlp.stats.TwoDimensionalCounter)",
            "edu.stanford.nlp.patterns.ScorePatternsFreqBased:edu.stanford.nlp.stats.Counter score()",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void writeObject(java.io.ObjectOutputStream)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:void testExample(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset,java.util.List,edu.stanford.nlp.stats.Counter,int)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:double getCount(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution getDistributionWithReservedMass(edu.stanford.nlp.stats.Counter,double)",
            "edu.stanford.nlp.fsm.QuasiDeterminizer:edu.stanford.nlp.stats.ClassicCounter computeLambda(edu.stanford.nlp.fsm.TransducerGraph)",
            "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter chooseTopWords(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.Counter,java.util.Set,double)",
            "edu.stanford.nlp.patterns.PhraseScorer:double getGoogleNgramScore(edu.stanford.nlp.patterns.CandidatePhrase)",
            "edu.stanford.nlp.stats.Counters:boolean equals(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,double)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter product(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:java.lang.String toString()",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recalculateTemporaryBetas(boolean,java.util.Map,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.ThreeDimensionalMap)",
            "edu.stanford.nlp.parser.metrics.EvalbByCat:void display(boolean,java.io.PrintWriter)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void outputCalibrationInfo(java.io.PrintWriter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter)",
            "edu.stanford.nlp.ie.pascal.ISODateInstance:java.lang.String foundMiscYearPattern(java.lang.String)",
            "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter learnNewPhrasesPrivate(java.lang.String,edu.stanford.nlp.patterns.surface.PatternsForEachToken,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.util.Set,edu.stanford.nlp.util.CollectionValuedMap,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,java.lang.String,java.util.Set,boolean)",
            "edu.stanford.nlp.patterns.PhraseScorer:double getPatTFIDFScore(edu.stanford.nlp.patterns.CandidatePhrase,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String sentenceStringWithMention(int,edu.stanford.nlp.hcoref.data.Document,boolean,boolean)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void readObject(java.io.ObjectInputStream)",
            "edu.stanford.nlp.classify.RVFDataset:edu.stanford.nlp.ling.RVFDatum scaleDatumGaussian(edu.stanford.nlp.ling.RVFDatum)",
            "edu.stanford.nlp.scoref.BestFirstCorefSystem:void runCoref(edu.stanford.nlp.hcoref.data.Document)",
            "edu.stanford.nlp.classify.GeneralizedExpectationObjectiveFunction:void calculate(double[])",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void main(java.lang.String[])",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter average(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void printRawDoc(edu.stanford.nlp.dcoref.Document,boolean)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recalculateMergedBetas(java.util.Map)",
            "edu.stanford.nlp.classify.Dataset:edu.stanford.nlp.ling.RVFDatum getL1NormalizedTFIDFDatum(edu.stanford.nlp.ling.Datum,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.ie.pascal.ISODateInstance:boolean extractDay(java.lang.String)",
            "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter probabilityOf(int[])",
            "edu.stanford.nlp.parser.lexparser.ArabicUnknownWordModel:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,int,double,double,double,java.lang.String)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:void classifyNoSeq(java.util.List)",
            "edu.stanford.nlp.ie.machinereading.RelationExtractorResultsPrinter:void printResultsInternal(java.io.PrintWriter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.ClassicCounter)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswersKBest(edu.stanford.nlp.objectbank.ObjectBank,int,java.io.PrintWriter,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:double probLemmaTag(java.lang.String,int,int,int)",
            "edu.stanford.nlp.parser.lexparser.ChineseUnknownWordModelTrainer:void train(edu.stanford.nlp.ling.TaggedWord,int,double)",
            "edu.stanford.nlp.scoref.Clusterer:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.scoref.ClustererDataLoader$ClustererDoc,edu.stanford.nlp.scoref.Clusterer$Cluster,edu.stanford.nlp.scoref.Clusterer$Cluster,edu.stanford.nlp.scoref.Clusterer$GlobalFeatures)",
            "edu.stanford.nlp.stats.Counters:java.util.Set keysAbove(edu.stanford.nlp.stats.Counter,double)",
            "edu.stanford.nlp.classify.LogisticClassifier:double scoreOf(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:void clean()",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:double evaluateCoverage(java.util.Collection,java.util.Set,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.parser.lexparser.BaseUnknownWordModelTrainer:edu.stanford.nlp.parser.lexparser.UnknownWordModel finishTraining()",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:edu.stanford.nlp.stats.ClassicCounter flatten()",
            "edu.stanford.nlp.ie.ner.CMMClassifier:double loglikelihood(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.SpanishUnknownWordModelTrainer:void train(edu.stanford.nlp.ling.TaggedWord,int,double)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter linearCombination(edu.stanford.nlp.stats.Counter,double,edu.stanford.nlp.stats.Counter,double)",
            "edu.stanford.nlp.hcoref.rf.DecisionTree:double probabilityOfTrue(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:edu.stanford.nlp.stats.Counter convert2OneDim(java.lang.String,java.util.function.Function,java.util.Set,edu.stanford.nlp.stats.TwoDimensionalCounter,boolean,boolean,edu.stanford.nlp.stats.Counter,boolean)",
            "edu.stanford.nlp.patterns.CandidatePhrase:double getFeatureValue(java.lang.String)",
            "edu.stanford.nlp.stats.Counters$3:java.lang.Double put(java.lang.Object,java.lang.Double)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void buildPT_T()",
            "edu.stanford.nlp.parser.lexparser.GrammarCompactor:edu.stanford.nlp.util.Pair convertGraphsToGrammar(java.util.Set,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.stats.Counters:java.lang.Object argmax(edu.stanford.nlp.stats.Counter,java.util.Comparator,java.lang.Object)",
            "edu.stanford.nlp.stats.Counters:java.lang.Object sample(edu.stanford.nlp.stats.Counter,java.util.Random)",
            "edu.stanford.nlp.scoref.SimpleLinearClassifier:int lambda$getWeightVector$205(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.scoref.Clusterer:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.scoref.ClustererDataLoader$ClustererDoc,java.util.List,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.sentiment.AbstractEvaluate:void printLengthAccuracies()",
            "edu.stanford.nlp.classify.RVFDataset:edu.stanford.nlp.ling.RVFDatum scaleDatum(edu.stanford.nlp.ling.RVFDatum)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter multiplyInPlace(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.parser.metrics.AbstractEval$RuleErrorEval:void display(edu.stanford.nlp.stats.ClassicCounter,int,java.io.PrintWriter)",
            "edu.stanford.nlp.hcoref.Rules:boolean entityCorefDictionary(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries,int,int)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter divisionNonNaN(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.Counters:java.util.Set retainAbove(edu.stanford.nlp.stats.Counter,double)",
            "edu.stanford.nlp.classify.LinearClassifier:void justificationOf(edu.stanford.nlp.ling.Datum,java.io.PrintWriter,java.util.function.Function,boolean)",
            "edu.stanford.nlp.parser.metrics.AbstractEval$CatErrorEval:void display(edu.stanford.nlp.stats.ClassicCounter,java.io.PrintWriter)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:double probMorphTag(int,int)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void printRuleCounts()",
            "edu.stanford.nlp.stats.Distribution:int[] getCountCounts(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.Counters:java.util.List toDescendingMagnitudeSortedListWithCounts(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.Counters:java.lang.String toSortedString(edu.stanford.nlp.stats.Counter,int,java.lang.String,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void writeData(java.io.PrintWriter)",
            "edu.stanford.nlp.parser.metrics.EvalbByCat:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)",
            "edu.stanford.nlp.classify.LinearClassifier:double scoreOf(edu.stanford.nlp.ling.RVFDatum,java.lang.Object)",
            "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution simpleGoodTuring(edu.stanford.nlp.stats.Counter,int)",
            "edu.stanford.nlp.ie.machinereading.BasicRelationFeatureFactory:boolean addFeatures(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.ie.machinereading.structure.RelationMention,java.util.List,java.util.logging.Logger)",
            "edu.stanford.nlp.stats.Distribution:int[][] countCounts2IntArrays(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.Distribution:double getCount(java.lang.Object)",
            "edu.stanford.nlp.parser.lexparser.SpanishUnknownWordModel:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,int,double,double,double,java.lang.String)",
            "edu.stanford.nlp.scoref.SimpleLinearClassifier:void learn(edu.stanford.nlp.stats.Counter,double,double,edu.stanford.nlp.scoref.SimpleLinearClassifier$Loss)",
            "edu.stanford.nlp.parser.lexparser.BaseUnknownWordModel:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,java.lang.String)",
            "edu.stanford.nlp.ie.ner.CMMClassifier$Scorer:double[] scoresOf(int[],int)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:double probWordTag(java.lang.String,int,int,int)",
            "edu.stanford.nlp.parser.lexparser.ChineseSimWordAvgDepGrammar:double probSimilarWordAvg(edu.stanford.nlp.parser.lexparser.IntDependency)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:double probTB(edu.stanford.nlp.parser.lexparser.IntDependency)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:void addAllInterningAndPrefixingRVF(edu.stanford.nlp.stats.ClassicCounter,edu.stanford.nlp.stats.ClassicCounter,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:double countHistory(edu.stanford.nlp.parser.lexparser.IntDependency)",
            "edu.stanford.nlp.classify.Dataset:double[] getInformationGains()",
            "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution distributionFromLogisticCounter(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.fsm.QuasiDeterminizer:edu.stanford.nlp.fsm.TransducerGraph pushLambdas(edu.stanford.nlp.fsm.TransducerGraph,edu.stanford.nlp.stats.ClassicCounter)",
            "edu.stanford.nlp.dcoref.ACEMentionExtractor:void printRawDoc(java.util.List,java.util.List,java.lang.String,boolean)",
            "edu.stanford.nlp.classify.LinearClassifier:void <init>(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void trainUnannotated(java.util.List,double)",
            "edu.stanford.nlp.stats.Counters:java.util.Set keysBelow(edu.stanford.nlp.stats.Counter,double)",
            "edu.stanford.nlp.scoref.SimpleLinearClassifier:double weightFeatureProduct(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.parser.lexparser.ArabicUnknownWordModelTrainer:void train(edu.stanford.nlp.ling.TaggedWord,int,double)",
            "edu.stanford.nlp.parser.lexparser.ChineseLexicon:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,int,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void printStateCounts()",
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.stats.ClassicCounter convertSVMStructWeights(edu.stanford.nlp.stats.ClassicCounter,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.stats.Counter getPatterns(java.lang.String,java.util.Set,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.Counter,java.util.Set)",
            "edu.stanford.nlp.stats.MultiClassAccuracyStats:void initMC(edu.stanford.nlp.classify.ProbabilisticClassifier,edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.scoref.Clusterer$State:void <init>(edu.stanford.nlp.scoref.ClustererDataLoader$ClustererDoc)",
            "edu.stanford.nlp.stats.Counters:java.util.Set retainNonZeros(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:void printFeatures(java.lang.String[],edu.stanford.nlp.stats.ClassicCounter)",
            "edu.stanford.nlp.classify.GeneralDataset:void printSVMLightFormat(java.io.PrintWriter)",
            "edu.stanford.nlp.classify.Dataset:void printSVMLightFormat(java.io.PrintWriter,edu.stanford.nlp.stats.ClassicCounter,int)",
            "edu.stanford.nlp.parser.lexparser.RandomWalk:double step(java.lang.Object,java.lang.Object,int)",
            "edu.stanford.nlp.classify.LinearClassifier:void justificationOf(edu.stanford.nlp.ling.RVFDatum,java.io.PrintWriter)",
            "edu.stanford.nlp.stats.Counters:void printCounterSortedByKeys(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.Counters:java.lang.String toString(edu.stanford.nlp.stats.Counter,java.text.NumberFormat)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter division(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recalculateTemporaryBetas(edu.stanford.nlp.trees.Tree,boolean,java.util.Map,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.ThreeDimensionalMap)",
            "edu.stanford.nlp.parser.lexparser.UnknownGTTrainer:void finishTraining()",
            "edu.stanford.nlp.patterns.PhraseScorer:double getDomainNgramScore(java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.LinearGrammarSmoother:float smoothRuleWeight(edu.stanford.nlp.parser.lexparser.Rule,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.scoref.SimpleLinearClassifier$CountBasedLearningRate:double getLearningRate(java.lang.String)",
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.stats.ClassicCounter convertSVMLightWeights(edu.stanford.nlp.stats.ClassicCounter,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.dcoref.Rules:boolean entityCorefDictionary(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries,int,int)",
            "edu.stanford.nlp.stats.Counters:double klDivergence(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.Distribution$DynamicDistribution:double probabilityOf(java.lang.Object)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.util.PriorityQueue toPriorityQueue(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:boolean isKnown(java.lang.String)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.util.Pair writeResultsSummary(int,edu.stanford.nlp.stats.Counter,java.util.Collection)",
            "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter probabilityOfRVFDatum(edu.stanford.nlp.ling.RVFDatum)",
            "edu.stanford.nlp.parser.lexparser.TreeBinarizer:edu.stanford.nlp.trees.Tree markovInsideBinarizeLocalTreeNew(edu.stanford.nlp.trees.Tree,int,int,int,boolean)",
            "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter probabilityOf(edu.stanford.nlp.ling.Datum)",
            "edu.stanford.nlp.naturalli.OpenIE:edu.stanford.nlp.util.Pair grokCorefMention(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.hcoref.data.CorefChain$CorefMention)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void writeData(java.io.Writer)",
            "edu.stanford.nlp.stats.Counters:int hIndex(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:java.util.List annotateMulticlass(java.util.List)",
            "edu.stanford.nlp.stats.Distribution:double probabilityOf(java.lang.Object)",
            "edu.stanford.nlp.stats.Counters:void divideInPlace(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.patterns.ScorePhrasesAverageFeatures:edu.stanford.nlp.stats.Counter scorePhrases(java.lang.String,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.Counter,java.util.Set,boolean)",
            "edu.stanford.nlp.international.arabic.process.ArabicSegmenter:void evaluate(java.io.PrintWriter)",
            "edu.stanford.nlp.parser.lexparser.RandomWalk:double score(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.parser.metrics.TaggingEval:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)",
            "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:java.lang.String normalizedOrdinalStringQuiet(java.lang.String,java.lang.Number)",
            "edu.stanford.nlp.classify.GeneralizedExpectationObjectiveFunction:double[] getModelProbs(edu.stanford.nlp.ling.Datum)",
            "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:java.lang.String classOf(edu.stanford.nlp.ling.Datum,edu.stanford.nlp.ie.machinereading.structure.ExtractionObject)",
            "edu.stanford.nlp.parser.lexparser.BaseUnknownWordModelTrainer:void train(edu.stanford.nlp.ling.TaggedWord,int,double)",
            "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution goodTuringSmoothedCounter(edu.stanford.nlp.stats.Counter,int)",
            "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution dynamicCounterWithDirichletPrior(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Distribution,double)",
            "edu.stanford.nlp.classify.RVFDataset:void writeSVMLightFormat(java.io.PrintWriter)",
            "edu.stanford.nlp.stats.Counters:java.util.List toSortedListWithCounts(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.classify.NBLinearClassifierFactory:java.lang.Double lambda$tuneSigma$9(int[][],int[],java.lang.Double)",
            "edu.stanford.nlp.parser.lexparser.PostSplitter:void dumpStats()",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter add(edu.stanford.nlp.stats.Counter,double)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter add(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:java.util.List extractAllRelations(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:java.util.Iterator ruleIteratorByWord(int,int,java.lang.String)",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void printLinkWithContext(java.util.logging.Logger,java.lang.String,edu.stanford.nlp.util.IntTuple,edu.stanford.nlp.util.IntTuple,edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.Semantics)",
            "edu.stanford.nlp.classify.RVFDataset:void addFeatures(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.patterns.PhraseScorer:double getPhraseWeightFromWords(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.patterns.CandidatePhrase,double)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:void classifySeq(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:double getStopProb(edu.stanford.nlp.parser.lexparser.IntDependency)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammarExtractor:edu.stanford.nlp.parser.lexparser.DependencyGrammar formResult()",
            "edu.stanford.nlp.parser.lexparser.EnglishUnknownWordModelTrainer:void train(edu.stanford.nlp.ling.TaggedWord,int,double)",
            "edu.stanford.nlp.scoref.Clusterer:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.scoref.ClustererDataLoader$ClustererDoc,edu.stanford.nlp.util.Pair,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.parser.lexparser.BinaryGrammarExtractor:edu.stanford.nlp.util.Pair formResult()",
            "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String printErrorLog(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.stats.Counter,int,edu.stanford.nlp.hcoref.data.Dictionaries,edu.stanford.nlp.hcoref.sieve.RFSieve)",
            "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution laplaceSmoothedDistribution(edu.stanford.nlp.stats.Counter,int,double)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void initialBetasAndLexicon()",
            "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter probabilityOf(edu.stanford.nlp.ling.RVFDatum)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:edu.stanford.nlp.stats.Counter classifyKBest(java.util.List,java.lang.Class,int)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,int,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.Dictionary:int getCountRB(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.data.CorefChain:java.util.Set getMentionsWithSameHead(edu.stanford.nlp.util.IntPair)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.Map getOutgoingEdgesMap(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.graph.DirectedMultiGraph:void add(java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.wordseg.ChineseDictionary:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.LabelDictionary:void increment(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void makeAnswerArraysAndTagIndex(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.Distsim:edu.stanford.nlp.tagger.maxent.Distsim initLexicon(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.shiftreduce.DistsimFeatureFactory:void <init>(java.lang.String)",
            "edu.stanford.nlp.tagger.maxent.ExtractorDistsim:void <init>(java.lang.String,int)",
            "edu.stanford.nlp.tagger.maxent.ExtractorDistsimConjunction:void <init>(java.lang.String,int,int)"
        ]
    },
    "edu.stanford.nlp.dcoref.Mention:edu.stanford.nlp.dcoref.Dictionaries$Gender getGender(edu.stanford.nlp.dcoref.Dictionaries,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Mention:void process(edu.stanford.nlp.dcoref.Dictionaries,edu.stanford.nlp.dcoref.Semantics,edu.stanford.nlp.dcoref.MentionExtractor)"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void treatCC(edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void collapseDependencies(java.util.List,boolean,edu.stanford.nlp.trees.GrammaticalStructure$Extras)"
        ]
    },
    "edu.stanford.nlp.util.BinaryHeapPriorityQueue:edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry getEntry(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:java.lang.Object getObject(java.lang.Object)",
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:boolean decreasePriority(java.lang.Object,double)",
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:boolean changePriority(java.lang.Object,double)",
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:boolean remove(java.lang.Object)",
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:boolean relaxPriority(java.lang.Object,double)",
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:double getPriority(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:void combineWeights(edu.stanford.nlp.ie.crf.CRFClassifier,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void combine(edu.stanford.nlp.ie.crf.CRFClassifier,double)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TestSentence:double[] getHistories(java.lang.String[],edu.stanford.nlp.tagger.maxent.History)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TestSentence:void calculateProbs(double[][][])",
            "edu.stanford.nlp.tagger.maxent.TestSentence:double[] getApproximateScores(edu.stanford.nlp.tagger.maxent.History)",
            "edu.stanford.nlp.tagger.maxent.TestSentence:double[] getExactScores(edu.stanford.nlp.tagger.maxent.History)"
        ]
    },
    "edu.stanford.nlp.sequences.Clique:edu.stanford.nlp.sequences.Clique intern(edu.stanford.nlp.sequences.Clique)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.Clique:edu.stanford.nlp.sequences.Clique valueOfHelper(int[])",
            "edu.stanford.nlp.sequences.Clique:java.lang.Object readResolve()"
        ]
    },
    "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:java.util.Map corefReturnHybridOutput(edu.stanford.nlp.dcoref.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.DeterministicCorefAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.util.TwoDimensionalMap:java.util.Map getMap(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.TwoDimensionalMap:java.lang.Object get(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.util.TwoDimensionalMap:boolean contains(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.util.TwoDimensionalSet:java.util.Set secondKeySet(java.lang.Object)",
            "edu.stanford.nlp.util.TwoDimensionalMap:java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.util.TwoDimensionalMap:java.util.Map get(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.util.Maps:java.util.Map compose(java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Maps:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.List getEdges(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.List getAllEdges(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.trees.GrammaticalStructure:java.util.List getDeps(java.util.function.Predicate,edu.stanford.nlp.graph.DirectedMultiGraph)",
            "edu.stanford.nlp.trees.GrammaticalStructure:void getTreeDeps(java.util.List,edu.stanford.nlp.graph.DirectedMultiGraph,java.util.function.Predicate,java.util.function.Predicate)",
            "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.List convertPath(java.util.List,boolean)",
            "edu.stanford.nlp.semgraph.SemanticGraph:edu.stanford.nlp.semgraph.SemanticGraphEdge getEdge(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord)"
        ]
    },
    "edu.stanford.nlp.dcoref.Rules:boolean contextIncompatible(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries,java.util.Set,edu.stanford.nlp.dcoref.Semantics)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.Distsim:java.lang.String getMapping(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.ExtractorDistsim:java.lang.String extract(edu.stanford.nlp.tagger.maxent.History,edu.stanford.nlp.tagger.maxent.PairsHolder)",
            "edu.stanford.nlp.parser.shiftreduce.DistsimFeatureFactory:void addDistsimFeatures(java.util.List,edu.stanford.nlp.ling.CoreLabel,java.lang.String)",
            "edu.stanford.nlp.tagger.maxent.ExtractorDistsimConjunction:java.lang.String extract(edu.stanford.nlp.tagger.maxent.History,edu.stanford.nlp.tagger.maxent.PairsHolder)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.CTBunkDict:java.util.Set get(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.CTBunkDict:java.lang.String getTag(java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.dcoref.Document:void initializeCorefCluster()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Document:void initialize()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.HookChart:java.util.Collection getPreHooks(edu.stanford.nlp.parser.lexparser.Edge)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processEdge(edu.stanford.nlp.parser.lexparser.Edge)"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.RadicalMap:java.util.Set getChars(char)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$ALIGNMENT:boolean satisfies(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:java.util.Collection findHighestScoringTransitions(edu.stanford.nlp.parser.shiftreduce.State,java.util.List,boolean,int,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:java.util.Collection findHighestScoringTransitions(edu.stanford.nlp.parser.shiftreduce.State,boolean,int,java.util.List)",
            "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:edu.stanford.nlp.util.Pair trainTree(int,java.util.List,java.util.List,java.util.List,edu.stanford.nlp.parser.shiftreduce.Oracle)",
            "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:edu.stanford.nlp.util.ScoredObject findHighestScoringTransition(edu.stanford.nlp.parser.shiftreduce.State,java.util.List,boolean)"
        ]
    },
    "edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle:edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle fromShortName(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger$TaggerWrapper:void <init>(edu.stanford.nlp.tagger.maxent.MaxentTagger)",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void tagFromXML(java.io.Reader,java.io.Writer,java.lang.String[])",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void tagFromXML(java.io.InputStream,java.io.Writer,java.lang.String[])",
            "edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter:void printAnswers(java.util.List,java.io.PrintWriter)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.lang.String classifyToString(java.lang.String,java.lang.String,boolean)",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger()"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TemplateHash:int[] getXValues(edu.stanford.nlp.util.Pair)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TaggerExperiments:void getFeaturesNew()"
        ]
    },
    "edu.stanford.nlp.parser.metrics.LeafAncestorEval:void display(boolean,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:double testOnTreebank(edu.stanford.nlp.trees.Treebank)",
            "edu.stanford.nlp.parser.metrics.LeafAncestorEval:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.RadicalMap:char getRadical(char)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon:edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon$Symbol unknownCharClass(edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon$Symbol)",
            "edu.stanford.nlp.ie.NERFeatureFactory:java.util.Collection featuresC(edu.stanford.nlp.util.PaddedList,int)",
            "edu.stanford.nlp.trees.international.pennchinese.RadicalMap:void main(java.lang.String[])",
            "edu.stanford.nlp.wordseg.Gale2007ChineseSegmenterFeatureFactory:java.util.Collection featuresCpC(edu.stanford.nlp.util.PaddedList,int)",
            "edu.stanford.nlp.wordseg.ChineseSegmenterFeatureFactory:java.util.Collection featuresCpC(edu.stanford.nlp.util.PaddedList,int)",
            "edu.stanford.nlp.wordseg.Gale2007ChineseSegmenterFeatureFactory:java.util.Collection featuresCpCp2C(edu.stanford.nlp.util.PaddedList,int)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.ASBCunkDict:java.util.Set get(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.ASBCunkDict:java.lang.String getTag(java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter:java.util.Set entrySet(java.util.Set,java.lang.Object[],boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter:java.util.Set entrySet()",
            "edu.stanford.nlp.stats.GeneralizedCounter:java.util.Set access$600(edu.stanford.nlp.stats.GeneralizedCounter,java.util.Set,java.lang.Object[],boolean)",
            "edu.stanford.nlp.stats.GeneralizedCounter:java.util.Set entrySet(java.util.Set,java.lang.Object[],boolean)"
        ]
    },
    "edu.stanford.nlp.stats.TwoDimensionalCounter:boolean containsKey(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.TregexPoweredTreebankParserParams:java.lang.String getAnnotationString(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TregexPoweredTreebankParserParams:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void remove(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.TwoDimensionalCollectionValuedMap:void add(java.lang.Object,java.lang.Object,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Expression getExpression(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$Rule createRule(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue)"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:void collapsePrepAndPoss(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:void collapseDependencies(java.util.List,boolean,edu.stanford.nlp.trees.GrammaticalStructure$Extras)"
        ]
    },
    "edu.stanford.nlp.util.Maps:void putIntoValueCollection(java.util.Map,java.lang.Object,java.lang.Object,edu.stanford.nlp.util.CollectionFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Maps:void putIntoValueArrayList(java.util.Map,java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.util.Maps:void putIntoValueHashSet(java.util.Map,java.lang.Object,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.patterns.InvertedIndexByTokens:java.util.Set getFileSentIds(edu.stanford.nlp.util.CollectionValuedMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.InvertedIndexByTokens:java.util.Map getFileSentIdsFromPats(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:void extractEnumerations(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:java.util.List extractPredictedMentions(edu.stanford.nlp.pipeline.Annotation,int,edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.trees.UniversalSemanticHeadFinder:void ruleChanges()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalSemanticHeadFinder:void <init>(edu.stanford.nlp.trees.TreebankLanguagePack,boolean)"
        ]
    },
    "edu.stanford.nlp.util.TwoDimensionalMap:java.lang.Object get(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.SentimentModel:org.ejml.simple.SimpleMatrix getBinaryClassification(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.parser.dvparser.DVModel:org.ejml.simple.SimpleMatrix getWForNode(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:int recountInside(edu.stanford.nlp.trees.Tree,boolean,int,java.util.IdentityHashMap)",
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient$ModelDerivatives:void addMatrices(edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.TwoDimensionalMap)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void buildGrammars()",
            "edu.stanford.nlp.parser.dvparser.DVModel:void filterRulesForBatch(edu.stanford.nlp.util.TwoDimensionalSet,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.sentiment.SentimentModel:edu.stanford.nlp.neural.SimpleTensor getBinaryTensor(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.sentiment.SentimentModel:org.ejml.simple.SimpleMatrix getClassWForNode(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.parser.dvparser.DVParserCostAndGradient:void backpropDerivative(edu.stanford.nlp.trees.Tree,java.util.List,java.util.IdentityHashMap,edu.stanford.nlp.util.TwoDimensionalMap,java.util.Map,edu.stanford.nlp.util.TwoDimensionalMap,java.util.Map,java.util.Map,org.ejml.simple.SimpleMatrix)",
            "edu.stanford.nlp.util.ThreeDimensionalMap:java.lang.Object get(java.lang.Object,java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:boolean testConvergence(edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.ThreeDimensionalMap)",
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient:void backpropDerivativesAndError(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.TwoDimensionalMap,java.util.Map,java.util.Map,org.ejml.simple.SimpleMatrix)",
            "edu.stanford.nlp.sentiment.SentimentModel:org.ejml.simple.SimpleMatrix getBinaryTransform(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.semgraph.SemanticGraph fromProto(edu.stanford.nlp.pipeline.CoreNLPProtos$DependencyGraph,java.util.List,java.lang.String)",
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.ling.IndexedWord lambda$fromProto$63(edu.stanford.nlp.util.TwoDimensionalMap,java.lang.Integer)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recountOutside(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.util.IdentityHashMap,java.util.IdentityHashMap)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recountWeights(edu.stanford.nlp.trees.Tree,java.util.IdentityHashMap,java.util.IdentityHashMap,java.util.IdentityHashMap,java.util.IdentityHashMap)",
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient:double scaleAndRegularize(edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.TwoDimensionalMap,double,double,boolean)",
            "edu.stanford.nlp.parser.dvparser.DVModel:org.ejml.simple.SimpleMatrix getScoreWForNode(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient:double scaleAndRegularizeTensor(edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.TwoDimensionalMap,double,double)",
            "edu.stanford.nlp.dcoref.Rules:boolean entityIsAcronym(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster)",
            "edu.stanford.nlp.pipeline.AnnotationSerializer$IntermediateSemanticGraph:edu.stanford.nlp.semgraph.SemanticGraph convertIntermediateGraph(java.util.List)",
            "edu.stanford.nlp.sentiment.SentimentModel:edu.stanford.nlp.neural.SimpleTensor getTensorForNode(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient$ModelDerivatives:void addTensors(edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.TwoDimensionalMap)",
            "edu.stanford.nlp.parser.dvparser.DVModel:void addRandomBinaryMatrix(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:int recalculateTemporaryBetas(edu.stanford.nlp.trees.Tree,double[],int,java.util.IdentityHashMap,java.util.IdentityHashMap,java.util.Map,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.ThreeDimensionalMap)",
            "edu.stanford.nlp.dcoref.Document:void mergeAcronymCache(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster)",
            "edu.stanford.nlp.sentiment.SentimentModel:org.ejml.simple.SimpleMatrix getWForNode(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void splitBetas()"
        ]
    },
    "edu.stanford.nlp.trees.TreePrint:void printTreeInternal(edu.stanford.nlp.trees.Tree,java.io.PrintWriter,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TreePrint:void printTrees(java.util.List,java.lang.String,java.io.PrintWriter)",
            "edu.stanford.nlp.trees.TreePrint:void printTree(edu.stanford.nlp.trees.Tree,java.lang.String,java.io.PrintWriter)"
        ]
    },
    "edu.stanford.nlp.pipeline.ChunkAnnotationUtils:void annotateChunk(edu.stanford.nlp.util.CoreMap,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ChunkAnnotationUtils:void annotateChunks(java.util.List,int,int,java.util.Map)",
            "edu.stanford.nlp.pipeline.ChunkAnnotationUtils:void annotateChunks(java.util.List,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.HookChart:void insert(java.util.Map,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.HookChart:void registerRealEdge(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.parser.lexparser.HookChart:void addEdge(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.parser.lexparser.HookChart:void addHook(edu.stanford.nlp.parser.lexparser.Hook)"
        ]
    },
    "edu.stanford.nlp.stats.TwoDimensionalCounter:void remove(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:void removeKeys(edu.stanford.nlp.stats.TwoDimensionalCounter,java.util.Collection)",
            "edu.stanford.nlp.patterns.ScorePhrases:void removeKeys(edu.stanford.nlp.stats.TwoDimensionalCounter,java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.util.ThreeDimensionalMap:java.util.Set thirdKeySet()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.FetchNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.tsurgeon.ExciseNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.MoveNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.RelabelNode$RelabelMatcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToFootNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.ReplaceNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.PruneNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.InsertNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPatternRoot$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.TreeLocation$LocationMatcher:edu.stanford.nlp.util.Pair evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.CoindexNodes$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.IfExistsNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.CreateSubtreeNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToHeadNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.DeleteNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:boolean checkClusters(java.util.logging.Logger,java.lang.String,edu.stanford.nlp.dcoref.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:void serializeTextClassifier(java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifierNonlinear:void serializeTextClassifier(java.io.PrintWriter)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void serializeTextClassifier(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.MatchesPanel:edu.stanford.nlp.util.Pair getSelectedMatch()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.DisplayMatchesPanel:void valueChanged(javax.swing.event.ListSelectionEvent)"
        ]
    },
    "edu.stanford.nlp.neural.rnn.TopNGramRecord:java.util.PriorityQueue getPriorityQueue(int,int,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.neural.rnn.TopNGramRecord:int countTreeHelper(edu.stanford.nlp.trees.Tree,int,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.neural.Embedding:org.ejml.simple.SimpleMatrix getEndWordVector()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ChineseSimWordAvgDepGrammar:java.util.Map getMap(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseSimWordAvgDepGrammar:void <init>(edu.stanford.nlp.parser.lexparser.TreebankLangParserParams,boolean,boolean,boolean,boolean,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)"
        ]
    },
    "edu.stanford.nlp.trees.ModCollinsHeadFinder:void <init>(edu.stanford.nlp.trees.TreebankLanguagePack)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.ModCollinsHeadFinder:void <init>()",
            "edu.stanford.nlp.trees.UniversalSemanticHeadFinder:void <init>(edu.stanford.nlp.trees.TreebankLanguagePack,boolean)",
            "edu.stanford.nlp.trees.PennTreebankLanguagePack:edu.stanford.nlp.trees.HeadFinder headFinder()",
            "edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams:void <init>()",
            "edu.stanford.nlp.trees.SemanticHeadFinder:void <init>(edu.stanford.nlp.trees.TreebankLanguagePack,boolean)"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter:double getCount(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter:double getCount(java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph:boolean removeEdges(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.international.morph.MorphoFeatures:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.morph.MorphoFeatures:java.lang.String getTag(java.lang.String)",
            "edu.stanford.nlp.international.french.FrenchMorphoFeatureSpecification:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void train(java.util.Collection,java.util.Collection)",
            "edu.stanford.nlp.international.arabic.ArabicMorphoFeatureSpecification:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:java.util.List treebankToLexiconEvents(java.util.List,edu.stanford.nlp.parser.lexparser.FactoredLexicon)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,int,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:int setOptionFlag(java.lang.String[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:int setOptionFlag(java.lang.String[],int)",
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.time.TimeFormatter$TimeZoneComponent:java.lang.StringBuilder appendRegex0(java.lang.StringBuilder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.TimeFormatter$TimeZoneIdComponent:org.joda.time.DateTimeZone parseDateTimeZone(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeFormatter$TimeZoneIdComponent:edu.stanford.nlp.time.SUTime$Temporal updateTemporal(edu.stanford.nlp.time.SUTime$Temporal,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.FileTreeModel:int getChildCount(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.FileTreeModel:boolean isEmpty()",
            "edu.stanford.nlp.trees.tregex.gui.FilePanel:void setActiveTreebanksFromParent(java.util.List,edu.stanford.nlp.trees.tregex.gui.FileTreeNode)"
        ]
    },
    "edu.stanford.nlp.fsm.TransducerGraph:boolean removeArc(edu.stanford.nlp.fsm.TransducerGraph$Arc)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.HookChart:java.util.Collection getEdges(edu.stanford.nlp.parser.lexparser.Hook)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processHook(edu.stanford.nlp.parser.lexparser.Hook)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void postMortem()"
        ]
    },
    "edu.stanford.nlp.util.DeltaMap:boolean containsKey(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void printRawDoc(edu.stanford.nlp.dcoref.Document,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:double runAndScoreCoref(edu.stanford.nlp.dcoref.SieveCoreferenceSystem,edu.stanford.nlp.dcoref.MentionExtractor,java.util.Properties,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher:edu.stanford.nlp.ling.IndexedWord getNode(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void correctSubjPass(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void process3WP(edu.stanford.nlp.semgraph.SemanticGraph,java.util.HashMap)",
            "edu.stanford.nlp.semgraph.semgrex.SemgrexPattern:void main(java.lang.String[])",
            "edu.stanford.nlp.naturalli.OpenIE:java.util.List entailmentsFromClause(edu.stanford.nlp.naturalli.SentenceFragment)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void processComplex2WP(edu.stanford.nlp.semgraph.SemanticGraph,java.util.HashMap)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLPServer$SemgrexHandler:void lambda$null$29(edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher,java.lang.String,edu.stanford.nlp.pipeline.JSONOutputter$Writer)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void expandPrepConjunctions(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void addConjInformation(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.NaturalLogicAnnotator:void annotateUnaries(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void expandPPConjunctions(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void processSimple2WP(edu.stanford.nlp.semgraph.SemanticGraph,java.util.HashMap)",
            "edu.stanford.nlp.hcoref.data.Mention:edu.stanford.nlp.util.Pair findDependentVerb(edu.stanford.nlp.hcoref.data.Mention)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void addCaseMarkerInformation(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.dcoref.Mention:edu.stanford.nlp.util.Pair findDependentVerb(edu.stanford.nlp.dcoref.Mention)",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void correctWHAttachment(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void correctWHAttachment(edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TemplateHash:void add(int,edu.stanford.nlp.tagger.maxent.History,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TaggerExperiments:void hashHistories()"
        ]
    },
    "edu.stanford.nlp.util.DeltaMap:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.Dictionaries:java.util.Set getDemonyms(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Mention:boolean isDemonym(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BaseUnknownWordModelTrainer:edu.stanford.nlp.parser.lexparser.UnknownWordModel finishTraining()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void rescaleTemporaryBetas(edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.ThreeDimensionalMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:boolean useNewBetas(boolean,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.ThreeDimensionalMap)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:void processTreeHelper(java.lang.String,java.lang.String,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:void processTreeHelper(java.lang.String,java.lang.String,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:void visitTree(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.fsm.TransducerGraph:java.util.Set getArcsByTargetAndInput(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:java.util.Collection getInverseArcs(java.lang.Object,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.wordseg.CorpusChar:java.lang.String getTag(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.wordseg.TagAffixDetector:java.lang.String checkDic(java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.fsm.TransducerGraph:edu.stanford.nlp.fsm.TransducerGraph$Arc getArcBySourceAndInput(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.TransducerGraph:boolean canAddPath(java.util.List)",
            "edu.stanford.nlp.fsm.TransducerGraph:double getOutputOfPathInGraph(java.util.List)",
            "edu.stanford.nlp.fsm.TransducerGraph:void addOnePathToGraph(java.util.List,double,int,edu.stanford.nlp.fsm.TransducerGraph)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Mention:void setSemantics(edu.stanford.nlp.hcoref.data.Dictionaries,edu.stanford.nlp.hcoref.data.Semantics)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Mention:void process(edu.stanford.nlp.hcoref.data.Dictionaries,edu.stanford.nlp.hcoref.data.Semantics)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceRelation getRelation(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.BaseUnknownWordModel:float scoreGT(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseUnknownWordModel:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.BaseUnknownWordModel:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:edu.stanford.nlp.util.PriorityQueue getCandidates(edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser$Vertex,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:void lazyKthBest(edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser$Vertex,int,int)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.AbstractDependencyGrammar:edu.stanford.nlp.parser.lexparser.IntDependency intern(edu.stanford.nlp.parser.lexparser.IntTaggedWord,edu.stanford.nlp.parser.lexparser.IntTaggedWord,boolean,short)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void expandStop(edu.stanford.nlp.parser.lexparser.IntDependency,short,double,boolean)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void expandArg(edu.stanford.nlp.parser.lexparser.IntDependency,short,double)"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotatorPool:edu.stanford.nlp.pipeline.Annotator get(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:edu.stanford.nlp.pipeline.Annotator getExistingAnnotator(java.lang.String)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void construct(java.util.Properties,boolean,edu.stanford.nlp.pipeline.AnnotatorImplementations)"
        ]
    },
    "edu.stanford.nlp.hcoref.Rules:boolean entityIsAcronym(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Set)",
            "edu.stanford.nlp.hcoref.sieve.RFSieve:edu.stanford.nlp.ling.RVFDatum extractDatum(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,int,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.String)",
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)"
        ]
    },
    "edu.stanford.nlp.parser.metrics.EvalbByCat:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void processResults(edu.stanford.nlp.parser.common.ParserQuery,edu.stanford.nlp.trees.Tree,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,edu.stanford.nlp.trees.TreePrint)",
            "edu.stanford.nlp.parser.metrics.Evalb:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.time.HeidelTimeAnnotator:java.util.List toTimexCoreMaps(org.w3c.dom.Element,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.HeidelTimeAnnotator:void annotate(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseSimWordAvgDepGrammar:double probSimilarWordAvg(edu.stanford.nlp.parser.lexparser.IntDependency)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void printLogs(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Document,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void coreference(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.Dictionary:void save(java.io.DataOutputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void saveModel(java.io.DataOutputStream)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.UnaryGrammar:boolean relaxRule(edu.stanford.nlp.parser.lexparser.UnaryRule)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.UnaryGrammar:void init()",
            "edu.stanford.nlp.parser.lexparser.UnaryGrammar:void closeRulesUnderMax(edu.stanford.nlp.parser.lexparser.UnaryRule)"
        ]
    },
    "edu.stanford.nlp.time.SUTimeMain:java.util.List updateTimexText(java.util.Map,edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:void processTempEval2Doc(edu.stanford.nlp.pipeline.AnnotationPipeline,edu.stanford.nlp.pipeline.Annotation,java.util.Map,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter)"
        ]
    },
    "edu.stanford.nlp.scoref.StatisticalCorefUtils:void mergeCoreferenceClusters(edu.stanford.nlp.util.Pair,edu.stanford.nlp.hcoref.data.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.BestFirstCorefSystem:void runCoref(edu.stanford.nlp.hcoref.data.Document)",
            "edu.stanford.nlp.scoref.ClusteringCorefSystem:void runCoref(edu.stanford.nlp.hcoref.data.Document)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.FileTreeModel:edu.stanford.nlp.trees.tregex.gui.FileTreeNode getChild(java.lang.Object,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.FilePanel:void setActiveTreebanksFromParent(java.util.List,edu.stanford.nlp.trees.tregex.gui.FileTreeNode)",
            "edu.stanford.nlp.trees.tregex.gui.FileTreeModel:java.lang.Object getChild(java.lang.Object,int)"
        ]
    },
    "edu.stanford.nlp.neural.Embedding:org.ejml.simple.SimpleMatrix getStartWordVector()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void mergeStates()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void extract(java.util.Collection,double,java.util.Collection,double)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:void setHeadFinder(edu.stanford.nlp.trees.HeadFinder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:int setOptionFlag(java.lang.String[],int)"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:edu.stanford.nlp.trees.TreeGraphNode getNodeByIndex(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:edu.stanford.nlp.trees.GrammaticalRelation getGrammaticalRelation(int,int)"
        ]
    },
    "edu.stanford.nlp.hcoref.Preprocessor:void extractGoldClusters(edu.stanford.nlp.hcoref.data.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.Preprocessor:void preprocess(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,edu.stanford.nlp.classify.LogisticClassifier,edu.stanford.nlp.trees.HeadFinder)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.UnaryGrammar:double scoreRule(edu.stanford.nlp.parser.lexparser.UnaryRule)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:double scoreBinarizedTree(edu.stanford.nlp.trees.Tree,int)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:double validateBinarizedTree(edu.stanford.nlp.trees.Tree,int)"
        ]
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.List getOutgoingEdges(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.Map toMap()"
        ]
    },
    "edu.stanford.nlp.util.ArrayHeap:edu.stanford.nlp.util.ArrayHeap$HeapEntry getEntry(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.ArrayHeap:int decreaseKey(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.dcoref.Rules:int getSpeakerClusterId(edu.stanford.nlp.dcoref.Document,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Rules:boolean entitySameSpeaker(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention)",
            "edu.stanford.nlp.dcoref.Rules:boolean entityPersonDisagree(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:edu.stanford.nlp.ie.machinereading.structure.RelationMention convertAceRelationMention(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceRelationMention,java.lang.String,edu.stanford.nlp.util.CoreMap,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:java.util.List readDocument(java.lang.String,edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.FileTreeModel:int getIndexOfChild(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph:boolean isEdge(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:void attachStrandedNodes(edu.stanford.nlp.trees.TreeGraphNode,edu.stanford.nlp.trees.TreeGraphNode,boolean,java.util.function.Predicate,java.util.function.Predicate,edu.stanford.nlp.graph.DirectedMultiGraph)",
            "edu.stanford.nlp.semgraph.SemanticGraph:boolean containsEdge(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.graph.DirectedMultiGraph:boolean isNeighbor(java.lang.Object,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.international.arabic.ArabicMorphoFeatureSpecification$ArabicMorphoFeatures:java.lang.String getTag(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.Distsim:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.Distsim:edu.stanford.nlp.tagger.maxent.Distsim initLexicon(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.util.TwoDimensionalCollectionValuedMap:void addKey(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sentiment.ReadSentimentDataset:edu.stanford.nlp.trees.Tree convertTree(java.util.List,java.util.List,java.util.Map,java.util.Map,edu.stanford.nlp.process.PTBEscapingProcessor)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.ReadSentimentDataset:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.hcoref.Rules:boolean sentenceContextIncompatible(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Set)",
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TagCount:int get(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.Dictionary:int getCount(java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.RandomWalk:double score(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.CoreMapAttributeAggregator:edu.stanford.nlp.pipeline.CoreMapAttributeAggregator getAggregator(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.BaseUnknownWordModelTrainer:void train(edu.stanford.nlp.ling.TaggedWord,int,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.LabelDictionary:void lock(int,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void makeAnswerArraysAndTagIndex(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph deepCopyFromGraphs(java.util.List,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.ThreeDimensionalMap:boolean contains(java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:int initialBetasAndLexicon(edu.stanford.nlp.trees.Tree,int,double)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:edu.stanford.nlp.semgraph.SemanticGraph resetVerticeOrdering(edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader:void writeTabSep(java.io.PrintWriter,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CollectionValuedMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.dcoref.Document:void findTwinMentionsRelaxed()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Document:void findTwinMentions(boolean)"
        ]
    },
    "edu.stanford.nlp.stats.IntCounter:java.lang.String toString(java.text.NumberFormat)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.Set getParents(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.Set getNeighbors(java.lang.Object)",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Set getParents(edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.trees.GrammaticalStructure:void analyzeNode(edu.stanford.nlp.trees.TreeGraphNode,edu.stanford.nlp.trees.TreeGraphNode,java.util.Collection,edu.stanford.nlp.trees.HeadFinder,java.util.function.Predicate,java.util.function.Predicate,edu.stanford.nlp.graph.DirectedMultiGraph,edu.stanford.nlp.graph.DirectedMultiGraph)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.TregexMatcher:edu.stanford.nlp.trees.Tree getNode(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.spanish.SpanishTreeNormalizer:edu.stanford.nlp.trees.Tree expandConmigo(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:boolean checkPleonastic(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexPattern)",
            "edu.stanford.nlp.dcoref.MentionExtractor:void findTreePattern(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexPattern,java.util.Set)",
            "edu.stanford.nlp.trees.UniversalSemanticHeadFinder:edu.stanford.nlp.trees.Tree determineNonTrivialHead(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.RelabelNode$RelabelMatcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams$AddRelativeNodeFunction:java.lang.String apply(edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.parser.lexparser.SpanishTreebankParserParams$MarkConjTypeFunction:java.lang.String apply(edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.dcoref.Mention:void setNumber(edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.IfExistsNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams$AnnotatePunctuationFunction:java.lang.String apply(edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.FetchNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.international.spanish.SpanishTreeNormalizer:edu.stanford.nlp.trees.Tree expandCliticPronounsInner(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexPattern)",
            "edu.stanford.nlp.trees.international.arabic.ArabicTreeNormalizer:edu.stanford.nlp.trees.Tree normalizeWholeTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreeFactory)",
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams$AddRelativeNodeRegexFunction:java.lang.String apply(edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams$AddEquivalencedNodeFunctionVar:java.lang.String apply(edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:void extractEnumerations(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams$AnnotatePunctuationFunction:java.lang.String apply(edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams$AddEquivalencedConjNode:java.lang.String apply(edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.TregexPattern$TRegexTreeVisitor:void visitTree(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.DateTreeTransformer:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:boolean checkPleonastic(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexPattern)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:void extractEnumerations(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams$AddEquivalencedNodeFunction:java.lang.String apply(edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams$AnnotatePunctuationFunction2:java.lang.String apply(edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams$AddRelativeNodeFunction:java.lang.String apply(edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.SemanticHeadFinder:edu.stanford.nlp.trees.Tree determineNonTrivialHead(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.Map getIncomingEdgesMap(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.graph.DirectedMultiGraph:void add(java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.trees.Dependencies:java.util.Map govToDepMap(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Dependencies:edu.stanford.nlp.stats.Counter getTypedDependencyChains(java.util.List,int)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceRelationMention getRelationMention(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:void getSplitters(double,java.util.Map,java.util.Map,java.util.Map,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:java.util.Set getSplitCategories(edu.stanford.nlp.trees.Treebank,boolean,int,double,double,edu.stanford.nlp.trees.TreebankLanguagePack)"
        ]
    },
    "edu.stanford.nlp.util.MapList:int size(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Map mapTreeToSg(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.time.SUTimeMain:edu.stanford.nlp.time.SUTimeMain$TimexAttributes findTimex(java.util.Map,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:java.util.Map readTimexAttrExts(java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseUnknownWordModel:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:java.util.Map buildMergeCorrespondence(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void mergeStates()"
        ]
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph:int getInDegree(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:int inDegree(edu.stanford.nlp.ling.IndexedWord)"
        ]
    },
    "edu.stanford.nlp.pipeline.CustomAnnotationSerializer:java.util.Map loadCorefChains(java.io.BufferedReader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.CustomAnnotationSerializer:edu.stanford.nlp.util.Pair read(java.io.InputStream)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BinaryGrammar:double scoreRule(edu.stanford.nlp.parser.lexparser.BinaryRule)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:double scoreBinarizedTree(edu.stanford.nlp.trees.Tree,int)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:double validateBinarizedTree(edu.stanford.nlp.trees.Tree,int)"
        ]
    },
    "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.scoref.DocumentExamples extract(int,edu.stanford.nlp.hcoref.data.Document,java.util.Map,edu.stanford.nlp.scoref.Compressor)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.BestFirstCorefSystem:void runCoref(edu.stanford.nlp.hcoref.data.Document)",
            "edu.stanford.nlp.scoref.ClusteringCorefSystem:void runCoref(edu.stanford.nlp.hcoref.data.Document)",
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.scoref.DocumentExamples extract(int,edu.stanford.nlp.hcoref.data.Document,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.FileTreeModel:boolean isLeaf(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String printErrorLog(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.stats.Counter,int,edu.stanford.nlp.hcoref.data.Dictionaries,edu.stanford.nlp.hcoref.sieve.RFSieve)",
            "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:void findCoreferentAntecedent(edu.stanford.nlp.hcoref.data.Mention,int,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.StringBuilder)",
            "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String printErrorLogDcoref(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,int,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.common.StringDictionary:int get(java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.common.StringDictionary:int get(java.lang.String)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceToken:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)"
        ]
    },
    "edu.stanford.nlp.util.HashIndex:int addToIndexUnsafe(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatcher$BranchStates:int newBid(int,int)"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void writeMatchedTokensAndSents(java.lang.String,java.util.Map,java.lang.String,edu.stanford.nlp.util.CollectionValuedMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void iterateExtractApply(java.util.Map,java.util.Map,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.dcoref.Document:void extractGoldLinks()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Document:java.util.List getGoldLinks()"
        ]
    },
    "edu.stanford.nlp.util.logging.RedirectOutputHandler:void print(java.lang.Object[],java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.OutputHandler:java.util.List handle(edu.stanford.nlp.util.logging.Redwood$Record)",
            "edu.stanford.nlp.util.logging.OutputHandler:void updateTracks(int)",
            "edu.stanford.nlp.util.logging.OutputHandler:java.util.List signalEndTrack(int,long)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:edu.stanford.nlp.ie.machinereading.structure.EventMention convertAceEventMention(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEventMention,java.lang.String,edu.stanford.nlp.util.CoreMap,java.util.Map,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:java.util.List readDocument(java.lang.String,edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.util.DeltaCollectionValuedMap:boolean containsKey(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.Dictionary:void addVThatTaking(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:void condenseFeatures()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:void trainModel(java.lang.String,edu.stanford.nlp.tagger.common.Tagger,java.util.Random,java.util.List,java.util.List,edu.stanford.nlp.trees.Treebank,int,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String printConllOutput(edu.stanford.nlp.hcoref.data.Document,java.util.List,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String printConllOutput(edu.stanford.nlp.hcoref.data.Document,boolean,boolean)"
        ]
    },
    "edu.stanford.nlp.dcoref.Document:java.lang.String findParagraphSpeaker(java.util.List,int,java.lang.String,int,edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Document:void findSpeakersInConversation(edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.CorefChain:void <init>(edu.stanford.nlp.hcoref.data.CorefCluster,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.StatisticalCorefSystem:void annotate(edu.stanford.nlp.pipeline.Annotation,boolean)",
            "edu.stanford.nlp.hcoref.CorefSystem:java.util.Map makeCorefOutput(edu.stanford.nlp.hcoref.data.Document)"
        ]
    },
    "edu.stanford.nlp.trees.MemoryTreebank:void readSRLFile(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.MemoryTreebank:void loadPath(java.lang.String,java.io.FileFilter,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.time.SUTimeMain:void processTempEval2(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.NERFeatureFactory:void distSimAnnotate(edu.stanford.nlp.util.PaddedList)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.NERFeatureFactory:java.util.Collection featuresC(edu.stanford.nlp.util.PaddedList,int)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.CtbDict:void readCtbDict(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.CtbDict:void <init>()"
        ]
    },
    "edu.stanford.nlp.dcoref.ScorerBCubed:void calculatePrecisionBall(edu.stanford.nlp.dcoref.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.ScorerBCubed:void calculatePrecision(edu.stanford.nlp.dcoref.Document)"
        ]
    },
    "edu.stanford.nlp.time.TimeFormatter$TextDateComponent:java.lang.Integer parseValue(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon:edu.stanford.nlp.stats.Distribution getBackedOffDist(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon:java.lang.String sampleFrom(java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,int,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.dcoref.Document:void findSpeakers(edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Document:void processDiscourse(edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.trees.SemanticHeadFinder:void ruleChanges()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.SemanticHeadFinder:void <init>(edu.stanford.nlp.trees.TreebankLanguagePack,boolean)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void goToNextNodeMatch()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:boolean matches()"
        ]
    },
    "edu.stanford.nlp.neural.rnn.TopNGramRecord:void countTree(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.AbstractEvaluate:void eval(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntity getEntity(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:java.util.List readDocument(java.lang.String,edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.time.SUTimeMain:void processTempEval2Tab(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:void processTempEval2(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:void findCoreferentAntecedent(edu.stanford.nlp.hcoref.data.Mention,int,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ChineseUnknownWordModelTrainer:void train(edu.stanford.nlp.ling.TaggedWord,int,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters$2:double getCount(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:boolean equals(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,double)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon:void finishTraining()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.TwoDimensionalCounter:void clean()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.wordseg.CorpusChar:java.util.Map readDict(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.wordseg.CorpusChar:void <init>(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.common.StringDictionary:int getCount(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.IntCounter:java.lang.String toString(java.text.NumberFormat,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.international.arabic.process.ArabicLexer:java.lang.String normalizeToken(java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.arabic.process.ArabicLexer:java.lang.Object getNext(boolean)"
        ]
    },
    "edu.stanford.nlp.fsm.TransducerGraph:edu.stanford.nlp.fsm.TransducerGraph$Arc getArc(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void mergeTransitions(edu.stanford.nlp.trees.Tree,java.util.IdentityHashMap,java.util.IdentityHashMap,java.util.IdentityHashMap,java.util.IdentityHashMap,double[],java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void mergeTransitions(edu.stanford.nlp.trees.Tree,java.util.IdentityHashMap,java.util.IdentityHashMap,java.util.IdentityHashMap,java.util.IdentityHashMap,double[],java.util.Map)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recalculateMergedBetas(java.util.Map)"
        ]
    },
    "edu.stanford.nlp.util.DeltaCollectionValuedMap:java.util.Collection get(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.DeltaCollectionValuedMap:java.lang.Object get(java.lang.Object)",
            "edu.stanford.nlp.util.DeltaCollectionValuedMap:java.util.Collection remove(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:void lazyNext(edu.stanford.nlp.util.PriorityQueue,edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser$Derivation,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:void lazyKthBest(edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser$Vertex,int,int)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.Alignment:edu.stanford.nlp.semgraph.semgrex.Alignment patchedAlignment(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.data.Dictionaries:java.util.Set getDemonyms(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Mention:boolean isDemonym(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.Set getChildren(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.Set getNeighbors(java.lang.Object)",
            "edu.stanford.nlp.trees.GrammaticalStructure:java.util.List getDeps(java.util.function.Predicate,edu.stanford.nlp.graph.DirectedMultiGraph)",
            "edu.stanford.nlp.trees.GrammaticalStructure:void getTreeDeps(java.util.List,edu.stanford.nlp.graph.DirectedMultiGraph,java.util.function.Predicate,java.util.function.Predicate)",
            "edu.stanford.nlp.graph.DijkstraShortestPath:java.util.List getShortestPath(edu.stanford.nlp.graph.Graph,java.lang.Object,java.lang.Object,boolean)",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Set getChildren(edu.stanford.nlp.ling.IndexedWord)"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter:double getCount(java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.Lattice:java.util.List getEdgesOverSpan(int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:edu.stanford.nlp.trees.Tree extractBestParse(int,int,int)"
        ]
    },
    "edu.stanford.nlp.ie.pascal.ISODateInstance:void <init>(edu.stanford.nlp.ie.pascal.ISODateInstance,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Sentence:java.util.Map coref()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:boolean checkValue()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Value doEvaluation(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:void <init>(java.util.Map,boolean,java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Document:void extractGoldCorefClusters()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.CorefPrinter:void linkDistanceAnalysis(java.lang.String[])",
            "edu.stanford.nlp.scoref.DocumentProcessor:void run(edu.stanford.nlp.hcoref.CorefDocMaker)"
        ]
    },
    "edu.stanford.nlp.scoref.FeatureExtractorRunner:void process(int,edu.stanford.nlp.hcoref.data.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.DocumentProcessor:void run(edu.stanford.nlp.hcoref.CorefDocMaker)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BaseUnknownWordModel:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.GermanUnknownWordModel:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.BaseUnknownWordModel:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,int,double,double,double,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.pipeline.TrueCaseAnnotator:void setTrueCaseText(edu.stanford.nlp.ling.CoreLabel)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.TrueCaseAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation:edu.stanford.nlp.trees.tregex.Relation getRelation(java.lang.String,java.util.function.Function,edu.stanford.nlp.trees.HeadFinder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.TregexParser:edu.stanford.nlp.trees.tregex.TregexPattern Relation()",
            "edu.stanford.nlp.trees.tregex.Relation:edu.stanford.nlp.trees.tregex.Relation getRelation(java.lang.String,java.lang.String,java.util.function.Function,edu.stanford.nlp.trees.HeadFinder)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Document:void extractGoldLinks()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Document:java.util.List getGoldLinks()"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:java.lang.String toStringIndex(edu.stanford.nlp.trees.TypedDependency,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:java.lang.String dependenciesToString(edu.stanford.nlp.trees.GrammaticalStructure,java.util.Collection,edu.stanford.nlp.trees.Tree,boolean,boolean)"
        ]
    },
    "edu.stanford.nlp.dcoref.Rules:boolean entityHaveDifferentLocation(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries,java.util.Set,edu.stanford.nlp.dcoref.Semantics)"
        ]
    },
    "edu.stanford.nlp.util.MapList:java.util.List ensureList(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.MapList:void add(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.util.MapList:void add(java.lang.Object,java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood:void queueTask(long,java.lang.Runnable)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood:void attemptThreadControl(long,java.lang.Runnable)"
        ]
    },
    "edu.stanford.nlp.util.HashIndex:int addToIndex(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$TimeIndex:int addToIndexTemporalExpr(edu.stanford.nlp.time.TimeExpression)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void makeAnswerArraysAndTagIndex(java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.BinaryRule:void <init>(java.lang.String,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void initRulesWithWord()",
            "edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams$1:edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar formResult()",
            "edu.stanford.nlp.parser.lexparser.ExhaustiveDependencyParser:boolean parse(java.util.List)",
            "edu.stanford.nlp.util.DeltaIndex:int addToIndex(java.lang.Object)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void buildStateIndex()",
            "edu.stanford.nlp.parser.lexparser.AbstractDependencyGrammar:void initTagBins()",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void populateTagsToBaseTags(edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.util.HashIndex:int indexOf(java.lang.Object,boolean)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:boolean parse(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:java.util.Iterator ruleIteratorByWord(java.lang.String,int,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void initRulesWithWord()",
            "edu.stanford.nlp.ie.crf.LabelDictionary:void lock(int,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.parser.lexparser.GrammarCompactor:edu.stanford.nlp.util.Pair convertGraphsToGrammar(java.util.Set,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.parser.lexparser.IntTaggedWord:void <init>(java.lang.String,java.lang.String,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.parser.lexparser.ChineseSimWordAvgDepGrammar:java.util.Map getMap(java.lang.String)",
            "edu.stanford.nlp.time.SUTime$TimeIndex:int addToIndexTemporal(edu.stanford.nlp.time.SUTime$Temporal)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:java.util.Iterator ruleIteratorByWord(java.lang.String,int)",
            "edu.stanford.nlp.classify.RVFDataset:void addFeatures(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammarExtractor:edu.stanford.nlp.parser.lexparser.DependencyGrammar formResult()",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,int,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.tagger.maxent.TTags:int add(java.lang.String)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void pruneNodeFeatureIndices(int,int)",
            "edu.stanford.nlp.parser.lexparser.BinaryGrammarExtractor:edu.stanford.nlp.util.Pair formResult()",
            "edu.stanford.nlp.tagger.maxent.HistoryTable:int add(edu.stanford.nlp.tagger.maxent.History)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void train(java.util.Collection,java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:short tagProject(short)",
            "edu.stanford.nlp.time.SUTime$TimeIndex:int addToIndexTemporalFunc(edu.stanford.nlp.time.SUTime$Temporal)",
            "edu.stanford.nlp.classify.RVFDataset:void addLabel(java.lang.Object)",
            "edu.stanford.nlp.classify.RVFDataset:void selectFeaturesFromSet(java.util.Set)",
            "edu.stanford.nlp.parser.lexparser.BinaryGrammarExtractor:void tallyInternalNode(edu.stanford.nlp.trees.Tree,double)"
        ]
    },
    "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String printErrorLogDcoref(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,int,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:void findCoreferentAntecedent(edu.stanford.nlp.hcoref.data.Mention,int,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.StringBuilder)"
        ]
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph:boolean removeVertex(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.graph.DirectedMultiGraph:boolean removeVertices(java.util.Collection)",
            "edu.stanford.nlp.semgraph.SemanticGraph:boolean removeVertex(edu.stanford.nlp.ling.IndexedWord)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceToken:boolean exists(java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceToken:boolean isLocation(java.lang.String)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceToken:boolean isLastName(java.lang.String)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceToken:boolean isFirstName(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.EnglishGrammaticalStructure:edu.stanford.nlp.trees.GrammaticalRelation determinePrepRelation(java.util.Map,java.util.List,edu.stanford.nlp.trees.TypedDependency,edu.stanford.nlp.trees.TypedDependency,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void collapsePrepAndPoss(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:void removeBaselineFeature(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.StringUtils:java.util.Map argsToMap(java.lang.String[],java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.TaggingEval:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.metrics.LeafAncestorEval:boolean validateCommandLine(java.lang.String[])",
            "edu.stanford.nlp.trees.international.pennchinese.RadicalMap:void main(java.lang.String[])",
            "edu.stanford.nlp.wordseg.ChineseDictionary:void main(java.lang.String[])",
            "edu.stanford.nlp.semgraph.semgrex.SemgrexPattern:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.TreePrint:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.tregex.TregexPattern:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.metrics.UnlabeledAttachmentEval:void main(java.lang.String[])",
            "edu.stanford.nlp.util.StringUtils:java.util.Map argsToMap(java.lang.String[])",
            "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntityMention getEntityMention(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDomReader:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEventMention parseEventMention(org.w3c.dom.Node,edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDomReader:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceRelationMention parseRelationMention(org.w3c.dom.Node,edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument)"
        ]
    },
    "edu.stanford.nlp.time.SUTimeMain:java.util.Map readTimexAttrExts(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:void processTempEval2Tab(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.hcoref.Rules:boolean entityHaveDifferentLocation(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Set)",
            "edu.stanford.nlp.hcoref.sieve.RFSieve:edu.stanford.nlp.ling.RVFDatum extractDatum(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,int,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.util.TwoDimensionalCollectionValuedMap:void add(java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.CoreMapNodePatternTrigger:void <init>(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.RandomWalk:void train(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.RandomWalk:void <init>(java.util.Collection,int)"
        ]
    },
    "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void printDiscourseStructure(edu.stanford.nlp.dcoref.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:double runAndScoreCoref(edu.stanford.nlp.dcoref.SieveCoreferenceSystem,edu.stanford.nlp.dcoref.MentionExtractor,java.util.Properties,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:void averageModels(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:void averageScoredModels(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader:boolean include(java.util.Map,edu.stanford.nlp.util.Pair,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader:void writeTabSep(java.io.PrintWriter,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CollectionValuedMap)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void goToNextTreeNodeMatch()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:boolean matches()"
        ]
    },
    "edu.stanford.nlp.patterns.surface.CreatePatterns$CreatePatternsThread:java.lang.Boolean call()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.surface.CreatePatterns$CreatePatternsThread:java.lang.Object call()"
        ]
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.List getIncomingEdges(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.Preprocessor:void findTwinMentionsRelaxed(edu.stanford.nlp.hcoref.data.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.Preprocessor:void findTwinMentions(edu.stanford.nlp.hcoref.data.Document,boolean)"
        ]
    },
    "edu.stanford.nlp.util.HashIndex:int indexOf(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.HistoryTable:int getIndex(edu.stanford.nlp.tagger.maxent.History)",
            "edu.stanford.nlp.classify.LinearClassifier:double scoreOfRVFDatum(edu.stanford.nlp.ling.RVFDatum,java.lang.Object)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void dropFeaturesBelowThreshold(double)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.Map topWeights()",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:edu.stanford.nlp.trees.Tree getTree(edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser$Vertex,int,int)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void makeAnswerArraysAndTagIndex(java.util.Collection)",
            "edu.stanford.nlp.classify.Dataset:void addFeatures(java.util.Collection,boolean)",
            "edu.stanford.nlp.classify.Dataset:void applyFeatureCountThreshold(java.util.List)",
            "edu.stanford.nlp.ie.crf.CRFCliqueTree:double condLogProbGivenNext(int,java.lang.Object,java.lang.Object[])",
            "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.ie.crf.CRFDatum makeDatum(java.util.List,int,java.util.List)",
            "edu.stanford.nlp.ie.crf.CRFNonLinearSecondOrderLogConditionalObjectiveFunction:void calculate(double[])",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:java.util.List getKBestParses(int)",
            "edu.stanford.nlp.ie.crf.CRFCliqueTree:int[] objectArrayToIntArray(java.lang.Object[])",
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.classify.Dataset getDataset(edu.stanford.nlp.classify.Dataset,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.classify.GeneralizedExpectationObjectiveFunction:void updateDerivative(edu.stanford.nlp.ling.Datum,double[],edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.classify.LogisticClassifier:edu.stanford.nlp.stats.Counter justificationOf(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.classify.LogisticClassifier:java.lang.String toString()",
            "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter scoresOf(edu.stanford.nlp.ling.Datum,java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:void <init>(edu.stanford.nlp.parser.lexparser.BinaryGrammar,edu.stanford.nlp.parser.lexparser.UnaryGrammar,edu.stanford.nlp.parser.lexparser.Lexicon,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.ie.crf.CRFNonLinearLogConditionalObjectiveFunction:void empiricalCounts()",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,int,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:int[][][] transformDocData(int[][][])",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void pruneNodeFeatureIndices(int,int)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:boolean parse(edu.stanford.nlp.parser.lexparser.Lattice)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$State:void <init>(edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem,edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraphEdge,int,edu.stanford.nlp.semgraph.SemanticGraphEdge,java.util.function.Consumer,boolean)",
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFloatFunction:void empiricalCounts(int[][][][],int[][])",
            "edu.stanford.nlp.classify.RVFDataset:edu.stanford.nlp.ling.RVFDatum scaleDatumGaussian(edu.stanford.nlp.ling.RVFDatum)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:double[][] parseMatrix(java.lang.String[],edu.stanford.nlp.util.Index,int,boolean,boolean)",
            "edu.stanford.nlp.classify.LogConditionalObjectiveFunction:void calculateCLiterable(double[])",
            "edu.stanford.nlp.classify.Dataset:void selectFeatures(int,double[])",
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:void finalizeCounts()",
            "edu.stanford.nlp.parser.lexparser.ExhaustiveDependencyParser:edu.stanford.nlp.trees.Tree getBestParse()",
            "edu.stanford.nlp.parser.lexparser.ExhaustiveDependencyParser:double getBestScore()",
            "edu.stanford.nlp.classify.LinearClassifier:java.util.Set getLabelIndices(java.util.Set)",
            "edu.stanford.nlp.classify.LogisticClassifier:edu.stanford.nlp.stats.Counter justificationOf(java.util.Collection)",
            "edu.stanford.nlp.ie.crf.CRFCliqueTree:double condLogProbGivenPrevious(int,java.lang.Object,java.lang.Object[])",
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:void setLabelIndex(edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.classify.LogisticClassifier:double scoreOf(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.util.DeltaIndex:int addToIndex(java.lang.Object)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:double validateBinarizedTree(edu.stanford.nlp.trees.Tree,int)",
            "edu.stanford.nlp.ie.crf.LabelDictionary:boolean isConstrained(java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:edu.stanford.nlp.trees.Tree extractBestParse(int,int,int)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:void initializeChart(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:double scoreBinarizedTree(edu.stanford.nlp.trees.Tree,int)",
            "edu.stanford.nlp.classify.LinearClassifier:double scoreOf(edu.stanford.nlp.ling.Datum,java.lang.Object)",
            "edu.stanford.nlp.maxent.Features:void <init>(java.lang.String,edu.stanford.nlp.maxent.Experiments)",
            "edu.stanford.nlp.classify.LogisticClassifier:double scoreOf(java.util.Collection)",
            "edu.stanford.nlp.classify.LinearClassifier:double scoreOf(int[],java.lang.Object)",
            "edu.stanford.nlp.classify.RVFDataset:edu.stanford.nlp.ling.RVFDatum scaleDatum(edu.stanford.nlp.ling.RVFDatum)",
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunctionForLOP:void calculate(double[])",
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallStats:double score(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction:double documentLogProbability(int[][][],int,edu.stanford.nlp.ie.crf.CRFCliqueTree)",
            "edu.stanford.nlp.classify.LinearClassifier:java.util.Map weightsAsMapOfCounters()",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void addProcessedData(java.util.List,int[][][][],int[][],double[][][][],int)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:java.util.List treebankToLexiconEvents(java.util.List,edu.stanford.nlp.parser.lexparser.FactoredLexicon)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void setGoal(int)",
            "edu.stanford.nlp.maxent.Feature:int indexOf(int,int)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:java.util.List makeInitialItems(java.util.List)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void printLabelValue(java.util.List)",
            "edu.stanford.nlp.classify.LinearClassifier:double scoreOf(edu.stanford.nlp.ling.RVFDatum,java.lang.Object)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:void trainSemiSup()",
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunctionForLOP:void computeEHat()",
            "edu.stanford.nlp.ie.ner.CMMClassifier$Scorer:double[] scoresOf(int[],int)",
            "edu.stanford.nlp.tagger.maxent.TTags:int getIndex(java.lang.String)",
            "edu.stanford.nlp.ie.crf.LabelDictionary:int[] getConstrainedSet(java.lang.String)",
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFloatFunction:void calculate(float[])",
            "edu.stanford.nlp.classify.RVFDataset:void selectFeaturesFromSet(java.util.Set)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.util.Triple printProbsDocument(java.util.List)",
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallStats:edu.stanford.nlp.util.Triple getPrecisionInfo(java.lang.Object)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatcher$BranchStates:int getBid(int,int)",
            "edu.stanford.nlp.classify.LinearClassifier:double weight(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void buildGrammars()",
            "edu.stanford.nlp.classify.LinearClassifier:void <init>(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.classify.LinearClassifier:double weight(java.lang.Object,int)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:boolean parse(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:java.util.List getBestParses()",
            "edu.stanford.nlp.stats.MultiClassAccuracyStats:void initMC(edu.stanford.nlp.classify.ProbabilisticClassifier,edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$State:void <init>(edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem,edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$State,boolean)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:void retrain(edu.stanford.nlp.objectbank.ObjectBank,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.classify.Dataset:void addLabel(java.lang.Object)",
            "edu.stanford.nlp.classify.GeneralDataset:void printSVMLightFormat(java.io.PrintWriter)",
            "edu.stanford.nlp.ie.crf.CRFCliqueTree:double logProb(int,java.lang.Object)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatcher$BranchStates:int getBranchId(int,int,int)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.util.Triple documentToDataAndLabels(java.util.List)",
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction:void empiricalCountsForADoc(double[][],int)",
            "edu.stanford.nlp.ie.crf.CRFCliqueTree:double[] scoresOf(int[],int)",
            "edu.stanford.nlp.parser.lexparser.IterativeCKYPCFGParser:boolean doInsideScoresHelper(float)",
            "edu.stanford.nlp.ie.crf.CRFCliqueTree:void <init>(edu.stanford.nlp.ie.crf.FactorTable[],edu.stanford.nlp.util.Index,java.lang.Object,double)",
            "edu.stanford.nlp.ie.crf.CRFCliqueTree:double scoreOf(int[])",
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunctionForLOP:void logPotential(double[][][])",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:boolean isKnown(java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:edu.stanford.nlp.trees.Tree extractBestParse(java.lang.String,int,int)",
            "edu.stanford.nlp.util.HashIndex:int[] indices(java.util.Collection)",
            "edu.stanford.nlp.ie.crf.CRFClassifierNonlinear:int[][][] transformDocData(int[][][])",
            "edu.stanford.nlp.classify.LinearClassifier:double scoreOfRVFDatum(edu.stanford.nlp.stats.Counter,java.lang.Object)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void combineWeights(edu.stanford.nlp.ie.crf.CRFClassifier,double)",
            "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter scoresOfRVFDatum(edu.stanford.nlp.ling.RVFDatum)",
            "edu.stanford.nlp.parser.lexparser.UnaryRule:void <init>(java.lang.String,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:double getBestScore(java.lang.String)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void writeWeights(java.io.PrintStream)",
            "edu.stanford.nlp.parser.lexparser.ExhaustiveDependencyParser:boolean parse(java.util.List)",
            "edu.stanford.nlp.ie.crf.CRFNonLinearLogConditionalObjectiveFunction:void calculate(double[])",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:boolean pruneTW(edu.stanford.nlp.parser.lexparser.IntTaggedWord)",
            "edu.stanford.nlp.util.HashIndex:int indexOf(java.lang.Object,boolean)",
            "edu.stanford.nlp.classify.RVFDataset:void writeSVMLightFormat(java.io.PrintWriter)",
            "edu.stanford.nlp.ie.crf.LabelDictionary:void lock(int,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter scoresOf(edu.stanford.nlp.ling.Datum)",
            "edu.stanford.nlp.parser.lexparser.AbstractDependencyGrammar:boolean rootTW(edu.stanford.nlp.parser.lexparser.IntTaggedWord)",
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunctionWithDropout:edu.stanford.nlp.util.Quadruple expectedCountsAndValueForADoc(int,boolean,boolean)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:java.util.Iterator ruleIteratorByWord(int,int,java.lang.String)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:void classifySeq(java.util.List)",
            "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:edu.stanford.nlp.util.Pair trainTree(int,java.util.List,java.util.List,java.util.List,edu.stanford.nlp.parser.shiftreduce.Oracle)",
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFloatFunction:void calculateWeird1(float[])",
            "edu.stanford.nlp.ie.ner.CMMClassifier$Scorer:void <init>(java.util.List,edu.stanford.nlp.util.Index,edu.stanford.nlp.ie.ner.CMMClassifier,int,int,java.util.Set)",
            "edu.stanford.nlp.util.DeltaIndex:int indexOf(java.lang.Object)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void printFirstOrderProbsDocument(java.util.List)",
            "edu.stanford.nlp.tagger.maxent.AmbiguityClasses:int add(edu.stanford.nlp.tagger.maxent.AmbiguityClass)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:java.util.Iterator ruleIteratorByWord(int,int,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar$EndHead treeToDependencyHelper(edu.stanford.nlp.trees.Tree,java.util.List,int,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:java.util.List extractBestParses(int,int,int)",
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallStats:edu.stanford.nlp.util.Triple getRecallInfo(java.lang.Object)",
            "edu.stanford.nlp.classify.LogisticClassifier:edu.stanford.nlp.stats.Counter weightsAsCounter()"
        ]
    },
    "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.scoref.DocumentExamples extract(int,edu.stanford.nlp.hcoref.data.Document,java.util.Map,edu.stanford.nlp.scoref.Compressor)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:double[] makeDatumUsingEmbedding(java.util.List,int,java.util.List,edu.stanford.nlp.util.PaddedList,java.util.List,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.ie.crf.CRFDatum makeDatum(java.util.List,int,java.util.List)"
        ]
    },
    "edu.stanford.nlp.util.StringUtils:java.util.Properties argsToProperties(java.lang.String[],java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.nndep.DependencyParser:void main(java.lang.String[])",
            "edu.stanford.nlp.util.StringUtils:java.util.Properties argsToProperties(java.lang.String[])",
            "edu.stanford.nlp.process.DocumentPreprocessor:void main(java.lang.String[])",
            "edu.stanford.nlp.naturalli.OpenIE:void main(java.lang.String[])",
            "edu.stanford.nlp.international.french.process.FrenchTokenizer:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.metrics.Evalb:void main(java.lang.String[])",
            "edu.stanford.nlp.international.spanish.process.SpanishTokenizer:void main(java.lang.String[])",
            "edu.stanford.nlp.international.arabic.process.ArabicSegmenter:void main(java.lang.String[])",
            "edu.stanford.nlp.process.PTBTokenizer:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.hcoref.Preprocessor:java.lang.String findParagraphSpeaker(edu.stanford.nlp.hcoref.data.Document,java.util.List,int,java.lang.String,int,edu.stanford.nlp.hcoref.data.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.Preprocessor:void findSpeakersInConversation(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.fsm.TransducerGraph:java.util.Set getArcsByTarget(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.TransducerGraph:double inFlow(java.lang.Object)",
            "edu.stanford.nlp.fsm.TransducerGraph:void depthFirstSearchHelper(java.lang.Object,java.util.Set,int,boolean,java.lang.StringBuilder)",
            "edu.stanford.nlp.fsm.TransducerGraph$NormalizingGraphProcessor:edu.stanford.nlp.fsm.TransducerGraph processGraph(edu.stanford.nlp.fsm.TransducerGraph)",
            "edu.stanford.nlp.fsm.QuasiDeterminizer:edu.stanford.nlp.fsm.TransducerGraph pushLambdas(edu.stanford.nlp.fsm.TransducerGraph,edu.stanford.nlp.stats.ClassicCounter)",
            "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:java.util.Collection getInverseArcs(java.lang.Object)",
            "edu.stanford.nlp.fsm.QuasiDeterminizer:edu.stanford.nlp.stats.ClassicCounter computeLambda(edu.stanford.nlp.fsm.TransducerGraph)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.RandomWalk:void <init>(java.util.Collection,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEvent getEvent(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:void lazyKthBest(edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser$Vertex,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:void lazyNext(edu.stanford.nlp.util.PriorityQueue,edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser$Derivation,int)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:edu.stanford.nlp.trees.Tree getTree(edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser$Vertex,int,int)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.FileTreeModel:edu.stanford.nlp.trees.tregex.gui.FileTreeNode addToMap(java.io.File,edu.stanford.nlp.trees.tregex.gui.FileTreeNode)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.FileTreeModel:void findLoadableFiles(java.util.EnumMap,java.io.File[],java.util.List,edu.stanford.nlp.trees.tregex.gui.FileTreeNode)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TemplateHash:void addPrev(int,edu.stanford.nlp.tagger.maxent.History)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TaggerExperiments:void hashHistories()"
        ]
    },
    "edu.stanford.nlp.hcoref.data.CorefChain:java.util.Set getMentionsWithSameHead(int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.CorefChain:void <init>(edu.stanford.nlp.dcoref.CorefCluster,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:java.util.Map coref(edu.stanford.nlp.dcoref.Document)"
        ]
    },
    "edu.stanford.nlp.ie.pascal.ISODateInstance:void incrementDay(edu.stanford.nlp.ie.pascal.ISODateInstance,edu.stanford.nlp.util.Pair)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.pascal.ISODateInstance:void <init>(edu.stanford.nlp.ie.pascal.ISODateInstance,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.optimization.GoldenSectionLineSearch:void dumpMemory()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.GoldenSectionLineSearch:void discretizeCompute(java.util.function.Function,int,double,double)"
        ]
    },
    "edu.stanford.nlp.dcoref.ScorerMUC:void calculateRecall(edu.stanford.nlp.dcoref.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String printErrorLog(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.stats.Counter,int,edu.stanford.nlp.hcoref.data.Dictionaries,edu.stanford.nlp.hcoref.sieve.RFSieve)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.RFSieve:void findCoreferentAntecedent(edu.stanford.nlp.hcoref.data.Mention,int,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.StringBuilder)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEventMention getEventMention(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.TagCount:java.lang.String getFirstTag()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.Dictionary:java.lang.String getFirstTag(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.Dependencies:java.util.Set getGovMaxChains(java.util.Map,edu.stanford.nlp.ling.IndexedWord,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Dependencies:java.util.Set getGovMaxChains(java.util.Map,edu.stanford.nlp.ling.IndexedWord,int)",
            "edu.stanford.nlp.trees.Dependencies:edu.stanford.nlp.stats.Counter getTypedDependencyChains(java.util.List,int)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.ReadDataTagged:void loadFile(edu.stanford.nlp.tagger.io.TaggedFileReader,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.ReadDataTagged:void <init>(edu.stanford.nlp.tagger.maxent.TaggerConfig,edu.stanford.nlp.tagger.maxent.MaxentTagger,edu.stanford.nlp.tagger.maxent.PairsHolder)"
        ]
    },
    "edu.stanford.nlp.sentiment.ReadSentimentDataset:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEventMention:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntityMention getArg(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:edu.stanford.nlp.ie.machinereading.structure.EventMention convertAceEventMention(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEventMention,java.lang.String,edu.stanford.nlp.util.CoreMap,java.util.Map,int)"
        ]
    },
    "edu.stanford.nlp.stats.IntCounter:int getIntCount(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.IntCounter:java.lang.Object argmax(java.util.Comparator)",
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:void finalizeCounts()",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:int getStateSplitCount(java.lang.String)",
            "edu.stanford.nlp.stats.IntCounter:double getCount(java.lang.Object)",
            "edu.stanford.nlp.stats.IntCounter:int max()",
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:int getRetrieved(java.lang.Object)",
            "edu.stanford.nlp.hcoref.Rules:boolean sentenceContextIncompatible(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.hcoref.Rules:boolean contextIncompatible(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:int getRelevant(java.lang.Object)",
            "edu.stanford.nlp.stats.IntCounter:int totalIntCount(java.util.function.Predicate)",
            "edu.stanford.nlp.dcoref.Rules:boolean contextIncompatible(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void buildStateIndex()",
            "edu.stanford.nlp.stats.IntCounter:int min()",
            "edu.stanford.nlp.stats.IntCounter:java.lang.Object argmin(java.util.Comparator)",
            "edu.stanford.nlp.stats.IntCounter:void addAll(edu.stanford.nlp.stats.IntCounter)",
            "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$CorpusStats:void appendIntCountStats(java.lang.StringBuilder,java.lang.String,edu.stanford.nlp.stats.IntCounter)",
            "edu.stanford.nlp.stats.IntCounter:java.lang.String getCountAsString(java.lang.Object)",
            "edu.stanford.nlp.stats.IntCounter:void subtractAll(edu.stanford.nlp.stats.IntCounter)",
            "edu.stanford.nlp.tagger.maxent.TagCount:void <init>(edu.stanford.nlp.stats.IntCounter)",
            "edu.stanford.nlp.stats.IntCounter:java.util.Set keysAt(int)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:edu.stanford.nlp.stats.TwoDimensionalIntCounter reverseIndexOrder(edu.stanford.nlp.stats.TwoDimensionalIntCounter)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void clean()",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:int getCount(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.stats.IntCounter:java.util.Set keysAbove(int)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:edu.stanford.nlp.stats.IntCounter flatten()",
            "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$CorpusStats:void appendIntCountStats(java.lang.StringBuilder,java.lang.String,edu.stanford.nlp.stats.IntCounter)",
            "edu.stanford.nlp.stats.IntCounter:java.util.Set keysBelow(int)",
            "edu.stanford.nlp.dcoref.Rules:boolean sentenceContextIncompatible(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:int getCorrect(java.lang.Object)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:int getStateSplitCount(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.CTBunkDict:void readCTBunkDict(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.CTBunkDict:void <init>()"
        ]
    },
    "edu.stanford.nlp.util.TwoDimensionalMap:void <init>(edu.stanford.nlp.util.TwoDimensionalMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.sieve.RFSieve:edu.stanford.nlp.ling.RVFDatum extractDatum(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,int,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.RFSieve:void findCoreferentAntecedent(edu.stanford.nlp.hcoref.data.Mention,int,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.StringBuilder)"
        ]
    },
    "edu.stanford.nlp.stats.TwoDimensionalIntCounter:edu.stanford.nlp.stats.IntCounter totalCounts()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ChineseSimWordAvgDepGrammar:double probTBwithSimWords(edu.stanford.nlp.parser.lexparser.IntDependency)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseSimWordAvgDepGrammar:double scoreTB(edu.stanford.nlp.parser.lexparser.IntDependency)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseUnknownWordModelTrainer:edu.stanford.nlp.parser.lexparser.UnknownWordModel finishTraining()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.Dictionary:java.lang.String getFirstTag(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.ExtractorMidSentenceCapC:java.lang.String extract(edu.stanford.nlp.tagger.maxent.History,edu.stanford.nlp.tagger.maxent.PairsHolder)",
            "edu.stanford.nlp.tagger.maxent.Dictionary:void main(java.lang.String[])",
            "edu.stanford.nlp.tagger.maxent.ExtractorStartSentenceCap:java.lang.String extract(edu.stanford.nlp.tagger.maxent.History,edu.stanford.nlp.tagger.maxent.PairsHolder)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:java.util.List getKBestParses(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:java.util.List getKBestPCFGParses(int)",
            "edu.stanford.nlp.parser.lexparser.FastFactoredParser:boolean parse(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:java.util.List getKGoodParses(int)"
        ]
    },
    "edu.stanford.nlp.parser.metrics.EvalbByCat:java.util.Map makeObjectsByCat(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.EvalbByCat:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter:edu.stanford.nlp.stats.GeneralizedCounter conditionalizeHelper(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter:java.util.Set keySet(java.util.Set,java.lang.Object[],boolean)",
            "edu.stanford.nlp.stats.GeneralizedCounter:java.util.Set lowestLevelCounterEntrySet(java.util.Set,java.lang.Object[],boolean)",
            "edu.stanford.nlp.stats.GeneralizedCounter:java.util.Set entrySet(java.util.Set,java.lang.Object[],boolean)",
            "edu.stanford.nlp.stats.GeneralizedCounter:edu.stanford.nlp.stats.GeneralizedCounter conditionalizeOnce(java.lang.Object)",
            "edu.stanford.nlp.stats.GeneralizedCounter:void incrementCount2D(java.lang.Object,java.lang.Object,double)",
            "edu.stanford.nlp.stats.GeneralizedCounter:boolean containsKey(java.util.List)",
            "edu.stanford.nlp.stats.GeneralizedCounter:void incrementCount(java.util.List,double)",
            "edu.stanford.nlp.stats.GeneralizedCounter:void incrementCount(java.util.List,java.lang.Object,double)",
            "edu.stanford.nlp.stats.GeneralizedCounter:double[] getCounts(java.util.List)",
            "edu.stanford.nlp.stats.GeneralizedCounter:void incrementCount3D(java.lang.Object,java.lang.Object,java.lang.Object,double)",
            "edu.stanford.nlp.stats.GeneralizedCounter:edu.stanford.nlp.stats.GeneralizedCounter conditionalize(java.util.List)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TemplateHash:void addPositions(int,int,edu.stanford.nlp.tagger.maxent.FeatureKey)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TaggerExperiments:void getFeaturesNew()"
        ]
    },
    "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void clean()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.TwoDimensionalCounter:int size()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ScorePhrases:void applyPats(edu.stanford.nlp.stats.Counter,java.lang.String,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.util.CollectionValuedMap,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.dcoref.MUCMentionExtractor:edu.stanford.nlp.dcoref.Document nextDoc()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:double runAndScoreCoref(edu.stanford.nlp.dcoref.SieveCoreferenceSystem,edu.stanford.nlp.dcoref.MentionExtractor,java.util.Properties,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.util.MapList:java.lang.Object get(java.lang.Object,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Map mapTreeToSg(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.HookChart:java.util.Collection getRealEdgesWithL(int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void triggerHooks(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void triggerAllHooks(edu.stanford.nlp.parser.lexparser.Edge)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.GrammarCompactor:edu.stanford.nlp.fsm.TransducerGraph getGraphFromMap(java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.GrammarCompactor:boolean addOneBinaryRule(edu.stanford.nlp.parser.lexparser.BinaryRule,java.util.Map)",
            "edu.stanford.nlp.parser.lexparser.GrammarCompactor:boolean addOneUnaryRule(edu.stanford.nlp.parser.lexparser.UnaryRule,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.Dictionary:int getCountIn(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.data.Dictionaries:java.lang.String lookupCanonicalAmericanStateName(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Mention:boolean isDemonym(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.dcoref.Rules:boolean sentenceContextIncompatible(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries,java.util.Set,edu.stanford.nlp.dcoref.Semantics)"
        ]
    },
    "edu.stanford.nlp.pipeline.CleanXmlAnnotator:java.util.Set annotateWithTag(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.XMLUtils$XMLTag,edu.stanford.nlp.util.CollectionValuedMap,java.util.Map,java.util.Collection,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.CleanXmlAnnotator:java.util.List process(edu.stanford.nlp.pipeline.Annotation,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:void constructSentenceRelationMentions()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.TwoDimensionalIntCounter:edu.stanford.nlp.stats.IntCounter getCounter(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void setCount(java.lang.Object,java.lang.Object,int)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:edu.stanford.nlp.stats.TwoDimensionalIntCounter reverseIndexOrder(edu.stanford.nlp.stats.TwoDimensionalIntCounter)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void subtractAll(java.lang.Object,edu.stanford.nlp.stats.IntCounter)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:java.util.Set secondKeySet()",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:edu.stanford.nlp.stats.IntCounter setCounter(java.lang.Object,edu.stanford.nlp.stats.IntCounter)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void initRulesWithWord()",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:int getCount(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void removeZeroCounts()",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:edu.stanford.nlp.stats.IntCounter flatten()",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:int remove(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void subtractAll(edu.stanford.nlp.stats.TwoDimensionalIntCounter,boolean)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:int totalCount(java.lang.Object)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void incrementCount(java.lang.Object,java.lang.Object,int)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void train(java.util.Collection,java.util.Collection)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void addAll(java.lang.Object,edu.stanford.nlp.stats.IntCounter)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:java.lang.String toString()",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void addAll(edu.stanford.nlp.stats.TwoDimensionalIntCounter)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:int recalculateTemporaryBetas(edu.stanford.nlp.trees.Tree,double[],int,java.util.IdentityHashMap,java.util.IdentityHashMap,java.util.Map,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.ThreeDimensionalMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recalculateTemporaryBetas(edu.stanford.nlp.trees.Tree,boolean,java.util.Map,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.ThreeDimensionalMap)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:int recalculateTemporaryBetas(edu.stanford.nlp.trees.Tree,double[],int,java.util.IdentityHashMap,java.util.IdentityHashMap,java.util.Map,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.ThreeDimensionalMap)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recalculateMergedBetas(java.util.Map)"
        ]
    },
    "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:java.util.List filterMentionsWithSingletonClusters(edu.stanford.nlp.dcoref.Document,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void printConllOutput(edu.stanford.nlp.dcoref.Document,java.io.PrintWriter,boolean,boolean)"
        ]
    },
    "edu.stanford.nlp.pipeline.SentimentAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.dcoref.ScorerPairwise:void calculatePrecision(edu.stanford.nlp.dcoref.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.metrics.LeafAncestorEval:void updateCatAverages(java.util.List,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.LeafAncestorEval:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)"
        ]
    },
    "edu.stanford.nlp.fsm.TransducerGraph:boolean addArc(edu.stanford.nlp.fsm.TransducerGraph$Arc)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.TransducerGraph:void <init>(java.util.Set,java.lang.Object,java.util.Set,edu.stanford.nlp.fsm.TransducerGraph$ArcProcessor,edu.stanford.nlp.fsm.TransducerGraph$NodeProcessor)",
            "edu.stanford.nlp.fsm.TransducerGraph:void addOnePathToGraph(java.util.List,double,int,edu.stanford.nlp.fsm.TransducerGraph)",
            "edu.stanford.nlp.fsm.TransducerGraph:boolean addArc(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.fsm.TransducerGraph:java.util.Set getArcsBySource(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.TransducerGraph:void depthFirstSearchHelper(java.lang.Object,java.util.Set,int,boolean,java.lang.StringBuilder)",
            "edu.stanford.nlp.fsm.TransducerGraph$NormalizingGraphProcessor:edu.stanford.nlp.fsm.TransducerGraph processGraph(edu.stanford.nlp.fsm.TransducerGraph)",
            "edu.stanford.nlp.fsm.TransducerGraph:java.util.List sampleUniformPathFromGraph()",
            "edu.stanford.nlp.fsm.QuasiDeterminizer:edu.stanford.nlp.fsm.TransducerGraph pushLambdas(edu.stanford.nlp.fsm.TransducerGraph,edu.stanford.nlp.stats.ClassicCounter)",
            "edu.stanford.nlp.fsm.TransducerGraph:java.lang.String asDOTString()",
            "edu.stanford.nlp.fsm.TransducerGraph:double getSourceTotal(java.lang.Object)",
            "edu.stanford.nlp.fsm.TransducerGraph:double outFlow(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.dcoref.Document:void extractGoldCorefClusters()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:double runAndScoreCoref(edu.stanford.nlp.dcoref.SieveCoreferenceSystem,edu.stanford.nlp.dcoref.MentionExtractor,java.util.Properties,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:void matchCharSeqs(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument parseDocument(java.lang.String,boolean)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument parseDocument(java.lang.String,boolean,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Document:void mergeAcronymCache(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:void findCoreferentAntecedent(edu.stanford.nlp.hcoref.data.Mention,int,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.StringBuilder)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Value getValue(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.ScorerBCubed:void calculateRecallBconll(edu.stanford.nlp.dcoref.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.ScorerBCubed:void calculateRecall(edu.stanford.nlp.dcoref.Document)"
        ]
    },
    "edu.stanford.nlp.hcoref.Preprocessor:boolean findSubject(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.Preprocessor:boolean findSpeaker(edu.stanford.nlp.hcoref.data.Document,int,int,java.util.List,int,int,edu.stanford.nlp.hcoref.data.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.process.Americanize:java.lang.String americanize(java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.ObjectBankWrapper:java.lang.String fix(java.lang.String)",
            "edu.stanford.nlp.process.Americanize:edu.stanford.nlp.ling.HasWord apply(edu.stanford.nlp.ling.HasWord)",
            "edu.stanford.nlp.process.Americanize:java.lang.String americanize(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.Rules:boolean entityPersonDisagree(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Rules:boolean entityPersonDisagree(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph$EdgeIterator:void remove()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.Util:java.util.List cleanTree(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.util.IterableIterator:void remove()"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.Dictionary:void fillWordTagCounts(java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.ReadDataTagged:void <init>(edu.stanford.nlp.tagger.maxent.TaggerConfig,edu.stanford.nlp.tagger.maxent.MaxentTagger,edu.stanford.nlp.tagger.maxent.PairsHolder)"
        ]
    },
    "edu.stanford.nlp.international.morph.MorphoFeatures:java.lang.String getValue(edu.stanford.nlp.international.morph.MorphoFeatureSpecification$MorphoFeatureType)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.arabic.process.IOBUtils:void tokenToDatums(java.util.List,edu.stanford.nlp.ling.CoreLabel,java.lang.String,edu.stanford.nlp.international.arabic.process.IOBUtils$TokenType,edu.stanford.nlp.ling.CoreLabel,java.lang.String,boolean,boolean)",
            "edu.stanford.nlp.international.morph.MorphoFeatures:int numFeatureMatches(edu.stanford.nlp.international.morph.MorphoFeatures)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.Interner:java.lang.Object intern(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void initialize(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void relaxTempHook()",
            "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon$Symbol:edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon$Symbol intern()",
            "edu.stanford.nlp.parser.lexparser.HookChart:void registerRealEdge(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.parser.lexparser.HookChart:void registerEdgeIndexes(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.parser.lexparser.HookChart:void addEdge(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void relaxTempEdge()",
            "edu.stanford.nlp.parser.lexparser.HookChart:void addHook(edu.stanford.nlp.parser.lexparser.Hook)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.ComplexNodePattern:void populate(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.ComplexNodePattern:edu.stanford.nlp.ling.tokensregex.ComplexNodePattern valueOf(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map,java.util.function.BiFunction,java.util.function.Function)",
            "edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern:edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern valueOf(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Mention:edu.stanford.nlp.hcoref.data.Dictionaries$Gender getGender(edu.stanford.nlp.hcoref.data.Dictionaries,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Mention:void process(edu.stanford.nlp.hcoref.data.Dictionaries,edu.stanford.nlp.hcoref.data.Semantics)"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotatorPool:boolean register(java.lang.String,edu.stanford.nlp.pipeline.AnnotatorFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:edu.stanford.nlp.pipeline.AnnotatorPool getDefaultAnnotatorPool(java.util.Properties,edu.stanford.nlp.pipeline.AnnotatorImplementations)"
        ]
    },
    "edu.stanford.nlp.dcoref.Document:boolean findSpeaker(int,int,java.util.List,int,int,edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Document:void findQuotationSpeaker(int,java.util.List,edu.stanford.nlp.util.Pair,edu.stanford.nlp.util.Pair,edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph:void add(java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:void attachStrandedNodes(edu.stanford.nlp.trees.TreeGraphNode,edu.stanford.nlp.trees.TreeGraphNode,boolean,java.util.function.Predicate,java.util.function.Predicate,edu.stanford.nlp.graph.DirectedMultiGraph)",
            "edu.stanford.nlp.semgraph.SemanticGraph:edu.stanford.nlp.semgraph.SemanticGraphEdge addEdge(edu.stanford.nlp.semgraph.SemanticGraphEdge)",
            "edu.stanford.nlp.semgraph.SemanticGraph:edu.stanford.nlp.semgraph.SemanticGraphEdge addEdge(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.trees.GrammaticalRelation,double,boolean)",
            "edu.stanford.nlp.trees.GrammaticalStructure:void analyzeNode(edu.stanford.nlp.trees.TreeGraphNode,edu.stanford.nlp.trees.TreeGraphNode,java.util.Collection,edu.stanford.nlp.trees.HeadFinder,java.util.function.Predicate,java.util.function.Predicate,edu.stanford.nlp.graph.DirectedMultiGraph,edu.stanford.nlp.graph.DirectedMultiGraph)"
        ]
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph:int getOutDegree(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:int outDegree(edu.stanford.nlp.ling.IndexedWord)"
        ]
    },
    "edu.stanford.nlp.classify.GeneralizedExpectationObjectiveFunction:void computeEmpiricalStatistics(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.GeneralizedExpectationObjectiveFunction:void <init>(edu.stanford.nlp.classify.GeneralDataset,java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Document:boolean isCoref(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Set)",
            "edu.stanford.nlp.hcoref.sieve.RFSieve:edu.stanford.nlp.ling.RVFDatum extractDatum(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,int,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.String)",
            "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String printErrorLogDcoref(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,int,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood:void endThreads(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood:void main(java.lang.String[])",
            "edu.stanford.nlp.util.logging.Redwood$Util:void endThreads(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:void reportWeights(edu.stanford.nlp.classify.LinearClassifier,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:void trainMulticlass(edu.stanford.nlp.classify.GeneralDataset)"
        ]
    },
    "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader:void writeTabSep(java.io.PrintWriter,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CollectionValuedMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Document:edu.stanford.nlp.hcoref.data.SpeakerInfo getSpeakerInfo(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.Rules:int getSpeakerClusterId(edu.stanford.nlp.hcoref.data.Document,java.lang.String)",
            "edu.stanford.nlp.hcoref.Rules:boolean antecedentMatchesMentionSpeakerAnnotation(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TTags:void save(java.io.DataOutputStream,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TTags:void save(java.lang.String,java.util.Map)",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void saveModel(java.io.DataOutputStream)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:void trainUnannotated(java.util.List,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.Treebank,java.util.List)"
        ]
    },
    "edu.stanford.nlp.hcoref.sieve.Sieve:boolean isReallyCoref(edu.stanford.nlp.hcoref.data.Document,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.OracleSieve:void findCoreferentAntecedent(edu.stanford.nlp.hcoref.data.Mention,int,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.StringBuilder)",
            "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String printErrorLog(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.stats.Counter,int,edu.stanford.nlp.hcoref.data.Dictionaries,edu.stanford.nlp.hcoref.sieve.RFSieve)",
            "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String printErrorLogDcoref(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,int,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.MatchesPanel:void setMatches(java.util.List,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.InputPanel:void lambda$returnToValidState$274(java.util.List,edu.stanford.nlp.trees.tregex.gui.InputPanel$TRegexGUITreeVisitor,java.lang.String)",
            "edu.stanford.nlp.trees.tregex.gui.InputPanel$1:void lambda$run$268(java.util.List)",
            "edu.stanford.nlp.trees.tregex.gui.InputPanel$2:void lambda$run$270(java.lang.String,edu.stanford.nlp.trees.tregex.gui.InputPanel$TRegexGUITreeVisitor)"
        ]
    },
    "edu.stanford.nlp.time.TimeFormatter$TimeZoneComponent:org.joda.time.DateTimeZone parseDateTimeZone(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeFormatter$TimeZoneComponent:edu.stanford.nlp.time.SUTime$Temporal updateTemporal(edu.stanford.nlp.time.SUTime$Temporal,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.RandomWalk:double step(java.lang.Object,java.lang.Object,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.RandomWalk:double score(java.lang.Object,java.lang.Object,int)"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.RadicalMap:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.TimeFormatter$TimeZoneComponent:void <init>(java.util.Locale)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeFormatter$FormatterBuilder:void appendTimeZoneShortName()",
            "edu.stanford.nlp.time.TimeFormatter$FormatterBuilder:void appendTimeZoneName()"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Value attemptTypeConversion(edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue,edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Value doEvaluation(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.hcoref.Preprocessor:void processDiscourse(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.Preprocessor:void preprocess(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,edu.stanford.nlp.classify.LogisticClassifier,edu.stanford.nlp.trees.HeadFinder)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void countMergeEffects(edu.stanford.nlp.trees.Tree,java.util.Map,java.util.Map,java.util.IdentityHashMap,java.util.IdentityHashMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void countMergeEffects(edu.stanford.nlp.trees.Tree,java.util.Map,java.util.Map)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void countMergeEffects(edu.stanford.nlp.trees.Tree,java.util.Map,java.util.Map,java.util.IdentityHashMap,java.util.IdentityHashMap)"
        ]
    },
    "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void coreference(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:java.util.Map corefReturnHybridOutput(edu.stanford.nlp.dcoref.Document)",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:java.util.Map coref(edu.stanford.nlp.dcoref.Document)"
        ]
    },
    "edu.stanford.nlp.util.DeltaCollectionValuedMap:void removeMapping(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.CollectionValuedMap:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.Dictionary:int getCountPart(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.Preprocessor:java.lang.String findNextParagraphSpeaker(edu.stanford.nlp.hcoref.data.Document,java.util.List,int,edu.stanford.nlp.hcoref.data.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.Preprocessor:java.lang.String findParagraphSpeaker(edu.stanford.nlp.hcoref.data.Document,java.util.List,int,java.lang.String,int,edu.stanford.nlp.hcoref.data.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void printConllOutput(edu.stanford.nlp.dcoref.Document,java.io.PrintWriter,java.util.List,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void printConllOutput(edu.stanford.nlp.dcoref.Document,java.io.PrintWriter,boolean,boolean)"
        ]
    },
    "edu.stanford.nlp.dcoref.ScorerBCubed:void calculateRecallBcai(edu.stanford.nlp.dcoref.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.ScorerBCubed:void calculateRecall(edu.stanford.nlp.dcoref.Document)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.Dictionary:int getCount(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TaggerExperiments:void getFeaturesNew()",
            "edu.stanford.nlp.tagger.maxent.Dictionary:void main(java.lang.String[])",
            "edu.stanford.nlp.tagger.maxent.ExtractorCapLCSeen:java.lang.String extract(edu.stanford.nlp.tagger.maxent.History,edu.stanford.nlp.tagger.maxent.PairsHolder)"
        ]
    },
    "edu.stanford.nlp.trees.international.negra.NegraLabel:java.lang.String featureValue(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.semgrex.VariableStrings:java.lang.String getString(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void goToNextNodeMatch()"
        ]
    },
    "edu.stanford.nlp.fsm.DFSAState:edu.stanford.nlp.fsm.DFSATransition transition(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.DFSA:void printTrieDFSAHelper(edu.stanford.nlp.fsm.DFSAState,int)",
            "edu.stanford.nlp.wordseg.Sighan2005DocumentReaderAndWriter:void tagLatticeToAnswerLattice(edu.stanford.nlp.fsm.DFSAState,edu.stanford.nlp.fsm.DFSAState,java.lang.StringBuilder,edu.stanford.nlp.util.MutableInteger,int,double,java.util.Map,edu.stanford.nlp.fsm.DFSA,edu.stanford.nlp.ling.CoreLabel[])",
            "edu.stanford.nlp.fsm.DFSA:void printTrieAsRulesHelper(edu.stanford.nlp.fsm.DFSAState,java.lang.String,java.io.Writer)"
        ]
    },
    "edu.stanford.nlp.hcoref.sieve.Sieve:void merge(edu.stanford.nlp.hcoref.data.Document,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.OracleSieve:void findCoreferentAntecedent(edu.stanford.nlp.hcoref.data.Mention,int,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.StringBuilder)",
            "edu.stanford.nlp.hcoref.sieve.RFSieve:void findCoreferentAntecedent(edu.stanford.nlp.hcoref.data.Mention,int,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.StringBuilder)"
        ]
    },
    "edu.stanford.nlp.stats.TwoDimensionalIntCounter:boolean containsKey(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.Redwood:void attemptThreadControlThreadsafe(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood:void endThreads(java.lang.String)",
            "edu.stanford.nlp.util.logging.Redwood:void attemptThreadControlThreadsafe(long)",
            "edu.stanford.nlp.util.logging.Redwood:void attemptThreadControl(long,java.lang.Runnable)"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass$CalculateSufficientStatsThreads:edu.stanford.nlp.util.Triple call()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass$CalculateSufficientStatsThreads:java.lang.Object call()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(edu.stanford.nlp.ling.TaggedWord,int,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:int recalculateTemporaryBetas(edu.stanford.nlp.trees.Tree,double[],int,java.util.IdentityHashMap,java.util.IdentityHashMap,java.util.Map,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.ThreeDimensionalMap)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.List,double)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:int initialBetasAndLexicon(edu.stanford.nlp.trees.Tree,int,double)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void trainUnannotated(java.util.List,double)"
        ]
    },
    "edu.stanford.nlp.ie.NumberNormalizer:java.lang.Number wordToNumber(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.NumberNormalizer:java.util.List findNumbers(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.ie.NumberNormalizer:java.util.List findNumberRanges(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.maxent.Feature:void <init>(edu.stanford.nlp.maxent.Experiments,double[],edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.HashIndex:boolean add(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void makeAnswerArraysAndTagIndex(java.util.Collection)",
            "edu.stanford.nlp.classify.Dataset:void selectFeatures(int,double[])",
            "edu.stanford.nlp.ie.NERFeatureFactory:void readGazette(java.io.BufferedReader)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void dropFeaturesBelowThreshold(double)",
            "edu.stanford.nlp.classify.RVFDataset:void applyFeatureMaxCountThreshold(int)",
            "edu.stanford.nlp.classify.RVFDataset:void applyFeatureCountThreshold(int)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.Classifier trainClassifier(java.lang.Iterable)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void makeAnswerArraysAndTagIndex(java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon:void finishTraining()",
            "edu.stanford.nlp.util.HashIndex:edu.stanford.nlp.util.Index loadFromReader(java.io.BufferedReader)",
            "edu.stanford.nlp.classify.Dataset:void addFeatures(java.util.Collection,boolean)",
            "edu.stanford.nlp.classify.Dataset:void applyFeatureCountThreshold(java.util.List)",
            "edu.stanford.nlp.classify.LinearClassifier:void <init>(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void loadTextClassifier(java.io.BufferedReader)",
            "edu.stanford.nlp.time.SUTime$TimeIndex:boolean addTemporalFunc(edu.stanford.nlp.time.SUTime$Temporal)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.util.Index allLabels(int,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void loadTagIndex()",
            "edu.stanford.nlp.util.DeltaCollectionValuedMap:void add(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$OrPatternExpr:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr optimizeOrStringSeqs()",
            "edu.stanford.nlp.ie.crf.CRFClassifierNonlinear:void loadTextClassifier(java.io.BufferedReader)",
            "edu.stanford.nlp.util.HashIndex:boolean addAll(java.util.Collection)",
            "edu.stanford.nlp.classify.Dataset:void addLabel(java.lang.Object)",
            "edu.stanford.nlp.classify.GeneralDataset:void applyFeatureMaxCountThreshold(int)",
            "edu.stanford.nlp.classify.GeneralDataset:void retainFeatures(java.util.Set)",
            "edu.stanford.nlp.maxent.Experiments:edu.stanford.nlp.util.Index createIndex()",
            "edu.stanford.nlp.util.HashIndex:edu.stanford.nlp.util.Index loadFromFileWithList(java.lang.String)",
            "edu.stanford.nlp.classify.GeneralDataset:void applyFeatureCountThreshold(int)",
            "edu.stanford.nlp.util.DeltaIndex:boolean add(java.lang.Object)",
            "edu.stanford.nlp.time.SUTime$TimeIndex:boolean addTemporal(edu.stanford.nlp.time.SUTime$Temporal)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:void addFeature(java.lang.Object,java.lang.Object,double)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatcher$BranchStates:int getBranchId(int,int,int)",
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:void addGuess(java.lang.Object,java.lang.Object,boolean)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void pruneNodeFeatureIndices(int,int)",
            "edu.stanford.nlp.time.SUTime$TimeIndex:boolean addTemporalExpr(edu.stanford.nlp.time.TimeExpression)",
            "edu.stanford.nlp.stats.MultiClassChunkEvalStats:void addGuess(edu.stanford.nlp.pipeline.LabeledChunkIdentifier$LabelTagType,edu.stanford.nlp.pipeline.LabeledChunkIdentifier$LabelTagType,boolean)",
            "edu.stanford.nlp.util.HashIndex:edu.stanford.nlp.util.Index loadFromFilename(java.lang.String)",
            "edu.stanford.nlp.util.Maps:void putIntoValueCollection(java.util.Map,java.lang.Object,java.lang.Object,edu.stanford.nlp.util.CollectionFactory)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.util.Index getFeaturesAboveThreshold(edu.stanford.nlp.classify.Dataset,double)",
            "edu.stanford.nlp.time.SUTime$TimeIndex:void clear()",
            "edu.stanford.nlp.tagger.maxent.AmbiguityClasses:int add(edu.stanford.nlp.tagger.maxent.AmbiguityClass)",
            "edu.stanford.nlp.tagger.maxent.TTags:void read(java.io.DataInputStream)"
        ]
    },
    "edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries,java.util.Set,edu.stanford.nlp.dcoref.Semantics)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void coreference(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve)"
        ]
    },
    "edu.stanford.nlp.trees.international.tuebadz.TueBaDZHeadFinder:edu.stanford.nlp.trees.Tree determineNonTrivialHead(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.AbstractCollinsHeadFinder:edu.stanford.nlp.trees.Tree determineHead(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:java.lang.String getFirstTranslation(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.TreePrint:edu.stanford.nlp.trees.Tree lambda$printTreeInternal$19(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.parser.metrics.TaggingEval:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.TaggingEval:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void processResults(edu.stanford.nlp.parser.common.ParserQuery,edu.stanford.nlp.trees.Tree,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,edu.stanford.nlp.trees.TreePrint)",
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.ASBCunkDict:void readASBCunkDict(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.ASBCunkDict:void <init>()"
        ]
    },
    "edu.stanford.nlp.util.DeltaCollectionValuedMap:void add(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.DeltaCollectionValuedMap:void addAll(java.util.Map)",
            "edu.stanford.nlp.util.CollectionValuedMap:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.CtbDict:java.util.Set getpre(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.CtbDict:java.lang.String getTagPre(java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass$LabelWithSeedWords:edu.stanford.nlp.util.Pair call()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass$LabelWithSeedWords:java.lang.Object call()"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:void readCEDict(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:void readCEDict(java.lang.String)",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.CtbDict:java.util.Set getsuf(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.CtbDict:java.lang.String getTagSuf(java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.fsm.TransducerGraph:java.util.Set getArcsByInput(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:java.util.Collection getInverseArcs(java.lang.Object,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph:void removeZeroDegreeNodes()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.CorefSystem:java.util.List filterMentionsWithSingletonClusters(edu.stanford.nlp.hcoref.data.Document,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String printConllOutput(edu.stanford.nlp.hcoref.data.Document,boolean,boolean)"
        ]
    },
    "edu.stanford.nlp.hcoref.Rules:boolean entityPersonDisagree(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.Rules:boolean entityPersonDisagree(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.hcoref.sieve.RFSieve:edu.stanford.nlp.ling.RVFDatum extractDatum(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,int,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.String)",
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)"
        ]
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph$EdgeIterator:void <init>(java.util.Map,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.Iterator outgoingEdgeIterator(java.lang.Object)",
            "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.Iterator lambda$incomingEdgeIterable$22(java.lang.Object)",
            "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.Iterator lambda$outgoingEdgeIterable$23(java.lang.Object)",
            "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.Iterator incomingEdgeIterator(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.VariableStrings:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.ScorerBCubed:void calculatePrecisionBcai(edu.stanford.nlp.dcoref.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.ScorerBCubed:void calculatePrecisionBconll(edu.stanford.nlp.dcoref.Document)",
            "edu.stanford.nlp.dcoref.ScorerBCubed:void calculatePrecision(edu.stanford.nlp.dcoref.Document)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LatticeEdge:java.lang.String getAttr(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.AbstractCollinsHeadFinder:edu.stanford.nlp.trees.Tree determineNonTrivialHead(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalSemanticHeadFinder:edu.stanford.nlp.trees.Tree determineNonTrivialHead(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.AbstractCollinsHeadFinder:edu.stanford.nlp.trees.Tree determineHead(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.SemanticHeadFinder:edu.stanford.nlp.trees.Tree determineNonTrivialHead(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TagCount:void save(java.io.DataOutputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.Dictionary:void save(java.io.DataOutputStream)"
        ]
    },
    "edu.stanford.nlp.hcoref.md.MentionDetectionClassifier:void classifyMentions(java.util.List,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.metrics.TaggingEval:java.util.Map makeObjectsByCat(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.TaggingEval:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TemplateHash:int[] getPositions(edu.stanford.nlp.tagger.maxent.FeatureKey)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TaggerExperiments:void getFeaturesNew()"
        ]
    },
    "edu.stanford.nlp.util.HashableCoreMap:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object get(java.lang.Object)",
            "edu.stanford.nlp.util.Pair:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayUtils:java.lang.Boolean lambda$getSubListIndex$278(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.ArrayMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.Triple:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayCoreMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap$Entry:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.fsm.TransducerGraph$Arc:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.lang.Boolean lambda$labelWords$130(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object remove(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.util.Interval:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.surface.SurfacePatternFactory:edu.stanford.nlp.util.Triple getContextTokenStr(edu.stanford.nlp.ling.CoreLabel)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.surface.SurfacePatternFactory:java.util.Set getContext(java.util.List,int,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.util.ArrayCoreMap:boolean equals(edu.stanford.nlp.util.ArrayCoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.ArrayCoreMap:boolean equals(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.util.ArrayUtils:java.util.List getSubListIndex(java.lang.Object[],java.lang.Object[],java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void labelWords(java.lang.String,java.util.Map,java.util.Collection,java.lang.String,edu.stanford.nlp.util.CollectionValuedMap)",
            "edu.stanford.nlp.util.ArrayUtils:java.util.List getSubListIndex(java.lang.Object[],java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.stats.IntCounter:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object get(java.lang.Object)",
            "edu.stanford.nlp.util.Pair:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayUtils:java.lang.Boolean lambda$getSubListIndex$278(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.ArrayMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.Triple:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayCoreMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap$Entry:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.fsm.TransducerGraph$Arc:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.lang.Boolean lambda$labelWords$130(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object remove(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$SimpleValue:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$MethodCallExpression:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object get(java.lang.Object)",
            "edu.stanford.nlp.util.Pair:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$WrappedExpression:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.fsm.TransducerGraph$Arc:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$SimpleCachedExpression:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object remove(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayUtils:java.lang.Boolean lambda$getSubListIndex$278(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$VarAssignmentExpression:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.Triple:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayCoreMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap$Entry:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.lang.Boolean lambda$labelWords$130(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object put(java.lang.Object,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$SimpleExpression:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$MethodCallExpression:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object get(java.lang.Object)",
            "edu.stanford.nlp.util.Pair:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$WrappedExpression:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.fsm.TransducerGraph$Arc:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object remove(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayUtils:java.lang.Boolean lambda$getSubListIndex$278(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$VarAssignmentExpression:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.Triple:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayCoreMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap$Entry:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.lang.Boolean lambda$labelWords$130(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object put(java.lang.Object,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:boolean equals(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.Alignment:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.TwoDimensionalMap:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object get(java.lang.Object)",
            "edu.stanford.nlp.util.Pair:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.TwoDimensionalSet:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayUtils:java.lang.Boolean lambda$getSubListIndex$278(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.ArrayMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.Triple:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayCoreMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap$Entry:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.fsm.TransducerGraph$Arc:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.lang.Boolean lambda$labelWords$130(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object remove(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.stats.TwoDimensionalCounter:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object get(java.lang.Object)",
            "edu.stanford.nlp.util.Pair:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayUtils:java.lang.Boolean lambda$getSubListIndex$278(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.ArrayMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.Triple:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayCoreMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap$Entry:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.fsm.TransducerGraph$Arc:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.lang.Boolean lambda$labelWords$130(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object remove(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.stats.ClassicCounter:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object get(java.lang.Object)",
            "edu.stanford.nlp.util.Pair:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.stats.GeneralizedCounter:void main(java.lang.String[])",
            "edu.stanford.nlp.stats.Distribution:boolean equals(edu.stanford.nlp.stats.Distribution)",
            "edu.stanford.nlp.fsm.TransducerGraph$Arc:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object remove(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayUtils:java.lang.Boolean lambda$getSubListIndex$278(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.ling.RVFDatum:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.Triple:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayCoreMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap$Entry:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.lang.Boolean lambda$labelWords$130(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object put(java.lang.Object,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.util.HashIndex:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object get(java.lang.Object)",
            "edu.stanford.nlp.util.Pair:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayUtils:java.lang.Boolean lambda$getSubListIndex$278(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.ArrayMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.Triple:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayCoreMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap$Entry:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.fsm.TransducerGraph$Arc:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.lang.Boolean lambda$labelWords$130(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object remove(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.util.DeltaMap:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.negra.NegraPennTreeNormalizer$2:boolean test(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.negra.NegraPennTreeNormalizer$2:boolean test(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:void combine(edu.stanford.nlp.ie.crf.CRFClassifier,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:void readEmbeddingsData()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.metrics.LeafAncestorEval:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.Maps:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.maxent.Feature:void initHashVals()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.maxent.iis.LambdaSolve:double GainCompute(edu.stanford.nlp.maxent.Feature,double)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.AuxiliaryTree:void initializeNamesNodesMaps(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.tsurgeon.AuxiliaryTree:void <init>(edu.stanford.nlp.trees.Tree,boolean)"
        ]
    },
    "edu.stanford.nlp.trees.international.spanish.SpanishHeadFinder:void <init>(edu.stanford.nlp.trees.TreebankLanguagePack)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.spanish.SpanishTreebankLanguagePack:edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()",
            "edu.stanford.nlp.trees.international.spanish.SpanishTreebankLanguagePack:edu.stanford.nlp.trees.HeadFinder headFinder()",
            "edu.stanford.nlp.trees.international.spanish.SpanishHeadFinder:void <init>()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.UnaryGrammar:void addRule(edu.stanford.nlp.parser.lexparser.UnaryRule)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.UnaryGrammar:void readObject(java.io.ObjectInputStream)",
            "edu.stanford.nlp.parser.lexparser.BinaryGrammarExtractor:edu.stanford.nlp.util.Pair formResult()",
            "edu.stanford.nlp.parser.lexparser.UnaryGrammar:void readData(java.io.BufferedReader)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void buildGrammars()",
            "edu.stanford.nlp.parser.lexparser.GrammarCompactor:edu.stanford.nlp.util.Pair convertGraphsToGrammar(java.util.Set,java.util.Set,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.io.IOUtils:java.util.Map readMap(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:void processTempEval2(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.AuxiliaryTree:edu.stanford.nlp.util.Pair copyHelper(edu.stanford.nlp.trees.Tree,java.util.Map,edu.stanford.nlp.trees.TreeFactory,edu.stanford.nlp.ling.LabelFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.tsurgeon.AuxiliaryTree:edu.stanford.nlp.trees.tregex.tsurgeon.AuxiliaryTree copy(edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonMatcher,edu.stanford.nlp.trees.TreeFactory,edu.stanford.nlp.ling.LabelFactory)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AuxiliaryTree:edu.stanford.nlp.util.Pair copyHelper(edu.stanford.nlp.trees.Tree,java.util.Map,edu.stanford.nlp.trees.TreeFactory,edu.stanford.nlp.ling.LabelFactory)"
        ]
    },
    "edu.stanford.nlp.stats.ClassicCounter:void setCount(java.lang.Object,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.ling.RVFDatum makeRVFDatumFromStrings(java.lang.String[])",
            "edu.stanford.nlp.patterns.CandidatePhrase:void addFeature(java.lang.String,double)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter transform(edu.stanford.nlp.stats.Counter,java.util.function.Function)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter retainBelow(edu.stanford.nlp.stats.Counter,double)",
            "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution distributionFromLogisticCounter(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter multiplyInPlace(edu.stanford.nlp.stats.Counter,double)",
            "edu.stanford.nlp.stats.Counters:void loadIntoCounter(java.lang.String,java.lang.Class,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter makeWeightCounter(double[],edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.stats.Counters:void logInPlace(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter toCounter(java.util.Map,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.ie.machinereading.BasicEntityExtractor:edu.stanford.nlp.ie.machinereading.structure.EntityMention makeEntityMention(edu.stanford.nlp.util.CoreMap,int,int,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.ChineseUnknownWordModelTrainer:edu.stanford.nlp.parser.lexparser.UnknownWordModel finishTraining()",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter scale(edu.stanford.nlp.stats.Counter,double)",
            "edu.stanford.nlp.stats.Distribution:void addToKeySet(java.lang.Object)",
            "edu.stanford.nlp.sequences.KBestSequenceFinder:edu.stanford.nlp.stats.Counter kBestSequences(edu.stanford.nlp.sequences.SequenceModel,int)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.stats.Counter getPatterns(java.lang.String,java.util.Set,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.Counter,java.util.Set)",
            "edu.stanford.nlp.patterns.ScorePatternsFreqBased:edu.stanford.nlp.stats.Counter score()",
            "edu.stanford.nlp.classify.LogisticClassifier:edu.stanford.nlp.stats.Counter scoresOf(edu.stanford.nlp.ling.Datum)",
            "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution laplaceWithExplicitUnknown(edu.stanford.nlp.stats.Counter,double,java.lang.Object)",
            "edu.stanford.nlp.classify.GeneralDataset:void printSVMLightFormat(java.io.PrintWriter)",
            "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution getDistributionWithReservedMass(edu.stanford.nlp.stats.Counter,double)",
            "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:edu.stanford.nlp.stats.Counter score()",
            "edu.stanford.nlp.fsm.QuasiDeterminizer:edu.stanford.nlp.stats.ClassicCounter computeLambda(edu.stanford.nlp.fsm.TransducerGraph)",
            "edu.stanford.nlp.stats.Distribution:void main(java.lang.String[])",
            "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter chooseTopWords(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.Counter,java.util.Set,double)",
            "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter scoresOf(edu.stanford.nlp.ling.Datum,java.util.Collection)",
            "edu.stanford.nlp.sentiment.AbstractEvaluate:edu.stanford.nlp.stats.Counter lengthAccuracies()",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter product(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter division(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.hcoref.data.Dictionaries:void loadSignatures(java.lang.String,java.util.Map)",
            "edu.stanford.nlp.stats.ClassicCounter:edu.stanford.nlp.stats.ClassicCounter valueOfIgnoreComments(java.lang.String)",
            "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution getPerturbedUniformDistribution(java.util.Collection,java.util.Random)",
            "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter learnNewPhrasesPrivate(java.lang.String,edu.stanford.nlp.patterns.surface.PatternsForEachToken,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.util.Set,edu.stanford.nlp.util.CollectionValuedMap,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,java.lang.String,java.util.Set,boolean)",
            "edu.stanford.nlp.hcoref.sieve.RFSieve:void findCoreferentAntecedent(edu.stanford.nlp.hcoref.data.Mention,int,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.StringBuilder)",
            "edu.stanford.nlp.classify.LogisticClassifier:edu.stanford.nlp.stats.Counter scoresOfRVFDatum(edu.stanford.nlp.ling.RVFDatum)",
            "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter probabilityOfRVFDatum(edu.stanford.nlp.ling.RVFDatum)",
            "edu.stanford.nlp.stats.ClassicCounter:edu.stanford.nlp.stats.ClassicCounter fromString(java.lang.String)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:void setCount(java.lang.Object,java.lang.Object,double)",
            "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter probabilityOf(edu.stanford.nlp.ling.Datum)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter average(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.classify.Dataset:edu.stanford.nlp.ling.RVFDatum getL1NormalizedTFIDFDatum(edu.stanford.nlp.ling.Datum,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.ling.RVFDatum makeRVFDatum(java.lang.String[])",
            "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter probabilityOf(int[])",
            "edu.stanford.nlp.hcoref.data.Dictionaries:void loadCorefDictPMI(java.lang.String,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter scoresOfRVFDatum(edu.stanford.nlp.ling.RVFDatum)",
            "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter scoresOf(edu.stanford.nlp.ling.RVFDatum)",
            "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter scoresOf(int[])",
            "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution getPerturbedDistribution(edu.stanford.nlp.stats.Counter,java.util.Random)",
            "edu.stanford.nlp.stats.Counters:void divideInPlace(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.patterns.ScorePhrasesAverageFeatures:edu.stanford.nlp.stats.Counter scorePhrases(java.lang.String,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.Counter,java.util.Set,boolean)",
            "edu.stanford.nlp.patterns.surface.LearnImportantFeatures:edu.stanford.nlp.ling.RVFDatum getDatum(edu.stanford.nlp.ling.CoreLabel[],int)",
            "edu.stanford.nlp.parser.lexparser.BaseUnknownWordModelTrainer:edu.stanford.nlp.parser.lexparser.UnknownWordModel finishTraining()",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:edu.stanford.nlp.stats.ClassicCounter flatten()",
            "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution goodTuringWithExplicitUnknown(edu.stanford.nlp.stats.Counter,java.lang.Object)",
            "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:void <clinit>()",
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.classify.SVMLightClassifier trainClassifierBasic(edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter getCounts(edu.stanford.nlp.stats.Counter,java.util.Collection)",
            "edu.stanford.nlp.ling.tokensregex.PhraseTable:void readPhrasesWithTagScores(java.lang.String,java.util.regex.Pattern,java.util.regex.Pattern)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter toTiedRankCounter(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.classify.ColumnDataClassifier$Flags[] setProperties(java.util.Properties)",
            "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution absolutelyDiscountedDistribution(edu.stanford.nlp.stats.Counter,int,double)",
            "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:edu.stanford.nlp.stats.Counter convert2OneDim(java.lang.String,java.util.function.Function,java.util.Set,edu.stanford.nlp.stats.TwoDimensionalCounter,boolean,boolean,edu.stanford.nlp.stats.Counter,boolean)",
            "edu.stanford.nlp.stats.Counters$3:java.lang.Double put(java.lang.Object,java.lang.Double)",
            "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution goodTuringSmoothedCounter(edu.stanford.nlp.stats.Counter,int)",
            "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution dynamicCounterWithDirichletPrior(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Distribution,double)",
            "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter scoresOf(edu.stanford.nlp.ling.Datum)",
            "edu.stanford.nlp.parser.lexparser.RandomWalk:void <init>(java.util.Collection,int)",
            "edu.stanford.nlp.patterns.Data:void loadDomainNGrams()",
            "edu.stanford.nlp.dcoref.Dictionaries:void loadCorefDictPMI(java.lang.String,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter add(edu.stanford.nlp.stats.Counter,double)",
            "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution getDistributionFromLogValues(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter multiplyInPlace(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter divideInPlace(edu.stanford.nlp.stats.Counter,double)",
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:void printStats()",
            "edu.stanford.nlp.ie.machinereading.BasicRelationFeatureFactory:void addDependencyPathFeatures(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.ie.machinereading.structure.RelationMention,edu.stanford.nlp.ie.machinereading.structure.EntityMention,edu.stanford.nlp.ie.machinereading.structure.EntityMention,java.util.List,java.util.List,java.util.logging.Logger)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter add(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:void addFeature(java.lang.Object,java.lang.Object,double)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.stats.Counter normalizeSoftMaxMinMaxScores(edu.stanford.nlp.stats.Counter,boolean,boolean,boolean)",
            "edu.stanford.nlp.dcoref.Dictionaries:void loadSignatures(java.lang.String,java.util.Map)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter divisionNonNaN(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution getUniformDistribution(java.util.Collection)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter toCounter(double[],edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter getFCounter(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,double)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void setUpConstructor(java.util.Map,java.util.Map,boolean,java.util.Map,java.util.Map,java.util.Map)",
            "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution laplaceSmoothedDistribution(edu.stanford.nlp.stats.Counter,int,double)",
            "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution simpleGoodTuring(edu.stanford.nlp.stats.Counter,int)",
            "edu.stanford.nlp.patterns.surface.ScorePatternsF1:edu.stanford.nlp.stats.Counter score()",
            "edu.stanford.nlp.ie.machinereading.BasicRelationFeatureFactory:boolean addFeatures(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.ie.machinereading.structure.RelationMention,java.util.List,java.util.logging.Logger)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.util.TreeMap readLearnedWordsFromFile(java.io.File)",
            "edu.stanford.nlp.parser.lexparser.SisterAnnotationStats:void main(java.lang.String[])",
            "edu.stanford.nlp.scoref.SimpleLinearClassifier:void learn(edu.stanford.nlp.stats.Counter,double,double,edu.stanford.nlp.scoref.SimpleLinearClassifier$Loss)",
            "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter probabilityOf(edu.stanford.nlp.ling.RVFDatum)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:edu.stanford.nlp.stats.Counter classifyKBest(java.util.List,java.lang.Class,int)",
            "edu.stanford.nlp.scoref.SimpleLinearClassifier:void setWeight(java.lang.String,double)",
            "edu.stanford.nlp.classify.LogisticClassifier:edu.stanford.nlp.stats.Counter weightsAsCounter()"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:java.lang.String dependenciesToString(edu.stanford.nlp.trees.GrammaticalStructure,java.util.Collection,edu.stanford.nlp.trees.Tree,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:void printDependencies(edu.stanford.nlp.trees.GrammaticalStructure,java.util.Collection,edu.stanford.nlp.trees.Tree,boolean,boolean)"
        ]
    },
    "edu.stanford.nlp.neural.Embedding:void loadWordVectors(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.neural.Embedding:void <init>(java.lang.String,int)"
        ]
    },
    "edu.stanford.nlp.hcoref.CorefSystem:java.util.Map makeCorefOutput(edu.stanford.nlp.hcoref.data.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.CorefSystem:java.util.Map coref(edu.stanford.nlp.hcoref.data.Document,java.lang.StringBuilder[])"
        ]
    },
    "edu.stanford.nlp.trees.CollinsHeadFinder:void <init>(edu.stanford.nlp.trees.TreebankLanguagePack,java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.ModCollinsHeadFinder:void <init>(edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.trees.CollinsHeadFinder:void <init>(edu.stanford.nlp.trees.TreebankLanguagePack)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Dictionaries:void loadSignatures(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Dictionaries:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String[],java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.SunJurafskyChineseHeadFinder:void <init>(edu.stanford.nlp.trees.TreebankLanguagePack)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.pennchinese.SunJurafskyChineseHeadFinder:void <init>()"
        ]
    },
    "edu.stanford.nlp.io.IOUtils:java.util.List readCSVWithHeader(java.lang.String,char,char)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.io.IOUtils:java.util.List readCSVWithHeader(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.Dictionary:void read(java.io.DataInputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void readModelAndInit(java.util.Properties,java.io.DataInputStream,boolean)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:java.util.Map SetAttrValue(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:java.util.Map SetAttrValues(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TaggerConfig:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.BinaryGrammar:void addRule(edu.stanford.nlp.parser.lexparser.BinaryRule)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BinaryGrammarExtractor:edu.stanford.nlp.util.Pair formResult()",
            "edu.stanford.nlp.parser.lexparser.BinaryGrammar:void readData(java.io.BufferedReader)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void buildGrammars()",
            "edu.stanford.nlp.parser.lexparser.GrammarCompactor:edu.stanford.nlp.util.Pair convertGraphsToGrammar(java.util.Set,java.util.Set,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.util.XMLUtils$XMLTag:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.XMLUtils:edu.stanford.nlp.util.XMLUtils$XMLTag parseTag(java.lang.String)",
            "edu.stanford.nlp.util.XMLUtils:void main(java.lang.String[])",
            "edu.stanford.nlp.util.XMLUtils:edu.stanford.nlp.util.XMLUtils$XMLTag readAndParseTag(java.io.Reader)"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter:void incrementCount1D(java.lang.Object,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter:void incrementCount1D(java.lang.Object)",
            "edu.stanford.nlp.stats.GeneralizedCounter:void incrementCount2D(java.lang.Object,java.lang.Object,double)",
            "edu.stanford.nlp.stats.GeneralizedCounter:void incrementCount(java.util.List,double)",
            "edu.stanford.nlp.stats.GeneralizedCounter:void incrementCount(java.util.List,java.lang.Object,double)"
        ]
    },
    "edu.stanford.nlp.hcoref.Preprocessor:void initializeClusters(edu.stanford.nlp.hcoref.data.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.Preprocessor:void preprocess(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,edu.stanford.nlp.classify.LogisticClassifier,edu.stanford.nlp.trees.HeadFinder)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceToken:void loadDictionary(java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceToken:void loadGazetteers(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SpanishTreebankParserParams:void buildAnnotations()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SpanishTreebankParserParams:void <init>()"
        ]
    },
    "edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.Preprocessor:void fillMentionInfo(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,edu.stanford.nlp.classify.LogisticClassifier,edu.stanford.nlp.trees.HeadFinder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.Preprocessor:void initializeMentions(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,edu.stanford.nlp.classify.LogisticClassifier,edu.stanford.nlp.trees.HeadFinder)"
        ]
    },
    "edu.stanford.nlp.util.PropertiesUtils:java.util.Map asMap(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.PropertiesUtils:java.util.List getSortedEntries(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.util.Maps:java.util.Map invert(java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Maps:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.TregexPoweredTreebankParserParams:void compileAnnotations(edu.stanford.nlp.trees.HeadFinder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams:void setHeadFinder(edu.stanford.nlp.trees.HeadFinder)",
            "edu.stanford.nlp.parser.lexparser.SpanishTreebankParserParams:void buildAnnotations()",
            "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams:void initializeAnnotationPatterns()",
            "edu.stanford.nlp.parser.lexparser.SpanishTreebankParserParams:void setHeadFinder(edu.stanford.nlp.trees.HeadFinder)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BinaryGrammar:void readObject(java.io.ObjectInputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.TwoDimensionalMap:java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient$ModelDerivatives:edu.stanford.nlp.util.TwoDimensionalMap initDerivatives(edu.stanford.nlp.util.TwoDimensionalMap)",
            "edu.stanford.nlp.util.ThreeDimensionalMap:java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.semgraph.SemanticGraph fromProto(edu.stanford.nlp.pipeline.CoreNLPProtos$DependencyGraph,java.util.List,java.lang.String)",
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient$ModelDerivatives:edu.stanford.nlp.util.TwoDimensionalMap initTensorDerivatives(edu.stanford.nlp.util.TwoDimensionalMap)",
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient$ModelDerivatives:void addMatrices(edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.TwoDimensionalMap)",
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient:double scaleAndRegularize(edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.TwoDimensionalMap,double,double,boolean)",
            "edu.stanford.nlp.parser.dvparser.DVModel:void filterRulesForBatch(edu.stanford.nlp.util.TwoDimensionalSet,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.sentiment.SentimentModel:void <init>(edu.stanford.nlp.sentiment.RNNOptions,java.util.List)",
            "edu.stanford.nlp.sentiment.SentimentModel:edu.stanford.nlp.sentiment.SentimentModel modelFromMatrices(org.ejml.simple.SimpleMatrix,org.ejml.simple.SimpleMatrix,edu.stanford.nlp.neural.SimpleTensor,java.util.Map,edu.stanford.nlp.sentiment.RNNOptions)",
            "edu.stanford.nlp.parser.dvparser.DVParserCostAndGradient:void backpropDerivative(edu.stanford.nlp.trees.Tree,java.util.List,java.util.IdentityHashMap,edu.stanford.nlp.util.TwoDimensionalMap,java.util.Map,edu.stanford.nlp.util.TwoDimensionalMap,java.util.Map,java.util.Map,org.ejml.simple.SimpleMatrix)",
            "edu.stanford.nlp.util.TwoDimensionalSet:boolean add(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient:double scaleAndRegularizeTensor(edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.TwoDimensionalMap,double,double)",
            "edu.stanford.nlp.dcoref.Rules:boolean entityIsAcronym(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster)",
            "edu.stanford.nlp.parser.dvparser.DVParserCostAndGradient:void calculate(double[])",
            "edu.stanford.nlp.pipeline.AnnotationSerializer$IntermediateSemanticGraph:edu.stanford.nlp.semgraph.SemanticGraph convertIntermediateGraph(java.util.List)",
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient$ModelDerivatives:void addTensors(edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.TwoDimensionalMap)",
            "edu.stanford.nlp.parser.dvparser.DVModel:void addRandomBinaryMatrix(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:int recalculateTemporaryBetas(edu.stanford.nlp.trees.Tree,double[],int,java.util.IdentityHashMap,java.util.IdentityHashMap,java.util.Map,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.ThreeDimensionalMap)",
            "edu.stanford.nlp.dcoref.Document:void mergeAcronymCache(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:int initialBetasAndLexicon(edu.stanford.nlp.trees.Tree,int,double)",
            "edu.stanford.nlp.util.TwoDimensionalMap:void addAll(edu.stanford.nlp.util.TwoDimensionalMap,java.util.function.Function)",
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient:void backpropDerivativesAndError(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.TwoDimensionalMap,java.util.Map,java.util.Map,org.ejml.simple.SimpleMatrix)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void splitBetas()",
            "edu.stanford.nlp.util.ArrayCoreMap:boolean equals(edu.stanford.nlp.util.ArrayCoreMap)"
        ]
    },
    "edu.stanford.nlp.process.PTBTokenizer:java.util.Map optionArgDefs()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.PTBTokenizer:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.hcoref.md.CorefMentionFinder:void extractEnumerations(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.md.HybridCorefMentionFinder:java.util.List findMentions(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)",
            "edu.stanford.nlp.hcoref.md.RuleBasedCorefMentionFinder:java.util.List findMentions(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:java.util.Map weightsAsMapOfCounters()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:void reportWeights(edu.stanford.nlp.classify.LinearClassifier,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:void addEventMention(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEventMention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDomReader:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument parseDocument(java.io.File)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.Dictionary:void readTags(java.io.DataInputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.Dictionary:void read(java.io.DataInputStream)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.common.StringDictionary:void load(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.QuoteAnnotator:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:java.util.Map AttrValue(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.NodePattern CoreMapNode(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.InputPanel$TRegexGUITreeVisitor:void visitTree(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.IntCounter:void setCount(java.lang.Object,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void setCount(java.lang.Object,java.lang.Object,int)",
            "edu.stanford.nlp.stats.IntCounter:void setCounts(java.util.Collection,int)",
            "edu.stanford.nlp.stats.IntCounter:void setCount(java.lang.Object,java.lang.String)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.IntCounter toRankCounter(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.IntCounter:void setCount(java.lang.Object,double)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:edu.stanford.nlp.stats.IntCounter flatten()",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void splitStateCounts()"
        ]
    },
    "edu.stanford.nlp.util.DeltaMap:java.lang.Object put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.DeltaMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.util.DeltaMap:void main(java.lang.String[])",
            "edu.stanford.nlp.util.DeltaMap:java.lang.Object remove(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.trees.international.french.DybroFrenchHeadFinder:void <init>(edu.stanford.nlp.trees.TreebankLanguagePack)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams:edu.stanford.nlp.trees.HeadFinder headFinder()",
            "edu.stanford.nlp.trees.international.french.DybroFrenchHeadFinder:void <init>()"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.RadicalMap:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.NumberNormalizer:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:java.util.Map coref(edu.stanford.nlp.dcoref.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.DeterministicCorefAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:double runAndScoreCoref(edu.stanford.nlp.dcoref.SieveCoreferenceSystem,edu.stanford.nlp.dcoref.MentionExtractor,java.util.Properties,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEventMention:void addArg(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntityMention,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDomReader:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEventMention parseEventMention(org.w3c.dom.Node,edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:void addEntityMention(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntityMention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:void makeEntity(int,int,int,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDomReader:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument parseDocument(java.io.File)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.Dictionary:void read(java.io.DataInputStream,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.Dictionary:void read(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.pascal.ISODateInstance:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.data.Dictionaries:void loadStateAbbreviation(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Dictionaries:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String[],java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:void set(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Collection removeDuplicates(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.negra.NegraHeadFinder:void <init>(edu.stanford.nlp.trees.TreebankLanguagePack)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.negra.NegraPennLanguagePack:edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()",
            "edu.stanford.nlp.trees.international.negra.NegraPennLanguagePack:edu.stanford.nlp.trees.HeadFinder headFinder()",
            "edu.stanford.nlp.trees.international.negra.NegraHeadFinder:void <init>()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.UnknownGTTrainer:void finishTraining()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseUnknownWordModelTrainer:edu.stanford.nlp.parser.lexparser.UnknownWordModel finishTraining()",
            "edu.stanford.nlp.parser.lexparser.BaseUnknownWordModelTrainer:edu.stanford.nlp.parser.lexparser.UnknownWordModel finishTraining()"
        ]
    },
    "edu.stanford.nlp.optimization.GoldenSectionLineSearch:void discretizeCompute(java.util.function.Function,int,double,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.tuebadz.TueBaDZHeadFinder:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.tuebadz.TueBaDZLanguagePack:edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()",
            "edu.stanford.nlp.trees.international.tuebadz.TueBaDZLanguagePack:edu.stanford.nlp.trees.HeadFinder headFinder()",
            "edu.stanford.nlp.trees.tregex.gui.Preferences:edu.stanford.nlp.trees.HeadFinder lookupHeadFinder(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.metrics.TaggingEval:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.TwoDimensionalCounter:edu.stanford.nlp.stats.ClassicCounter setCounter(java.lang.Object,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:edu.stanford.nlp.stats.Counter convert2OneDim(java.lang.String,java.util.function.Function,java.util.Set,edu.stanford.nlp.stats.TwoDimensionalCounter,boolean,boolean,edu.stanford.nlp.stats.Counter,boolean)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.TwoDimensionalCounter scale(edu.stanford.nlp.stats.TwoDimensionalCounter,double)",
            "edu.stanford.nlp.patterns.ScorePhrasesAverageFeatures:edu.stanford.nlp.stats.Counter scorePhrases(java.lang.String,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.Counter,java.util.Set,boolean)"
        ]
    },
    "edu.stanford.nlp.process.DistSimClassifier:void <init>(java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.DistSimClassifier:void <init>(java.lang.String,boolean,boolean)",
            "edu.stanford.nlp.process.DistSimClassifier:void <init>(java.lang.String,boolean,boolean,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.international.morph.MorphoFeatures:void addFeature(edu.stanford.nlp.international.morph.MorphoFeatureSpecification$MorphoFeatureType,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.arabic.ArabicMorphoFeatureSpecification$ArabicMorphoFeatures:edu.stanford.nlp.international.morph.MorphoFeatures fromTagString(java.lang.String)",
            "edu.stanford.nlp.international.morph.MorphoFeatures:edu.stanford.nlp.international.morph.MorphoFeatures fromTagString(java.lang.String)",
            "edu.stanford.nlp.international.french.FrenchMorphoFeatureSpecification:void addPhiFeatures(edu.stanford.nlp.international.morph.MorphoFeatures,java.lang.String)",
            "edu.stanford.nlp.international.arabic.ArabicMorphoFeatureSpecification:void processInflectionalFeaturesHelper(edu.stanford.nlp.international.morph.MorphoFeatures,java.lang.String)",
            "edu.stanford.nlp.international.arabic.ArabicMorphoFeatureSpecification:edu.stanford.nlp.international.morph.MorphoFeatures strToFeatures(java.lang.String)",
            "edu.stanford.nlp.international.french.FrenchMorphoFeatureSpecification:edu.stanford.nlp.international.morph.MorphoFeatures strToFeatures(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.util.logging.RedirectOutputHandler:edu.stanford.nlp.util.logging.RedirectOutputHandler fromJavaUtilLogging(java.util.logging.Logger)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.JavaUtilLoggingAdaptor:void main(java.lang.String[])",
            "edu.stanford.nlp.util.logging.RedwoodConfiguration:edu.stanford.nlp.util.logging.RedwoodConfiguration output(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.neural.rnn.TopNGramRecord:void <init>(int,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.AbstractEvaluate:void reset()"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.SemgrexParser:edu.stanford.nlp.semgraph.semgrex.NodePattern Description(edu.stanford.nlp.semgraph.semgrex.GraphRelation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.SemgrexParser:edu.stanford.nlp.semgraph.semgrex.SemgrexPattern Child(edu.stanford.nlp.semgraph.semgrex.GraphRelation)"
        ]
    },
    "edu.stanford.nlp.stats.TwoDimensionalIntCounter:edu.stanford.nlp.stats.IntCounter setCounter(java.lang.Object,edu.stanford.nlp.stats.IntCounter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.international.arabic.process.ArabicSegmenter:java.util.Map optionArgDefs()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.arabic.process.ArabicSegmenter:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.stats.Counters$2:void setCount(java.lang.Object,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:void initializeAnnotationPatterns()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:void setHeadFinder(edu.stanford.nlp.trees.HeadFinder)",
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:void <init>()"
        ]
    },
    "edu.stanford.nlp.util.StringUtils:java.util.Map mapStringToMap(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sentiment.BuildBinarizedDataset:void extractLabels(java.util.Map,java.util.List,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.BuildBinarizedDataset:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.dcoref.Dictionaries:void loadStateAbbreviation(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Dictionaries:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String[],java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.neural.Embedding:void loadWordVectors(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.neural.Embedding:void <init>(java.lang.String,java.lang.String,int)"
        ]
    },
    "edu.stanford.nlp.util.BinaryHeapPriorityQueue:edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry makeEntry(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:boolean decreasePriority(java.lang.Object,double)",
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:boolean changePriority(java.lang.Object,double)",
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:boolean relaxPriority(java.lang.Object,double)",
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:boolean add(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Dictionaries:void loadGenderNumber(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Dictionaries:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String[],java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.time.TimeFormatter$TimeZoneComponent:void updateTimeZoneNames(java.util.Locale)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeFormatter$TimeZoneComponent:void <init>(java.util.Locale)"
        ]
    },
    "edu.stanford.nlp.pipeline.CoreMapAttributeAggregator:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:void addRelation(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceRelation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDomReader:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument parseDocument(java.io.File)"
        ]
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph:void <init>(edu.stanford.nlp.graph.DirectedMultiGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:void <init>(edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.pipeline.TokenizerAnnotator$TokenizerType:java.util.Map initializeNameMap()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.TokenizerAnnotator$TokenizerType:void <clinit>()"
        ]
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.Map toMap()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.ClassicCounter:double logIncrementCount(java.lang.Object,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.Document:void <init>(edu.stanford.nlp.pipeline.Annotation,java.util.List,java.util.List,edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.MentionExtractor:edu.stanford.nlp.dcoref.Document arrange(edu.stanford.nlp.pipeline.Annotation,java.util.List,java.util.List,java.util.List,java.util.List,boolean)"
        ]
    },
    "edu.stanford.nlp.international.arabic.Buckwalter:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.arabic.Buckwalter:void <init>(boolean)"
        ]
    },
    "edu.stanford.nlp.fsm.TransducerGraph:java.util.Map samplePathsFromGraph(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:void addNodeToIndexMap(int,edu.stanford.nlp.trees.TreeGraphNode)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:int indexLeaves(edu.stanford.nlp.trees.TreeGraphNode,int)",
            "edu.stanford.nlp.trees.GrammaticalStructure:int indexNodes(edu.stanford.nlp.trees.TreeGraphNode,int)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TagCount:edu.stanford.nlp.tagger.maxent.TagCount readTagCount(java.io.DataInputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.Dictionary:void readTags(java.io.DataInputStream)",
            "edu.stanford.nlp.tagger.maxent.Dictionary:void read(java.io.DataInputStream,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.international.arabic.ArabicHeadFinder:void <init>(edu.stanford.nlp.trees.TreebankLanguagePack,edu.stanford.nlp.trees.international.arabic.ArabicHeadFinder$TagSet)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.arabic.ArabicHeadFinder:void <init>(edu.stanford.nlp.trees.international.arabic.ArabicHeadFinder$TagSet)",
            "edu.stanford.nlp.trees.international.arabic.ArabicHeadFinder:void <init>(edu.stanford.nlp.trees.TreebankLanguagePack)"
        ]
    },
    "edu.stanford.nlp.util.StringUtils:java.util.Map parseCommandLineArguments(java.lang.String[],boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.StringUtils:java.util.Map parseCommandLineArguments(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LatticeEdge:void setAttr(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.metrics.Evalb:java.util.Map optionArgDefs()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.Evalb:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.optimization.GoldenSectionLineSearch:double minimize(java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:void crossValidateSetC(edu.stanford.nlp.classify.GeneralDataset,int,edu.stanford.nlp.stats.Scorer,edu.stanford.nlp.optimization.LineSearcher)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:double[] heldOutSetSigma(edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.stats.Scorer,edu.stanford.nlp.optimization.LineSearcher)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:void crossValidateSetSigma(edu.stanford.nlp.classify.GeneralDataset,int,edu.stanford.nlp.stats.Scorer,edu.stanford.nlp.optimization.LineSearcher)",
            "edu.stanford.nlp.optimization.GoldenSectionLineSearch:void main(java.lang.String[])",
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:void heldOutSetC(edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.stats.Scorer,edu.stanford.nlp.optimization.LineSearcher)",
            "edu.stanford.nlp.optimization.GoldenSectionLineSearch:double minimize(java.util.function.Function,double,double,double)",
            "edu.stanford.nlp.ie.crf.CRFBiasedClassifier:void adjustBias(java.util.List,java.util.function.Function,double,double)"
        ]
    },
    "edu.stanford.nlp.util.DeltaMap:void clear()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.international.spanish.process.SpanishTokenizer:java.util.Map argOptionDefs()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.spanish.process.SpanishTokenizer:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:void addEvent(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDomReader:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument parseDocument(java.io.File)"
        ]
    },
    "edu.stanford.nlp.international.morph.MorphoFeatures:void <init>(edu.stanford.nlp.international.morph.MorphoFeatures)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.semgrex.Alignment:edu.stanford.nlp.semgraph.semgrex.Alignment makeFromIndexArray(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraph,int[],double,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.Alignment:edu.stanford.nlp.semgraph.semgrex.Alignment makeFromIndexArray(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraph,int[])",
            "edu.stanford.nlp.semgraph.semgrex.Alignment:edu.stanford.nlp.semgraph.semgrex.Alignment makeFromIndexArray(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraph,int[],double)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.FileTreeModel:void <init>(edu.stanford.nlp.trees.tregex.gui.FileTreeNode)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.FilePanel:void clearAll()",
            "edu.stanford.nlp.trees.tregex.gui.FilePanel:void <init>()"
        ]
    },
    "edu.stanford.nlp.hcoref.Preprocessor:void findSpeakersInConversation(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.Preprocessor:void findSpeakers(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.time.JollyDayHolidays:java.util.Map getAllHolidaysMap(java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.JollyDayHolidays:java.util.Map getAllHolidaysMap(de.jollyday.config.Configuration)"
        ]
    },
    "edu.stanford.nlp.international.french.process.FrenchTokenizer:java.util.Map argOptionDefs()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.french.process.FrenchTokenizer:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.util.CollectionUtils:java.util.Collection uniqueNonhashableObjects(java.util.Collection,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.OutputHandler:void colorChannel(java.lang.String,edu.stanford.nlp.util.logging.Color)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseSemanticHeadFinder:void ruleChanges()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.pennchinese.ChineseSemanticHeadFinder:void <init>(edu.stanford.nlp.trees.TreebankLanguagePack)"
        ]
    },
    "edu.stanford.nlp.pipeline.TokenizerAnnotator$TokenizerType:java.util.Map initializeClassMap()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.TokenizerAnnotator$TokenizerType:void <clinit>()"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Dictionaries:void loadDemonymLists(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Dictionaries:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String[],java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.scoref.StatisticalCorefSystem:void annotate(edu.stanford.nlp.pipeline.Annotation,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.StatisticalCorefSystem:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.ie.NERFeatureFactory:void initLexicon(edu.stanford.nlp.sequences.SeqClassifierFlags)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.NERFeatureFactory:void init(edu.stanford.nlp.sequences.SeqClassifierFlags)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:java.util.Map FieldValue(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue CompositeFieldValue(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.util.DeltaCollectionValuedMap:java.util.Collection remove(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.DeltaCollectionValuedMap:java.lang.Object remove(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.VariableStrings:void setVar(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void commitVariableGroups(java.util.regex.Matcher)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:void addEntity(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntity)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:void makeEntity(int,int,int,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDomReader:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument parseDocument(java.io.File)"
        ]
    },
    "edu.stanford.nlp.trees.international.negra.NegraHeadFinder:edu.stanford.nlp.trees.HeadFinder negraSemanticHeadFinder()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.TimeFormatter$TextDateComponent:void addValue(java.lang.String,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeFormatter$TextDateComponent:void <init>(org.joda.time.DateTimeFieldType,java.util.Locale,java.lang.Boolean)"
        ]
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph:boolean addVertex(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:void addVertex(edu.stanford.nlp.ling.IndexedWord)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.UnaryGrammar:void purgeRules()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.UnaryGrammar:void readObject(java.io.ObjectInputStream)",
            "edu.stanford.nlp.parser.lexparser.UnaryGrammar:void readData(java.io.BufferedReader)",
            "edu.stanford.nlp.parser.lexparser.GrammarCompactor:edu.stanford.nlp.util.Pair convertGraphsToGrammar(java.util.Set,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.Treebank,java.util.List)"
        ]
    },
    "edu.stanford.nlp.trees.international.negra.NegraLabel:void setFeatureValue(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.TrueCaseAnnotator:java.util.Map loadMixedCaseMap(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.TrueCaseAnnotator:void <init>(java.lang.String,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "edu.stanford.nlp.dcoref.Dictionaries:void loadDemonymLists(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Dictionaries:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String[],java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.stats.ClassicCounter:double incrementCount(java.lang.Object,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:void addAllInterningAndPrefixingRVF(edu.stanford.nlp.stats.ClassicCounter,edu.stanford.nlp.stats.ClassicCounter,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.UnknownGTTrainer:void train(edu.stanford.nlp.ling.TaggedWord,double)",
            "edu.stanford.nlp.hcoref.sieve.RFSieve:edu.stanford.nlp.ling.RVFDatum extractDatum(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,int,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.FrenchUnknownWordModelTrainer:void train(edu.stanford.nlp.ling.TaggedWord,int,double)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter transformWithValuesAdd(edu.stanford.nlp.stats.Counter,java.util.function.Function)",
            "edu.stanford.nlp.stats.ClassicCounter:double decrementCount(java.lang.Object,double)",
            "edu.stanford.nlp.ie.crf.CRFCliqueTree:edu.stanford.nlp.stats.Counter logProbs(int)",
            "edu.stanford.nlp.parser.lexparser.ArabicUnknownWordModelTrainer:void train(edu.stanford.nlp.ling.TaggedWord,int,double)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter asCounter(edu.stanford.nlp.util.FixedPrioritiesPriorityQueue)",
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.stats.ClassicCounter convertSVMStructWeights(edu.stanford.nlp.stats.ClassicCounter,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.stats.Counters:void addInPlace(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void writeObject(java.io.ObjectOutputStream)",
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,java.util.Map)",
            "edu.stanford.nlp.classify.GeneralizedExpectationObjectiveFunction:void updateDerivative(edu.stanford.nlp.ling.Datum,double[],edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.classify.LogisticClassifier:edu.stanford.nlp.stats.Counter justificationOf(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void saveTrees(java.util.Collection,double,java.util.Collection,double)",
            "edu.stanford.nlp.stats.Distribution:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void expandStop(edu.stanford.nlp.parser.lexparser.IntDependency,short,double,boolean)",
            "edu.stanford.nlp.ie.crf.CRFCliqueTree:edu.stanford.nlp.stats.Counter probs(int)",
            "edu.stanford.nlp.semgraph.SemanticGraph:void resetRoots()",
            "edu.stanford.nlp.classify.RVFDataset:edu.stanford.nlp.ling.RVFDatum getRVFDatum(int)",
            "edu.stanford.nlp.scoref.ClusteringCorefSystem:void runCoref(edu.stanford.nlp.hcoref.data.Document)",
            "edu.stanford.nlp.classify.RVFDataset:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.BaseUnknownWordModel:void addTagging(boolean,edu.stanford.nlp.parser.lexparser.IntTaggedWord,double)",
            "edu.stanford.nlp.parser.lexparser.LinearGrammarSmoother:void updateCounters(edu.stanford.nlp.parser.lexparser.Rule,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.stats.ClassicCounter convertSVMLightWeights(edu.stanford.nlp.stats.ClassicCounter,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.ie.crf.CRFCliqueTree:edu.stanford.nlp.stats.Counter condLogProbsGivenNext(int,int[])",
            "edu.stanford.nlp.scoref.PairwiseModelTrainer:void writeScores(java.util.List,edu.stanford.nlp.scoref.Compressor,edu.stanford.nlp.scoref.PairwiseModel,java.io.PrintWriter,java.util.Map)",
            "edu.stanford.nlp.scoref.MetaFeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.scoref.Example,java.util.Map,edu.stanford.nlp.scoref.Compressor)",
            "edu.stanford.nlp.classify.RVFDataset:edu.stanford.nlp.ling.RVFDatum scaleDatumGaussian(edu.stanford.nlp.ling.RVFDatum)",
            "edu.stanford.nlp.scoref.BestFirstCorefSystem:void runCoref(edu.stanford.nlp.hcoref.data.Document)",
            "edu.stanford.nlp.scoref.MetaFeatureExtractor:edu.stanford.nlp.stats.Counter getConjunction(edu.stanford.nlp.stats.Counter,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.TreeBinarizer:edu.stanford.nlp.trees.Tree markovInsideBinarizeLocalTreeNew(edu.stanford.nlp.trees.Tree,int,int,int,boolean)",
            "edu.stanford.nlp.scoref.FeatureExtractor:void addNumeric(edu.stanford.nlp.stats.Counter,java.lang.String,int)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:void incrementCount(java.lang.Object,java.lang.Object,double)",
            "edu.stanford.nlp.classify.Dataset:edu.stanford.nlp.ling.RVFDatum getL1NormalizedTFIDFDatum(edu.stanford.nlp.ling.Datum,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.parser.lexparser.BinaryGrammarExtractor:void tallyInternalNode(edu.stanford.nlp.trees.Tree,double)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:boolean countResultsSegmenter(java.util.List,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.ie.machinereading.RelationExtractorResultsPrinter:void printResultsInternal(java.io.PrintWriter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.ClassicCounter)",
            "edu.stanford.nlp.scoref.Clusterer:edu.stanford.nlp.stats.Counter addSuffix(edu.stanford.nlp.stats.Counter,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.ChineseUnknownWordModelTrainer:void train(edu.stanford.nlp.ling.TaggedWord,int,double)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:boolean countResultsPerEntity(java.util.List,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.lang.String,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.lang.Class)",
            "edu.stanford.nlp.ie.crf.CRFCliqueTree:edu.stanford.nlp.stats.Counter condLogProbsGivenNext(int,java.lang.Object[])",
            "edu.stanford.nlp.classify.LogisticClassifier:edu.stanford.nlp.stats.Counter justificationOf(java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(edu.stanford.nlp.ling.TaggedWord,int,double)",
            "edu.stanford.nlp.scoref.Clusterer:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.scoref.ClustererDataLoader$ClustererDoc,edu.stanford.nlp.scoref.Clusterer$Cluster,edu.stanford.nlp.scoref.Clusterer$Cluster,edu.stanford.nlp.scoref.Clusterer$GlobalFeatures)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:java.util.List getHighPrecisionFeatures(edu.stanford.nlp.classify.GeneralDataset,double,int)",
            "edu.stanford.nlp.stats.ClassicCounter:double incrementCount(java.lang.Object)",
            "edu.stanford.nlp.classify.RVFDataset:void readSVMLightFormat(java.io.File)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:edu.stanford.nlp.stats.Counter sumInnerCounter()",
            "edu.stanford.nlp.stats.Counters:void addInPlace(edu.stanford.nlp.stats.Counter,double)",
            "edu.stanford.nlp.scoref.MetaFeatureExtractor:edu.stanford.nlp.stats.Counter filterOut(edu.stanford.nlp.stats.Counter,java.util.List)",
            "edu.stanford.nlp.scoref.SimpleLinearClassifier$CountBasedLearningRate:void update(java.lang.String,double)",
            "edu.stanford.nlp.classify.RVFDataset:edu.stanford.nlp.ling.RVFDatum svmLightLineToRVFDatum(java.lang.String)",
            "edu.stanford.nlp.stats.ClassicCounter:double decrementCount(java.lang.Object)",
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)",
            "edu.stanford.nlp.parser.metrics.TaggingEval:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)",
            "edu.stanford.nlp.parser.lexparser.SpanishUnknownWordModelTrainer:void train(edu.stanford.nlp.ling.TaggedWord,int,double)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter linearCombination(edu.stanford.nlp.stats.Counter,double,edu.stanford.nlp.stats.Counter,double)",
            "edu.stanford.nlp.stats.Counters:void addInPlace(edu.stanford.nlp.stats.Counter,java.util.Collection)",
            "edu.stanford.nlp.ie.crf.CRFCliqueTree:edu.stanford.nlp.stats.Counter condLogProbsGivenPrevious(int,java.lang.Object[])",
            "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:edu.stanford.nlp.stats.Counter convert2OneDim(java.lang.String,java.util.function.Function,java.util.Set,edu.stanford.nlp.stats.TwoDimensionalCounter,boolean,boolean,edu.stanford.nlp.stats.Counter,boolean)",
            "edu.stanford.nlp.parser.lexparser.BaseUnknownWordModelTrainer:void train(edu.stanford.nlp.ling.TaggedWord,int,double)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void expandArg(edu.stanford.nlp.parser.lexparser.IntDependency,short,double)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammarExtractor:void tallyRoot(edu.stanford.nlp.trees.Tree,double)",
            "edu.stanford.nlp.parser.lexparser.GrammarCompactor:edu.stanford.nlp.util.Pair convertGraphsToGrammar(java.util.Set,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:void finishRanking(edu.stanford.nlp.stats.Counter,double)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass$LabelWithSeedWords:edu.stanford.nlp.util.Pair call()",
            "edu.stanford.nlp.scoref.Clusterer:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.scoref.ClustererDataLoader$ClustererDoc,java.util.List,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.classify.RVFDataset:edu.stanford.nlp.ling.RVFDatum scaleDatum(edu.stanford.nlp.ling.RVFDatum)",
            "edu.stanford.nlp.ie.crf.CRFCliqueTree:edu.stanford.nlp.stats.Counter condLogProbsGivenPrevious(int,int[])",
            "edu.stanford.nlp.ie.ner.CMMClassifier:void classifySeq(java.util.List)",
            "edu.stanford.nlp.classify.LinearClassifier:java.util.Map weightsAsMapOfCounters()",
            "edu.stanford.nlp.classify.Dataset:edu.stanford.nlp.stats.Counter getFeatureCounter()",
            "edu.stanford.nlp.parser.lexparser.EnglishUnknownWordModelTrainer:void train(edu.stanford.nlp.ling.TaggedWord,int,double)",
            "edu.stanford.nlp.scoref.Clusterer:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.scoref.ClustererDataLoader$ClustererDoc,edu.stanford.nlp.util.Pair,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.parser.metrics.EvalbByCat:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)",
            "edu.stanford.nlp.ling.RVFDatum:void <init>(edu.stanford.nlp.ling.Datum)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void addTagging(boolean,edu.stanford.nlp.parser.lexparser.IntTaggedWord,double)",
            "edu.stanford.nlp.scoref.Compressor:edu.stanford.nlp.stats.Counter uncompress(edu.stanford.nlp.scoref.CompressedFeatureVector)",
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.util.Pair readModel(java.io.File,boolean)",
            "edu.stanford.nlp.hcoref.md.MentionDetectionClassifier:void classifyMentions(java.util.List,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader:java.util.Map makeDocInfo(edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$CoNLLDocument)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader:edu.stanford.nlp.hcoref.data.InputDoc nextDoc()"
        ]
    },
    "edu.stanford.nlp.trees.international.negra.NegraLabel$NegraLabelFactory:edu.stanford.nlp.ling.Label newLabel(edu.stanford.nlp.ling.Label)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Document:java.util.Map coref(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Document:java.util.Map coref()"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:void loadTextClassifier(java.io.BufferedReader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void loadTextClassifier(java.lang.String,java.util.Properties)",
            "edu.stanford.nlp.ie.crf.CRFClassifierNonlinear:void loadTextClassifier(java.io.BufferedReader)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.VariableStrings:void unsetVar(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void decommitVariableGroups()"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:void addRelationMention(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceRelationMention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDomReader:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument parseDocument(java.io.File)"
        ]
    },
    "edu.stanford.nlp.dcoref.Document:void findSpeakersInConversation(edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Document:void findSpeakers(edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.time.TimeFormatter$TimeZoneIdComponent:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.fsm.DFSAState:void addTransition(edu.stanford.nlp.fsm.DFSATransition)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.wordseg.Sighan2005DocumentReaderAndWriter:void tagLatticeToAnswerLattice(edu.stanford.nlp.fsm.DFSAState,edu.stanford.nlp.fsm.DFSAState,java.lang.StringBuilder,edu.stanford.nlp.util.MutableInteger,int,double,java.util.Map,edu.stanford.nlp.fsm.DFSA,edu.stanford.nlp.ling.CoreLabel[])",
            "edu.stanford.nlp.sequences.ViterbiSearchGraphBuilder:edu.stanford.nlp.fsm.DFSA getGraph(edu.stanford.nlp.sequences.SequenceModel,edu.stanford.nlp.util.Index)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.NodePattern CoreMapWordPattern(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr SeqRegexBasic(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.MultiNodePattern MultiNodePattern(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.process.DocumentPreprocessor:java.util.Map argOptionDefs()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.DocumentPreprocessor:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalRelation:void <init>(edu.stanford.nlp.international.Language,java.lang.String,java.lang.String,edu.stanford.nlp.trees.GrammaticalRelation,java.lang.String,edu.stanford.nlp.trees.tregex.TregexPatternCompiler,java.lang.String[],java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalRelation:void <init>(edu.stanford.nlp.international.Language,java.lang.String,java.lang.String,edu.stanford.nlp.trees.GrammaticalRelation)",
            "edu.stanford.nlp.trees.GrammaticalRelation:void <init>(edu.stanford.nlp.international.Language,java.lang.String,java.lang.String,edu.stanford.nlp.trees.GrammaticalRelation,java.lang.String,edu.stanford.nlp.trees.tregex.TregexPatternCompiler,java.lang.String[])",
            "edu.stanford.nlp.trees.GrammaticalRelation:void <init>(edu.stanford.nlp.international.Language,java.lang.String,java.lang.String,edu.stanford.nlp.trees.GrammaticalRelation,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.metrics.UnlabeledAttachmentEval:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.Dictionary:void read(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.OutputHandler:void styleChannel(java.lang.String,edu.stanford.nlp.util.logging.Style)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.process.Americanize:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.TagCount:void <init>(edu.stanford.nlp.stats.IntCounter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.Dictionary:void fillWordTagCounts(java.util.Map)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Map anonymyizeNodes(java.lang.Iterable,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Map makeGenericVertices(java.lang.Iterable)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Map makeBlanketVertices(java.lang.Iterable)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceToken:void loadProximityClasses(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseHeadFinder:void <init>(edu.stanford.nlp.trees.TreebankLanguagePack)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.pennchinese.ChineseHeadFinder:void <init>()",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseTreebankLanguagePack:edu.stanford.nlp.trees.HeadFinder headFinder()",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseSemanticHeadFinder:void <init>(edu.stanford.nlp.trees.TreebankLanguagePack)"
        ]
    },
    "edu.stanford.nlp.trees.international.french.FrenchHeadFinder:void <init>(edu.stanford.nlp.trees.international.french.FrenchTreebankLanguagePack)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.french.FrenchHeadFinder:void <init>()",
            "edu.stanford.nlp.trees.international.french.FrenchTreebankLanguagePack:edu.stanford.nlp.trees.HeadFinder headFinder()",
            "edu.stanford.nlp.trees.international.french.FrenchTreebankLanguagePack:edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.NodePattern:void <init>(edu.stanford.nlp.semgraph.semgrex.GraphRelation,boolean,java.util.Map,boolean,boolean,java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.NodePattern:void <init>(edu.stanford.nlp.semgraph.semgrex.GraphRelation,boolean,java.util.Map,boolean,boolean,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.hcoref.Preprocessor:void findSpeakers(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.Preprocessor:void processDiscourse(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.dcoref.Dictionaries:void loadSignatures(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Dictionaries:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String[],java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.NodePattern CoreMapNode(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.NodePattern NodeBasic(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.stats.IntCounter:int incrementCount(java.lang.Object,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void countOriginalStates()",
            "edu.stanford.nlp.stats.IntCounter:void addAll(edu.stanford.nlp.stats.IntCounter)",
            "edu.stanford.nlp.stats.IntCounter:double incrementCount(java.lang.Object,double)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void incrementCount(java.lang.Object,java.lang.Object,int)",
            "edu.stanford.nlp.stats.IntCounter:int decrementCount(java.lang.Object,int)",
            "edu.stanford.nlp.stats.IntCounter:void incrementCounts(java.util.Collection,int)",
            "edu.stanford.nlp.tagger.maxent.ReadDataTagged:void loadFile(edu.stanford.nlp.tagger.io.TaggedFileReader,java.util.Map)",
            "edu.stanford.nlp.stats.IntCounter:double incrementCount(java.lang.Object)",
            "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:void trainModel(java.lang.String,edu.stanford.nlp.tagger.common.Tagger,java.util.Random,java.util.List,java.util.List,edu.stanford.nlp.trees.Treebank,int,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.international.arabic.process.ArabicLexer:void setupNormalizationMap()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.arabic.process.ArabicLexer:void <init>(java.io.Reader,edu.stanford.nlp.process.LexedTokenFactory,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams:void initializeAnnotationPatterns()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams:void <init>()"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.BikelChineseHeadFinder:void <init>(edu.stanford.nlp.trees.TreebankLanguagePack)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.pennchinese.BikelChineseHeadFinder:void <init>()"
        ]
    },
    "edu.stanford.nlp.util.TwoDimensionalMap:void put(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Collection removeDuplicates(java.util.Collection,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Collection removeDuplicates(java.util.Collection,edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.VariableStrings:void unsetVar(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void decommitVariableGroups()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.VariableStrings:void setVar(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void commitVariableGroups(java.lang.String)",
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void commitVariableGroups(java.util.regex.Matcher)"
        ]
    },
    "edu.stanford.nlp.util.DeltaCollectionValuedMap:void clear()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.TwoDimensionalMap:java.lang.Object remove(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.TwoDimensionalSet:boolean remove(java.lang.Object,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.stats.TwoDimensionalIntCounter:int remove(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.data.CorefChain:void deleteMention(edu.stanford.nlp.hcoref.data.CorefChain$CorefMention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:java.util.Map coref()"
        ]
    },
    "edu.stanford.nlp.hcoref.CorefSystem:void postProcessing(edu.stanford.nlp.hcoref.data.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.CorefSystem:java.util.Map coref(edu.stanford.nlp.hcoref.data.Document,java.lang.StringBuilder[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.GrammarCompactor:edu.stanford.nlp.util.Triple compactGrammar(edu.stanford.nlp.util.Pair,java.util.Map,java.util.Map,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.GrammarCompactor:edu.stanford.nlp.util.Triple compactGrammar(edu.stanford.nlp.util.Pair,edu.stanford.nlp.util.Index)"
        ]
    },
    "edu.stanford.nlp.stats.TwoDimensionalCounter:double remove(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:java.util.Set retainAbove(edu.stanford.nlp.stats.TwoDimensionalCounter,double)"
        ]
    },
    "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void postProcessing(edu.stanford.nlp.dcoref.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:java.util.Map corefReturnHybridOutput(edu.stanford.nlp.dcoref.Document)",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:java.util.Map coref(edu.stanford.nlp.dcoref.Document)"
        ]
    },
    "edu.stanford.nlp.util.ArrayHeap:void removeLast(edu.stanford.nlp.util.ArrayHeap$HeapEntry)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.ArrayHeap:java.lang.Object extractMin()"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void decommitNamedRelations()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void goToNextNodeMatch()",
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void resetChildIter()",
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:boolean matches()",
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:boolean matchChild()"
        ]
    },
    "edu.stanford.nlp.scoref.StatisticalCorefUtils:void removeSingletonClusters(edu.stanford.nlp.hcoref.data.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.StatisticalCorefSystem:void annotate(edu.stanford.nlp.pipeline.Annotation,boolean)",
            "edu.stanford.nlp.scoref.StatisticalCorefSystem$1:void process(int,edu.stanford.nlp.hcoref.data.Document)"
        ]
    },
    "edu.stanford.nlp.util.BinaryHeapPriorityQueue:void removeLastEntry()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:void removeEntry(edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry)"
        ]
    },
    "edu.stanford.nlp.util.TwoDimensionalCollectionValuedMap:void retainAll(java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.IntCounter:double remove(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.IntCounter:void removeAll(java.util.Collection)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void clean()",
            "edu.stanford.nlp.stats.Counters$3:java.lang.Double remove(java.lang.Object)",
            "edu.stanford.nlp.stats.Counters:java.util.Set retainNonZeros(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:int remove(java.lang.Object,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void decommitNamedNodes()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void goToNextNodeMatch()",
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void resetChildIter()",
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:boolean matches()",
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:boolean matchChild()"
        ]
    },
    "edu.stanford.nlp.util.ThreeDimensionalMap:void remove(java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.CorefChain:void deleteMention(edu.stanford.nlp.dcoref.CorefChain$CorefMention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void removeZeroCounts()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.ClassicCounter:edu.stanford.nlp.util.MutableDouble mutableRemove(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.ClassicCounter:double remove(java.lang.Object)",
            "edu.stanford.nlp.stats.ClassicCounter:void removeAll(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.stats.Counters$2:double remove(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.util.Map loadFromSavedPatternsWordsDir(edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass runNineYards(edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass,java.util.Properties,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.util.ArrayMap$1:boolean remove(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void removeNamedNodes()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void goToNextTreeNodeMatch()",
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void resetChildIter()",
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:boolean matches()"
        ]
    },
    "edu.stanford.nlp.stats.TwoDimensionalCounter:void removeZeroCounts()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.TwoDimensionalMap:void remove(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger(java.io.BufferedReader,java.io.BufferedWriter,java.lang.String,edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger()"
        ]
    },
    "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:java.util.List topClauses(double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTest(edu.stanford.nlp.tagger.maxent.TaggerConfig)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.dvparser.DVParser:java.util.List getTopParsesForOneTree(edu.stanford.nlp.parser.lexparser.LexicalizedParser,int,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreeTransformer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.DVParser:java.util.IdentityHashMap getTopParses(edu.stanford.nlp.parser.lexparser.LexicalizedParser,edu.stanford.nlp.parser.lexparser.Options,java.util.Collection,edu.stanford.nlp.trees.TreeTransformer,boolean)",
            "edu.stanford.nlp.parser.dvparser.CacheParseHypotheses$CacheProcessor:edu.stanford.nlp.util.Pair process(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:boolean parseAndReport(java.util.List,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:double testOnTreebank(edu.stanford.nlp.trees.Treebank)",
            "edu.stanford.nlp.parser.common.ParsingThreadsafeProcessor:edu.stanford.nlp.parser.common.ParserQuery process(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.ParseFiles:void parseFiles(java.lang.String[],int,boolean,edu.stanford.nlp.process.TokenizerFactory,java.lang.String,java.lang.String,java.util.function.Function,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.RerankingParserQuery:boolean parseAndReport(java.util.List,java.io.PrintWriter)"
        ]
    },
    "edu.stanford.nlp.parser.common.ParsingThreadsafeProcessor:edu.stanford.nlp.parser.common.ParserQuery process(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.common.ParsingThreadsafeProcessor:java.lang.Object process(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Tree parseTree(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.RerankingParserQuery:boolean parse(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.DVParser:java.util.List getTopParsesForOneTree(edu.stanford.nlp.parser.lexparser.LexicalizedParser,int,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreeTransformer)",
            "edu.stanford.nlp.parser.common.ParsingThreadsafeProcessor:edu.stanford.nlp.parser.common.ParserQuery process(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Tree parseTree(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Tree parse(java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Tree parse(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser$1:edu.stanford.nlp.trees.Tree process(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:java.util.List parseMultiple(java.util.List)",
            "edu.stanford.nlp.parser.common.ParserGrammar:edu.stanford.nlp.trees.Tree apply(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Tree parseStrings(java.util.List)"
        ]
    },
    "edu.stanford.nlp.util.BinaryHeapPriorityQueue:boolean decreasePriority(java.lang.Object,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.BinaryHeapPriorityQueue:void heapify(edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:void removeEntry(edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry)",
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:boolean changePriority(java.lang.Object,double)"
        ]
    },
    "edu.stanford.nlp.util.BinaryHeapPriorityQueue:boolean relaxPriority(java.lang.Object,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.graph.DijkstraShortestPath:java.util.List getShortestPath(edu.stanford.nlp.graph.Graph,java.lang.Object,java.lang.Object,boolean)",
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:edu.stanford.nlp.util.BinaryHeapPriorityQueue deepCopy(edu.stanford.nlp.util.MapFactory)",
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:boolean add(java.lang.Object,double)"
        ]
    },
    "edu.stanford.nlp.util.IntervalTree:boolean remove(edu.stanford.nlp.util.HasInterval)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.IntervalTree:boolean remove(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.util.IntervalTree:void adjust(edu.stanford.nlp.util.IntervalTree$TreeNode)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.IntervalTree:edu.stanford.nlp.util.IntervalTree$TreeNode leftRotate(edu.stanford.nlp.util.IntervalTree$TreeNode)",
            "edu.stanford.nlp.util.IntervalTree:edu.stanford.nlp.util.IntervalTree$TreeNode rightRotate(edu.stanford.nlp.util.IntervalTree$TreeNode)"
        ]
    },
    "edu.stanford.nlp.util.IntervalTree:void adjustUpwards(edu.stanford.nlp.util.IntervalTree$TreeNode)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.IntervalTree:boolean add(edu.stanford.nlp.util.IntervalTree$TreeNode,edu.stanford.nlp.util.HasInterval)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.IntervalTree:boolean add(edu.stanford.nlp.util.HasInterval)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.IntervalTree:boolean addNonOverlapping(edu.stanford.nlp.util.HasInterval)",
            "edu.stanford.nlp.util.IntervalTree:boolean addNonNested(edu.stanford.nlp.util.HasInterval)",
            "edu.stanford.nlp.util.IntervalTree:boolean add(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.MatchedExpression:boolean extractAnnotation(edu.stanford.nlp.ling.tokensregex.Env,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpression:boolean extractAnnotation(edu.stanford.nlp.ling.tokensregex.Env,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringMatchedExpressionExtractor:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringPatternExtractRule:java.lang.Object apply(java.lang.String)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringPatternExtractRule:boolean extract(java.lang.String,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$BasicSequenceExtractRule:boolean extract(java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapExtractRule:boolean extract(edu.stanford.nlp.util.CoreMap,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.MultiCoreMapNodePattern:java.util.Collection match(java.util.List,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$MultiNodePatternState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.MatchedExpression:edu.stanford.nlp.util.Interval lambda$static$31(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.NumberNormalizer:edu.stanford.nlp.util.Interval lambda$findAndAnnotateNumericExpressionsWithRanges$30(java.lang.Integer,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.CollectionUtils:java.util.List mergeListWithSortedMatchedPreAggregated(java.util.List,java.util.List,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.ie.NumberNormalizer:edu.stanford.nlp.util.Interval lambda$findAndMergeNumbers$29(java.lang.Integer,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.CollectionUtils:java.util.List mergeList(java.util.List,java.util.Collection,java.util.function.Function,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.util.IntervalTree:boolean containsInterval(edu.stanford.nlp.util.IntervalTree,java.lang.Comparable,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.MatchedExpression:edu.stanford.nlp.util.Interval lambda$static$32(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:java.util.List createTimexNodes(java.lang.String,java.lang.Integer,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$PartialApproxMatch:edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$PartialApproxMatch withMatch(edu.stanford.nlp.ling.tokensregex.matcher.MatchCostFunction,double,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$PartialApproxMatch:edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$PartialApproxMatch access$000(edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$PartialApproxMatch,edu.stanford.nlp.ling.tokensregex.matcher.MatchCostFunction,double,java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$PartialApproxMatch:edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$PartialApproxMatch withMatch(edu.stanford.nlp.ling.tokensregex.matcher.MatchCostFunction,double,java.lang.Object,java.lang.Object,boolean,edu.stanford.nlp.ling.tokensregex.matcher.TrieMap)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:edu.stanford.nlp.util.Interval lambda$extractCoreMapsMergedWithTokens$38(java.lang.Integer,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.CollectionUtils:java.util.List mergeListWithSortedMatchedPreAggregated(java.util.List,java.util.List,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.MatchedExpression:boolean extractAnnotation(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpression:boolean extractAnnotation(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult:edu.stanford.nlp.util.Interval getInterval()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchResult$GroupToIntervalFunc:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.IntervalTree:java.util.List getNonOverlapping(java.util.List,java.util.function.Function)",
            "edu.stanford.nlp.util.IntervalTree:java.util.List getNonOverlappingMaxScore(java.util.List,java.util.function.Function,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequenceMatchedExpressionExtractor:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$MultiSequencePatternExtractRule:java.lang.Object apply(java.util.List)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequencePatternExtractRule:java.lang.Object apply(java.util.List)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$MultiSequencePatternExtractRule:boolean extract(java.util.List,java.util.List)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequencePatternExtractRule:boolean extract(java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.util.IntervalTree:java.util.List getOverlapping(edu.stanford.nlp.util.IntervalTree$TreeNode,java.lang.Comparable)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.IntervalTree:java.util.List getOverlapping(edu.stanford.nlp.util.HasInterval)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.MatchedExpression$4:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.IntCounter:java.lang.Object argmax()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.CoreMapAttributeAggregator$MostFreqAggregator:java.lang.Object aggregate(java.lang.Class,java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void relaxTempHook()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void triggerHooks(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void triggerAllHooks(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void projectHooks(edu.stanford.nlp.parser.lexparser.Edge)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void relaxTempEdge()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void combine(edu.stanford.nlp.parser.lexparser.Edge,edu.stanford.nlp.parser.lexparser.Hook)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void projectUnaries(edu.stanford.nlp.parser.lexparser.Edge)"
        ]
    },
    "edu.stanford.nlp.util.ArrayHeap:boolean add(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.ArrayHeap:java.util.Iterator iterator()",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void discoverHook(edu.stanford.nlp.parser.lexparser.Hook)",
            "edu.stanford.nlp.util.Beam:boolean add(java.lang.Object)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void discoverEdge(edu.stanford.nlp.parser.lexparser.Edge)"
        ]
    },
    "edu.stanford.nlp.stats.IntCounter:java.lang.Object argmin()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.ArrayHeap:int heapifyUp(edu.stanford.nlp.util.ArrayHeap$HeapEntry)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.ArrayHeap:int decreaseKey(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.util.ArrayHeap:void heapifyDown(edu.stanford.nlp.util.ArrayHeap$HeapEntry)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.ArrayHeap:java.lang.Object extractMin()"
        ]
    },
    "edu.stanford.nlp.util.ArrayHeap:void verify()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.IntervalTree:boolean containsInterval(edu.stanford.nlp.util.IntervalTree,edu.stanford.nlp.util.Interval,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.IntervalTree:boolean containsInterval(edu.stanford.nlp.util.HasInterval,boolean)",
            "edu.stanford.nlp.util.IntervalTree:boolean containsInterval(edu.stanford.nlp.util.IntervalTree,java.lang.Comparable,boolean)"
        ]
    },
    "edu.stanford.nlp.util.IntervalTree:boolean containsValue(edu.stanford.nlp.util.IntervalTree,edu.stanford.nlp.util.HasInterval)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.IntervalTree:boolean contains(edu.stanford.nlp.util.HasInterval)"
        ]
    },
    "edu.stanford.nlp.util.Interval:edu.stanford.nlp.util.Interval toValidInterval(java.lang.Comparable,java.lang.Comparable)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.FuzzyInterval:edu.stanford.nlp.util.FuzzyInterval toValidInterval(edu.stanford.nlp.util.FuzzyInterval$FuzzyComparable,edu.stanford.nlp.util.FuzzyInterval$FuzzyComparable,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.FuzzyInterval:edu.stanford.nlp.util.FuzzyInterval toValidInterval(edu.stanford.nlp.util.FuzzyInterval$FuzzyComparable,edu.stanford.nlp.util.FuzzyInterval$FuzzyComparable)"
        ]
    },
    "edu.stanford.nlp.util.FuzzyInterval:edu.stanford.nlp.util.FuzzyInterval toInterval(edu.stanford.nlp.util.FuzzyInterval$FuzzyComparable,edu.stanford.nlp.util.FuzzyInterval$FuzzyComparable,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.FuzzyInterval:edu.stanford.nlp.util.FuzzyInterval toInterval(edu.stanford.nlp.util.FuzzyInterval$FuzzyComparable,edu.stanford.nlp.util.FuzzyInterval$FuzzyComparable)"
        ]
    },
    "edu.stanford.nlp.util.IntervalTree:boolean addNonOverlapping(edu.stanford.nlp.util.HasInterval)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.IntervalTree:java.util.List getNonOverlapping(java.util.List,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.MatchedExpression$3:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:java.lang.String normalizedOrdinalStringQuiet(java.lang.String,java.lang.Number)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:java.lang.String normalizedOrdinalString(java.lang.String,java.lang.Number)"
        ]
    },
    "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:java.lang.String normalizedNumberString(java.lang.String,java.lang.String,java.lang.Number)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:java.util.List processEntity(java.util.List,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:java.lang.String normalizedPercentString(java.lang.String,java.lang.Number)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:java.util.List processEntity(java.util.List,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.pascal.ISODateInstance:java.lang.String foundMiscYearPattern(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.pascal.ISODateInstance:boolean extractYear(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:java.util.List processEntity(java.util.List,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:void addNormalizedQuantitiesToEntities(java.util.List,boolean,boolean)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.Alignment:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.AbstractCollinsHeadFinder:edu.stanford.nlp.trees.Tree determineHead(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BinaryHeadFinder:edu.stanford.nlp.trees.Tree determineHead(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.AbstractCollinsHeadFinder:edu.stanford.nlp.trees.Tree determineHead(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.TreeGraphNode:void percolateHeads(edu.stanford.nlp.trees.HeadFinder)",
            "edu.stanford.nlp.trees.Tree:edu.stanford.nlp.trees.Tree headTerminal(edu.stanford.nlp.trees.HeadFinder,edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.scoref.DocumentProcessor:void run(edu.stanford.nlp.hcoref.CorefDocMaker)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.StatisticalCorefSystem:void runOnConll()",
            "edu.stanford.nlp.scoref.DocumentProcessor:void runFromScratch(java.util.Properties,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.scoref.DocumentProcessor:void run(java.util.Properties,edu.stanford.nlp.hcoref.data.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.wordseg.Sighan2005DocumentReaderAndWriter:void printLattice(edu.stanford.nlp.fsm.DFSA,java.util.List,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.TregexMatcher:java.lang.String getVariableString(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.tsurgeon.RelabelNode$RelabelMatcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.List getShortestPath(java.lang.Object,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.List getShortestPathEdges(java.lang.Object,java.lang.Object,boolean)",
            "edu.stanford.nlp.trees.GrammaticalStructure:void attachStrandedNodes(edu.stanford.nlp.trees.TreeGraphNode,edu.stanford.nlp.trees.TreeGraphNode,boolean,java.util.function.Predicate,java.util.function.Predicate,edu.stanford.nlp.graph.DirectedMultiGraph)",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.List getShortestUndirectedPathNodes(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.List getShortestPath(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.List getShortestDirectedPathNodes(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.trees.GrammaticalStructure:void analyzeNode(edu.stanford.nlp.trees.TreeGraphNode,edu.stanford.nlp.trees.TreeGraphNode,java.util.Collection,edu.stanford.nlp.trees.HeadFinder,java.util.function.Predicate,java.util.function.Predicate,edu.stanford.nlp.graph.DirectedMultiGraph,edu.stanford.nlp.graph.DirectedMultiGraph)"
        ]
    },
    "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String printRawDoc(edu.stanford.nlp.hcoref.data.Document,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.Sieve:java.lang.String resolveMention(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String printMentionDetectionLog(edu.stanford.nlp.hcoref.data.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.CorefSystem:java.util.Map coref(edu.stanford.nlp.hcoref.data.Document,java.lang.StringBuilder[])"
        ]
    },
    "edu.stanford.nlp.scoref.StatisticalCorefSystem$1:void process(int,edu.stanford.nlp.hcoref.data.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.DocumentProcessor:void run(edu.stanford.nlp.hcoref.CorefDocMaker)"
        ]
    },
    "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void collapseDependencies(java.util.List,boolean,edu.stanford.nlp.trees.GrammaticalStructure$Extras)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void collapseDependenciesTree(java.util.List)",
            "edu.stanford.nlp.trees.GrammaticalStructure:java.util.List typedDependenciesCollapsed(edu.stanford.nlp.trees.GrammaticalStructure$Extras)",
            "edu.stanford.nlp.trees.GrammaticalStructure:java.util.List typedDependenciesCCprocessed(edu.stanford.nlp.trees.GrammaticalStructure$Extras)"
        ]
    },
    "edu.stanford.nlp.dcoref.Mention:boolean isDemonym(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$ALIGNMENT:void setAlignment(edu.stanford.nlp.semgraph.semgrex.Alignment,boolean,edu.stanford.nlp.semgraph.semgrex.GraphRelation$SearchNodeIterator)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void resetChildIter()"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$SearchNodeIterator:edu.stanford.nlp.ling.IndexedWord next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$SearchNodeIterator:java.lang.Object next()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.Lattice:void addBoundary()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:void deleteDuplicateEdges()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void removeExactDuplicates(edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.international.arabic.Buckwalter:java.lang.String unicodeToBuckwalter(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.international.arabic.Buckwalter:java.lang.String buckwalterToUnicode(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.international.arabic.Buckwalter:java.lang.String apply(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.arabic.Buckwalter:void main(java.lang.String[])",
            "edu.stanford.nlp.international.arabic.Buckwalter:java.lang.Object apply(java.lang.Object)",
            "edu.stanford.nlp.international.arabic.pipeline.DefaultLexicalMapper:void <init>()"
        ]
    },
    "edu.stanford.nlp.sentiment.SentimentModel:void readWordVectors()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.SentimentModel:void <init>(edu.stanford.nlp.sentiment.RNNOptions,java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.dvparser.DVModel:void readWordVectors()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.DVModel:void <init>(edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.parser.lexparser.UnaryGrammar,edu.stanford.nlp.parser.lexparser.BinaryGrammar)"
        ]
    },
    "edu.stanford.nlp.patterns.InvertedIndexByTokens:void add(java.util.List,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.InvertedIndexByTokens:void update(java.util.List,java.lang.String)",
            "edu.stanford.nlp.patterns.InvertedIndexByTokens:void add(java.util.Map,boolean)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$StandardTemporalType:edu.stanford.nlp.time.SUTime$Temporal create(edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.Dictionary:java.lang.String[] getTags(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.AmbiguityClass:void <init>(java.lang.String,boolean,edu.stanford.nlp.tagger.maxent.Dictionary,edu.stanford.nlp.tagger.maxent.TTags)",
            "edu.stanford.nlp.tagger.maxent.TaggerExperiments:void getFeaturesNew()",
            "edu.stanford.nlp.tagger.maxent.TestSentence:java.lang.String[] stringTagsAt(int)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.Dictionary:int getAmbClass(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.data.Mention:edu.stanford.nlp.util.Pair findDependentVerb(edu.stanford.nlp.hcoref.data.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Mention:void setDiscourse()"
        ]
    },
    "edu.stanford.nlp.naturalli.OpenIE:java.util.List entailmentsFromClause(edu.stanford.nlp.naturalli.SentenceFragment)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.OpenIE:java.util.Set entailmentsFromClauses(java.util.Collection)",
            "edu.stanford.nlp.naturalli.OpenIE:java.util.List relationsInClause(edu.stanford.nlp.naturalli.SentenceFragment)",
            "edu.stanford.nlp.naturalli.ClauseSplitter:boolean lambda$null$108(edu.stanford.nlp.naturalli.OpenIE,java.util.Collection,java.util.List,edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$Featurizer,java.util.Optional,edu.stanford.nlp.classify.WeightedDataset,edu.stanford.nlp.util.Triple)"
        ]
    },
    "edu.stanford.nlp.dcoref.Mention:edu.stanford.nlp.util.Pair findDependentVerb(edu.stanford.nlp.dcoref.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Mention:void setDiscourse()"
        ]
    },
    "edu.stanford.nlp.dcoref.Mention:void process(edu.stanford.nlp.dcoref.Dictionaries,edu.stanford.nlp.dcoref.Semantics,edu.stanford.nlp.dcoref.MentionExtractor)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Mention:void process(edu.stanford.nlp.dcoref.Dictionaries,edu.stanford.nlp.dcoref.Semantics,edu.stanford.nlp.dcoref.MentionExtractor,edu.stanford.nlp.classify.LogisticClassifier)"
        ]
    },
    "edu.stanford.nlp.dcoref.ScorerBCubed:void calculateRecall(edu.stanford.nlp.dcoref.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.CustomAnnotationSerializer:void saveCorefChain(java.io.PrintWriter,int,edu.stanford.nlp.hcoref.data.CorefChain)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.CustomAnnotationSerializer:void saveCorefChains(java.util.Map,java.io.PrintWriter)"
        ]
    },
    "edu.stanford.nlp.dcoref.Rules:boolean antecedentMatchesMentionSpeakerAnnotation(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Rules:boolean antecedentMatchesMentionSpeakerAnnotation(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention)",
            "edu.stanford.nlp.dcoref.Rules:boolean antecedentIsMentionSpeaker(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.util.logging.OutputHandler:java.util.List handle(edu.stanford.nlp.util.logging.Redwood$Record)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood$RecordHandlerTree:void process(edu.stanford.nlp.util.logging.Redwood$Record,edu.stanford.nlp.util.logging.Redwood$MessageType,int,long)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:boolean isApposition(int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceToken:java.lang.String display()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceToken:java.lang.String toString()"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:boolean isChunkHead(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:int findChunkEnd(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:boolean isApposition(int,int)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:int countCommas(int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:int countVerbs(int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:int findChunkStart(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:boolean isApposition(int,int)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:boolean sameChunk(int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.MentionExtractor:edu.stanford.nlp.dcoref.Document arrange(edu.stanford.nlp.pipeline.Annotation,java.util.List,java.util.List,java.util.List,java.util.List,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.CoNLLMentionExtractor:edu.stanford.nlp.dcoref.Document nextDoc()",
            "edu.stanford.nlp.dcoref.MentionExtractor:edu.stanford.nlp.dcoref.Document arrange(edu.stanford.nlp.pipeline.Annotation,java.util.List,java.util.List,java.util.List)",
            "edu.stanford.nlp.dcoref.MUCMentionExtractor:edu.stanford.nlp.dcoref.Document nextDoc()",
            "edu.stanford.nlp.dcoref.ACEMentionExtractor:edu.stanford.nlp.dcoref.Document nextDoc()"
        ]
    },
    "edu.stanford.nlp.util.ThreeDimensionalMap:java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:int recalculateTemporaryBetas(edu.stanford.nlp.trees.Tree,double[],int,java.util.IdentityHashMap,java.util.IdentityHashMap,java.util.Map,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.ThreeDimensionalMap)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:int initialBetasAndLexicon(edu.stanford.nlp.trees.Tree,int,double)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void splitBetas()"
        ]
    },
    "edu.stanford.nlp.util.ThreeDimensionalMap:edu.stanford.nlp.util.TwoDimensionalMap get(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.ThreeDimensionalMap:java.util.Set secondKeySet()",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void outputBetas()",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void buildGrammars()",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:boolean testConvergence(edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.ThreeDimensionalMap)",
            "edu.stanford.nlp.util.ThreeDimensionalMap:java.util.Map get(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void rescaleTemporaryBetas(edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.ThreeDimensionalMap)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void splitBetas()"
        ]
    },
    "edu.stanford.nlp.util.ThreeDimensionalMap:java.lang.Object get(java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:int recountInside(edu.stanford.nlp.trees.Tree,boolean,int,java.util.IdentityHashMap)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void buildGrammars()",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recountWeights(edu.stanford.nlp.trees.Tree,java.util.IdentityHashMap,java.util.IdentityHashMap,java.util.IdentityHashMap,java.util.IdentityHashMap)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:boolean testConvergence(edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.ThreeDimensionalMap)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recountOutside(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.util.IdentityHashMap,java.util.IdentityHashMap)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:int recalculateTemporaryBetas(edu.stanford.nlp.trees.Tree,double[],int,java.util.IdentityHashMap,java.util.IdentityHashMap,java.util.Map,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.ThreeDimensionalMap)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void splitBetas()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:boolean recalculateBetas(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void extract(java.util.Collection,double,java.util.Collection,double)"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter:double[] getCounts(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter:void main(java.lang.String[])",
            "edu.stanford.nlp.stats.GeneralizedCounter$CounterView:double getCount(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter$OneDimensionalCounterView:double getCount(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.NERFeatureFactory:void initGazette()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.NERFeatureFactory:void init(edu.stanford.nlp.sequences.SeqClassifierFlags)"
        ]
    },
    "edu.stanford.nlp.maxent.iis.LambdaSolve:double GSFSecond(double,edu.stanford.nlp.maxent.Feature)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.maxent.iis.LambdaSolve:double GainCompute(edu.stanford.nlp.maxent.Feature,double)"
        ]
    },
    "edu.stanford.nlp.maxent.iis.LambdaSolve:double pcondFAlfa(double,int,int,edu.stanford.nlp.maxent.Feature)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.maxent.iis.LambdaSolve:double GSFSecond(double,edu.stanford.nlp.maxent.Feature)",
            "edu.stanford.nlp.maxent.iis.LambdaSolve:double GSFPrime(double,edu.stanford.nlp.maxent.Feature,int)",
            "edu.stanford.nlp.maxent.iis.LambdaSolve:double GSFPrime(double,edu.stanford.nlp.maxent.Feature)"
        ]
    },
    "edu.stanford.nlp.maxent.iis.LambdaSolve:double ZAlfa(double,edu.stanford.nlp.maxent.Feature,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.maxent.iis.LambdaSolve:double GSF(double,edu.stanford.nlp.maxent.Feature,int)",
            "edu.stanford.nlp.maxent.iis.LambdaSolve:double GSF(double,edu.stanford.nlp.maxent.Feature)",
            "edu.stanford.nlp.maxent.iis.LambdaSolve:double pcondFAlfa(double,int,int,edu.stanford.nlp.maxent.Feature)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:boolean removeEdge(edu.stanford.nlp.semgraph.SemanticGraphEdge)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void correctSubjPass(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void process3WP(edu.stanford.nlp.semgraph.SemanticGraph,java.util.HashMap)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void processComplex2WP(edu.stanford.nlp.semgraph.SemanticGraph,java.util.HashMap)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:void replaceNode(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.ForwardEntailerSearchProblem:java.util.List searchImplementation()",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void createMultiWordExpression(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.trees.GrammaticalRelation,edu.stanford.nlp.ling.IndexedWord[])",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void stripAuxMark(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void convertRel(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.Util:void stripPrepCases(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.Util:java.util.List cleanTree(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void correctWHAttachment(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void expandPPConjunction(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.List,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void correctWHAttachment(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:void enRepairEdges(edu.stanford.nlp.semgraph.SemanticGraph,boolean)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void collapseReferent(edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.patterns.ScorePhrases:double numNonRedundantPatterns(edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.patterns.CandidatePhrase)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter chooseTopWords(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.Counter,java.util.Set,double)"
        ]
    },
    "edu.stanford.nlp.stats.TwoDimensionalCounter:edu.stanford.nlp.stats.Counter sumInnerCounter()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.TwoDimensionalCounter:void subtractAll(java.lang.Object,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.TwoDimensionalCounter:edu.stanford.nlp.stats.ClassicCounter flatten()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.stats.Counter getPatterns(java.lang.String,java.util.Set,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.Counter,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.util.Pair iterateExtractApply4Label(java.lang.String,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.Counter,java.io.BufferedWriter,java.lang.String,java.io.BufferedWriter,java.util.Set,java.util.Set,edu.stanford.nlp.util.CollectionValuedMap,edu.stanford.nlp.stats.TwoDimensionalCounter,int)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.TwoDimensionalCounter scale(edu.stanford.nlp.stats.TwoDimensionalCounter,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.TwoDimensionalCounter:edu.stanford.nlp.stats.Counter getCounter(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.TwoDimensionalCounter:void addAll(edu.stanford.nlp.stats.TwoDimensionalCounterInterface)"
        ]
    },
    "edu.stanford.nlp.stats.TwoDimensionalCounter:edu.stanford.nlp.stats.TwoDimensionalCounter reverseIndexOrder(edu.stanford.nlp.stats.TwoDimensionalCounter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.TwoDimensionalCounter:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.stats.TwoDimensionalCounter:void addAll(edu.stanford.nlp.stats.TwoDimensionalCounterInterface)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void printProbsDocuments(edu.stanford.nlp.objectbank.ObjectBank)",
            "edu.stanford.nlp.patterns.ScorePhrases:void runParallelApplyPats(java.util.Map,java.lang.String,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.util.CollectionValuedMap,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.stats.TwoDimensionalCounter:java.util.Set secondKeySet()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.TwoDimensionalCounter:java.lang.String toCSVString(java.text.NumberFormat)",
            "edu.stanford.nlp.stats.Counters:void save2DCounter(edu.stanford.nlp.stats.TwoDimensionalCounter,java.lang.String)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:java.lang.String toMatrixString(int)",
            "edu.stanford.nlp.stats.Counters:void addInPlace(edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter)",
            "edu.stanford.nlp.stats.Counters:void addInPlace(edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,double)"
        ]
    },
    "edu.stanford.nlp.stats.TwoDimensionalCounter:void addAll(java.lang.Object,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter learnNewPhrasesPrivate(java.lang.String,edu.stanford.nlp.patterns.surface.PatternsForEachToken,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.util.Set,edu.stanford.nlp.util.CollectionValuedMap,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,java.lang.String,java.util.Set,boolean)"
        ]
    },
    "edu.stanford.nlp.stats.TwoDimensionalCounter:double getCount(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.TwoDimensionalCounter:double[][] toMatrix(java.util.List,java.util.List)",
            "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:java.lang.Double lambda$score$153(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:java.lang.String toCSVString(java.text.NumberFormat)",
            "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:java.lang.Double lambda$score$151(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.stats.Counters:void save2DCounter(edu.stanford.nlp.stats.TwoDimensionalCounter,java.lang.String)",
            "edu.stanford.nlp.semgraph.SemanticGraph:void resetRoots()",
            "edu.stanford.nlp.classify.Dataset:double[] getInformationGains()",
            "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter learnNewPhrasesPrivate(java.lang.String,edu.stanford.nlp.patterns.surface.PatternsForEachToken,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.util.Set,edu.stanford.nlp.util.CollectionValuedMap,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,java.lang.String,java.util.Set,boolean)",
            "edu.stanford.nlp.stats.Counters:java.util.Set retainAbove(edu.stanford.nlp.stats.TwoDimensionalCounter,double)",
            "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:java.lang.Double lambda$score$154(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams$AddPOSSequenceFunction:java.lang.String apply(edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:java.lang.Double lambda$score$152(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:java.lang.Double lambda$score$150(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:double remove(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.stats.Counters:void addInPlace(edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:void setCount(java.lang.Object,java.lang.Object,double)",
            "edu.stanford.nlp.stats.Counters:void addInPlace(edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,double)",
            "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:java.lang.Double lambda$score$155(edu.stanford.nlp.util.Pair)"
        ]
    },
    "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter chooseTopWords(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.Counter,java.util.Set,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter learnNewPhrasesPrivate(java.lang.String,edu.stanford.nlp.patterns.surface.PatternsForEachToken,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.util.Set,edu.stanford.nlp.util.CollectionValuedMap,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,java.lang.String,java.util.Set,boolean)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:void addInPlace(edu.stanford.nlp.stats.TwoDimensionalCounter,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.TwoDimensionalCounter:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Pair:void save(java.io.DataOutputStream)",
            "edu.stanford.nlp.patterns.ConstantsAndVariables$ScorePhraseMeasures:int compareTo(java.lang.Object)",
            "edu.stanford.nlp.patterns.surface.Token:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:boolean trainClassifier()"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:void outputCalibrationInfo(java.io.PrintWriter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void printProbsDocuments(edu.stanford.nlp.objectbank.ObjectBank)"
        ]
    },
    "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter learnNewPhrasesPrivate(java.lang.String,edu.stanford.nlp.patterns.surface.PatternsForEachToken,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.util.Set,edu.stanford.nlp.util.CollectionValuedMap,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,java.lang.String,java.util.Set,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter learnNewPhrases(java.lang.String,edu.stanford.nlp.patterns.surface.PatternsForEachToken,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.util.CollectionValuedMap,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,java.lang.String,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.stats.TwoDimensionalCounter:void subtractAll(edu.stanford.nlp.stats.TwoDimensionalCounterInterface,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.TwoDimensionalCounter:void incrementCount(java.lang.Object,java.lang.Object,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.dep.ApplyDepPatterns:edu.stanford.nlp.util.Pair call()",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:void decrementCount(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.classify.Dataset:double[] getInformationGains()",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:void main(java.lang.String[])",
            "edu.stanford.nlp.stats.Counters:void addInPlace(edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:void decrementCount(java.lang.Object,java.lang.Object,double)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:void incrementCount(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.patterns.surface.ApplyPatterns:edu.stanford.nlp.util.Triple call()",
            "edu.stanford.nlp.stats.Counters:void addInPlace(edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,double)"
        ]
    },
    "edu.stanford.nlp.stats.TwoDimensionalCounter:void setCount(java.lang.Object,java.lang.Object,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:void resetRoots()",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:void main(java.lang.String[])",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:edu.stanford.nlp.stats.TwoDimensionalCounter reverseIndexOrder(edu.stanford.nlp.stats.TwoDimensionalCounter)",
            "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams:void loadMWMap(java.lang.String)",
            "edu.stanford.nlp.stats.Counters:void loadInto2DCounter(java.lang.String,java.lang.Class,java.lang.Class,edu.stanford.nlp.stats.TwoDimensionalCounter)"
        ]
    },
    "edu.stanford.nlp.stats.TwoDimensionalCounter:double totalCount(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.CorefChain:java.util.Set getMentionsWithSameHead(int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:boolean isRare(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TaggerExperiments:void addRareTemplatesNew(edu.stanford.nlp.tagger.maxent.History,java.lang.String)",
            "edu.stanford.nlp.tagger.maxent.TaggerExperiments:void hashHistories()",
            "edu.stanford.nlp.tagger.maxent.TestSentence:double[] getHistories(java.lang.String[],edu.stanford.nlp.tagger.maxent.History)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.AmbiguityClasses:int getClass(java.lang.String,edu.stanford.nlp.tagger.maxent.Dictionary,int,edu.stanford.nlp.tagger.maxent.TTags)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.Dictionary:void setAmbClasses(edu.stanford.nlp.tagger.maxent.AmbiguityClasses,int,edu.stanford.nlp.tagger.maxent.TTags)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.EnglishUnknownWordModel:void getSignature8(java.lang.String,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EnglishUnknownWordModel:java.lang.String getSignature(java.lang.String,int)"
        ]
    },
    "edu.stanford.nlp.ling.CoreLabel:void initFromStrings(java.lang.String[],java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.CoreLabel:void <init>(java.lang.String[],java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.hcoref.Rules:boolean entitySameSpeaker(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.Rules:boolean entityPersonDisagree(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Set)",
            "edu.stanford.nlp.hcoref.sieve.RFSieve:edu.stanford.nlp.ling.RVFDatum extractDatum(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,int,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.String)",
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)"
        ]
    },
    "edu.stanford.nlp.util.TwoDimensionalCollectionValuedMap:java.util.Set secondKeySet()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.TwoDimensionalCollectionValuedMap:java.util.Collection get(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.CoreMapNodePatternTrigger:java.util.Collection apply(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.util.TwoDimensionalCollectionValuedMap:java.util.Collection values()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.FrenchUnknownWordModel:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,int,double,double,double,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.fsm.TransducerGraph:edu.stanford.nlp.fsm.TransducerGraph createGraphFromPaths(edu.stanford.nlp.stats.ClassicCounter,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.TransducerGraph:edu.stanford.nlp.fsm.TransducerGraph createGraphFromPaths(java.util.List,int)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.EnglishUnknownWordModel:double scoreProbTagGivenWordSignature(edu.stanford.nlp.parser.lexparser.IntTaggedWord,int,double,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EnglishUnknownWordModel:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,int,double,double,double,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.FrenchUnknownWordModelTrainer:void train(edu.stanford.nlp.ling.TaggedWord,int,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters:void logInPlace(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ScorePatternsFreqBased:edu.stanford.nlp.stats.Counter score()"
        ]
    },
    "edu.stanford.nlp.stats.Counters$3:java.lang.Double get(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters$3:java.lang.Object get(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams$1:edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar formResult()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams$1:java.lang.Object formResult()",
            "edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams$1:edu.stanford.nlp.parser.lexparser.DependencyGrammar formResult()"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:void justificationOfRVFDatum(edu.stanford.nlp.ling.RVFDatum,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifier:void justificationOf(edu.stanford.nlp.ling.Datum,java.io.PrintWriter,java.util.function.Function,boolean)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:double dotProduct(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:double pearsonsCorrelationCoefficient(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter scale(edu.stanford.nlp.stats.Counter,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter L2Normalize(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.patterns.surface.ScorePatternsF1:edu.stanford.nlp.stats.Counter score()",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter asNormalizedCounter(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.TwoDimensionalCounter scale(edu.stanford.nlp.stats.TwoDimensionalCounter,double)",
            "edu.stanford.nlp.patterns.ScorePatternsFreqBased:edu.stanford.nlp.stats.Counter score()",
            "edu.stanford.nlp.patterns.surface.LearnImportantFeatures:edu.stanford.nlp.stats.Counter getTopFeatures(java.util.Iterator,double,double,java.lang.String)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter saferL2Normalize(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.stats.Counter FScore(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,double)"
        ]
    },
    "edu.stanford.nlp.ling.RVFDatum:double getFeatureCount(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:void printResults(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswers(java.util.Collection,java.io.PrintWriter,edu.stanford.nlp.sequences.DocumentReaderAndWriter,boolean)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void classifyAndWriteAnswers(java.util.Collection,java.util.List,java.io.PrintWriter,edu.stanford.nlp.sequences.DocumentReaderAndWriter)"
        ]
    },
    "edu.stanford.nlp.parser.metrics.TaggingEval:void display(boolean,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.TaggingEval:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:double testOnTreebank(edu.stanford.nlp.trees.Treebank)",
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.patterns.ScorePatternsFreqBased:edu.stanford.nlp.stats.Counter score()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.stats.Counter getPatterns(java.lang.String,java.util.Set,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.Counter,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void writeObject(java.io.ObjectOutputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.ColumnDataClassifier:void testExample(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset,java.util.List,edu.stanford.nlp.stats.Counter,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.util.Pair testExamples(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset,java.util.List)"
        ]
    },
    "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution getDistributionWithReservedMass(edu.stanford.nlp.stats.Counter,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution getDistribution(edu.stanford.nlp.stats.Counter)"
        ]
    },
    "edu.stanford.nlp.fsm.QuasiDeterminizer:edu.stanford.nlp.stats.ClassicCounter computeLambda(edu.stanford.nlp.fsm.TransducerGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.QuasiDeterminizer:edu.stanford.nlp.fsm.TransducerGraph processGraph(edu.stanford.nlp.fsm.TransducerGraph)"
        ]
    },
    "edu.stanford.nlp.patterns.PhraseScorer:double getGoogleNgramScore(edu.stanford.nlp.patterns.CandidatePhrase)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:edu.stanford.nlp.stats.Counter convert2OneDim(java.lang.String,java.util.function.Function,java.util.Set,edu.stanford.nlp.stats.TwoDimensionalCounter,boolean,boolean,edu.stanford.nlp.stats.Counter,boolean)",
            "edu.stanford.nlp.patterns.ScorePhrasesAverageFeatures:edu.stanford.nlp.stats.Counter scorePhrases(java.lang.String,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.Counter,java.util.Set,boolean)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:boolean equals(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:boolean equals(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter product(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.surface.ScorePatternsF1:edu.stanford.nlp.stats.Counter score()",
            "edu.stanford.nlp.patterns.ScorePatternsFreqBased:edu.stanford.nlp.stats.Counter score()",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.stats.Counter FScore(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,double)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recalculateTemporaryBetas(boolean,java.util.Map,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.ThreeDimensionalMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:boolean recalculateBetas(boolean)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void buildGrammars()",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void mergeStates()"
        ]
    },
    "edu.stanford.nlp.parser.metrics.EvalbByCat:void display(boolean,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:double testOnTreebank(edu.stanford.nlp.trees.Treebank)",
            "edu.stanford.nlp.parser.metrics.Evalb:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.patterns.PhraseScorer:double getPatTFIDFScore(edu.stanford.nlp.patterns.CandidatePhrase,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ScorePhrasesAverageFeatures:edu.stanford.nlp.stats.Counter scorePhrases(java.lang.String,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.Counter,java.util.Set,boolean)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void readObject(java.io.ObjectInputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.RVFDataset:edu.stanford.nlp.ling.RVFDatum scaleDatumGaussian(edu.stanford.nlp.ling.RVFDatum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.RVFDataset:edu.stanford.nlp.classify.RVFDataset scaleDatasetGaussian(edu.stanford.nlp.classify.RVFDataset)"
        ]
    },
    "edu.stanford.nlp.classify.GeneralizedExpectationObjectiveFunction:void calculate(double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.AbstractCachingDiffFunction:void ensure(double[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter average(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:double jensenShannonDivergence(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recalculateMergedBetas(java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void mergeStates()"
        ]
    },
    "edu.stanford.nlp.classify.Dataset:edu.stanford.nlp.ling.RVFDatum getL1NormalizedTFIDFDatum(edu.stanford.nlp.ling.Datum,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.Dataset:edu.stanford.nlp.classify.RVFDataset getL1NormalizedTFIDFDataset()"
        ]
    },
    "edu.stanford.nlp.ie.pascal.ISODateInstance:boolean extractDay(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.pascal.ISODateInstance:boolean extractFields(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter probabilityOf(int[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ArabicUnknownWordModel:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,int,double,double,double,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier:void classifyNoSeq(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:java.util.List classify(java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.RelationExtractorResultsPrinter:void printResultsInternal(java.io.PrintWriter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.ClassicCounter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.RelationExtractorResultsPrinter:void printResults(java.io.PrintWriter,java.util.List,java.util.List)",
            "edu.stanford.nlp.ie.machinereading.RelationExtractorResultsPrinter:void printResultsUsingLabels(java.io.PrintWriter,java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswersKBest(edu.stanford.nlp.objectbank.ObjectBank,int,java.io.PrintWriter,edu.stanford.nlp.sequences.DocumentReaderAndWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswersKBest(java.lang.String,int,edu.stanford.nlp.sequences.DocumentReaderAndWriter)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.FactoredLexicon:double probLemmaTag(java.lang.String,int,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.scoref.Clusterer:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.scoref.ClustererDataLoader$ClustererDoc,edu.stanford.nlp.scoref.Clusterer$Cluster,edu.stanford.nlp.scoref.Clusterer$Cluster,edu.stanford.nlp.scoref.Clusterer$GlobalFeatures)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.Clusterer:edu.stanford.nlp.stats.Counter access$700(edu.stanford.nlp.scoref.ClustererDataLoader$ClustererDoc,edu.stanford.nlp.scoref.Clusterer$Cluster,edu.stanford.nlp.scoref.Clusterer$Cluster,edu.stanford.nlp.scoref.Clusterer$GlobalFeatures)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:java.util.Set keysAbove(edu.stanford.nlp.stats.Counter,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifier:java.lang.String toDistributionString(int)",
            "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter learnNewPhrasesPrivate(java.lang.String,edu.stanford.nlp.patterns.surface.PatternsForEachToken,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.util.Set,edu.stanford.nlp.util.CollectionValuedMap,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,java.lang.String,java.util.Set,boolean)"
        ]
    },
    "edu.stanford.nlp.classify.LogisticClassifier:double scoreOf(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LogisticClassifier:edu.stanford.nlp.stats.Counter scoresOfRVFDatum(edu.stanford.nlp.ling.RVFDatum)",
            "edu.stanford.nlp.classify.LogisticClassifier:java.lang.Object classOf(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.classify.LogisticClassifier:double probabilityOf(edu.stanford.nlp.stats.Counter,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:double evaluateCoverage(java.util.Collection,java.util.Set,java.util.Set,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier:double loglikelihood(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.SpanishUnknownWordModelTrainer:void train(edu.stanford.nlp.ling.TaggedWord,int,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter linearCombination(edu.stanford.nlp.stats.Counter,double,edu.stanford.nlp.stats.Counter,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Distribution$DynamicDistribution:java.lang.Object argmax()",
            "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution distributionWithDirichletPrior(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Distribution,double)",
            "edu.stanford.nlp.stats.Counters:double skewDivergence(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,double)"
        ]
    },
    "edu.stanford.nlp.hcoref.rf.DecisionTree:double probabilityOfTrue(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.rf.DecisionTree:double probabilityOfTrue(edu.stanford.nlp.ling.RVFDatum)"
        ]
    },
    "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:edu.stanford.nlp.stats.Counter convert2OneDim(java.lang.String,java.util.function.Function,java.util.Set,edu.stanford.nlp.stats.TwoDimensionalCounter,boolean,boolean,edu.stanford.nlp.stats.Counter,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:edu.stanford.nlp.stats.Counter score()"
        ]
    },
    "edu.stanford.nlp.patterns.CandidatePhrase:double getFeatureValue(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters$3:java.lang.Double put(java.lang.Object,java.lang.Double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters$3:java.lang.Object put(java.lang.Object,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:void buildPT_T()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,int,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.GrammarCompactor:edu.stanford.nlp.util.Pair convertGraphsToGrammar(java.util.Set,java.util.Set,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.GrammarCompactor:edu.stanford.nlp.util.Triple compactGrammar(edu.stanford.nlp.util.Pair,java.util.Map,java.util.Map,edu.stanford.nlp.util.Index)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:java.lang.Object argmax(edu.stanford.nlp.stats.Counter,java.util.Comparator,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void search(edu.stanford.nlp.ling.IndexedWord,java.util.function.Predicate,edu.stanford.nlp.classify.Classifier,java.util.Map,java.util.function.Function,java.util.Collection,int)",
            "edu.stanford.nlp.stats.Counters:java.lang.Object argmax(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.Counters:java.lang.Object argmax(edu.stanford.nlp.stats.Counter,java.util.Comparator)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:java.lang.Object sample(edu.stanford.nlp.stats.Counter,java.util.Random)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:java.lang.Object sample(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.Distribution:java.lang.Object sampleFrom(java.util.Random)"
        ]
    },
    "edu.stanford.nlp.scoref.SimpleLinearClassifier:int lambda$getWeightVector$205(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.scoref.Clusterer:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.scoref.ClustererDataLoader$ClustererDoc,java.util.List,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.Clusterer:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.scoref.ClustererDataLoader$ClustererDoc,edu.stanford.nlp.scoref.Clusterer$Cluster,edu.stanford.nlp.scoref.Clusterer$Cluster,edu.stanford.nlp.scoref.Clusterer$GlobalFeatures)"
        ]
    },
    "edu.stanford.nlp.sentiment.AbstractEvaluate:void printLengthAccuracies()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.AbstractEvaluate:void printSummary()"
        ]
    },
    "edu.stanford.nlp.classify.RVFDataset:edu.stanford.nlp.ling.RVFDatum scaleDatum(edu.stanford.nlp.ling.RVFDatum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.RVFDataset:edu.stanford.nlp.classify.RVFDataset scaleDataset(edu.stanford.nlp.classify.RVFDataset)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter multiplyInPlace(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:edu.stanford.nlp.stats.Counter score()"
        ]
    },
    "edu.stanford.nlp.parser.metrics.AbstractEval$RuleErrorEval:void display(edu.stanford.nlp.stats.ClassicCounter,int,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.AbstractEval$RuleErrorEval:void display(boolean,java.io.PrintWriter)"
        ]
    },
    "edu.stanford.nlp.hcoref.Rules:boolean entityCorefDictionary(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Set)",
            "edu.stanford.nlp.hcoref.Rules:boolean entityClusterAllCorefDictionary(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Dictionaries,int,int)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter divisionNonNaN(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void setUpConstructor(java.util.Map,java.util.Map,boolean,java.util.Map,java.util.Map,java.util.Map)",
            "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:edu.stanford.nlp.stats.Counter score()",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.stats.Counter FScore(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,double)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:java.util.Set retainAbove(edu.stanford.nlp.stats.Counter,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.LabelDictionary:void lock(int,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.util.CollectionUtils:java.util.Set modes(java.util.Collection)",
            "edu.stanford.nlp.patterns.ScorePatternsFreqBased:edu.stanford.nlp.stats.Counter score()"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:void justificationOf(edu.stanford.nlp.ling.Datum,java.io.PrintWriter,java.util.function.Function,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifier:void justificationOf(edu.stanford.nlp.ling.Datum,java.io.PrintWriter,boolean)",
            "edu.stanford.nlp.classify.LinearClassifier:void justificationOf(edu.stanford.nlp.ling.Datum,java.io.PrintWriter,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.parser.metrics.AbstractEval$CatErrorEval:void display(edu.stanford.nlp.stats.ClassicCounter,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.AbstractEval$CatErrorEval:void display(boolean,java.io.PrintWriter)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.FactoredLexicon:double probMorphTag(int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,int,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void printRuleCounts()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)"
        ]
    },
    "edu.stanford.nlp.stats.Distribution:int[] getCountCounts(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution goodTuringSmoothedCounter(edu.stanford.nlp.stats.Counter,int)",
            "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution goodTuringWithExplicitUnknown(edu.stanford.nlp.stats.Counter,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:java.util.List toDescendingMagnitudeSortedListWithCounts(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:java.lang.String classOf(edu.stanford.nlp.ling.Datum,edu.stanford.nlp.ie.machinereading.structure.ExtractionObject)",
            "edu.stanford.nlp.pipeline.XMLOutputter:nu.xom.Element makeProbabilitiesElement(edu.stanford.nlp.ie.machinereading.structure.ExtractionObject,java.lang.String)",
            "edu.stanford.nlp.ie.machinereading.structure.ExtractionObject:java.lang.String probsToString()",
            "edu.stanford.nlp.ie.machinereading.structure.ExtractionObject:boolean printableObject(double,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:java.lang.String toSortedString(edu.stanford.nlp.stats.Counter,int,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:java.lang.String toSortedString(edu.stanford.nlp.stats.Counter,int,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void outputCalibrationInfo(java.io.PrintWriter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void writeData(java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void saveParserToTextFile(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:double scoreOf(edu.stanford.nlp.ling.RVFDatum,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter scoresOf(edu.stanford.nlp.ling.RVFDatum)"
        ]
    },
    "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution simpleGoodTuring(edu.stanford.nlp.stats.Counter,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Distribution:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.BasicRelationFeatureFactory:boolean addFeatures(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.ie.machinereading.structure.RelationMention,java.util.List,java.util.logging.Logger)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.BasicRelationFeatureFactory:edu.stanford.nlp.ling.Datum createDatum(edu.stanford.nlp.ie.machinereading.structure.RelationMention,java.util.logging.Logger)",
            "edu.stanford.nlp.ie.machinereading.BasicRelationFeatureFactory:boolean addFeatures(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.ie.machinereading.structure.RelationMention,java.util.List)"
        ]
    },
    "edu.stanford.nlp.stats.Distribution:int[][] countCounts2IntArrays(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution simpleGoodTuring(edu.stanford.nlp.stats.Counter,int)"
        ]
    },
    "edu.stanford.nlp.stats.Distribution:double getCount(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifier:void justificationOf(edu.stanford.nlp.ling.RVFDatum,java.io.PrintWriter)",
            "edu.stanford.nlp.classify.LinearClassifier:void justificationOf(edu.stanford.nlp.ling.Datum,java.io.PrintWriter,java.util.function.Function,boolean)",
            "edu.stanford.nlp.classify.LinearClassifier:void justificationOfRVFDatum(edu.stanford.nlp.ling.RVFDatum,java.io.PrintWriter)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SpanishUnknownWordModel:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,int,double,double,double,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.scoref.SimpleLinearClassifier:void learn(edu.stanford.nlp.stats.Counter,double,double,edu.stanford.nlp.scoref.SimpleLinearClassifier$Loss)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.MaxMarginMentionRanker:void learn(edu.stanford.nlp.scoref.Example,edu.stanford.nlp.scoref.Example,java.util.Map,edu.stanford.nlp.scoref.Compressor,edu.stanford.nlp.scoref.MaxMarginMentionRanker$ErrorType)",
            "edu.stanford.nlp.scoref.SimpleLinearClassifier:void learn(edu.stanford.nlp.stats.Counter,double,double)"
        ]
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier$Scorer:double[] scoresOf(int[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.ExactBestSequenceFinder:edu.stanford.nlp.util.Pair bestSequence(edu.stanford.nlp.sequences.SequenceModel,double[][])",
            "edu.stanford.nlp.ie.ner.CMMClassifier$Scorer:double scoreOf(int[],int)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:void classifySeq(java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.FactoredLexicon:double probWordTag(java.lang.String,int,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,int,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:double probTB(edu.stanford.nlp.parser.lexparser.IntDependency)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseSimWordAvgDepGrammar:double probSimilarWordAvg(edu.stanford.nlp.parser.lexparser.IntDependency)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:double scoreTB(edu.stanford.nlp.parser.lexparser.IntDependency)"
        ]
    },
    "edu.stanford.nlp.classify.ColumnDataClassifier:void addAllInterningAndPrefixingRVF(edu.stanford.nlp.stats.ClassicCounter,edu.stanford.nlp.stats.ClassicCounter,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.ling.RVFDatum makeRVFDatum(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:double countHistory(edu.stanford.nlp.parser.lexparser.IntDependency)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.Dataset:double[] getInformationGains()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.Dataset:void selectFeaturesBinaryInformationGain(int)"
        ]
    },
    "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution distributionFromLogisticCounter(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifier:void justificationOf(edu.stanford.nlp.ling.RVFDatum,java.io.PrintWriter)",
            "edu.stanford.nlp.classify.LinearClassifier:void justificationOf(edu.stanford.nlp.ling.Datum,java.io.PrintWriter,java.util.function.Function,boolean)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:void testExample(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset,java.util.List,edu.stanford.nlp.stats.Counter,int)",
            "edu.stanford.nlp.classify.LinearClassifier:void justificationOfRVFDatum(edu.stanford.nlp.ling.RVFDatum,java.io.PrintWriter)"
        ]
    },
    "edu.stanford.nlp.fsm.QuasiDeterminizer:edu.stanford.nlp.fsm.TransducerGraph pushLambdas(edu.stanford.nlp.fsm.TransducerGraph,edu.stanford.nlp.stats.ClassicCounter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.QuasiDeterminizer:edu.stanford.nlp.fsm.TransducerGraph processGraph(edu.stanford.nlp.fsm.TransducerGraph)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:void <init>(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifier:void <init>(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.classify.SVMLightClassifier:void <init>(edu.stanford.nlp.stats.ClassicCounter,edu.stanford.nlp.stats.ClassicCounter,edu.stanford.nlp.classify.LinearClassifier)",
            "edu.stanford.nlp.classify.SVMLightClassifier:void <init>(edu.stanford.nlp.stats.ClassicCounter,edu.stanford.nlp.stats.ClassicCounter)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:java.util.Set keysBelow(edu.stanford.nlp.stats.Counter,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon:void finishTraining()"
        ]
    },
    "edu.stanford.nlp.scoref.SimpleLinearClassifier:double weightFeatureProduct(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.Clusterer$State:edu.stanford.nlp.util.Pair getActions(edu.stanford.nlp.scoref.Clusterer$ClustererClassifier)",
            "edu.stanford.nlp.scoref.SimpleLinearClassifier:double label(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.scoref.Clusterer:java.util.List runPolicy(edu.stanford.nlp.scoref.ClustererDataLoader$ClustererDoc,double)",
            "edu.stanford.nlp.scoref.Clusterer$ClustererClassifier:edu.stanford.nlp.scoref.Clusterer$CandidateAction bestAction(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.scoref.Clusterer$State:boolean doBestAction(edu.stanford.nlp.scoref.Clusterer$ClustererClassifier)",
            "edu.stanford.nlp.scoref.SimpleLinearClassifier:void learn(edu.stanford.nlp.stats.Counter,double,double,edu.stanford.nlp.scoref.SimpleLinearClassifier$Loss)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ArabicUnknownWordModelTrainer:void train(edu.stanford.nlp.ling.TaggedWord,int,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ChineseLexicon:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,int,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,int,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.ChineseSimWordAvgDepGrammar:double probSimilarWordAvg(edu.stanford.nlp.parser.lexparser.IntDependency)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:double probTB(edu.stanford.nlp.parser.lexparser.IntDependency)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:java.util.Iterator ruleIteratorByWord(int,int,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void printStateCounts()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)"
        ]
    },
    "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.stats.ClassicCounter convertSVMStructWeights(edu.stanford.nlp.stats.ClassicCounter,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.stats.ClassicCounter convertWeights(edu.stanford.nlp.stats.ClassicCounter,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index,boolean)"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassAccuracyStats:void initMC(edu.stanford.nlp.classify.ProbabilisticClassifier,edu.stanford.nlp.classify.GeneralDataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassAccuracyStats:void <init>(edu.stanford.nlp.classify.ProbabilisticClassifier,edu.stanford.nlp.classify.GeneralDataset,java.lang.String,int)",
            "edu.stanford.nlp.stats.MultiClassAccuracyStats:double score(edu.stanford.nlp.classify.ProbabilisticClassifier,edu.stanford.nlp.classify.GeneralDataset)"
        ]
    },
    "edu.stanford.nlp.scoref.Clusterer$State:void <init>(edu.stanford.nlp.scoref.ClustererDataLoader$ClustererDoc)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.Clusterer:double evaluatePolicy(java.util.List,boolean)",
            "edu.stanford.nlp.scoref.Clusterer:java.util.List runPolicy(edu.stanford.nlp.scoref.ClustererDataLoader$ClustererDoc,double)",
            "edu.stanford.nlp.scoref.Clusterer:java.util.List getClusterMerges(edu.stanford.nlp.scoref.ClustererDataLoader$ClustererDoc)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:java.util.Set retainNonZeros(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter add(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void subtractAll(edu.stanford.nlp.stats.TwoDimensionalIntCounter,boolean)",
            "edu.stanford.nlp.patterns.surface.ScorePatternsF1:edu.stanford.nlp.stats.Counter score()",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.stats.Counter getPatterns(java.lang.String,java.util.Set,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.Counter,java.util.Set)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:void subtractAll(edu.stanford.nlp.stats.TwoDimensionalCounterInterface,boolean)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:void removeZeroCounts()",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void removeZeroCounts()",
            "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:edu.stanford.nlp.stats.Counter score()",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter diff(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter multiplyInPlace(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)"
        ]
    },
    "edu.stanford.nlp.classify.ColumnDataClassifier:void printFeatures(java.lang.String[],edu.stanford.nlp.stats.ClassicCounter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.ling.RVFDatum makeRVFDatum(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.classify.GeneralDataset:void printSVMLightFormat(java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.classify.SVMLightClassifier trainClassifierBasic(edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.classify.GeneralDataset:void printSVMLightFormat()",
            "edu.stanford.nlp.classify.ColumnDataClassifier:boolean trainClassifier()"
        ]
    },
    "edu.stanford.nlp.classify.Dataset:void printSVMLightFormat(java.io.PrintWriter,edu.stanford.nlp.stats.ClassicCounter,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.LinearClassifier:void justificationOf(edu.stanford.nlp.ling.RVFDatum,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifier:void justificationOf(edu.stanford.nlp.ling.RVFDatum)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:void printCounterSortedByKeys(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.CorefPrinter:void linkDistanceAnalysis(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.stats.Counters:java.lang.String toString(edu.stanford.nlp.stats.Counter,java.text.NumberFormat)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.classify.SVMLightClassifier trainClassifierBasic(edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.stats.Distribution:java.lang.String toString(java.text.NumberFormat)",
            "edu.stanford.nlp.trees.Treebank:java.lang.String textualSummary(edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void printLexStats()"
        ]
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter division(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void evaluate(java.util.Map,boolean)",
            "edu.stanford.nlp.patterns.surface.ScorePatternsF1:edu.stanford.nlp.stats.Counter score()",
            "edu.stanford.nlp.patterns.ScorePatternsFreqBased:edu.stanford.nlp.stats.Counter score()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recalculateTemporaryBetas(edu.stanford.nlp.trees.Tree,boolean,java.util.Map,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.ThreeDimensionalMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recalculateTemporaryBetas(boolean,java.util.Map,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.ThreeDimensionalMap)"
        ]
    },
    "edu.stanford.nlp.patterns.PhraseScorer:double getDomainNgramScore(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:edu.stanford.nlp.stats.Counter convert2OneDim(java.lang.String,java.util.function.Function,java.util.Set,edu.stanford.nlp.stats.TwoDimensionalCounter,boolean,boolean,edu.stanford.nlp.stats.Counter,boolean)",
            "edu.stanford.nlp.patterns.ScorePhrasesAverageFeatures:edu.stanford.nlp.stats.Counter scorePhrases(java.lang.String,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.Counter,java.util.Set,boolean)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LinearGrammarSmoother:float smoothRuleWeight(edu.stanford.nlp.parser.lexparser.Rule,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LinearGrammarSmoother:edu.stanford.nlp.util.Pair apply(edu.stanford.nlp.util.Pair)"
        ]
    },
    "edu.stanford.nlp.scoref.SimpleLinearClassifier$CountBasedLearningRate:double getLearningRate(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.SimpleLinearClassifier:void learn(edu.stanford.nlp.stats.Counter,double,double,edu.stanford.nlp.scoref.SimpleLinearClassifier$Loss)"
        ]
    },
    "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.stats.ClassicCounter convertSVMLightWeights(edu.stanford.nlp.stats.ClassicCounter,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.stats.ClassicCounter convertWeights(edu.stanford.nlp.stats.ClassicCounter,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index,boolean)"
        ]
    },
    "edu.stanford.nlp.dcoref.Rules:boolean entityCorefDictionary(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries,java.util.Set,edu.stanford.nlp.dcoref.Semantics)",
            "edu.stanford.nlp.dcoref.Rules:boolean entityClusterAllCorefDictionary(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Dictionaries,int,int)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:double klDivergence(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:double jensenShannonDivergence(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.parser.lexparser.SisterAnnotationStats:void main(java.lang.String[])",
            "edu.stanford.nlp.stats.Counters:double skewDivergence(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,double)",
            "edu.stanford.nlp.parser.lexparser.SisterAnnotationStats:void printStats()",
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:void printStats()",
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:void getSplitters(double,java.util.Map,java.util.Map,java.util.Map,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.stats.Distribution$DynamicDistribution:double probabilityOf(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Distribution$DynamicDistribution:double probabilityOf(java.lang.Object)",
            "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,int,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.stats.Distribution$DynamicDistribution:java.lang.Object sampleFrom()",
            "edu.stanford.nlp.stats.Distribution:java.lang.String toString()",
            "edu.stanford.nlp.stats.Distribution:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.util.PriorityQueue toPriorityQueue(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:java.lang.String toBiggestValuesFirstString(edu.stanford.nlp.stats.Counter,int,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.stats.Counters:java.lang.String toBiggestValuesFirstString(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.Counters:java.lang.String toBiggestValuesFirstString(edu.stanford.nlp.stats.Counter,int)",
            "edu.stanford.nlp.stats.Counters:java.lang.String toSortedString(edu.stanford.nlp.stats.Counter,int,java.lang.String,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter chooseTopWords(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.Counter,java.util.Set,double)",
            "edu.stanford.nlp.stats.Counters:java.lang.String toVerticalString(edu.stanford.nlp.stats.Counter,int,java.lang.String,boolean)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.stats.Counter getPatterns(java.lang.String,java.util.Set,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.Counter,java.util.Set)",
            "edu.stanford.nlp.stats.Counters:java.util.List topKeysWithCounts(edu.stanford.nlp.stats.Counter,int)",
            "edu.stanford.nlp.stats.Counters:java.lang.String toString(edu.stanford.nlp.stats.Counter,int)",
            "edu.stanford.nlp.stats.Counters:java.util.List topKeys(edu.stanford.nlp.stats.Counter,int)",
            "edu.stanford.nlp.stats.Counters:void retainTopMass(edu.stanford.nlp.stats.Counter,double)",
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:void printStats()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:boolean isKnown(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:boolean isKnown(java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.metrics.TaggingEval:void measureOOV(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.util.Pair writeResultsSummary(int,edu.stanford.nlp.stats.Counter,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.util.Pair testExamples(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset,java.util.List)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter probabilityOfRVFDatum(edu.stanford.nlp.ling.RVFDatum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter probabilityOf(edu.stanford.nlp.ling.Datum)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.TreeBinarizer:edu.stanford.nlp.trees.Tree markovInsideBinarizeLocalTreeNew(edu.stanford.nlp.trees.Tree,int,int,int,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreeBinarizer:edu.stanford.nlp.trees.Tree markovInsideBinarizeLocalTreeNew(edu.stanford.nlp.trees.Tree,int,int,int,boolean)",
            "edu.stanford.nlp.parser.lexparser.TreeBinarizer:edu.stanford.nlp.trees.Tree binarizeLocalTree(edu.stanford.nlp.trees.Tree,int,edu.stanford.nlp.ling.TaggedWord)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter probabilityOf(edu.stanford.nlp.ling.Datum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.GeneralizedExpectationObjectiveFunction:double[] getModelProbs(edu.stanford.nlp.ling.Datum)",
            "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:java.lang.String classOf(edu.stanford.nlp.ling.Datum,edu.stanford.nlp.ie.machinereading.structure.ExtractionObject)",
            "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:edu.stanford.nlp.stats.Counter probabilityOf(edu.stanford.nlp.ling.Datum)"
        ]
    },
    "edu.stanford.nlp.naturalli.OpenIE:edu.stanford.nlp.util.Pair grokCorefMention(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.hcoref.data.CorefChain$CorefMention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.OpenIE:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:void writeData(java.io.Writer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void saveParserToTextFile(java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:boolean useNewBetas(boolean,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.ThreeDimensionalMap)",
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void writeData(java.io.Writer)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:int hIndex(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:java.util.List annotateMulticlass(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Distribution:double probabilityOf(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:void writeAnswer(java.lang.String[],java.lang.String,edu.stanford.nlp.stats.Distribution)",
            "edu.stanford.nlp.stats.Distribution:int lambda$toString$8(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.stats.Distribution$DynamicDistribution:double probabilityOf(java.lang.Object)",
            "edu.stanford.nlp.stats.Distribution:double logProbabilityOf(java.lang.Object)",
            "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,int,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:void updatePerformanceStatistics(java.lang.String[],java.lang.String,edu.stanford.nlp.stats.Distribution,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.classify.Classifier,double)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:void testExample(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset,java.util.List,edu.stanford.nlp.stats.Counter,int)",
            "edu.stanford.nlp.stats.Distribution:java.lang.String toString()",
            "edu.stanford.nlp.stats.Distribution:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.stats.Counters:void divideInPlace(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ScorePhrasesAverageFeatures:edu.stanford.nlp.stats.Counter scorePhrases(java.lang.String,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.Counter,java.util.Set,boolean)"
        ]
    },
    "edu.stanford.nlp.patterns.ScorePhrasesAverageFeatures:edu.stanford.nlp.stats.Counter scorePhrases(java.lang.String,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.Counter,java.util.Set,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter learnNewPhrasesPrivate(java.lang.String,edu.stanford.nlp.patterns.surface.PatternsForEachToken,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.util.Set,edu.stanford.nlp.util.CollectionValuedMap,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,java.lang.String,java.util.Set,boolean)"
        ]
    },
    "edu.stanford.nlp.international.arabic.process.ArabicSegmenter:void evaluate(java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.arabic.process.ArabicSegmenter:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.classify.GeneralizedExpectationObjectiveFunction:double[] getModelProbs(edu.stanford.nlp.ling.Datum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.GeneralizedExpectationObjectiveFunction:void calculate(double[])"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:java.lang.String classOf(edu.stanford.nlp.ling.Datum,edu.stanford.nlp.ie.machinereading.structure.ExtractionObject)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:java.util.List annotateMulticlass(java.util.List)",
            "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:java.util.List extractAllRelations(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution goodTuringSmoothedCounter(edu.stanford.nlp.stats.Counter,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon:void finishTraining()",
            "edu.stanford.nlp.stats.Distribution:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution dynamicCounterWithDirichletPrior(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Distribution,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon:void finishTraining()",
            "edu.stanford.nlp.stats.Distribution:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.classify.RVFDataset:void writeSVMLightFormat(java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.RVFDataset:void writeSVMLightFormat(java.io.File)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:java.util.List toSortedListWithCounts(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter toTiedRankCounter(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:void reportWeights(edu.stanford.nlp.classify.LinearClassifier,java.lang.String)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.stats.Counter getPatterns(java.lang.String,java.util.Set,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.Counter,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.classify.NBLinearClassifierFactory:java.lang.Double lambda$tuneSigma$9(int[][],int[],java.lang.Double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.GoldenSectionLineSearch:double minimize(java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.PostSplitter:void dumpStats()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void dumpStats()"
        ]
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter add(edu.stanford.nlp.stats.Counter,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:double pearsonsCorrelationCoefficient(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void setUpConstructor(java.util.Map,java.util.Map,boolean,java.util.Map,java.util.Map,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter add(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void evaluate(java.util.Map,boolean)",
            "edu.stanford.nlp.patterns.surface.ScorePatternsF1:edu.stanford.nlp.stats.Counter score()",
            "edu.stanford.nlp.patterns.ScorePatternsFreqBased:edu.stanford.nlp.stats.Counter score()",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.stats.Counter FScore(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,double)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:java.util.List extractAllRelations(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:void annotateSentence(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:java.util.Iterator ruleIteratorByWord(int,int,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:java.util.Iterator ruleIteratorByWord(java.lang.String,int,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:java.util.Iterator ruleIteratorByWord(java.lang.String,int)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:void initializeChart(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:java.util.Iterator ruleIteratorByWord(int,int,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ExhaustiveDependencyParser:boolean parse(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:java.util.List makeInitialItems(java.util.List)"
        ]
    },
    "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void printLinkWithContext(java.util.logging.Logger,java.lang.String,edu.stanford.nlp.util.IntTuple,edu.stanford.nlp.util.IntTuple,edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.Semantics)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void printTopK(java.util.logging.Logger,edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.Semantics)"
        ]
    },
    "edu.stanford.nlp.classify.RVFDataset:void addFeatures(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.RVFDataset:void add(edu.stanford.nlp.ling.Datum)",
            "edu.stanford.nlp.classify.RVFDataset:void add(edu.stanford.nlp.ling.Datum,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.patterns.PhraseScorer:double getPhraseWeightFromWords(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.patterns.CandidatePhrase,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.PhraseScorer:double getDictOddsScore(edu.stanford.nlp.patterns.CandidatePhrase,java.lang.String,double)",
            "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:edu.stanford.nlp.stats.Counter convert2OneDim(java.lang.String,java.util.function.Function,java.util.Set,edu.stanford.nlp.stats.TwoDimensionalCounter,boolean,boolean,edu.stanford.nlp.stats.Counter,boolean)",
            "edu.stanford.nlp.patterns.ScorePhrasesAverageFeatures:edu.stanford.nlp.stats.Counter scorePhrases(java.lang.String,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.Counter,java.util.Set,boolean)"
        ]
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier:void classifySeq(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:java.util.List classify(java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:double getStopProb(edu.stanford.nlp.parser.lexparser.IntDependency)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:double probTB(edu.stanford.nlp.parser.lexparser.IntDependency)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void tune(java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.ChineseSimWordAvgDepGrammar:double probTBwithSimWords(edu.stanford.nlp.parser.lexparser.IntDependency)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammarExtractor:edu.stanford.nlp.parser.lexparser.DependencyGrammar formResult()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammarExtractor:java.lang.Object formResult()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.EnglishUnknownWordModelTrainer:void train(edu.stanford.nlp.ling.TaggedWord,int,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.scoref.Clusterer:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.scoref.ClustererDataLoader$ClustererDoc,edu.stanford.nlp.util.Pair,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.Clusterer:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.scoref.ClustererDataLoader$ClustererDoc,edu.stanford.nlp.scoref.Clusterer$Cluster,edu.stanford.nlp.scoref.Clusterer$Cluster,edu.stanford.nlp.scoref.Clusterer$GlobalFeatures)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BinaryGrammarExtractor:edu.stanford.nlp.util.Pair formResult()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BinaryGrammarExtractor:java.lang.Object formResult()"
        ]
    },
    "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution laplaceSmoothedDistribution(edu.stanford.nlp.stats.Counter,int,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution laplaceSmoothedDistribution(edu.stanford.nlp.stats.Counter,int)",
            "edu.stanford.nlp.parser.lexparser.GrammarCompactor:edu.stanford.nlp.stats.Distribution computeInputPrior(java.util.Map)",
            "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution goodTuringSmoothedCounter(edu.stanford.nlp.stats.Counter,int)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void initialBetasAndLexicon()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void extract(java.util.Collection,double,java.util.Collection,double)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter probabilityOf(edu.stanford.nlp.ling.RVFDatum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:edu.stanford.nlp.stats.Counter classifyKBest(java.util.List,java.lang.Class,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswersKBest(edu.stanford.nlp.objectbank.ObjectBank,int,java.io.PrintWriter,edu.stanford.nlp.sequences.DocumentReaderAndWriter)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,int,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:double probTB(edu.stanford.nlp.parser.lexparser.IntDependency)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:int recountInside(edu.stanford.nlp.trees.Tree,boolean,int,java.util.IdentityHashMap)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:java.util.Iterator ruleIteratorByWord(int,int,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:edu.stanford.nlp.trees.Tree getTree(edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser$Vertex,int,int)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:void initializeChart(edu.stanford.nlp.parser.lexparser.Lattice)",
            "edu.stanford.nlp.parser.lexparser.ExhaustiveDependencyParser:boolean parse(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void printLexStats()",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:double validateBinarizedTree(edu.stanford.nlp.trees.Tree,int)",
            "edu.stanford.nlp.parser.lexparser.ChineseLexicon:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,int,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:edu.stanford.nlp.trees.Tree extractBestParse(int,int,int)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:void initializeChart(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:double scoreBinarizedTree(edu.stanford.nlp.trees.Tree,int)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:java.util.List extractBestParses(int,int,int)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:void makeAnswerArraysAndTagIndex(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void train(java.util.Collection,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.crf.CRFFeatureExporter:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.shiftreduce.DistsimFeatureFactory:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.ExtractorDistsim:void <init>(java.lang.String,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.ExtractorFramesRare:edu.stanford.nlp.tagger.maxent.Extractor[] getExtractorFramesRare(java.lang.String,edu.stanford.nlp.tagger.maxent.TTags)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.ExtractorDistsimConjunction:void <init>(java.lang.String,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.ExtractorFramesRare:edu.stanford.nlp.tagger.maxent.Extractor[] getExtractorFramesRare(java.lang.String,edu.stanford.nlp.tagger.maxent.TTags)"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void collapseDependencies(java.util.List,boolean,edu.stanford.nlp.trees.GrammaticalStructure$Extras)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void collapseDependenciesTree(java.util.List)",
            "edu.stanford.nlp.trees.GrammaticalStructure:java.util.List typedDependenciesCollapsed(edu.stanford.nlp.trees.GrammaticalStructure$Extras)",
            "edu.stanford.nlp.trees.GrammaticalStructure:java.util.List typedDependenciesCCprocessed(edu.stanford.nlp.trees.GrammaticalStructure$Extras)"
        ]
    },
    "edu.stanford.nlp.util.BinaryHeapPriorityQueue:java.lang.Object getObject(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.BinaryHeapPriorityQueue:boolean changePriority(java.lang.Object,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:java.lang.String toBiggestValuesFirstString(edu.stanford.nlp.stats.Counter,int,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.stats.Counters:java.lang.String toBiggestValuesFirstString(edu.stanford.nlp.stats.Counter,int)",
            "edu.stanford.nlp.ling.tokensregex.matcher.BoundedCostOrderedMap:java.lang.Object put(java.lang.Object,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.util.BinaryHeapPriorityQueue:boolean remove(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.VisibilityHandler:boolean alsoShow(java.lang.Object)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:java.util.Set getTags()",
            "edu.stanford.nlp.hcoref.Rules:boolean entityWordsIncluded(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)",
            "edu.stanford.nlp.hcoref.data.CorefCluster:void mergeClusters(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster)",
            "edu.stanford.nlp.hcoref.sieve.RFSieve:edu.stanford.nlp.ling.RVFDatum extractDatum(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,int,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.String)",
            "edu.stanford.nlp.ling.tokensregex.matcher.BoundedCostOrderedMap:java.lang.Object remove(java.lang.Object)",
            "edu.stanford.nlp.util.Sets:java.util.Set powerSet(java.util.Set)",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void optimizeSieveOrdering(edu.stanford.nlp.dcoref.MentionExtractor,java.util.Properties,java.lang.String)",
            "edu.stanford.nlp.util.CollectionValuedMap:void removeMapping(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.semgraph.SemanticGraph:boolean isDagHelper(edu.stanford.nlp.ling.IndexedWord,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void process3WP(edu.stanford.nlp.semgraph.SemanticGraph,java.util.HashMap)",
            "edu.stanford.nlp.dcoref.CorefCluster:void mergeClusters(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void processComplex2WP(edu.stanford.nlp.semgraph.SemanticGraph,java.util.HashMap)",
            "edu.stanford.nlp.dcoref.Rules:boolean entityWordsIncluded(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention)",
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:java.lang.Object removeFirst()",
            "edu.stanford.nlp.graph.DijkstraShortestPath:java.util.List getShortestPath(edu.stanford.nlp.graph.Graph,java.lang.Object,java.lang.Object,boolean)",
            "edu.stanford.nlp.util.logging.VisibilityHandler:boolean alsoHide(java.lang.Object)",
            "edu.stanford.nlp.util.DeltaCollectionValuedMap:void removeMapping(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.util.PropertiesUtils:void checkProperties(java.util.Properties,java.util.Properties)",
            "edu.stanford.nlp.fsm.TransducerGraph:boolean removeArc(edu.stanford.nlp.fsm.TransducerGraph$Arc)",
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:void findRootOnlyStatesHelper(edu.stanford.nlp.trees.Tree,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.parser.lexparser.TregexPoweredTreebankParserParams:void removeFeature(java.lang.String)",
            "edu.stanford.nlp.hcoref.data.Document:void mergeIncompatibles(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster)",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Collection getSiblings(edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Set getSubTreeEdges(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraphEdge)",
            "edu.stanford.nlp.trees.tregex.gui.Tdiff:java.util.Set markDiff(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.util.BinaryHeapPriorityQueue:double getPriority(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:java.lang.String toBiggestValuesFirstString(edu.stanford.nlp.stats.Counter,int,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.stats.Counters:java.lang.String toBiggestValuesFirstString(edu.stanford.nlp.stats.Counter,int)",
            "edu.stanford.nlp.stats.Counters:java.lang.String toVerticalString(edu.stanford.nlp.stats.Counter,int,java.lang.String,boolean)",
            "edu.stanford.nlp.graph.DijkstraShortestPath:java.util.List getShortestPath(edu.stanford.nlp.graph.Graph,java.lang.Object,java.lang.Object,boolean)",
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:java.lang.String toString(int)",
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:java.lang.String toVerticalString()",
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:void printStats()"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TestSentence:void calculateProbs(double[][][])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TestSentence:void printUnknown(int,edu.stanford.nlp.io.PrintFile)",
            "edu.stanford.nlp.tagger.maxent.TestSentence:void printTop(edu.stanford.nlp.io.PrintFile)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TestSentence:double[] getApproximateScores(edu.stanford.nlp.tagger.maxent.History)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TestSentence:double[] getScores(edu.stanford.nlp.tagger.maxent.History)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TestSentence:double[] getExactScores(edu.stanford.nlp.tagger.maxent.History)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TestSentence:double[] getScores(edu.stanford.nlp.tagger.maxent.History)"
        ]
    },
    "edu.stanford.nlp.sequences.Clique:edu.stanford.nlp.sequences.Clique valueOfHelper(int[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.Clique:edu.stanford.nlp.sequences.Clique valueOf(int,int)",
            "edu.stanford.nlp.sequences.Clique:edu.stanford.nlp.sequences.Clique valueOf(int[])",
            "edu.stanford.nlp.sequences.Clique:edu.stanford.nlp.sequences.Clique shift(int)",
            "edu.stanford.nlp.sequences.Clique:edu.stanford.nlp.sequences.Clique rightMessage()",
            "edu.stanford.nlp.sequences.Clique:edu.stanford.nlp.sequences.Clique valueOf(edu.stanford.nlp.sequences.Clique,int)",
            "edu.stanford.nlp.sequences.Clique:edu.stanford.nlp.sequences.Clique leftMessage()"
        ]
    },
    "edu.stanford.nlp.sequences.Clique:java.lang.Object readResolve()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.DeterministicCorefAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.util.TwoDimensionalMap:boolean contains(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.SentimentModel:void <init>(edu.stanford.nlp.sentiment.RNNOptions,java.util.List)",
            "edu.stanford.nlp.util.TwoDimensionalSet:boolean contains(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.dcoref.Rules:boolean entityIsAcronym(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster)",
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient$ModelDerivatives:void addMatrices(edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.TwoDimensionalMap)",
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient$ModelDerivatives:void addTensors(edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.TwoDimensionalMap)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:int initialBetasAndLexicon(edu.stanford.nlp.trees.Tree,int,double)",
            "edu.stanford.nlp.util.ArrayCoreMap:boolean equals(edu.stanford.nlp.util.ArrayCoreMap)"
        ]
    },
    "edu.stanford.nlp.util.TwoDimensionalSet:java.util.Set secondKeySet(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Document:void mergeAcronymCache(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster)"
        ]
    },
    "edu.stanford.nlp.util.TwoDimensionalMap:java.util.Map get(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.TwoDimensionalMap:java.lang.Object remove(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.util.ThreeDimensionalMap:java.util.Set thirdKeySet()",
            "edu.stanford.nlp.util.TwoDimensionalMap:java.util.Set secondKeySet()",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void outputBetas()",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void buildGrammars()",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:boolean testConvergence(edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.ThreeDimensionalMap)",
            "edu.stanford.nlp.util.ThreeDimensionalMap:boolean contains(java.lang.Object,java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.util.ThreeDimensionalMap:java.util.Map get(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.dcoref.Document:void mergeAcronymCache(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void rescaleTemporaryBetas(edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.ThreeDimensionalMap)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void splitBetas()"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.util.List getAllEdges(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:void tabuDescendantsHelper(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Set,java.util.Collection,java.util.Collection,edu.stanford.nlp.semgraph.IndexedWordUnaryPred)",
            "edu.stanford.nlp.semgraph.SemanticGraph:edu.stanford.nlp.semgraph.SemanticGraphEdge getEdge(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.trees.GrammaticalRelation)",
            "edu.stanford.nlp.patterns.dep.ExtractPhraseFromPattern:void descendantsWithReln(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.lang.String,java.util.List,java.util.List)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Collection getEdgesSpannedByVertices(java.util.Collection,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:edu.stanford.nlp.semgraph.SemanticGraph makeGraphFromNodes(java.util.Collection,edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:java.util.List getDeps(java.util.function.Predicate,edu.stanford.nlp.graph.DirectedMultiGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:void <init>(edu.stanford.nlp.trees.Tree,java.util.Collection,java.util.concurrent.locks.Lock,edu.stanford.nlp.trees.TreeTransformer,edu.stanford.nlp.trees.HeadFinder,java.util.function.Predicate,java.util.function.Predicate)"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:void getTreeDeps(java.util.List,edu.stanford.nlp.graph.DirectedMultiGraph,java.util.function.Predicate,java.util.function.Predicate)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:void getExtraDeps(java.util.List,java.util.function.Predicate,edu.stanford.nlp.graph.DirectedMultiGraph)"
        ]
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.List convertPath(java.util.List,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.List getShortestPathEdges(java.lang.Object,java.lang.Object,boolean)",
            "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.List getShortestPathEdges(java.lang.Object,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:edu.stanford.nlp.semgraph.SemanticGraphEdge getEdge(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void correctSubjPass(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void addCaseMarkersToReln(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,java.util.List)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void process3WP(edu.stanford.nlp.semgraph.SemanticGraph,java.util.HashMap)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void processComplex2WP(edu.stanford.nlp.semgraph.SemanticGraph,java.util.HashMap)",
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:java.util.HashMap getGraphFeatures(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.trees.ud.CoNLLUDocumentWriter:java.lang.String printSemanticGraph(edu.stanford.nlp.semgraph.SemanticGraph,boolean)",
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:java.lang.String wasPerson(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:java.util.HashMap getRelAndIntPronFeatures(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void addConjToReln(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.List,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void createMultiWordExpression(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.trees.GrammaticalRelation,edu.stanford.nlp.ling.IndexedWord[])",
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:java.lang.String pronounCase(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:boolean hasBeAux(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:edu.stanford.nlp.util.IntPair getNPSpan(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,java.util.List)",
            "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:void extractPronounForHeadword(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void addPassiveAgentToReln(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:boolean hasAux(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void correctWHAttachment(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void expandPPConjunction(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.List,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void correctWHAttachment(edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.ExtractorDistsim:java.lang.String extract(edu.stanford.nlp.tagger.maxent.History,edu.stanford.nlp.tagger.maxent.PairsHolder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.shiftreduce.DistsimFeatureFactory:void addDistsimFeatures(java.util.List,edu.stanford.nlp.ling.CoreLabel,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.shiftreduce.DistsimFeatureFactory:java.util.List featurize(edu.stanford.nlp.parser.shiftreduce.State,java.util.List)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.ExtractorDistsimConjunction:java.lang.String extract(edu.stanford.nlp.tagger.maxent.History,edu.stanford.nlp.tagger.maxent.PairsHolder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.CTBunkDict:java.lang.String getTag(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.CTBunkDictDetector:java.lang.String extract(edu.stanford.nlp.tagger.maxent.History,edu.stanford.nlp.tagger.maxent.PairsHolder)"
        ]
    },
    "edu.stanford.nlp.dcoref.Document:void initialize()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Document:void <init>(edu.stanford.nlp.pipeline.Annotation,java.util.List,java.util.List,edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:java.util.Collection findHighestScoringTransitions(edu.stanford.nlp.parser.shiftreduce.State,boolean,int,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParserQuery:boolean parseInternal()"
        ]
    },
    "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:edu.stanford.nlp.util.Pair trainTree(int,java.util.List,java.util.List,java.util.List,edu.stanford.nlp.parser.shiftreduce.Oracle)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:edu.stanford.nlp.util.Triple trainBatch(java.util.List,java.util.List,java.util.List,java.util.List,edu.stanford.nlp.parser.shiftreduce.Oracle,edu.stanford.nlp.util.concurrent.MulticoreWrapper)",
            "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:edu.stanford.nlp.util.Pair access$000(edu.stanford.nlp.parser.shiftreduce.PerceptronModel,int,java.util.List,java.util.List,java.util.List,edu.stanford.nlp.parser.shiftreduce.Oracle)"
        ]
    },
    "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:edu.stanford.nlp.util.ScoredObject findHighestScoringTransition(edu.stanford.nlp.parser.shiftreduce.State,java.util.List,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:edu.stanford.nlp.util.Pair trainTree(int,java.util.List,java.util.List,java.util.List,edu.stanford.nlp.parser.shiftreduce.Oracle)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger$TaggerWrapper:void <init>(edu.stanford.nlp.tagger.maxent.MaxentTagger)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:java.lang.String tagString(java.lang.String)",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void tagFromXML(java.io.Reader,java.io.Writer,java.lang.String[])",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void tagFromXML(java.io.InputStream,java.io.Writer,java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void tagFromXML(java.io.Reader,java.io.Writer,java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void tagFromXML()"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void tagFromXML(java.io.InputStream,java.io.Writer,java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter:void printAnswers(java.util.List,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void writeAnswers(java.util.List,java.io.PrintWriter,edu.stanford.nlp.sequences.DocumentReaderAndWriter)"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.lang.String classifyToString(java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.NERServer$Session:void run()",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.lang.String classifyToString(java.lang.String)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.lang.String classifyWithInlineXML(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TaggerExperiments:void getFeaturesNew()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TaggerExperiments:void <init>(edu.stanford.nlp.tagger.maxent.TaggerConfig,edu.stanford.nlp.tagger.maxent.MaxentTagger)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon:edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon$Symbol unknownCharClass(edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon$Symbol)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,int,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon:void finishTraining()"
        ]
    },
    "edu.stanford.nlp.wordseg.Gale2007ChineseSegmenterFeatureFactory:java.util.Collection featuresCpC(edu.stanford.nlp.util.PaddedList,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.wordseg.Gale2007ChineseSegmenterFeatureFactory:java.util.Collection getCliqueFeatures(edu.stanford.nlp.util.PaddedList,int,edu.stanford.nlp.sequences.Clique)"
        ]
    },
    "edu.stanford.nlp.wordseg.ChineseSegmenterFeatureFactory:java.util.Collection featuresCpC(edu.stanford.nlp.util.PaddedList,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.wordseg.ChineseSegmenterFeatureFactory:java.util.Collection getCliqueFeatures(edu.stanford.nlp.util.PaddedList,int,edu.stanford.nlp.sequences.Clique)"
        ]
    },
    "edu.stanford.nlp.wordseg.Gale2007ChineseSegmenterFeatureFactory:java.util.Collection featuresCpCp2C(edu.stanford.nlp.util.PaddedList,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.wordseg.Gale2007ChineseSegmenterFeatureFactory:java.util.Collection getCliqueFeatures(edu.stanford.nlp.util.PaddedList,int,edu.stanford.nlp.sequences.Clique)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.ASBCunkDict:java.lang.String getTag(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.ASBCunkDetector:java.lang.String extract(edu.stanford.nlp.tagger.maxent.History,edu.stanford.nlp.tagger.maxent.PairsHolder)"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter:java.util.Set entrySet()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter:void prettyPrint(java.io.PrintWriter,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.stats.GeneralizedCounter:edu.stanford.nlp.stats.GeneralizedCounter reverseKeys()",
            "edu.stanford.nlp.stats.GeneralizedCounter:void main(java.lang.String[])",
            "edu.stanford.nlp.stats.GeneralizedCounter$CounterView:java.util.Set entrySet()"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter:java.util.Set access$600(edu.stanford.nlp.stats.GeneralizedCounter,java.util.Set,java.lang.Object[],boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter$OneDimensionalCounterView:java.util.Set entrySet()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.TregexPoweredTreebankParserParams:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$Rule createRule(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$Rule Rule(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:void collapseDependencies(java.util.List,boolean,edu.stanford.nlp.trees.GrammaticalStructure$Extras)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:java.util.List typedDependenciesCollapsed(edu.stanford.nlp.trees.GrammaticalStructure$Extras)",
            "edu.stanford.nlp.trees.GrammaticalStructure:java.util.List typedDependenciesCCprocessed(edu.stanford.nlp.trees.GrammaticalStructure$Extras)"
        ]
    },
    "edu.stanford.nlp.util.Maps:void putIntoValueArrayList(java.util.Map,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Maps:void main(java.lang.String[])",
            "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:void addSplits(edu.stanford.nlp.fsm.FastExactAutomatonMinimizer$Block)"
        ]
    },
    "edu.stanford.nlp.util.Maps:void putIntoValueHashSet(java.util.Map,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.TransducerGraph:boolean addArc(edu.stanford.nlp.fsm.TransducerGraph$Arc)",
            "edu.stanford.nlp.util.Maps:java.util.Map invertSet(java.util.Map)",
            "edu.stanford.nlp.util.Maps:void main(java.lang.String[])",
            "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:java.util.Map sortIntoBlocks(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.patterns.InvertedIndexByTokens:java.util.Map getFileSentIdsFromPats(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.InvertedIndexByTokens:java.util.Map queryIndex(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:java.util.List extractPredictedMentions(edu.stanford.nlp.pipeline.Annotation,int,edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.CoNLLMentionExtractor:edu.stanford.nlp.dcoref.Document nextDoc()",
            "edu.stanford.nlp.pipeline.DeterministicCorefAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.dcoref.MUCMentionExtractor:edu.stanford.nlp.dcoref.Document nextDoc()",
            "edu.stanford.nlp.dcoref.ACEMentionExtractor:edu.stanford.nlp.dcoref.Document nextDoc()"
        ]
    },
    "edu.stanford.nlp.trees.UniversalSemanticHeadFinder:void <init>(edu.stanford.nlp.trees.TreebankLanguagePack,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalSemanticHeadFinder:void <init>(boolean)",
            "edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams:edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()",
            "edu.stanford.nlp.trees.PennTreebankLanguagePack:edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()",
            "edu.stanford.nlp.trees.UniversalSemanticHeadFinder:void <init>()"
        ]
    },
    "edu.stanford.nlp.sentiment.SentimentModel:org.ejml.simple.SimpleMatrix getBinaryClassification(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient:void forwardPropagateTree(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient:void backpropDerivativesAndError(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.TwoDimensionalMap,java.util.Map,java.util.Map,org.ejml.simple.SimpleMatrix)"
        ]
    },
    "edu.stanford.nlp.parser.dvparser.DVModel:org.ejml.simple.SimpleMatrix getWForNode(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.DVParserCostAndGradient:void backpropDerivative(edu.stanford.nlp.trees.Tree,java.util.List,java.util.IdentityHashMap,edu.stanford.nlp.util.TwoDimensionalMap,java.util.Map,edu.stanford.nlp.util.TwoDimensionalMap,java.util.Map,java.util.Map,org.ejml.simple.SimpleMatrix)",
            "edu.stanford.nlp.parser.dvparser.DVParserCostAndGradient:void forwardPropagateTree(edu.stanford.nlp.trees.Tree,java.util.List,java.util.IdentityHashMap,java.util.IdentityHashMap)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:int recountInside(edu.stanford.nlp.trees.Tree,boolean,int,java.util.IdentityHashMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recountTree(edu.stanford.nlp.trees.Tree,boolean,java.util.IdentityHashMap,java.util.IdentityHashMap,java.util.IdentityHashMap,java.util.IdentityHashMap)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:int recountInside(edu.stanford.nlp.trees.Tree,boolean,int,java.util.IdentityHashMap)"
        ]
    },
    "edu.stanford.nlp.sentiment.SentimentCostAndGradient$ModelDerivatives:void addMatrices(edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.TwoDimensionalMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient$ModelDerivatives:void add(edu.stanford.nlp.sentiment.SentimentCostAndGradient$ModelDerivatives)"
        ]
    },
    "edu.stanford.nlp.parser.dvparser.DVModel:void filterRulesForBatch(edu.stanford.nlp.util.TwoDimensionalSet,java.util.Set,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.DVModel:void filterRulesForBatch(java.util.Collection)",
            "edu.stanford.nlp.parser.dvparser.DVModel:void filterRulesForBatch(java.util.Map)",
            "edu.stanford.nlp.parser.dvparser.DVModel:void setRulesForTrainingSet(java.util.List,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.sentiment.SentimentModel:edu.stanford.nlp.neural.SimpleTensor getBinaryTensor(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient:void forwardPropagateTree(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient:void backpropDerivativesAndError(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.TwoDimensionalMap,java.util.Map,java.util.Map,org.ejml.simple.SimpleMatrix)"
        ]
    },
    "edu.stanford.nlp.sentiment.SentimentModel:org.ejml.simple.SimpleMatrix getClassWForNode(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.dvparser.DVParserCostAndGradient:void backpropDerivative(edu.stanford.nlp.trees.Tree,java.util.List,java.util.IdentityHashMap,edu.stanford.nlp.util.TwoDimensionalMap,java.util.Map,edu.stanford.nlp.util.TwoDimensionalMap,java.util.Map,java.util.Map,org.ejml.simple.SimpleMatrix)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.DVParserCostAndGradient:void backpropDerivative(edu.stanford.nlp.trees.Tree,java.util.List,java.util.IdentityHashMap,edu.stanford.nlp.util.TwoDimensionalMap,java.util.Map,edu.stanford.nlp.util.TwoDimensionalMap,java.util.Map,java.util.Map,org.ejml.simple.SimpleMatrix)",
            "edu.stanford.nlp.parser.dvparser.DVParserCostAndGradient:void backpropDerivative(edu.stanford.nlp.trees.Tree,java.util.List,java.util.IdentityHashMap,edu.stanford.nlp.util.TwoDimensionalMap,java.util.Map,edu.stanford.nlp.util.TwoDimensionalMap,java.util.Map,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:boolean testConvergence(edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.ThreeDimensionalMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:boolean useNewBetas(boolean,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.ThreeDimensionalMap)"
        ]
    },
    "edu.stanford.nlp.sentiment.SentimentCostAndGradient:void backpropDerivativesAndError(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.TwoDimensionalMap,java.util.Map,java.util.Map,org.ejml.simple.SimpleMatrix)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient:void backpropDerivativesAndError(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.TwoDimensionalMap,java.util.Map,java.util.Map)",
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient:void backpropDerivativesAndError(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.TwoDimensionalMap,java.util.Map,java.util.Map,org.ejml.simple.SimpleMatrix)"
        ]
    },
    "edu.stanford.nlp.sentiment.SentimentModel:org.ejml.simple.SimpleMatrix getBinaryTransform(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient:void forwardPropagateTree(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient:void backpropDerivativesAndError(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.TwoDimensionalMap,java.util.Map,java.util.Map,org.ejml.simple.SimpleMatrix)"
        ]
    },
    "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.semgraph.SemanticGraph fromProto(edu.stanford.nlp.pipeline.CoreNLPProtos$DependencyGraph,java.util.List,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:edu.stanford.nlp.semgraph.SemanticGraph dependencyGraph(java.util.Properties,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode)",
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.ie.util.RelationTriple fromProto(edu.stanford.nlp.pipeline.CoreNLPProtos$OpenIETriple,java.util.List,java.lang.String)",
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.pipeline.Annotation fromProto(edu.stanford.nlp.pipeline.CoreNLPProtos$Document)",
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.util.CoreMap fromProto(edu.stanford.nlp.pipeline.CoreNLPProtos$Sentence)"
        ]
    },
    "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.ling.IndexedWord lambda$fromProto$63(edu.stanford.nlp.util.TwoDimensionalMap,java.lang.Integer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recountOutside(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.util.IdentityHashMap,java.util.IdentityHashMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recurseOutside(edu.stanford.nlp.trees.Tree,java.util.IdentityHashMap,java.util.IdentityHashMap)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recountWeights(edu.stanford.nlp.trees.Tree,java.util.IdentityHashMap,java.util.IdentityHashMap,java.util.IdentityHashMap,java.util.IdentityHashMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recountTree(edu.stanford.nlp.trees.Tree,boolean,java.util.IdentityHashMap,java.util.IdentityHashMap,java.util.IdentityHashMap,java.util.IdentityHashMap)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recountWeights(edu.stanford.nlp.trees.Tree,java.util.IdentityHashMap,java.util.IdentityHashMap,java.util.IdentityHashMap,java.util.IdentityHashMap)"
        ]
    },
    "edu.stanford.nlp.sentiment.SentimentCostAndGradient:double scaleAndRegularize(edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.TwoDimensionalMap,double,double,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient:void calculate(double[])"
        ]
    },
    "edu.stanford.nlp.parser.dvparser.DVModel:org.ejml.simple.SimpleMatrix getScoreWForNode(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.DVParserCostAndGradient:void backpropDerivative(edu.stanford.nlp.trees.Tree,java.util.List,java.util.IdentityHashMap,edu.stanford.nlp.util.TwoDimensionalMap,java.util.Map,edu.stanford.nlp.util.TwoDimensionalMap,java.util.Map,java.util.Map,org.ejml.simple.SimpleMatrix)",
            "edu.stanford.nlp.parser.dvparser.DVParserCostAndGradient:void forwardPropagateTree(edu.stanford.nlp.trees.Tree,java.util.List,java.util.IdentityHashMap,java.util.IdentityHashMap)"
        ]
    },
    "edu.stanford.nlp.sentiment.SentimentCostAndGradient:double scaleAndRegularizeTensor(edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.TwoDimensionalMap,double,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient:void calculate(double[])"
        ]
    },
    "edu.stanford.nlp.dcoref.Rules:boolean entityIsAcronym(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries,java.util.Set,edu.stanford.nlp.dcoref.Semantics)"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotationSerializer$IntermediateSemanticGraph:edu.stanford.nlp.semgraph.SemanticGraph convertIntermediateGraph(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.CustomAnnotationSerializer:edu.stanford.nlp.util.Pair read(java.io.InputStream)"
        ]
    },
    "edu.stanford.nlp.sentiment.SentimentModel:edu.stanford.nlp.neural.SimpleTensor getTensorForNode(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sentiment.SentimentCostAndGradient$ModelDerivatives:void addTensors(edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.TwoDimensionalMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient$ModelDerivatives:void add(edu.stanford.nlp.sentiment.SentimentCostAndGradient$ModelDerivatives)"
        ]
    },
    "edu.stanford.nlp.parser.dvparser.DVModel:void addRandomBinaryMatrix(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.DVModel:void setRulesForTrainingSet(java.util.List,java.util.Map)",
            "edu.stanford.nlp.parser.dvparser.DVModel:void <init>(edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.parser.lexparser.UnaryGrammar,edu.stanford.nlp.parser.lexparser.BinaryGrammar)"
        ]
    },
    "edu.stanford.nlp.dcoref.Document:void mergeAcronymCache(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void coreference(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve)"
        ]
    },
    "edu.stanford.nlp.sentiment.SentimentModel:org.ejml.simple.SimpleMatrix getWForNode(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void splitBetas()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:boolean recalculateBetas(boolean)"
        ]
    },
    "edu.stanford.nlp.trees.TreePrint:void printTrees(java.util.List,java.lang.String,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ParseFiles:void processResults(edu.stanford.nlp.parser.common.ParserQuery,int,java.io.PrintWriter)"
        ]
    },
    "edu.stanford.nlp.trees.TreePrint:void printTree(edu.stanford.nlp.trees.Tree,java.lang.String,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ParseFiles:void processResults(edu.stanford.nlp.parser.common.ParserQuery,int,java.io.PrintWriter)",
            "edu.stanford.nlp.trees.TreePrint:void printTree(edu.stanford.nlp.trees.Tree,java.io.PrintWriter)"
        ]
    },
    "edu.stanford.nlp.pipeline.ChunkAnnotationUtils:void annotateChunks(java.util.List,int,int,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.CoreMapSequenceMatchAction$AnnotateAction:edu.stanford.nlp.ling.tokensregex.SequenceMatchResult apply(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult,int[])",
            "edu.stanford.nlp.ling.tokensregex.CoreMapSequenceMatcher:void annotateGroup(int,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.pipeline.ChunkAnnotationUtils:void annotateChunks(java.util.List,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.HookChart:void registerRealEdge(edu.stanford.nlp.parser.lexparser.Edge)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void registerReal(edu.stanford.nlp.parser.lexparser.Edge)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.HookChart:void addEdge(edu.stanford.nlp.parser.lexparser.Edge)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processEdge(edu.stanford.nlp.parser.lexparser.Edge)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.HookChart:void addHook(edu.stanford.nlp.parser.lexparser.Hook)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processHook(edu.stanford.nlp.parser.lexparser.Hook)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:void removeKeys(edu.stanford.nlp.stats.TwoDimensionalCounter,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.stats.Counter getPatterns(java.lang.String,java.util.Set,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.Counter,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.patterns.ScorePhrases:void removeKeys(edu.stanford.nlp.stats.TwoDimensionalCounter,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter learnNewPhrasesPrivate(java.lang.String,edu.stanford.nlp.patterns.surface.PatternsForEachToken,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.util.Set,edu.stanford.nlp.util.CollectionValuedMap,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,java.lang.String,java.util.Set,boolean)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.ExciseNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.tsurgeon.ExciseNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.MoveNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.RelabelNode$RelabelMatcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToFootNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.ReplaceNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.PruneNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.InsertNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPatternRoot$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.CoindexNodes$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.IfExistsNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.CreateSubtreeNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToHeadNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.DeleteNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.MoveNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.tsurgeon.ExciseNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.MoveNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.RelabelNode$RelabelMatcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToFootNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.ReplaceNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.PruneNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.InsertNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPatternRoot$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.CoindexNodes$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.IfExistsNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.CreateSubtreeNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToHeadNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.DeleteNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.RelabelNode$RelabelMatcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.tsurgeon.ExciseNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.MoveNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.RelabelNode$RelabelMatcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToFootNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.ReplaceNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.PruneNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.InsertNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPatternRoot$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.CoindexNodes$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.IfExistsNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.CreateSubtreeNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToHeadNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.DeleteNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.tsurgeon.ExciseNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.MoveNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.RelabelNode$RelabelMatcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToFootNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.ReplaceNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.PruneNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.InsertNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPatternRoot$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.CoindexNodes$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.IfExistsNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.CreateSubtreeNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToHeadNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.DeleteNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToFootNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.tsurgeon.ExciseNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.MoveNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.RelabelNode$RelabelMatcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToFootNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.ReplaceNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.PruneNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.InsertNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPatternRoot$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.CoindexNodes$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.IfExistsNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.CreateSubtreeNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToHeadNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.DeleteNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.ReplaceNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.tsurgeon.ExciseNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.MoveNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.RelabelNode$RelabelMatcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToFootNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.ReplaceNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.PruneNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.InsertNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPatternRoot$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.CoindexNodes$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.IfExistsNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.CreateSubtreeNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToHeadNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.DeleteNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.PruneNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.tsurgeon.ExciseNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.MoveNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.RelabelNode$RelabelMatcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToFootNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.ReplaceNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.PruneNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.InsertNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPatternRoot$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.CoindexNodes$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.IfExistsNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.CreateSubtreeNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToHeadNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.DeleteNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.InsertNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.tsurgeon.ExciseNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.MoveNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.RelabelNode$RelabelMatcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToFootNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.ReplaceNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.PruneNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.InsertNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPatternRoot$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.CoindexNodes$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.IfExistsNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.CreateSubtreeNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToHeadNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.DeleteNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPatternRoot$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.spanish.SpanishTreeNormalizer:edu.stanford.nlp.trees.Tree expandConmigo(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:edu.stanford.nlp.trees.Tree processPattern(edu.stanford.nlp.trees.tregex.TregexPattern,edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.international.spanish.SpanishTreeNormalizer:edu.stanford.nlp.trees.Tree expandCliticPronounsInner(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexPattern)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.TreeLocation$LocationMatcher:edu.stanford.nlp.util.Pair evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.tsurgeon.MoveNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.InsertNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.CoindexNodes$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.tsurgeon.ExciseNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.MoveNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.RelabelNode$RelabelMatcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToFootNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.ReplaceNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.PruneNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.InsertNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPatternRoot$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.CoindexNodes$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.IfExistsNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.CreateSubtreeNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToHeadNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.DeleteNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.IfExistsNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.tsurgeon.ExciseNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.MoveNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.RelabelNode$RelabelMatcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToFootNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.ReplaceNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.PruneNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.InsertNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPatternRoot$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.CoindexNodes$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.IfExistsNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.CreateSubtreeNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToHeadNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.DeleteNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.CreateSubtreeNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.tsurgeon.ExciseNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.MoveNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.RelabelNode$RelabelMatcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToFootNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.ReplaceNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.PruneNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.InsertNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPatternRoot$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.CoindexNodes$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.IfExistsNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.CreateSubtreeNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToHeadNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.DeleteNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToHeadNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.tsurgeon.ExciseNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.MoveNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.RelabelNode$RelabelMatcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToFootNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.ReplaceNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.PruneNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.InsertNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPatternRoot$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.CoindexNodes$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.IfExistsNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.CreateSubtreeNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToHeadNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.DeleteNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.DeleteNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.tsurgeon.ExciseNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.MoveNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.RelabelNode$RelabelMatcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToFootNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.ReplaceNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.PruneNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.InsertNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPatternRoot$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.CoindexNodes$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.IfExistsNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.CreateSubtreeNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToHeadNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.DeleteNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifierNonlinear:void serializeTextClassifier(java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void serializeTextClassifier(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:void serializeTextClassifier(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.DisplayMatchesPanel:void valueChanged(javax.swing.event.ListSelectionEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.neural.rnn.TopNGramRecord:int countTreeHelper(edu.stanford.nlp.trees.Tree,int,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.neural.rnn.TopNGramRecord:void countTree(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.neural.rnn.TopNGramRecord:int countTreeHelper(edu.stanford.nlp.trees.Tree,int,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseSimWordAvgDepGrammar:void <init>(edu.stanford.nlp.parser.lexparser.TreebankLangParserParams,boolean,boolean,boolean,boolean,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams$1:edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar formResult()"
        ]
    },
    "edu.stanford.nlp.trees.ModCollinsHeadFinder:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.common.NoPunctuationHeadFinder:void <init>()",
            "edu.stanford.nlp.parser.lexparser.TreeBinarizer:void main(java.lang.String[])",
            "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader:void writeTabSep(java.io.PrintWriter,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CollectionValuedMap)",
            "edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer:void <init>(int,boolean,int,boolean)",
            "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader:void writeTabSep(java.io.PrintWriter,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CollectionValuedMap)",
            "edu.stanford.nlp.trees.tregex.gui.Preferences:edu.stanford.nlp.trees.HeadFinder lookupHeadFinder(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.PennTreebankLanguagePack:edu.stanford.nlp.trees.HeadFinder headFinder()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void <init>(edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.parser.lexparser.Lexicon,edu.stanford.nlp.parser.common.ParserGrammar,java.util.function.Function)",
            "edu.stanford.nlp.trees.TreePrint:void <init>(java.lang.String,java.lang.String,edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void processResults(edu.stanford.nlp.parser.common.ParserQuery,edu.stanford.nlp.trees.Tree,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,edu.stanford.nlp.trees.TreePrint)",
            "edu.stanford.nlp.trees.TreePrint:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.EnglishPTBTreebankCorrector:void <init>()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.TaggingEval:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.Options:void <init>()",
            "edu.stanford.nlp.international.Language:void <clinit>()",
            "edu.stanford.nlp.international.Language$1:void <init>()",
            "edu.stanford.nlp.parser.metrics.UnlabeledAttachmentEval:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:java.util.Set getEnglishSplitCategories(java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.SemanticHeadFinder:void <init>(edu.stanford.nlp.trees.TreebankLanguagePack,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.SemanticHeadFinder:void <init>()",
            "edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams:edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()",
            "edu.stanford.nlp.trees.PennTreebankLanguagePack:edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()",
            "edu.stanford.nlp.trees.SemanticHeadFinder:void <init>(boolean)"
        ]
    },
    "edu.stanford.nlp.international.morph.MorphoFeatures:java.lang.String getTag(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.international.french.FrenchMorphoFeatureSpecification:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void train(java.util.Collection,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.international.arabic.ArabicMorphoFeatureSpecification:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.FactoredLexicon:java.util.List treebankToLexiconEvents(java.util.List,edu.stanford.nlp.parser.lexparser.FactoredLexicon)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:java.util.List getTuningSet(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.FactoredLexicon,edu.stanford.nlp.parser.lexparser.TreebankLangParserParams)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.FactoredLexicon:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,int,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.time.TimeFormatter$TimeZoneIdComponent:edu.stanford.nlp.time.SUTime$Temporal updateTemporal(edu.stanford.nlp.time.SUTime$Temporal,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.gui.FileTreeModel:boolean isEmpty()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.FilePanel:boolean isEmpty()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.FilePanel:void setActiveTreebanksFromParent(java.util.List,edu.stanford.nlp.trees.tregex.gui.FileTreeNode)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.FilePanel:void setActiveTreebanksFromParent(java.util.List,edu.stanford.nlp.trees.tregex.gui.FileTreeNode)",
            "edu.stanford.nlp.trees.tregex.gui.FilePanel:java.util.List getActiveTreebanks()"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void correctSubjPass(edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void correctDependencies(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void collapseDependencies(java.util.List,boolean,edu.stanford.nlp.trees.GrammaticalStructure$Extras)"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void process3WP(edu.stanford.nlp.semgraph.SemanticGraph,java.util.HashMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void processMultiwordPreps(edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void processComplex2WP(edu.stanford.nlp.semgraph.SemanticGraph,java.util.HashMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void processMultiwordPreps(edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLPServer$SemgrexHandler:void lambda$null$29(edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher,java.lang.String,edu.stanford.nlp.pipeline.JSONOutputter$Writer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void expandPrepConjunctions(edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void collapseDependencies(java.util.List,boolean,edu.stanford.nlp.trees.GrammaticalStructure$Extras)"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void addConjInformation(edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void collapseDependencies(java.util.List,boolean,edu.stanford.nlp.trees.GrammaticalStructure$Extras)"
        ]
    },
    "edu.stanford.nlp.naturalli.NaturalLogicAnnotator:void annotateUnaries(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.NaturalLogicAnnotator:void doOneSentence(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void expandPPConjunctions(edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void collapseDependencies(java.util.List,boolean,edu.stanford.nlp.trees.GrammaticalStructure$Extras)"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void processSimple2WP(edu.stanford.nlp.semgraph.SemanticGraph,java.util.HashMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void processMultiwordPreps(edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void addCaseMarkerInformation(edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void collapseDependencies(java.util.List,boolean,edu.stanford.nlp.trees.GrammaticalStructure$Extras)"
        ]
    },
    "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void correctWHAttachment(edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void postProcessDependencies(java.util.List)"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void correctWHAttachment(edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void postProcessDependencies(java.util.List)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TaggerExperiments:void hashHistories()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TaggerExperiments:void <init>(edu.stanford.nlp.tagger.maxent.TaggerConfig,edu.stanford.nlp.tagger.maxent.MaxentTagger)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:boolean useNewBetas(boolean,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.ThreeDimensionalMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:boolean recalculateBetas(boolean)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recalculateMergedBetas(java.util.Map)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:void visitTree(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.DiskTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.trees.TransformingTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.trees.CompositeTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.trees.MemoryTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)"
        ]
    },
    "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:java.util.Collection getInverseArcs(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:java.util.Collection getInverseImages(edu.stanford.nlp.fsm.FastExactAutomatonMinimizer$Split)"
        ]
    },
    "edu.stanford.nlp.wordseg.TagAffixDetector:java.lang.String checkDic(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.wordseg.Gale2007ChineseSegmenterFeatureFactory:java.util.Collection featuresCpC(edu.stanford.nlp.util.PaddedList,int)",
            "edu.stanford.nlp.wordseg.ChineseSegmenterFeatureFactory:java.util.Collection featuresCpC(edu.stanford.nlp.util.PaddedList,int)"
        ]
    },
    "edu.stanford.nlp.fsm.TransducerGraph:boolean canAddPath(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.fsm.TransducerGraph:double getOutputOfPathInGraph(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.TransducerGraph:java.util.List getPathOutputs(java.util.List)",
            "edu.stanford.nlp.fsm.TransducerGraph:java.util.Map samplePathsFromGraph(int)",
            "edu.stanford.nlp.fsm.TransducerGraph:void printPathOutputs(java.util.List,edu.stanford.nlp.fsm.TransducerGraph,boolean)",
            "edu.stanford.nlp.fsm.TransducerGraph:boolean testGraphPaths(edu.stanford.nlp.fsm.TransducerGraph,edu.stanford.nlp.fsm.TransducerGraph,int)"
        ]
    },
    "edu.stanford.nlp.fsm.TransducerGraph:void addOnePathToGraph(java.util.List,double,int,edu.stanford.nlp.fsm.TransducerGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.TransducerGraph:edu.stanford.nlp.fsm.TransducerGraph createGraphFromPaths(edu.stanford.nlp.stats.ClassicCounter,int)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Mention:void process(edu.stanford.nlp.hcoref.data.Dictionaries,edu.stanford.nlp.hcoref.data.Semantics)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Mention:void process(edu.stanford.nlp.hcoref.data.Dictionaries,edu.stanford.nlp.hcoref.data.Semantics,edu.stanford.nlp.classify.LogisticClassifier)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void expandStop(edu.stanford.nlp.parser.lexparser.IntDependency,short,double,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void readObject(java.io.ObjectInputStream)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void readData(java.io.BufferedReader)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void expandDependency(edu.stanford.nlp.parser.lexparser.IntDependency,double)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void expandArg(edu.stanford.nlp.parser.lexparser.IntDependency,short,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void readObject(java.io.ObjectInputStream)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void readData(java.io.BufferedReader)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void expandDependency(edu.stanford.nlp.parser.lexparser.IntDependency,double)"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP:edu.stanford.nlp.pipeline.Annotator getExistingAnnotator(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.pipeline.Annotator getParser()",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.pipeline.Annotator getParser()",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:edu.stanford.nlp.pipeline.Annotator getParser()"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP:void construct(java.util.Properties,boolean,edu.stanford.nlp.pipeline.AnnotatorImplementations)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void <init>(java.lang.String,boolean)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void <init>(java.util.Properties,boolean)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void processResults(edu.stanford.nlp.parser.common.ParserQuery,edu.stanford.nlp.trees.Tree,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,edu.stanford.nlp.trees.TreePrint)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:double testOnTreebank(edu.stanford.nlp.trees.Treebank)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void saveModel(java.io.DataOutputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void saveModel(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.UnaryGrammar:void init()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.UnaryGrammar:void <init>(edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.parser.lexparser.UnaryGrammar:void readObject(java.io.ObjectInputStream)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.UnaryGrammar:void closeRulesUnderMax(edu.stanford.nlp.parser.lexparser.UnaryRule)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.UnaryGrammar:void addRule(edu.stanford.nlp.parser.lexparser.UnaryRule)"
        ]
    },
    "edu.stanford.nlp.time.SUTimeMain:void processTempEval2Doc(edu.stanford.nlp.pipeline.AnnotationPipeline,edu.stanford.nlp.pipeline.Annotation,java.util.Map,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:void processTempEval2Tab(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.scoref.ClusteringCorefSystem:void runCoref(edu.stanford.nlp.hcoref.data.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.StatisticalCorefSystem:void annotate(edu.stanford.nlp.pipeline.Annotation,boolean)",
            "edu.stanford.nlp.scoref.StatisticalCorefSystem$1:void process(int,edu.stanford.nlp.hcoref.data.Document)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.FileTreeModel:java.lang.Object getChild(java.lang.Object,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:edu.stanford.nlp.trees.GrammaticalRelation getGrammaticalRelation(int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.Preprocessor:void preprocess(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,edu.stanford.nlp.classify.LogisticClassifier,edu.stanford.nlp.trees.HeadFinder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.CorefDocMaker:edu.stanford.nlp.hcoref.data.Document makeDocument(edu.stanford.nlp.hcoref.data.InputDoc)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:double scoreBinarizedTree(edu.stanford.nlp.trees.Tree,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:double scoreBinarizedTree(edu.stanford.nlp.trees.Tree,int)",
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:edu.stanford.nlp.trees.Tree scoreNonBinarizedTree(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:double validateBinarizedTree(edu.stanford.nlp.trees.Tree,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:double validateBinarizedTree(edu.stanford.nlp.trees.Tree,int)"
        ]
    },
    "edu.stanford.nlp.dcoref.Rules:boolean entitySameSpeaker(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries,java.util.Set,edu.stanford.nlp.dcoref.Semantics)",
            "edu.stanford.nlp.dcoref.Rules:boolean entityPersonDisagree(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:void attachStrandedNodes(edu.stanford.nlp.trees.TreeGraphNode,edu.stanford.nlp.trees.TreeGraphNode,boolean,java.util.function.Predicate,java.util.function.Predicate,edu.stanford.nlp.graph.DirectedMultiGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:void attachStrandedNodes(edu.stanford.nlp.trees.TreeGraphNode,edu.stanford.nlp.trees.TreeGraphNode,boolean,java.util.function.Predicate,java.util.function.Predicate,edu.stanford.nlp.graph.DirectedMultiGraph)",
            "edu.stanford.nlp.trees.GrammaticalStructure:void <init>(edu.stanford.nlp.trees.Tree,java.util.Collection,java.util.concurrent.locks.Lock,edu.stanford.nlp.trees.TreeTransformer,edu.stanford.nlp.trees.HeadFinder,java.util.function.Predicate,java.util.function.Predicate)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:boolean containsEdge(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void addRef(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Collection getDependencyBlanket(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Collection)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void addExtraNSubj(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.semgraph.SemanticGraph:boolean containsEdge(edu.stanford.nlp.semgraph.SemanticGraphEdge)"
        ]
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph:boolean isNeighbor(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:int initialBetasAndLexicon(edu.stanford.nlp.trees.Tree,int,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void initialBetasAndLexicon()",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:int initialBetasAndLexicon(edu.stanford.nlp.trees.Tree,int,double)"
        ]
    },
    "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.Document:void findTwinMentions(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Document:void <init>(edu.stanford.nlp.pipeline.Annotation,java.util.List,java.util.List,edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.Set getNeighbors(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.graph.DijkstraShortestPath:java.util.List getShortestPath(edu.stanford.nlp.graph.Graph,java.lang.Object,java.lang.Object,boolean)",
            "edu.stanford.nlp.graph.ConnectedComponents:java.util.Set bfs(java.util.LinkedList,edu.stanford.nlp.graph.Graph,java.util.List)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Set getParents(edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$SIBLING_RELATION$1:void advance()",
            "edu.stanford.nlp.semgraph.SemanticGraph:boolean matchPatternToVertex(java.lang.String,edu.stanford.nlp.ling.IndexedWord,boolean)",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.List getParentList(edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.semgraph.SemanticGraph:boolean matchPatternToVertex(java.lang.String,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.trees.ud.CoNLLUDocumentWriter:java.lang.String printSemanticGraph(edu.stanford.nlp.semgraph.SemanticGraph,boolean)",
            "edu.stanford.nlp.semgraph.SemanticGraph:edu.stanford.nlp.ling.IndexedWord getCommonAncestor(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.semgraph.SemanticGraph:boolean attachedNegatedVerb(edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.semgraph.SemanticGraph:int commonAncestor(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.semgraph.SemanticGraph:int isAncestor(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$SIBLING_RELATION:boolean satisfies(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:void analyzeNode(edu.stanford.nlp.trees.TreeGraphNode,edu.stanford.nlp.trees.TreeGraphNode,java.util.Collection,edu.stanford.nlp.trees.HeadFinder,java.util.function.Predicate,java.util.function.Predicate,edu.stanford.nlp.graph.DirectedMultiGraph,edu.stanford.nlp.graph.DirectedMultiGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:void <init>(edu.stanford.nlp.trees.Tree,java.util.Collection,java.util.concurrent.locks.Lock,edu.stanford.nlp.trees.TreeTransformer,edu.stanford.nlp.trees.HeadFinder,java.util.function.Predicate,java.util.function.Predicate)",
            "edu.stanford.nlp.trees.GrammaticalStructure:void analyzeNode(edu.stanford.nlp.trees.TreeGraphNode,edu.stanford.nlp.trees.TreeGraphNode,java.util.Collection,edu.stanford.nlp.trees.HeadFinder,java.util.function.Predicate,java.util.function.Predicate,edu.stanford.nlp.graph.DirectedMultiGraph,edu.stanford.nlp.graph.DirectedMultiGraph)"
        ]
    },
    "edu.stanford.nlp.trees.international.spanish.SpanishTreeNormalizer:edu.stanford.nlp.trees.Tree expandConmigo(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.spanish.SpanishTreeNormalizer:edu.stanford.nlp.trees.Tree normalizeWholeTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreeFactory)"
        ]
    },
    "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:boolean checkPleonastic(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexPattern)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:boolean isPleonastic(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.dcoref.MentionExtractor:void findTreePattern(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexPattern,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.MentionExtractor:void findTreePattern(edu.stanford.nlp.trees.Tree,java.lang.String,java.util.Set)",
            "edu.stanford.nlp.dcoref.MentionExtractor:void findAppositions(edu.stanford.nlp.trees.Tree,java.util.Set)",
            "edu.stanford.nlp.dcoref.MentionExtractor:void findRelativePronouns(edu.stanford.nlp.trees.Tree,java.util.Set)",
            "edu.stanford.nlp.dcoref.MentionExtractor:void findPredicateNominatives(edu.stanford.nlp.trees.Tree,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.trees.UniversalSemanticHeadFinder:edu.stanford.nlp.trees.Tree determineNonTrivialHead(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.AbstractCollinsHeadFinder:edu.stanford.nlp.trees.Tree determineHead(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams$AddRelativeNodeFunction:java.lang.String apply(edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams$AddRelativeNodeFunction:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SpanishTreebankParserParams$MarkConjTypeFunction:java.lang.String apply(edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SpanishTreebankParserParams$MarkConjTypeFunction:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.dcoref.Mention:void setNumber(edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Mention:void process(edu.stanford.nlp.dcoref.Dictionaries,edu.stanford.nlp.dcoref.Semantics,edu.stanford.nlp.dcoref.MentionExtractor)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams$AnnotatePunctuationFunction:java.lang.String apply(edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams$AnnotatePunctuationFunction:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.trees.international.spanish.SpanishTreeNormalizer:edu.stanford.nlp.trees.Tree expandCliticPronounsInner(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexPattern)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.spanish.SpanishTreeNormalizer:edu.stanford.nlp.trees.Tree expandCliticPronouns(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.international.arabic.ArabicTreeNormalizer:edu.stanford.nlp.trees.Tree normalizeWholeTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreeFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.PennTreeReader:edu.stanford.nlp.trees.Tree readTree()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams$AddRelativeNodeRegexFunction:java.lang.String apply(edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams$AddRelativeNodeRegexFunction:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams$AddEquivalencedNodeFunctionVar:java.lang.String apply(edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams$AddEquivalencedNodeFunctionVar:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams$AnnotatePunctuationFunction:java.lang.String apply(edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams$AnnotatePunctuationFunction:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams$AddEquivalencedConjNode:java.lang.String apply(edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams$AddEquivalencedConjNode:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.TregexPattern$TRegexTreeVisitor:void visitTree(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.DiskTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.trees.MemoryTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)"
        ]
    },
    "edu.stanford.nlp.trees.DateTreeTransformer:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.CoordinationTransformer:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.hcoref.md.CorefMentionFinder:boolean checkPleonastic(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexPattern)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:boolean isPleonasticDebug(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.trees.Tree,java.lang.StringBuilder)",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:boolean isPleonastic(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams$AddEquivalencedNodeFunction:java.lang.String apply(edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams$AddEquivalencedNodeFunction:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams$AnnotatePunctuationFunction2:java.lang.String apply(edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams$AnnotatePunctuationFunction2:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams$AddRelativeNodeFunction:java.lang.String apply(edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams$AddRelativeNodeFunction:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.trees.SemanticHeadFinder:edu.stanford.nlp.trees.Tree determineNonTrivialHead(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.AbstractCollinsHeadFinder:edu.stanford.nlp.trees.Tree determineHead(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.Dependencies:edu.stanford.nlp.stats.Counter getTypedDependencyChains(java.util.List,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:int inDegree(edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.List getVerticesWithoutParents()",
            "edu.stanford.nlp.naturalli.ForwardEntailerSearchProblem:java.util.List searchImplementation()"
        ]
    },
    "edu.stanford.nlp.pipeline.CustomAnnotationSerializer:edu.stanford.nlp.util.Pair read(java.io.InputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.CustomAnnotationSerializer:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.scoref.DocumentExamples extract(int,edu.stanford.nlp.hcoref.data.Document,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.FeatureExtractorRunner:void process(int,edu.stanford.nlp.hcoref.data.Document)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.common.StringDictionary:int get(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntityMention:void detectHeadToken(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntity:java.lang.String toXml(int)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceToken:int[] extractSuffixes(java.lang.String)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceToken:void loadProximityClasses(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceToken:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceSentenceSegmenter:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceToken wordTokenToAceToken(edu.stanford.nlp.ie.machinereading.domains.ace.reader.RobustTokenizer$WordToken,int)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatcher$BranchStates:int newBid(int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates:void <init>(edu.stanford.nlp.ling.tokensregex.SequenceMatcher,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void iterateExtractApply(java.util.Map,java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void iterateExtractApply()",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass runNineYards(edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass,java.util.Properties,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.dcoref.Document:java.util.List getGoldLinks()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void printLogs(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Document,int)"
        ]
    },
    "edu.stanford.nlp.util.logging.OutputHandler:void updateTracks(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.OutputHandler:java.util.List handle(edu.stanford.nlp.util.logging.Redwood$Record)",
            "edu.stanford.nlp.util.logging.OutputHandler:java.util.List signalStartTrack(edu.stanford.nlp.util.logging.Redwood$Record)"
        ]
    },
    "edu.stanford.nlp.util.logging.OutputHandler:java.util.List signalEndTrack(int,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood$RecordHandlerTree:void process(edu.stanford.nlp.util.logging.Redwood$Record,edu.stanford.nlp.util.logging.Redwood$MessageType,int,long)"
        ]
    },
    "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String printConllOutput(edu.stanford.nlp.hcoref.data.Document,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String printConllOutput(edu.stanford.nlp.hcoref.data.Document,boolean)",
            "edu.stanford.nlp.hcoref.CorefSystem:java.util.Map coref(edu.stanford.nlp.hcoref.data.Document,java.lang.StringBuilder[])",
            "edu.stanford.nlp.scoref.StatisticalCorefSystem$1:void process(int,edu.stanford.nlp.hcoref.data.Document)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.CtbDict:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.CtbDict:edu.stanford.nlp.tagger.maxent.CtbDict getInstance()"
        ]
    },
    "edu.stanford.nlp.dcoref.ScorerBCubed:void calculatePrecision(edu.stanford.nlp.dcoref.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon:java.lang.String sampleFrom(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon:java.lang.String sampleFrom()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,int,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseSimWordAvgDepGrammar:double probSimilarWordAvg(edu.stanford.nlp.parser.lexparser.IntDependency)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:double probTB(edu.stanford.nlp.parser.lexparser.IntDependency)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:boolean matches()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher:boolean find()",
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:boolean matchChild()",
            "edu.stanford.nlp.pipeline.StanfordCoreNLPServer$SemgrexHandler:java.lang.Boolean lambda$null$28(edu.stanford.nlp.semgraph.semgrex.SemgrexPattern,edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.sentiment.AbstractEvaluate:void eval(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.AbstractEvaluate:void eval(java.util.List)"
        ]
    },
    "edu.stanford.nlp.wordseg.CorpusChar:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.wordseg.TagAffixDetector:void <init>(edu.stanford.nlp.sequences.SeqClassifierFlags)"
        ]
    },
    "edu.stanford.nlp.international.arabic.process.ArabicLexer:java.lang.Object getNext(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.arabic.process.ArabicLexer:java.lang.Object next()"
        ]
    },
    "edu.stanford.nlp.util.DeltaCollectionValuedMap:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.data.Mention:boolean isDemonym(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Set getChildren(edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$SIBLING_RELATION$1:void advance()",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:void tabuDescendantsHelper(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Set,java.util.Collection,java.util.Collection,edu.stanford.nlp.semgraph.IndexedWordUnaryPred)",
            "edu.stanford.nlp.dcoref.Mention:int getModal(edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.semgraph.SemanticGraph:void descendantsHelper(edu.stanford.nlp.ling.IndexedWord,java.util.Set)",
            "edu.stanford.nlp.patterns.dep.ExtractPhraseFromPattern:void descendantsWithReln(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.lang.String,java.util.List,java.util.List)",
            "edu.stanford.nlp.hcoref.data.Mention:int getNegation(edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.hcoref.data.Mention:int getModal(edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Set getSubgraphVertices(edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.patterns.dep.ExtractPhraseFromPattern:void descendantsHelper(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Set,java.util.List,java.util.List,java.util.List,boolean,java.util.function.Function,edu.stanford.nlp.util.CollectionValuedMap)",
            "edu.stanford.nlp.patterns.dep.ExtractPhraseFromPattern:boolean checkIfSatisfiedMaxDepth(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.util.IntPair)",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Collection getSiblings(edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.semgraph.SemanticGraph:boolean matchPatternToVertex(java.lang.String,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.dcoref.Mention:int getNegation(edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.List getChildList(edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.semgraph.SemanticGraph:boolean isDagHelper(edu.stanford.nlp.ling.IndexedWord,java.util.Set,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:edu.stanford.nlp.trees.Tree extractBestParse(int,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:edu.stanford.nlp.trees.Tree extractBestParse(int,int,int)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:edu.stanford.nlp.trees.Tree extractBestParse(java.lang.String,int,int)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Value doEvaluation(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$SimpleCachedExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:void <init>(java.util.Map,boolean,java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue simplifyNoTypeConversion(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue evaluateNoTypeConversion(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Value doEvaluation(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue CompositeFieldValue(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.hcoref.CorefPrinter:void linkDistanceAnalysis(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.CorefPrinter:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.GermanUnknownWordModel:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.BaseUnknownWordModel:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,int,double,double,double,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.TrueCaseAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.TregexParser:edu.stanford.nlp.trees.tregex.TregexPattern Relation()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.TregexParser:edu.stanford.nlp.trees.tregex.TregexPattern Child()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation:edu.stanford.nlp.trees.tregex.Relation getRelation(java.lang.String,java.lang.String,java.util.function.Function,edu.stanford.nlp.trees.HeadFinder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.TregexParser:edu.stanford.nlp.trees.tregex.TregexPattern Relation()",
            "edu.stanford.nlp.trees.tregex.Relation:edu.stanford.nlp.trees.tregex.Relation getRelation(java.lang.String,java.util.function.Function,edu.stanford.nlp.trees.HeadFinder)",
            "edu.stanford.nlp.trees.tregex.Relation:edu.stanford.nlp.trees.tregex.TregexPattern constructMultiRelation(java.lang.String,java.util.List,java.util.function.Function,edu.stanford.nlp.trees.HeadFinder)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Document:java.util.List getGoldLinks()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.MapList:void add(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Map mapTreeToSg(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.util.MapList:void add(java.lang.Object,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.Redwood:void attemptThreadControl(long,java.lang.Runnable)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood:void finishThread()",
            "edu.stanford.nlp.util.logging.Redwood:void log(java.lang.Object[])",
            "edu.stanford.nlp.util.logging.Redwood:void startTrack(java.lang.Object[])",
            "edu.stanford.nlp.util.logging.Redwood:void endTrack(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$TimeIndex:int addToIndexTemporalExpr(edu.stanford.nlp.time.TimeExpression)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.BinaryRule:void <init>(java.lang.String,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BinaryGrammar:void readData(java.io.BufferedReader)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void initRulesWithWord()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void finishTraining()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ExhaustiveDependencyParser:boolean parse(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TwinScorer:boolean parse(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:boolean parseInternal(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.util.DeltaIndex:int addToIndex(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:boolean parse(java.util.List)",
            "edu.stanford.nlp.util.DeltaIndex:int indexOf(java.lang.Object,boolean)",
            "edu.stanford.nlp.parser.lexparser.ExhaustiveDependencyParser:boolean parse(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.IntTaggedWord:void <init>(java.lang.String,java.lang.String,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void buildStateIndex()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void extract(java.util.Collection,double,java.util.Collection,double)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.AbstractDependencyGrammar:void initTagBins()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.AbstractDependencyGrammar:void <init>(edu.stanford.nlp.trees.TreebankLanguagePack,edu.stanford.nlp.parser.lexparser.TagProjection,boolean,boolean,boolean,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:void populateTagsToBaseTags(edu.stanford.nlp.trees.TreebankLanguagePack)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:int getBaseTag(int,edu.stanford.nlp.trees.TreebankLanguagePack)"
        ]
    },
    "edu.stanford.nlp.util.HashIndex:int indexOf(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:boolean parse(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:boolean parse(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.TwinScorer:boolean parse(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:boolean parseInternal(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:void parsePCFG(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.ProjectionScorer:boolean parse(java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:java.util.Iterator ruleIteratorByWord(java.lang.String,int,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:java.util.Iterator ruleIteratorByWord(java.lang.String,int,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:void initRulesWithWord()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void readObject(java.io.ObjectInputStream)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void readData(java.io.BufferedReader)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void finishTraining()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.IntTaggedWord:void <init>(java.lang.String,java.lang.String,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:int recountInside(edu.stanford.nlp.trees.Tree,boolean,int,java.util.IdentityHashMap)",
            "edu.stanford.nlp.parser.lexparser.ChineseUnknownWordModelTrainer:void train(edu.stanford.nlp.ling.TaggedWord,int,double)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(edu.stanford.nlp.ling.TaggedWord,int,double)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:void initializeChart(edu.stanford.nlp.parser.lexparser.Lattice)",
            "edu.stanford.nlp.parser.lexparser.FrenchUnknownWordModelTrainer:void train(edu.stanford.nlp.ling.TaggedWord,int,double)",
            "edu.stanford.nlp.parser.lexparser.EnglishUnknownWordModelTrainer:void train(edu.stanford.nlp.ling.TaggedWord,int,double)",
            "edu.stanford.nlp.parser.lexparser.SpanishUnknownWordModelTrainer:void train(edu.stanford.nlp.ling.TaggedWord,int,double)",
            "edu.stanford.nlp.parser.lexparser.IntTaggedWord:void <init>(java.lang.String,char,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.parser.lexparser.ArabicUnknownWordModelTrainer:void train(edu.stanford.nlp.ling.TaggedWord,int,double)",
            "edu.stanford.nlp.parser.lexparser.BaseUnknownWordModelTrainer:void train(edu.stanford.nlp.ling.TaggedWord,int,double)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:edu.stanford.nlp.trees.Tree extractBestParse(int,int,int)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:void initializeChart(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void readData(java.io.BufferedReader)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:java.util.List listToEvents(java.util.List)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$TimeIndex:int addToIndexTemporal(edu.stanford.nlp.time.SUTime$Temporal)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Temporal:int getTid(edu.stanford.nlp.time.SUTime$TimeIndex)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:java.util.Iterator ruleIteratorByWord(java.lang.String,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.TTags:int add(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TTags:void markClosed(java.lang.String)",
            "edu.stanford.nlp.tagger.maxent.TTags:void setOpenClassTags(java.lang.String[])",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:int addTag(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:void pruneNodeFeatureIndices(int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void makeAnswerArraysAndTagIndex(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.HistoryTable:int add(edu.stanford.nlp.tagger.maxent.History)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TaggerExperiments:void <init>(edu.stanford.nlp.tagger.maxent.TaggerConfig,edu.stanford.nlp.tagger.maxent.MaxentTagger)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:short tagProject(short)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:double probTB(edu.stanford.nlp.parser.lexparser.IntDependency)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void expandArg(edu.stanford.nlp.parser.lexparser.IntDependency,short,double)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$TimeIndex:int addToIndexTemporalFunc(edu.stanford.nlp.time.SUTime$Temporal)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Temporal:int getTfid(edu.stanford.nlp.time.SUTime$TimeIndex)"
        ]
    },
    "edu.stanford.nlp.classify.RVFDataset:void addLabel(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.RVFDataset:void add(edu.stanford.nlp.ling.Datum)",
            "edu.stanford.nlp.classify.RVFDataset:void add(edu.stanford.nlp.ling.Datum,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.classify.RVFDataset:void selectFeaturesFromSet(java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.BinaryGrammarExtractor:void tallyInternalNode(edu.stanford.nlp.trees.Tree,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:void tallyLocalTree(edu.stanford.nlp.trees.Tree,double)"
        ]
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph:boolean removeVertices(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:boolean removeVertex(edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ForwardEntailerSearchProblem:void lambda$searchImplementation$15(edu.stanford.nlp.semgraph.SemanticGraph,java.util.List,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void stripAuxMark(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.OpenIE:edu.stanford.nlp.semgraph.SemanticGraph canonicalizeCoref(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Map)",
            "edu.stanford.nlp.naturalli.Util:void stripPrepCases(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void simpleClause(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraphEdge)",
            "edu.stanford.nlp.naturalli.Util:java.util.List cleanTree(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:void killNonRooted(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.ForwardEntailerSearchProblem:edu.stanford.nlp.util.Pair lambda$searchImplementation$16(edu.stanford.nlp.naturalli.ForwardEntailerSearchProblem$SearchState,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:void replaceNode(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceToken:boolean isLocation(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceToken:boolean isLastName(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceToken:boolean isFirstName(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.StringUtils:java.util.Map argsToMap(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDomReader:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEventMention parseEventMention(org.w3c.dom.Node,edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDomReader:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument parseDocument(java.io.File)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDomReader:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceRelationMention parseRelationMention(org.w3c.dom.Node,edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDomReader:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument parseDocument(java.io.File)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapNodePatternTrigger:void <init>(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.CoreMapNodePatternTrigger:void <init>(edu.stanford.nlp.ling.tokensregex.SequencePattern[])",
            "edu.stanford.nlp.ling.tokensregex.TokenSequencePattern:edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher getMultiPatternMatcher(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:void averageScoredModels(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:void trainModel(java.lang.String,edu.stanford.nlp.tagger.common.Tagger,java.util.Random,java.util.List,java.util.List,edu.stanford.nlp.trees.Treebank,int,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:boolean matches()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:boolean matchChild()"
        ]
    },
    "edu.stanford.nlp.patterns.surface.CreatePatterns$CreatePatternsThread:java.lang.Object call()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.Preprocessor:void findTwinMentions(edu.stanford.nlp.hcoref.data.Document,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.Preprocessor:void initializeMentions(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,edu.stanford.nlp.classify.LogisticClassifier,edu.stanford.nlp.trees.HeadFinder)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.HistoryTable:int getIndex(edu.stanford.nlp.tagger.maxent.History)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.LinearClassifier:double scoreOfRVFDatum(edu.stanford.nlp.ling.RVFDatum,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifier:double scoreOf(edu.stanford.nlp.ling.Datum,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:void dropFeaturesBelowThreshold(double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void train(java.util.Collection,edu.stanford.nlp.sequences.DocumentReaderAndWriter)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.Map topWeights()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.Dataset:void addFeatures(java.util.Collection,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.Dataset:void add(java.util.Collection,java.lang.Object,boolean)",
            "edu.stanford.nlp.classify.Dataset:void addFeatures(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.classify.Dataset:void applyFeatureCountThreshold(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.classify.Dataset getDataset(java.util.Collection,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.classify.Dataset getBiasedDataset(edu.stanford.nlp.objectbank.ObjectBank,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.classify.Dataset getDataset(edu.stanford.nlp.classify.Dataset,edu.stanford.nlp.util.Index)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFCliqueTree:double condLogProbGivenNext(int,java.lang.Object,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFCliqueTree:edu.stanford.nlp.stats.Counter condLogProbsGivenNext(int,java.lang.Object[])",
            "edu.stanford.nlp.ie.crf.CRFCliqueTree:double condProbGivenNext(int,java.lang.Object,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.ie.crf.CRFDatum makeDatum(java.util.List,int,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void printLabelValue(java.util.List)",
            "edu.stanford.nlp.ie.crf.CRFFeatureExporter:java.lang.String getFeatureString(java.util.List)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.util.Triple documentToDataAndLabels(java.util.List)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void makeAnswerArraysAndTagIndex(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFNonLinearSecondOrderLogConditionalObjectiveFunction:void calculate(double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.AbstractCachingDiffFunction:void ensure(double[])"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFCliqueTree:int[] objectArrayToIntArray(java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFCliqueTree:double condLogProbGivenPrevious(int,java.lang.Object,java.lang.Object[])",
            "edu.stanford.nlp.ie.crf.CRFCliqueTree:double condLogProbGivenNext(int,java.lang.Object,java.lang.Object[])",
            "edu.stanford.nlp.ie.crf.CRFCliqueTree:double logProb(int,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.classify.Dataset getDataset(edu.stanford.nlp.classify.Dataset,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void train(java.util.Collection,edu.stanford.nlp.sequences.DocumentReaderAndWriter)"
        ]
    },
    "edu.stanford.nlp.classify.GeneralizedExpectationObjectiveFunction:void updateDerivative(edu.stanford.nlp.ling.Datum,double[],edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.GeneralizedExpectationObjectiveFunction:void calculate(double[])"
        ]
    },
    "edu.stanford.nlp.classify.LogisticClassifier:edu.stanford.nlp.stats.Counter justificationOf(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.LogisticClassifier:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Pair:void save(java.io.DataOutputStream)",
            "edu.stanford.nlp.patterns.ConstantsAndVariables$ScorePhraseMeasures:int compareTo(java.lang.Object)",
            "edu.stanford.nlp.patterns.surface.Token:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:void printClassifier(edu.stanford.nlp.classify.Classifier)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter scoresOf(edu.stanford.nlp.ling.Datum,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:void <init>(edu.stanford.nlp.parser.lexparser.BinaryGrammar,edu.stanford.nlp.parser.lexparser.UnaryGrammar,edu.stanford.nlp.parser.lexparser.Lexicon,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:void <init>(edu.stanford.nlp.parser.lexparser.LexicalizedParser)",
            "edu.stanford.nlp.parser.lexparser.IterativeCKYPCFGParser:void <init>(edu.stanford.nlp.parser.lexparser.BinaryGrammar,edu.stanford.nlp.parser.lexparser.UnaryGrammar,edu.stanford.nlp.parser.lexparser.Lexicon,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFNonLinearLogConditionalObjectiveFunction:void empiricalCounts()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFNonLinearLogConditionalObjectiveFunction:void <init>(int[][][][],int[][],int,edu.stanford.nlp.util.Index,java.util.List,int[],edu.stanford.nlp.sequences.SeqClassifierFlags,int,int,double[][][][])"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:int[][][] transformDocData(int[][][])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:boolean parse(edu.stanford.nlp.parser.lexparser.Lattice)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:boolean parse(edu.stanford.nlp.parser.lexparser.Lattice)"
        ]
    },
    "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$State:void <init>(edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem,edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraphEdge,int,edu.stanford.nlp.semgraph.SemanticGraphEdge,java.util.function.Consumer,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$3:java.util.Optional applyTo(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$State,edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraphEdge)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void search(edu.stanford.nlp.ling.IndexedWord,java.util.function.Predicate,edu.stanford.nlp.classify.Classifier,java.util.Map,java.util.function.Function,java.util.Collection,int)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$6:java.util.Optional applyTo(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$State,edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraphEdge)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$4:java.util.Optional applyTo(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$State,edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraphEdge)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$5:java.util.Optional applyTo(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$State,edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraphEdge)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFloatFunction:void empiricalCounts(int[][][][],int[][])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFloatFunction:void <init>(int[][][][],int[][],edu.stanford.nlp.util.Index,int,edu.stanford.nlp.util.Index,java.util.List,int[],int,java.lang.String,double)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:double[][] parseMatrix(java.lang.String[],edu.stanford.nlp.util.Index,int,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifierNoisyLabel:double[][] readErrorMatrix(java.lang.String,edu.stanford.nlp.util.Index,boolean)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:double[][] parseMatrix(java.lang.String[],edu.stanford.nlp.util.Index,int,boolean)"
        ]
    },
    "edu.stanford.nlp.classify.LogConditionalObjectiveFunction:void calculateCLiterable(double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LogConditionalObjectiveFunction:void calculateCL(double[])"
        ]
    },
    "edu.stanford.nlp.classify.Dataset:void selectFeatures(int,double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.Dataset:void selectFeaturesBinaryInformationGain(int)"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:void finalizeCounts()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:double score()",
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:double score(java.io.BufferedReader,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.stats.MultiClassChunkEvalStats:void finalizeCounts()",
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:double score(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:double score(java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ExhaustiveDependencyParser:edu.stanford.nlp.trees.Tree getBestParse()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:edu.stanford.nlp.trees.Tree getBestDependencyParse(boolean)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:boolean parseInternal(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ExhaustiveDependencyParser:double getBestScore()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.AbstractEval$ScoreEval:void recordScore(edu.stanford.nlp.parser.KBestViterbiParser,java.io.PrintWriter)",
            "edu.stanford.nlp.parser.lexparser.ExhaustiveDependencyParser:boolean hasParse()"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:java.util.Set getLabelIndices(java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifier:int getFeatureCount(java.util.Set,double,boolean)",
            "edu.stanford.nlp.classify.LinearClassifier:java.util.List getTopFeatures(java.util.Set,double,boolean,int,boolean)"
        ]
    },
    "edu.stanford.nlp.classify.LogisticClassifier:edu.stanford.nlp.stats.Counter justificationOf(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFCliqueTree:double condLogProbGivenPrevious(int,java.lang.Object,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFCliqueTree:edu.stanford.nlp.stats.Counter condLogProbsGivenPrevious(int,java.lang.Object[])",
            "edu.stanford.nlp.ie.crf.CRFCliqueTree:double condProbGivenPrevious(int,java.lang.Object,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:void setLabelIndex(edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:double score(java.util.List,java.util.List,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats$MultiClassStringLabelStats:void <init>(edu.stanford.nlp.util.Index,java.lang.String)",
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:void <init>(edu.stanford.nlp.util.Index,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ie.crf.LabelDictionary:boolean isConstrained(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.TestSequenceModel:void <init>(edu.stanford.nlp.ie.crf.CRFCliqueTree,edu.stanford.nlp.ie.crf.LabelDictionary,java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:void initializeChart(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:boolean parse(java.util.List)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:double scoreOf(edu.stanford.nlp.ling.Datum,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter scoresOf(edu.stanford.nlp.ling.Datum,java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.maxent.Features:void <init>(java.lang.String,edu.stanford.nlp.maxent.Experiments)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.LogisticClassifier:double scoreOf(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LogisticClassifier:double probabilityOf(java.util.Collection,java.lang.Object)",
            "edu.stanford.nlp.classify.LogisticClassifier:java.lang.Object classOf(java.util.Collection)",
            "edu.stanford.nlp.classify.LogisticClassifier:edu.stanford.nlp.stats.Counter scoresOf(edu.stanford.nlp.ling.Datum)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:double scoreOf(int[],java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter scoresOf(int[])",
            "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter scoresOf(edu.stanford.nlp.ling.Datum)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunctionForLOP:void calculate(double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.AbstractCachingDiffFunction:void ensure(double[])"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassPrecisionRecallStats:double score(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallStats:void <init>(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset,java.lang.Object)",
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallStats:double score(edu.stanford.nlp.classify.ProbabilisticClassifier,edu.stanford.nlp.classify.GeneralDataset)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction:double documentLogProbability(int[][][],int,edu.stanford.nlp.ie.crf.CRFCliqueTree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction:double expectedCountsAndValueForADoc(double[][],int,boolean,boolean)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:void addProcessedData(java.util.List,int[][][][],int[][],double[][][][],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void train(java.util.Collection,edu.stanford.nlp.sequences.DocumentReaderAndWriter)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void setGoal(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void initialize(java.util.List)"
        ]
    },
    "edu.stanford.nlp.maxent.Feature:int indexOf(int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.maxent.Feature:double getVal(int,int)",
            "edu.stanford.nlp.maxent.Feature:void <init>(edu.stanford.nlp.maxent.Experiments,double[][],edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.maxent.Feature:void <init>(edu.stanford.nlp.maxent.Experiments,double[],edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.maxent.Feature:void initHashVals()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:java.util.List makeInitialItems(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void initialize(java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:void printLabelValue(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void printLabelInformation(java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)"
        ]
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier:void trainSemiSup()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunctionForLOP:void computeEHat()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunctionForLOP:void <init>(int[][][][],int[][],double[][],int,edu.stanford.nlp.util.Index,java.util.List,int[],java.lang.String,int,java.util.List,java.util.List,boolean)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TTags:int getIndex(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void readModelAndInit(java.util.Properties,java.io.DataInputStream,boolean)",
            "edu.stanford.nlp.tagger.maxent.AmbiguityClass:void <init>(java.lang.String,boolean,edu.stanford.nlp.tagger.maxent.Dictionary,edu.stanford.nlp.tagger.maxent.TTags)",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:int getTagIndex(java.lang.String)",
            "edu.stanford.nlp.tagger.maxent.TestSentence:int[] getPossibleValues(int)",
            "edu.stanford.nlp.tagger.maxent.TaggerExperiments:void getFeaturesNew()",
            "edu.stanford.nlp.tagger.maxent.TestSentence:double[] getApproximateHistories(java.lang.String[],edu.stanford.nlp.tagger.maxent.History,java.util.List,java.util.List)",
            "edu.stanford.nlp.tagger.maxent.TestSentence:void calculateProbs(double[][][])",
            "edu.stanford.nlp.tagger.maxent.TestSentence:double[] getExactScores(edu.stanford.nlp.tagger.maxent.History)"
        ]
    },
    "edu.stanford.nlp.ie.crf.LabelDictionary:int[] getConstrainedSet(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.TestSequenceModel:void <init>(edu.stanford.nlp.ie.crf.CRFCliqueTree,edu.stanford.nlp.ie.crf.LabelDictionary,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFloatFunction:void calculate(float[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.util.Triple printProbsDocument(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void printProbsDocuments(edu.stanford.nlp.objectbank.ObjectBank)"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassPrecisionRecallStats:edu.stanford.nlp.util.Triple getPrecisionInfo(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallStats:java.lang.String getPrecisionDescription(int,java.lang.Object)",
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallStats:double getPrecision(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatcher$BranchStates:int getBid(int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.LinearClassifier:double weight(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:double weight(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.classify.LinearClassifier:void justificationOf(edu.stanford.nlp.ling.RVFDatum,java.io.PrintWriter)",
            "edu.stanford.nlp.classify.LinearClassifier:void justificationOf(edu.stanford.nlp.ling.Datum,java.io.PrintWriter,java.util.function.Function,boolean)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.util.Index getFeaturesAboveThreshold(edu.stanford.nlp.classify.Dataset,double)",
            "edu.stanford.nlp.classify.LinearClassifier:void justificationOfRVFDatum(edu.stanford.nlp.ling.RVFDatum,java.io.PrintWriter)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:double loglikelihood(java.util.List)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:double weight(java.lang.Object,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifier:double scoreOfRVFDatum(edu.stanford.nlp.ling.RVFDatum,java.lang.Object)",
            "edu.stanford.nlp.classify.LinearClassifier:double scoreOf(edu.stanford.nlp.ling.RVFDatum,java.lang.Object)",
            "edu.stanford.nlp.classify.LinearClassifier:double scoreOf(edu.stanford.nlp.ling.Datum,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:java.util.List getBestParses()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:java.util.List getBestPCFGParses()"
        ]
    },
    "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$State:void <init>(edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem,edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$State,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier:void retrain(edu.stanford.nlp.objectbank.ObjectBank,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void retrain(edu.stanford.nlp.objectbank.ObjectBank)"
        ]
    },
    "edu.stanford.nlp.classify.Dataset:void addLabel(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.Dataset:void add(java.util.Collection,java.lang.Object,boolean)",
            "edu.stanford.nlp.classify.WeightedDataset:void add(java.util.Collection,java.lang.Object,float)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFCliqueTree:double logProb(int,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFCliqueTree:double prob(int,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatcher$BranchStates:int getBranchId(int,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$State:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$ConjStartState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$MultiNodePatternState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$RepeatState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates:void addStates(int,java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.util.Triple documentToDataAndLabels(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classifyGibbs(java.util.List)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.ie.crf.CRFCliqueTree getCliqueTree(java.util.List)",
            "edu.stanford.nlp.ie.crf.CRFClassifierNonlinear:edu.stanford.nlp.util.Triple documentToDataAndLabels(java.util.List)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.sequences.SequenceModel getSequenceModel(java.util.List)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.util.Triple documentsToDataAndLabels(java.util.Collection)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.util.Triple printProbsDocument(java.util.List)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List documentsToDataAndLabelsList(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction:void empiricalCountsForADoc(double[][],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction:void empiricalCounts(double[][])",
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction:double expectedAndEmpiricalCountsAndValueForADoc(double[][],double[][],int)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFCliqueTree:double[] scoresOf(int[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.FactoredSequenceModel:double[] scoresOf(int[],int)",
            "edu.stanford.nlp.ie.crf.CRFCliqueTree:double[] getConditionalDistribution(int[],int)",
            "edu.stanford.nlp.ie.crf.CRFCliqueTree:double scoreOf(int[],int)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.IterativeCKYPCFGParser:boolean doInsideScoresHelper(float)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.IterativeCKYPCFGParser:void doInsideScores()"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFCliqueTree:void <init>(edu.stanford.nlp.ie.crf.FactorTable[],edu.stanford.nlp.util.Index,java.lang.Object,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFCliqueTree:void <init>(edu.stanford.nlp.ie.crf.FactorTable[],edu.stanford.nlp.util.Index,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFCliqueTree:double scoreOf(int[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.FactoredSequenceModel:double scoreOf(int[])"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunctionForLOP:void logPotential(double[][][])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunctionForLOP:void <init>(int[][][][],int[][],double[][],int,edu.stanford.nlp.util.Index,java.util.List,int[],java.lang.String,int,java.util.List,java.util.List,boolean)",
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunctionForLOP:void calculate(double[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:edu.stanford.nlp.trees.Tree extractBestParse(java.lang.String,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:edu.stanford.nlp.trees.Tree getBestParse()",
            "edu.stanford.nlp.parser.lexparser.NodePruner:java.util.List prune(java.util.List,edu.stanford.nlp.ling.Label,int,int)"
        ]
    },
    "edu.stanford.nlp.util.HashIndex:int[] indices(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFClassifierNonlinear:int[][][] transformDocData(int[][][])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifierNonlinear:edu.stanford.nlp.util.Triple documentToDataAndLabels(java.util.List)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:double scoreOfRVFDatum(edu.stanford.nlp.stats.Counter,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter scoresOfRVFDatum(edu.stanford.nlp.ling.RVFDatum)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter scoresOfRVFDatum(edu.stanford.nlp.ling.RVFDatum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter scoresOf(edu.stanford.nlp.ling.Datum)",
            "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter logProbabilityOfRVFDatum(edu.stanford.nlp.ling.RVFDatum)",
            "edu.stanford.nlp.classify.LinearClassifier:java.lang.Object classOfRVFDatum(edu.stanford.nlp.ling.RVFDatum)",
            "edu.stanford.nlp.classify.LinearClassifier:void justificationOfRVFDatum(edu.stanford.nlp.ling.RVFDatum,java.io.PrintWriter)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.UnaryRule:void <init>(java.lang.String,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.UnaryGrammar:void readData(java.io.BufferedReader)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:double getBestScore(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:double getBestScore()",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:double getPCFGScore(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:void writeWeights(java.io.PrintStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFNonLinearLogConditionalObjectiveFunction:void calculate(double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.AbstractCachingDiffFunction:void ensure(double[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:boolean pruneTW(edu.stanford.nlp.parser.lexparser.IntTaggedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:double probTB(edu.stanford.nlp.parser.lexparser.IntDependency)",
            "edu.stanford.nlp.parser.lexparser.ChineseSimWordAvgDepGrammar:double probTBwithSimWords(edu.stanford.nlp.parser.lexparser.IntDependency)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter scoresOf(edu.stanford.nlp.ling.Datum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.classify.SVMLightClassifier trainClassifierBasic(edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.classify.SVMLightClassifier:edu.stanford.nlp.stats.Counter logProbabilityOf(edu.stanford.nlp.ling.Datum)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:void classifyNoSeq(java.util.List)",
            "edu.stanford.nlp.classify.LinearClassifier:java.lang.Object classOf(edu.stanford.nlp.ling.Datum)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void search(edu.stanford.nlp.ling.IndexedWord,java.util.function.Predicate,edu.stanford.nlp.classify.Classifier,java.util.Map,java.util.function.Function,java.util.Collection,int)",
            "edu.stanford.nlp.classify.LinearClassifier:void justificationOf(edu.stanford.nlp.ling.Datum,java.io.PrintWriter,java.util.function.Function,boolean)",
            "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter logProbabilityOf(edu.stanford.nlp.ling.Datum)",
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.classify.LinearClassifier fitSigmoid(edu.stanford.nlp.classify.SVMLightClassifier,edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:void testExample(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset,java.util.List,edu.stanford.nlp.stats.Counter,int)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.AbstractDependencyGrammar:boolean rootTW(edu.stanford.nlp.parser.lexparser.IntTaggedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:double probTB(edu.stanford.nlp.parser.lexparser.IntDependency)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void tune(java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.ChineseSimWordAvgDepGrammar:double probTBwithSimWords(edu.stanford.nlp.parser.lexparser.IntDependency)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunctionWithDropout:edu.stanford.nlp.util.Quadruple expectedCountsAndValueForADoc(int,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunctionWithDropout:edu.stanford.nlp.util.Quadruple access$000(edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunctionWithDropout,int,boolean,boolean)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFloatFunction:void calculateWeird1(float[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier$Scorer:void <init>(java.util.List,edu.stanford.nlp.util.Index,edu.stanford.nlp.ie.ner.CMMClassifier,int,int,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.sequences.SequenceModel getSequenceModel(java.util.List)"
        ]
    },
    "edu.stanford.nlp.util.DeltaIndex:int indexOf(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:boolean parse(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:void initializeChart(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:double scoreBinarizedTree(edu.stanford.nlp.trees.Tree,int)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar$EndHead treeToDependencyHelper(edu.stanford.nlp.trees.Tree,java.util.List,int,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.util.DeltaIndex:int indexOf(java.lang.Object,boolean)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:double validateBinarizedTree(edu.stanford.nlp.trees.Tree,int)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:java.util.List makeInitialItems(java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:void printFirstOrderProbsDocument(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void printFirstOrderProbsDocuments(edu.stanford.nlp.objectbank.ObjectBank)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.AmbiguityClasses:int add(edu.stanford.nlp.tagger.maxent.AmbiguityClass)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.AmbiguityClasses:int getClass(java.lang.String,edu.stanford.nlp.tagger.maxent.Dictionary,int,edu.stanford.nlp.tagger.maxent.TTags)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.FactoredLexicon:java.util.Iterator ruleIteratorByWord(int,int,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:java.util.Iterator ruleIteratorByWord(java.lang.String,int,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar$EndHead treeToDependencyHelper(edu.stanford.nlp.trees.Tree,java.util.List,int,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar$EndHead treeToDependencyHelper(edu.stanford.nlp.trees.Tree,java.util.List,int,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:java.util.List treeToDependencyList(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:java.util.List extractBestParses(int,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:java.util.List getBestParses()",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:java.util.List extractBestParses(int,int,int)"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassPrecisionRecallStats:edu.stanford.nlp.util.Triple getRecallInfo(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallStats:double getRecall(java.lang.Object)",
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallStats:java.lang.String getRecallDescription(int,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.classify.LogisticClassifier:edu.stanford.nlp.stats.Counter weightsAsCounter()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.surface.LearnImportantFeatures:edu.stanford.nlp.stats.Counter getTopFeatures(java.util.Iterator,double,double,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.nndep.DependencyParser:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.StringUtils:java.util.Properties argsToProperties(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Execution:void fillOptions(java.lang.Object[],java.lang.String[])",
            "edu.stanford.nlp.pipeline.RelationExtractorAnnotator:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.CoordinationTransformer:void main(java.lang.String[])",
            "edu.stanford.nlp.process.ChineseDocumentToSentenceProcessor:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.machinereading.MachineReading:edu.stanford.nlp.ie.machinereading.MachineReading makeMachineReading(java.lang.String[])",
            "edu.stanford.nlp.pipeline.StanfordCoreNLPServer:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.NERServer:void main(java.lang.String[])",
            "edu.stanford.nlp.util.Execution:void exec(java.lang.Runnable,java.lang.String[],java.lang.Class[],boolean)",
            "edu.stanford.nlp.stats.MultiClassChunkEvalStats:void main(java.lang.String[])",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void main(java.lang.String[])",
            "edu.stanford.nlp.util.StringUtils:java.util.Properties argsToProperties(java.lang.String[],java.util.Map)",
            "edu.stanford.nlp.trees.GrammaticalStructure:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.machinereading.domains.roth.RothCONLL04Reader:void main(java.lang.String[])",
            "edu.stanford.nlp.international.arabic.process.ArabicTokenizer:void main(java.lang.String[])",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void <init>(java.lang.String)",
            "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader:void main(java.lang.String[])",
            "edu.stanford.nlp.tagger.maxent.TaggerConfig:void <init>(java.lang.String[])",
            "edu.stanford.nlp.ie.NERClassifierCombiner:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.ner.CMMClassifier:void main(java.lang.String[])",
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.crf.CRFBiasedClassifier:void main(java.lang.String[])",
            "edu.stanford.nlp.classify.ColumnDataClassifier:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.regexp.NumberSequenceClassifier:void main(java.lang.String[])",
            "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader:void main(java.lang.String[])",
            "edu.stanford.nlp.util.Execution:void fillOptions(java.lang.Class[],java.lang.String[])",
            "edu.stanford.nlp.pipeline.CustomAnnotationSerializer:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.QPTreeTransformer:void main(java.lang.String[])",
            "edu.stanford.nlp.hcoref.CorefSystem:void runCoref(java.lang.String[])",
            "edu.stanford.nlp.util.Execution:void exec(java.lang.Runnable,java.lang.String[],boolean)",
            "edu.stanford.nlp.scoref.StatisticalCorefSystem:void main(java.lang.String[])",
            "edu.stanford.nlp.time.SUTimeMain:void main(java.lang.String[])",
            "edu.stanford.nlp.scoref.StatisticalCorefTrainer:void main(java.lang.String[])",
            "edu.stanford.nlp.util.Execution:void fillOptions(java.util.Properties,java.lang.String[])",
            "edu.stanford.nlp.classify.LogisticClassifier:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.pascal.ISODateInstance:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.crf.CRFFeatureExporter:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.ClassifierCombiner:void main(java.lang.String[])",
            "edu.stanford.nlp.pipeline.StanfordCoreNLPClient:void main(java.lang.String[])",
            "edu.stanford.nlp.hcoref.CorefPrinter:void linkDistanceAnalysis(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.process.DocumentPreprocessor:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.naturalli.OpenIE:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.international.french.process.FrenchTokenizer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.international.spanish.process.SpanishTokenizer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.international.arabic.process.ArabicSegmenter:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.process.PTBTokenizer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.fsm.TransducerGraph:double inFlow(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.fsm.TransducerGraph:void depthFirstSearchHelper(java.lang.Object,java.util.Set,int,boolean,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.TransducerGraph:void depthFirstSearch(boolean,java.lang.StringBuilder)",
            "edu.stanford.nlp.fsm.TransducerGraph:void depthFirstSearchHelper(java.lang.Object,java.util.Set,int,boolean,java.lang.StringBuilder)"
        ]
    },
    "edu.stanford.nlp.fsm.TransducerGraph$NormalizingGraphProcessor:edu.stanford.nlp.fsm.TransducerGraph processGraph(edu.stanford.nlp.fsm.TransducerGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:java.util.Collection getInverseArcs(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:void addSplits(edu.stanford.nlp.fsm.FastExactAutomatonMinimizer$Block)"
        ]
    },
    "edu.stanford.nlp.hcoref.sieve.RFSieve:void findCoreferentAntecedent(edu.stanford.nlp.hcoref.data.Mention,int,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.ReadDataTagged:void <init>(edu.stanford.nlp.tagger.maxent.TaggerConfig,edu.stanford.nlp.tagger.maxent.MaxentTagger,edu.stanford.nlp.tagger.maxent.PairsHolder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TaggerExperiments:void <init>(edu.stanford.nlp.tagger.maxent.TaggerConfig,edu.stanford.nlp.tagger.maxent.MaxentTagger)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:int getStateSplitCount(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void buildGrammars()",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:java.util.Map buildMergeCorrespondence(java.util.List)"
        ]
    },
    "edu.stanford.nlp.stats.IntCounter:double getCount(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:void subtractInPlace(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.parser.lexparser.RandomWalk:double score(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.stats.Counters$3:java.lang.Double get(java.lang.Object)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void trainUnannotated(java.util.List,double)",
            "edu.stanford.nlp.scoref.SimpleLinearClassifier:double weightFeatureProduct(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.Counters$3:java.lang.Double put(java.lang.Object,java.lang.Double)",
            "edu.stanford.nlp.trees.tregex.VariableStrings:void unsetVar(java.lang.String)",
            "edu.stanford.nlp.trees.tregex.VariableStrings:boolean isSet(java.lang.String)",
            "edu.stanford.nlp.stats.Counters:java.util.List toSortedListWithCounts(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:java.lang.String toString()",
            "edu.stanford.nlp.stats.Counters:java.util.Set retainNonZeros(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.scoref.SimpleLinearClassifier:int lambda$getWeightVector$205(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.stats.IntCounter:double getNormalizedCount(java.lang.Object)",
            "edu.stanford.nlp.semgraph.semgrex.VariableStrings:boolean isSet(java.lang.Object)",
            "edu.stanford.nlp.parser.lexparser.RandomWalk:double step(java.lang.Object,java.lang.Object,int)",
            "edu.stanford.nlp.stats.IntCounter:double incrementCount(java.lang.Object,double)",
            "edu.stanford.nlp.stats.IntCounter:void removeZeroCounts()",
            "edu.stanford.nlp.sentiment.AbstractEvaluate:edu.stanford.nlp.stats.Counter lengthAccuracies()",
            "edu.stanford.nlp.stats.IntCounter:double remove(java.lang.Object)",
            "edu.stanford.nlp.stats.Counters:boolean equals(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,double)",
            "edu.stanford.nlp.trees.tregex.VariableStrings:java.lang.String toString()",
            "edu.stanford.nlp.parser.nndep.Util:java.util.List generateDict(java.util.List,int)",
            "edu.stanford.nlp.semgraph.semgrex.VariableStrings:void unsetVar(java.lang.Object)",
            "edu.stanford.nlp.scoref.SimpleLinearClassifier:void learn(edu.stanford.nlp.stats.Counter,double,double,edu.stanford.nlp.scoref.SimpleLinearClassifier$Loss)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void splitStateCounts()"
        ]
    },
    "edu.stanford.nlp.stats.IntCounter:int max()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.IntCounter:double doubleMax()"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:int getRetrieved(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:java.lang.String getConllEvalString(java.util.List,boolean)"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:int getRelevant(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.IntCounter:int totalIntCount(java.util.function.Predicate)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.IntCounter:double totalDoubleCount(java.util.function.Predicate)"
        ]
    },
    "edu.stanford.nlp.stats.IntCounter:int min()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.IntCounter:void addAll(edu.stanford.nlp.stats.IntCounter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.IntCounter:void <init>(edu.stanford.nlp.stats.IntCounter)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void splitStateCounts()"
        ]
    },
    "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$CorpusStats:void appendIntCountStats(java.lang.StringBuilder,java.lang.String,edu.stanford.nlp.stats.IntCounter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$CorpusStats:java.lang.String toString()"
        ]
    },
    "edu.stanford.nlp.stats.IntCounter:java.lang.String getCountAsString(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.IntCounter:void subtractAll(edu.stanford.nlp.stats.IntCounter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.IntCounter:java.util.Set keysAt(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.TwoDimensionalIntCounter:edu.stanford.nlp.stats.TwoDimensionalIntCounter reverseIndexOrder(edu.stanford.nlp.stats.TwoDimensionalIntCounter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.TwoDimensionalIntCounter:int getCount(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void setCount(java.lang.Object,java.lang.Object,int)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:double probLemmaTag(java.lang.String,int,int,int)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:int[][] toMatrix(java.util.List,java.util.List)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:double probMorphTag(int,int)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:java.lang.String toCSVString(java.text.NumberFormat)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:double probWordTag(java.lang.String,int,int,int)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:java.lang.String toCSVString(edu.stanford.nlp.stats.TwoDimensionalIntCounter,java.text.NumberFormat,java.util.Comparator,java.util.Comparator)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:int remove(java.lang.Object,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.stats.IntCounter:java.util.Set keysAbove(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:void trainModel(java.lang.String,edu.stanford.nlp.tagger.common.Tagger,java.util.Random,java.util.List,java.util.List,edu.stanford.nlp.trees.Treebank,int,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.stats.TwoDimensionalIntCounter:edu.stanford.nlp.stats.IntCounter flatten()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$CorpusStats:void appendIntCountStats(java.lang.StringBuilder,java.lang.String,edu.stanford.nlp.stats.IntCounter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$CorpusStats:java.lang.String toString()"
        ]
    },
    "edu.stanford.nlp.stats.IntCounter:java.util.Set keysBelow(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:int getCorrect(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:java.lang.String getConllEvalString(java.util.List,boolean)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:int getStateSplitCount(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:int recountInside(edu.stanford.nlp.trees.Tree,boolean,int,java.util.IdentityHashMap)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.CTBunkDict:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.CTBunkDict:edu.stanford.nlp.tagger.maxent.CTBunkDict getInstance()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseSimWordAvgDepGrammar:double scoreTB(edu.stanford.nlp.parser.lexparser.IntDependency)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.ExtractorMidSentenceCapC:java.lang.String extract(edu.stanford.nlp.tagger.maxent.History,edu.stanford.nlp.tagger.maxent.PairsHolder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.ExtractorsConjunction:java.lang.String extract(edu.stanford.nlp.tagger.maxent.History,edu.stanford.nlp.tagger.maxent.PairsHolder)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.Dictionary:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.ExtractorStartSentenceCap:java.lang.String extract(edu.stanford.nlp.tagger.maxent.History,edu.stanford.nlp.tagger.maxent.PairsHolder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.ExtractorsConjunction:java.lang.String extract(edu.stanford.nlp.tagger.maxent.History,edu.stanford.nlp.tagger.maxent.PairsHolder)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:java.util.List getKBestPCFGParses(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.DVParser:java.util.List getTopParsesForOneTree(edu.stanford.nlp.parser.lexparser.LexicalizedParser,int,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreeTransformer)",
            "edu.stanford.nlp.parser.lexparser.ParseFiles:void processResults(edu.stanford.nlp.parser.common.ParserQuery,int,java.io.PrintWriter)",
            "edu.stanford.nlp.parser.lexparser.RerankingParserQuery:boolean parseAndReport(java.util.List,java.io.PrintWriter)",
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void processResults(edu.stanford.nlp.parser.common.ParserQuery,edu.stanford.nlp.trees.Tree,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,edu.stanford.nlp.trees.TreePrint)",
            "edu.stanford.nlp.parser.lexparser.RerankingParserQuery:boolean parse(java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.FastFactoredParser:boolean parse(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:boolean parseInternal(java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:java.util.List getKGoodParses(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.GeneralizedCounter:java.util.Set keySet(java.util.Set,java.lang.Object[],boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter:java.util.Set keySet(java.util.Set,java.lang.Object[],boolean)",
            "edu.stanford.nlp.stats.GeneralizedCounter:java.util.Set access$500(edu.stanford.nlp.stats.GeneralizedCounter,java.util.Set,java.lang.Object[],boolean)",
            "edu.stanford.nlp.stats.GeneralizedCounter:java.util.Set keySet()"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter:java.util.Set lowestLevelCounterEntrySet(java.util.Set,java.lang.Object[],boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter:java.util.Set lowestLevelCounterEntrySet(java.util.Set,java.lang.Object[],boolean)",
            "edu.stanford.nlp.stats.GeneralizedCounter:java.util.Set lowestLevelCounterEntrySet()"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter:edu.stanford.nlp.stats.GeneralizedCounter conditionalizeOnce(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter:java.lang.String toString(java.lang.String)",
            "edu.stanford.nlp.stats.GeneralizedCounter:double totalCount()"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter:void incrementCount2D(java.lang.Object,java.lang.Object,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter:void incrementCount2D(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.stats.GeneralizedCounter:void incrementCount3D(java.lang.Object,java.lang.Object,java.lang.Object,double)"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter:boolean containsKey(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter$CounterView:boolean containsKey(java.util.List)"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter:void incrementCount(java.util.List,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFCliqueTree:edu.stanford.nlp.stats.GeneralizedCounter probs(int,int)",
            "edu.stanford.nlp.ie.crf.CRFCliqueTree:edu.stanford.nlp.stats.GeneralizedCounter logProbs(int,int)",
            "edu.stanford.nlp.stats.GeneralizedCounter:edu.stanford.nlp.stats.GeneralizedCounter reverseKeys()",
            "edu.stanford.nlp.stats.GeneralizedCounter:void main(java.lang.String[])",
            "edu.stanford.nlp.stats.GeneralizedCounter:void incrementCount(java.util.List)"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter:void incrementCount(java.util.List,java.lang.Object,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter:void incrementCount(java.util.List,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter:void incrementCount3D(java.lang.Object,java.lang.Object,java.lang.Object,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter:void incrementCount3D(java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter:edu.stanford.nlp.stats.GeneralizedCounter conditionalize(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter:void prettyPrint(java.io.PrintWriter,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.stats.GeneralizedCounter:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.patterns.ScorePhrases:void applyPats(edu.stanford.nlp.stats.Counter,java.lang.String,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.util.CollectionValuedMap,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.util.Map loadFromSavedPatternsWordsDir(edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass,java.util.Properties)",
            "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter learnNewPhrasesPrivate(java.lang.String,edu.stanford.nlp.patterns.surface.PatternsForEachToken,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.util.Set,edu.stanford.nlp.util.CollectionValuedMap,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,java.lang.String,java.util.Set,boolean)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.GrammarCompactor:boolean addOneBinaryRule(edu.stanford.nlp.parser.lexparser.BinaryRule,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.GrammarCompactor:java.util.Map convertGrammarToGraphs(edu.stanford.nlp.util.Pair,java.util.Set,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.GrammarCompactor:boolean addOneUnaryRule(edu.stanford.nlp.parser.lexparser.UnaryRule,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.GrammarCompactor:java.util.Map convertGrammarToGraphs(edu.stanford.nlp.util.Pair,java.util.Set,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.pipeline.CleanXmlAnnotator:java.util.List process(edu.stanford.nlp.pipeline.Annotation,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.CleanXmlAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.pipeline.CleanXmlAnnotator:java.util.List process(java.util.List)"
        ]
    },
    "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void setCount(java.lang.Object,java.lang.Object,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:edu.stanford.nlp.stats.TwoDimensionalIntCounter reverseIndexOrder(edu.stanford.nlp.stats.TwoDimensionalIntCounter)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void setCount(java.lang.Object,java.lang.Object,double)"
        ]
    },
    "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void subtractAll(java.lang.Object,edu.stanford.nlp.stats.IntCounter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.TwoDimensionalIntCounter:java.util.Set secondKeySet()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:java.lang.String toCSVString(java.text.NumberFormat)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:java.lang.String toCSVString(edu.stanford.nlp.stats.TwoDimensionalIntCounter,java.text.NumberFormat,java.util.Comparator,java.util.Comparator)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:java.lang.String toMatrixString(int)"
        ]
    },
    "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void subtractAll(edu.stanford.nlp.stats.TwoDimensionalIntCounter,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.TwoDimensionalIntCounter:int totalCount(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:double probLemmaTag(java.lang.String,int,int,int)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:double probMorphTag(int,int)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:double probWordTag(java.lang.String,int,int,int)"
        ]
    },
    "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void incrementCount(java.lang.Object,java.lang.Object,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void incrementCount(java.lang.Object,java.lang.Object,double)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void decrementCount(java.lang.Object,java.lang.Object,int)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void decrementCount(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void incrementCount(java.lang.Object,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void addAll(java.lang.Object,edu.stanford.nlp.stats.IntCounter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.TwoDimensionalIntCounter:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void addAll(edu.stanford.nlp.stats.TwoDimensionalIntCounter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void printConllOutput(edu.stanford.nlp.dcoref.Document,java.io.PrintWriter,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void printConllOutput(edu.stanford.nlp.dcoref.Document,java.io.PrintWriter,boolean)",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:double runAndScoreCoref(edu.stanford.nlp.dcoref.SieveCoreferenceSystem,edu.stanford.nlp.dcoref.MentionExtractor,java.util.Properties,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree parse(java.util.List)",
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree findSyntacticHead(edu.stanford.nlp.ie.machinereading.structure.EntityMention,edu.stanford.nlp.trees.Tree,java.util.List)"
        ]
    },
    "edu.stanford.nlp.hcoref.md.CorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List)",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:edu.stanford.nlp.trees.Tree findSyntacticHead(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.trees.Tree,java.util.List)"
        ]
    },
    "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.Tree findSyntacticHead(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.trees.Tree,java.util.List)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.metrics.LeafAncestorEval:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.LeafAncestorEval:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void processResults(edu.stanford.nlp.parser.common.ParserQuery,edu.stanford.nlp.trees.Tree,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,edu.stanford.nlp.trees.TreePrint)"
        ]
    },
    "edu.stanford.nlp.fsm.TransducerGraph:void <init>(java.util.Set,java.lang.Object,java.util.Set,edu.stanford.nlp.fsm.TransducerGraph$ArcProcessor,edu.stanford.nlp.fsm.TransducerGraph$NodeProcessor)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.TransducerGraph:void <init>(edu.stanford.nlp.fsm.TransducerGraph,edu.stanford.nlp.fsm.TransducerGraph$ArcProcessor)",
            "edu.stanford.nlp.fsm.TransducerGraph:void <init>(edu.stanford.nlp.fsm.TransducerGraph,edu.stanford.nlp.fsm.TransducerGraph$NodeProcessor)",
            "edu.stanford.nlp.fsm.TransducerGraph:void <init>(java.util.Set)"
        ]
    },
    "edu.stanford.nlp.fsm.TransducerGraph:boolean addArc(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.GrammarCompactor:boolean addOneBinaryRule(edu.stanford.nlp.parser.lexparser.BinaryRule,java.util.Map)",
            "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:edu.stanford.nlp.fsm.TransducerGraph buildMinimizedFA()",
            "edu.stanford.nlp.parser.lexparser.GrammarCompactor:boolean addOneUnaryRule(edu.stanford.nlp.parser.lexparser.UnaryRule,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.fsm.TransducerGraph:java.util.List sampleUniformPathFromGraph()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.TransducerGraph:java.util.Map samplePathsFromGraph(int)",
            "edu.stanford.nlp.fsm.TransducerGraph:boolean testGraphPaths(edu.stanford.nlp.fsm.TransducerGraph,edu.stanford.nlp.fsm.TransducerGraph,int)"
        ]
    },
    "edu.stanford.nlp.fsm.TransducerGraph:java.lang.String asDOTString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.GrammarCompactor:boolean writeFile(edu.stanford.nlp.fsm.TransducerGraph,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.fsm.TransducerGraph:double getSourceTotal(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.fsm.TransducerGraph:double outFlow(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.Preprocessor:boolean findSpeaker(edu.stanford.nlp.hcoref.data.Document,int,int,java.util.List,int,int,edu.stanford.nlp.hcoref.data.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.Preprocessor:void findQuotationSpeaker(edu.stanford.nlp.hcoref.data.Document,int,java.util.List,edu.stanford.nlp.util.IntPair,edu.stanford.nlp.util.IntPair,edu.stanford.nlp.hcoref.data.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.sequences.ObjectBankWrapper:java.lang.String fix(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.ObjectBankWrapper:void doBasicStuff(java.util.List)"
        ]
    },
    "edu.stanford.nlp.process.Americanize:edu.stanford.nlp.ling.HasWord apply(edu.stanford.nlp.ling.HasWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.Americanize:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.process.Americanize:java.lang.String americanize(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.LowercaseAndAmericanizeFunction:java.lang.String apply(java.lang.String)",
            "edu.stanford.nlp.process.PTBLexer:java.lang.Object next()",
            "edu.stanford.nlp.process.AmericanizeFunction:java.lang.String apply(java.lang.String)",
            "edu.stanford.nlp.process.Americanize:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.dcoref.Rules:boolean entityPersonDisagree(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries,java.util.Set,edu.stanford.nlp.dcoref.Semantics)"
        ]
    },
    "edu.stanford.nlp.naturalli.Util:java.util.List cleanTree(edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void <init>(edu.stanford.nlp.semgraph.SemanticGraph,boolean,java.util.Optional,java.util.Optional)",
            "edu.stanford.nlp.naturalli.OpenIE:void annotateSentence(edu.stanford.nlp.util.CoreMap,java.util.Map)",
            "edu.stanford.nlp.naturalli.ForwardEntailerSearchProblem:java.util.List searchImplementation()"
        ]
    },
    "edu.stanford.nlp.util.IterableIterator:void remove()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.IterableIterator:void remove()"
        ]
    },
    "edu.stanford.nlp.international.arabic.process.IOBUtils:void tokenToDatums(java.util.List,edu.stanford.nlp.ling.CoreLabel,java.lang.String,edu.stanford.nlp.international.arabic.process.IOBUtils$TokenType,edu.stanford.nlp.ling.CoreLabel,java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.arabic.process.IOBUtils:java.util.List StringToIOB(java.util.List,java.lang.Character,boolean,boolean)"
        ]
    },
    "edu.stanford.nlp.international.morph.MorphoFeatures:int numFeatureMatches(edu.stanford.nlp.international.morph.MorphoFeatures)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void initialize(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:boolean parse(java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon$Symbol:edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon$Symbol intern()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon:edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon$Symbol unknownCharClass(edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon$Symbol)",
            "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon$Symbol:java.lang.Object readResolve()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.HookChart:void registerEdgeIndexes(edu.stanford.nlp.parser.lexparser.Edge)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void triggerHooks(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void triggerAllHooks(edu.stanford.nlp.parser.lexparser.Edge)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.ComplexNodePattern:edu.stanford.nlp.ling.tokensregex.ComplexNodePattern valueOf(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map,java.util.function.BiFunction,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern:edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern valueOf(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.NodePattern CoreMapNode(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.NodePattern CoreMapWordPattern(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern:edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern valueOf(java.util.Map)"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP:edu.stanford.nlp.pipeline.AnnotatorPool getDefaultAnnotatorPool(java.util.Properties,edu.stanford.nlp.pipeline.AnnotatorImplementations)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void construct(java.util.Properties,boolean,edu.stanford.nlp.pipeline.AnnotatorImplementations)"
        ]
    },
    "edu.stanford.nlp.dcoref.Document:void findQuotationSpeaker(int,java.util.List,edu.stanford.nlp.util.Pair,edu.stanford.nlp.util.Pair,edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Document:void findSpeakersInArticle(edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:edu.stanford.nlp.semgraph.SemanticGraphEdge addEdge(edu.stanford.nlp.semgraph.SemanticGraphEdge)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:edu.stanford.nlp.semgraph.SemanticGraphEdge addEdge(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.trees.GrammaticalRelation,double,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:void <init>(java.util.Collection)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void addCaseMarkersToReln(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,java.util.List)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void addSubtree(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.lang.String,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Collection)",
            "edu.stanford.nlp.naturalli.OpenIE:edu.stanford.nlp.semgraph.SemanticGraph canonicalizeCoref(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Map)",
            "edu.stanford.nlp.semgraph.SemanticGraph:edu.stanford.nlp.semgraph.SemanticGraph makeSoftCopy()",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:void replaceNode(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.ForwardEntailerSearchProblem:java.util.List searchImplementation()",
            "edu.stanford.nlp.semgraph.SemanticGraph$SemanticGraphParsingTask:void readDep(edu.stanford.nlp.ling.IndexedWord,java.lang.String)",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromVertices(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Collection)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void convertRel(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.semgraph.SemanticGraph:void <init>(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Map)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void expandPrepConjunction(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.List,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.naturalli.Util:java.util.List cleanTree(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph deepCopyFromGraphs(java.util.List,java.util.List)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:edu.stanford.nlp.semgraph.SemanticGraph resetVerticeOrdering(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void expandPPConjunction(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.List,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void correctWHAttachment(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:void enRepairEdges(edu.stanford.nlp.semgraph.SemanticGraph,boolean)",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromEdges(java.lang.Iterable)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void correctSubjPass(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.semgraph.SemanticGraph fromProto(edu.stanford.nlp.pipeline.CoreNLPProtos$DependencyGraph,java.util.List,java.lang.String)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void addRef(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph duplicateKeepNodes(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void process3WP(edu.stanford.nlp.semgraph.SemanticGraph,java.util.HashMap)",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromGraphs(java.util.Collection)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void addExtraNSubj(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.ForwardEntailerSearchProblem:void lambda$searchImplementation$18(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraphEdge)",
            "edu.stanford.nlp.naturalli.OpenIE:java.util.List entailmentsFromClause(edu.stanford.nlp.naturalli.SentenceFragment)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void processComplex2WP(edu.stanford.nlp.semgraph.SemanticGraph,java.util.HashMap)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void addWord(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.lang.String,edu.stanford.nlp.ling.CoreLabel)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void createMultiWordExpression(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.trees.GrammaticalRelation,edu.stanford.nlp.ling.IndexedWord[])",
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:void lambda$fromProto$67(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.pipeline.AnnotationSerializer$IntermediateSemanticGraph:edu.stanford.nlp.semgraph.SemanticGraph convertIntermediateGraph(java.util.List)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void treatCC(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void correctWHAttachment(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void collapseReferent(edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:int outDegree(edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.lang.String semgrexFromGraphHelper(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,java.util.Set,java.util.Set,boolean,boolean,java.util.Collection,java.util.Map,boolean,java.util.function.Function)",
            "edu.stanford.nlp.semgraph.SemanticGraph:void toCompactStringHelper(edu.stanford.nlp.ling.IndexedWord,java.lang.StringBuilder,java.util.Set,boolean)",
            "edu.stanford.nlp.semgraph.SemanticGraphFormatter:void formatSGNodeOnelineHelper(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.lang.StringBuilder,java.util.Set)",
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional segmentVerb(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Optional,boolean)",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Set getLeafVertices()"
        ]
    },
    "edu.stanford.nlp.classify.GeneralizedExpectationObjectiveFunction:void <init>(edu.stanford.nlp.classify.GeneralDataset,java.util.List,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier trainSemiSupGE(edu.stanford.nlp.classify.GeneralDataset,java.util.List,java.util.List,double)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.Redwood$Util:void endThreads(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood$Util$1$1:void run()"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:void trainMulticlass(edu.stanford.nlp.classify.GeneralDataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:void train(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.Rules:boolean antecedentMatchesMentionSpeakerAnnotation(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.Rules:boolean antecedentIsMentionSpeaker(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.hcoref.sieve.RFSieve:edu.stanford.nlp.ling.RVFDatum extractDatum(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,int,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.String)",
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)",
            "edu.stanford.nlp.hcoref.Rules:boolean antecedentMatchesMentionSpeakerAnnotation(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TTags:void save(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.sieve.OracleSieve:void findCoreferentAntecedent(edu.stanford.nlp.hcoref.data.Mention,int,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.gui.InputPanel:void lambda$returnToValidState$274(java.util.List,edu.stanford.nlp.trees.tregex.gui.InputPanel$TRegexGUITreeVisitor,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.gui.InputPanel$1:void lambda$run$268(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.gui.InputPanel$2:void lambda$run$270(java.lang.String,edu.stanford.nlp.trees.tregex.gui.InputPanel$TRegexGUITreeVisitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.TimeFormatter$TimeZoneComponent:edu.stanford.nlp.time.SUTime$Temporal updateTemporal(edu.stanford.nlp.time.SUTime$Temporal,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.RandomWalk:double score(java.lang.Object,java.lang.Object,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.RandomWalk:double step(java.lang.Object,java.lang.Object,int)",
            "edu.stanford.nlp.parser.lexparser.RandomWalk:void <init>(java.util.Collection,int)"
        ]
    },
    "edu.stanford.nlp.time.TimeFormatter$FormatterBuilder:void appendTimeZoneShortName()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeFormatter:void parsePatternTo(edu.stanford.nlp.time.TimeFormatter$FormatterBuilder,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.time.TimeFormatter$FormatterBuilder:void appendTimeZoneName()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeFormatter:void parsePatternTo(edu.stanford.nlp.time.TimeFormatter$FormatterBuilder,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void countMergeEffects(edu.stanford.nlp.trees.Tree,java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void mergeStates()"
        ]
    },
    "edu.stanford.nlp.util.CollectionValuedMap:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.ExtractorCapLCSeen:java.lang.String extract(edu.stanford.nlp.tagger.maxent.History,edu.stanford.nlp.tagger.maxent.PairsHolder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.fsm.DFSA:void printTrieDFSAHelper(edu.stanford.nlp.fsm.DFSAState,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.DFSA:void printTrieDFSAHelper(edu.stanford.nlp.fsm.DFSAState,int)",
            "edu.stanford.nlp.fsm.DFSA:void printTrieDFSA(edu.stanford.nlp.fsm.DFSA)"
        ]
    },
    "edu.stanford.nlp.fsm.DFSA:void printTrieAsRulesHelper(edu.stanford.nlp.fsm.DFSAState,java.lang.String,java.io.Writer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.DFSA:void printTrieAsRules(edu.stanford.nlp.fsm.DFSA,java.io.Writer)",
            "edu.stanford.nlp.fsm.DFSA:void printTrieAsRulesHelper(edu.stanford.nlp.fsm.DFSAState,java.lang.String,java.io.Writer)"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass$CalculateSufficientStatsThreads:java.lang.Object call()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.List,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(edu.stanford.nlp.trees.Tree,double)",
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void train(java.util.List,double)"
        ]
    },
    "edu.stanford.nlp.ie.NumberNormalizer:java.util.List findNumbers(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.NumberNormalizer:java.util.List findAndMergeNumbers(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.ie.NumberNormalizer:java.util.List findNumberRanges(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.NumberNormalizer:java.util.List findAndAnnotateNumericExpressionsWithRanges(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier:void makeAnswerArraysAndTagIndex(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.classify.Dataset getDataset(java.util.Collection,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.classify.Dataset getBiasedDataset(edu.stanford.nlp.objectbank.ObjectBank,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)"
        ]
    },
    "edu.stanford.nlp.classify.RVFDataset:void applyFeatureMaxCountThreshold(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.RVFDataset:void applyFeatureCountThreshold(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.util.Pair readAndReturnTrainingExamples(java.lang.String)",
            "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:edu.stanford.nlp.classify.GeneralDataset createDataset(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.Classifier trainClassifier(java.lang.Iterable)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.HashIndex:edu.stanford.nlp.util.Index loadFromReader(java.io.BufferedReader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTextFile(java.lang.String,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier loadFromFilename(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$TimeIndex:boolean addTemporalFunc(edu.stanford.nlp.time.SUTime$Temporal)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.util.Index allLabels(int,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void makeAnswerArraysAndTagIndex(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:void loadTagIndex()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifierNoisyLabel:edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction getObjectiveFunction(int[][][][],int[][])",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern$OrPatternExpr:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr optimizeOrStringSeqs()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$OrPatternExpr:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr optimizeOr()"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifierNonlinear:void loadTextClassifier(java.io.BufferedReader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void loadTextClassifier(java.lang.String,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.util.HashIndex:boolean addAll(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:void train(java.util.List,edu.stanford.nlp.util.Pair,java.lang.String)",
            "edu.stanford.nlp.util.HashIndex:void <init>(edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.util.HashIndex:void <init>(java.util.Collection)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void combine(edu.stanford.nlp.ie.crf.CRFClassifier,double)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.Classifier trainClassifier(java.lang.Iterable)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void makeAnswerArraysAndTagIndex(java.util.Collection)",
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:double score(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallStats:double score(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset)"
        ]
    },
    "edu.stanford.nlp.classify.GeneralDataset:void applyFeatureMaxCountThreshold(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.GeneralDataset:void retainFeatures(java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.maxent.Experiments:edu.stanford.nlp.util.Index createIndex()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.maxent.Features:void <init>(java.lang.String,edu.stanford.nlp.maxent.Experiments)"
        ]
    },
    "edu.stanford.nlp.util.HashIndex:edu.stanford.nlp.util.Index loadFromFileWithList(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.GeneralDataset:void applyFeatureCountThreshold(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.util.Pair readAndReturnTrainingExamples(java.lang.String)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.classify.Dataset getDataset(java.util.Collection,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.classify.Dataset getBiasedDataset(edu.stanford.nlp.objectbank.ObjectBank,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.classify.Dataset getDataset(edu.stanford.nlp.classify.Dataset,edu.stanford.nlp.util.Index)"
        ]
    },
    "edu.stanford.nlp.util.DeltaIndex:boolean add(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.DeltaIndex:boolean addAll(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$TimeIndex:boolean addTemporal(edu.stanford.nlp.time.SUTime$Temporal)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$TimeIndex:void <init>()",
            "edu.stanford.nlp.time.SUTime$TimeIndex:boolean addTemporalExpr(edu.stanford.nlp.time.TimeExpression)",
            "edu.stanford.nlp.time.SUTime$TimeIndex:void clear()"
        ]
    },
    "edu.stanford.nlp.classify.ColumnDataClassifier:void addFeature(java.lang.Object,java.lang.Object,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:void addFeatureValue(java.lang.String,edu.stanford.nlp.classify.ColumnDataClassifier$Flags,java.lang.Object)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:void makeDatum(java.lang.String,edu.stanford.nlp.classify.ColumnDataClassifier$Flags,java.lang.Object,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:void addGuess(java.lang.Object,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:void addGuess(java.lang.Object,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$TimeIndex:boolean addTemporalExpr(edu.stanford.nlp.time.TimeExpression)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.MultiClassChunkEvalStats:void addGuess(edu.stanford.nlp.pipeline.LabeledChunkIdentifier$LabelTagType,edu.stanford.nlp.pipeline.LabeledChunkIdentifier$LabelTagType,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassChunkEvalStats:void addGuess(java.lang.String,java.lang.String,boolean)"
        ]
    },
    "edu.stanford.nlp.util.HashIndex:edu.stanford.nlp.util.Index loadFromFilename(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.util.Index getFeaturesAboveThreshold(edu.stanford.nlp.classify.Dataset,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void train(java.util.Collection,edu.stanford.nlp.sequences.DocumentReaderAndWriter)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$TimeIndex:void clear()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.TTags:void read(java.io.DataInputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void readModelAndInit(java.util.Properties,java.io.DataInputStream,boolean)",
            "edu.stanford.nlp.tagger.maxent.TTags:void read(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.TreePrint:edu.stanford.nlp.trees.Tree lambda$printTreeInternal$19(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TreePrint:void printTreeInternal(edu.stanford.nlp.trees.Tree,java.io.PrintWriter,boolean)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.ASBCunkDict:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.ASBCunkDict:edu.stanford.nlp.tagger.maxent.ASBCunkDict getInstance()"
        ]
    },
    "edu.stanford.nlp.util.DeltaCollectionValuedMap:void addAll(java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.CtbDict:java.lang.String getTagPre(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.CtbPreDetector:java.lang.String extract(edu.stanford.nlp.tagger.maxent.History,edu.stanford.nlp.tagger.maxent.PairsHolder)"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass$LabelWithSeedWords:java.lang.Object call()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:void readCEDict(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:void <init>(java.lang.String,boolean)",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:void <init>(java.lang.String)",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:void <init>()"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.CtbDict:java.lang.String getTagSuf(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.CtbSufDetector:java.lang.String extract(edu.stanford.nlp.tagger.maxent.History,edu.stanford.nlp.tagger.maxent.PairsHolder)"
        ]
    },
    "edu.stanford.nlp.hcoref.Rules:boolean entityPersonDisagree(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.Iterator outgoingEdgeIterator(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Iterator outgoingEdgeIterator(edu.stanford.nlp.ling.IndexedWord)"
        ]
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.Iterator lambda$incomingEdgeIterable$22(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.Util:boolean isTree(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Set getParentsWithReln(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.trees.GrammaticalRelation)",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.List parentPairs(edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:boolean lambda$fromProto$66(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.naturalli.ForwardEntailerSearchProblem:java.util.List searchImplementation()",
            "edu.stanford.nlp.naturalli.SentenceFragment:java.lang.String toString()",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Set allEdgesInSet(java.lang.Iterable,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.util.CollectionUtils:void addAll(java.util.Collection,java.lang.Iterable)",
            "edu.stanford.nlp.semgraph.SemanticGraph:boolean hasParentWithReln(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.trees.GrammaticalRelation)",
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:void lambda$fromProto$67(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.naturalli.Util:void stripPrepCases(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.Util:java.util.List cleanTree(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.ie.util.RelationTriple$WithTree:edu.stanford.nlp.ling.CoreLabel subjectHead()",
            "edu.stanford.nlp.ie.util.RelationTriple$WithTree:edu.stanford.nlp.ling.CoreLabel objectHead()",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.List edgesWithReln(java.lang.Iterable,edu.stanford.nlp.trees.GrammaticalRelation)"
        ]
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.Iterator lambda$outgoingEdgeIterable$23(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:boolean hasChild(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.trees.GrammaticalRelation,java.lang.String)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.List getChildrenWithPrepC(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void addSubtree(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.lang.String,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Collection)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void search(edu.stanford.nlp.ling.IndexedWord,java.util.function.Predicate,edu.stanford.nlp.classify.Classifier,java.util.Map,java.util.function.Function,java.util.Collection,int)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$8:edu.stanford.nlp.stats.Counter apply(edu.stanford.nlp.util.Triple)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.List getChildrenWithRelnPrefix(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.lang.String)",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Set getChildrenWithRelns(edu.stanford.nlp.ling.IndexedWord,java.util.Collection)",
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional segmentVerb(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Optional,boolean)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:void getSubTreeEdgesHelper(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,java.util.Set)",
            "edu.stanford.nlp.util.CollectionUtils:void addAll(java.util.Collection,java.lang.Iterable)",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Set getChildrenWithReln(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.trees.GrammaticalRelation)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void splitToChildOfEdge(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraphEdge)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void stripAuxMark(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional getValidChunk(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Set,java.util.Optional,boolean)",
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional segmentACL(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Optional,boolean)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$5:boolean prerequisitesMet(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraphEdge)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void convertRel(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.semgraph.SemanticGraph:edu.stanford.nlp.util.Pair yieldSpan(edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.naturalli.Util:java.util.List cleanTree(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.semgraph.SemanticGraph:edu.stanford.nlp.ling.IndexedWord getChildWithReln(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.trees.GrammaticalRelation)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.List edgesWithReln(java.lang.Iterable,edu.stanford.nlp.trees.GrammaticalRelation)",
            "edu.stanford.nlp.naturalli.Util:boolean isTree(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void addRef(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.OpenIE:java.util.List entailmentsFromClause(edu.stanford.nlp.naturalli.SentenceFragment)",
            "edu.stanford.nlp.naturalli.NaturalLogicAnnotator:edu.stanford.nlp.util.Pair getGeneralizedSubtreeSpan(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Set)",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.List childPairs(edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$4:boolean prerequisitesMet(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraphEdge)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.lang.String semgrexFromGraphHelper(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,java.util.Set,java.util.Set,boolean,boolean,java.util.Collection,java.util.Map,boolean,java.util.function.Function)",
            "edu.stanford.nlp.semgraph.SemanticGraph:boolean hasChildWithReln(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.trees.GrammaticalRelation)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Set allEdgesInSet(java.lang.Iterable,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.List extract(edu.stanford.nlp.semgraph.SemanticGraph,java.util.List)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.List getChildrenWithRelnPrefix(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Collection)",
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional segment(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Optional,boolean)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$6:boolean prerequisitesMet(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraphEdge)",
            "edu.stanford.nlp.semgraph.SemanticGraph:void topologicalSortHelper(edu.stanford.nlp.ling.IndexedWord,java.util.Set,java.util.Set,java.util.List)"
        ]
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.Iterator incomingEdgeIterator(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Iterator incomingEdgeIterator(edu.stanford.nlp.ling.IndexedWord)"
        ]
    },
    "edu.stanford.nlp.dcoref.ScorerBCubed:void calculatePrecisionBconll(edu.stanford.nlp.dcoref.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.ScorerBCubed:void calculatePrecision(edu.stanford.nlp.dcoref.Document)"
        ]
    },
    "edu.stanford.nlp.patterns.surface.SurfacePatternFactory:java.util.Set getContext(java.util.List,int,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.surface.SurfacePatternFactory:java.util.Map getPatternsAroundTokens(edu.stanford.nlp.patterns.DataInstance,java.util.Set)",
            "edu.stanford.nlp.patterns.Pattern:java.util.Set getContext(edu.stanford.nlp.patterns.PatternFactory$PatternType,edu.stanford.nlp.patterns.DataInstance,int,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void labelWords(java.lang.String,java.util.Map,java.util.Collection,java.lang.String,edu.stanford.nlp.util.CollectionValuedMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.util.Pair iterateExtractApply4Label(java.lang.String,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.Counter,java.io.BufferedWriter,java.lang.String,java.io.BufferedWriter,java.util.Set,java.util.Set,edu.stanford.nlp.util.CollectionValuedMap,edu.stanford.nlp.stats.TwoDimensionalCounter,int)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.util.Map loadFromSavedPatternsWordsDir(edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass,java.util.Properties)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void labelWords(java.lang.String,java.util.Map,java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.util.ArrayUtils:java.util.List getSubListIndex(java.lang.Object[],java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$MethodCallExpression:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$MethodCallExpression:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object get(java.lang.Object)",
            "edu.stanford.nlp.util.Pair:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$WrappedExpression:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.fsm.TransducerGraph$Arc:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object remove(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayUtils:java.lang.Boolean lambda$getSubListIndex$278(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$VarAssignmentExpression:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.Triple:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayCoreMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap$Entry:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.lang.Boolean lambda$labelWords$130(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object put(java.lang.Object,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$WrappedExpression:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object get(java.lang.Object)",
            "edu.stanford.nlp.util.Pair:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$WrappedExpression:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.fsm.TransducerGraph$Arc:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object remove(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayUtils:java.lang.Boolean lambda$getSubListIndex$278(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$VarAssignmentExpression:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.Triple:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayCoreMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap$Entry:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.lang.Boolean lambda$labelWords$130(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object put(java.lang.Object,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$SimpleCachedExpression:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object get(java.lang.Object)",
            "edu.stanford.nlp.util.Pair:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$WrappedExpression:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.fsm.TransducerGraph$Arc:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$SimpleCachedExpression:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object remove(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayUtils:java.lang.Boolean lambda$getSubListIndex$278(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$VarAssignmentExpression:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.Triple:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayCoreMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap$Entry:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.lang.Boolean lambda$labelWords$130(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object put(java.lang.Object,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$VarAssignmentExpression:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object get(java.lang.Object)",
            "edu.stanford.nlp.util.Pair:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.fsm.TransducerGraph$Arc:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object remove(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayUtils:java.lang.Boolean lambda$getSubListIndex$278(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.ArrayMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.Triple:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayCoreMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.HashableCoreMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap$Entry:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.patterns.surface.SurfacePatternFactory:edu.stanford.nlp.util.Triple getContextTokenStr(edu.stanford.nlp.ling.CoreLabel)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.lang.Boolean lambda$labelWords$130(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.util.ArrayCoreMap:boolean equals(edu.stanford.nlp.util.ArrayCoreMap)"
        ]
    },
    "edu.stanford.nlp.util.TwoDimensionalSet:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.GeneralizedCounter:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Distribution:boolean equals(edu.stanford.nlp.stats.Distribution)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Distribution:boolean equals(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ling.RVFDatum:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.negra.NegraPennTreeNormalizer$2:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Tree:java.util.List spliceOutHelper(java.util.function.Predicate,edu.stanford.nlp.trees.TreeFactory)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.maxent.iis.LambdaSolve:double GainCompute(edu.stanford.nlp.maxent.Feature,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.AuxiliaryTree:void <init>(edu.stanford.nlp.trees.Tree,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonParser:edu.stanford.nlp.trees.tregex.tsurgeon.AuxiliaryTree TreeRoot(boolean)"
        ]
    },
    "edu.stanford.nlp.trees.international.spanish.SpanishTreebankLanguagePack:edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.spanish.SpanishTreebankLanguagePack:edu.stanford.nlp.trees.HeadFinder headFinder()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void <init>(edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.parser.lexparser.Lexicon,edu.stanford.nlp.parser.common.ParserGrammar,java.util.function.Function)",
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void processResults(edu.stanford.nlp.parser.common.ParserQuery,edu.stanford.nlp.trees.Tree,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,edu.stanford.nlp.trees.TreePrint)"
        ]
    },
    "edu.stanford.nlp.trees.international.spanish.SpanishHeadFinder:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SpanishTreebankParserParams:void <init>()",
            "edu.stanford.nlp.trees.international.spanish.SpanishHeadFinder:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.UnaryGrammar:void readObject(java.io.ObjectInputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.UnaryGrammar:void readData(java.io.BufferedReader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTextFile(java.lang.String,edu.stanford.nlp.parser.lexparser.Options)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.AuxiliaryTree:edu.stanford.nlp.trees.tregex.tsurgeon.AuxiliaryTree copy(edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonMatcher,edu.stanford.nlp.trees.TreeFactory,edu.stanford.nlp.ling.LabelFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.tsurgeon.CreateSubtreeNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToFootNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.HoldTreeNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToHeadNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.ling.RVFDatum makeRVFDatumFromStrings(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.ling.Datum makeDatumFromStrings(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.patterns.CandidatePhrase:void addFeature(java.lang.String,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter transform(edu.stanford.nlp.stats.Counter,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter retainBelow(edu.stanford.nlp.stats.Counter,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter multiplyInPlace(edu.stanford.nlp.stats.Counter,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter L2NormalizeInPlace(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.stats.ClassicCounter getWeights(java.util.List)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:void loadIntoCounter(java.lang.String,java.lang.Class,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.ClassicCounter loadCounter(java.lang.String,java.lang.Class)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.IntCounter loadIntCounter(java.lang.String,java.lang.Class)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter makeWeightCounter(double[],edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifier:void <init>(double[],edu.stanford.nlp.util.Index)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter toCounter(java.util.Map,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.BasicEntityExtractor:edu.stanford.nlp.ie.machinereading.structure.EntityMention makeEntityMention(edu.stanford.nlp.util.CoreMap,int,int,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.BasicEntityExtractor:void makeEntityMention(edu.stanford.nlp.util.CoreMap,int,int,java.lang.String,java.util.List,int)"
        ]
    },
    "edu.stanford.nlp.stats.Distribution:void addToKeySet(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution dynamicCounterWithDirichletPrior(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Distribution,double)",
            "edu.stanford.nlp.stats.Distribution$DynamicDistribution:void addToKeySet(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.sequences.KBestSequenceFinder:edu.stanford.nlp.stats.Counter kBestSequences(edu.stanford.nlp.sequences.SequenceModel,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:edu.stanford.nlp.stats.Counter classifyKBest(java.util.List,java.lang.Class,int)",
            "edu.stanford.nlp.sequences.KBestSequenceFinder:int[] bestSequence(edu.stanford.nlp.sequences.SequenceModel)"
        ]
    },
    "edu.stanford.nlp.classify.LogisticClassifier:edu.stanford.nlp.stats.Counter scoresOf(edu.stanford.nlp.ling.Datum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:void testExample(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset,java.util.List,edu.stanford.nlp.stats.Counter,int)"
        ]
    },
    "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution laplaceWithExplicitUnknown(edu.stanford.nlp.stats.Counter,double,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution goodTuringWithExplicitUnknown(edu.stanford.nlp.stats.Counter,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:edu.stanford.nlp.stats.Counter score()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.stats.Counter getPatterns(java.lang.String,java.util.Set,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.Counter,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.stats.Distribution:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sentiment.AbstractEvaluate:edu.stanford.nlp.stats.Counter lengthAccuracies()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.AbstractEvaluate:void printLengthAccuracies()"
        ]
    },
    "edu.stanford.nlp.stats.ClassicCounter:edu.stanford.nlp.stats.ClassicCounter valueOfIgnoreComments(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution getPerturbedUniformDistribution(java.util.Collection,java.util.Random)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.LogisticClassifier:edu.stanford.nlp.stats.Counter scoresOfRVFDatum(edu.stanford.nlp.ling.RVFDatum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LogisticClassifier:edu.stanford.nlp.stats.Counter scoresOf(edu.stanford.nlp.ling.RVFDatum)",
            "edu.stanford.nlp.classify.LogisticClassifier:edu.stanford.nlp.stats.Counter scoresOf(edu.stanford.nlp.ling.Datum)"
        ]
    },
    "edu.stanford.nlp.stats.ClassicCounter:edu.stanford.nlp.stats.ClassicCounter fromString(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.ling.RVFDatum makeRVFDatum(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.ling.RVFDatum makeRVFDatumFromStrings(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Dictionaries:void loadCorefDictPMI(java.lang.String,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Dictionaries:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String[],java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter scoresOf(edu.stanford.nlp.ling.RVFDatum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifier:void justificationOf(edu.stanford.nlp.ling.RVFDatum,java.io.PrintWriter)",
            "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter logProbabilityOf(edu.stanford.nlp.ling.RVFDatum)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:void testExample(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset,java.util.List,edu.stanford.nlp.stats.Counter,int)",
            "edu.stanford.nlp.classify.SVMLightClassifier:edu.stanford.nlp.stats.Counter logProbabilityOf(edu.stanford.nlp.ling.RVFDatum)",
            "edu.stanford.nlp.classify.LinearClassifier:java.lang.Object classOf(edu.stanford.nlp.ling.RVFDatum)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter scoresOf(int[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter logProbabilityOf(int[])"
        ]
    },
    "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution getPerturbedDistribution(edu.stanford.nlp.stats.Counter,java.util.Random)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.surface.LearnImportantFeatures:edu.stanford.nlp.ling.RVFDatum getDatum(edu.stanford.nlp.ling.CoreLabel[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.surface.LearnImportantFeatures:int sample(java.util.Map,java.util.Random,java.util.Random,double,double,int,java.util.List,edu.stanford.nlp.classify.RVFDataset)"
        ]
    },
    "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution goodTuringWithExplicitUnknown(edu.stanford.nlp.stats.Counter,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.classify.SVMLightClassifier trainClassifierBasic(edu.stanford.nlp.classify.GeneralDataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:java.lang.Double lambda$heldOutSetC$12(edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.stats.Scorer,edu.stanford.nlp.classify.GeneralDataset,java.lang.Double)",
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:java.lang.Double lambda$crossValidateSetC$10(edu.stanford.nlp.stats.Scorer,edu.stanford.nlp.util.Triple)",
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.classify.SVMLightClassifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter getCounts(edu.stanford.nlp.stats.Counter,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.PhraseTable:void readPhrasesWithTagScores(java.lang.String,java.util.regex.Pattern,java.util.regex.Pattern)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.PhraseTable:void readPhrasesWithTagScores(java.lang.String,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.ling.tokensregex.PhraseTable:void readPhrasesWithTagScores(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter toTiedRankCounter(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:double spearmanRankCorrelation(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)"
        ]
    },
    "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.classify.ColumnDataClassifier$Flags[] setProperties(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:void <init>(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution absolutelyDiscountedDistribution(edu.stanford.nlp.stats.Counter,int,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.Data:void loadDomainNGrams()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ScorePhrasesAverageFeatures:edu.stanford.nlp.stats.Counter scorePhrases(java.lang.String,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.Counter,java.util.Set,boolean)"
        ]
    },
    "edu.stanford.nlp.dcoref.Dictionaries:void loadCorefDictPMI(java.lang.String,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Dictionaries:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String[],java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution getDistributionFromLogValues(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter divideInPlace(edu.stanford.nlp.stats.Counter,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:double pearsonsCorrelationCoefficient(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.Counters:void normalize(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.Counters:void divideInPlace(edu.stanford.nlp.stats.TwoDimensionalCounter,double)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.BasicRelationFeatureFactory:void addDependencyPathFeatures(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.ie.machinereading.structure.RelationMention,edu.stanford.nlp.ie.machinereading.structure.EntityMention,edu.stanford.nlp.ie.machinereading.structure.EntityMention,java.util.List,java.util.List,java.util.logging.Logger)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.BasicRelationFeatureFactory:boolean addFeatures(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.ie.machinereading.structure.RelationMention,java.util.List,java.util.logging.Logger)"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.stats.Counter normalizeSoftMaxMinMaxScores(edu.stanford.nlp.stats.Counter,boolean,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:edu.stanford.nlp.stats.Counter convert2OneDim(java.lang.String,java.util.function.Function,java.util.Set,edu.stanford.nlp.stats.TwoDimensionalCounter,boolean,boolean,edu.stanford.nlp.stats.Counter,boolean)",
            "edu.stanford.nlp.patterns.ScorePhrasesAverageFeatures:edu.stanford.nlp.stats.Counter scorePhrases(java.lang.String,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.Counter,java.util.Set,boolean)",
            "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:edu.stanford.nlp.stats.Counter score()"
        ]
    },
    "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution getUniformDistribution(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Distribution:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter toCounter(double[],edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter getFCounter(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void setUpConstructor(java.util.Map,java.util.Map,boolean,java.util.Map,java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void <init>(java.util.Properties,java.util.Map,java.util.Set,boolean,java.lang.Class,java.lang.String)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void <init>(java.util.Properties,java.util.Map,java.util.Map,boolean,java.util.Map,java.util.Map,java.util.Map)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void <init>(java.util.Properties,java.util.Map,java.util.Set,boolean,java.lang.Class,java.lang.String,java.util.Map,java.util.Map)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void <init>(java.util.Properties,java.util.Map,java.util.Map,boolean)"
        ]
    },
    "edu.stanford.nlp.patterns.surface.ScorePatternsF1:edu.stanford.nlp.stats.Counter score()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.stats.Counter getPatterns(java.lang.String,java.util.Set,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.Counter,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.util.TreeMap readLearnedWordsFromFile(java.io.File)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.util.Map loadFromSavedPatternsWordsDir(edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.scoref.SimpleLinearClassifier:void setWeight(java.lang.String,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.Clusterer:void doTraining(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:void printDependencies(edu.stanford.nlp.trees.GrammaticalStructure,java.util.Collection,edu.stanford.nlp.trees.Tree,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.neural.Embedding:void <init>(java.lang.String,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.SentimentModel:void readWordVectors()",
            "edu.stanford.nlp.parser.dvparser.DVModel:void readWordVectors()",
            "edu.stanford.nlp.neural.Embedding:void <init>(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.hcoref.CorefSystem:java.util.Map coref(edu.stanford.nlp.hcoref.data.Document,java.lang.StringBuilder[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.CorefSystem:java.util.Map coref(edu.stanford.nlp.hcoref.data.Document)",
            "edu.stanford.nlp.hcoref.CorefSystem$1:java.lang.StringBuilder[] process(edu.stanford.nlp.util.Pair)"
        ]
    },
    "edu.stanford.nlp.trees.CollinsHeadFinder:void <init>(edu.stanford.nlp.trees.TreebankLanguagePack)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.CollinsHeadFinder:void <init>()"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Dictionaries:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String[],java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Dictionaries:void <init>(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.SunJurafskyChineseHeadFinder:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams:edu.stanford.nlp.trees.HeadFinder headFinder()",
            "edu.stanford.nlp.trees.tregex.gui.Preferences:edu.stanford.nlp.trees.HeadFinder lookupHeadFinder(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.io.IOUtils:java.util.List readCSVWithHeader(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void readModelAndInit(java.util.Properties,java.io.DataInputStream,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void readModelAndInit(java.util.Properties,java.lang.String,boolean)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:java.util.Map SetAttrValues(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequenceMatchAction AnnotateAction(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BinaryGrammar:void readData(java.io.BufferedReader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTextFile(java.lang.String,edu.stanford.nlp.parser.lexparser.Options)"
        ]
    },
    "edu.stanford.nlp.util.XMLUtils:edu.stanford.nlp.util.XMLUtils$XMLTag parseTag(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.XMLUtils:java.lang.String stripTags(java.io.Reader,java.util.List,boolean)",
            "edu.stanford.nlp.pipeline.CleanXmlAnnotator:java.util.List process(edu.stanford.nlp.pipeline.Annotation,java.util.List)",
            "edu.stanford.nlp.objectbank.XMLBeginEndIterator:java.lang.String getNext()"
        ]
    },
    "edu.stanford.nlp.util.XMLUtils:edu.stanford.nlp.util.XMLUtils$XMLTag readAndParseTag(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.XMLUtils:java.lang.String escapeTextAroundXMLTags(java.lang.String)",
            "edu.stanford.nlp.objectbank.XMLBeginEndIterator:java.lang.String getNext()"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter:void incrementCount1D(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceToken:void loadGazetteers(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.SpanishTreebankParserParams:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.Language:void <clinit>()"
        ]
    },
    "edu.stanford.nlp.hcoref.Preprocessor:void initializeMentions(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,edu.stanford.nlp.classify.LogisticClassifier,edu.stanford.nlp.trees.HeadFinder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.Preprocessor:void preprocess(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,edu.stanford.nlp.classify.LogisticClassifier,edu.stanford.nlp.trees.HeadFinder)"
        ]
    },
    "edu.stanford.nlp.util.PropertiesUtils:java.util.List getSortedEntries(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.PropertiesUtils:void printProperties(java.lang.String,java.util.Properties,java.io.PrintStream)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams:void setHeadFinder(edu.stanford.nlp.trees.HeadFinder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams:int setOptionFlag(java.lang.String[],int)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SpanishTreebankParserParams:void setHeadFinder(edu.stanford.nlp.trees.HeadFinder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SpanishTreebankParserParams:void <init>()",
            "edu.stanford.nlp.parser.lexparser.SpanishTreebankParserParams:int setOptionFlag(java.lang.String[],int)"
        ]
    },
    "edu.stanford.nlp.sentiment.SentimentCostAndGradient$ModelDerivatives:edu.stanford.nlp.util.TwoDimensionalMap initDerivatives(edu.stanford.nlp.util.TwoDimensionalMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient$ModelDerivatives:void <init>(edu.stanford.nlp.sentiment.SentimentModel)"
        ]
    },
    "edu.stanford.nlp.sentiment.SentimentCostAndGradient$ModelDerivatives:edu.stanford.nlp.util.TwoDimensionalMap initTensorDerivatives(edu.stanford.nlp.util.TwoDimensionalMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient$ModelDerivatives:void <init>(edu.stanford.nlp.sentiment.SentimentModel)"
        ]
    },
    "edu.stanford.nlp.sentiment.SentimentModel:void <init>(edu.stanford.nlp.sentiment.RNNOptions,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.SentimentTraining:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.sentiment.SentimentModel:edu.stanford.nlp.sentiment.SentimentModel modelFromMatrices(org.ejml.simple.SimpleMatrix,org.ejml.simple.SimpleMatrix,edu.stanford.nlp.neural.SimpleTensor,java.util.Map,edu.stanford.nlp.sentiment.RNNOptions)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.TwoDimensionalSet:boolean add(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Document:void addIncompatible(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention)",
            "edu.stanford.nlp.sentiment.SentimentModel:void <init>(edu.stanford.nlp.sentiment.RNNOptions,java.util.List)",
            "edu.stanford.nlp.util.TwoDimensionalSet:boolean addAllKeys(edu.stanford.nlp.util.TwoDimensionalMap)",
            "edu.stanford.nlp.dcoref.Document:void mergeIncompatibles(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster)",
            "edu.stanford.nlp.parser.dvparser.DVModel:void searchRulesForBatch(edu.stanford.nlp.util.TwoDimensionalSet,java.util.Set,java.util.Set,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.dcoref.Document:void mergeAcronymCache(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster)",
            "edu.stanford.nlp.util.TwoDimensionalSet:boolean addAll(edu.stanford.nlp.util.TwoDimensionalSet)",
            "edu.stanford.nlp.parser.dvparser.FilterConfusingRules:void <init>(edu.stanford.nlp.parser.lexparser.LexicalizedParser)"
        ]
    },
    "edu.stanford.nlp.parser.dvparser.DVParserCostAndGradient:void calculate(double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.AbstractCachingDiffFunction:void ensure(double[])"
        ]
    },
    "edu.stanford.nlp.util.TwoDimensionalMap:void addAll(edu.stanford.nlp.util.TwoDimensionalMap,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.md.HybridCorefMentionFinder:java.util.List findMentions(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.MentionAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.hcoref.md.RuleBasedCorefMentionFinder:java.util.List findMentions(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.MentionAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.stats.IntCounter:void setCounts(java.util.Collection,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.IntCounter:void setCount(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.IntCounter toRankCounter(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Rules:boolean sentenceContextIncompatible(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.hcoref.Rules:boolean sentenceContextIncompatible(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.hcoref.Rules:boolean contextIncompatible(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.dcoref.Rules:boolean contextIncompatible(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.stats.IntCounter:void setCount(java.lang.Object,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:void addFeature(java.lang.Object,java.lang.Object,double)",
            "edu.stanford.nlp.stats.Counters$3:java.lang.Double put(java.lang.Object,java.lang.Double)",
            "edu.stanford.nlp.parser.lexparser.RandomWalk:void <init>(java.util.Collection,int)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:edu.stanford.nlp.stats.IntCounter totalCounts()",
            "edu.stanford.nlp.scoref.SimpleLinearClassifier:void learn(edu.stanford.nlp.stats.Counter,double,double,edu.stanford.nlp.scoref.SimpleLinearClassifier$Loss)",
            "edu.stanford.nlp.stats.Counters:void loadIntoCounter(java.lang.String,java.lang.Class,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.scoref.SimpleLinearClassifier:void setWeight(java.lang.String,double)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void splitStateCounts()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void extract(java.util.Collection,double,java.util.Collection,double)"
        ]
    },
    "edu.stanford.nlp.util.DeltaMap:java.lang.Object remove(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.DeltaMap:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams:edu.stanford.nlp.trees.HeadFinder headFinder()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams:void initializeAnnotationPatterns()",
            "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams:edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()"
        ]
    },
    "edu.stanford.nlp.trees.international.french.DybroFrenchHeadFinder:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.french.DybroFrenchHeadFinder:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.tregex.gui.Preferences:edu.stanford.nlp.trees.HeadFinder lookupHeadFinder(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:void makeEntity(int,int,int,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:void readPredictedEntityBoundaries(java.io.BufferedReader)"
        ]
    },
    "edu.stanford.nlp.trees.international.negra.NegraPennLanguagePack:edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.negra.NegraPennLanguagePack:edu.stanford.nlp.trees.HeadFinder headFinder()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void <init>(edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.parser.lexparser.Lexicon,edu.stanford.nlp.parser.common.ParserGrammar,java.util.function.Function)",
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void processResults(edu.stanford.nlp.parser.common.ParserQuery,edu.stanford.nlp.trees.Tree,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,edu.stanford.nlp.trees.TreePrint)"
        ]
    },
    "edu.stanford.nlp.trees.international.negra.NegraHeadFinder:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.negra.NegraHeadFinder:edu.stanford.nlp.trees.HeadFinder negraSemanticHeadFinder()",
            "edu.stanford.nlp.trees.tregex.gui.Preferences:edu.stanford.nlp.trees.HeadFinder lookupHeadFinder(java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.NegraPennTreebankParserParams:void <init>()"
        ]
    },
    "edu.stanford.nlp.trees.international.tuebadz.TueBaDZLanguagePack:edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.tuebadz.TueBaDZLanguagePack:edu.stanford.nlp.trees.HeadFinder headFinder()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.gui.Preferences:edu.stanford.nlp.trees.HeadFinder lookupHeadFinder(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.PreferencesPanel$1:void actionPerformed(java.awt.event.ActionEvent)",
            "edu.stanford.nlp.trees.tregex.gui.Preferences:edu.stanford.nlp.trees.HeadFinder getHeadFinder()"
        ]
    },
    "edu.stanford.nlp.process.DistSimClassifier:void <init>(java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EnglishUnknownWordModel:void getSignature8(java.lang.String,java.lang.StringBuilder)"
        ]
    },
    "edu.stanford.nlp.process.DistSimClassifier:void <init>(java.lang.String,boolean,boolean,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.international.arabic.ArabicMorphoFeatureSpecification$ArabicMorphoFeatures:edu.stanford.nlp.international.morph.MorphoFeatures fromTagString(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.international.morph.MorphoFeatures:edu.stanford.nlp.international.morph.MorphoFeatures fromTagString(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.international.french.FrenchMorphoFeatureSpecification:void addPhiFeatures(edu.stanford.nlp.international.morph.MorphoFeatures,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.french.FrenchMorphoFeatureSpecification:edu.stanford.nlp.international.morph.MorphoFeatures strToFeatures(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.international.arabic.ArabicMorphoFeatureSpecification:void processInflectionalFeaturesHelper(edu.stanford.nlp.international.morph.MorphoFeatures,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.arabic.ArabicMorphoFeatureSpecification:void processInflectionalFeatures(edu.stanford.nlp.international.morph.MorphoFeatures,java.lang.String)",
            "edu.stanford.nlp.international.arabic.ArabicMorphoFeatureSpecification:edu.stanford.nlp.international.morph.MorphoFeatures strToFeatures(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.international.arabic.ArabicMorphoFeatureSpecification:edu.stanford.nlp.international.morph.MorphoFeatures strToFeatures(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.arabic.process.IOBUtils:void tokenToDatums(java.util.List,edu.stanford.nlp.ling.CoreLabel,java.lang.String,edu.stanford.nlp.international.arabic.process.IOBUtils$TokenType,edu.stanford.nlp.ling.CoreLabel,java.lang.String,boolean,boolean)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void train(java.util.Collection,java.util.Collection)",
            "edu.stanford.nlp.international.arabic.ArabicMorphoFeatureSpecification:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:java.util.List treebankToLexiconEvents(java.util.List,edu.stanford.nlp.parser.lexparser.FactoredLexicon)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,int,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.international.french.FrenchMorphoFeatureSpecification:edu.stanford.nlp.international.morph.MorphoFeatures strToFeatures(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.french.FrenchTreeNormalizer:void replacePOSTag(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.international.morph.MorphoFeatureSpecification)",
            "edu.stanford.nlp.international.french.FrenchMorphoFeatureSpecification:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void train(java.util.Collection,java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:java.util.List treebankToLexiconEvents(java.util.List,edu.stanford.nlp.parser.lexparser.FactoredLexicon)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,int,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.util.logging.JavaUtilLoggingAdaptor:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.RedwoodConfiguration:edu.stanford.nlp.util.logging.RedwoodConfiguration output(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.RedwoodConfiguration:edu.stanford.nlp.util.logging.RedwoodConfiguration parse(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.sentiment.AbstractEvaluate:void reset()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.AbstractEvaluate:void <init>(edu.stanford.nlp.sentiment.RNNOptions)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.SemgrexParser:edu.stanford.nlp.semgraph.semgrex.SemgrexPattern Child(edu.stanford.nlp.semgraph.semgrex.GraphRelation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.SemgrexParser:edu.stanford.nlp.semgraph.semgrex.SemgrexPattern ModNode(edu.stanford.nlp.semgraph.semgrex.GraphRelation)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.Language:void <clinit>()",
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.sentiment.BuildBinarizedDataset:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.Dictionaries:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String[],java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Dictionaries:void <init>(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.neural.Embedding:void <init>(java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.neural.Embedding:void <init>(java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.util.BinaryHeapPriorityQueue:boolean add(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Tree:java.util.Set localTrees()",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:void killNonRooted(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.dcoref.MentionExtractor:void addFoundPair(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.util.Set)",
            "edu.stanford.nlp.hcoref.Rules:boolean entityNumberInLaterMention(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)",
            "edu.stanford.nlp.pipeline.CustomAnnotationSerializer:java.util.Map loadCorefChains(java.io.BufferedReader)",
            "edu.stanford.nlp.util.CollectionUtils:java.util.Set unionAsSet(java.util.Collection,java.util.Collection)",
            "edu.stanford.nlp.stats.GeneralizedCounter:java.util.Set keySet(java.util.Set,java.lang.Object[],boolean)",
            "edu.stanford.nlp.dcoref.Dictionaries:void setPronouns()",
            "edu.stanford.nlp.hcoref.md.RuleBasedCorefMentionFinder:java.util.List filterPredictedMentions(java.util.List,edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)",
            "edu.stanford.nlp.semgraph.SemanticGraph:void <init>(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Map)",
            "edu.stanford.nlp.hcoref.data.Dictionaries:void setPronouns()",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$OrPatternExpr:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr optimizeOrStringSeqs()",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void postProcessing(edu.stanford.nlp.dcoref.Document)",
            "edu.stanford.nlp.semgraph.SemanticGraphFormatter:void formatSGNodeOnelineHelper(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.lang.StringBuilder,java.util.Set)",
            "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:void addMention(int,int,edu.stanford.nlp.ling.IndexedWord,java.util.List,java.util.Set,java.util.Set,java.util.List,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter chooseTopWords(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.Counter,java.util.Set,double)",
            "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String printConllOutput(edu.stanford.nlp.hcoref.data.Document,java.util.List,boolean)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Collection removeDuplicates(java.util.Collection,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.hcoref.data.CorefChain:void <init>(edu.stanford.nlp.hcoref.data.CorefCluster,java.util.Map)",
            "edu.stanford.nlp.hcoref.data.Dictionaries:void loadChineseGenderNumberAnimacy(java.lang.String)",
            "edu.stanford.nlp.graph.DijkstraShortestPath:java.util.List getShortestPath(edu.stanford.nlp.graph.Graph,java.lang.Object,java.lang.Object,boolean)",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Set getSubgraphVertices(edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.hcoref.data.Mention:void addApposition(edu.stanford.nlp.hcoref.data.Mention)",
            "edu.stanford.nlp.trees.Tree:java.util.Collection subTrees(java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void countOriginalStates(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.dcoref.Mention:void addPredicateNominatives(edu.stanford.nlp.dcoref.Mention)",
            "edu.stanford.nlp.dcoref.Rules:boolean entityHaveIncompatibleModifier(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention)",
            "edu.stanford.nlp.util.Sets:java.util.Set cross(java.util.Set,java.util.Set)",
            "edu.stanford.nlp.tagger.maxent.CtbDict:void readCtbDict(java.lang.String)",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void treatCC(java.util.Collection)",
            "edu.stanford.nlp.tagger.maxent.TTags:void <init>(java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.BinaryGrammarExtractor:void tallyInternalNode(edu.stanford.nlp.trees.Tree,double)",
            "edu.stanford.nlp.trees.Treebank:java.lang.String textualSummary(edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.hcoref.md.RuleBasedCorefMentionFinder:void removeSpuriousMentionsEn(edu.stanford.nlp.pipeline.Annotation,java.util.List,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.semgraph.SemanticGraph$SemanticGraphParsingTask:edu.stanford.nlp.ling.IndexedWord makeVertex(java.lang.String)",
            "edu.stanford.nlp.semgraph.SemanticGraph:void <init>(java.util.Collection)",
            "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:void findCoreferentAntecedent(edu.stanford.nlp.hcoref.data.Mention,int,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.StringBuilder)",
            "edu.stanford.nlp.parser.lexparser.ChineseUnknownWordModelTrainer:void train(edu.stanford.nlp.ling.TaggedWord,int,double)",
            "edu.stanford.nlp.parser.lexparser.Lattice:void addEdge(edu.stanford.nlp.parser.lexparser.LatticeEdge)",
            "edu.stanford.nlp.parser.lexparser.BinaryGrammar:void addRule(edu.stanford.nlp.parser.lexparser.BinaryRule)",
            "edu.stanford.nlp.wordseg.CorpusChar:java.util.Map readDict(java.lang.String)",
            "edu.stanford.nlp.util.CollectionUtils:void addAll(java.util.Collection,java.lang.Iterable)",
            "edu.stanford.nlp.hcoref.data.Dictionaries:void getWordsFromFile(java.lang.String,java.util.Set,boolean)",
            "edu.stanford.nlp.trees.Tree:java.util.Set mapDependencies(java.util.function.Predicate,edu.stanford.nlp.trees.HeadFinder,java.lang.String)",
            "edu.stanford.nlp.patterns.InvertedIndexByTokens:void add(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void initRulesWithWord()",
            "edu.stanford.nlp.process.WordShapeClassifier:java.lang.String wordShapeChris4Long(java.lang.String,boolean,int,java.util.Collection)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void construct(java.util.Properties,boolean,edu.stanford.nlp.pipeline.AnnotatorImplementations)",
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:java.util.Set findRootStates(java.util.List)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:void addFeature(java.lang.Object,java.lang.Object,double)",
            "edu.stanford.nlp.fsm.TransducerGraph:void <init>(java.util.Set,java.lang.Object,java.util.Set,edu.stanford.nlp.fsm.TransducerGraph$ArcProcessor,edu.stanford.nlp.fsm.TransducerGraph$NodeProcessor)",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:void extractEnumerations(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.sequences.FeatureFactory:void addAllInterningAndSuffixing(java.util.Collection,java.util.Collection,java.lang.String)",
            "edu.stanford.nlp.dcoref.ScorerMUC:void calculatePrecision(edu.stanford.nlp.dcoref.Document)",
            "edu.stanford.nlp.stats.IntCounter:java.util.Set keysAbove(int)",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:int addMap(java.util.Map)",
            "edu.stanford.nlp.dcoref.sievepasses.NameMatch:void <init>()",
            "edu.stanford.nlp.hcoref.data.Document:void extractGoldCorefClusters()",
            "edu.stanford.nlp.hcoref.data.Document:void mergeIncompatibles(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster)",
            "edu.stanford.nlp.wordseg.affDict:java.util.Set readDict(java.lang.String)",
            "edu.stanford.nlp.trees.GrammaticalStructure:java.util.Collection getRoots(java.util.Collection)",
            "edu.stanford.nlp.dcoref.Mention:void addApposition(edu.stanford.nlp.dcoref.Mention)",
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:void findKnownStates(edu.stanford.nlp.trees.Tree,java.util.Set)",
            "edu.stanford.nlp.dcoref.Mention:void addBelongsToList(edu.stanford.nlp.dcoref.Mention)",
            "edu.stanford.nlp.ie.NERFeatureFactory:void readGazette(java.io.BufferedReader)",
            "edu.stanford.nlp.wordseg.CorpusDictionary:java.util.Set readDict(java.lang.String,boolean)",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:java.util.Set normalize(java.util.Set)",
            "edu.stanford.nlp.parser.lexparser.HookChart:void registerEdgeIndexes(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.trees.international.french.FrenchXMLTreeReader:void main(java.lang.String[])",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:void removeSpuriousMentions(edu.stanford.nlp.util.CoreMap,java.util.List,edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Set getChildrenWithRelns(edu.stanford.nlp.ling.IndexedWord,java.util.Collection)",
            "edu.stanford.nlp.trees.international.pennchinese.RadicalMap:void <clinit>()",
            "edu.stanford.nlp.dcoref.ACEMentionExtractor:void printRawDoc(java.util.List,java.util.List,java.lang.String,boolean)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void initRulesWithWord()",
            "edu.stanford.nlp.dcoref.Dictionaries:void loadCountriesLists(java.lang.String)",
            "edu.stanford.nlp.semgraph.SemanticGraph$SemanticGraphParsingTask:void readDep(edu.stanford.nlp.ling.IndexedWord,java.lang.String)",
            "edu.stanford.nlp.dcoref.Document:void processDiscourse(edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.trees.tregex.TregexParser:edu.stanford.nlp.trees.tregex.DescriptionPattern Description(edu.stanford.nlp.trees.tregex.Relation,boolean,boolean)",
            "edu.stanford.nlp.dcoref.Rules:boolean entityHaveDifferentLocation(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.time.JodaTimeUtils:java.util.Set getSupportedDurationFields(org.joda.time.Partial)",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:java.util.Map getReverseMap()",
            "edu.stanford.nlp.hcoref.md.HybridCorefMentionFinder:void removeSpuriousMentionsEn(edu.stanford.nlp.pipeline.Annotation,java.util.List,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:java.util.Set secondKeySet()",
            "edu.stanford.nlp.fsm.TransducerGraph:void setEndNode(java.lang.Object)",
            "edu.stanford.nlp.hcoref.data.Mention:java.util.List getContextHelper(java.util.List)",
            "edu.stanford.nlp.hcoref.md.HybridCorefMentionFinder:void extractNamedEntityMentions(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.ie.regexp.RegexNERSequenceClassifier:void <init>(java.lang.String,boolean,boolean,java.lang.String)",
            "edu.stanford.nlp.semgraph.SemanticGraph:void addRoot(edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.util.Sets:void main(java.lang.String[])",
            "edu.stanford.nlp.util.CollectionValuedMap:void add(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.dcoref.Mention:void addListMember(edu.stanford.nlp.dcoref.Mention)",
            "edu.stanford.nlp.ie.NERFeatureFactory:java.util.Collection occurrencePatterns(edu.stanford.nlp.util.PaddedList,int)",
            "edu.stanford.nlp.classify.Dataset:edu.stanford.nlp.classify.Dataset getRandomSubDataset(double,int)",
            "edu.stanford.nlp.ie.crf.LabelDictionary:void increment(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.hcoref.Rules:boolean entityHaveDifferentLocation(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void treatCC(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.tagger.maxent.TTags:void read(java.io.DataInputStream)",
            "edu.stanford.nlp.trees.Tree:java.util.Collection labels()",
            "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:void averageModels(java.util.Collection)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:void tabuDescendantsHelper(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Set,java.util.Collection,java.util.Collection,edu.stanford.nlp.semgraph.IndexedWordUnaryPred)",
            "edu.stanford.nlp.ie.NERFeatureFactory:java.util.Collection featuresC(edu.stanford.nlp.util.PaddedList,int)",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:java.util.Map corefReturnHybridOutput(edu.stanford.nlp.dcoref.Document)",
            "edu.stanford.nlp.trees.Tree:java.util.Set mapDependencies(java.util.function.Predicate,edu.stanford.nlp.trees.HeadFinder)",
            "edu.stanford.nlp.semgraph.semgrex.SemgrexParser:edu.stanford.nlp.semgraph.semgrex.NodePattern Description(edu.stanford.nlp.semgraph.semgrex.GraphRelation)",
            "edu.stanford.nlp.pipeline.DeterministicCorefAnnotator:void addObsoleteCoreferenceAnnotations(edu.stanford.nlp.pipeline.Annotation,java.util.List,java.util.Map)",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Set getLeafVertices()",
            "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:void <clinit>()",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Set childRelns(edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:java.util.Set tagSet()",
            "edu.stanford.nlp.pipeline.TokensRegexNERAnnotator:void <init>(java.lang.String,java.util.Properties)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.classify.Classifier makeClassifierAdaptL1(edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.fsm.DFSAState:void exploreStates(java.util.List,java.util.Set)",
            "edu.stanford.nlp.classify.Dataset:void printFullFeatureMatrix(java.io.PrintWriter)",
            "edu.stanford.nlp.hcoref.Rules:boolean entityHaveIncompatibleModifier(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)",
            "edu.stanford.nlp.parser.lexparser.GrammarCompactor:java.util.Map convertGrammarToGraphs(edu.stanford.nlp.util.Pair,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.dcoref.Rules:boolean entityHaveExtraProperNoun(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,java.util.Set)",
            "edu.stanford.nlp.ie.regexp.RegexNERSequenceClassifier:void <init>(java.io.BufferedReader,boolean,boolean,java.lang.String)",
            "edu.stanford.nlp.dcoref.Dictionaries:void getWordsFromFile(java.lang.String,java.util.Set,boolean)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:edu.stanford.nlp.semgraph.SemanticGraphUtils$EdgeDiffResult diffEdges(java.util.Collection,java.util.Collection,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.ISemanticGraphEdgeEql)",
            "edu.stanford.nlp.tagger.maxent.TTags:java.util.Set getOpenTags()",
            "edu.stanford.nlp.util.Sets:java.util.Set symmetricDiff(java.util.Set,java.util.Set)",
            "edu.stanford.nlp.dcoref.CorefChain:void <init>(edu.stanford.nlp.dcoref.CorefCluster,java.util.Map)",
            "edu.stanford.nlp.dcoref.ScorerMUC:void calculateRecall(edu.stanford.nlp.dcoref.Document)",
            "edu.stanford.nlp.process.DocumentPreprocessor$PlainTextIterator:void <init>(edu.stanford.nlp.process.DocumentPreprocessor)",
            "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:void removeSpuriousMentionsEn(edu.stanford.nlp.pipeline.Annotation,java.util.List,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:void collapsePrepAndPoss(java.util.Collection)",
            "edu.stanford.nlp.util.Maps:void putIntoValueCollection(java.util.Map,java.lang.Object,java.lang.Object,edu.stanford.nlp.util.CollectionFactory)",
            "edu.stanford.nlp.trees.Dependencies:java.util.Set getGovMaxChains(java.util.Map,edu.stanford.nlp.ling.IndexedWord,int)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:void extractEnumerations(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.tagger.maxent.ReadDataTagged:void loadFile(edu.stanford.nlp.tagger.io.TaggedFileReader,java.util.Map)",
            "edu.stanford.nlp.semgraph.SemanticGraph:void topologicalSortHelper(edu.stanford.nlp.ling.IndexedWord,java.util.Set,java.util.Set,java.util.List)",
            "edu.stanford.nlp.util.IdentityHashSet:void main(java.lang.String[])",
            "edu.stanford.nlp.tagger.maxent.CTBunkDict:void readCTBunkDict(java.lang.String)",
            "edu.stanford.nlp.util.logging.VisibilityHandler:boolean alsoShow(java.lang.Object)",
            "edu.stanford.nlp.ie.crf.CRFNonLinearLogConditionalObjectiveFunction:java.util.Set getRegularizerParamRange(double[])",
            "edu.stanford.nlp.parser.lexparser.UnknownGTTrainer:void train(edu.stanford.nlp.ling.TaggedWord,double)",
            "edu.stanford.nlp.hcoref.sieve.RFSieve:edu.stanford.nlp.ling.RVFDatum extractDatum(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,int,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.String)",
            "edu.stanford.nlp.stats.Counters:java.util.Set retainKeys(edu.stanford.nlp.stats.Counter,java.util.Collection)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:void getSubTreeEdgesHelper(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,java.util.Set)",
            "edu.stanford.nlp.hcoref.md.RuleBasedCorefMentionFinder:void extractNamedEntityMentions(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.hcoref.Rules:boolean entitySameProperHeadLastWord(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:java.util.Collection addOtherClasses(java.util.Collection,java.util.List,int,edu.stanford.nlp.sequences.Clique)",
            "edu.stanford.nlp.hcoref.data.Dictionaries:void loadCountriesLists(java.lang.String)",
            "edu.stanford.nlp.parser.metrics.EvalbByCat:java.util.Map makeObjectsByCat(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.tagger.maxent.CaselessCompanyNameDetector:void <init>()",
            "edu.stanford.nlp.dcoref.Rules:boolean entitySameProperHeadLastWord(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention)",
            "edu.stanford.nlp.graph.ConnectedComponents:java.util.Set bfs(java.util.LinkedList,edu.stanford.nlp.graph.Graph,java.util.List)",
            "edu.stanford.nlp.hcoref.data.Mention:void addBelongsToList(edu.stanford.nlp.hcoref.data.Mention)",
            "edu.stanford.nlp.dcoref.Rules:boolean entityNumberInLaterMention(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention)",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Set relns(edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.hcoref.data.Mention:void addListMember(edu.stanford.nlp.hcoref.data.Mention)",
            "edu.stanford.nlp.util.logging.VisibilityHandler:boolean alsoHide(java.lang.Object)",
            "edu.stanford.nlp.trees.Trees:java.lang.String toStructureDebugString(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.semgraph.SemanticGraphFormatter:void formatSGNode(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,int)",
            "edu.stanford.nlp.util.Sets:java.util.Set diff(java.util.Set,java.util.Set)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Set allEdgesInSet(java.lang.Iterable,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.stats.Counters:java.util.Set keysAt(edu.stanford.nlp.stats.Counter,double)",
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:int[] findBestUsingAnnealing(edu.stanford.nlp.sequences.SequenceModel,edu.stanford.nlp.sequences.CoolingSchedule,int[])",
            "edu.stanford.nlp.dcoref.CorefCluster:void <init>(int,java.util.Set)",
            "edu.stanford.nlp.parser.lexparser.TregexPoweredTreebankParserParams:void addFeature(java.lang.String)",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void printRawDoc(edu.stanford.nlp.dcoref.Document,boolean)",
            "edu.stanford.nlp.util.Interner:java.util.Set internAll(java.util.Set)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:void extractNamedEntityMentions(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.trees.Tree:java.util.Set dependencies(java.util.function.Predicate,boolean,boolean,boolean)",
            "edu.stanford.nlp.util.logging.RedwoodConfiguration:java.lang.String get(java.util.Properties,java.lang.String,java.lang.String,java.util.Set)",
            "edu.stanford.nlp.fsm.TransducerGraph:boolean addArc(edu.stanford.nlp.fsm.TransducerGraph$Arc)",
            "edu.stanford.nlp.fsm.DFSA:void printAttFsmFormat(java.io.Writer)",
            "edu.stanford.nlp.dcoref.Document:void extractGoldCorefClusters()",
            "edu.stanford.nlp.hcoref.data.Document:void addIncompatible(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)",
            "edu.stanford.nlp.util.Iterables:java.util.Collection addAll(java.util.Iterator,java.util.Collection)",
            "edu.stanford.nlp.classify.LinearClassifier:java.util.Set getLabelIndices(java.util.Set)",
            "edu.stanford.nlp.pipeline.CorefAnnotator:void annotateOldFormat(java.util.Map,edu.stanford.nlp.hcoref.data.Document)",
            "edu.stanford.nlp.stats.Counters:java.util.Set keysAbove(edu.stanford.nlp.stats.Counter,double)",
            "edu.stanford.nlp.hcoref.data.Mention:void addPredicateNominatives(edu.stanford.nlp.hcoref.data.Mention)",
            "edu.stanford.nlp.hcoref.CorefSystem:void postProcessing(edu.stanford.nlp.hcoref.data.Document)",
            "edu.stanford.nlp.ie.NERFeatureFactory:void makeGenericKeyCache(edu.stanford.nlp.ling.CoreLabel)",
            "edu.stanford.nlp.parser.lexparser.GrammarCompactor:edu.stanford.nlp.util.Triple compactGrammar(edu.stanford.nlp.util.Pair,java.util.Map,java.util.Map,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.dcoref.Mention:void addRelativePronoun(edu.stanford.nlp.dcoref.Mention)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Collection getDependencyBlanket(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Collection)",
            "edu.stanford.nlp.hcoref.data.Dictionaries:void loadDemonymLists(java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.GrammarCompactor:edu.stanford.nlp.util.Pair convertGraphsToGrammar(java.util.Set,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.stats.IntCounter:java.util.Set keysAt(int)",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void optimizeSieveOrdering(edu.stanford.nlp.dcoref.MentionExtractor,java.util.Properties,java.lang.String)",
            "edu.stanford.nlp.semgraph.SemanticGraph:boolean isDagHelper(edu.stanford.nlp.ling.IndexedWord,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.hcoref.md.RuleBasedCorefMentionFinder:void extractNPorPRP(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.stats.Counters:java.util.Set retainMatchingKeys(edu.stanford.nlp.stats.Counter,java.util.List)",
            "edu.stanford.nlp.stats.Counters:java.util.Set retainAbove(edu.stanford.nlp.stats.Counter,double)",
            "edu.stanford.nlp.tagger.maxent.TaggerExperiments:boolean add(edu.stanford.nlp.tagger.maxent.FeatureKey)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:java.util.Set secondKeySet()",
            "edu.stanford.nlp.tagger.maxent.TTags:void markClosed(java.lang.String)",
            "edu.stanford.nlp.semgraph.SemanticGraph:void descendantsHelper(edu.stanford.nlp.ling.IndexedWord,java.util.Set)",
            "edu.stanford.nlp.international.arabic.process.ArabicSegmenterFeatureFactory:java.util.Collection getCliqueFeatures(edu.stanford.nlp.util.PaddedList,int,edu.stanford.nlp.sequences.Clique)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.lang.String semgrexFromGraphHelper(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,java.util.Set,java.util.Set,boolean,boolean,java.util.Collection,java.util.Map,boolean,java.util.function.Function)",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:void addNamedEntityStrings(edu.stanford.nlp.util.CoreMap,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.semgraph.SemanticGraph:void toCompactStringHelper(edu.stanford.nlp.ling.IndexedWord,java.lang.StringBuilder,java.util.Set,boolean)",
            "edu.stanford.nlp.fsm.DFSAState:java.util.Set successorStates()",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:void extractNPorPRP(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.classify.GeneralizedExpectationObjectiveFunction:void computeEmpiricalStatistics(java.util.List)",
            "edu.stanford.nlp.util.logging.VisibilityHandler:void <init>(java.lang.Object[])",
            "edu.stanford.nlp.dcoref.Dictionaries:void loadDemonymLists(java.lang.String)",
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.hcoref.data.Mention fromProtoNoTokens(edu.stanford.nlp.pipeline.CoreNLPProtos$Mention)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:void extractPremarkedEntityMentions(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.hcoref.data.CorefCluster:void <init>(int,java.util.Set)",
            "edu.stanford.nlp.hcoref.md.HybridCorefMentionFinder:void extractNPorPRP(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.tagger.maxent.CompanyNameDetector:void <init>()",
            "edu.stanford.nlp.stats.Counters:java.util.Set keysBelow(edu.stanford.nlp.stats.Counter,double)",
            "edu.stanford.nlp.parser.metrics.EvalbByCat:java.util.Set getEvalLabelSet(java.util.Set)",
            "edu.stanford.nlp.semgraph.SemanticGraph:void recToString(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.CoreLabel$OutputFormat,java.lang.StringBuilder,int,java.util.Set)",
            "edu.stanford.nlp.stats.Counters:java.util.Set retainNonZeros(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.hcoref.Preprocessor:void extractGoldClusters(edu.stanford.nlp.hcoref.data.Document)",
            "edu.stanford.nlp.stats.Distribution:void main(java.lang.String[])",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:void removeSpuriousMentionsZh(edu.stanford.nlp.pipeline.Annotation,java.util.List,edu.stanford.nlp.hcoref.data.Dictionaries,boolean)",
            "edu.stanford.nlp.hcoref.Preprocessor:void processDiscourse(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void coreference(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve)",
            "edu.stanford.nlp.hcoref.sieve.NameMatch:void <init>()",
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.ling.Datum makeDatum(java.lang.String[])",
            "edu.stanford.nlp.international.morph.MorphoFeatureSpecification:void activate(edu.stanford.nlp.international.morph.MorphoFeatureSpecification$MorphoFeatureType)",
            "edu.stanford.nlp.sentiment.SentimentModel:void <init>(edu.stanford.nlp.sentiment.RNNOptions,java.util.List)",
            "edu.stanford.nlp.util.PropertiesUtils:void checkProperties(java.util.Properties,java.util.Properties)",
            "edu.stanford.nlp.parser.metrics.AbstractEval$RuleErrorEval:java.util.Set makeObjects(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.stats.IntCounter:java.util.Set keysBelow(int)",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void printConllOutput(edu.stanford.nlp.dcoref.Document,java.io.PrintWriter,java.util.List,boolean)",
            "edu.stanford.nlp.util.CollectionUtils:java.util.Set transformAsSet(java.util.Collection,java.util.function.Function)",
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:boolean add(java.lang.Object,double)",
            "edu.stanford.nlp.util.CollectionUtils:java.util.Set unionAsSet(java.util.Collection[])",
            "edu.stanford.nlp.ie.ner.CMMClassifier:void makeAnswerArraysAndTagIndex(java.util.Collection)",
            "edu.stanford.nlp.fsm.DFSA:void exploreStates(java.util.List,java.util.Set)",
            "edu.stanford.nlp.ie.machinereading.structure.ExtractionObject:java.lang.String concatenateTypes(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Set getParentsWithReln(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.trees.GrammaticalRelation)",
            "edu.stanford.nlp.classify.GeneralDataset:edu.stanford.nlp.classify.GeneralDataset sampleDataset(long,double,boolean)",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:void extractPremarkedEntityMentions(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.trees.Tree:int constituents(java.util.Set,int,edu.stanford.nlp.trees.ConstituentFactory,boolean,java.util.function.Predicate,int,int)",
            "edu.stanford.nlp.hcoref.Rules:boolean entityHaveExtraProperNoun(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,java.util.Set)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(edu.stanford.nlp.ling.TaggedWord,int,double)",
            "edu.stanford.nlp.util.StringUtils:java.util.Set stringToSet(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.io.IOUtils:java.util.Set readColumnSet(java.lang.String,int)",
            "edu.stanford.nlp.dcoref.Document:edu.stanford.nlp.dcoref.Document$DocType findDocType(edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.tagger.maxent.ASBCunkDict:void readASBCunkDict(java.lang.String)",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Set getChildrenWithReln(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.trees.GrammaticalRelation)",
            "edu.stanford.nlp.dcoref.Mention:java.util.List getContextHelper(java.util.List)",
            "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:void extractPronounForHeadword(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.parser.lexparser.BaseUnknownWordModelTrainer:void train(edu.stanford.nlp.ling.TaggedWord,int,double)",
            "edu.stanford.nlp.hcoref.Preprocessor:void findSyntacticRelationsFromDependency(java.util.List)",
            "edu.stanford.nlp.util.DeltaCollectionValuedMap:void add(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.util.Sets:java.util.Set powerSet(java.util.Set)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceSentenceSegmenter:void <clinit>()",
            "edu.stanford.nlp.ie.crf.CRFClassifierWithLOP:double[] trainWeights(int[][][][],int[][],edu.stanford.nlp.optimization.Evaluator[],int,double[][][][])",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:void readCEDict(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.classify.RVFDataset:void printFullFeatureMatrix(java.io.PrintWriter)",
            "edu.stanford.nlp.sentiment.SentimentModel:void initRandomWordVectors(java.util.List)",
            "edu.stanford.nlp.time.SUTime$ExplicitTemporalSet:edu.stanford.nlp.time.SUTime$Temporal intersect(edu.stanford.nlp.time.SUTime$Temporal)",
            "edu.stanford.nlp.semgraph.SemanticGraph:void setRoot(edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:java.util.Set getVerticesFromEdgeSet(java.lang.Iterable)",
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:void getSplitters(double,java.util.Map,java.util.Map,java.util.Map,java.util.Set)",
            "edu.stanford.nlp.hcoref.data.Mention:void addRelativePronoun(edu.stanford.nlp.hcoref.data.Mention)",
            "edu.stanford.nlp.time.SUTime$ExplicitTemporalSet:edu.stanford.nlp.time.SUTime$ExplicitTemporalSet setTimeZone(org.joda.time.DateTimeZone)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void addTagging(boolean,edu.stanford.nlp.parser.lexparser.IntTaggedWord,double)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Set getSubTreeEdges(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraphEdge)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:java.util.List filterPredictedMentions(java.util.List,edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:java.util.Iterator ruleIteratorByWord(int,int,java.lang.String)",
            "edu.stanford.nlp.hcoref.md.MentionDetectionClassifier:void classifyMentions(java.util.List,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)",
            "edu.stanford.nlp.parser.metrics.TaggingEval:java.util.Map makeObjectsByCat(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.util.CollectionUtils:java.util.Set intersection(java.util.Set,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:void <init>(edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void <init>(edu.stanford.nlp.semgraph.SemanticGraph,boolean,java.util.Optional,java.util.Optional)",
            "edu.stanford.nlp.naturalli.OpenIE:edu.stanford.nlp.semgraph.SemanticGraph canonicalizeCoref(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Map)",
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.naturalli.SentenceFragment fromProto(edu.stanford.nlp.pipeline.CoreNLPProtos$SentenceFragment,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.ie.util.RelationTriple$WithTree:void <init>(java.util.List,java.util.List,java.util.List,edu.stanford.nlp.semgraph.SemanticGraph,double)",
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional segment(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Optional,boolean)",
            "edu.stanford.nlp.naturalli.SentenceFragment:void <init>(edu.stanford.nlp.semgraph.SemanticGraph,boolean,boolean)",
            "edu.stanford.nlp.naturalli.ForwardEntailerSearchProblem:edu.stanford.nlp.util.Pair lambda$searchImplementation$16(edu.stanford.nlp.naturalli.ForwardEntailerSearchProblem$SearchState,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.naturalli.ForwardEntailerSearchProblem:java.util.List searchImplementation()",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:edu.stanford.nlp.naturalli.SentenceFragment lambda$search$10(edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$State)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:edu.stanford.nlp.semgraph.SemanticGraph setSentIndex(edu.stanford.nlp.semgraph.SemanticGraph,int)"
        ]
    },
    "edu.stanford.nlp.pipeline.TokenizerAnnotator$TokenizerType:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.international.arabic.Buckwalter:void <init>(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.arabic.Buckwalter:void main(java.lang.String[])",
            "edu.stanford.nlp.international.arabic.pipeline.DefaultLexicalMapper:void <init>()"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:int indexLeaves(edu.stanford.nlp.trees.TreeGraphNode,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:void indexNodes(edu.stanford.nlp.trees.TreeGraphNode)",
            "edu.stanford.nlp.trees.GrammaticalStructure:int indexLeaves(edu.stanford.nlp.trees.TreeGraphNode,int)"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:int indexNodes(edu.stanford.nlp.trees.TreeGraphNode,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:void indexNodes(edu.stanford.nlp.trees.TreeGraphNode)",
            "edu.stanford.nlp.trees.GrammaticalStructure:int indexNodes(edu.stanford.nlp.trees.TreeGraphNode,int)"
        ]
    },
    "edu.stanford.nlp.trees.international.arabic.ArabicHeadFinder:void <init>(edu.stanford.nlp.trees.international.arabic.ArabicHeadFinder$TagSet)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.arabic.ArabicHeadFinder:void <init>(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.international.arabic.ArabicHeadFinder:void <init>(edu.stanford.nlp.trees.TreebankLanguagePack)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:edu.stanford.nlp.trees.HeadFinder headFinder()",
            "edu.stanford.nlp.trees.international.arabic.ArabicHeadFinder:void <init>()",
            "edu.stanford.nlp.trees.international.arabic.ArabicTreebankLanguagePack:edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()",
            "edu.stanford.nlp.trees.international.arabic.ArabicTreebankLanguagePack:edu.stanford.nlp.trees.HeadFinder headFinder()"
        ]
    },
    "edu.stanford.nlp.util.StringUtils:java.util.Map parseCommandLineArguments(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.SVMLightClassifierFactory:void crossValidateSetC(edu.stanford.nlp.classify.GeneralDataset,int,edu.stanford.nlp.stats.Scorer,edu.stanford.nlp.optimization.LineSearcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.classify.SVMLightClassifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory:double[] heldOutSetSigma(edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.stats.Scorer,edu.stanford.nlp.optimization.LineSearcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifierFactory:double[] heldOutSetSigma(edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.optimization.LineSearcher)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:double[] heldOutSetSigma(edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.stats.Scorer)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:double[] heldOutSetSigma(edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.classify.GeneralDataset)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory:void crossValidateSetSigma(edu.stanford.nlp.classify.GeneralDataset,int,edu.stanford.nlp.stats.Scorer,edu.stanford.nlp.optimization.LineSearcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifierFactory:void crossValidateSetSigma(edu.stanford.nlp.classify.GeneralDataset,int)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:void crossValidateSetSigma(edu.stanford.nlp.classify.GeneralDataset,int,edu.stanford.nlp.optimization.LineSearcher)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:void crossValidateSetSigma(edu.stanford.nlp.classify.GeneralDataset,int,edu.stanford.nlp.stats.Scorer)"
        ]
    },
    "edu.stanford.nlp.optimization.GoldenSectionLineSearch:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.SVMLightClassifierFactory:void heldOutSetC(edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.stats.Scorer,edu.stanford.nlp.optimization.LineSearcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:void heldOutSetC(edu.stanford.nlp.classify.GeneralDataset,double,edu.stanford.nlp.stats.Scorer,edu.stanford.nlp.optimization.LineSearcher)"
        ]
    },
    "edu.stanford.nlp.optimization.GoldenSectionLineSearch:double minimize(java.util.function.Function,double,double,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.NBLinearClassifierFactory:void tuneSigma(int[][],int[])"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFBiasedClassifier:void adjustBias(java.util.List,java.util.function.Function,double,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.semgrex.Alignment:edu.stanford.nlp.semgraph.semgrex.Alignment makeFromIndexArray(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraph,int[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.semgrex.Alignment:edu.stanford.nlp.semgraph.semgrex.Alignment makeFromIndexArray(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraph,int[],double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.gui.FilePanel:void clearAll()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.TregexGUI:void doClearFileList()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.FilePanel:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.FilePanel:edu.stanford.nlp.trees.tregex.gui.FilePanel getInstance()"
        ]
    },
    "edu.stanford.nlp.time.JollyDayHolidays:java.util.Map getAllHolidaysMap(de.jollyday.config.Configuration)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.JollyDayHolidays:void init(java.lang.String,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseSemanticHeadFinder:void <init>(edu.stanford.nlp.trees.TreebankLanguagePack)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.pennchinese.ChineseTreebankLanguagePack:edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseSemanticHeadFinder:void <init>()"
        ]
    },
    "edu.stanford.nlp.scoref.StatisticalCorefSystem:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.CorefAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.ie.NERFeatureFactory:void init(edu.stanford.nlp.sequences.SeqClassifierFlags)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue CompositeFieldValue(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$Rule Rule(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Value ValueExpression(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.util.DeltaCollectionValuedMap:java.lang.Object remove(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void commitVariableGroups(java.util.regex.Matcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void goToNextNodeMatch()"
        ]
    },
    "edu.stanford.nlp.time.TimeFormatter$TextDateComponent:void <init>(org.joda.time.DateTimeFieldType,java.util.Locale,java.lang.Boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeFormatter$FormatterBuilder:void appendTextField(org.joda.time.DateTimeFieldType,boolean)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:void addVertex(edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromEdges(java.lang.Iterable)",
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.semgraph.SemanticGraph fromProto(edu.stanford.nlp.pipeline.CoreNLPProtos$DependencyGraph,java.util.List,java.lang.String)",
            "edu.stanford.nlp.semgraph.SemanticGraph:void <init>(java.util.Collection)",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph duplicateKeepNodes(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void addSubtree(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.lang.String,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Collection)",
            "edu.stanford.nlp.naturalli.OpenIE:edu.stanford.nlp.semgraph.SemanticGraph canonicalizeCoref(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Map)",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromGraphs(java.util.Collection)",
            "edu.stanford.nlp.naturalli.OpenIE:java.util.List entailmentsFromClause(edu.stanford.nlp.naturalli.SentenceFragment)",
            "edu.stanford.nlp.semgraph.SemanticGraph:void addRoot(edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:edu.stanford.nlp.semgraph.SemanticGraph makeGraphFromNodes(java.util.Collection,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:void replaceNode(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void addWord(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.lang.String,edu.stanford.nlp.ling.CoreLabel)",
            "edu.stanford.nlp.semgraph.SemanticGraph$SemanticGraphParsingTask:void readDep(edu.stanford.nlp.ling.IndexedWord,java.lang.String)",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromVertices(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Collection)",
            "edu.stanford.nlp.semgraph.SemanticGraph:void <init>(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Map)",
            "edu.stanford.nlp.pipeline.AnnotationSerializer$IntermediateSemanticGraph:edu.stanford.nlp.semgraph.SemanticGraph convertIntermediateGraph(java.util.List)",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph deepCopyFromGraphs(java.util.List,java.util.List)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:edu.stanford.nlp.semgraph.SemanticGraph resetVerticeOrdering(edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.pipeline.TrueCaseAnnotator:void <init>(java.lang.String,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorImplementations:edu.stanford.nlp.pipeline.Annotator trueCase(java.util.Properties,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "edu.stanford.nlp.pipeline.TrueCaseAnnotator:void <init>(boolean)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.UnknownGTTrainer:void train(edu.stanford.nlp.ling.TaggedWord,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BaseUnknownWordModelTrainer:void train(edu.stanford.nlp.ling.TaggedWord,int,double)",
            "edu.stanford.nlp.parser.lexparser.ChineseUnknownWordModelTrainer:void train(edu.stanford.nlp.ling.TaggedWord,int,double)",
            "edu.stanford.nlp.parser.lexparser.UnknownGTTrainer:void train(edu.stanford.nlp.trees.Tree,double)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter transformWithValuesAdd(edu.stanford.nlp.stats.Counter,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.ClassicCounter:double decrementCount(java.lang.Object,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:void subtractInPlace(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.scoref.MaxMarginMentionRanker:void learn(edu.stanford.nlp.scoref.Example,edu.stanford.nlp.scoref.Example,java.util.Map,edu.stanford.nlp.scoref.Compressor,edu.stanford.nlp.scoref.MaxMarginMentionRanker$ErrorType)",
            "edu.stanford.nlp.scoref.Clusterer$ClustererClassifier:void learn(edu.stanford.nlp.util.Pair)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFCliqueTree:edu.stanford.nlp.stats.Counter logProbs(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter asCounter(edu.stanford.nlp.util.FixedPrioritiesPriorityQueue)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters:void addInPlace(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.ClassicCounter:void <init>(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter union(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void addAll(java.lang.Object,edu.stanford.nlp.stats.IntCounter)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void printProbsDocuments(edu.stanford.nlp.objectbank.ObjectBank)",
            "edu.stanford.nlp.stats.AbstractCounter:void addAll(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.stats.ClassicCounter getWeights(java.util.List)",
            "edu.stanford.nlp.stats.ClassicCounter:void addAll(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:void addAll(edu.stanford.nlp.stats.TwoDimensionalCounterInterface)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void addAll(edu.stanford.nlp.stats.TwoDimensionalIntCounter)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter add(edu.stanford.nlp.stats.Counter,java.util.Collection)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:void addAll(java.lang.Object,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter learnNewPhrasesPrivate(java.lang.String,edu.stanford.nlp.patterns.surface.PatternsForEachToken,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.util.Set,edu.stanford.nlp.util.CollectionValuedMap,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,java.lang.String,java.util.Set,boolean)"
        ]
    },
    "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.scoref.DocumentExamples extract(int,edu.stanford.nlp.hcoref.data.Document,java.util.Map,edu.stanford.nlp.scoref.Compressor)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFCliqueTree:edu.stanford.nlp.stats.Counter probs(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:void resetRoots()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromEdges(java.lang.Iterable)",
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.semgraph.SemanticGraph fromProto(edu.stanford.nlp.pipeline.CoreNLPProtos$DependencyGraph,java.util.List,java.lang.String)",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromVertices(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Collection)",
            "edu.stanford.nlp.pipeline.AnnotationSerializer$IntermediateSemanticGraph:edu.stanford.nlp.semgraph.SemanticGraph convertIntermediateGraph(java.util.List)",
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.naturalli.SentenceFragment fromProto(edu.stanford.nlp.pipeline.CoreNLPProtos$SentenceFragment,edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.classify.RVFDataset:edu.stanford.nlp.ling.RVFDatum getRVFDatum(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.RVFDataset:edu.stanford.nlp.ling.RVFDatum getRVFDatumWithId(int)",
            "edu.stanford.nlp.classify.RVFDataset:edu.stanford.nlp.ling.RVFDatum getDatum(int)",
            "edu.stanford.nlp.classify.RVFDataset$1:edu.stanford.nlp.ling.RVFDatum next()",
            "edu.stanford.nlp.stats.MultiClassAccuracyStats:void initMC(edu.stanford.nlp.classify.ProbabilisticClassifier,edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.classify.LinearClassifier fitSigmoid(edu.stanford.nlp.classify.SVMLightClassifier,edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:void testExample(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset,java.util.List,edu.stanford.nlp.stats.Counter,int)",
            "edu.stanford.nlp.classify.GeneralDataset:void printSVMLightFormat(java.io.PrintWriter)"
        ]
    },
    "edu.stanford.nlp.classify.RVFDataset:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.BaseUnknownWordModel:void addTagging(boolean,edu.stanford.nlp.parser.lexparser.IntTaggedWord,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.LinearGrammarSmoother:void updateCounters(edu.stanford.nlp.parser.lexparser.Rule,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LinearGrammarSmoother:edu.stanford.nlp.util.Pair apply(edu.stanford.nlp.util.Pair)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFCliqueTree:edu.stanford.nlp.stats.Counter condLogProbsGivenNext(int,int[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.scoref.PairwiseModelTrainer:void writeScores(java.util.List,edu.stanford.nlp.scoref.Compressor,edu.stanford.nlp.scoref.PairwiseModel,java.io.PrintWriter,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.PairwiseModelTrainer:void test(edu.stanford.nlp.scoref.PairwiseModel,java.lang.String,boolean)"
        ]
    },
    "edu.stanford.nlp.scoref.MetaFeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.scoref.Example,java.util.Map,edu.stanford.nlp.scoref.Compressor)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.PairwiseModel:void learn(edu.stanford.nlp.scoref.Example,edu.stanford.nlp.scoref.Example,java.util.Map,edu.stanford.nlp.scoref.Compressor,double)",
            "edu.stanford.nlp.scoref.PairwiseModel:double predict(edu.stanford.nlp.scoref.Example,java.util.Map,edu.stanford.nlp.scoref.Compressor)",
            "edu.stanford.nlp.scoref.PairwiseModel:void learn(edu.stanford.nlp.scoref.Example,java.util.Map,edu.stanford.nlp.scoref.Compressor,double)",
            "edu.stanford.nlp.scoref.MaxMarginMentionRanker:void learn(edu.stanford.nlp.scoref.Example,edu.stanford.nlp.scoref.Example,java.util.Map,edu.stanford.nlp.scoref.Compressor,edu.stanford.nlp.scoref.MaxMarginMentionRanker$ErrorType)",
            "edu.stanford.nlp.scoref.PairwiseModel:void learn(edu.stanford.nlp.scoref.Example,java.util.Map,edu.stanford.nlp.scoref.Compressor)"
        ]
    },
    "edu.stanford.nlp.scoref.MetaFeatureExtractor:edu.stanford.nlp.stats.Counter getConjunction(edu.stanford.nlp.stats.Counter,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.MetaFeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.scoref.Example,java.util.Map,edu.stanford.nlp.scoref.Compressor)"
        ]
    },
    "edu.stanford.nlp.scoref.FeatureExtractor:void addNumeric(edu.stanford.nlp.stats.Counter,java.lang.String,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,java.util.Map)",
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:boolean countResultsSegmenter(java.util.List,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:boolean countResults(java.util.List,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)"
        ]
    },
    "edu.stanford.nlp.scoref.Clusterer:edu.stanford.nlp.stats.Counter addSuffix(edu.stanford.nlp.stats.Counter,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.Clusterer:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.scoref.ClustererDataLoader$ClustererDoc,edu.stanford.nlp.scoref.Clusterer$Cluster,edu.stanford.nlp.scoref.Clusterer$Cluster,edu.stanford.nlp.scoref.Clusterer$GlobalFeatures)"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:boolean countResultsPerEntity(java.util.List,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.lang.String,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void countResults(java.util.List,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.lang.String,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.lang.Class,boolean)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFCliqueTree:edu.stanford.nlp.stats.Counter condLogProbsGivenNext(int,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory:java.util.List getHighPrecisionFeatures(edu.stanford.nlp.classify.GeneralDataset,double,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier trainSemiSupGE(edu.stanford.nlp.classify.GeneralDataset,java.util.List,double)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier trainSemiSupGE(edu.stanford.nlp.classify.GeneralDataset,java.util.List)"
        ]
    },
    "edu.stanford.nlp.stats.ClassicCounter:double incrementCount(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseSimWordAvgDepGrammar:double probSimilarWordAvg(edu.stanford.nlp.parser.lexparser.IntDependency)",
            "edu.stanford.nlp.ie.machinereading.BasicEntityExtractor:void runTestSet(java.util.List)",
            "edu.stanford.nlp.ie.machinereading.RelationExtractorResultsPrinter:void printResults(java.io.PrintWriter,java.util.List,java.util.List)",
            "edu.stanford.nlp.parser.lexparser.ArabicUnknownWordModelTrainer:edu.stanford.nlp.parser.lexparser.UnknownWordModel finishTraining()",
            "edu.stanford.nlp.ie.machinereading.RelationExtractorResultsPrinter:void printResultsUsingLabels(java.io.PrintWriter,java.util.List,java.util.List)",
            "edu.stanford.nlp.classify.Dataset:double[] getInformationGains()",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter asCounter(java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.PostSplitter:edu.stanford.nlp.trees.Tree transformTreeHelper(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreeFactory)",
            "edu.stanford.nlp.hcoref.sieve.RFSieve:edu.stanford.nlp.ling.RVFDatum extractDatum(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,int,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.String)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void countResultsPerToken(java.util.List,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.lang.String,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.lang.Class)",
            "edu.stanford.nlp.dcoref.ACEMentionExtractor:void printRawDoc(java.util.List,java.util.List,java.lang.String,boolean)",
            "edu.stanford.nlp.parser.lexparser.ChineseUnknownWordModelTrainer:edu.stanford.nlp.parser.lexparser.UnknownWordModel finishTraining()",
            "edu.stanford.nlp.classify.SVMLightClassifier:edu.stanford.nlp.stats.Counter logProbabilityOf(edu.stanford.nlp.ling.Datum)",
            "edu.stanford.nlp.sequences.CoNLLDocumentReaderAndWriter:java.lang.StringBuilder maybeIncrementCounter(java.lang.StringBuilder,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.sequences.IOBUtils:boolean countEntityResults(java.util.List,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.lang.String)",
            "edu.stanford.nlp.patterns.Data:void computeRawFreqIfNull(java.util.Map,int)",
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.classify.LinearClassifier fitSigmoid(edu.stanford.nlp.classify.SVMLightClassifier,edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.scoref.Clusterer$State:void <init>(edu.stanford.nlp.scoref.ClustererDataLoader$ClustererDoc)",
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,java.util.Map)",
            "edu.stanford.nlp.fsm.TransducerGraph:edu.stanford.nlp.fsm.TransducerGraph createGraphFromPaths(java.util.List,int)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:void countNameRelations(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter getCountCounts(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.ClassicCounter:void <init>(java.util.Collection)",
            "edu.stanford.nlp.simple.SentenceAlgorithms:java.lang.Object modeInSpan(edu.stanford.nlp.ie.machinereading.structure.Span,java.util.function.Function)",
            "edu.stanford.nlp.scoref.MetadataWriter:void process(int,edu.stanford.nlp.hcoref.data.Document)",
            "edu.stanford.nlp.classify.Dataset:edu.stanford.nlp.ling.RVFDatum getRVFDatum(int)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:void countMentionTypes(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.classify.GeneralDataset:edu.stanford.nlp.stats.ClassicCounter numDatumsPerLabel()",
            "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon:edu.stanford.nlp.stats.Distribution getWordLengthDistribution()",
            "edu.stanford.nlp.trees.Dependencies:edu.stanford.nlp.stats.Counter getTypedDependencyChains(java.util.List,int)",
            "edu.stanford.nlp.parser.lexparser.UnknownGTTrainer:void finishTraining()",
            "edu.stanford.nlp.parser.lexparser.LinearGrammarSmoother:void updateCounters(edu.stanford.nlp.parser.lexparser.Rule,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.classify.SVMLightClassifier:edu.stanford.nlp.stats.Counter logProbabilityOf(edu.stanford.nlp.ling.RVFDatum)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:void countAdjacentMentions(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String sentenceStringWithMention(int,edu.stanford.nlp.hcoref.data.Document,boolean,boolean)",
            "edu.stanford.nlp.scoref.MetaFeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.scoref.Example,java.util.Map,edu.stanford.nlp.scoref.Compressor)",
            "edu.stanford.nlp.patterns.dep.ApplyDepPatterns$2:edu.stanford.nlp.stats.Counter apply(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.scoref.FeatureExtractor:void addFeature(edu.stanford.nlp.stats.Counter,java.lang.String,boolean)",
            "edu.stanford.nlp.parser.lexparser.GrammarCompactor:edu.stanford.nlp.stats.Distribution computeInputPrior(java.util.Map)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void train(java.util.Collection,java.util.Collection)",
            "edu.stanford.nlp.scoref.EvalUtils$B3Evaluator:edu.stanford.nlp.util.Pair getScore(java.util.List,java.util.Map)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.crf.LabelDictionary:void increment(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.scoref.FeatureExtractor:void addNumeric(edu.stanford.nlp.stats.Counter,java.lang.String,int)",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void printRawDoc(edu.stanford.nlp.dcoref.Document,boolean)",
            "edu.stanford.nlp.parser.lexparser.RandomWalk:void train(java.util.Collection)",
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:void modifyUsingCoreNLPNER(edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.trees.Treebank:java.lang.String textualSummary(edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.stats.Counters:int hIndex(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.parser.lexparser.ChineseUnknownWordModel:void main(java.lang.String[])",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$8:edu.stanford.nlp.stats.Counter apply(edu.stanford.nlp.util.Triple)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:boolean countResultsPerEntity(java.util.List,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.lang.String,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.lang.Class)",
            "edu.stanford.nlp.scoref.Clusterer:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.scoref.ClustererDataLoader$ClustererDoc,edu.stanford.nlp.scoref.Clusterer$Cluster,edu.stanford.nlp.scoref.Clusterer$Cluster,edu.stanford.nlp.scoref.Clusterer$GlobalFeatures)",
            "edu.stanford.nlp.international.arabic.process.ArabicSegmenter:void evaluate(java.io.PrintWriter)",
            "edu.stanford.nlp.classify.LinearClassifier:java.lang.String toDistributionString(int)",
            "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon:void finishTraining()",
            "edu.stanford.nlp.patterns.surface.LearnImportantFeatures:edu.stanford.nlp.ling.RVFDatum getDatum(edu.stanford.nlp.ling.CoreLabel[],int)",
            "edu.stanford.nlp.parser.lexparser.BaseUnknownWordModelTrainer:edu.stanford.nlp.parser.lexparser.UnknownWordModel finishTraining()",
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)",
            "edu.stanford.nlp.international.arabic.Buckwalter:java.lang.String convert(java.lang.String,boolean)",
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:void processTreeHelper(java.lang.String,java.lang.String,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.scoref.FeatureExtractor:void addDependencyFeatures(edu.stanford.nlp.stats.Counter,java.lang.String,edu.stanford.nlp.semgraph.SemanticGraphEdge,boolean)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:void finishRanking(edu.stanford.nlp.stats.Counter,double)",
            "edu.stanford.nlp.scoref.Clusterer:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.scoref.ClustererDataLoader$ClustererDoc,java.util.List,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.naturalli.Util:java.lang.String guessNER(java.util.List,edu.stanford.nlp.ie.machinereading.structure.Span)",
            "edu.stanford.nlp.ie.machinereading.BasicRelationFeatureFactory:void addDependencyPathFeatures(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.ie.machinereading.structure.RelationMention,edu.stanford.nlp.ie.machinereading.structure.EntityMention,edu.stanford.nlp.ie.machinereading.structure.EntityMention,java.util.List,java.util.List,java.util.logging.Logger)",
            "edu.stanford.nlp.stats.GeneralizedCounter:void main(java.lang.String[])",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void printLinkWithContext(java.util.logging.Logger,java.lang.String,edu.stanford.nlp.util.IntTuple,edu.stanford.nlp.util.IntTuple,edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.Semantics)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:void updatePerformanceStatistics(java.lang.String[],java.lang.String,edu.stanford.nlp.stats.Distribution,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.classify.Classifier,double)",
            "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Counter collectCountCounts(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:java.util.List readDocument(java.lang.String,edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.parser.metrics.TaggingEval:void measureOOV(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.parser.metrics.AbstractEval$RuleErrorEval:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)",
            "edu.stanford.nlp.parser.metrics.AbstractEval$CatErrorEval:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void setUpConstructor(java.util.Map,java.util.Map,boolean,java.util.Map,java.util.Map,java.util.Map)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.ie.machinereading.BasicRelationFeatureFactory:boolean addFeatures(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.ie.machinereading.structure.RelationMention,java.util.List,java.util.logging.Logger)",
            "edu.stanford.nlp.hcoref.md.MentionDetectionClassifier:edu.stanford.nlp.stats.Counter extractFeatures(edu.stanford.nlp.hcoref.data.Mention,java.util.Set,java.util.Set,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)",
            "edu.stanford.nlp.parser.lexparser.FrenchUnknownWordModelTrainer:edu.stanford.nlp.parser.lexparser.UnknownWordModel finishTraining()",
            "edu.stanford.nlp.parser.lexparser.SpanishUnknownWordModelTrainer:edu.stanford.nlp.parser.lexparser.UnknownWordModel finishTraining()",
            "edu.stanford.nlp.hcoref.CorefPrinter:void linkDistanceAnalysis(java.lang.String[])",
            "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.util.Triple printProbsDocument(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.EnglishUnknownWordModelTrainer:edu.stanford.nlp.parser.lexparser.UnknownWordModel finishTraining()"
        ]
    },
    "edu.stanford.nlp.classify.RVFDataset:void readSVMLightFormat(java.io.File)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters:void addInPlace(edu.stanford.nlp.stats.Counter,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:void addInPlace(edu.stanford.nlp.stats.TwoDimensionalCounter,double)"
        ]
    },
    "edu.stanford.nlp.scoref.MetaFeatureExtractor:edu.stanford.nlp.stats.Counter filterOut(edu.stanford.nlp.stats.Counter,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.MetaFeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.scoref.Example,java.util.Map,edu.stanford.nlp.scoref.Compressor)"
        ]
    },
    "edu.stanford.nlp.scoref.SimpleLinearClassifier$CountBasedLearningRate:void update(java.lang.String,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.SimpleLinearClassifier:void learn(edu.stanford.nlp.stats.Counter,double,double,edu.stanford.nlp.scoref.SimpleLinearClassifier$Loss)"
        ]
    },
    "edu.stanford.nlp.classify.RVFDataset:edu.stanford.nlp.ling.RVFDatum svmLightLineToRVFDatum(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.RVFDataset:edu.stanford.nlp.classify.RVFDataset readSVMLightFormat(java.lang.String,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index,java.util.List)"
        ]
    },
    "edu.stanford.nlp.stats.ClassicCounter:double decrementCount(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters:void addInPlace(edu.stanford.nlp.stats.Counter,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.CandidatePhrase:void addFeatures(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFCliqueTree:edu.stanford.nlp.stats.Counter condLogProbsGivenPrevious(int,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammarExtractor:void tallyRoot(edu.stanford.nlp.trees.Tree,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:void tallyTree(edu.stanford.nlp.trees.Tree,double)"
        ]
    },
    "edu.stanford.nlp.classify.ColumnDataClassifier:void finishRanking(edu.stanford.nlp.stats.Counter,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.util.Pair testExamples(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset,java.util.List)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:void updatePerformanceStatistics(java.lang.String[],java.lang.String,edu.stanford.nlp.stats.Distribution,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.classify.Classifier,double)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFCliqueTree:edu.stanford.nlp.stats.Counter condLogProbsGivenPrevious(int,int[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.Dataset:edu.stanford.nlp.stats.Counter getFeatureCounter()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.Dataset:edu.stanford.nlp.classify.RVFDataset getL1NormalizedTFIDFDataset()"
        ]
    },
    "edu.stanford.nlp.ling.RVFDatum:void <init>(edu.stanford.nlp.ling.Datum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:void addTagging(boolean,edu.stanford.nlp.parser.lexparser.IntTaggedWord,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void readData(java.io.BufferedReader)"
        ]
    },
    "edu.stanford.nlp.scoref.Compressor:edu.stanford.nlp.stats.Counter uncompress(edu.stanford.nlp.scoref.CompressedFeatureVector)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.MetaFeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.scoref.Example,java.util.Map,edu.stanford.nlp.scoref.Compressor)",
            "edu.stanford.nlp.scoref.Clusterer:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.scoref.ClustererDataLoader$ClustererDoc,edu.stanford.nlp.scoref.Clusterer$Cluster,edu.stanford.nlp.scoref.Clusterer$Cluster,edu.stanford.nlp.scoref.Clusterer$GlobalFeatures)"
        ]
    },
    "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.util.Pair readModel(java.io.File,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.classify.SVMLightClassifier trainClassifierBasic(edu.stanford.nlp.classify.GeneralDataset)"
        ]
    },
    "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader:edu.stanford.nlp.hcoref.data.InputDoc nextDoc()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.CorefDocMaker:edu.stanford.nlp.hcoref.data.Document nextDoc()"
        ]
    },
    "edu.stanford.nlp.simple.Document:java.util.Map coref()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:java.util.Map coref()"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:void loadTextClassifier(java.lang.String,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void decommitVariableGroups()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void goToNextTreeNodeMatch()",
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void resetChildIter()",
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:boolean matches()"
        ]
    },
    "edu.stanford.nlp.sequences.ViterbiSearchGraphBuilder:edu.stanford.nlp.fsm.DFSA getGraph(edu.stanford.nlp.sequences.SequenceModel,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:edu.stanford.nlp.fsm.DFSA getViterbiSearchGraph(java.util.List,java.lang.Class)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr SeqRegexBasic(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr SeqRegexDisj(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr SeqRegexDisjConj(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.MultiNodePattern MultiNodePattern(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr SeqRegexBasic(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalRelation:void <init>(edu.stanford.nlp.international.Language,java.lang.String,java.lang.String,edu.stanford.nlp.trees.GrammaticalRelation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations:void <clinit>()",
            "edu.stanford.nlp.trees.EnglishGrammaticalRelations:void <clinit>()",
            "edu.stanford.nlp.trees.GrammaticalRelation:void <clinit>()",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalRelations:void <clinit>()",
            "edu.stanford.nlp.parser.nndep.DependencyParser:edu.stanford.nlp.trees.GrammaticalRelation makeGrammaticalRelation(java.lang.String)",
            "edu.stanford.nlp.trees.GrammaticalStructure:edu.stanford.nlp.trees.GrammaticalStructure fromStringReps(java.util.List,java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalRelation:void <init>(edu.stanford.nlp.international.Language,java.lang.String,java.lang.String,edu.stanford.nlp.trees.GrammaticalRelation,java.lang.String,edu.stanford.nlp.trees.tregex.TregexPatternCompiler,java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations:void <clinit>()",
            "edu.stanford.nlp.trees.EnglishGrammaticalRelations:void <clinit>()",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalRelations:void <clinit>()"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalRelation:void <init>(edu.stanford.nlp.international.Language,java.lang.String,java.lang.String,edu.stanford.nlp.trees.GrammaticalRelation,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.EnglishGrammaticalRelations:edu.stanford.nlp.trees.GrammaticalRelation getConj(java.lang.String)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalRelations:edu.stanford.nlp.trees.GrammaticalRelation getAdvcl(java.lang.String)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalRelations:edu.stanford.nlp.trees.GrammaticalRelation getConj(java.lang.String)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalRelations:edu.stanford.nlp.trees.GrammaticalRelation getNmod(java.lang.String)",
            "edu.stanford.nlp.trees.EnglishGrammaticalRelations:edu.stanford.nlp.trees.GrammaticalRelation getPrepC(java.lang.String)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalRelations:edu.stanford.nlp.trees.GrammaticalRelation getAcl(java.lang.String)",
            "edu.stanford.nlp.trees.EnglishGrammaticalRelations:edu.stanford.nlp.trees.GrammaticalRelation getPrep(java.lang.String)",
            "edu.stanford.nlp.trees.GrammaticalRelation:edu.stanford.nlp.trees.GrammaticalRelation valueOf(edu.stanford.nlp.international.Language,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Map makeGenericVertices(java.lang.Iterable)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Map makeBlanketVertices(java.lang.Iterable)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseHeadFinder:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams:edu.stanford.nlp.trees.HeadFinder headFinder()",
            "edu.stanford.nlp.trees.tregex.gui.Preferences:edu.stanford.nlp.trees.HeadFinder lookupHeadFinder(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseTreebankLanguagePack:edu.stanford.nlp.trees.HeadFinder headFinder()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void <init>(edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.parser.lexparser.Lexicon,edu.stanford.nlp.parser.common.ParserGrammar,java.util.function.Function)",
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void processResults(edu.stanford.nlp.parser.common.ParserQuery,edu.stanford.nlp.trees.Tree,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,edu.stanford.nlp.trees.TreePrint)"
        ]
    },
    "edu.stanford.nlp.trees.international.french.FrenchHeadFinder:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.french.FrenchHeadFinder:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.international.french.FrenchTreebankLanguagePack:edu.stanford.nlp.trees.HeadFinder headFinder()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void <init>(edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.parser.lexparser.Lexicon,edu.stanford.nlp.parser.common.ParserGrammar,java.util.function.Function)",
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void processResults(edu.stanford.nlp.parser.common.ParserQuery,edu.stanford.nlp.trees.Tree,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,edu.stanford.nlp.trees.TreePrint)"
        ]
    },
    "edu.stanford.nlp.trees.international.french.FrenchTreebankLanguagePack:edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.semgrex.NodePattern:void <init>(edu.stanford.nlp.semgraph.semgrex.GraphRelation,boolean,java.util.Map,boolean,boolean,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.SemgrexParser:edu.stanford.nlp.semgraph.semgrex.NodePattern Description(edu.stanford.nlp.semgraph.semgrex.GraphRelation)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.NodePattern NodeBasic(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.NodePattern NodeGroup(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void countOriginalStates()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void extract(java.util.Collection,double,java.util.Collection,double)"
        ]
    },
    "edu.stanford.nlp.stats.IntCounter:double incrementCount(java.lang.Object,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.AbstractCounter:double decrementCount(java.lang.Object,double)",
            "edu.stanford.nlp.stats.Counters:void addInPlace(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(edu.stanford.nlp.ling.TaggedWord,int,double)"
        ]
    },
    "edu.stanford.nlp.stats.IntCounter:int decrementCount(java.lang.Object,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.IntCounter:double decrementCount(java.lang.Object)",
            "edu.stanford.nlp.stats.IntCounter:void subtractAll(edu.stanford.nlp.stats.IntCounter)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void mergeStates()"
        ]
    },
    "edu.stanford.nlp.stats.IntCounter:void incrementCounts(java.util.Collection,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.IntCounter:void decrementCounts(java.util.Collection,int)",
            "edu.stanford.nlp.stats.IntCounter:void incrementCounts(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.stats.IntCounter:double incrementCount(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.CoreMapAttributeAggregator$MostFreqAggregator:java.lang.Object aggregate(java.lang.Class,java.util.List)",
            "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$CorpusStats:void process(edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$CoNLLDocument)",
            "edu.stanford.nlp.stats.MultiClassChunkEvalStats:void addGuess(edu.stanford.nlp.pipeline.LabeledChunkIdentifier$LabelTagType,edu.stanford.nlp.pipeline.LabeledChunkIdentifier$LabelTagType,boolean)",
            "edu.stanford.nlp.sentiment.AbstractEvaluate:int countLengthAccuracy(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.parser.nndep.Util:java.util.List generateDict(java.util.List,int)",
            "edu.stanford.nlp.stats.MultiClassChunkEvalStats:void markBoundary()",
            "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$CorpusStats:void process(edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$Document)",
            "edu.stanford.nlp.trees.tregex.VariableStrings:void setVar(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.parser.nndep.DependencyParser:edu.stanford.nlp.parser.nndep.Dataset genTrainExamples(java.util.List,java.util.List)",
            "edu.stanford.nlp.parser.lexparser.RandomWalk:void train(java.util.Collection)",
            "edu.stanford.nlp.semgraph.semgrex.VariableStrings:void setVar(java.lang.Object,java.lang.String)",
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:void addGuess(java.lang.Object,java.lang.Object,boolean)"
        ]
    },
    "edu.stanford.nlp.international.arabic.process.ArabicLexer:void <init>(java.io.Reader,edu.stanford.nlp.process.LexedTokenFactory,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.arabic.process.ArabicTokenizer:void <init>(java.io.Reader,edu.stanford.nlp.process.LexedTokenFactory,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.Language:void <clinit>()"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.BikelChineseHeadFinder:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams:edu.stanford.nlp.trees.HeadFinder headFinder()",
            "edu.stanford.nlp.trees.tregex.gui.Preferences:edu.stanford.nlp.trees.HeadFinder lookupHeadFinder(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Collection removeDuplicates(java.util.Collection,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void decommitVariableGroups()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void goToNextNodeMatch()",
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void resetChildIter()",
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:boolean matches()",
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:boolean matchChild()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void commitVariableGroups(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void goToNextTreeNodeMatch()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void commitVariableGroups(java.util.regex.Matcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void goToNextTreeNodeMatch()"
        ]
    },
    "edu.stanford.nlp.util.TwoDimensionalSet:boolean remove(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Document:void mergeIncompatibles(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster)",
            "edu.stanford.nlp.util.TwoDimensionalSet:boolean removeAll(edu.stanford.nlp.util.TwoDimensionalSet)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.GrammarCompactor:edu.stanford.nlp.util.Triple compactGrammar(edu.stanford.nlp.util.Pair,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.Treebank,java.util.List)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:java.util.Set retainAbove(edu.stanford.nlp.stats.TwoDimensionalCounter,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.ArrayHeap:java.lang.Object extractMin()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.ArrayHeap:java.util.Iterator iterator()",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:boolean parse(java.util.List)",
            "edu.stanford.nlp.util.Beam:boolean add(java.lang.Object)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void postMortem()"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void resetChildIter()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher:void resetChildIter(edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void <init>(edu.stanford.nlp.semgraph.semgrex.NodePattern,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.semgrex.Alignment,edu.stanford.nlp.semgraph.SemanticGraph,boolean,edu.stanford.nlp.ling.IndexedWord,java.util.Map,java.util.Map,edu.stanford.nlp.semgraph.semgrex.VariableStrings,boolean)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:boolean matchChild()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:boolean matches()"
        ]
    },
    "edu.stanford.nlp.util.BinaryHeapPriorityQueue:void removeEntry(edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:boolean remove(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.stats.IntCounter:void removeAll(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters$3:java.lang.Double remove(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters$3:java.lang.Object remove(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.stats.ClassicCounter:double remove(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.BasicEntityExtractor:void runTestSet(java.util.List)",
            "edu.stanford.nlp.simple.SentenceAlgorithms:java.lang.Object modeInSpan(edu.stanford.nlp.ie.machinereading.structure.Span,java.util.function.Function)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void search(edu.stanford.nlp.ling.IndexedWord,java.util.function.Predicate,edu.stanford.nlp.classify.Classifier,java.util.Map,java.util.function.Function,java.util.Collection,int)",
            "edu.stanford.nlp.stats.Counters$3:java.lang.Double remove(java.lang.Object)",
            "edu.stanford.nlp.stats.Counters:java.util.Set retainAbove(edu.stanford.nlp.stats.Counter,double)",
            "edu.stanford.nlp.stats.Counters:java.util.Set retainKeys(edu.stanford.nlp.stats.Counter,java.util.Collection)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:void clean()",
            "edu.stanford.nlp.stats.Counters:void retainTop(edu.stanford.nlp.stats.Counter,int)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:double remove(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.stats.Counters:void removeKeys(edu.stanford.nlp.stats.Counter,java.util.Collection)",
            "edu.stanford.nlp.stats.Counters:java.util.Set retainNonZeros(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.hcoref.md.MentionDetectionClassifier:void classifyMentions(java.util.List,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)",
            "edu.stanford.nlp.naturalli.Util:java.lang.String guessNER(java.util.List,edu.stanford.nlp.ie.machinereading.structure.Span)"
        ]
    },
    "edu.stanford.nlp.stats.ClassicCounter:void removeAll(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass runNineYards(edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass,java.util.Properties,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass run(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void resetChildIter()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.TregexMatcher:void resetChildIter(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void resetChildIter()"
        ]
    },
    "edu.stanford.nlp.parser.dvparser.DVParser:java.util.IdentityHashMap getTopParses(edu.stanford.nlp.parser.lexparser.LexicalizedParser,edu.stanford.nlp.parser.lexparser.Options,java.util.Collection,edu.stanford.nlp.trees.TreeTransformer,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.DVParser:java.util.IdentityHashMap getTopParses(java.util.List,edu.stanford.nlp.trees.TreeTransformer)"
        ]
    },
    "edu.stanford.nlp.parser.dvparser.CacheParseHypotheses$CacheProcessor:edu.stanford.nlp.util.Pair process(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.DVParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.dvparser.CacheParseHypotheses$CacheProcessor:java.lang.Object process(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ParseFiles:void parseFiles(java.lang.String[],int,boolean,edu.stanford.nlp.process.TokenizerFactory,java.lang.String,java.lang.String,java.util.function.Function,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ParseFiles:void parseFiles(java.lang.String[],int,boolean,edu.stanford.nlp.process.TokenizerFactory,java.lang.String,java.lang.String,java.util.function.Function,java.lang.String,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.TreePrint,edu.stanford.nlp.parser.lexparser.LexicalizedParser)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.RerankingParserQuery:boolean parseAndReport(java.util.List,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:double testOnTreebank(edu.stanford.nlp.trees.Treebank)",
            "edu.stanford.nlp.parser.common.ParsingThreadsafeProcessor:edu.stanford.nlp.parser.common.ParserQuery process(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.ParseFiles:void parseFiles(java.lang.String[],int,boolean,edu.stanford.nlp.process.TokenizerFactory,java.lang.String,java.lang.String,java.util.function.Function,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.common.ParsingThreadsafeProcessor:java.lang.Object process(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser$1:edu.stanford.nlp.trees.Tree process(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser$1:java.lang.Object process(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:java.util.List parseMultiple(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.common.ParserGrammar:edu.stanford.nlp.trees.Tree apply(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.common.ParserGrammar:java.lang.Object apply(java.lang.Object)",
            "edu.stanford.nlp.sentiment.BuildBinarizedDataset:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Tree parseStrings(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.BinaryHeapPriorityQueue:edu.stanford.nlp.util.BinaryHeapPriorityQueue deepCopy(edu.stanford.nlp.util.MapFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:edu.stanford.nlp.util.BinaryHeapPriorityQueue deepCopy()"
        ]
    },
    "edu.stanford.nlp.util.BinaryHeapPriorityQueue:boolean add(java.lang.Object,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:edu.stanford.nlp.util.PriorityQueue getCandidates(edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser$Vertex,int)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:void lazyNext(edu.stanford.nlp.util.PriorityQueue,edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser$Derivation,int)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.util.PriorityQueue toPriorityQueue(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.MultiClassAccuracyStats:void initMC(edu.stanford.nlp.classify.ProbabilisticClassifier,edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.graph.DijkstraShortestPath:java.util.List getShortestPath(edu.stanford.nlp.graph.Graph,java.lang.Object,java.lang.Object,boolean)",
            "edu.stanford.nlp.classify.PRCurve:void initMC(java.util.ArrayList)",
            "edu.stanford.nlp.classify.PRCurve:void init(java.util.List)",
            "edu.stanford.nlp.classify.PRCurve:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.util.IntervalTree:boolean remove(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.IntervalTree:boolean removeAll(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.util.IntervalTree:edu.stanford.nlp.util.IntervalTree$TreeNode leftRotate(edu.stanford.nlp.util.IntervalTree$TreeNode)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.IntervalTree:void rotateUp(edu.stanford.nlp.util.IntervalTree$TreeNode,edu.stanford.nlp.util.IntervalTree$TreeNode)"
        ]
    },
    "edu.stanford.nlp.util.IntervalTree:edu.stanford.nlp.util.IntervalTree$TreeNode rightRotate(edu.stanford.nlp.util.IntervalTree$TreeNode)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.IntervalTree:void rotateUp(edu.stanford.nlp.util.IntervalTree$TreeNode,edu.stanford.nlp.util.IntervalTree$TreeNode)"
        ]
    },
    "edu.stanford.nlp.util.IntervalTree:boolean addNonNested(edu.stanford.nlp.util.HasInterval)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.IntervalTree:java.util.List getNonNested(java.util.List,java.util.function.Function,java.util.Comparator)"
        ]
    },
    "edu.stanford.nlp.util.IntervalTree:boolean add(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.TimeExpression:boolean extractAnnotation(edu.stanford.nlp.ling.tokensregex.Env,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringPatternExtractRule:java.lang.Object apply(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringPatternExtractRule:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringPatternExtractRule:boolean extract(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringPatternExtractRule:boolean extract(java.lang.Object,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapExtractRule:boolean extract(edu.stanford.nlp.util.CoreMap,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapExtractRule:boolean extract(java.lang.Object,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern$MultiNodePatternState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$State:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean)"
        ]
    },
    "edu.stanford.nlp.util.CollectionUtils:java.util.List mergeListWithSortedMatchedPreAggregated(java.util.List,java.util.List,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:java.util.List extractCoreMapsMergedWithTokens(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.ie.NumberNormalizer:java.util.List findAndAnnotateNumericExpressionsWithRanges(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.util.CollectionUtils:java.util.List mergeList(java.util.List,java.util.Collection,java.util.function.Function,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.CoreMapAggregator:java.util.List merge(java.util.List,java.util.List,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.time.SUTimeMain:java.util.List createTimexNodes(java.lang.String,java.lang.Integer,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:org.w3c.dom.Element annotationToTmlTextElement(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$PartialApproxMatch:edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$PartialApproxMatch access$000(edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$PartialApproxMatch,edu.stanford.nlp.ling.tokensregex.matcher.MatchCostFunction,double,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:boolean addToQueue(edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$MatchQueue,edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$MatchQueue,edu.stanford.nlp.ling.tokensregex.matcher.MatchCostFunction,edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$PartialApproxMatch,java.lang.Object,java.lang.Object,boolean,boolean)",
            "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List findClosestMatches(java.util.List,edu.stanford.nlp.ling.tokensregex.matcher.MatchCostFunction,double,int,boolean,boolean)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$PartialApproxMatch:edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$PartialApproxMatch withMatch(edu.stanford.nlp.ling.tokensregex.matcher.MatchCostFunction,double,java.lang.Object,java.lang.Object,boolean,edu.stanford.nlp.ling.tokensregex.matcher.TrieMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$PartialApproxMatch:edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$PartialApproxMatch access$300(edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$PartialApproxMatch,edu.stanford.nlp.ling.tokensregex.matcher.MatchCostFunction,double,java.lang.Object,java.lang.Object,boolean,edu.stanford.nlp.ling.tokensregex.matcher.TrieMap)"
        ]
    },
    "edu.stanford.nlp.time.TimeExpression:boolean extractAnnotation(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.IntervalTree:java.util.List getNonOverlapping(java.util.List,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.IntervalTree:java.util.List getNonOverlapping(java.util.List)",
            "edu.stanford.nlp.util.IntervalTree:java.util.List getNonOverlapping(java.util.List,java.util.function.Function,java.util.Comparator)"
        ]
    },
    "edu.stanford.nlp.util.IntervalTree:java.util.List getNonOverlappingMaxScore(java.util.List,java.util.function.Function,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher:java.util.List findNonOverlappingMaxScore(java.util.List,java.util.function.Function)",
            "edu.stanford.nlp.util.IntervalTree:java.util.List getNonOverlappingMaxScore(java.util.List,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$MultiSequencePatternExtractRule:java.lang.Object apply(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$MultiSequencePatternExtractRule:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequencePatternExtractRule:java.lang.Object apply(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequencePatternExtractRule:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$MultiSequencePatternExtractRule:boolean extract(java.util.List,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$MultiSequencePatternExtractRule:boolean extract(java.lang.Object,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequencePatternExtractRule:boolean extract(java.util.List,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequencePatternExtractRule:boolean extract(java.lang.Object,java.util.List)"
        ]
    },
    "edu.stanford.nlp.pipeline.CoreMapAttributeAggregator$MostFreqAggregator:java.lang.Object aggregate(java.lang.Class,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void combine(edu.stanford.nlp.parser.lexparser.Edge,edu.stanford.nlp.parser.lexparser.Hook)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processEdge(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processHook(edu.stanford.nlp.parser.lexparser.Hook)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void projectUnaries(edu.stanford.nlp.parser.lexparser.Edge)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processEdge(edu.stanford.nlp.parser.lexparser.Edge)"
        ]
    },
    "edu.stanford.nlp.util.ArrayHeap:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Beam:java.util.List asSortedList()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void discoverHook(edu.stanford.nlp.parser.lexparser.Hook)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void relaxTempHook()",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void discoverItem(edu.stanford.nlp.parser.lexparser.Item)"
        ]
    },
    "edu.stanford.nlp.util.Beam:boolean add(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.BeamBestSequenceFinder:int[] bestSequence(edu.stanford.nlp.sequences.SequenceModel,int)",
            "edu.stanford.nlp.parser.lexparser.FastFactoredParser:boolean parse(java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void discoverEdge(edu.stanford.nlp.parser.lexparser.Edge)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void discoverItem(edu.stanford.nlp.parser.lexparser.Item)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void relaxTempEdge()"
        ]
    },
    "edu.stanford.nlp.util.IntervalTree:boolean containsInterval(edu.stanford.nlp.util.HasInterval,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.IntervalTree:boolean addNonNested(edu.stanford.nlp.util.HasInterval)"
        ]
    },
    "edu.stanford.nlp.util.IntervalTree:boolean contains(edu.stanford.nlp.util.HasInterval)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.IntervalTree:boolean contains(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.util.FuzzyInterval:edu.stanford.nlp.util.FuzzyInterval toValidInterval(edu.stanford.nlp.util.FuzzyInterval$FuzzyComparable,edu.stanford.nlp.util.FuzzyInterval$FuzzyComparable)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.FuzzyInterval:edu.stanford.nlp.util.FuzzyInterval toInterval(edu.stanford.nlp.util.FuzzyInterval$FuzzyComparable,edu.stanford.nlp.util.FuzzyInterval$FuzzyComparable)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.util.Interval getInterval()"
        ]
    },
    "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:java.lang.String normalizedOrdinalString(java.lang.String,java.lang.Number)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:java.util.List processEntity(java.util.List,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.pascal.ISODateInstance:boolean extractYear(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.pascal.ISODateInstance:boolean extractFields(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:void addNormalizedQuantitiesToEntities(java.util.List,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.NERClassifierCombiner:java.util.List classifyWithGlobalInformation(java.util.List,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:void addNormalizedQuantitiesToEntities(java.util.List,boolean)",
            "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:void addNormalizedQuantitiesToEntities(java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BinaryHeadFinder:edu.stanford.nlp.trees.Tree determineHead(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TreeGraphNode:void percolateHeads(edu.stanford.nlp.trees.HeadFinder)"
        ]
    },
    "edu.stanford.nlp.trees.AbstractCollinsHeadFinder:edu.stanford.nlp.trees.Tree determineHead(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer:edu.stanford.nlp.trees.Tree lambda$normalizeWholeTree$252(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.parser.lexparser.BinaryHeadFinder:edu.stanford.nlp.trees.Tree determineHead(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer:void addTMP9(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.tregex.Relation$ImmediatelyHeadedBy$1:void initialize()",
            "edu.stanford.nlp.parser.lexparser.TregexPoweredTreebankParserParams$AnnotateHeadFunction:java.lang.String apply(edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.Relation$ImmediatelyHeads$1:void initialize()",
            "edu.stanford.nlp.trees.tregex.Relation$ImmediatelyHeads:boolean satisfies(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.Tree:void percolateHeads(edu.stanford.nlp.trees.HeadFinder)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotator:edu.stanford.nlp.trees.Tree transformTreeHelper(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.tregex.Relation$Heads$1:void advance()",
            "edu.stanford.nlp.trees.CollocationFinder:void getCollocationsList(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.tregex.Relation$Heads:boolean satisfies(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.TreePrint:edu.stanford.nlp.trees.Tree markHeadNodes(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.parser.lexparser.TreeBinarizer:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer$TreeNullAnnotator:edu.stanford.nlp.trees.Tree transformTreeHelper(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.TreeGraphNode:void percolateHeads(edu.stanford.nlp.trees.HeadFinder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.CollinsHeadFinder:void lambda$main$58(edu.stanford.nlp.trees.HeadFinder,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.ie.machinereading.common.NoPunctuationHeadFinder:void lambda$main$59(edu.stanford.nlp.trees.HeadFinder,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.Tree:void percolateHeads(edu.stanford.nlp.trees.HeadFinder)",
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void processResults(edu.stanford.nlp.parser.common.ParserQuery,edu.stanford.nlp.trees.Tree,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,edu.stanford.nlp.trees.TreePrint)",
            "edu.stanford.nlp.trees.international.french.DybroFrenchHeadFinder:void lambda$main$334(edu.stanford.nlp.trees.HeadFinder,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.GrammaticalStructure:edu.stanford.nlp.trees.GrammaticalStructure fromStringReps(java.util.List,java.util.List,java.util.List)",
            "edu.stanford.nlp.trees.GrammaticalStructure:edu.stanford.nlp.trees.GrammaticalStructure buildCoNLLXGrammaticalStructure(java.util.List,java.util.Map,edu.stanford.nlp.trees.GrammaticalStructureFromDependenciesFactory)",
            "edu.stanford.nlp.trees.GrammaticalStructure:void <init>(edu.stanford.nlp.trees.Tree,java.util.Collection,java.util.concurrent.locks.Lock,edu.stanford.nlp.trees.TreeTransformer,edu.stanford.nlp.trees.HeadFinder,java.util.function.Predicate,java.util.function.Predicate)",
            "edu.stanford.nlp.parser.metrics.UnlabeledAttachmentEval:java.util.Set makeObjects(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.TreeGraphNode:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.FastFactoredParser:double depScoreTree(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.TreeGraphNode:void percolateHeads(edu.stanford.nlp.trees.HeadFinder)",
            "edu.stanford.nlp.trees.international.french.FrenchHeadFinder:void lambda$main$335(edu.stanford.nlp.trees.HeadFinder,edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.Tree:edu.stanford.nlp.trees.Tree headTerminal(edu.stanford.nlp.trees.HeadFinder,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Tree:edu.stanford.nlp.trees.Tree headTerminal(edu.stanford.nlp.trees.HeadFinder,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.Tree:edu.stanford.nlp.trees.Tree headTerminal(edu.stanford.nlp.trees.HeadFinder)"
        ]
    },
    "edu.stanford.nlp.scoref.StatisticalCorefSystem:void runOnConll()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.StatisticalCorefSystem:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.scoref.DocumentProcessor:void runFromScratch(java.util.Properties,edu.stanford.nlp.hcoref.data.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.StatisticalCorefTrainer:void preprocess(java.util.Properties,edu.stanford.nlp.hcoref.data.Dictionaries,boolean)"
        ]
    },
    "edu.stanford.nlp.scoref.DocumentProcessor:void run(java.util.Properties,edu.stanford.nlp.hcoref.data.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.List getShortestPathEdges(java.lang.Object,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.List getShortestDirectedPathEdges(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.List getShortestUndirectedPathEdges(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.util.List getShortestUndirectedPathNodes(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.BasicRelationFeatureFactory:void addDependencyPathFeatures(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.ie.machinereading.structure.RelationMention,edu.stanford.nlp.ie.machinereading.structure.EntityMention,edu.stanford.nlp.ie.machinereading.structure.EntityMention,java.util.List,java.util.List,java.util.logging.Logger)"
        ]
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.List getShortestPath(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.List getShortestPathEdges(java.lang.Object,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.util.List getShortestDirectedPathNodes(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.sieve.Sieve:java.lang.String resolveMention(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void collapseDependenciesTree(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:java.util.Collection typedDependenciesCollapsedTree()"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:java.util.List typedDependenciesCollapsed(edu.stanford.nlp.trees.GrammaticalStructure$Extras)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TreePrint:void printTreeInternal(edu.stanford.nlp.trees.Tree,java.io.PrintWriter,boolean)",
            "edu.stanford.nlp.trees.GrammaticalStructure:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.GrammaticalStructure:java.util.List typedDependenciesCollapsed(boolean)",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:void main(java.lang.String[])",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.GrammaticalStructure,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode,edu.stanford.nlp.trees.GrammaticalStructure$Extras,boolean,java.util.function.Predicate)",
            "edu.stanford.nlp.trees.GrammaticalStructure:java.util.Collection typedDependenciesCollapsed()"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:java.util.List typedDependenciesCCprocessed(edu.stanford.nlp.trees.GrammaticalStructure$Extras)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:java.util.List typedDependenciesCCprocessed()",
            "edu.stanford.nlp.trees.GrammaticalStructure:java.util.List typedDependenciesCCprocessed(boolean)",
            "edu.stanford.nlp.trees.GrammaticalStructure:void main(java.lang.String[])",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.GrammaticalStructure,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode,edu.stanford.nlp.trees.GrammaticalStructure$Extras,boolean,java.util.function.Predicate)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$SearchNodeIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void goToNextNodeMatch()"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void removeExactDuplicates(edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void correctDependencies(edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.international.arabic.Buckwalter:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.international.arabic.Buckwalter:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.international.arabic.pipeline.DefaultLexicalMapper:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.arabic.pipeline.DefaultLexicalMapper:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.international.arabic.ArabicTreeNormalizer:void <init>(boolean,boolean,boolean,boolean,boolean)"
        ]
    },
    "edu.stanford.nlp.parser.dvparser.DVModel:void <init>(edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.parser.lexparser.UnaryGrammar,edu.stanford.nlp.parser.lexparser.BinaryGrammar)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.DVParser:void <init>(edu.stanford.nlp.parser.lexparser.LexicalizedParser)"
        ]
    },
    "edu.stanford.nlp.patterns.InvertedIndexByTokens:void update(java.util.List,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void labelWords(java.lang.String,java.util.Map,java.util.Collection,java.lang.String,edu.stanford.nlp.util.CollectionValuedMap)"
        ]
    },
    "edu.stanford.nlp.patterns.InvertedIndexByTokens:void add(java.util.Map,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void setUpConstructor(java.util.Map,java.util.Map,boolean,java.util.Map,java.util.Map,java.util.Map)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.util.Map loadFromSavedPatternsWordsDir(edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass,java.util.Properties)",
            "edu.stanford.nlp.patterns.InvertedIndexByTokens:edu.stanford.nlp.patterns.InvertedIndexByTokens createIndex(java.util.Map,java.util.Properties,java.util.Set,java.lang.String,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.AmbiguityClass:void <init>(java.lang.String,boolean,edu.stanford.nlp.tagger.maxent.Dictionary,edu.stanford.nlp.tagger.maxent.TTags)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.AmbiguityClasses:int getClass(java.lang.String,edu.stanford.nlp.tagger.maxent.Dictionary,int,edu.stanford.nlp.tagger.maxent.TTags)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TestSentence:java.lang.String[] stringTagsAt(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TestSentence:int[] getPossibleValues(int)",
            "edu.stanford.nlp.tagger.maxent.TestSentence:void calculateProbs(double[][][])",
            "edu.stanford.nlp.tagger.maxent.TestSentence:double[] getApproximateScores(edu.stanford.nlp.tagger.maxent.History)",
            "edu.stanford.nlp.tagger.maxent.TestSentence:double[] getExactScores(edu.stanford.nlp.tagger.maxent.History)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Mention:void setDiscourse()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Mention:void process(edu.stanford.nlp.hcoref.data.Dictionaries,edu.stanford.nlp.hcoref.data.Semantics)"
        ]
    },
    "edu.stanford.nlp.naturalli.OpenIE:java.util.Set entailmentsFromClauses(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.OpenIE:java.util.List relationsInSentence(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.naturalli.OpenIE:void annotateSentence(edu.stanford.nlp.util.CoreMap,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.naturalli.OpenIE:java.util.List relationsInClause(edu.stanford.nlp.naturalli.SentenceFragment)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.Mention:void setDiscourse()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Mention:void process(edu.stanford.nlp.dcoref.Dictionaries,edu.stanford.nlp.dcoref.Semantics,edu.stanford.nlp.dcoref.MentionExtractor)"
        ]
    },
    "edu.stanford.nlp.dcoref.Mention:void process(edu.stanford.nlp.dcoref.Dictionaries,edu.stanford.nlp.dcoref.Semantics,edu.stanford.nlp.dcoref.MentionExtractor,edu.stanford.nlp.classify.LogisticClassifier)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.CustomAnnotationSerializer:void saveCorefChains(java.util.Map,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.CustomAnnotationSerializer:java.io.OutputStream write(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream)"
        ]
    },
    "edu.stanford.nlp.dcoref.Rules:boolean antecedentMatchesMentionSpeakerAnnotation(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.Rules:boolean antecedentIsMentionSpeaker(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries,java.util.Set,edu.stanford.nlp.dcoref.Semantics)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$RecordHandlerTree:void process(edu.stanford.nlp.util.logging.Redwood$Record,edu.stanford.nlp.util.logging.Redwood$MessageType,int,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood$RecordHandlerTree:void access$000(edu.stanford.nlp.util.logging.Redwood$RecordHandlerTree,edu.stanford.nlp.util.logging.Redwood$Record,edu.stanford.nlp.util.logging.Redwood$MessageType,int,long)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceToken:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.CoNLLMentionExtractor:edu.stanford.nlp.dcoref.Document nextDoc()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:double runAndScoreCoref(edu.stanford.nlp.dcoref.SieveCoreferenceSystem,edu.stanford.nlp.dcoref.MentionExtractor,java.util.Properties,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.dcoref.MentionExtractor:edu.stanford.nlp.dcoref.Document arrange(edu.stanford.nlp.pipeline.Annotation,java.util.List,java.util.List,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.DeterministicCorefAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.util.ThreeDimensionalMap:java.util.Set secondKeySet()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.ThreeDimensionalMap:java.util.Map get(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.ThreeDimensionalMap:void remove(java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recountOutside(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.util.IdentityHashMap,java.util.IdentityHashMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recurseOutside(edu.stanford.nlp.trees.Tree,java.util.IdentityHashMap,java.util.IdentityHashMap)"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter$CounterView:double getCount(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.maxent.iis.LambdaSolve:double GSFPrime(double,edu.stanford.nlp.maxent.Feature,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.maxent.iis.LambdaSolve:double GSFPrime(double,edu.stanford.nlp.maxent.Feature)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.maxent.iis.LambdaSolve:double GainCompute(edu.stanford.nlp.maxent.Feature,double)"
        ]
    },
    "edu.stanford.nlp.maxent.iis.LambdaSolve:double GSF(double,edu.stanford.nlp.maxent.Feature,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.maxent.iis.LambdaSolve:double GSF(double,edu.stanford.nlp.maxent.Feature)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.maxent.iis.LambdaSolve:double GainCompute(edu.stanford.nlp.maxent.Feature,double)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:void replaceNode(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:edu.stanford.nlp.semgraph.SemanticGraph setSentIndex(edu.stanford.nlp.semgraph.SemanticGraph,int)"
        ]
    },
    "edu.stanford.nlp.naturalli.ForwardEntailerSearchProblem:java.util.List searchImplementation()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ForwardEntailerSearchProblem:java.util.List search()"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void createMultiWordExpression(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.trees.GrammaticalRelation,edu.stanford.nlp.ling.IndexedWord[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void processSimple2WP(edu.stanford.nlp.semgraph.SemanticGraph,java.util.HashMap)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void process3WP(edu.stanford.nlp.semgraph.SemanticGraph,java.util.HashMap)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void processComplex2WP(edu.stanford.nlp.semgraph.SemanticGraph,java.util.HashMap)"
        ]
    },
    "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void stripAuxMark(edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void access$200(edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem,edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void convertRel(edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void postProcessDependencies(java.util.List)"
        ]
    },
    "edu.stanford.nlp.naturalli.Util:void stripPrepCases(edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void expandPPConjunction(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.List,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void expandPPConjunctions(edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:void enRepairEdges(edu.stanford.nlp.semgraph.SemanticGraph,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:void enRepairEdges(edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void collapseReferent(edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void collapseDependencies(java.util.List,boolean,edu.stanford.nlp.trees.GrammaticalStructure$Extras)"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.util.Pair iterateExtractApply4Label(java.lang.String,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.Counter,java.io.BufferedWriter,java.lang.String,java.io.BufferedWriter,java.util.Set,java.util.Set,edu.stanford.nlp.util.CollectionValuedMap,edu.stanford.nlp.stats.TwoDimensionalCounter,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void iterateExtractApply(java.util.Map,java.util.Map,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.stats.TwoDimensionalCounter:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:void printProbsDocuments(edu.stanford.nlp.objectbank.ObjectBank)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void printProbs(java.util.Collection,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void printProbs(java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)"
        ]
    },
    "edu.stanford.nlp.patterns.ScorePhrases:void runParallelApplyPats(java.util.Map,java.lang.String,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.util.CollectionValuedMap,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ScorePhrases:void applyPats(edu.stanford.nlp.stats.Counter,java.lang.String,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.util.CollectionValuedMap,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.stats.TwoDimensionalCounter:java.lang.String toCSVString(java.text.NumberFormat)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters:void save2DCounter(edu.stanford.nlp.stats.TwoDimensionalCounter,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.TwoDimensionalCounter:java.lang.String toMatrixString(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters:void addInPlace(edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.util.Map loadFromSavedPatternsWordsDir(edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass,java.util.Properties)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.TwoDimensionalCounter add(edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter)",
            "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter learnNewPhrasesPrivate(java.lang.String,edu.stanford.nlp.patterns.surface.PatternsForEachToken,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.util.Set,edu.stanford.nlp.util.CollectionValuedMap,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,java.lang.String,java.util.Set,boolean)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:void addInPlace(edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.TwoDimensionalCounter:double[][] toMatrix(java.util.List,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.TwoDimensionalCounter:java.lang.String toMatrixString(int)"
        ]
    },
    "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:java.lang.Double lambda$score$153(edu.stanford.nlp.util.Pair)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:edu.stanford.nlp.stats.Counter convert2OneDim(java.lang.String,java.util.function.Function,java.util.Set,edu.stanford.nlp.stats.TwoDimensionalCounter,boolean,boolean,edu.stanford.nlp.stats.Counter,boolean)"
        ]
    },
    "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:java.lang.Double lambda$score$151(edu.stanford.nlp.util.Pair)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:edu.stanford.nlp.stats.Counter convert2OneDim(java.lang.String,java.util.function.Function,java.util.Set,edu.stanford.nlp.stats.TwoDimensionalCounter,boolean,boolean,edu.stanford.nlp.stats.Counter,boolean)"
        ]
    },
    "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:java.lang.Double lambda$score$154(edu.stanford.nlp.util.Pair)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:edu.stanford.nlp.stats.Counter convert2OneDim(java.lang.String,java.util.function.Function,java.util.Set,edu.stanford.nlp.stats.TwoDimensionalCounter,boolean,boolean,edu.stanford.nlp.stats.Counter,boolean)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams$AddPOSSequenceFunction:java.lang.String apply(edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams$AddPOSSequenceFunction:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:java.lang.Double lambda$score$152(edu.stanford.nlp.util.Pair)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:edu.stanford.nlp.stats.Counter convert2OneDim(java.lang.String,java.util.function.Function,java.util.Set,edu.stanford.nlp.stats.TwoDimensionalCounter,boolean,boolean,edu.stanford.nlp.stats.Counter,boolean)"
        ]
    },
    "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:java.lang.Double lambda$score$150(edu.stanford.nlp.util.Pair)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:edu.stanford.nlp.stats.Counter convert2OneDim(java.lang.String,java.util.function.Function,java.util.Set,edu.stanford.nlp.stats.TwoDimensionalCounter,boolean,boolean,edu.stanford.nlp.stats.Counter,boolean)"
        ]
    },
    "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:java.lang.Double lambda$score$155(edu.stanford.nlp.util.Pair)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:edu.stanford.nlp.stats.Counter convert2OneDim(java.lang.String,java.util.function.Function,java.util.Set,edu.stanford.nlp.stats.TwoDimensionalCounter,boolean,boolean,edu.stanford.nlp.stats.Counter,boolean)"
        ]
    },
    "edu.stanford.nlp.classify.ColumnDataClassifier:boolean trainClassifier()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter learnNewPhrases(java.lang.String,edu.stanford.nlp.patterns.surface.PatternsForEachToken,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.util.CollectionValuedMap,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,java.lang.String,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.util.Pair iterateExtractApply4Label(java.lang.String,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.Counter,java.io.BufferedWriter,java.lang.String,java.io.BufferedWriter,java.util.Set,java.util.Set,edu.stanford.nlp.util.CollectionValuedMap,edu.stanford.nlp.stats.TwoDimensionalCounter,int)"
        ]
    },
    "edu.stanford.nlp.patterns.dep.ApplyDepPatterns:edu.stanford.nlp.util.Pair call()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.dep.ApplyDepPatterns:java.lang.Object call()"
        ]
    },
    "edu.stanford.nlp.stats.TwoDimensionalCounter:void decrementCount(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.TwoDimensionalCounter:void decrementCount(java.lang.Object,java.lang.Object,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.TwoDimensionalCounter:void incrementCount(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void addStats(edu.stanford.nlp.stats.TwoDimensionalCounter,java.util.List)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:void makeDatum(java.lang.String,edu.stanford.nlp.classify.ColumnDataClassifier$Flags,java.lang.Object,java.lang.String)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.util.Triple printProbsDocument(java.util.List)",
            "edu.stanford.nlp.trees.Treebanks:void lambda$countTaggings$259(edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.patterns.ScorePhrases:void statsWithoutApplyingPatterns(java.util.Map,edu.stanford.nlp.patterns.surface.PatternsForEachToken,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter)",
            "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter learnNewPhrasesPrivate(java.lang.String,edu.stanford.nlp.patterns.surface.PatternsForEachToken,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.util.Set,edu.stanford.nlp.util.CollectionValuedMap,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,java.lang.String,java.util.Set,boolean)"
        ]
    },
    "edu.stanford.nlp.patterns.surface.ApplyPatterns:edu.stanford.nlp.util.Triple call()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.surface.ApplyPatterns:java.lang.Object call()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams:void loadMWMap(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams:int setOptionFlag(java.lang.String[],int)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:void loadInto2DCounter(java.lang.String,java.lang.Class,java.lang.Class,edu.stanford.nlp.stats.TwoDimensionalCounter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.TwoDimensionalCounter load2DCounter(java.lang.String,java.lang.Class,java.lang.Class)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TaggerExperiments:void addRareTemplatesNew(edu.stanford.nlp.tagger.maxent.History,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TaggerExperiments:void <init>(edu.stanford.nlp.tagger.maxent.TaggerConfig,edu.stanford.nlp.tagger.maxent.MaxentTagger)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.Dictionary:void setAmbClasses(edu.stanford.nlp.tagger.maxent.AmbiguityClasses,int,edu.stanford.nlp.tagger.maxent.TTags)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void readModelAndInit(java.util.Properties,java.io.DataInputStream,boolean)",
            "edu.stanford.nlp.tagger.maxent.TaggerExperiments:void initTemplatesNew()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.EnglishUnknownWordModel:java.lang.String getSignature(java.lang.String,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EnglishUnknownWordModel:int getSignatureIndex(int,int,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ling.CoreLabel:void <init>(java.lang.String[],java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.ColumnDocumentReaderAndWriter$ColumnDocParser:java.util.List apply(java.lang.String)",
            "edu.stanford.nlp.process.CoreLabelTokenFactory:edu.stanford.nlp.ling.CoreLabel makeToken(java.lang.String[],java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapNodePatternTrigger:java.util.Collection apply(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.CoreMapNodePatternTrigger:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.fsm.TransducerGraph:edu.stanford.nlp.fsm.TransducerGraph createGraphFromPaths(java.util.List,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.TransducerGraph:edu.stanford.nlp.fsm.TransducerGraph createRandomGraph(int,int,double,int,java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.EnglishUnknownWordModel:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,int,double,double,double,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters$3:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams$1:java.lang.Object formResult()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams$1:edu.stanford.nlp.parser.lexparser.DependencyGrammar formResult()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters:double pearsonsCorrelationCoefficient(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:double spearmanRankCorrelation(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter L2Normalize(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter asNormalizedCounter(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:double jensenShannonDivergence(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.Counters:double skewDivergence(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,double)"
        ]
    },
    "edu.stanford.nlp.patterns.surface.LearnImportantFeatures:edu.stanford.nlp.stats.Counter getTopFeatures(java.util.Iterator,double,double,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void setUpConstructor(java.util.Map,java.util.Map,boolean,java.util.Map,java.util.Map,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter saferL2Normalize(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.stats.Counter FScore(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void evaluate(java.util.Map,boolean)"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswers(java.util.Collection,java.io.PrintWriter,edu.stanford.nlp.sequences.DocumentReaderAndWriter,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswers(java.util.Collection,edu.stanford.nlp.sequences.DocumentReaderAndWriter,boolean)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswers(java.lang.String,java.io.OutputStream,edu.stanford.nlp.sequences.DocumentReaderAndWriter,boolean)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:void classifyAndWriteAnswers(java.util.Collection,java.util.List,java.io.PrintWriter,edu.stanford.nlp.sequences.DocumentReaderAndWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifierEvaluator:double evaluate(double[])",
            "edu.stanford.nlp.ie.crf.CRFClassifierEvaluator:void outputToCmd(java.io.OutputStream)"
        ]
    },
    "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.util.Pair testExamples(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.util.Pair crossValidate(edu.stanford.nlp.classify.GeneralDataset,java.util.List)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:void testClassifier(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution getDistribution(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon:void finishTraining()",
            "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution getDistributionFromPartiallySpecifiedCounter(edu.stanford.nlp.stats.Counter,int)",
            "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon:edu.stanford.nlp.stats.Distribution getWordLengthDistribution()",
            "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution getDistributionFromLogValues(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.Distribution:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.fsm.QuasiDeterminizer:edu.stanford.nlp.fsm.TransducerGraph processGraph(edu.stanford.nlp.fsm.TransducerGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:void main(java.lang.String[])",
            "edu.stanford.nlp.fsm.QuasiDeterminizer:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ExactGrammarCompactor:edu.stanford.nlp.fsm.TransducerGraph doCompaction(edu.stanford.nlp.fsm.TransducerGraph,java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:boolean equals(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters$2:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.stats.ClassicCounter:boolean equals(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.classify.RVFDataset:edu.stanford.nlp.classify.RVFDataset scaleDatasetGaussian(edu.stanford.nlp.classify.RVFDataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.optimization.AbstractCachingDiffFunction:void ensure(double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.AbstractCachingDiffFunction:double[] derivativeAt(double[])",
            "edu.stanford.nlp.optimization.AbstractCachingDiffFunction:double valueAt(double[])"
        ]
    },
    "edu.stanford.nlp.stats.Counters:double jensenShannonDivergence(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.Dataset:edu.stanford.nlp.classify.RVFDataset getL1NormalizedTFIDFDataset()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.pascal.ISODateInstance:boolean extractFields(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.pascal.ISODateInstance:void <init>(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.ie.pascal.ISODateInstance:void <init>(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier:java.util.List classify(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:java.util.List classifyWithGlobalInformation(java.util.List,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier$2:java.util.List process(java.util.List)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.lang.String classifyToString(java.lang.String,java.lang.String,boolean)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.RelationExtractorResultsPrinter:void printResults(java.io.PrintWriter,java.util.List,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.RelationExtractorResultsPrinter:void printResultsUsingLabels(java.io.PrintWriter,java.util.List,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswersKBest(java.lang.String,int,edu.stanford.nlp.sequences.DocumentReaderAndWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFBiasedClassifier:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.scoref.Clusterer:edu.stanford.nlp.stats.Counter access$700(edu.stanford.nlp.scoref.ClustererDataLoader$ClustererDoc,edu.stanford.nlp.scoref.Clusterer$Cluster,edu.stanford.nlp.scoref.Clusterer$Cluster,edu.stanford.nlp.scoref.Clusterer$GlobalFeatures)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.Clusterer$State:edu.stanford.nlp.util.Pair getActions(edu.stanford.nlp.scoref.Clusterer$ClustererClassifier)",
            "edu.stanford.nlp.scoref.Clusterer$State:boolean doBestAction(edu.stanford.nlp.scoref.Clusterer$ClustererClassifier)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:java.lang.String toDistributionString(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifier:java.lang.String toString(java.lang.String,int)"
        ]
    },
    "edu.stanford.nlp.classify.LogisticClassifier:java.lang.Object classOf(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LogisticClassifier:java.lang.Object classOf(edu.stanford.nlp.ling.RVFDatum)",
            "edu.stanford.nlp.classify.LogisticClassifier:java.lang.Object classOfRVFDatum(edu.stanford.nlp.ling.RVFDatum)"
        ]
    },
    "edu.stanford.nlp.classify.LogisticClassifier:double probabilityOf(edu.stanford.nlp.stats.Counter,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LogisticClassifier:double probabilityOfRVFDatum(edu.stanford.nlp.ling.RVFDatum)"
        ]
    },
    "edu.stanford.nlp.stats.Distribution$DynamicDistribution:java.lang.Object argmax()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution distributionWithDirichletPrior(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Distribution,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Distribution:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.stats.Counters:double skewDivergence(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.rf.DecisionTree:double probabilityOfTrue(edu.stanford.nlp.ling.RVFDatum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters$3:java.lang.Object put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters:java.lang.Object argmax(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Distribution$DynamicDistribution:java.lang.Object argmax()",
            "edu.stanford.nlp.simple.SentenceAlgorithms:java.lang.Object modeInSpan(edu.stanford.nlp.ie.machinereading.structure.Span,java.util.function.Function)",
            "edu.stanford.nlp.classify.LinearClassifier:java.lang.Object classOf(edu.stanford.nlp.ling.Datum)",
            "edu.stanford.nlp.semgraph.SemanticGraph:void resetRoots()",
            "edu.stanford.nlp.classify.LinearClassifier:java.lang.Object classOf(edu.stanford.nlp.ling.RVFDatum)",
            "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter learnNewPhrasesPrivate(java.lang.String,edu.stanford.nlp.patterns.surface.PatternsForEachToken,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.util.Set,edu.stanford.nlp.util.CollectionValuedMap,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,java.lang.String,java.util.Set,boolean)",
            "edu.stanford.nlp.stats.Distribution:java.lang.Object argmax()",
            "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String printErrorLog(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.stats.Counter,int,edu.stanford.nlp.hcoref.data.Dictionaries,edu.stanford.nlp.hcoref.sieve.RFSieve)",
            "edu.stanford.nlp.hcoref.sieve.RFSieve:void findCoreferentAntecedent(edu.stanford.nlp.hcoref.data.Mention,int,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.StringBuilder)",
            "edu.stanford.nlp.stats.MultiClassAccuracyStats:void initMC(edu.stanford.nlp.classify.ProbabilisticClassifier,edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:void modifyUsingCoreNLPNER(edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.sequences.KBestSequenceFinder:int[] bestSequence(edu.stanford.nlp.sequences.SequenceModel)",
            "edu.stanford.nlp.classify.LinearClassifier:java.lang.Object classOfRVFDatum(edu.stanford.nlp.ling.RVFDatum)",
            "edu.stanford.nlp.naturalli.Util:java.lang.String guessNER(java.util.List,edu.stanford.nlp.ie.machinereading.structure.Span)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:java.lang.Object argmax(edu.stanford.nlp.stats.Counter,java.util.Comparator)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.md.MentionDetectionClassifier:void classifyMentions(java.util.List,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)",
            "edu.stanford.nlp.naturalli.OpenIE:edu.stanford.nlp.util.Pair grokCorefMention(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.hcoref.data.CorefChain$CorefMention)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:java.lang.Object sample(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Distribution:java.lang.Object sampleFrom()"
        ]
    },
    "edu.stanford.nlp.stats.Distribution:java.lang.Object sampleFrom(java.util.Random)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Distribution:java.lang.Object drawSample(java.util.Random)"
        ]
    },
    "edu.stanford.nlp.sentiment.AbstractEvaluate:void printSummary()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.SentimentTraining:void train(edu.stanford.nlp.sentiment.SentimentModel,java.lang.String,java.util.List,java.util.List)",
            "edu.stanford.nlp.sentiment.Evaluate:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.classify.RVFDataset:edu.stanford.nlp.classify.RVFDataset scaleDataset(edu.stanford.nlp.classify.RVFDataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.metrics.AbstractEval$RuleErrorEval:void display(boolean,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:double testOnTreebank(edu.stanford.nlp.trees.Treebank)"
        ]
    },
    "edu.stanford.nlp.hcoref.Rules:boolean entityClusterAllCorefDictionary(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Dictionaries,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.util.CollectionUtils:java.util.Set modes(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.CollectionUtils:java.lang.Object mode(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:void justificationOf(edu.stanford.nlp.ling.Datum,java.io.PrintWriter,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifier:void dumpSorted()"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:void justificationOf(edu.stanford.nlp.ling.Datum,java.io.PrintWriter,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifier:void justificationOf(edu.stanford.nlp.ling.Datum,java.io.PrintWriter)"
        ]
    },
    "edu.stanford.nlp.parser.metrics.AbstractEval$CatErrorEval:void display(boolean,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:double testOnTreebank(edu.stanford.nlp.trees.Treebank)"
        ]
    },
    "edu.stanford.nlp.pipeline.XMLOutputter:nu.xom.Element makeProbabilitiesElement(edu.stanford.nlp.ie.machinereading.structure.ExtractionObject,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.XMLOutputter:nu.xom.Element toXML(edu.stanford.nlp.ie.machinereading.structure.RelationMention,java.lang.String)",
            "edu.stanford.nlp.pipeline.XMLOutputter:nu.xom.Element toXML(edu.stanford.nlp.ie.machinereading.structure.EntityMention,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.structure.ExtractionObject:java.lang.String probsToString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.structure.RelationMention:java.lang.String toString()",
            "edu.stanford.nlp.ie.machinereading.structure.EntityMention:java.lang.String toString()"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.structure.ExtractionObject:boolean printableObject(double,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.structure.RelationMention:boolean printableObject(double)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:java.lang.String toSortedString(edu.stanford.nlp.stats.Counter,int,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void evaluate(java.util.Map,boolean)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.util.Pair iterateExtractApply4Label(java.lang.String,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.Counter,java.io.BufferedWriter,java.lang.String,java.io.BufferedWriter,java.util.Set,java.util.Set,edu.stanford.nlp.util.CollectionValuedMap,edu.stanford.nlp.stats.TwoDimensionalCounter,int)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.stats.Counter getPatterns(java.lang.String,java.util.Set,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.Counter,java.util.Set)",
            "edu.stanford.nlp.patterns.ScorePhrasesAverageFeatures:edu.stanford.nlp.stats.Counter scorePhrases(java.lang.String,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.Counter,java.util.Set,boolean)",
            "edu.stanford.nlp.patterns.surface.LearnImportantFeatures:edu.stanford.nlp.stats.Counter getTopFeatures(java.util.Iterator,double,double,java.lang.String)",
            "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter learnNewPhrasesPrivate(java.lang.String,edu.stanford.nlp.patterns.surface.PatternsForEachToken,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.util.Set,edu.stanford.nlp.util.CollectionValuedMap,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,java.lang.String,java.util.Set,boolean)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void saveParserToTextFile(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.BasicRelationFeatureFactory:edu.stanford.nlp.ling.Datum createDatum(edu.stanford.nlp.ie.machinereading.structure.RelationMention,java.util.logging.Logger)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.BasicRelationFeatureFactory:edu.stanford.nlp.ling.Datum createTestDatum(edu.stanford.nlp.ie.machinereading.structure.RelationMention,java.util.logging.Logger)",
            "edu.stanford.nlp.ie.machinereading.BasicRelationFeatureFactory:edu.stanford.nlp.ling.Datum createDatum(edu.stanford.nlp.ie.machinereading.structure.RelationMention)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.BasicRelationFeatureFactory:boolean addFeatures(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.ie.machinereading.structure.RelationMention,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.BasicRelationFeatureFactory:java.util.Set getFeatures(edu.stanford.nlp.ie.machinereading.structure.RelationMention,java.lang.String)",
            "edu.stanford.nlp.ie.machinereading.BasicRelationFeatureFactory:edu.stanford.nlp.ling.Datum createDatum(edu.stanford.nlp.ie.machinereading.structure.RelationMention,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.scoref.MaxMarginMentionRanker:void learn(edu.stanford.nlp.scoref.Example,edu.stanford.nlp.scoref.Example,java.util.Map,edu.stanford.nlp.scoref.Compressor,edu.stanford.nlp.scoref.MaxMarginMentionRanker$ErrorType)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.scoref.SimpleLinearClassifier:void learn(edu.stanford.nlp.stats.Counter,double,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.PairwiseModel:void learn(edu.stanford.nlp.scoref.Example,edu.stanford.nlp.scoref.Example,java.util.Map,edu.stanford.nlp.scoref.Compressor,double)",
            "edu.stanford.nlp.scoref.PairwiseModel:void learn(edu.stanford.nlp.scoref.Example,java.util.Map,edu.stanford.nlp.scoref.Compressor,double)",
            "edu.stanford.nlp.scoref.PairwiseModel:void learn(edu.stanford.nlp.scoref.Example,java.util.Map,edu.stanford.nlp.scoref.Compressor)",
            "edu.stanford.nlp.scoref.Clusterer$ClustererClassifier:void learn(edu.stanford.nlp.util.Pair)"
        ]
    },
    "edu.stanford.nlp.sequences.ExactBestSequenceFinder:edu.stanford.nlp.util.Pair bestSequence(edu.stanford.nlp.sequences.SequenceModel,double[][])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.ExactBestSequenceFinder:edu.stanford.nlp.util.Pair bestSequenceWithLinearConstraints(edu.stanford.nlp.sequences.SequenceModel,double[][])",
            "edu.stanford.nlp.sequences.ExactBestSequenceFinder:int[] bestSequence(edu.stanford.nlp.sequences.SequenceModel)"
        ]
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier$Scorer:double scoreOf(int[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:double scoreTB(edu.stanford.nlp.parser.lexparser.IntDependency)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.AbstractDependencyGrammar:double scoreTB(int,int,int,int,boolean,int)"
        ]
    },
    "edu.stanford.nlp.classify.Dataset:void selectFeaturesBinaryInformationGain(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.LinearClassifier:void <init>(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void search(java.util.function.Predicate)",
            "edu.stanford.nlp.classify.LinearClassifier:void <init>(double[],edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.naturalli.ClauseSplitter:void lambda$train$109(edu.stanford.nlp.naturalli.OpenIE,edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$Featurizer,java.util.Optional,edu.stanford.nlp.classify.WeightedDataset,java.util.concurrent.atomic.AtomicInteger,edu.stanford.nlp.util.Pair)"
        ]
    },
    "edu.stanford.nlp.classify.SVMLightClassifier:void <init>(edu.stanford.nlp.stats.ClassicCounter,edu.stanford.nlp.stats.ClassicCounter,edu.stanford.nlp.classify.LinearClassifier)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.SVMLightClassifier:void <init>(edu.stanford.nlp.stats.ClassicCounter,edu.stanford.nlp.stats.ClassicCounter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.classify.SVMLightClassifier trainClassifierBasic(edu.stanford.nlp.classify.GeneralDataset)"
        ]
    },
    "edu.stanford.nlp.scoref.Clusterer$State:edu.stanford.nlp.util.Pair getActions(edu.stanford.nlp.scoref.Clusterer$ClustererClassifier)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.Clusterer:java.util.List runPolicy(edu.stanford.nlp.scoref.ClustererDataLoader$ClustererDoc,double)"
        ]
    },
    "edu.stanford.nlp.scoref.SimpleLinearClassifier:double label(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.PairwiseModel:double predict(edu.stanford.nlp.scoref.Example,java.util.Map,edu.stanford.nlp.scoref.Compressor)"
        ]
    },
    "edu.stanford.nlp.scoref.Clusterer:java.util.List runPolicy(edu.stanford.nlp.scoref.ClustererDataLoader$ClustererDoc,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.Clusterer:void doTraining(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.scoref.Clusterer$ClustererClassifier:edu.stanford.nlp.scoref.Clusterer$CandidateAction bestAction(edu.stanford.nlp.util.Pair)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.Clusterer:double lambda$trainPolicy$211(edu.stanford.nlp.util.Pair)"
        ]
    },
    "edu.stanford.nlp.scoref.Clusterer$State:boolean doBestAction(edu.stanford.nlp.scoref.Clusterer$ClustererClassifier)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.Clusterer:double evaluatePolicy(java.util.List,boolean)",
            "edu.stanford.nlp.scoref.Clusterer:java.util.List getClusterMerges(edu.stanford.nlp.scoref.ClustererDataLoader$ClustererDoc)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord,int,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseSimWordAvgDepGrammar:double probSimilarWordAvg(edu.stanford.nlp.parser.lexparser.IntDependency)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:double probTB(edu.stanford.nlp.parser.lexparser.IntDependency)"
        ]
    },
    "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.stats.ClassicCounter convertWeights(edu.stanford.nlp.stats.ClassicCounter,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.classify.SVMLightClassifier trainClassifierBasic(edu.stanford.nlp.classify.GeneralDataset)"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassAccuracyStats:void <init>(edu.stanford.nlp.classify.ProbabilisticClassifier,edu.stanford.nlp.classify.GeneralDataset,java.lang.String,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassAccuracyStats:void <init>(edu.stanford.nlp.classify.ProbabilisticClassifier,edu.stanford.nlp.classify.GeneralDataset,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassAccuracyStats:double score(edu.stanford.nlp.classify.ProbabilisticClassifier,edu.stanford.nlp.classify.GeneralDataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:java.lang.Double lambda$heldOutSetC$12(edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.stats.Scorer,edu.stanford.nlp.classify.GeneralDataset,java.lang.Double)",
            "edu.stanford.nlp.classify.LinearClassifierFactory$NegativeScorer:java.lang.Double apply(java.lang.Double)",
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:java.lang.Double lambda$crossValidateSetC$10(edu.stanford.nlp.stats.Scorer,edu.stanford.nlp.util.Triple)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:java.lang.Double lambda$crossValidateSetSigma$6(edu.stanford.nlp.stats.Scorer,edu.stanford.nlp.util.Triple)"
        ]
    },
    "edu.stanford.nlp.scoref.Clusterer:double evaluatePolicy(java.util.List,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.Clusterer:void doTraining(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.scoref.Clusterer:java.util.List getClusterMerges(edu.stanford.nlp.scoref.ClustererDataLoader$ClustererDoc)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.ClusteringCorefSystem:void runCoref(edu.stanford.nlp.hcoref.data.Document)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter diff(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.GeneralDataset:void printSVMLightFormat()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.LinearClassifier:void justificationOf(edu.stanford.nlp.ling.RVFDatum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Distribution:java.lang.String toString(java.text.NumberFormat)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:void printLexStats()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void evaluate(java.util.Map,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void evaluate(java.util.Map)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LinearGrammarSmoother:edu.stanford.nlp.util.Pair apply(edu.stanford.nlp.util.Pair)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LinearGrammarSmoother:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.dcoref.Rules:boolean entityClusterAllCorefDictionary(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Dictionaries,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries,java.util.Set,edu.stanford.nlp.dcoref.Semantics)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SisterAnnotationStats:void printStats()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SisterAnnotationStats:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.stats.Distribution$DynamicDistribution:java.lang.Object sampleFrom()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon:java.lang.String sampleFrom(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.stats.Distribution:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Pair:void save(java.io.DataOutputStream)",
            "edu.stanford.nlp.patterns.ConstantsAndVariables$ScorePhraseMeasures:int compareTo(java.lang.Object)",
            "edu.stanford.nlp.patterns.surface.Token:boolean equals(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:java.lang.String toBiggestValuesFirstString(edu.stanford.nlp.stats.Counter,int,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters:java.lang.String toBiggestValuesFirstString(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters:java.lang.String toBiggestValuesFirstString(edu.stanford.nlp.stats.Counter,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters:java.lang.String toVerticalString(edu.stanford.nlp.stats.Counter,int,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:java.lang.String toVerticalString(edu.stanford.nlp.stats.Counter,int)",
            "edu.stanford.nlp.stats.Counters:java.lang.String toVerticalString(edu.stanford.nlp.stats.Counter,int,java.lang.String)",
            "edu.stanford.nlp.stats.Counters:java.lang.String toVerticalString(edu.stanford.nlp.stats.Counter,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:java.util.List topKeysWithCounts(edu.stanford.nlp.stats.Counter,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters:java.lang.String toString(edu.stanford.nlp.stats.Counter,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters:java.util.List topKeys(edu.stanford.nlp.stats.Counter,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters:void retainTopMass(edu.stanford.nlp.stats.Counter,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:boolean isKnown(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.metrics.TaggingEval:void measureOOV(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.TaggingEval:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.TreeBinarizer:edu.stanford.nlp.trees.Tree binarizeLocalTree(edu.stanford.nlp.trees.Tree,int,edu.stanford.nlp.ling.TaggedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreeBinarizer:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:edu.stanford.nlp.stats.Counter probabilityOf(edu.stanford.nlp.ling.Datum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:java.util.List annotateMulticlass(java.util.List)",
            "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:java.util.List extractAllRelations(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.naturalli.OpenIE:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runNER(java.util.Properties)",
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runParse(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runOpenie(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runRegexner(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runPOS(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runDepparse(java.util.Properties)",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runNatlog(java.util.Properties)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runLemma(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void writeData(java.io.Writer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void saveSegmenterDataToText(edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.classify.ColumnDataClassifier:void writeAnswer(java.lang.String[],java.lang.String,edu.stanford.nlp.stats.Distribution)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:void testExample(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset,java.util.List,edu.stanford.nlp.stats.Counter,int)"
        ]
    },
    "edu.stanford.nlp.stats.Distribution:int lambda$toString$8(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Distribution:double logProbabilityOf(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.ColumnDataClassifier:void updatePerformanceStatistics(java.lang.String[],java.lang.String,edu.stanford.nlp.stats.Distribution,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.classify.Classifier,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:void testExample(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset,java.util.List,edu.stanford.nlp.stats.Counter,int)"
        ]
    },
    "edu.stanford.nlp.classify.RVFDataset:void writeSVMLightFormat(java.io.File)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void dumpStats()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter getSegmenterDataFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:void annotateSentence(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:java.util.Iterator ruleIteratorByWord(int,int,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.RVFDataset:void add(edu.stanford.nlp.ling.Datum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.GeneralDataset:edu.stanford.nlp.classify.GeneralDataset sampleDataset(long,double,boolean)",
            "edu.stanford.nlp.classify.GeneralDataset:edu.stanford.nlp.classify.GeneralDataset mapDataset(edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.util.Index,java.util.Map,java.lang.Object)",
            "edu.stanford.nlp.classify.RVFDataset:edu.stanford.nlp.classify.RVFDataset scaleDataset(edu.stanford.nlp.classify.RVFDataset)",
            "edu.stanford.nlp.classify.RVFDataset:edu.stanford.nlp.classify.RVFDataset scaleDatasetGaussian(edu.stanford.nlp.classify.RVFDataset)",
            "edu.stanford.nlp.classify.RVFDataset:void readSVMLightFormat(java.io.File)",
            "edu.stanford.nlp.classify.WeightedRVFDataset:void add(edu.stanford.nlp.ling.Datum)",
            "edu.stanford.nlp.classify.RVFDataset:void main(java.lang.String[])",
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.util.Pair readDataset(java.lang.String,boolean)",
            "edu.stanford.nlp.classify.WeightedRVFDataset:void add(edu.stanford.nlp.ling.RVFDatum,float)",
            "edu.stanford.nlp.classify.RVFDataset:void addAll(java.lang.Iterable)",
            "edu.stanford.nlp.classify.Dataset:edu.stanford.nlp.classify.RVFDataset getL1NormalizedTFIDFDataset()",
            "edu.stanford.nlp.classify.RVFDataset:edu.stanford.nlp.classify.RVFDataset readSVMLightFormat(java.lang.String,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index,java.util.List)",
            "edu.stanford.nlp.classify.GeneralDataset:edu.stanford.nlp.classify.GeneralDataset mapDataset(edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.classify.LinearClassifier fitSigmoid(edu.stanford.nlp.classify.SVMLightClassifier,edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:edu.stanford.nlp.classify.GeneralDataset createDataset(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.classify.RVFDataset:void add(edu.stanford.nlp.ling.Datum,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.surface.LearnImportantFeatures:int sample(java.util.Map,java.util.Random,java.util.Random,double,double,int,java.util.List,edu.stanford.nlp.classify.RVFDataset)",
            "edu.stanford.nlp.classify.WeightedRVFDataset:void add(edu.stanford.nlp.ling.Datum,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.classify.RVFDataset:void addAllWithSourcesAndIds(edu.stanford.nlp.classify.RVFDataset)"
        ]
    },
    "edu.stanford.nlp.patterns.PhraseScorer:double getDictOddsScore(edu.stanford.nlp.patterns.CandidatePhrase,java.lang.String,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammarExtractor:java.lang.Object formResult()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:java.lang.Object extract(java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:java.lang.Object extract(java.util.Collection,double,java.util.Collection,double)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BinaryGrammarExtractor:java.lang.Object formResult()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:java.lang.Object extract(java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:java.lang.Object extract(java.util.Collection,double,java.util.Collection,double)"
        ]
    },
    "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution laplaceSmoothedDistribution(edu.stanford.nlp.stats.Counter,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Distribution:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.GrammarCompactor:edu.stanford.nlp.stats.Distribution computeInputPrior(java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.GrammarCompactor:edu.stanford.nlp.util.Triple compactGrammar(edu.stanford.nlp.util.Pair,java.util.Map,java.util.Map,edu.stanford.nlp.util.Index)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:void initializeChart(edu.stanford.nlp.parser.lexparser.Lattice)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:boolean parse(edu.stanford.nlp.parser.lexparser.Lattice)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:void train(java.util.Collection,edu.stanford.nlp.sequences.DocumentReaderAndWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void train(java.lang.String,java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void train(java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void train(java.util.Collection)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void train(java.lang.String[],edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.international.arabic.process.ArabicSegmenter:void train()"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFFeatureExporter:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.ExtractorFramesRare:edu.stanford.nlp.tagger.maxent.Extractor[] getExtractorFramesRare(java.lang.String,edu.stanford.nlp.tagger.maxent.TTags)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void init(edu.stanford.nlp.tagger.maxent.TaggerConfig)"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void collapseDependenciesTree(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:java.util.Collection typedDependenciesCollapsedTree()"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.BoundedCostOrderedMap:java.lang.Object put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.matcher.BoundedCostOrderedMap:void putAll(java.util.Map)",
            "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$MultiMatchQueue:void add(edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$PartialApproxMatch)",
            "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$MatchQueue:void add(edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$PartialApproxMatch)"
        ]
    },
    "edu.stanford.nlp.util.logging.VisibilityHandler:boolean alsoShow(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$8:void <init>(java.lang.Object[])",
            "edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$6:void <init>()"
        ]
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier:java.util.Set getTags()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.Rules:boolean entityWordsIncluded(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Set)",
            "edu.stanford.nlp.hcoref.sieve.RFSieve:edu.stanford.nlp.ling.RVFDatum extractDatum(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,int,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.String)",
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.CorefCluster:void mergeClusters(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.Sieve:void merge(edu.stanford.nlp.hcoref.data.Document,int,int)",
            "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:void findCoreferentAntecedent(edu.stanford.nlp.hcoref.data.Mention,int,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.StringBuilder)",
            "edu.stanford.nlp.scoref.StatisticalCorefUtils:void mergeCoreferenceClusters(edu.stanford.nlp.util.Pair,edu.stanford.nlp.hcoref.data.Document)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.BoundedCostOrderedMap:java.lang.Object remove(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.Sets:java.util.Set powerSet(java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Sets:java.util.Set powerSet(java.util.Set)",
            "edu.stanford.nlp.util.Sets:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.util.CollectionValuedMap:void removeMapping(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.CollectionValuedMap:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:boolean isDagHelper(edu.stanford.nlp.ling.IndexedWord,java.util.Set,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:boolean isDag(edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.semgraph.SemanticGraph:boolean isDag()",
            "edu.stanford.nlp.semgraph.SemanticGraph:boolean isDagHelper(edu.stanford.nlp.ling.IndexedWord,java.util.Set,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.dcoref.CorefCluster:void mergeClusters(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void coreference(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve)"
        ]
    },
    "edu.stanford.nlp.dcoref.Rules:boolean entityWordsIncluded(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries,java.util.Set,edu.stanford.nlp.dcoref.Semantics)"
        ]
    },
    "edu.stanford.nlp.util.BinaryHeapPriorityQueue:java.lang.Object removeFirst()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:java.lang.String toBiggestValuesFirstString(edu.stanford.nlp.stats.Counter,int,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:void lazyKthBest(edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser$Vertex,int,int)",
            "edu.stanford.nlp.ling.tokensregex.matcher.BoundedCostOrderedMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:java.util.List toSortedList()",
            "edu.stanford.nlp.stats.Counters:java.util.List topKeys(edu.stanford.nlp.stats.Counter,int)",
            "edu.stanford.nlp.graph.DijkstraShortestPath:java.util.List getShortestPath(edu.stanford.nlp.graph.Graph,java.lang.Object,java.lang.Object,boolean)",
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:java.lang.Object next()",
            "edu.stanford.nlp.stats.Counters:void retainTopMass(edu.stanford.nlp.stats.Counter,double)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:edu.stanford.nlp.util.PriorityQueue getCandidates(edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser$Vertex,int)",
            "edu.stanford.nlp.stats.Counters:java.lang.String toBiggestValuesFirstString(edu.stanford.nlp.stats.Counter,int)",
            "edu.stanford.nlp.stats.Counters:java.lang.String toSortedString(edu.stanford.nlp.stats.Counter,int,java.lang.String,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.stats.Counter getPatterns(java.lang.String,java.util.Set,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.Counter,java.util.Set)",
            "edu.stanford.nlp.stats.Counters:java.util.List topKeysWithCounts(edu.stanford.nlp.stats.Counter,int)",
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:void printStats()"
        ]
    },
    "edu.stanford.nlp.util.logging.VisibilityHandler:boolean alsoHide(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$4:void <init>()",
            "edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$3:void <init>()",
            "edu.stanford.nlp.util.logging.Redwood:void hideChannelsEverywhere(java.lang.Object[])",
            "edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$7:void <init>(java.lang.Object[])",
            "edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$5:void <init>()"
        ]
    },
    "edu.stanford.nlp.util.PropertiesUtils:void checkProperties(java.util.Properties,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:void findRootOnlyStatesHelper(edu.stanford.nlp.trees.Tree,java.util.Set,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:void findRootOnlyStatesHelper(edu.stanford.nlp.trees.Tree,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:java.util.Set findRootOnlyStates(java.util.List,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.TregexPoweredTreebankParserParams:void removeFeature(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams:int setOptionFlag(java.lang.String[],int)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Document:void mergeIncompatibles(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.Sieve:void merge(edu.stanford.nlp.hcoref.data.Document,int,int)",
            "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:void findCoreferentAntecedent(edu.stanford.nlp.hcoref.data.Mention,int,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.StringBuilder)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Collection getSiblings(edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Mention:int getReportEmbedding(edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.hcoref.data.Mention:java.util.Collection getHeadSiblings()",
            "edu.stanford.nlp.dcoref.Mention:int getNegation(edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Set getSubTreeEdges(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraphEdge)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.gui.Tdiff:java.util.Set markDiff(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.MatchesPanel:void setMatches(java.util.List,java.util.Map)",
            "edu.stanford.nlp.trees.tregex.gui.Tdiff:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.util.BinaryHeapPriorityQueue:java.lang.String toString(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:java.lang.String toString()",
            "edu.stanford.nlp.stats.Counters:java.lang.String toString(edu.stanford.nlp.stats.Counter,int)"
        ]
    },
    "edu.stanford.nlp.util.BinaryHeapPriorityQueue:java.lang.String toVerticalString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.TestSentence:void printUnknown(int,edu.stanford.nlp.io.PrintFile)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TestClassifier:void processResults(edu.stanford.nlp.tagger.maxent.TestSentence,edu.stanford.nlp.io.PrintFile,edu.stanford.nlp.io.PrintFile,edu.stanford.nlp.io.PrintFile,boolean)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TestSentence:void printTop(edu.stanford.nlp.io.PrintFile)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TestClassifier:void processResults(edu.stanford.nlp.tagger.maxent.TestSentence,edu.stanford.nlp.io.PrintFile,edu.stanford.nlp.io.PrintFile,edu.stanford.nlp.io.PrintFile,boolean)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TestSentence:double[] getScores(edu.stanford.nlp.tagger.maxent.History)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TestSentence:double[] scoresOf(int[],int)"
        ]
    },
    "edu.stanford.nlp.sequences.Clique:edu.stanford.nlp.sequences.Clique valueOf(int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sequences.Clique:edu.stanford.nlp.sequences.Clique valueOf(int[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.FeatureFactory:void <clinit>()"
        ]
    },
    "edu.stanford.nlp.sequences.Clique:edu.stanford.nlp.sequences.Clique shift(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sequences.Clique:edu.stanford.nlp.sequences.Clique rightMessage()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sequences.Clique:edu.stanford.nlp.sequences.Clique valueOf(edu.stanford.nlp.sequences.Clique,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sequences.Clique:edu.stanford.nlp.sequences.Clique leftMessage()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.TwoDimensionalSet:boolean contains(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.FilterConfusingRules:boolean test(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.dcoref.Document:boolean isIncompatible(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention)",
            "edu.stanford.nlp.dcoref.Document:boolean isIncompatible(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster)",
            "edu.stanford.nlp.util.TwoDimensionalSet:boolean containsAll(edu.stanford.nlp.util.TwoDimensionalSet)"
        ]
    },
    "edu.stanford.nlp.util.TwoDimensionalMap:java.util.Set secondKeySet()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:void tabuDescendantsHelper(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Set,java.util.Collection,java.util.Collection,edu.stanford.nlp.semgraph.IndexedWordUnaryPred)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:void tabuDescendantsHelper(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Set,java.util.Collection,java.util.Collection,edu.stanford.nlp.semgraph.IndexedWordUnaryPred)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Set descendantsTabuTestAndRelns(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Collection,java.util.Collection,edu.stanford.nlp.semgraph.IndexedWordUnaryPred)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Set descendantsTabuTestAndRelns(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Collection,edu.stanford.nlp.semgraph.IndexedWordUnaryPred)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Set tabuDescendants(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Collection)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Set tabuDescendants(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Collection,java.util.Collection)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Set descendantsTabuRelns(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:edu.stanford.nlp.semgraph.SemanticGraphEdge getEdge(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.trees.GrammaticalRelation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.dep.ExtractPhraseFromPattern:void descendantsWithReln(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.lang.String,java.util.List,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.dep.ExtractPhraseFromPattern:void descendantsWithReln(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.lang.String,java.util.List,java.util.List)",
            "edu.stanford.nlp.patterns.dep.ExtractPhraseFromPattern:void printSubGraph(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.List,java.util.List,java.util.Collection,java.util.Collection,java.util.List,java.util.List,boolean,java.util.Collection,edu.stanford.nlp.semgraph.semgrex.SemgrexPattern,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Collection getEdgesSpannedByVertices(java.util.Collection,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:edu.stanford.nlp.semgraph.SemanticGraph makeGraphFromNodes(java.util.Collection,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:void <init>(edu.stanford.nlp.trees.Tree,java.util.Collection,java.util.concurrent.locks.Lock,edu.stanford.nlp.trees.TreeTransformer,edu.stanford.nlp.trees.HeadFinder,java.util.function.Predicate,java.util.function.Predicate)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void <init>(edu.stanford.nlp.trees.Tree,java.util.function.Predicate,edu.stanford.nlp.trees.HeadFinder,boolean)",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void <init>(edu.stanford.nlp.trees.Tree,java.util.function.Predicate,edu.stanford.nlp.trees.HeadFinder)",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:void <init>(edu.stanford.nlp.trees.Tree,java.util.function.Predicate,edu.stanford.nlp.trees.HeadFinder)"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:void getExtraDeps(java.util.List,java.util.function.Predicate,edu.stanford.nlp.graph.DirectedMultiGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:void <init>(edu.stanford.nlp.trees.Tree,java.util.Collection,java.util.concurrent.locks.Lock,edu.stanford.nlp.trees.TreeTransformer,edu.stanford.nlp.trees.HeadFinder,java.util.function.Predicate,java.util.function.Predicate)"
        ]
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.List getShortestPathEdges(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void addCaseMarkersToReln(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void expandPrepConjunction(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.List,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void addCaseMarkerInformation(edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:java.util.HashMap getGraphFeatures(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:void addFeatures(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.trees.Tree,boolean,boolean)"
        ]
    },
    "edu.stanford.nlp.trees.ud.CoNLLUDocumentWriter:java.lang.String printSemanticGraph(edu.stanford.nlp.semgraph.SemanticGraph,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.ud.CoNLLUDocumentWriter:java.lang.String printSemanticGraph(edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:java.lang.String wasPerson(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:java.util.HashMap getGraphFeatures(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:java.lang.String wasPerson(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)"
        ]
    },
    "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:java.util.HashMap getRelAndIntPronFeatures(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:java.util.HashMap getGraphFeatures(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void addConjToReln(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.List,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void expandPrepConjunction(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.List,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void addConjInformation(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void expandPPConjunction(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.List,edu.stanford.nlp.ling.IndexedWord)"
        ]
    },
    "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:java.lang.String pronounCase(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:java.util.HashMap getGraphFeatures(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)"
        ]
    },
    "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:boolean hasBeAux(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:boolean hasBeAux(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:java.util.HashMap getGraphFeatures(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)"
        ]
    },
    "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:edu.stanford.nlp.util.IntPair getNPSpan(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:void extractPronounForHeadword(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:void extractMentionForHeadword(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:void extractPronounForHeadword(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:void extractMentionForHeadword(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void addPassiveAgentToReln(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void addCaseMarkerInformation(edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:boolean hasAux(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:boolean hasAux(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)"
        ]
    },
    "edu.stanford.nlp.parser.shiftreduce.DistsimFeatureFactory:java.util.List featurize(edu.stanford.nlp.parser.shiftreduce.State,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.CTBunkDictDetector:java.lang.String extract(edu.stanford.nlp.tagger.maxent.History,edu.stanford.nlp.tagger.maxent.PairsHolder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParserQuery:boolean parseInternal()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParserQuery:boolean parse(java.util.List)",
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParserQuery:boolean parse(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:edu.stanford.nlp.util.Triple trainBatch(java.util.List,java.util.List,java.util.List,java.util.List,edu.stanford.nlp.parser.shiftreduce.Oracle,edu.stanford.nlp.util.concurrent.MulticoreWrapper)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:void trainModel(java.lang.String,edu.stanford.nlp.tagger.common.Tagger,java.util.Random,java.util.List,java.util.List,edu.stanford.nlp.trees.Treebank,int,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:edu.stanford.nlp.util.Pair access$000(edu.stanford.nlp.parser.shiftreduce.PerceptronModel,int,java.util.List,java.util.List,java.util.List,edu.stanford.nlp.parser.shiftreduce.Oracle)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.shiftreduce.PerceptronModel$TrainTreeProcessor:edu.stanford.nlp.util.Pair process(java.lang.Integer)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:java.lang.String tagString(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void tagFromXML()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger()"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:void writeAnswers(java.util.List,java.io.PrintWriter,edu.stanford.nlp.sequences.DocumentReaderAndWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswers(java.util.Collection,java.io.PrintWriter,edu.stanford.nlp.sequences.DocumentReaderAndWriter,boolean)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswersKBest(edu.stanford.nlp.objectbank.ObjectBank,int,java.io.PrintWriter,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void classifyAndWriteAnswers(java.util.Collection,java.util.List,java.io.PrintWriter,edu.stanford.nlp.sequences.DocumentReaderAndWriter)"
        ]
    },
    "edu.stanford.nlp.ie.NERServer$Session:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.lang.String classifyToString(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ClassifierCombiner:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.lang.String classifyWithInlineXML(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.lang.String apply(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TaggerExperiments:void <init>(edu.stanford.nlp.tagger.maxent.TaggerConfig,edu.stanford.nlp.tagger.maxent.MaxentTagger)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void trainAndSaveModel(edu.stanford.nlp.tagger.maxent.TaggerConfig)"
        ]
    },
    "edu.stanford.nlp.wordseg.Gale2007ChineseSegmenterFeatureFactory:java.util.Collection getCliqueFeatures(edu.stanford.nlp.util.PaddedList,int,edu.stanford.nlp.sequences.Clique)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.wordseg.ChineseSegmenterFeatureFactory:java.util.Collection getCliqueFeatures(edu.stanford.nlp.util.PaddedList,int,edu.stanford.nlp.sequences.Clique)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.ASBCunkDetector:java.lang.String extract(edu.stanford.nlp.tagger.maxent.History,edu.stanford.nlp.tagger.maxent.PairsHolder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.GeneralizedCounter:void prettyPrint(java.io.PrintWriter,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter:void prettyPrint(java.io.PrintWriter,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.stats.GeneralizedCounter:void prettyPrint(java.io.PrintWriter,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter:edu.stanford.nlp.stats.GeneralizedCounter reverseKeys()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.GeneralizedCounter$CounterView:java.util.Set entrySet()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter$CounterView:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.stats.GeneralizedCounter$CounterView:int hashCode()",
            "edu.stanford.nlp.stats.GeneralizedCounter$CounterView:java.lang.String toString()"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter$OneDimensionalCounterView:java.util.Set entrySet()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter$OneDimensionalCounterView:int hashCode()",
            "edu.stanford.nlp.stats.GeneralizedCounter$OneDimensionalCounterView:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.stats.GeneralizedCounter$OneDimensionalCounterView:java.lang.String toString()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$Rule Rule(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:java.util.List RuleList(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:void addSplits(edu.stanford.nlp.fsm.FastExactAutomatonMinimizer$Block)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:void makeBlock(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.util.Maps:java.util.Map invertSet(java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Maps:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:java.util.Map sortIntoBlocks(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:void minimize()"
        ]
    },
    "edu.stanford.nlp.patterns.InvertedIndexByTokens:java.util.Map queryIndex(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ScorePhrases:void applyPats(edu.stanford.nlp.stats.Counter,java.lang.String,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.util.CollectionValuedMap,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.trees.UniversalSemanticHeadFinder:void <init>(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode,edu.stanford.nlp.trees.GrammaticalStructure$Extras,boolean,java.util.function.Predicate,boolean)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void <init>(edu.stanford.nlp.trees.Tree,java.util.function.Predicate)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams:edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper$GsIterator:void <init>(edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper)",
            "edu.stanford.nlp.parser.lexparser.TestOptions:edu.stanford.nlp.trees.TreePrint treePrint(edu.stanford.nlp.parser.lexparser.TreebankLangParserParams)"
        ]
    },
    "edu.stanford.nlp.trees.PennTreebankLanguagePack:edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TreePrint:void <init>(java.lang.String,java.lang.String,edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.trees.TreePrint:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.UniversalSemanticHeadFinder:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:edu.stanford.nlp.trees.GrammaticalStructure fromStringReps(java.util.List,java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.sentiment.SentimentCostAndGradient:void forwardPropagateTree(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient:edu.stanford.nlp.sentiment.SentimentCostAndGradient$ModelDerivatives scoreDerivatives(java.util.List)",
            "edu.stanford.nlp.sentiment.Evaluate:void populatePredictedLabels(java.util.List)",
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient:void forwardPropagateTree(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.pipeline.SentimentAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.sentiment.BuildBinarizedDataset:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.dvparser.DVParserCostAndGradient:void forwardPropagateTree(edu.stanford.nlp.trees.Tree,java.util.List,java.util.IdentityHashMap,java.util.IdentityHashMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.DVParserCostAndGradient:double score(edu.stanford.nlp.trees.Tree,java.util.IdentityHashMap)",
            "edu.stanford.nlp.parser.dvparser.DVParserCostAndGradient:void forwardPropagateTree(edu.stanford.nlp.trees.Tree,java.util.List,java.util.IdentityHashMap,java.util.IdentityHashMap)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recountTree(edu.stanford.nlp.trees.Tree,boolean,java.util.IdentityHashMap,java.util.IdentityHashMap,java.util.IdentityHashMap,java.util.IdentityHashMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void countMergeEffects(edu.stanford.nlp.trees.Tree,java.util.Map,java.util.Map)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recountTree(edu.stanford.nlp.trees.Tree,boolean,java.util.IdentityHashMap,java.util.IdentityHashMap)"
        ]
    },
    "edu.stanford.nlp.sentiment.SentimentCostAndGradient$ModelDerivatives:void add(edu.stanford.nlp.sentiment.SentimentCostAndGradient$ModelDerivatives)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient:void calculate(double[])"
        ]
    },
    "edu.stanford.nlp.parser.dvparser.DVModel:void filterRulesForBatch(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.dvparser.DVModel:void filterRulesForBatch(java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.dvparser.DVModel:void setRulesForTrainingSet(java.util.List,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.DVParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.dvparser.DVParserCostAndGradient:void backpropDerivative(edu.stanford.nlp.trees.Tree,java.util.List,java.util.IdentityHashMap,edu.stanford.nlp.util.TwoDimensionalMap,java.util.Map,edu.stanford.nlp.util.TwoDimensionalMap,java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.DVParserCostAndGradient:void calculate(double[])"
        ]
    },
    "edu.stanford.nlp.sentiment.SentimentCostAndGradient:void backpropDerivativesAndError(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.TwoDimensionalMap,java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient:edu.stanford.nlp.sentiment.SentimentCostAndGradient$ModelDerivatives scoreDerivatives(java.util.List)"
        ]
    },
    "edu.stanford.nlp.simple.Sentence:edu.stanford.nlp.semgraph.SemanticGraph dependencyGraph(java.util.Properties,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:edu.stanford.nlp.semgraph.SemanticGraph dependencyGraph(java.util.Properties)",
            "edu.stanford.nlp.simple.Sentence:edu.stanford.nlp.semgraph.SemanticGraph dependencyGraph(edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode)",
            "edu.stanford.nlp.simple.Sentence:edu.stanford.nlp.semgraph.SemanticGraph dependencyGraph()"
        ]
    },
    "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.ie.util.RelationTriple fromProto(edu.stanford.nlp.pipeline.CoreNLPProtos$OpenIETriple,java.util.List,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.ie.util.RelationTriple lambda$fromProto$58(java.util.List,edu.stanford.nlp.pipeline.CoreNLPProtos$OpenIETriple)",
            "edu.stanford.nlp.simple.Sentence:edu.stanford.nlp.ie.util.RelationTriple lambda$openieTriples$104(java.util.List,edu.stanford.nlp.pipeline.CoreNLPProtos$OpenIETriple)",
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.pipeline.Annotation fromProto(edu.stanford.nlp.pipeline.CoreNLPProtos$Document)"
        ]
    },
    "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.pipeline.Annotation fromProto(edu.stanford.nlp.pipeline.CoreNLPProtos$Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.pipeline.Annotation asAnnotation()",
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.pipeline.Annotation readUndelimited(java.io.File)",
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.util.Pair read(java.io.InputStream)"
        ]
    },
    "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.util.CoreMap fromProto(edu.stanford.nlp.pipeline.CoreNLPProtos$Sentence)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recurseOutside(edu.stanford.nlp.trees.Tree,java.util.IdentityHashMap,java.util.IdentityHashMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recountOutside(edu.stanford.nlp.trees.Tree,java.util.IdentityHashMap,java.util.IdentityHashMap)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recountOutside(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.util.IdentityHashMap,java.util.IdentityHashMap)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recountOutside(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.util.IdentityHashMap,java.util.IdentityHashMap)"
        ]
    },
    "edu.stanford.nlp.sentiment.SentimentCostAndGradient:void calculate(double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.AbstractCachingDiffFunction:void ensure(double[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ParseFiles:void processResults(edu.stanford.nlp.parser.common.ParserQuery,int,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ParseFiles:void parseFiles(java.lang.String[],int,boolean,edu.stanford.nlp.process.TokenizerFactory,java.lang.String,java.lang.String,java.util.function.Function,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.TreePrint:void printTree(edu.stanford.nlp.trees.Tree,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.JSONOutputter:void lambda$null$168(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.pipeline.AnnotationOutputter$Options,edu.stanford.nlp.pipeline.JSONOutputter$Writer)",
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void processResults(edu.stanford.nlp.parser.common.ParserQuery,edu.stanford.nlp.trees.Tree,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,edu.stanford.nlp.trees.TreePrint)",
            "edu.stanford.nlp.trees.TreePrint:void printTree(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.pipeline.XMLOutputter:void addConstituentTreeInfo(nu.xom.Element,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreePrint)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:boolean parse(edu.stanford.nlp.parser.lexparser.HTKLatticeReader)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:boolean parseInternal(java.util.List)",
            "edu.stanford.nlp.trees.AbstractCollinsHeadFinder:edu.stanford.nlp.trees.Tree determineNonTrivialHead(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.tregex.TregexPattern$TRegexTreeVisitor:void visitTree(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.pipeline.TextOutputter:void print(edu.stanford.nlp.pipeline.Annotation,java.io.PrintWriter,edu.stanford.nlp.pipeline.AnnotationOutputter$Options)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:void displayTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreePrint,java.io.PrintWriter)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapSequenceMatchAction$AnnotateAction:edu.stanford.nlp.ling.tokensregex.SequenceMatchResult apply(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult,int[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapSequenceMatcher:void annotateGroup(int,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.CoreMapSequenceMatcher:void annotateGroup(java.util.Map)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void registerReal(edu.stanford.nlp.parser.lexparser.Edge)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processEdge(edu.stanford.nlp.parser.lexparser.Edge)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:edu.stanford.nlp.trees.Tree processPattern(edu.stanford.nlp.trees.tregex.TregexPattern,edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.CoordinationTransformer:edu.stanford.nlp.trees.Tree changeSbarToPP(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.CoordinationTransformer:edu.stanford.nlp.trees.Tree prepCCTransform(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.sentiment.ReadSentimentDataset:edu.stanford.nlp.trees.Tree convertTree(java.util.List,java.util.List,java.util.Map,java.util.Map,edu.stanford.nlp.process.PTBEscapingProcessor)",
            "edu.stanford.nlp.trees.CoordinationTransformer:edu.stanford.nlp.trees.Tree removeXOverX(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParserQuery:boolean parseInternal()",
            "edu.stanford.nlp.trees.CoordinationTransformer:edu.stanford.nlp.trees.Tree rearrangeNowThat(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.CoordinationTransformer:edu.stanford.nlp.trees.Tree SQflatten(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.QPTreeTransformer:edu.stanford.nlp.trees.Tree QPtransform(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.international.spanish.SpanishTreeNormalizer:edu.stanford.nlp.trees.Tree expandCliticPronouns(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.DependencyTreeTransformer:edu.stanford.nlp.trees.Tree stripEmptyNode(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.international.pennchinese.CTBErrorCorrectingTreeNormalizer:edu.stanford.nlp.trees.Tree normalizeWholeTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreeFactory)",
            "edu.stanford.nlp.trees.CoordinationTransformer:edu.stanford.nlp.trees.Tree UCPtransform(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.CoordinationTransformer:edu.stanford.nlp.trees.Tree MWETransform(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.tregex.gui.InputPanel$3:void run()",
            "edu.stanford.nlp.trees.CoordinationTransformer:edu.stanford.nlp.trees.Tree moveRB(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.CoordinationTransformer:edu.stanford.nlp.trees.Tree combineConjp(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:edu.stanford.nlp.trees.Tree lambda$processPatternOnTrees$360(edu.stanford.nlp.trees.tregex.TregexPattern,edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern,edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.common.NoPunctuationHeadFinder:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:void <init>(edu.stanford.nlp.pipeline.StanfordCoreNLP,boolean,boolean,boolean)",
            "edu.stanford.nlp.ie.machinereading.common.NoPunctuationHeadFinder:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer:void <init>(int,boolean,int,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer$NPTmpAdvRetainingTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)",
            "edu.stanford.nlp.trees.GrammaticalStructure:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer:void <init>(int,boolean)",
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:java.util.Iterator treebankIterator(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void <init>(edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.parser.lexparser.Lexicon,edu.stanford.nlp.parser.common.ParserGrammar,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void <init>(edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.parser.lexparser.Lexicon,edu.stanford.nlp.parser.common.ParserGrammar)",
            "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:void trainModel(java.lang.String,edu.stanford.nlp.tagger.common.Tagger,java.util.Random,java.util.List,java.util.List,edu.stanford.nlp.trees.Treebank,int,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.trees.TreePrint:void <init>(java.lang.String,java.lang.String,edu.stanford.nlp.trees.TreebankLanguagePack)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TreePrint:void <init>(java.lang.String)",
            "edu.stanford.nlp.trees.TreePrint:void <init>(java.lang.String,edu.stanford.nlp.trees.TreebankLanguagePack)"
        ]
    },
    "edu.stanford.nlp.trees.EnglishPTBTreebankCorrector:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Treebanks:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.Options:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser loadModel()",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void <init>(edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.parser.lexparser.HTKLatticeReader:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceOptions:void <init>()",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser loadModel(java.lang.String,java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.TreebankAnnotator:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.CNFTransformers:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:edu.stanford.nlp.parser.lexparser.Options getOptions(edu.stanford.nlp.international.Language)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.international.Language:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.international.Language$1:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.Language:void <clinit>()"
        ]
    },
    "edu.stanford.nlp.trees.SemanticHeadFinder:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:edu.stanford.nlp.trees.GrammaticalStructure buildCoNLLXGrammaticalStructure(java.util.List,java.util.Map,edu.stanford.nlp.trees.GrammaticalStructureFromDependenciesFactory)",
            "edu.stanford.nlp.trees.TreeGraphNode:void main(java.lang.String[])",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:void <init>(boolean)",
            "edu.stanford.nlp.hcoref.CorefDocMaker:edu.stanford.nlp.trees.HeadFinder getHeadFinder(java.util.Properties)",
            "edu.stanford.nlp.dcoref.MentionExtractor:void <init>(edu.stanford.nlp.dcoref.Dictionaries,edu.stanford.nlp.dcoref.Semantics)",
            "edu.stanford.nlp.trees.tregex.gui.Preferences:edu.stanford.nlp.trees.HeadFinder lookupHeadFinder(java.lang.String)",
            "edu.stanford.nlp.pipeline.MentionAnnotator:edu.stanford.nlp.trees.HeadFinder getHeadFinder(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.trees.SemanticHeadFinder:void <init>(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode,edu.stanford.nlp.trees.GrammaticalStructure$Extras,boolean,java.util.function.Predicate,boolean)",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void <init>(edu.stanford.nlp.trees.Tree,java.util.function.Predicate)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.FactoredLexicon:java.util.List getTuningSet(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.FactoredLexicon,edu.stanford.nlp.parser.lexparser.TreebankLangParserParams)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.FilePanel:boolean isEmpty()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.gui.FilePanel:java.util.List getActiveTreebanks()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.MatchesPanel:void setMatches(java.util.List,java.util.Map)",
            "edu.stanford.nlp.trees.tregex.gui.FileTreeModel:void findLoadableFiles(java.util.EnumMap,java.io.File[],java.util.List,edu.stanford.nlp.trees.tregex.gui.FileTreeNode)",
            "edu.stanford.nlp.trees.tregex.gui.FilePanel$1:void mouseClicked(java.awt.event.MouseEvent)",
            "edu.stanford.nlp.trees.tregex.gui.TregexGUI:void doTdiff()",
            "edu.stanford.nlp.trees.tregex.gui.InputPanel$1:void run()",
            "edu.stanford.nlp.trees.tregex.gui.InputPanel:edu.stanford.nlp.trees.tregex.gui.InputPanel$TRegexGUITreeVisitor getMatchTreeVisitor(java.lang.String,java.lang.Thread)"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void correctDependencies(edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void correctDependencies(java.util.List)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void collapseDependencies(java.util.List,boolean,edu.stanford.nlp.trees.GrammaticalStructure$Extras)"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void processMultiwordPreps(edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void collapseDependencies(java.util.List,boolean,edu.stanford.nlp.trees.GrammaticalStructure$Extras)"
        ]
    },
    "edu.stanford.nlp.naturalli.NaturalLogicAnnotator:void doOneSentence(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.SentenceAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.pipeline.SentenceAnnotator$AnnotatorProcessor:edu.stanford.nlp.util.CoreMap process(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void postProcessDependencies(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:java.util.List getDeps(java.util.function.Predicate,edu.stanford.nlp.graph.DirectedMultiGraph)"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void postProcessDependencies(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:java.util.List getDeps(java.util.function.Predicate,edu.stanford.nlp.graph.DirectedMultiGraph)"
        ]
    },
    "edu.stanford.nlp.trees.MemoryTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Treebanks:void countTaggings(edu.stanford.nlp.trees.Treebank,java.io.PrintWriter)",
            "edu.stanford.nlp.trees.Treebanks:void runTiming(edu.stanford.nlp.trees.Treebank)",
            "edu.stanford.nlp.trees.tregex.TregexPattern:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:java.util.Set getSplitCategories(edu.stanford.nlp.trees.Treebank,boolean,int,double,double,edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.trees.Treebank:java.lang.String toString()",
            "edu.stanford.nlp.trees.Treebanks:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:java.util.Collection getInverseImages(edu.stanford.nlp.fsm.FastExactAutomatonMinimizer$Split)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:void minimize()"
        ]
    },
    "edu.stanford.nlp.fsm.TransducerGraph:java.util.List getPathOutputs(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.fsm.TransducerGraph:void printPathOutputs(java.util.List,edu.stanford.nlp.fsm.TransducerGraph,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.TransducerGraph:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.fsm.TransducerGraph:boolean testGraphPaths(edu.stanford.nlp.fsm.TransducerGraph,edu.stanford.nlp.fsm.TransducerGraph,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.QuasiDeterminizer:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Mention:void process(edu.stanford.nlp.hcoref.data.Dictionaries,edu.stanford.nlp.hcoref.data.Semantics,edu.stanford.nlp.classify.LogisticClassifier)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void readData(java.io.BufferedReader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTextFile(java.lang.String,edu.stanford.nlp.parser.lexparser.Options)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void expandDependency(edu.stanford.nlp.parser.lexparser.IntDependency,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void addRule(edu.stanford.nlp.parser.lexparser.IntDependency,double)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.pipeline.Annotator getParser()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.pipeline.Annotator getParser()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.hcoref.md.CorefMentionFinder:edu.stanford.nlp.pipeline.Annotator getParser()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP:void <init>(java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void <init>(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP:void <init>(java.util.Properties,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.util.Map runPOSNEROnTokens(java.util.List,java.lang.String,boolean,java.lang.String,boolean,java.lang.String,edu.stanford.nlp.patterns.PatternFactory$PatternType)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.util.Map runPOSNERParseOnTokens(java.util.Map,java.util.Properties)",
            "edu.stanford.nlp.dcoref.MentionExtractor:edu.stanford.nlp.pipeline.StanfordCoreNLP loadStanfordProcessor(java.util.Properties)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void <init>(java.util.Properties)",
            "edu.stanford.nlp.hcoref.CorefDocMaker:edu.stanford.nlp.pipeline.StanfordCoreNLP loadStanfordProcessor(java.util.Properties)",
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:void modifyUsingCoreNLPNER(edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.ie.machinereading.MachineReading:edu.stanford.nlp.ie.machinereading.MachineReading makeMachineReading(java.lang.String[])",
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void saveModel(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void trainAndSaveModel(edu.stanford.nlp.tagger.maxent.TaggerConfig)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.UnaryGrammar:void <init>(edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BinaryGrammarExtractor:edu.stanford.nlp.util.Pair formResult()",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTextFile(java.lang.String,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void buildGrammars()",
            "edu.stanford.nlp.parser.lexparser.GrammarCompactor:edu.stanford.nlp.util.Pair convertGraphsToGrammar(java.util.Set,java.util.Set,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.hcoref.CorefDocMaker:edu.stanford.nlp.hcoref.data.Document makeDocument(edu.stanford.nlp.hcoref.data.InputDoc)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.CorefDocMaker:edu.stanford.nlp.hcoref.data.Document makeDocument(edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.hcoref.CorefDocMaker:edu.stanford.nlp.hcoref.data.Document nextDoc()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:edu.stanford.nlp.trees.Tree scoreNonBinarizedTree(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void addRef(edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void getExtras(java.util.List)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void collapseDependencies(java.util.List,boolean,edu.stanford.nlp.trees.GrammaticalStructure$Extras)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Collection getDependencyBlanket(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void addExtraNSubj(edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void getExtras(java.util.List)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void collapseDependencies(java.util.List,boolean,edu.stanford.nlp.trees.GrammaticalStructure$Extras)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:boolean containsEdge(edu.stanford.nlp.semgraph.SemanticGraphEdge)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.graph.ConnectedComponents:java.util.Set bfs(java.util.LinkedList,edu.stanford.nlp.graph.Graph,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.graph.ConnectedComponents:java.util.List getConnectedComponents(edu.stanford.nlp.graph.Graph)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$SIBLING_RELATION$1:void advance()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$ALIGNMENT:void setAlignment(edu.stanford.nlp.semgraph.semgrex.Alignment,boolean,edu.stanford.nlp.semgraph.semgrex.GraphRelation$SearchNodeIterator)",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$SearchNodeIterator:void initialize()",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$SearchNodeIterator:edu.stanford.nlp.ling.IndexedWord next()"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:boolean matchPatternToVertex(java.lang.String,edu.stanford.nlp.ling.IndexedWord,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.util.List getParentList(edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.List getPathToRoot(edu.stanford.nlp.ling.IndexedWord,java.util.List)",
            "edu.stanford.nlp.semgraph.SemanticGraph:int commonAncestor(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:boolean matchPatternToVertex(java.lang.String,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:edu.stanford.nlp.ling.IndexedWord getCommonAncestor(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$SIBLING_RELATION:boolean satisfies(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:boolean attachedNegatedVerb(edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:int commonAncestor(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:int isAncestor(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:edu.stanford.nlp.ling.IndexedWord getCommonAncestor(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$SIBLING_RELATION:boolean satisfies(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.spanish.SpanishTreeNormalizer:edu.stanford.nlp.trees.Tree normalizeWholeTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreeFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.PennTreeReader:edu.stanford.nlp.trees.Tree readTree()"
        ]
    },
    "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:boolean isPleonastic(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:void removeSpuriousMentions(edu.stanford.nlp.util.CoreMap,java.util.List,edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.dcoref.MentionExtractor:void findTreePattern(edu.stanford.nlp.trees.Tree,java.lang.String,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.MentionExtractor:void findAppositions(edu.stanford.nlp.trees.Tree,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.MentionExtractor:void findSyntacticRelations(edu.stanford.nlp.trees.Tree,java.util.List)"
        ]
    },
    "edu.stanford.nlp.dcoref.MentionExtractor:void findRelativePronouns(edu.stanford.nlp.trees.Tree,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.MentionExtractor:void findSyntacticRelations(edu.stanford.nlp.trees.Tree,java.util.List)"
        ]
    },
    "edu.stanford.nlp.dcoref.MentionExtractor:void findPredicateNominatives(edu.stanford.nlp.trees.Tree,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.MentionExtractor:void findSyntacticRelations(edu.stanford.nlp.trees.Tree,java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams$AddRelativeNodeFunction:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TregexPoweredTreebankParserParams:java.lang.String getAnnotationString(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.util.IntervalTree:java.util.List getNonOverlappingMaxScore(java.util.List,java.util.function.Function,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SpanishTreebankParserParams$MarkConjTypeFunction:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TregexPoweredTreebankParserParams:java.lang.String getAnnotationString(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.util.IntervalTree:java.util.List getNonOverlappingMaxScore(java.util.List,java.util.function.Function,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams$AnnotatePunctuationFunction:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TregexPoweredTreebankParserParams:java.lang.String getAnnotationString(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.util.IntervalTree:java.util.List getNonOverlappingMaxScore(java.util.List,java.util.function.Function,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.trees.international.spanish.SpanishTreeNormalizer:edu.stanford.nlp.trees.Tree expandCliticPronouns(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.spanish.SpanishTreeNormalizer:edu.stanford.nlp.trees.Tree normalizeWholeTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreeFactory)"
        ]
    },
    "edu.stanford.nlp.trees.PennTreeReader:edu.stanford.nlp.trees.Tree readTree()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.negra.NegraPennTreeReaderFactory:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.Trees:edu.stanford.nlp.trees.Tree readTree(java.lang.String,edu.stanford.nlp.trees.TreeFactory)",
            "edu.stanford.nlp.trees.FilteringTreeReader:edu.stanford.nlp.trees.Tree readTree()",
            "edu.stanford.nlp.trees.TreeFunctions:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.international.pennchinese.FragDiscardingPennTreeReader:edu.stanford.nlp.trees.Tree readTree()",
            "edu.stanford.nlp.trees.QPTreeTransformer:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.CoordinationTransformer:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:void AddTreesFromFile(java.lang.String,java.lang.String,edu.stanford.nlp.trees.Treebank)",
            "edu.stanford.nlp.trees.PennTreeReader:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.international.hebrew.HebrewTreeReaderFactory:void main(java.lang.String[])",
            "edu.stanford.nlp.util.MetaClass:java.lang.Object cast(java.lang.String,java.lang.reflect.Type)",
            "edu.stanford.nlp.trees.TreeTokenizerFactory$1:edu.stanford.nlp.trees.Tree getNext()",
            "edu.stanford.nlp.trees.Tree:edu.stanford.nlp.trees.Tree valueOf(java.lang.String,edu.stanford.nlp.trees.TreeReaderFactory)",
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:edu.stanford.nlp.trees.Tree primeNextTree()",
            "edu.stanford.nlp.trees.tregex.gui.Tdiff:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader,java.lang.String)",
            "edu.stanford.nlp.trees.GrammaticalStructure:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.MemoryTreebank:void processFile(java.io.File)",
            "edu.stanford.nlp.trees.TreeGraphNode:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.tregex.TregexPattern:void main(java.lang.String[])",
            "edu.stanford.nlp.pipeline.CustomAnnotationSerializer:edu.stanford.nlp.util.Pair read(java.io.InputStream)",
            "edu.stanford.nlp.trees.Trees:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.ui.TreeJPanel:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams$AddRelativeNodeRegexFunction:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TregexPoweredTreebankParserParams:java.lang.String getAnnotationString(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.util.IntervalTree:java.util.List getNonOverlappingMaxScore(java.util.List,java.util.function.Function,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams$AddEquivalencedNodeFunctionVar:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TregexPoweredTreebankParserParams:java.lang.String getAnnotationString(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.util.IntervalTree:java.util.List getNonOverlappingMaxScore(java.util.List,java.util.function.Function,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams$AnnotatePunctuationFunction:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TregexPoweredTreebankParserParams:java.lang.String getAnnotationString(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.util.IntervalTree:java.util.List getNonOverlappingMaxScore(java.util.List,java.util.function.Function,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams$AddEquivalencedConjNode:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TregexPoweredTreebankParserParams:java.lang.String getAnnotationString(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.util.IntervalTree:java.util.List getNonOverlappingMaxScore(java.util.List,java.util.function.Function,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.trees.CoordinationTransformer:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:void <init>(edu.stanford.nlp.trees.Tree,java.util.Collection,java.util.concurrent.locks.Lock,edu.stanford.nlp.trees.TreeTransformer,edu.stanford.nlp.trees.HeadFinder,java.util.function.Predicate,java.util.function.Predicate)",
            "edu.stanford.nlp.trees.CoordinationTransformer:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.CollocationFinder:void <init>(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.WordNetConnection,edu.stanford.nlp.trees.HeadFinder)"
        ]
    },
    "edu.stanford.nlp.hcoref.md.CorefMentionFinder:boolean isPleonasticDebug(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.trees.Tree,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.md.CorefMentionFinder:boolean isPleonastic(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.md.RuleBasedCorefMentionFinder:void removeSpuriousMentionsEn(edu.stanford.nlp.pipeline.Annotation,java.util.List,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.hcoref.sieve.RFSieve:edu.stanford.nlp.ling.RVFDatum extractDatum(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,int,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.String)",
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams$AddEquivalencedNodeFunction:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TregexPoweredTreebankParserParams:java.lang.String getAnnotationString(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.util.IntervalTree:java.util.List getNonOverlappingMaxScore(java.util.List,java.util.function.Function,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams$AnnotatePunctuationFunction2:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TregexPoweredTreebankParserParams:java.lang.String getAnnotationString(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.util.IntervalTree:java.util.List getNonOverlappingMaxScore(java.util.List,java.util.function.Function,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams$AddRelativeNodeFunction:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TregexPoweredTreebankParserParams:java.lang.String getAnnotationString(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.util.IntervalTree:java.util.List getNonOverlappingMaxScore(java.util.List,java.util.function.Function,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.util.List getVerticesWithoutParents()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:void resetRoots()"
        ]
    },
    "edu.stanford.nlp.pipeline.CustomAnnotationSerializer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntityMention:void detectHeadToken(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:void matchCharSeqs(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntity:java.lang.String toXml(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:java.lang.String toXml(int)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceToken:int[] extractSuffixes(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceToken:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceSentenceSegmenter:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceToken wordTokenToAceToken(edu.stanford.nlp.ie.machinereading.domains.ace.reader.RobustTokenizer$WordToken,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceSentenceSegmenter:java.util.List tokenizeAndSegmentSentences(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates:void <init>(edu.stanford.nlp.ling.tokensregex.SequenceMatcher,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates getStartStates()"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void iterateExtractApply()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.OutputHandler:java.util.List signalStartTrack(edu.stanford.nlp.util.logging.Redwood$Record)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood$RecordHandlerTree:void process(edu.stanford.nlp.util.logging.Redwood$Record,edu.stanford.nlp.util.logging.Redwood$MessageType,int,long)"
        ]
    },
    "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String printConllOutput(edu.stanford.nlp.hcoref.data.Document,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.CorefSystem:java.util.Map coref(edu.stanford.nlp.hcoref.data.Document,java.lang.StringBuilder[])",
            "edu.stanford.nlp.scoref.StatisticalCorefSystem$1:void process(int,edu.stanford.nlp.hcoref.data.Document)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.CtbDict:edu.stanford.nlp.tagger.maxent.CtbDict getInstance()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.CtbDict:java.lang.String getTagSuf(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.tagger.maxent.CtbDict:java.lang.String getTagPre(java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon:java.lang.String sampleFrom()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon:edu.stanford.nlp.stats.Distribution getWordLengthDistribution()"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher:boolean find()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void correctSubjPass(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void process3WP(edu.stanford.nlp.semgraph.SemanticGraph,java.util.HashMap)",
            "edu.stanford.nlp.semgraph.semgrex.SemgrexPattern:void main(java.lang.String[])",
            "edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher:boolean findNextMatchingNode()",
            "edu.stanford.nlp.naturalli.OpenIE:java.util.List entailmentsFromClause(edu.stanford.nlp.naturalli.SentenceFragment)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void processComplex2WP(edu.stanford.nlp.semgraph.SemanticGraph,java.util.HashMap)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void expandPrepConjunctions(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void addConjInformation(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.NaturalLogicAnnotator:void annotateUnaries(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLPServer$SemgrexHandler:void lambda$null$31(edu.stanford.nlp.semgraph.semgrex.SemgrexPattern,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.pipeline.JSONOutputter$Writer)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void expandPPConjunctions(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void processSimple2WP(edu.stanford.nlp.semgraph.SemanticGraph,java.util.HashMap)",
            "edu.stanford.nlp.hcoref.data.Mention:edu.stanford.nlp.util.Pair findDependentVerb(edu.stanford.nlp.hcoref.data.Mention)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void addCaseMarkerInformation(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.dcoref.Mention:edu.stanford.nlp.util.Pair findDependentVerb(edu.stanford.nlp.dcoref.Mention)"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLPServer$SemgrexHandler:java.lang.Boolean lambda$null$28(edu.stanford.nlp.semgraph.semgrex.SemgrexPattern,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sentiment.AbstractEvaluate:void eval(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.SentimentTraining:void train(edu.stanford.nlp.sentiment.SentimentModel,java.lang.String,java.util.List,java.util.List)",
            "edu.stanford.nlp.sentiment.Evaluate:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.wordseg.TagAffixDetector:void <init>(edu.stanford.nlp.sequences.SeqClassifierFlags)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.wordseg.Gale2007ChineseSegmenterFeatureFactory:void createTADetector()",
            "edu.stanford.nlp.wordseg.ChineseSegmenterFeatureFactory:java.util.Collection featuresCpC(edu.stanford.nlp.util.PaddedList,int)"
        ]
    },
    "edu.stanford.nlp.international.arabic.process.ArabicLexer:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.arabic.process.ArabicTokenizer:edu.stanford.nlp.ling.HasWord getNext()"
        ]
    },
    "edu.stanford.nlp.dcoref.Mention:int getModal(edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Mention:java.util.ArrayList getSingletonFeatures(edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:void descendantsHelper(edu.stanford.nlp.ling.IndexedWord,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Set descendants(edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.semgraph.SemanticGraph:void descendantsHelper(edu.stanford.nlp.ling.IndexedWord,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Mention:int getNegation(edu.stanford.nlp.hcoref.data.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Mention:java.util.ArrayList getSingletonFeatures(edu.stanford.nlp.hcoref.data.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Mention:int getModal(edu.stanford.nlp.hcoref.data.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Mention:java.util.ArrayList getSingletonFeatures(edu.stanford.nlp.hcoref.data.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Set getSubgraphVertices(edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:boolean isDag(edu.stanford.nlp.ling.IndexedWord)"
        ]
    },
    "edu.stanford.nlp.patterns.dep.ExtractPhraseFromPattern:void descendantsHelper(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Set,java.util.List,java.util.List,java.util.List,boolean,java.util.function.Function,edu.stanford.nlp.util.CollectionValuedMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.dep.ExtractPhraseFromPattern:java.util.Set descendants(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.List,java.util.List,boolean,java.util.function.Function,edu.stanford.nlp.util.CollectionValuedMap)",
            "edu.stanford.nlp.patterns.dep.ExtractPhraseFromPattern:void descendantsHelper(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Set,java.util.List,java.util.List,java.util.List,boolean,java.util.function.Function,edu.stanford.nlp.util.CollectionValuedMap)"
        ]
    },
    "edu.stanford.nlp.patterns.dep.ExtractPhraseFromPattern:boolean checkIfSatisfiedMaxDepth(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.util.IntPair)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.dep.ExtractPhraseFromPattern:java.util.Set getSemGrexPatternNodes(edu.stanford.nlp.semgraph.SemanticGraph,java.util.List,java.util.Collection,java.util.Collection,edu.stanford.nlp.semgraph.semgrex.SemgrexPattern,boolean,java.util.Collection,boolean,java.util.function.Function)",
            "edu.stanford.nlp.patterns.dep.ExtractPhraseFromPattern:boolean checkIfSatisfiedMaxDepth(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.util.IntPair)"
        ]
    },
    "edu.stanford.nlp.dcoref.Mention:int getNegation(edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Mention:java.util.ArrayList getSingletonFeatures(edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.util.List getChildList(edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Mention:java.util.Collection getHeadChildren()",
            "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:edu.stanford.nlp.util.IntPair getNPSpanOld(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,java.util.List)",
            "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:edu.stanford.nlp.util.IntPair getNPSpan(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$SimpleCachedExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequenceMatchResultExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Value attemptTypeConversion(edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue,edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$VarAssignmentExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$WrappedExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringMatchResultExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(java.util.regex.MatchResult)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$IfExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue simplifyNoTypeConversion(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$Rule createRule(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue evaluateNoTypeConversion(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Value attemptTypeConversion(edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue,edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.hcoref.CorefPrinter:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.TregexParser:edu.stanford.nlp.trees.tregex.TregexPattern Child()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.TregexParser:edu.stanford.nlp.trees.tregex.TregexPattern ModChild()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation:edu.stanford.nlp.trees.tregex.TregexPattern constructMultiRelation(java.lang.String,java.util.List,java.util.function.Function,edu.stanford.nlp.trees.HeadFinder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.TregexParser:edu.stanford.nlp.trees.tregex.TregexPattern Relation()"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood:void finishThread()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood$Util:void finishThread()",
            "edu.stanford.nlp.util.logging.Redwood:void lambda$main$50(int)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood:void log(java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader:edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$CoNLLDocument getNextDocument()",
            "edu.stanford.nlp.util.logging.Redwood:void endThreads(java.lang.String)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void evaluate(java.util.Map,boolean)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void calculateSufficientStats(java.util.Map,edu.stanford.nlp.patterns.surface.PatternsForEachToken,java.lang.String,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,java.util.Set)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.util.Map runPOSNEROnTokens(java.util.List,java.lang.String,boolean,java.lang.String,boolean,java.lang.String,edu.stanford.nlp.patterns.PatternFactory$PatternType)",
            "edu.stanford.nlp.scoref.Clusterer:void trainPolicy(java.util.List)",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:void findHead(edu.stanford.nlp.util.CoreMap,java.util.List)",
            "edu.stanford.nlp.patterns.surface.PatternsForEachTokenInMemory:boolean save(java.lang.String)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void saveModel()",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void processSents(java.util.Map,java.lang.Boolean)",
            "edu.stanford.nlp.util.logging.Redwood$RedwoodChannels:void log(java.lang.Object[])",
            "edu.stanford.nlp.pipeline.TokensRegexAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.stats.Counter getPatterns(java.lang.String,java.util.Set,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.Counter,java.util.Set)",
            "edu.stanford.nlp.util.logging.Redwood:void finishThread()",
            "edu.stanford.nlp.util.logging.Redwood:void logf(java.lang.String,java.lang.Object[])",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.util.Pair processSents(java.util.Properties,java.util.Set)",
            "edu.stanford.nlp.patterns.Data:void computeRawFreqIfNull(java.util.Map,int)",
            "edu.stanford.nlp.patterns.surface.PatternsForEachTokenDB:void createIndexIfUsingDBAndNotExists()",
            "edu.stanford.nlp.util.logging.Redwood$Util:void debug(java.lang.Object[])",
            "edu.stanford.nlp.patterns.ScorePatternsFreqBased:edu.stanford.nlp.stats.Counter score()",
            "edu.stanford.nlp.patterns.ScorePhrases:void runParallelApplyPats(java.util.Map,java.lang.String,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.util.CollectionValuedMap,java.util.Set)",
            "edu.stanford.nlp.time.TimeAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void evaluate(java.util.Map)",
            "edu.stanford.nlp.scoref.Clusterer:double evaluatePolicy(java.util.List,boolean)",
            "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter chooseTopWords(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.Counter,java.util.Set,double)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.util.Pair iterateExtractApply4Label(java.lang.String,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.Counter,java.io.BufferedWriter,java.lang.String,java.io.BufferedWriter,java.util.Set,java.util.Set,edu.stanford.nlp.util.CollectionValuedMap,edu.stanford.nlp.stats.TwoDimensionalCounter,int)",
            "edu.stanford.nlp.hcoref.CorefSystem:java.util.Map coref(edu.stanford.nlp.hcoref.data.Document,java.lang.StringBuilder[])",
            "edu.stanford.nlp.util.logging.RedwoodPrintStream:void log(java.lang.Object)",
            "edu.stanford.nlp.util.logging.Redwood$Util:void fatal(java.lang.Object[])",
            "edu.stanford.nlp.hcoref.data.CorefCluster:void printCorefCluster()",
            "edu.stanford.nlp.hcoref.CorefDocMaker:edu.stanford.nlp.pipeline.StanfordCoreNLP loadStanfordProcessor(java.util.Properties)",
            "edu.stanford.nlp.hcoref.CorefPrinter:void printFinalConllScore(java.lang.String)",
            "edu.stanford.nlp.util.logging.Redwood:void lambda$main$50(int)",
            "edu.stanford.nlp.scoref.Clusterer:void doTraining(java.lang.String)",
            "edu.stanford.nlp.hcoref.CorefSystem:void runCoref(java.lang.String[])",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.util.List getAllFiles(java.lang.String)",
            "edu.stanford.nlp.scoref.DocumentProcessor:void run(edu.stanford.nlp.hcoref.CorefDocMaker)",
            "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter learnNewPhrasesPrivate(java.lang.String,edu.stanford.nlp.patterns.surface.PatternsForEachToken,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.util.Set,edu.stanford.nlp.util.CollectionValuedMap,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,java.lang.String,java.util.Set,boolean)",
            "edu.stanford.nlp.patterns.PhraseScorer:double getPatTFIDFScore(edu.stanford.nlp.patterns.CandidatePhrase,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.scoref.PairwiseModelTrainer:void writeScores(java.util.List,edu.stanford.nlp.scoref.Compressor,edu.stanford.nlp.scoref.PairwiseModel,java.io.PrintWriter,java.util.Map)",
            "edu.stanford.nlp.util.logging.Redwood:void logf(edu.stanford.nlp.util.logging.Redwood$Flag,java.lang.String,java.lang.Object[])",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.util.Map runPOSNERParseOnTokens(java.util.Map,java.util.Properties)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:int tokenize(java.util.Iterator,java.lang.String,boolean,boolean,java.lang.String,boolean,java.lang.String,boolean,int,java.io.File,java.util.Map,int,edu.stanford.nlp.patterns.PatternFactory$PatternType)",
            "edu.stanford.nlp.util.logging.Redwood$Util:void err(java.lang.Object[])",
            "edu.stanford.nlp.util.logging.Redwood:void lambda$endTrack$41(java.lang.String,long)",
            "edu.stanford.nlp.patterns.ConstantsAndVariables:void setUp(java.util.Properties)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.stats.Counter runLabelSeedWords(java.util.Map,java.lang.Class,java.lang.String,java.util.Collection,edu.stanford.nlp.patterns.ConstantsAndVariables,boolean)",
            "edu.stanford.nlp.util.logging.Redwood$FileHandler:void <init>(java.lang.String)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.util.Set enforceMinSupportRequirements(edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter)",
            "edu.stanford.nlp.util.logging.Redwood$Util:void runtimeException(java.lang.Object[])",
            "edu.stanford.nlp.hcoref.Preprocessor:boolean findSpeaker(edu.stanford.nlp.hcoref.data.Document,int,int,java.util.List,int,int,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.util.logging.RedwoodPrintStream:void logB(java.lang.Object)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.util.Map readSeedWords(java.lang.String)",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:void extractPremarkedEntityMentions(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.patterns.ScorePhrasesAverageFeatures:edu.stanford.nlp.stats.Counter scorePhrases(java.lang.String,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.Counter,java.util.Set,boolean)",
            "edu.stanford.nlp.scoref.PairwiseModelTrainer:void trainRanking(edu.stanford.nlp.scoref.PairwiseModel)",
            "edu.stanford.nlp.util.logging.Redwood$Util:void log(java.lang.Object[])",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.util.List getThreadBatches(java.util.List,int)",
            "edu.stanford.nlp.util.logging.Redwood$Util:void warn(java.lang.Object[])",
            "edu.stanford.nlp.util.logging.JavaUtilLoggingAdaptor:void main(java.lang.String[])",
            "edu.stanford.nlp.scoref.SimpleLinearClassifier:void printWeightVector(java.io.PrintWriter)",
            "edu.stanford.nlp.hcoref.Preprocessor:java.lang.String findParagraphSpeaker(edu.stanford.nlp.hcoref.data.Document,java.util.List,int,java.lang.String,int,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.util.logging.Redwood:void lambda$main$49(int)",
            "edu.stanford.nlp.hcoref.CorefPrinter:void printMentionDetection(java.util.Map)",
            "edu.stanford.nlp.naturalli.Util:void dumpAccuracy(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.patterns.Data:void loadDomainNGrams()",
            "edu.stanford.nlp.scoref.PairwiseModelTrainer:void test(edu.stanford.nlp.scoref.PairwiseModel,java.lang.String,boolean)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass$LabelWithSeedWords:edu.stanford.nlp.util.Pair call()",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:edu.stanford.nlp.trees.Tree funkyFindLeafWithApproximateSpan(edu.stanford.nlp.trees.Tree,java.lang.String,int,int)",
            "edu.stanford.nlp.patterns.surface.PatternToken:void <init>(java.lang.String,boolean,boolean,int,java.lang.String,boolean,boolean,java.lang.String)",
            "edu.stanford.nlp.patterns.InvertedIndexByTokens:java.util.Map getFileSentIdsFromPats(java.util.Collection)",
            "edu.stanford.nlp.util.logging.Redwood:void main(java.lang.String[])",
            "edu.stanford.nlp.patterns.surface.CreatePatterns:void getAllPatterns(java.util.Map,java.util.Properties,edu.stanford.nlp.patterns.ConstantsAndVariables$PatternForEachTokenWay)",
            "edu.stanford.nlp.patterns.ScorePhrases:void applyPats(edu.stanford.nlp.stats.Counter,java.lang.String,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.util.CollectionValuedMap,java.util.Set)",
            "edu.stanford.nlp.scoref.PairwiseModelTrainer:java.util.List getAnaphoricityExamples(java.util.List)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void labelWords(java.lang.String,java.util.Map,java.util.Collection,java.lang.String,edu.stanford.nlp.util.CollectionValuedMap)",
            "edu.stanford.nlp.hcoref.CorefPrinter:void printScoreSummary(java.lang.String,java.util.logging.Logger,boolean)",
            "edu.stanford.nlp.patterns.Data:void setRatioGoogleNgramFreqWithDataFreq()",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.util.Map readSeedWords(java.util.Properties)",
            "edu.stanford.nlp.scoref.PairwiseModelTrainer:void trainClassification(edu.stanford.nlp.scoref.PairwiseModel,boolean)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void setUpConstructor(java.util.Map,java.util.Map,boolean,java.util.Map,java.util.Map,java.util.Map)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.util.Map loadFromSavedPatternsWordsDir(edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass,java.util.Properties)",
            "edu.stanford.nlp.util.logging.JavaUtilLoggingAdaptor$RedwoodHandler:void publish(java.util.logging.LogRecord)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void iterateExtractApply(java.util.Map,java.util.Map,java.util.Map)",
            "edu.stanford.nlp.hcoref.Preprocessor:void findTwinMentionsStrict(edu.stanford.nlp.hcoref.data.Document)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood:void startTrack(java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood:void main(java.lang.String[])",
            "edu.stanford.nlp.util.logging.Redwood$Util:void forceTrack(java.lang.String)",
            "edu.stanford.nlp.util.logging.Redwood:void lambda$main$50(int)",
            "edu.stanford.nlp.util.logging.Redwood:void forceTrack(java.lang.Object)",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.util.Map)",
            "edu.stanford.nlp.util.logging.Redwood$Util:void startTrack(java.lang.Object[])",
            "edu.stanford.nlp.util.logging.JavaUtilLoggingAdaptor:void main(java.lang.String[])",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Iterable)",
            "edu.stanford.nlp.util.ArrayCoreMap:void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String)",
            "edu.stanford.nlp.util.logging.Redwood:void lambda$main$49(int)",
            "edu.stanford.nlp.util.logging.Redwood:void forceTrack()",
            "edu.stanford.nlp.util.logging.Redwood:void startThreads(java.lang.String)",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Object[])",
            "edu.stanford.nlp.pipeline.AnnotationPipeline$1:void lambda$next$36(edu.stanford.nlp.pipeline.Annotation,java.util.function.Consumer)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood:void endTrack(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood:void main(java.lang.String[])",
            "edu.stanford.nlp.util.logging.Redwood:void endTrack()",
            "edu.stanford.nlp.util.logging.Redwood:void endThreads(java.lang.String)",
            "edu.stanford.nlp.util.logging.Redwood$Util:void endTrackIfOpen(java.lang.String)",
            "edu.stanford.nlp.util.logging.Redwood:void lambda$main$50(int)",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.util.Map)",
            "edu.stanford.nlp.util.logging.JavaUtilLoggingAdaptor:void main(java.lang.String[])",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Iterable)",
            "edu.stanford.nlp.util.ArrayCoreMap:void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String)",
            "edu.stanford.nlp.util.logging.Redwood:void lambda$main$49(int)",
            "edu.stanford.nlp.util.logging.Redwood$Util:void endTracksUntil(java.lang.String)",
            "edu.stanford.nlp.util.logging.Redwood$Util:void endTrack(java.lang.String)",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Object[])",
            "edu.stanford.nlp.pipeline.AnnotationPipeline$1:void lambda$next$36(edu.stanford.nlp.pipeline.Annotation,java.util.function.Consumer)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:void finishTraining()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void finishTraining()",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void initialBetasAndLexicon()",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recalculateTemporaryBetas(boolean,java.util.Map,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.ThreeDimensionalMap)",
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recalculateMergedBetas(java.util.Map)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.Treebank,java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.TwinScorer:boolean parse(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.DeltaIndex:int indexOf(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.AbstractDependencyGrammar:void <init>(edu.stanford.nlp.trees.TreebankLanguagePack,edu.stanford.nlp.parser.lexparser.TagProjection,boolean,boolean,boolean,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void <init>(edu.stanford.nlp.parser.lexparser.TagProjection,edu.stanford.nlp.parser.lexparser.TreebankLangParserParams,boolean,boolean,boolean,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:int getBaseTag(int,edu.stanford.nlp.trees.TreebankLanguagePack)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:void parsePCFG(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ProjectionScorer:boolean parse(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TwinScorer:boolean parse(java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:java.util.Iterator ruleIteratorByWord(java.lang.String,int,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:void readObject(java.io.ObjectInputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:void readData(java.io.BufferedReader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTextFile(java.lang.String,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void readData(java.io.BufferedReader)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.IntTaggedWord:void <init>(java.lang.String,char,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void readData(java.io.BufferedReader)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:java.util.List listToEvents(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:java.util.List treeToEvents(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void addAll(java.util.List,double)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Temporal:int getTid(edu.stanford.nlp.time.SUTime$TimeIndex)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Temporal:java.lang.String getTidString(edu.stanford.nlp.time.SUTime$TimeIndex)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TTags:void markClosed(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TTags:void setClosedClassTags(java.lang.String[])",
            "edu.stanford.nlp.tagger.maxent.TTags:void save(java.io.DataOutputStream,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TTags:void setOpenClassTags(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void init(edu.stanford.nlp.tagger.maxent.TaggerConfig)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:int addTag(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.ReadDataTagged:void loadFile(edu.stanford.nlp.tagger.io.TaggedFileReader,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Temporal:int getTfid(edu.stanford.nlp.time.SUTime$TimeIndex)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Temporal:java.lang.String getTfidString(edu.stanford.nlp.time.SUTime$TimeIndex)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:void tallyLocalTree(edu.stanford.nlp.trees.Tree,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:void tallyTree(edu.stanford.nlp.trees.Tree,double)"
        ]
    },
    "edu.stanford.nlp.naturalli.ForwardEntailerSearchProblem:void lambda$searchImplementation$15(edu.stanford.nlp.semgraph.SemanticGraph,java.util.List,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.naturalli.OpenIE:edu.stanford.nlp.semgraph.SemanticGraph canonicalizeCoref(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.OpenIE:void annotateSentence(edu.stanford.nlp.util.CoreMap,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void simpleClause(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraphEdge)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void access$100(edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraphEdge)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:void killNonRooted(edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.naturalli.ForwardEntailerSearchProblem:edu.stanford.nlp.util.Pair lambda$searchImplementation$16(edu.stanford.nlp.naturalli.ForwardEntailerSearchProblem$SearchState,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Lazy$2:java.lang.Object compute()"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapNodePatternTrigger:void <init>(edu.stanford.nlp.ling.tokensregex.SequencePattern[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.TokenSequencePattern:edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher getMultiPatternMatcher(edu.stanford.nlp.ling.tokensregex.TokenSequencePattern[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.TokenSequencePattern:edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher getMultiPatternMatcher(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.TokensRegexNERAnnotator:edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher createPatternMatcher(java.util.Map)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$MultiTokenPatternExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule,java.util.List)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:boolean matchChild()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:boolean matches()"
        ]
    },
    "edu.stanford.nlp.classify.Dataset:void add(java.util.Collection,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.Dataset:void add(java.util.Collection,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.classify.Dataset:void addFeatures(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.WeightedDataset:void add(java.util.Collection,java.lang.Object,float)"
        ]
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.classify.Dataset getDataset(java.util.Collection,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.classify.Dataset getDataset(edu.stanford.nlp.objectbank.ObjectBank,edu.stanford.nlp.classify.Dataset)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:void trainSemiSup()",
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.classify.Dataset getDataset(java.util.Collection)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:void retrain(edu.stanford.nlp.objectbank.ObjectBank,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)"
        ]
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.classify.Dataset getBiasedDataset(edu.stanford.nlp.objectbank.ObjectBank,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void trainSemiSup()"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFCliqueTree:double condProbGivenNext(int,java.lang.Object,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFFeatureExporter:java.lang.String getFeatureString(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFFeatureExporter:void printFeatures(java.lang.String,java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFCliqueTree:double logProb(int,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFCliqueTree:double prob(int,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier:void train(java.util.Collection,edu.stanford.nlp.sequences.DocumentReaderAndWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void train(java.lang.String,java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void train(java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void train(java.lang.String[],edu.stanford.nlp.sequences.DocumentReaderAndWriter)"
        ]
    },
    "edu.stanford.nlp.classify.ColumnDataClassifier:void printClassifier(edu.stanford.nlp.classify.Classifier)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.util.Pair crossValidate(edu.stanford.nlp.classify.GeneralDataset,java.util.List)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:boolean trainClassifier()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:void <init>(edu.stanford.nlp.parser.lexparser.LexicalizedParser)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery lexicalizedParserQuery()",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.common.ParserQuery parserQuery()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.IterativeCKYPCFGParser:void <init>(edu.stanford.nlp.parser.lexparser.BinaryGrammar,edu.stanford.nlp.parser.lexparser.UnaryGrammar,edu.stanford.nlp.parser.lexparser.Lexicon,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:void <init>(edu.stanford.nlp.parser.lexparser.LexicalizedParser)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFNonLinearLogConditionalObjectiveFunction:void <init>(int[][][][],int[][],int,edu.stanford.nlp.util.Index,java.util.List,int[],edu.stanford.nlp.sequences.SeqClassifierFlags,int,int,double[][][][])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifierNonlinear:double[] trainWeights(int[][][][],int[][],edu.stanford.nlp.optimization.Evaluator[],int,double[][][][])"
        ]
    },
    "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$3:java.util.Optional applyTo(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$State,edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraphEdge)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$6:java.util.Optional applyTo(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$State,edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraphEdge)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$4:java.util.Optional applyTo(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$State,edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraphEdge)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$5:java.util.Optional applyTo(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$State,edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraphEdge)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFloatFunction:void <init>(int[][][][],int[][],edu.stanford.nlp.util.Index,int,edu.stanford.nlp.util.Index,java.util.List,int[],int,java.lang.String,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFloatFunction:void <init>(int[][][][],int[][],edu.stanford.nlp.util.Index,int,edu.stanford.nlp.util.Index,java.util.List,int[],java.lang.String,double)",
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFloatFunction:void <init>(int[][][][],int[][],edu.stanford.nlp.util.Index,int,edu.stanford.nlp.util.Index,java.util.List,int[],int,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifierNoisyLabel:double[][] readErrorMatrix(java.lang.String,edu.stanford.nlp.util.Index,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifierNoisyLabel:edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction getObjectiveFunction(int[][][][],int[][])"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:double[][] parseMatrix(java.lang.String[],edu.stanford.nlp.util.Index,int,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.util.Pair readEntityMatrices(java.lang.String,edu.stanford.nlp.util.Index)"
        ]
    },
    "edu.stanford.nlp.classify.LogConditionalObjectiveFunction:void calculateCL(double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LogConditionalObjectiveFunction:void calculate(double[])"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:double score()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:double score(java.io.BufferedReader,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassChunkEvalStats:void main(java.lang.String[])",
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:double score(java.io.BufferedReader,java.lang.String)",
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:double score(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassChunkEvalStats:void finalizeCounts()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:double score(java.io.BufferedReader,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:double score(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset)"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:double score(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallStats:void <init>(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:double score(java.util.List,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:double score(java.util.List,java.util.List,edu.stanford.nlp.util.Index)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:edu.stanford.nlp.trees.Tree getBestDependencyParse(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void processResults(edu.stanford.nlp.parser.common.ParserQuery,edu.stanford.nlp.trees.Tree,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,edu.stanford.nlp.trees.TreePrint)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:edu.stanford.nlp.trees.Tree getBestDependencyParse()",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:edu.stanford.nlp.trees.Tree getBestParse(boolean)"
        ]
    },
    "edu.stanford.nlp.parser.metrics.AbstractEval$ScoreEval:void recordScore(edu.stanford.nlp.parser.KBestViterbiParser,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ParseFiles:void processResults(edu.stanford.nlp.parser.common.ParserQuery,int,java.io.PrintWriter)",
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void processResults(edu.stanford.nlp.parser.common.ParserQuery,edu.stanford.nlp.trees.Tree,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,edu.stanford.nlp.trees.TreePrint)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ExhaustiveDependencyParser:boolean hasParse()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ExhaustiveDependencyParser:edu.stanford.nlp.trees.Tree getBestParse()",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:edu.stanford.nlp.trees.Tree getBestParse(boolean)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:boolean parse(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.ExhaustiveDependencyParser:boolean parse(java.util.List)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:int getFeatureCount(java.util.Set,double,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.classify.Classifier makeClassifierAdaptL1(edu.stanford.nlp.classify.GeneralDataset)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:java.util.List getTopFeatures(java.util.Set,double,boolean,int,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.classify.Classifier makeClassifierAdaptL1(edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.classify.LinearClassifier:java.util.List getTopFeatures(double,boolean,int)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFCliqueTree:double condProbGivenPrevious(int,java.lang.Object,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:double score(java.util.List,java.util.List,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats$MultiClassStringLabelStats:void <init>(edu.stanford.nlp.util.Index,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassChunkEvalStats:void <init>(edu.stanford.nlp.util.Index,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:void <init>(edu.stanford.nlp.util.Index,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.TestSequenceModel:void <init>(edu.stanford.nlp.ie.crf.CRFCliqueTree,edu.stanford.nlp.ie.crf.LabelDictionary,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.sequences.SequenceModel getSequenceModel(edu.stanford.nlp.util.Triple,java.util.List)",
            "edu.stanford.nlp.ie.crf.TestSequenceModel:void <init>(edu.stanford.nlp.ie.crf.CRFCliqueTree)"
        ]
    },
    "edu.stanford.nlp.classify.LogisticClassifier:double probabilityOf(java.util.Collection,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LogisticClassifier:double probabilityOf(edu.stanford.nlp.ling.Datum)",
            "edu.stanford.nlp.classify.LogisticClassifier:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.classify.LogisticClassifier:java.lang.Object classOf(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LogisticClassifier:java.lang.Object classOf(edu.stanford.nlp.ling.Datum)",
            "edu.stanford.nlp.classify.LogisticClassifier:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassPrecisionRecallStats:void <init>(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:void <init>(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassPrecisionRecallStats:double score(edu.stanford.nlp.classify.ProbabilisticClassifier,edu.stanford.nlp.classify.GeneralDataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction:double expectedCountsAndValueForADoc(double[][],int,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction:double expectedCountsAndValueForADoc(double[][],int)",
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction:double expectedCountsForADoc(double[][],int)",
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction:double valueForADoc(int)"
        ]
    },
    "edu.stanford.nlp.maxent.Feature:void <init>(edu.stanford.nlp.maxent.Experiments,double[][],edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:void printLabelInformation(java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunctionForLOP:void <init>(int[][][][],int[][],double[][],int,edu.stanford.nlp.util.Index,java.util.List,int[],java.lang.String,int,java.util.List,java.util.List,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifierWithLOP:double[] trainWeights(int[][][][],int[][],edu.stanford.nlp.optimization.Evaluator[],int,double[][][][])"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:int getTagIndex(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TaggerExperiments:void getFeaturesNew()"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TestSentence:int[] getPossibleValues(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.ExactBestSequenceFinder:edu.stanford.nlp.util.Pair bestSequence(edu.stanford.nlp.sequences.SequenceModel,double[][])",
            "edu.stanford.nlp.tagger.maxent.TestSentence:double scoreOf(int[],int)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TestSentence:double[] getApproximateHistories(java.lang.String[],edu.stanford.nlp.tagger.maxent.History,java.util.List,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TestSentence:double[] getHistories(java.lang.String[],edu.stanford.nlp.tagger.maxent.History,java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassPrecisionRecallStats:java.lang.String getPrecisionDescription(int,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallStats:java.lang.String getDescription(int)"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassPrecisionRecallStats:double getPrecision(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:java.lang.String getConllEvalString(java.util.List,boolean)",
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallStats:double getFMeasure(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier:double weight(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:java.util.List getBestPCFGParses()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void processResults(edu.stanford.nlp.parser.common.ParserQuery,edu.stanford.nlp.trees.Tree,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,edu.stanford.nlp.trees.TreePrint)"
        ]
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier:void retrain(edu.stanford.nlp.objectbank.ObjectBank)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.WeightedDataset:void add(java.util.Collection,java.lang.Object,float)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.WeightedDataset:void add(java.util.Collection,java.lang.Object)",
            "edu.stanford.nlp.classify.WeightedDataset:void add(edu.stanford.nlp.ling.Datum,float)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFCliqueTree:double prob(int,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern$State:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$ConjEndState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$GroupEndState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$GroupStartState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$SeqStartState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$BackRefState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$SeqEndState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$State:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern$ConjStartState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern$RepeatState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$State:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates:void addStates(int,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$NodePatternState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$BackRefState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult$MatchedGroup,int)",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$MultiNodePatternState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classifyGibbs(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classify(java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.ie.crf.CRFCliqueTree getCliqueTree(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List getCliqueTrees(java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void printFactorTableDocument(java.util.List)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void printFirstOrderProbsDocument(java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifierNonlinear:edu.stanford.nlp.util.Triple documentToDataAndLabels(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classifyGibbs(java.util.List)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.ie.crf.CRFCliqueTree getCliqueTree(java.util.List)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.sequences.SequenceModel getSequenceModel(java.util.List)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.util.Triple documentsToDataAndLabels(java.util.Collection)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.util.Triple printProbsDocument(java.util.List)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List documentsToDataAndLabelsList(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.sequences.SequenceModel getSequenceModel(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:edu.stanford.nlp.fsm.DFSA getViterbiSearchGraph(java.util.List,java.lang.Class)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classifyMaxEnt(java.util.List)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:edu.stanford.nlp.stats.Counter classifyKBest(java.util.List,java.lang.Class,int)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.util.Triple documentsToDataAndLabels(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void train(java.util.Collection,edu.stanford.nlp.sequences.DocumentReaderAndWriter)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List documentsToDataAndLabelsList(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifierWithDropout:edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction getObjectiveFunction(int[][][][],int[][])",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void train(java.util.Collection,edu.stanford.nlp.sequences.DocumentReaderAndWriter)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction:void empiricalCounts(double[][])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction:void <init>(int[][][][],int[][],int,edu.stanford.nlp.util.Index,java.util.List,int[],java.lang.String,java.lang.String,double,double[][][][],int,boolean)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction:double expectedAndEmpiricalCountsAndValueForADoc(double[][],double[][],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction$ExpectationThreadsafeProcessor:edu.stanford.nlp.util.Pair process(edu.stanford.nlp.util.Pair)"
        ]
    },
    "edu.stanford.nlp.sequences.FactoredSequenceModel:double[] scoresOf(int[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:edu.stanford.nlp.util.Pair samplePositionHelper(edu.stanford.nlp.sequences.SequenceModel,int[],int,double)",
            "edu.stanford.nlp.sequences.FactoredSequenceModel:double scoreOf(int[],int)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFCliqueTree:double[] getConditionalDistribution(int[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFCliqueTree:double scoreOf(int[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.IterativeCKYPCFGParser:void doInsideScores()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:boolean parse(java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFCliqueTree:void <init>(edu.stanford.nlp.ie.crf.FactorTable[],edu.stanford.nlp.util.Index,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFCliqueTree:edu.stanford.nlp.ie.crf.CRFCliqueTree getCalibratedCliqueTree(int[][][],java.util.List,int,edu.stanford.nlp.util.Index,java.lang.Object,edu.stanford.nlp.ie.crf.CliquePotentialFunction,double[][][])",
            "edu.stanford.nlp.ie.crf.CRFCliqueTree:edu.stanford.nlp.ie.crf.CRFCliqueTree getCalibratedCliqueTree(double[],double,int[][],int[][][],java.util.List,int,edu.stanford.nlp.util.Index,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.sequences.FactoredSequenceModel:double scoreOf(int[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:double sampleSequenceForward(edu.stanford.nlp.sequences.SequenceModel,int[],double,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:edu.stanford.nlp.trees.Tree getBestParse()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:edu.stanford.nlp.trees.Tree getBestPCFGParse(boolean)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.NodePruner:java.util.List prune(java.util.List,edu.stanford.nlp.ling.Label,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.NodePruner:edu.stanford.nlp.trees.Tree prune(edu.stanford.nlp.trees.Tree,int)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter logProbabilityOfRVFDatum(edu.stanford.nlp.ling.RVFDatum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter probabilityOfRVFDatum(edu.stanford.nlp.ling.RVFDatum)",
            "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter logProbabilityOf(edu.stanford.nlp.ling.Datum)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:java.lang.Object classOfRVFDatum(edu.stanford.nlp.ling.RVFDatum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifier:java.lang.Object classOf(edu.stanford.nlp.ling.Datum)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:double getBestScore()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:double getPCFGScore()",
            "edu.stanford.nlp.parser.metrics.AbstractEval$ScoreEval:void recordScore(edu.stanford.nlp.parser.KBestViterbiParser,java.io.PrintWriter)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:boolean hasParse()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:double getPCFGScore(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.SVMLightClassifier:edu.stanford.nlp.stats.Counter logProbabilityOf(edu.stanford.nlp.ling.Datum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassAccuracyStats:void initMC(edu.stanford.nlp.classify.ProbabilisticClassifier,edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.stats.Counter scoresOf(java.util.List,int)",
            "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter probabilityOf(edu.stanford.nlp.ling.Datum)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:double loglikelihood(java.util.List)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:java.lang.Object classOf(edu.stanford.nlp.ling.Datum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:java.lang.String classOf(java.util.List,int)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:java.lang.String classOf(edu.stanford.nlp.ling.Datum)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:void testExample(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset,java.util.List,edu.stanford.nlp.stats.Counter,int)",
            "edu.stanford.nlp.classify.Classifier:edu.stanford.nlp.util.Pair evaluatePrecisionAndRecall(edu.stanford.nlp.classify.GeneralDataset,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter logProbabilityOf(edu.stanford.nlp.ling.Datum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassAccuracyStats:void initMC(edu.stanford.nlp.classify.ProbabilisticClassifier,edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.stats.Counter scoresOf(java.util.List,int)",
            "edu.stanford.nlp.classify.NBLinearClassifierFactory:java.lang.Double lambda$tuneSigma$9(int[][],int[],java.lang.Double)",
            "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter probabilityOf(edu.stanford.nlp.ling.Datum)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:double loglikelihood(java.util.List)"
        ]
    },
    "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.classify.LinearClassifier fitSigmoid(edu.stanford.nlp.classify.SVMLightClassifier,edu.stanford.nlp.classify.GeneralDataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.classify.SVMLightClassifier trainClassifierBasic(edu.stanford.nlp.classify.GeneralDataset)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunctionWithDropout:edu.stanford.nlp.util.Quadruple access$000(edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunctionWithDropout,int,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunctionWithDropout$1:edu.stanford.nlp.util.Quadruple process(edu.stanford.nlp.util.Pair)"
        ]
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.sequences.SequenceModel getSequenceModel(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void classifySeq(java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:void printFirstOrderProbsDocuments(edu.stanford.nlp.objectbank.ObjectBank)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void printFirstOrderProbs(java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:java.util.List treeToDependencyList(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void tune(java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammarExtractor:void tallyRoot(edu.stanford.nlp.trees.Tree,double)",
            "edu.stanford.nlp.parser.lexparser.FastFactoredParser:double depScoreTree(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassPrecisionRecallStats:double getRecall(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:java.lang.String getConllEvalString(java.util.List,boolean)",
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallStats:double getFMeasure(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassPrecisionRecallStats:java.lang.String getRecallDescription(int,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallStats:java.lang.String getDescription(int)"
        ]
    },
    "edu.stanford.nlp.util.Execution:void fillOptions(java.lang.Object[],java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Execution:void fillOptions(java.lang.Object,java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.pipeline.RelationExtractorAnnotator:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.CoordinationTransformer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.process.ChineseDocumentToSentenceProcessor:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.MachineReading:edu.stanford.nlp.ie.machinereading.MachineReading makeMachineReading(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.MachineReading:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLPServer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.NERServer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.Execution:void exec(java.lang.Runnable,java.lang.String[],java.lang.Class[],boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.MultiClassChunkEvalStats:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.international.arabic.process.ArabicTokenizer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.nndep.DependencyParser:void parseTextFile(java.io.BufferedReader,java.io.PrintWriter)",
            "edu.stanford.nlp.pipeline.POSTaggerAnnotator:edu.stanford.nlp.tagger.maxent.MaxentTagger loadModel(java.lang.String,boolean)",
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.nndep.demo.DependencyParserDemo:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TaggerConfig:void <init>(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.NERClassifierCombiner:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFBiasedClassifier:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.ColumnDataClassifier:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.regexp.NumberSequenceClassifier:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.Execution:void fillOptions(java.lang.Class[],java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Execution:void fillOptions(java.lang.Class,java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.QPTreeTransformer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.CorefSystem:void runCoref(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.CorefSystem:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.util.Execution:void exec(java.lang.Runnable,java.lang.String[],boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Execution:void exec(java.lang.Runnable,java.lang.String[],java.lang.Class[])",
            "edu.stanford.nlp.util.Execution:void exec(java.lang.Runnable,java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.scoref.StatisticalCorefSystem:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.scoref.StatisticalCorefTrainer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.Execution:void fillOptions(java.util.Properties,java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Execution:void fillOptions(java.lang.Class[],java.util.Properties,java.lang.String[])",
            "edu.stanford.nlp.util.Execution:void fillOptions(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.classify.LogisticClassifier:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.pascal.ISODateInstance:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.ClassifierCombiner:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLPClient:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.fsm.TransducerGraph:void depthFirstSearch(boolean,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.QuasiDeterminizer:void main(java.lang.String[])",
            "edu.stanford.nlp.fsm.TransducerGraph:void main(java.lang.String[])",
            "edu.stanford.nlp.fsm.TransducerGraph:java.lang.String toString()"
        ]
    },
    "edu.stanford.nlp.stats.Counters:void subtractInPlace(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void subtractAll(edu.stanford.nlp.stats.TwoDimensionalIntCounter,boolean)",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void subtractAll(java.lang.Object,edu.stanford.nlp.stats.IntCounter)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:void subtractAll(edu.stanford.nlp.stats.TwoDimensionalCounterInterface,boolean)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:void subtractAll(java.lang.Object,edu.stanford.nlp.stats.Counter)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.VariableStrings:boolean isSet(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.IntCounter:double getNormalizedCount(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.semgrex.VariableStrings:boolean isSet(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.IntCounter:void removeZeroCounts()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.nndep.Util:java.util.List generateDict(java.util.List,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.nndep.Util:java.util.List generateDict(java.util.List)",
            "edu.stanford.nlp.parser.nndep.DependencyParser:void genDictionaries(java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.stats.IntCounter:double doubleMax()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:java.lang.String getConllEvalString(java.util.List,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:java.lang.String getConllEvalString(boolean)"
        ]
    },
    "edu.stanford.nlp.stats.IntCounter:double totalDoubleCount(java.util.function.Predicate)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.IntCounter:double totalCount(java.util.function.Predicate)"
        ]
    },
    "edu.stanford.nlp.stats.IntCounter:void <init>(edu.stanford.nlp.stats.IntCounter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.IntCounter:java.lang.Object clone()"
        ]
    },
    "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$CorpusStats:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.TwoDimensionalIntCounter:int[][] toMatrix(java.util.List,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:java.lang.String toMatrixString(int)"
        ]
    },
    "edu.stanford.nlp.stats.TwoDimensionalIntCounter:java.lang.String toCSVString(java.text.NumberFormat)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.TwoDimensionalIntCounter:java.lang.String toCSVString(edu.stanford.nlp.stats.TwoDimensionalIntCounter,java.text.NumberFormat,java.util.Comparator,java.util.Comparator)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$CorpusStats:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.CTBunkDict:edu.stanford.nlp.tagger.maxent.CTBunkDict getInstance()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.CTBunkDict:java.lang.String getTag(java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.ExtractorsConjunction:java.lang.String extract(edu.stanford.nlp.tagger.maxent.History,edu.stanford.nlp.tagger.maxent.PairsHolder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.GeneralizedCounter:java.util.Set access$500(edu.stanford.nlp.stats.GeneralizedCounter,java.util.Set,java.lang.Object[],boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter$OneDimensionalCounterView:java.util.Set keySet()"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter:java.util.Set keySet()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter:void printKeySet()",
            "edu.stanford.nlp.stats.GeneralizedCounter$CounterView:java.util.Set keySet()"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter:java.util.Set lowestLevelCounterEntrySet()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon:void finishTraining()"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter:java.lang.String toString(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.GeneralizedCounter:double totalCount()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter:void prettyPrint(java.io.PrintWriter,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.stats.GeneralizedCounter:double totalCount()",
            "edu.stanford.nlp.stats.GeneralizedCounter:void main(java.lang.String[])",
            "edu.stanford.nlp.stats.GeneralizedCounter$OneDimensionalCounterView:double totalCount()",
            "edu.stanford.nlp.stats.GeneralizedCounter:double[] getCounts(java.util.List)",
            "edu.stanford.nlp.stats.GeneralizedCounter$CounterView:double totalCount()"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter:void incrementCount2D(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter$CounterView:boolean containsKey(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter$CounterView:boolean containsKey(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFCliqueTree:edu.stanford.nlp.stats.GeneralizedCounter probs(int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFCliqueTree:edu.stanford.nlp.stats.GeneralizedCounter logProbs(int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.GeneralizedCounter:void incrementCount(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter:void incrementCount(java.util.List,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon:void finishTraining()"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter:void incrementCount3D(java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.GrammarCompactor:java.util.Map convertGrammarToGraphs(edu.stanford.nlp.util.Pair,java.util.Set,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.GrammarCompactor:edu.stanford.nlp.util.Triple compactGrammar(edu.stanford.nlp.util.Pair,java.util.Map,java.util.Map,edu.stanford.nlp.util.Index)"
        ]
    },
    "edu.stanford.nlp.pipeline.CleanXmlAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.pipeline.CleanXmlAnnotator:java.util.List process(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void setCount(java.lang.Object,java.lang.Object,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.TwoDimensionalIntCounter:java.lang.String toMatrixString(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void incrementCount(java.lang.Object,java.lang.Object,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void decrementCount(java.lang.Object,java.lang.Object,double)"
        ]
    },
    "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void decrementCount(java.lang.Object,java.lang.Object,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void decrementCount(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void incrementCount(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void train(java.util.Collection,java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void printConllOutput(edu.stanford.nlp.dcoref.Document,java.io.PrintWriter,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:double runAndScoreCoref(edu.stanford.nlp.dcoref.SieveCoreferenceSystem,edu.stanford.nlp.dcoref.MentionExtractor,java.util.Properties,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree parse(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree parseStrings(java.util.List)",
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree originalFindSyntacticHead(edu.stanford.nlp.ie.machinereading.structure.EntityMention,edu.stanford.nlp.trees.Tree,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree findSyntacticHead(edu.stanford.nlp.ie.machinereading.structure.EntityMention,edu.stanford.nlp.trees.Tree,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:int assignSyntacticHead(edu.stanford.nlp.ie.machinereading.structure.EntityMention,edu.stanford.nlp.trees.Tree,java.util.List,boolean)"
        ]
    },
    "edu.stanford.nlp.hcoref.md.CorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.md.CorefMentionFinder:edu.stanford.nlp.trees.Tree findSyntacticHead(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.trees.Tree,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:void findHead(edu.stanford.nlp.util.CoreMap,java.util.List)"
        ]
    },
    "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.Tree findSyntacticHead(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.trees.Tree,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.MentionExtractor:java.util.List arrange(edu.stanford.nlp.pipeline.Annotation,java.util.List,java.util.List,java.util.List,boolean)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:void findHead(edu.stanford.nlp.util.CoreMap,java.util.List)"
        ]
    },
    "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.fsm.TransducerGraph:void <init>(edu.stanford.nlp.fsm.TransducerGraph,edu.stanford.nlp.fsm.TransducerGraph$ArcProcessor)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.TransducerGraph:void <init>(edu.stanford.nlp.fsm.TransducerGraph)",
            "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:void main(java.lang.String[])",
            "edu.stanford.nlp.fsm.TransducerGraph:edu.stanford.nlp.fsm.TransducerGraph clone()",
            "edu.stanford.nlp.parser.lexparser.ExactGrammarCompactor:edu.stanford.nlp.fsm.TransducerGraph doCompaction(edu.stanford.nlp.fsm.TransducerGraph,java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.fsm.TransducerGraph:void <init>(edu.stanford.nlp.fsm.TransducerGraph,edu.stanford.nlp.fsm.TransducerGraph$NodeProcessor)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ExactGrammarCompactor:edu.stanford.nlp.fsm.TransducerGraph doCompaction(edu.stanford.nlp.fsm.TransducerGraph,java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.fsm.TransducerGraph:void <init>(java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:edu.stanford.nlp.fsm.TransducerGraph buildMinimizedFA()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:edu.stanford.nlp.fsm.TransducerGraph minimizeFA(edu.stanford.nlp.fsm.TransducerGraph)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.GrammarCompactor:boolean writeFile(edu.stanford.nlp.fsm.TransducerGraph,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ExactGrammarCompactor:edu.stanford.nlp.fsm.TransducerGraph doCompaction(edu.stanford.nlp.fsm.TransducerGraph,java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.hcoref.Preprocessor:void findQuotationSpeaker(edu.stanford.nlp.hcoref.data.Document,int,java.util.List,edu.stanford.nlp.util.IntPair,edu.stanford.nlp.util.IntPair,edu.stanford.nlp.hcoref.data.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.Preprocessor:void findSpeakersInArticle(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.sequences.ObjectBankWrapper:void doBasicStuff(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.ObjectBankWrapper:java.util.List processDocument(java.util.List)"
        ]
    },
    "edu.stanford.nlp.process.Americanize:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.process.LowercaseAndAmericanizeFunction:java.lang.String apply(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.LowercaseAndAmericanizeFunction:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.process.PTBLexer:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.PTBTokenizer:edu.stanford.nlp.ling.HasWord getNext()"
        ]
    },
    "edu.stanford.nlp.process.AmericanizeFunction:java.lang.String apply(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.AmericanizeFunction:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.process.Americanize:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void <init>(edu.stanford.nlp.semgraph.SemanticGraph,boolean,java.util.Optional,java.util.Optional)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ClauseSplitter:edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem lambda$load$111(edu.stanford.nlp.util.Pair,edu.stanford.nlp.semgraph.SemanticGraph,java.lang.Boolean)",
            "edu.stanford.nlp.naturalli.ClauseSplitter:edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem lambda$train$110(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$Featurizer,edu.stanford.nlp.semgraph.SemanticGraph,java.lang.Boolean)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void <init>(edu.stanford.nlp.semgraph.SemanticGraph,boolean)"
        ]
    },
    "edu.stanford.nlp.naturalli.OpenIE:void annotateSentence(edu.stanford.nlp.util.CoreMap,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.OpenIE:void lambda$annotate$3(java.util.Map,edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.international.arabic.process.IOBUtils:java.util.List StringToIOB(java.util.List,java.lang.Character,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.arabic.process.ArabicDocumentReaderAndWriter$1:java.util.List apply(java.lang.String)",
            "edu.stanford.nlp.international.arabic.process.IOBUtils:java.util.List StringToIOB(java.util.List,java.lang.Character,boolean)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon$Symbol:java.lang.Object readResolve()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern:edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern valueOf(java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.Document:void findSpeakersInArticle(edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Document:void findSpeakers(edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:void <init>(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void correctDependencies(java.util.List)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void postProcessDependencies(java.util.List)",
            "edu.stanford.nlp.trees.ud.CoNLLUDocumentReader$SentenceProcessor:edu.stanford.nlp.semgraph.SemanticGraph apply(java.lang.String)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void getExtras(java.util.List)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void collapseDependencies(java.util.List,boolean,edu.stanford.nlp.trees.GrammaticalStructure$Extras)",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.GrammaticalStructure,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode,edu.stanford.nlp.trees.GrammaticalStructure$Extras,boolean,java.util.function.Predicate)",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void postProcessDependencies(java.util.List)"
        ]
    },
    "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void addSubtree(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.lang.String,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void lambda$null$9(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void simpleClause(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraphEdge)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void access$300(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.lang.String,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:edu.stanford.nlp.semgraph.SemanticGraph makeSoftCopy()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void expandPPConjunctions(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void correctSubjPass(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void expandPrepConjunctions(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void addCaseMarkerInformation(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void addConjInformation(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void treatCC(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void correctWHAttachment(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void correctWHAttachment(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void collapseReferent(edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph$SemanticGraphParsingTask:void readDep(edu.stanford.nlp.ling.IndexedWord,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph$SemanticGraphParsingTask:void readDep(edu.stanford.nlp.ling.IndexedWord,java.lang.String)",
            "edu.stanford.nlp.semgraph.SemanticGraph$SemanticGraphParsingTask:edu.stanford.nlp.semgraph.SemanticGraph parse()"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromVertices(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void expandPrepConjunction(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.List,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void expandPrepConjunctions(edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromEdges(java.lang.Iterable)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.lang.String semgrexFromGraph(java.lang.Iterable,boolean,boolean,java.util.Map)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:edu.stanford.nlp.semgraph.SemanticGraph makeGraphFromNodes(java.util.Collection,edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph duplicateKeepNodes(edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromGraphs(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.naturalli.ForwardEntailerSearchProblem:void lambda$searchImplementation$18(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraphEdge)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void addWord(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.lang.String,edu.stanford.nlp.ling.CoreLabel)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:void lambda$fromProto$67(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.lang.String semgrexFromGraphHelper(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,java.util.Set,java.util.Set,boolean,boolean,java.util.Collection,java.util.Map,boolean,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.lang.String semgrexFromGraph(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Collection,java.util.Map,java.util.function.Function)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.lang.String semgrexFromGraphOrderedNodes(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Collection,java.util.Map,java.util.function.Function)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.lang.String semgrexFromGraphHelper(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,java.util.Set,java.util.Set,boolean,boolean,java.util.Collection,java.util.Map,boolean,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:void toCompactStringHelper(edu.stanford.nlp.ling.IndexedWord,java.lang.StringBuilder,java.util.Set,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:java.lang.String toCompactString(boolean)",
            "edu.stanford.nlp.semgraph.SemanticGraph:void toCompactStringHelper(edu.stanford.nlp.ling.IndexedWord,java.lang.StringBuilder,java.util.Set,boolean)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphFormatter:void formatSGNodeOnelineHelper(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.lang.StringBuilder,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphFormatter:java.lang.String formatSGNodeOneline(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.semgraph.SemanticGraphFormatter:void formatSGNodeOnelineHelper(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.lang.StringBuilder,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional segmentVerb(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Optional,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional segment(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Optional,boolean)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Set getLeafVertices()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ForwardEntailerSearchProblem:java.util.List searchImplementation()"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier trainSemiSupGE(edu.stanford.nlp.classify.GeneralDataset,java.util.List,java.util.List,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier trainSemiSupGE(edu.stanford.nlp.classify.GeneralDataset,java.util.List,double)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier trainSemiSupGE(edu.stanford.nlp.classify.GeneralDataset,java.util.List)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$Util$1$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:void train(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.MachineReading:void train(edu.stanford.nlp.pipeline.Annotation,int)"
        ]
    },
    "edu.stanford.nlp.hcoref.Rules:boolean antecedentIsMentionSpeaker(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Set)",
            "edu.stanford.nlp.hcoref.sieve.RFSieve:edu.stanford.nlp.ling.RVFDatum extractDatum(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,int,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.String)",
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)"
        ]
    },
    "edu.stanford.nlp.hcoref.Rules:boolean antecedentMatchesMentionSpeakerAnnotation(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.TimeFormatter:void parsePatternTo(edu.stanford.nlp.time.TimeFormatter$FormatterBuilder,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeFormatter:void access$100(edu.stanford.nlp.time.TimeFormatter$FormatterBuilder,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.fsm.DFSA:void printTrieDFSA(edu.stanford.nlp.fsm.DFSA)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.fsm.DFSA:void printTrieAsRules(edu.stanford.nlp.fsm.DFSA,java.io.Writer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(edu.stanford.nlp.trees.Tree,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.Collection,double)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void train(java.util.List,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void train(edu.stanford.nlp.trees.Tree,double)",
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void train(java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.NumberNormalizer:java.util.List findAndMergeNumbers(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.pipeline.Annotation fromProto(edu.stanford.nlp.pipeline.CoreNLPProtos$Document)",
            "edu.stanford.nlp.ie.NumberNormalizer:java.util.List findAndAnnotateNumericExpressions(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.ie.NumberNormalizer:java.util.List findAndAnnotateNumericExpressionsWithRanges(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.time.TimeExpressionExtractorImpl:java.util.List extractTimeExpressions(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.time.SUTime$Time,edu.stanford.nlp.time.SUTime$TimeIndex)"
        ]
    },
    "edu.stanford.nlp.ie.NumberNormalizer:java.util.List findAndAnnotateNumericExpressionsWithRanges(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.util.Pair readAndReturnTrainingExamples(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:boolean trainClassifier()",
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.classify.GeneralDataset readTrainingExamples(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:edu.stanford.nlp.classify.GeneralDataset createDataset(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:void train(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTextFile(java.lang.String,edu.stanford.nlp.parser.lexparser.Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromFile(java.lang.String,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier loadFromFilename(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFClassifierNoisyLabel:edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction getObjectiveFunction(int[][][][],int[][])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:double[] trainWeights(int[][][][],int[][],edu.stanford.nlp.optimization.Evaluator[],int,double[][][][])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern$OrPatternExpr:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr optimizeOr()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$OrPatternExpr:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr optimize()"
        ]
    },
    "edu.stanford.nlp.util.HashIndex:void <init>(edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:short tagProject(short)"
        ]
    },
    "edu.stanford.nlp.util.HashIndex:void <init>(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void <init>(edu.stanford.nlp.ie.crf.CRFClassifier)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.classify.Dataset getBiasedDataset(edu.stanford.nlp.objectbank.ObjectBank,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)"
        ]
    },
    "edu.stanford.nlp.util.DeltaIndex:boolean addAll(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.SUTime$TimeIndex:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractorImpl:java.util.List extractTimeExpressionCoreMaps(edu.stanford.nlp.util.CoreMap,java.lang.String)",
            "edu.stanford.nlp.time.TimeExpressionExtractorImpl:java.util.List extractTimeExpressionCoreMaps(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.time.TimeAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.classify.ColumnDataClassifier:void addFeatureValue(java.lang.String,edu.stanford.nlp.classify.ColumnDataClassifier$Flags,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.ling.RVFDatum makeRVFDatumFromStrings(java.lang.String[])",
            "edu.stanford.nlp.classify.ColumnDataClassifier:void makeDatum(java.lang.String,edu.stanford.nlp.classify.ColumnDataClassifier$Flags,java.lang.Object,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.classify.ColumnDataClassifier:void makeDatum(java.lang.String,edu.stanford.nlp.classify.ColumnDataClassifier$Flags,java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.ling.RVFDatum makeRVFDatum(java.lang.String[])",
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.ling.Datum makeDatum(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:void addGuess(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:double score(java.io.BufferedReader,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:double score(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:void addGuesses(java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassChunkEvalStats:void addGuess(java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassChunkEvalStats:void addGuess(java.lang.Object,java.lang.Object,boolean)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TTags:void read(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.ASBCunkDict:edu.stanford.nlp.tagger.maxent.ASBCunkDict getInstance()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.ASBCunkDict:java.lang.String getTag(java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.CtbPreDetector:java.lang.String extract(edu.stanford.nlp.tagger.maxent.History,edu.stanford.nlp.tagger.maxent.PairsHolder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:void <init>(java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap$SingletonHolder:void <clinit>()",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.CtbSufDetector:java.lang.String extract(edu.stanford.nlp.tagger.maxent.History,edu.stanford.nlp.tagger.maxent.PairsHolder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Iterator outgoingEdgeIterator(edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void stripAuxMark(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$GOVERNER$1:void advance()",
            "edu.stanford.nlp.semgraph.SemanticGraph:boolean hasChildren(edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.naturalli.Util:void stripPrepCases(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.Util:java.util.List cleanTree(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$GRANDPARENT:java.util.Iterator neighborIterator(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)"
        ]
    },
    "edu.stanford.nlp.naturalli.Util:boolean isTree(edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$3:void lambda$applyTo$4(edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$6:void lambda$applyTo$7(edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.ForwardEntailerSearchProblem:void lambda$searchImplementation$15(edu.stanford.nlp.semgraph.SemanticGraph,java.util.List,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void lambda$null$9(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void <init>(edu.stanford.nlp.semgraph.SemanticGraph,boolean,java.util.Optional,java.util.Optional)",
            "edu.stanford.nlp.naturalli.Util:void stripPrepCases(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.Util:java.util.List cleanTree(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$5:void lambda$applyTo$6(edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$4:void lambda$applyTo$5(edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.ForwardEntailerSearchProblem:java.util.List searchImplementation()"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Set getParentsWithReln(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.trees.GrammaticalRelation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.util.List parentPairs(edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$DEPENDENT$1:void advance()",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$DEPENDENT:boolean satisfies(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Set relns(edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$LIMITED_GRANDKID$1:void advance()",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$LIMITED_GRANDKID$1:void initialize()",
            "edu.stanford.nlp.hcoref.data.Mention:int getNegation(edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.patterns.dep.ApplyDepPatterns$2:edu.stanford.nlp.stats.Counter apply(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$GRANDKID:java.util.List getNeighborPairs(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$LIMITED_GRANDKID:boolean satisfyHelper(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,int,java.util.List)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void getFeatures(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,boolean,java.util.Collection,edu.stanford.nlp.trees.GrammaticalRelation)",
            "edu.stanford.nlp.dcoref.Mention:int getNegation(edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.hcoref.Preprocessor:boolean isSpeaker(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.dcoref.Document:boolean isSpeaker(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:boolean lambda$fromProto$66(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.naturalli.SentenceFragment:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Set allEdgesInSet(java.lang.Iterable,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.CollectionUtils:void addAll(java.util.Collection,java.lang.Iterable)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.CollectionUtils:java.util.Set toSet(java.lang.Iterable)",
            "edu.stanford.nlp.util.CollectionUtils:java.util.List toList(java.lang.Iterable)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:boolean hasParentWithReln(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.trees.GrammaticalRelation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Mention:int getReportEmbedding(edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.dcoref.Mention:int getReportEmbedding(edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.dcoref.Mention:int getNegation(edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.dcoref.Mention:int getModal(edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.hcoref.data.Mention:int getNegation(edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.hcoref.data.Mention:int getModal(edu.stanford.nlp.hcoref.data.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.ie.util.RelationTriple$WithTree:edu.stanford.nlp.ling.CoreLabel subjectHead()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.util.RelationTriple$WithTree:edu.stanford.nlp.ling.CoreLabel objectHead()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.List edgesWithReln(java.lang.Iterable,edu.stanford.nlp.trees.GrammaticalRelation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.List outgoingEdgesWithReln(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.trees.GrammaticalRelation)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.List incomingEdgesWithReln(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.trees.GrammaticalRelation)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:boolean hasChild(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.trees.GrammaticalRelation,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:boolean isNegatedVertex(edu.stanford.nlp.ling.IndexedWord)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.List getChildrenWithPrepC(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$8:edu.stanford.nlp.stats.Counter apply(edu.stanford.nlp.util.Triple)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$8:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.List getChildrenWithRelnPrefix(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Set getChildrenWithRelns(edu.stanford.nlp.ling.IndexedWord,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:void getSubTreeEdgesHelper(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Set getSubTreeEdges(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraphEdge)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:void getSubTreeEdgesHelper(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Set getChildrenWithReln(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.trees.GrammaticalRelation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Mention:java.lang.String getQuantification(edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.hcoref.data.Mention:java.lang.String getQuantification(edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:boolean hasBeAux(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.semgraph.SemanticGraph:boolean matchPatternToVertex(java.lang.String,edu.stanford.nlp.ling.IndexedWord,boolean)",
            "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:void extractPronounForHeadword(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.semgraph.SemanticGraph:boolean isInConditionalContext(edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:void extractMentionForHeadword(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:boolean hasTo(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)"
        ]
    },
    "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void splitToChildOfEdge(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraphEdge)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void simpleClause(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraphEdge)",
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional segment(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Optional,boolean)"
        ]
    },
    "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional getValidChunk(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Set,java.util.Optional,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.List extract(edu.stanford.nlp.semgraph.SemanticGraph,java.util.List)",
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional segmentVerb(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Optional,boolean)",
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional getValidChunk(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Set,java.util.Optional)"
        ]
    },
    "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional segmentACL(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Optional,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional segment(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Optional,boolean)"
        ]
    },
    "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$5:boolean prerequisitesMet(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraphEdge)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:edu.stanford.nlp.util.Pair yieldSpan(edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.SentenceFragment:java.lang.String toString()"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:edu.stanford.nlp.ling.IndexedWord getChildWithReln(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.trees.GrammaticalRelation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:edu.stanford.nlp.util.IntPair getNPSpanOld(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,java.util.List)",
            "edu.stanford.nlp.hcoref.data.Mention:int getReportEmbedding(edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.dcoref.Mention:int getReportEmbedding(edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:edu.stanford.nlp.util.IntPair getNPSpan(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,java.util.List)",
            "edu.stanford.nlp.dcoref.Mention:int getModal(edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.hcoref.data.Mention:boolean isListLikeByDependency()",
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:java.lang.String wasPerson(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.hcoref.data.Mention:int getModal(edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:void extractMentionForHeadword(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.naturalli.NaturalLogicAnnotator:edu.stanford.nlp.util.Pair getGeneralizedSubtreeSpan(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.NaturalLogicAnnotator:edu.stanford.nlp.naturalli.OperatorSpec computeScope(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.naturalli.Operator,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.util.Pair,edu.stanford.nlp.ling.IndexedWord,boolean,edu.stanford.nlp.ling.IndexedWord,int)",
            "edu.stanford.nlp.naturalli.NaturalLogicAnnotator:edu.stanford.nlp.util.Pair getProperNounSubtreeSpan(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.naturalli.NaturalLogicAnnotator:edu.stanford.nlp.util.Pair getModifierSubtreeSpan(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.naturalli.NaturalLogicAnnotator:edu.stanford.nlp.util.Pair getSubtreeSpan(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.util.List childPairs(edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$GRANDPARENT:java.util.List getNeighborPairs(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.dcoref.Mention:boolean isCoordinated()",
            "edu.stanford.nlp.hcoref.data.Mention:java.util.ArrayList getPostmodifiers()",
            "edu.stanford.nlp.semgraph.SemanticGraph:boolean matchPatternToVertex(java.lang.String,edu.stanford.nlp.ling.IndexedWord,boolean)",
            "edu.stanford.nlp.hcoref.data.Mention:java.util.ArrayList getPremodifiers()",
            "edu.stanford.nlp.hcoref.data.Mention:boolean isCoordinated()",
            "edu.stanford.nlp.dcoref.Mention:java.util.ArrayList getPostmodifiers()",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$LIMITED_GRANDPARENT$1:void advance()",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Set childRelns(edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.dcoref.Mention:java.util.ArrayList getPremodifiers()",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$GOVERNER:boolean satisfies(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.semgraph.SemanticGraph:edu.stanford.nlp.trees.GrammaticalRelation reln(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.hcoref.Preprocessor:boolean findSubject(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,int,int)",
            "edu.stanford.nlp.dcoref.Mention:int getModifiers(edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$LIMITED_GRANDPARENT:boolean satisfyHelper(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,int,java.util.List)",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$LIMITED_GRANDPARENT$1:void initialize()",
            "edu.stanford.nlp.hcoref.data.Mention:int getModifiers(edu.stanford.nlp.hcoref.data.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$4:boolean prerequisitesMet(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraphEdge)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:boolean hasChildWithReln(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.trees.GrammaticalRelation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:java.lang.String pronounCase(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:boolean hasAux(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void processComplex2WP(edu.stanford.nlp.semgraph.SemanticGraph,java.util.HashMap)",
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:java.util.HashMap getGraphFeatures(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.semgraph.SemanticGraph:boolean isNegatedVertex(edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:boolean hasTo(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)"
        ]
    },
    "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.List extract(edu.stanford.nlp.semgraph.SemanticGraph,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.OpenIE:void annotateSentence(edu.stanford.nlp.util.CoreMap,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.List getChildrenWithRelnPrefix(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional segment(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Optional,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.OpenIE:java.util.Optional relationInFragment(edu.stanford.nlp.naturalli.SentenceFragment,edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.naturalli.OpenIE:java.util.Optional relationInFragment(edu.stanford.nlp.naturalli.SentenceFragment)",
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional segment(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Optional)"
        ]
    },
    "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$6:boolean prerequisitesMet(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraphEdge)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:void topologicalSortHelper(edu.stanford.nlp.ling.IndexedWord,java.util.Set,java.util.Set,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.List topologicalSort()",
            "edu.stanford.nlp.semgraph.SemanticGraph:void topologicalSortHelper(edu.stanford.nlp.ling.IndexedWord,java.util.Set,java.util.Set,java.util.List)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Iterator incomingEdgeIterator(edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.Util:boolean isTree(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void addSubtree(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.lang.String,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Collection)",
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.semgraph.SemanticGraphEdge getDependencyParent(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.naturalli.Util:boolean isCyclic(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void simpleClause(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraphEdge)",
            "edu.stanford.nlp.naturalli.Util:java.util.List cleanTree(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$GRANDKID:java.util.Iterator neighborIterator(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.naturalli.ForwardEntailerSearchProblem:java.util.List searchImplementation()",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void collapseReferent(edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.patterns.surface.SurfacePatternFactory:java.util.Map getPatternsAroundTokens(edu.stanford.nlp.patterns.DataInstance,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.PatternFactory:java.util.Map getPatternsAroundTokens(edu.stanford.nlp.patterns.PatternFactory$PatternType,edu.stanford.nlp.patterns.DataInstance,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.patterns.Pattern:java.util.Set getContext(edu.stanford.nlp.patterns.PatternFactory$PatternType,edu.stanford.nlp.patterns.DataInstance,int,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void labelWords(java.lang.String,java.util.Map,java.util.Collection,java.lang.String,edu.stanford.nlp.util.CollectionValuedMap)"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void labelWords(java.lang.String,java.util.Map,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Distribution:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object get(java.lang.Object)",
            "edu.stanford.nlp.util.Pair:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayUtils:java.lang.Boolean lambda$getSubListIndex$278(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.ArrayMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.Triple:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayCoreMap:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap$Entry:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.fsm.TransducerGraph$Arc:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.lang.Boolean lambda$labelWords$130(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.util.ArrayMap:java.lang.Object remove(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.trees.Tree:java.util.List spliceOutHelper(java.util.function.Predicate,edu.stanford.nlp.trees.TreeFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Tree:edu.stanford.nlp.trees.Tree spliceOut(java.util.function.Predicate,edu.stanford.nlp.trees.TreeFactory)",
            "edu.stanford.nlp.trees.Tree:java.util.List spliceOutHelper(java.util.function.Predicate,edu.stanford.nlp.trees.TreeFactory)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonParser:edu.stanford.nlp.trees.tregex.tsurgeon.AuxiliaryTree TreeRoot(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonParser:edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern Operation()",
            "edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonParser:java.util.List TreeList(boolean)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.HoldTreeNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.tsurgeon.ExciseNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.MoveNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.RelabelNode$RelabelMatcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToFootNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.ReplaceNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.PruneNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.InsertNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPatternRoot$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.CoindexNodes$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.IfExistsNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.CreateSubtreeNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToHeadNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.DeleteNode$Matcher:edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.ling.Datum makeDatumFromStrings(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.ling.Datum makeDatumFromLine(java.lang.String)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.util.Pair readDataset(java.lang.String,boolean)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter L2NormalizeInPlace(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.stats.ClassicCounter getWeights(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.util.Pair readModel(java.io.File,boolean)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.ClassicCounter loadCounter(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.IntCounter loadIntCounter(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.LinearClassifier:void <init>(double[],edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.BasicEntityExtractor:void makeEntityMention(edu.stanford.nlp.util.CoreMap,int,int,java.lang.String,java.util.List,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.BasicEntityExtractor:edu.stanford.nlp.util.CoreMap extractEntities(edu.stanford.nlp.util.CoreMap,int)"
        ]
    },
    "edu.stanford.nlp.stats.Distribution$DynamicDistribution:void addToKeySet(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution dynamicCounterWithDirichletPrior(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Distribution,double)",
            "edu.stanford.nlp.stats.Distribution$DynamicDistribution:void addToKeySet(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.sequences.KBestSequenceFinder:int[] bestSequence(edu.stanford.nlp.sequences.SequenceModel)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.LogisticClassifier:edu.stanford.nlp.stats.Counter scoresOf(edu.stanford.nlp.ling.RVFDatum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:void testExample(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset,java.util.List,edu.stanford.nlp.stats.Counter,int)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter logProbabilityOf(edu.stanford.nlp.ling.RVFDatum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.SVMLightClassifier:edu.stanford.nlp.stats.Counter logProbabilityOf(edu.stanford.nlp.ling.Datum)",
            "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter probabilityOf(edu.stanford.nlp.ling.RVFDatum)",
            "edu.stanford.nlp.classify.SVMLightClassifier:edu.stanford.nlp.stats.Counter logProbabilityOf(edu.stanford.nlp.ling.RVFDatum)"
        ]
    },
    "edu.stanford.nlp.classify.SVMLightClassifier:edu.stanford.nlp.stats.Counter logProbabilityOf(edu.stanford.nlp.ling.RVFDatum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.LinearClassifier:java.lang.Object classOf(edu.stanford.nlp.ling.RVFDatum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:void testExample(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset,java.util.List,edu.stanford.nlp.stats.Counter,int)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter logProbabilityOf(int[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifier:edu.stanford.nlp.stats.Counter probabilityOf(int[])"
        ]
    },
    "edu.stanford.nlp.patterns.surface.LearnImportantFeatures:int sample(java.util.Map,java.util.Random,java.util.Random,double,double,int,java.util.List,edu.stanford.nlp.classify.RVFDataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.surface.LearnImportantFeatures:edu.stanford.nlp.stats.Counter getTopFeatures(java.util.Iterator,double,double,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.classify.SVMLightClassifierFactory:java.lang.Double lambda$heldOutSetC$12(edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.stats.Scorer,edu.stanford.nlp.classify.GeneralDataset,java.lang.Double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.GoldenSectionLineSearch:double minimize(java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.classify.SVMLightClassifierFactory:java.lang.Double lambda$crossValidateSetC$10(edu.stanford.nlp.stats.Scorer,edu.stanford.nlp.util.Triple)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.CrossValidator:double computeAverage(java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.classify.SVMLightClassifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.classify.Classifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:void trainMulticlass(edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:void trainSVM(edu.stanford.nlp.classify.Dataset)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.PhraseTable:void readPhrasesWithTagScores(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.PhraseTable:void readPhrasesWithTagScores(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters:double spearmanRankCorrelation(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.ColumnDataClassifier:void <init>(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:void main(java.lang.String[])",
            "edu.stanford.nlp.pipeline.ColumnDataClassifierAnnotator:void <init>(java.util.Properties)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:void <init>(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:void normalize(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.stats.Counters:void divideInPlace(edu.stanford.nlp.stats.TwoDimensionalCounter,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:void normalize(edu.stanford.nlp.stats.TwoDimensionalCounter)"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void <init>(java.util.Properties,java.util.Map,java.util.Set,boolean,java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void <init>(java.util.Properties,java.util.Map,java.util.Set,boolean,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void <init>(java.util.Properties,java.util.Map,java.util.Map,boolean,java.util.Map,java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void <init>(java.util.Properties,java.util.Map,java.util.Map,boolean,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void <init>(java.util.Properties,java.util.Map,java.util.Set,boolean,java.lang.Class,java.lang.String,java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void <init>(java.util.Properties,java.util.Map,java.util.Set,boolean,java.lang.String,java.util.Map,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void <init>(java.util.Properties,java.util.Map,java.util.Map,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass run(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.scoref.Clusterer:void doTraining(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.StatisticalCorefTrainer:void doTraining(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.neural.Embedding:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.CorefSystem:java.util.Map coref(edu.stanford.nlp.hcoref.data.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.CorefAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.hcoref.CorefSystem:java.util.Map coref(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.hcoref.CorefSystem$1:java.lang.StringBuilder[] process(edu.stanford.nlp.util.Pair)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.CorefSystem$1:java.lang.Object process(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.trees.CollinsHeadFinder:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.TregexPatternCompiler:void <clinit>()",
            "edu.stanford.nlp.trees.tregex.TregexPattern:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.TreeFunctions:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.CollocationFinder:void <init>(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.WordNetConnection)",
            "edu.stanford.nlp.trees.tregex.gui.Preferences:edu.stanford.nlp.trees.HeadFinder lookupHeadFinder(java.lang.String)",
            "edu.stanford.nlp.trees.CollinsHeadFinder:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Dictionaries:void <init>(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.StatisticalCorefTrainer:void doTraining(java.util.Properties)",
            "edu.stanford.nlp.pipeline.MentionAnnotator:void <init>(java.util.Properties)",
            "edu.stanford.nlp.scoref.StatisticalCorefSystem:void <init>(java.util.Properties)",
            "edu.stanford.nlp.hcoref.CorefSystem:void <init>(java.util.Properties)",
            "edu.stanford.nlp.hcoref.data.Dictionaries:void <init>()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams:edu.stanford.nlp.trees.HeadFinder headFinder()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.PostSplitter:void <init>(edu.stanford.nlp.parser.lexparser.TreebankLangParserParams,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.parser.lexparser.TestOptions:edu.stanford.nlp.trees.TreePrint treePrint(edu.stanford.nlp.parser.lexparser.TreebankLangParserParams)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void <init>(edu.stanford.nlp.parser.lexparser.TreebankLangParserParams,boolean,boolean,boolean,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter getSegmenterDataFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void readModelAndInit(java.util.Properties,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void <init>(java.lang.String,java.util.Properties,boolean)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequenceMatchAction AnnotateAction(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequenceMatchAction Action(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.util.XMLUtils:java.lang.String stripTags(java.io.Reader,java.util.List,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.objectbank.XMLBeginEndIterator:java.lang.String getNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.objectbank.XMLBeginEndIterator:void setNext()"
        ]
    },
    "edu.stanford.nlp.util.XMLUtils:java.lang.String escapeTextAroundXMLTags(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.PropertiesUtils:void printProperties(java.lang.String,java.util.Properties,java.io.PrintStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.PropertiesUtils:void printProperties(java.lang.String,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams:int setOptionFlag(java.lang.String[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams:int setOptionFlag(java.lang.String[],int)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SpanishTreebankParserParams:int setOptionFlag(java.lang.String[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sentiment.SentimentCostAndGradient$ModelDerivatives:void <init>(edu.stanford.nlp.sentiment.SentimentModel)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient:edu.stanford.nlp.sentiment.SentimentCostAndGradient$ModelDerivatives scoreDerivatives(java.util.List)",
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient:void calculate(double[])"
        ]
    },
    "edu.stanford.nlp.dcoref.Document:void addIncompatible(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.sievepasses.NameMatch:boolean checkEntityMatch(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Dictionaries,java.util.Set)",
            "edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries,java.util.Set,edu.stanford.nlp.dcoref.Semantics)"
        ]
    },
    "edu.stanford.nlp.util.TwoDimensionalSet:boolean addAllKeys(edu.stanford.nlp.util.TwoDimensionalMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.Document:void mergeIncompatibles(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void coreference(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve)"
        ]
    },
    "edu.stanford.nlp.parser.dvparser.DVModel:void searchRulesForBatch(edu.stanford.nlp.util.TwoDimensionalSet,java.util.Set,java.util.Set,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.DVModel:void filterRulesForBatch(java.util.Collection)",
            "edu.stanford.nlp.parser.dvparser.DVModel:void filterRulesForBatch(java.util.Map)",
            "edu.stanford.nlp.parser.dvparser.DVModel:void setRulesForTrainingSet(java.util.List,java.util.Map)",
            "edu.stanford.nlp.parser.dvparser.DVModel:void searchRulesForBatch(edu.stanford.nlp.util.TwoDimensionalSet,java.util.Set,java.util.Set,edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.util.TwoDimensionalSet:boolean addAll(edu.stanford.nlp.util.TwoDimensionalSet)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.dvparser.FilterConfusingRules:void <init>(edu.stanford.nlp.parser.lexparser.LexicalizedParser)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.CacheParseHypotheses:void <init>(edu.stanford.nlp.parser.lexparser.LexicalizedParser)"
        ]
    },
    "edu.stanford.nlp.pipeline.MentionAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.simple.Document:java.util.Map coref(java.util.Properties)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams:edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:void readPredictedEntityBoundaries(java.io.BufferedReader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.NegraPennTreebankParserParams:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.Language:void <clinit>()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.PreferencesPanel$1:void actionPerformed(java.awt.event.ActionEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.gui.Preferences:edu.stanford.nlp.trees.HeadFinder getHeadFinder()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.PreferencesPanel:void <init>(edu.stanford.nlp.trees.tregex.gui.TregexGUI)",
            "edu.stanford.nlp.trees.tregex.gui.TregexGUI:void loadPreferences()"
        ]
    },
    "edu.stanford.nlp.international.arabic.ArabicMorphoFeatureSpecification:void processInflectionalFeatures(edu.stanford.nlp.international.morph.MorphoFeatures,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.arabic.ArabicMorphoFeatureSpecification:edu.stanford.nlp.international.morph.MorphoFeatures strToFeatures(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.international.french.FrenchTreeNormalizer:void replacePOSTag(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.international.morph.MorphoFeatureSpecification)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.french.FrenchTreeNormalizer:java.lang.String normalizePreterminal(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.util.logging.RedwoodConfiguration:edu.stanford.nlp.util.logging.RedwoodConfiguration parse(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.RedwoodConfiguration:void apply(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.sentiment.AbstractEvaluate:void <init>(edu.stanford.nlp.sentiment.RNNOptions)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.Evaluate:void <init>(edu.stanford.nlp.sentiment.SentimentModel)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.SemgrexParser:edu.stanford.nlp.semgraph.semgrex.SemgrexPattern ModNode(edu.stanford.nlp.semgraph.semgrex.GraphRelation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.SemgrexParser:edu.stanford.nlp.semgraph.semgrex.SemgrexPattern SubNode(edu.stanford.nlp.semgraph.semgrex.GraphRelation)",
            "edu.stanford.nlp.semgraph.semgrex.SemgrexParser:edu.stanford.nlp.semgraph.semgrex.SemgrexPattern NodeConj(edu.stanford.nlp.semgraph.semgrex.GraphRelation)",
            "edu.stanford.nlp.semgraph.semgrex.SemgrexParser:edu.stanford.nlp.semgraph.semgrex.SemgrexPattern Relation()"
        ]
    },
    "edu.stanford.nlp.dcoref.Dictionaries:void <init>(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void <init>(java.util.Properties)",
            "edu.stanford.nlp.dcoref.Dictionaries:void <init>()"
        ]
    },
    "edu.stanford.nlp.neural.Embedding:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.Tree:java.util.Set localTrees()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.dcoref.MentionExtractor:void addFoundPair(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.MentionExtractor:void findTreePattern(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexPattern,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.hcoref.Rules:boolean entityNumberInLaterMention(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Set)",
            "edu.stanford.nlp.hcoref.sieve.RFSieve:edu.stanford.nlp.ling.RVFDatum extractDatum(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,int,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.String)",
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)"
        ]
    },
    "edu.stanford.nlp.util.CollectionUtils:java.util.Set unionAsSet(java.util.Collection,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter learnNewPhrasesPrivate(java.lang.String,edu.stanford.nlp.patterns.surface.PatternsForEachToken,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.util.Set,edu.stanford.nlp.util.CollectionValuedMap,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,java.lang.String,java.util.Set,boolean)"
        ]
    },
    "edu.stanford.nlp.dcoref.Dictionaries:void setPronouns()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Dictionaries:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String[],java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.hcoref.md.RuleBasedCorefMentionFinder:java.util.List filterPredictedMentions(java.util.List,edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.data.Dictionaries:void setPronouns()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Dictionaries:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String[],java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:void addMention(int,int,edu.stanford.nlp.ling.IndexedWord,java.util.List,java.util.Set,java.util.Set,java.util.List,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:void extractPronounForHeadword(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:void extractMentionForHeadword(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Dictionaries:void loadChineseGenderNumberAnimacy(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Dictionaries:void <init>(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Mention:void addApposition(edu.stanford.nlp.hcoref.data.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.Tree:java.util.Collection subTrees(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Tree:java.util.Set subTrees()",
            "edu.stanford.nlp.trees.Tree:java.util.List subTreeList()",
            "edu.stanford.nlp.trees.Tree:java.util.Collection subTrees(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void countOriginalStates(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void countOriginalStates()",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void countOriginalStates(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.dcoref.Mention:void addPredicateNominatives(edu.stanford.nlp.dcoref.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.Rules:boolean entityHaveIncompatibleModifier(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Rules:boolean entityHaveIncompatibleModifier(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster)"
        ]
    },
    "edu.stanford.nlp.util.Sets:java.util.Set cross(java.util.Set,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.TTags:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void init(edu.stanford.nlp.tagger.maxent.TaggerConfig)"
        ]
    },
    "edu.stanford.nlp.hcoref.md.RuleBasedCorefMentionFinder:void removeSpuriousMentionsEn(edu.stanford.nlp.pipeline.Annotation,java.util.List,edu.stanford.nlp.hcoref.data.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:void removeSpuriousMentions(edu.stanford.nlp.pipeline.Annotation,java.util.List,edu.stanford.nlp.hcoref.data.Dictionaries,boolean,java.util.Locale)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph$SemanticGraphParsingTask:edu.stanford.nlp.ling.IndexedWord makeVertex(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph$SemanticGraphParsingTask:void readDep(edu.stanford.nlp.ling.IndexedWord,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Dictionaries:void getWordsFromFile(java.lang.String,java.util.Set,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Dictionaries:void loadAnimacyLists(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.hcoref.data.Dictionaries:void loadGenderNumber(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.hcoref.data.Dictionaries:void loadStatesLists(java.lang.String)",
            "edu.stanford.nlp.hcoref.data.Dictionaries:void loadNumberLists(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.hcoref.data.Dictionaries:void loadGenderLists(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.Tree:java.util.Set mapDependencies(java.util.function.Predicate,edu.stanford.nlp.trees.HeadFinder,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TreePrint:java.util.List getSortedDeps(edu.stanford.nlp.trees.Tree,java.util.function.Predicate)"
        ]
    },
    "edu.stanford.nlp.process.WordShapeClassifier:java.lang.String wordShapeChris4Long(java.lang.String,boolean,int,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.WordShapeClassifier:java.lang.String wordShapeChris4(java.lang.String,boolean,java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:java.util.Set findRootStates(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:void train(java.util.List,edu.stanford.nlp.util.Pair,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.sequences.FeatureFactory:void addAllInterningAndSuffixing(java.util.Collection,java.util.Collection,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.wordseg.Gale2007ChineseSegmenterFeatureFactory:java.util.Collection getCliqueFeatures(edu.stanford.nlp.util.PaddedList,int,edu.stanford.nlp.sequences.Clique)",
            "edu.stanford.nlp.ie.NERFeatureFactory:java.util.Collection getCliqueFeatures(edu.stanford.nlp.util.PaddedList,int,edu.stanford.nlp.sequences.Clique)",
            "edu.stanford.nlp.wordseg.ChineseSegmenterFeatureFactory:java.util.Collection getCliqueFeatures(edu.stanford.nlp.util.PaddedList,int,edu.stanford.nlp.sequences.Clique)",
            "edu.stanford.nlp.international.arabic.process.ArabicSegmenterFeatureFactory:java.util.Collection getCliqueFeatures(edu.stanford.nlp.util.PaddedList,int,edu.stanford.nlp.sequences.Clique)"
        ]
    },
    "edu.stanford.nlp.dcoref.sievepasses.NameMatch:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.sievepasses.NameMatchPrecise:void <init>()"
        ]
    },
    "edu.stanford.nlp.wordseg.affDict:java.util.Set readDict(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.wordseg.affDict:void <init>(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:java.util.Collection getRoots(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.GrammaticalStructure:boolean isConnected(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.dcoref.Mention:void addApposition(edu.stanford.nlp.dcoref.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:void findKnownStates(edu.stanford.nlp.trees.Tree,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:java.util.Set findKnownStates(java.util.List)",
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:void findKnownStates(edu.stanford.nlp.trees.Tree,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.dcoref.Mention:void addBelongsToList(edu.stanford.nlp.dcoref.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.wordseg.CorpusDictionary:java.util.Set readDict(java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.wordseg.CorpusDictionary:void <init>(java.lang.String,boolean)"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:java.util.Set normalize(java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:void readCEDict(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:void removeSpuriousMentions(edu.stanford.nlp.util.CoreMap,java.util.List,edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:java.util.List extractPredictedMentions(edu.stanford.nlp.pipeline.Annotation,int,edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:java.util.List filterPredictedMentions(java.util.List,edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.dcoref.Dictionaries:void loadCountriesLists(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Dictionaries:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String[],java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.TregexParser:edu.stanford.nlp.trees.tregex.DescriptionPattern Description(edu.stanford.nlp.trees.tregex.Relation,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.TregexParser:edu.stanford.nlp.trees.tregex.DescriptionPattern ModDescription(edu.stanford.nlp.trees.tregex.Relation)"
        ]
    },
    "edu.stanford.nlp.time.JodaTimeUtils:java.util.Set getSupportedDurationFields(org.joda.time.Partial)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.JodaTimeUtils:org.joda.time.Period getUnsupportedDurationPeriod(org.joda.time.Partial,org.joda.time.Period)"
        ]
    },
    "edu.stanford.nlp.hcoref.md.HybridCorefMentionFinder:void removeSpuriousMentionsEn(edu.stanford.nlp.pipeline.Annotation,java.util.List,edu.stanford.nlp.hcoref.data.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:void removeSpuriousMentions(edu.stanford.nlp.pipeline.Annotation,java.util.List,edu.stanford.nlp.hcoref.data.Dictionaries,boolean,java.util.Locale)"
        ]
    },
    "edu.stanford.nlp.fsm.TransducerGraph:void setEndNode(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.GrammarCompactor:edu.stanford.nlp.fsm.TransducerGraph getGraphFromMap(java.util.Map,java.lang.String)",
            "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:edu.stanford.nlp.fsm.TransducerGraph buildMinimizedFA()",
            "edu.stanford.nlp.parser.lexparser.GrammarCompactor:boolean addOneUnaryRule(edu.stanford.nlp.parser.lexparser.UnaryRule,java.util.Map)",
            "edu.stanford.nlp.fsm.TransducerGraph:void addOnePathToGraph(java.util.List,double,int,edu.stanford.nlp.fsm.TransducerGraph)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Mention:java.util.List getContextHelper(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Mention:java.util.List getContext()",
            "edu.stanford.nlp.hcoref.data.Mention:java.util.List getPremodifierContext()"
        ]
    },
    "edu.stanford.nlp.hcoref.md.HybridCorefMentionFinder:void extractNamedEntityMentions(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.md.HybridCorefMentionFinder:java.util.List findMentions(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)",
            "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:java.util.List findMentions(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.ie.regexp.RegexNERSequenceClassifier:void <init>(java.lang.String,boolean,boolean,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.RegexNERAnnotator:void <init>(java.lang.String,java.util.Properties)",
            "edu.stanford.nlp.pipeline.RegexNERAnnotator:void <init>(java.lang.String,boolean,boolean,java.lang.String,boolean)",
            "edu.stanford.nlp.ie.regexp.RegexNERSequenceClassifier:void <init>(java.lang.String,boolean,boolean)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:void addRoot(edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void process3WP(edu.stanford.nlp.semgraph.SemanticGraph,java.util.HashMap)",
            "edu.stanford.nlp.naturalli.OpenIE:java.util.List entailmentsFromClause(edu.stanford.nlp.naturalli.SentenceFragment)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void processComplex2WP(edu.stanford.nlp.semgraph.SemanticGraph,java.util.HashMap)",
            "edu.stanford.nlp.pipeline.AnnotationSerializer$IntermediateSemanticGraph:edu.stanford.nlp.semgraph.SemanticGraph convertIntermediateGraph(java.util.List)"
        ]
    },
    "edu.stanford.nlp.util.Sets:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.CollectionValuedMap:void add(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$DocumentIterator:void annotateDocument(edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$CoNLLDocument)",
            "edu.stanford.nlp.patterns.surface.LearnImportantFeatures:void setUp()",
            "edu.stanford.nlp.pipeline.CleanXmlAnnotator:void addAnnotationPatterns(edu.stanford.nlp.util.CollectionValuedMap,java.lang.String,boolean)",
            "edu.stanford.nlp.time.JollyDayHolidays:edu.stanford.nlp.util.CollectionValuedMap getAllHolidaysCVMap(java.util.Set)",
            "edu.stanford.nlp.patterns.ScorePhrases:java.util.Map getSentences(java.util.Map)",
            "edu.stanford.nlp.util.TwoDimensionalCollectionValuedMap:void add(java.lang.Object,java.lang.Object,java.util.Collection)",
            "edu.stanford.nlp.trees.MemoryTreebank:void readSRLFile(java.lang.String)",
            "edu.stanford.nlp.patterns.surface.ApplyPatterns:edu.stanford.nlp.util.Triple call()",
            "edu.stanford.nlp.util.CollectionValuedMap:void <init>(edu.stanford.nlp.util.CollectionValuedMap)",
            "edu.stanford.nlp.patterns.surface.LearnImportantFeatures:edu.stanford.nlp.ling.RVFDatum getDatum(edu.stanford.nlp.ling.CoreLabel[],int)",
            "edu.stanford.nlp.time.SUTimeMain:java.util.List createTimexNodesPresorted(java.lang.String,java.lang.Integer,java.util.List)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void labelWords(java.lang.String,java.util.Map,java.util.Collection,java.lang.String,edu.stanford.nlp.util.CollectionValuedMap)",
            "edu.stanford.nlp.patterns.dep.ApplyDepPatterns:edu.stanford.nlp.util.Pair call()",
            "edu.stanford.nlp.util.CollectionValuedMap:void addAll(java.util.Map)",
            "edu.stanford.nlp.dcoref.Document:void findTwinMentionsStrict()",
            "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$DocumentIterator:void annotateDocument(edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$Document)",
            "edu.stanford.nlp.hcoref.Preprocessor:void findTwinMentionsStrict(edu.stanford.nlp.hcoref.data.Document)",
            "edu.stanford.nlp.time.TimeFormatter$TimeZoneComponent:void updateTimeZoneNames(java.util.Locale)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void writeMatchedTokensAndSents(java.lang.String,java.util.Map,java.lang.String,edu.stanford.nlp.util.CollectionValuedMap)",
            "edu.stanford.nlp.util.TwoDimensionalCollectionValuedMap:void add(java.lang.Object,java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.ling.tokensregex.types.ValueFunctions:void <clinit>()",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass$LabelWithSeedWords:edu.stanford.nlp.util.Pair call()",
            "edu.stanford.nlp.util.CollectionValuedMap:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.dcoref.Mention:void addListMember(edu.stanford.nlp.dcoref.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.NERFeatureFactory:java.util.Collection occurrencePatterns(edu.stanford.nlp.util.PaddedList,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.NERFeatureFactory:java.util.Collection featuresC(edu.stanford.nlp.util.PaddedList,int)"
        ]
    },
    "edu.stanford.nlp.classify.Dataset:edu.stanford.nlp.classify.Dataset getRandomSubDataset(double,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.Tree:java.util.Collection labels()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.Tree:java.util.Set mapDependencies(java.util.function.Predicate,edu.stanford.nlp.trees.HeadFinder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TreePrint:void printTreeInternal(edu.stanford.nlp.trees.Tree,java.io.PrintWriter,boolean)",
            "edu.stanford.nlp.trees.Tree:java.util.Set mapDependencies(java.util.function.Predicate,edu.stanford.nlp.trees.HeadFinder,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.pipeline.DeterministicCorefAnnotator:void addObsoleteCoreferenceAnnotations(edu.stanford.nlp.pipeline.Annotation,java.util.List,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.DeterministicCorefAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Set childRelns(edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Mention:int getCoordination()",
            "edu.stanford.nlp.hcoref.data.Mention:int getCoordination()"
        ]
    },
    "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:java.util.Set tagSet()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:java.util.Set tagSet()"
        ]
    },
    "edu.stanford.nlp.pipeline.TokensRegexNERAnnotator:void <init>(java.lang.String,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.TokensRegexNERAnnotator:void <init>(java.lang.String,boolean,java.lang.String)",
            "edu.stanford.nlp.pipeline.AnnotatorImplementations:edu.stanford.nlp.pipeline.Annotator tokensRegexNER(java.util.Properties,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.classify.Classifier makeClassifierAdaptL1(edu.stanford.nlp.classify.GeneralDataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.classify.Classifier makeClassifier(edu.stanford.nlp.classify.GeneralDataset)"
        ]
    },
    "edu.stanford.nlp.fsm.DFSAState:void exploreStates(java.util.List,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.DFSAState:java.util.Set statesReachable()"
        ]
    },
    "edu.stanford.nlp.classify.Dataset:void printFullFeatureMatrix(java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.Rules:boolean entityHaveIncompatibleModifier(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.Rules:boolean entityHaveIncompatibleModifier(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster)",
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)"
        ]
    },
    "edu.stanford.nlp.dcoref.Rules:boolean entityHaveExtraProperNoun(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.regexp.RegexNERSequenceClassifier:void <init>(java.io.BufferedReader,boolean,boolean,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.Dictionaries:void getWordsFromFile(java.lang.String,java.util.Set,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Dictionaries:void loadStatesLists(java.lang.String)",
            "edu.stanford.nlp.dcoref.Dictionaries:void loadAnimacyLists(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.dcoref.Dictionaries:void loadGenderNumber(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.dcoref.Dictionaries:void loadNumberLists(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.dcoref.Dictionaries:void loadGenderLists(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:edu.stanford.nlp.semgraph.SemanticGraphUtils$EdgeDiffResult diffEdges(java.util.Collection,java.util.Collection,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.ISemanticGraphEdgeEql)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.TTags:java.util.Set getOpenTags()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TestSentence:java.lang.String[] stringTagsAt(int)",
            "edu.stanford.nlp.tagger.maxent.TTags:java.lang.String toString()"
        ]
    },
    "edu.stanford.nlp.util.Sets:java.util.Set symmetricDiff(java.util.Set,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.process.DocumentPreprocessor$PlainTextIterator:void <init>(edu.stanford.nlp.process.DocumentPreprocessor)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.DocumentPreprocessor$XMLIterator:void primeNext()",
            "edu.stanford.nlp.process.DocumentPreprocessor:java.util.Iterator iterator()"
        ]
    },
    "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:void removeSpuriousMentionsEn(edu.stanford.nlp.pipeline.Annotation,java.util.List,edu.stanford.nlp.hcoref.data.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:void removeSpuriousMentions(edu.stanford.nlp.pipeline.Annotation,java.util.List,edu.stanford.nlp.hcoref.data.Dictionaries,boolean,java.util.Locale)"
        ]
    },
    "edu.stanford.nlp.util.IdentityHashSet:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFNonLinearLogConditionalObjectiveFunction:java.util.Set getRegularizerParamRange(double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.QNMinimizer:double[] pseudoGradientOWL(double[],double[],edu.stanford.nlp.optimization.Function)",
            "edu.stanford.nlp.optimization.QNMinimizer:void constrainSearchDir(double[],double[],double[],edu.stanford.nlp.optimization.Function)",
            "edu.stanford.nlp.optimization.SGDWithAdaGradAndFOBOS:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[],int)",
            "edu.stanford.nlp.optimization.QNMinimizer:double[] projectOWL(double[],double[],edu.stanford.nlp.optimization.Function)",
            "edu.stanford.nlp.optimization.QNMinimizer:double l1NormOWL(double[],edu.stanford.nlp.optimization.Function)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:java.util.Set retainKeys(edu.stanford.nlp.stats.Counter,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.surface.ScorePatternsF1:edu.stanford.nlp.stats.Counter score()"
        ]
    },
    "edu.stanford.nlp.hcoref.md.RuleBasedCorefMentionFinder:void extractNamedEntityMentions(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.md.RuleBasedCorefMentionFinder:java.util.List findMentions(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.hcoref.Rules:boolean entitySameProperHeadLastWord(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.Rules:boolean entitySameProperHeadLastWord(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)",
            "edu.stanford.nlp.hcoref.sieve.RFSieve:edu.stanford.nlp.ling.RVFDatum extractDatum(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,int,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier:java.util.Collection addOtherClasses(java.util.Collection,java.util.List,int,edu.stanford.nlp.sequences.Clique)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.ling.Datum makeDatum(java.util.List,int,java.util.List)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Dictionaries:void loadCountriesLists(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Dictionaries:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String[],java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.CaselessCompanyNameDetector:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.ExtractorFramesRare:void <clinit>()"
        ]
    },
    "edu.stanford.nlp.dcoref.Rules:boolean entitySameProperHeadLastWord(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Rules:boolean entitySameProperHeadLastWord(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Mention:void addBelongsToList(edu.stanford.nlp.hcoref.data.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.Rules:boolean entityNumberInLaterMention(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries,java.util.Set,edu.stanford.nlp.dcoref.Semantics)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Set relns(edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:boolean isAuxiliaryVerb(edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.dcoref.Mention:int getCoordination()",
            "edu.stanford.nlp.hcoref.data.Mention:int getCoordination()"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Mention:void addListMember(edu.stanford.nlp.hcoref.data.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.Trees:java.lang.String toStructureDebugString(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraphFormatter:void formatSGNode(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphFormatter:void formatSGNodeMultiline(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,int)",
            "edu.stanford.nlp.semgraph.SemanticGraphFormatter:java.lang.String formatSemanticGraph(edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.util.Sets:java.util.Set diff(java.util.Set,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters:java.util.Set keysAt(edu.stanford.nlp.stats.Counter,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler:int[] findBestUsingAnnealing(edu.stanford.nlp.sequences.SequenceModel,edu.stanford.nlp.sequences.CoolingSchedule,int[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:int[] findBestUsingAnnealing(edu.stanford.nlp.sequences.SequenceModel,edu.stanford.nlp.sequences.CoolingSchedule)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classifyGibbs(java.util.List,edu.stanford.nlp.util.Triple)"
        ]
    },
    "edu.stanford.nlp.dcoref.CorefCluster:void <init>(int,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Document:void initializeCorefCluster()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.TregexPoweredTreebankParserParams:void addFeature(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams:int setOptionFlag(java.lang.String[],int)"
        ]
    },
    "edu.stanford.nlp.util.Interner:java.util.Set internAll(java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.concurrent.SynchronizedInterner:java.util.Set internAll(java.util.Set)"
        ]
    },
    "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:void extractNamedEntityMentions(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:java.util.List extractPredictedMentions(edu.stanford.nlp.pipeline.Annotation,int,edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.trees.Tree:java.util.Set dependencies(java.util.function.Predicate,boolean,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Tree:java.util.Set dependencies(java.util.function.Predicate)"
        ]
    },
    "edu.stanford.nlp.util.logging.RedwoodConfiguration:java.lang.String get(java.util.Properties,java.lang.String,java.lang.String,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.RedwoodConfiguration:edu.stanford.nlp.util.logging.RedwoodConfiguration parse(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.fsm.DFSA:void printAttFsmFormat(java.io.Writer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteViterbiSearchGraph(java.lang.String,java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.wordseg.Sighan2005DocumentReaderAndWriter:void printLattice(edu.stanford.nlp.fsm.DFSA,java.util.List,java.io.PrintWriter)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Document:void addIncompatible(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Set)",
            "edu.stanford.nlp.hcoref.sieve.NameMatch:boolean checkEntityMatch(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.util.Iterables:java.util.Collection addAll(java.util.Iterator,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Iterables:java.util.HashSet asHashSet(java.util.Iterator)",
            "edu.stanford.nlp.util.Iterables:void main(java.lang.String[])",
            "edu.stanford.nlp.util.Iterables:java.util.ArrayList asArrayList(java.util.Iterator)",
            "edu.stanford.nlp.util.Iterables:java.util.Collection asCollection(java.util.Iterator,edu.stanford.nlp.util.CollectionFactory)"
        ]
    },
    "edu.stanford.nlp.pipeline.CorefAnnotator:void annotateOldFormat(java.util.Map,edu.stanford.nlp.hcoref.data.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.CorefAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Mention:void addPredicateNominatives(edu.stanford.nlp.hcoref.data.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.NERFeatureFactory:void makeGenericKeyCache(edu.stanford.nlp.ling.CoreLabel)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.NERFeatureFactory:java.util.Collection featuresC(edu.stanford.nlp.util.PaddedList,int)"
        ]
    },
    "edu.stanford.nlp.dcoref.Mention:void addRelativePronoun(edu.stanford.nlp.dcoref.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.md.RuleBasedCorefMentionFinder:void extractNPorPRP(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.md.RuleBasedCorefMentionFinder:java.util.List findMentions(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:java.util.Set retainMatchingKeys(edu.stanford.nlp.stats.Counter,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.TaggerExperiments:boolean add(edu.stanford.nlp.tagger.maxent.FeatureKey)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TaggerExperiments:void addRareTemplatesNew(edu.stanford.nlp.tagger.maxent.History,java.lang.String)",
            "edu.stanford.nlp.tagger.maxent.TaggerExperiments:void addTemplatesNew(edu.stanford.nlp.tagger.maxent.History,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.international.arabic.process.ArabicSegmenterFeatureFactory:java.util.Collection getCliqueFeatures(edu.stanford.nlp.util.PaddedList,int,edu.stanford.nlp.sequences.Clique)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.md.CorefMentionFinder:void addNamedEntityStrings(edu.stanford.nlp.util.CoreMap,java.util.Set,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.md.HybridCorefMentionFinder:java.util.List findMentions(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)",
            "edu.stanford.nlp.hcoref.md.RuleBasedCorefMentionFinder:java.util.List findMentions(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)",
            "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:java.util.List findMentions(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.fsm.DFSAState:java.util.Set successorStates()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:void extractNPorPRP(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:java.util.List extractPredictedMentions(edu.stanford.nlp.pipeline.Annotation,int,edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.util.logging.VisibilityHandler:void <init>(java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.hcoref.data.Mention fromProtoNoTokens(edu.stanford.nlp.pipeline.CoreNLPProtos$Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:void loadSentenceMentions(edu.stanford.nlp.pipeline.CoreNLPProtos$Sentence,edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:void extractPremarkedEntityMentions(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:java.util.List extractPredictedMentions(edu.stanford.nlp.pipeline.Annotation,int,edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.CorefCluster:void <init>(int,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.Preprocessor:void initializeClusters(edu.stanford.nlp.hcoref.data.Document)",
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)"
        ]
    },
    "edu.stanford.nlp.hcoref.md.HybridCorefMentionFinder:void extractNPorPRP(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.md.HybridCorefMentionFinder:java.util.List findMentions(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.CompanyNameDetector:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.CaselessCompanyNameDetector:void <init>()",
            "edu.stanford.nlp.tagger.maxent.ExtractorFramesRare:void <clinit>()"
        ]
    },
    "edu.stanford.nlp.parser.metrics.EvalbByCat:java.util.Set getEvalLabelSet(java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.EvalbByCat:void display(boolean,java.io.PrintWriter)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:void recToString(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.CoreLabel$OutputFormat,java.lang.StringBuilder,int,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:java.lang.String toString(edu.stanford.nlp.ling.CoreLabel$OutputFormat)",
            "edu.stanford.nlp.semgraph.SemanticGraph:void recToString(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.CoreLabel$OutputFormat,java.lang.StringBuilder,int,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.hcoref.md.CorefMentionFinder:void removeSpuriousMentionsZh(edu.stanford.nlp.pipeline.Annotation,java.util.List,edu.stanford.nlp.hcoref.data.Dictionaries,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:void removeSpuriousMentions(edu.stanford.nlp.pipeline.Annotation,java.util.List,edu.stanford.nlp.hcoref.data.Dictionaries,boolean,java.util.Locale)"
        ]
    },
    "edu.stanford.nlp.hcoref.sieve.NameMatch:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.NameMatchPrecise:void <init>()"
        ]
    },
    "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.ling.Datum makeDatum(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.ling.Datum makeDatumFromStrings(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.international.morph.MorphoFeatureSpecification:void activate(edu.stanford.nlp.international.morph.MorphoFeatureSpecification$MorphoFeatureType)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.arabic.process.IOBUtils:void tokenToDatums(java.util.List,edu.stanford.nlp.ling.CoreLabel,java.lang.String,edu.stanford.nlp.international.arabic.process.IOBUtils$TokenType,edu.stanford.nlp.ling.CoreLabel,java.lang.String,boolean,boolean)",
            "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams:int setOptionFlag(java.lang.String[],int)",
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:java.lang.String setupMorphoFeatures(java.lang.String)",
            "edu.stanford.nlp.international.french.FrenchMorphoFeatureSpecification:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams:java.lang.String setupMorphoFeatures(java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:void <clinit>()",
            "edu.stanford.nlp.international.arabic.ArabicMorphoFeatureSpecification:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.metrics.AbstractEval$RuleErrorEval:java.util.Set makeObjects(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.AbstractEval$RuleErrorEval:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)"
        ]
    },
    "edu.stanford.nlp.util.CollectionUtils:java.util.Set transformAsSet(java.util.Collection,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.CollectionUtils:java.util.Set unionAsSet(java.util.Collection[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.surface.SurfacePatternFactory:java.util.Set getContext(java.util.List,int,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.fsm.DFSA:void exploreStates(java.util.List,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.DFSA:java.util.Set states()"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.structure.ExtractionObject:java.lang.String concatenateTypes(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.structure.EventMention:void mergeEvent(edu.stanford.nlp.ie.machinereading.structure.EventMention,boolean)"
        ]
    },
    "edu.stanford.nlp.classify.GeneralDataset:edu.stanford.nlp.classify.GeneralDataset sampleDataset(long,double,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.md.CorefMentionFinder:void extractPremarkedEntityMentions(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.md.HybridCorefMentionFinder:java.util.List findMentions(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)",
            "edu.stanford.nlp.hcoref.md.RuleBasedCorefMentionFinder:java.util.List findMentions(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)",
            "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:java.util.List findMentions(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.trees.Tree:int constituents(java.util.Set,int,edu.stanford.nlp.trees.ConstituentFactory,boolean,java.util.function.Predicate,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Tree:java.util.Set constituents(edu.stanford.nlp.trees.ConstituentFactory,boolean,java.util.function.Predicate)",
            "edu.stanford.nlp.trees.Tree:int constituents(java.util.Set,int,edu.stanford.nlp.trees.ConstituentFactory,boolean,java.util.function.Predicate,int,int)",
            "edu.stanford.nlp.trees.Tree:java.util.Set constituents(edu.stanford.nlp.trees.ConstituentFactory,int)",
            "edu.stanford.nlp.trees.Tree:java.util.Set constituents(edu.stanford.nlp.trees.ConstituentFactory,boolean)"
        ]
    },
    "edu.stanford.nlp.hcoref.Rules:boolean entityHaveExtraProperNoun(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.RFSieve:edu.stanford.nlp.ling.RVFDatum extractDatum(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,int,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.String)",
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)"
        ]
    },
    "edu.stanford.nlp.util.StringUtils:java.util.Set stringToSet(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.io.IOUtils:java.util.Set readColumnSet(java.lang.String,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.Document:edu.stanford.nlp.dcoref.Document$DocType findDocType(edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Document:void processDiscourse(edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.dcoref.Mention:java.util.List getContextHelper(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Mention:java.util.List getPremodifierContext()",
            "edu.stanford.nlp.dcoref.Mention:java.util.List getContext()"
        ]
    },
    "edu.stanford.nlp.hcoref.Preprocessor:void findSyntacticRelationsFromDependency(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.Preprocessor:void fillSyntacticInfo(edu.stanford.nlp.hcoref.data.Document)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceSentenceSegmenter:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFClassifierWithLOP:double[] trainWeights(int[][][][],int[][],edu.stanford.nlp.optimization.Evaluator[],int,double[][][][])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void train(java.util.Collection,edu.stanford.nlp.sequences.DocumentReaderAndWriter)"
        ]
    },
    "edu.stanford.nlp.classify.RVFDataset:void printFullFeatureMatrix(java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sentiment.SentimentModel:void initRandomWordVectors(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.SentimentModel:void <init>(edu.stanford.nlp.sentiment.RNNOptions,java.util.List)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$ExplicitTemporalSet:edu.stanford.nlp.time.SUTime$Temporal intersect(edu.stanford.nlp.time.SUTime$Temporal)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:void setRoot(edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void splitToChildOfEdge(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraphEdge)",
            "edu.stanford.nlp.semgraph.SemanticGraph:void resetRoots()",
            "edu.stanford.nlp.semgraph.SemanticGraph:edu.stanford.nlp.semgraph.SemanticGraph makeSoftCopy()"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphFactory:java.util.Set getVerticesFromEdgeSet(java.lang.Iterable)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromEdges(java.lang.Iterable)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Mention:void addRelativePronoun(edu.stanford.nlp.hcoref.data.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.SUTime$ExplicitTemporalSet:edu.stanford.nlp.time.SUTime$ExplicitTemporalSet setTimeZone(org.joda.time.DateTimeZone)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$ExplicitTemporalSet:edu.stanford.nlp.time.SUTime$Temporal setTimeZone(org.joda.time.DateTimeZone)"
        ]
    },
    "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:java.util.List filterPredictedMentions(java.util.List,edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.CollectionUtils:java.util.Set intersection(java.util.Set,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.surface.ScorePatternsF1:edu.stanford.nlp.stats.Counter score()",
            "edu.stanford.nlp.patterns.InvertedIndexByTokens:java.util.Set getFileSentIds(edu.stanford.nlp.util.CollectionValuedMap)",
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional segmentVerb(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Optional,boolean)"
        ]
    },
    "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.naturalli.SentenceFragment fromProto(edu.stanford.nlp.pipeline.CoreNLPProtos$SentenceFragment,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.naturalli.SentenceFragment lambda$fromProto$61(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.pipeline.CoreNLPProtos$SentenceFragment)",
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.naturalli.SentenceFragment lambda$fromProto$57(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.pipeline.CoreNLPProtos$SentenceFragment)"
        ]
    },
    "edu.stanford.nlp.ie.util.RelationTriple$WithTree:void <init>(java.util.List,java.util.List,java.util.List,edu.stanford.nlp.semgraph.SemanticGraph,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.ie.util.RelationTriple fromProto(edu.stanford.nlp.pipeline.CoreNLPProtos$OpenIETriple,java.util.List,java.lang.String)",
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional segmentACL(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Optional,boolean)",
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional segmentVerb(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Optional,boolean)"
        ]
    },
    "edu.stanford.nlp.naturalli.SentenceFragment:void <init>(edu.stanford.nlp.semgraph.SemanticGraph,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ForwardEntailerSearchProblem:edu.stanford.nlp.naturalli.SentenceFragment lambda$search$12(edu.stanford.nlp.naturalli.ForwardEntailerSearchProblem$SearchResult)",
            "edu.stanford.nlp.naturalli.OpenIE:java.util.List entailmentsFromClause(edu.stanford.nlp.naturalli.SentenceFragment)",
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.naturalli.SentenceFragment fromProto(edu.stanford.nlp.pipeline.CoreNLPProtos$SentenceFragment,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:edu.stanford.nlp.naturalli.SentenceFragment lambda$search$10(edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$State)"
        ]
    },
    "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:edu.stanford.nlp.naturalli.SentenceFragment lambda$search$10(edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$State)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:boolean lambda$topClauses$3(double,java.util.List,edu.stanford.nlp.util.Triple)",
            "edu.stanford.nlp.naturalli.ClauseSplitter:boolean lambda$null$108(edu.stanford.nlp.naturalli.OpenIE,java.util.Collection,java.util.List,edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$Featurizer,java.util.Optional,edu.stanford.nlp.classify.WeightedDataset,edu.stanford.nlp.util.Triple)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:edu.stanford.nlp.semgraph.SemanticGraph setSentIndex(edu.stanford.nlp.semgraph.SemanticGraph,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:void indexNodes(edu.stanford.nlp.trees.TreeGraphNode)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:void <init>(edu.stanford.nlp.trees.Tree,java.util.Collection,java.util.concurrent.locks.Lock,edu.stanford.nlp.trees.TreeTransformer,edu.stanford.nlp.trees.HeadFinder,java.util.function.Predicate,java.util.function.Predicate)",
            "edu.stanford.nlp.trees.GrammaticalStructure:void <init>(java.util.List,edu.stanford.nlp.trees.TreeGraphNode)"
        ]
    },
    "edu.stanford.nlp.trees.international.arabic.ArabicHeadFinder:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:edu.stanford.nlp.trees.HeadFinder headFinder()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:void <init>()",
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()",
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:void initializeAnnotationPatterns()"
        ]
    },
    "edu.stanford.nlp.trees.international.arabic.ArabicHeadFinder:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.Preferences:edu.stanford.nlp.trees.HeadFinder lookupHeadFinder(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.international.arabic.ArabicTreebankLanguagePack:edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.arabic.ArabicTreebankLanguagePack:edu.stanford.nlp.trees.HeadFinder headFinder()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void <init>(edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.parser.lexparser.Lexicon,edu.stanford.nlp.parser.common.ParserGrammar,java.util.function.Function)",
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void processResults(edu.stanford.nlp.parser.common.ParserQuery,edu.stanford.nlp.trees.Tree,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,edu.stanford.nlp.trees.TreePrint)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory:double[] heldOutSetSigma(edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.optimization.LineSearcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory:double[] heldOutSetSigma(edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.stats.Scorer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifierFactory:double[] heldOutSetSigma(edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.stats.Scorer)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory:double[] heldOutSetSigma(edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.classify.GeneralDataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier trainClassifierV(edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.classify.GeneralDataset,double,double,boolean)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:double[] heldOutSetSigma(edu.stanford.nlp.classify.GeneralDataset)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory:void crossValidateSetSigma(edu.stanford.nlp.classify.GeneralDataset,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifierFactory:double[][] trainWeights(edu.stanford.nlp.classify.GeneralDataset,double[],boolean,edu.stanford.nlp.optimization.Minimizer)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:void crossValidateSetSigma(edu.stanford.nlp.classify.GeneralDataset)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory:void crossValidateSetSigma(edu.stanford.nlp.classify.GeneralDataset,int,edu.stanford.nlp.optimization.LineSearcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory:void crossValidateSetSigma(edu.stanford.nlp.classify.GeneralDataset,int,edu.stanford.nlp.stats.Scorer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.SVMLightClassifierFactory:void heldOutSetC(edu.stanford.nlp.classify.GeneralDataset,double,edu.stanford.nlp.stats.Scorer,edu.stanford.nlp.optimization.LineSearcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.classify.SVMLightClassifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset)"
        ]
    },
    "edu.stanford.nlp.classify.NBLinearClassifierFactory:void tuneSigma(int[][],int[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.NBLinearClassifierFactory:double[][] trainWeights(int[][],int[])"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.TregexGUI:void doClearFileList()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.TregexGUI:void actionPerformed(java.awt.event.ActionEvent)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.FilePanel:edu.stanford.nlp.trees.tregex.gui.FilePanel getInstance()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.MatchesPanel:void setMatches(java.util.List,java.util.Map)",
            "edu.stanford.nlp.trees.tregex.gui.FileTreeModel:void findLoadableFiles(java.util.EnumMap,java.io.File[],java.util.List,edu.stanford.nlp.trees.tregex.gui.FileTreeNode)",
            "edu.stanford.nlp.trees.tregex.gui.TregexGUI:void doClearFileList()",
            "edu.stanford.nlp.trees.tregex.gui.TregexGUI$3:void run()",
            "edu.stanford.nlp.trees.tregex.gui.TregexGUI:void loadPreferences()",
            "edu.stanford.nlp.trees.tregex.gui.TregexGUI:javax.swing.JSplitPane setUpTopPanels()",
            "edu.stanford.nlp.trees.tregex.gui.TregexGUI:void doTdiff()",
            "edu.stanford.nlp.trees.tregex.gui.InputPanel$1:void run()",
            "edu.stanford.nlp.trees.tregex.gui.InputPanel:edu.stanford.nlp.trees.tregex.gui.InputPanel$TRegexGUITreeVisitor getMatchTreeVisitor(java.lang.String,java.lang.Thread)"
        ]
    },
    "edu.stanford.nlp.time.JollyDayHolidays:void init(java.lang.String,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.Options:void <init>(java.lang.String,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseTreebankLanguagePack:edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseSemanticHeadFinder:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader:void <clinit>()",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:void <clinit>()",
            "edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams:edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()",
            "edu.stanford.nlp.hcoref.CorefDocMaker:edu.stanford.nlp.trees.HeadFinder getHeadFinder(java.util.Properties)",
            "edu.stanford.nlp.trees.tregex.gui.Preferences:edu.stanford.nlp.trees.HeadFinder lookupHeadFinder(java.lang.String)",
            "edu.stanford.nlp.pipeline.MentionAnnotator:edu.stanford.nlp.trees.HeadFinder getHeadFinder(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.pipeline.CorefAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.simple.Document:java.util.Map coref(java.util.Properties)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Value ValueExpression(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expression Expression(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.time.TimeFormatter$FormatterBuilder:void appendTextField(org.joda.time.DateTimeFieldType,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeFormatter$FormatterBuilder:void appendHalfdayOfDayText()",
            "edu.stanford.nlp.time.TimeFormatter$FormatterBuilder:void appendDayOfWeekShortText()",
            "edu.stanford.nlp.time.TimeFormatter$FormatterBuilder:void appendEraText()",
            "edu.stanford.nlp.time.TimeFormatter$FormatterBuilder:void appendMonthOfYearText()",
            "edu.stanford.nlp.time.TimeFormatter$FormatterBuilder:void appendDayOfWeekText()",
            "edu.stanford.nlp.time.TimeFormatter$FormatterBuilder:void appendMonthOfYearShortText()"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotatorImplementations:edu.stanford.nlp.pipeline.Annotator trueCase(java.util.Properties,java.lang.String,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorFactories$10:edu.stanford.nlp.pipeline.Annotator create()"
        ]
    },
    "edu.stanford.nlp.pipeline.TrueCaseAnnotator:void <init>(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.TrueCaseAnnotator:void <init>()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.UnknownGTTrainer:void train(edu.stanford.nlp.trees.Tree,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.UnknownGTTrainer:void train(java.util.Collection,double)"
        ]
    },
    "edu.stanford.nlp.scoref.Clusterer$ClustererClassifier:void learn(edu.stanford.nlp.util.Pair)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.ClassicCounter:void <init>(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.TwoDimensionalCounter:edu.stanford.nlp.stats.ClassicCounter setCounter(java.lang.Object,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.stats.ClassicCounter getWeights(java.util.List)",
            "edu.stanford.nlp.patterns.ScorePatternsFreqBased:edu.stanford.nlp.stats.Counter score()",
            "edu.stanford.nlp.scoref.Clusterer$ClustererClassifier:void learn(edu.stanford.nlp.util.Pair)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter union(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.AbstractCounter:void addAll(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.ClassicCounter:void addAll(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.MetaFeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.scoref.Example,java.util.Map,edu.stanford.nlp.scoref.Compressor)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.stats.Counter normalizeSoftMaxMinMaxScores(edu.stanford.nlp.stats.Counter,boolean,boolean,boolean)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void setUpConstructor(java.util.Map,java.util.Map,boolean,java.util.Map,java.util.Map,java.util.Map)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.stats.Counter runLabelSeedWords(java.util.Map,java.lang.Class,java.lang.String,java.util.Collection,edu.stanford.nlp.patterns.ConstantsAndVariables,boolean)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.util.Pair iterateExtractApply4Label(java.lang.String,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.Counter,java.io.BufferedWriter,java.lang.String,java.io.BufferedWriter,java.util.Set,java.util.Set,edu.stanford.nlp.util.CollectionValuedMap,edu.stanford.nlp.stats.TwoDimensionalCounter,int)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter flatten(java.util.Map)",
            "edu.stanford.nlp.scoref.Clusterer:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.scoref.ClustererDataLoader$ClustererDoc,edu.stanford.nlp.scoref.Clusterer$Cluster,edu.stanford.nlp.scoref.Clusterer$Cluster,edu.stanford.nlp.scoref.Clusterer$GlobalFeatures)",
            "edu.stanford.nlp.patterns.ScorePatternsFreqBased:edu.stanford.nlp.stats.Counter score()",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter getCopy(edu.stanford.nlp.stats.Counter)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter add(edu.stanford.nlp.stats.Counter,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.RVFDataset:edu.stanford.nlp.ling.RVFDatum getRVFDatumWithId(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.RVFDataset:void addAllWithSourcesAndIds(edu.stanford.nlp.classify.RVFDataset)"
        ]
    },
    "edu.stanford.nlp.classify.RVFDataset:edu.stanford.nlp.ling.RVFDatum getDatum(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.RVFDataset:edu.stanford.nlp.classify.RVFDataset scaleDataset(edu.stanford.nlp.classify.RVFDataset)",
            "edu.stanford.nlp.classify.RVFDataset:edu.stanford.nlp.classify.RVFDataset scaleDatasetGaussian(edu.stanford.nlp.classify.RVFDataset)",
            "edu.stanford.nlp.classify.RVFDataset:edu.stanford.nlp.ling.Datum getDatum(int)"
        ]
    },
    "edu.stanford.nlp.classify.RVFDataset$1:edu.stanford.nlp.ling.RVFDatum next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.RVFDataset$1:java.lang.Object next()"
        ]
    },
    "edu.stanford.nlp.scoref.PairwiseModelTrainer:void test(edu.stanford.nlp.scoref.PairwiseModel,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.StatisticalCorefTrainer:void doTraining(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.scoref.PairwiseModel:void learn(edu.stanford.nlp.scoref.Example,edu.stanford.nlp.scoref.Example,java.util.Map,edu.stanford.nlp.scoref.Compressor,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.PairwiseModelTrainer:void trainRanking(edu.stanford.nlp.scoref.PairwiseModel)"
        ]
    },
    "edu.stanford.nlp.scoref.PairwiseModel:double predict(edu.stanford.nlp.scoref.Example,java.util.Map,edu.stanford.nlp.scoref.Compressor)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.PairwiseModelTrainer:void writeScores(java.util.List,edu.stanford.nlp.scoref.Compressor,edu.stanford.nlp.scoref.PairwiseModel,java.io.PrintWriter,java.util.Map)",
            "edu.stanford.nlp.scoref.BestFirstCorefSystem:void runCoref(edu.stanford.nlp.hcoref.data.Document)",
            "edu.stanford.nlp.scoref.ClusteringCorefSystem:void runCoref(edu.stanford.nlp.hcoref.data.Document)",
            "edu.stanford.nlp.scoref.PairwiseModelTrainer:void trainRanking(edu.stanford.nlp.scoref.PairwiseModel)"
        ]
    },
    "edu.stanford.nlp.scoref.PairwiseModel:void learn(edu.stanford.nlp.scoref.Example,java.util.Map,edu.stanford.nlp.scoref.Compressor,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.scoref.PairwiseModel:void learn(edu.stanford.nlp.scoref.Example,java.util.Map,edu.stanford.nlp.scoref.Compressor)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.PairwiseModelTrainer:void trainClassification(edu.stanford.nlp.scoref.PairwiseModel,boolean)"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:boolean countResults(java.util.List,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswers(java.util.Collection,java.io.PrintWriter,edu.stanford.nlp.sequences.DocumentReaderAndWriter,boolean)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void classifyAndWriteAnswers(java.util.Collection,java.util.List,java.io.PrintWriter,edu.stanford.nlp.sequences.DocumentReaderAndWriter)"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void countResults(java.util.List,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.lang.String,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.lang.Class,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void evaluate(java.util.Map,boolean)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier trainSemiSupGE(edu.stanford.nlp.classify.GeneralDataset,java.util.List,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier trainSemiSupGE(edu.stanford.nlp.classify.GeneralDataset,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.BasicEntityExtractor:void runTestSet(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ArabicUnknownWordModelTrainer:edu.stanford.nlp.parser.lexparser.UnknownWordModel finishTraining()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter asCounter(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.RVFDataset:void add(edu.stanford.nlp.ling.Datum)",
            "edu.stanford.nlp.classify.RVFDataset:void add(edu.stanford.nlp.ling.Datum,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.patterns.dep.ExtractPhraseFromPattern:void printSubGraph(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.List,java.util.List,java.util.Collection,java.util.Collection,java.util.List,java.util.List,boolean,java.util.Collection,edu.stanford.nlp.semgraph.semgrex.SemgrexPattern,java.util.function.Function)",
            "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter learnNewPhrasesPrivate(java.lang.String,edu.stanford.nlp.patterns.surface.PatternsForEachToken,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.util.Set,edu.stanford.nlp.util.CollectionValuedMap,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,java.lang.String,java.util.Set,boolean)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.PostSplitter:edu.stanford.nlp.trees.Tree transformTreeHelper(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreeFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.PostSplitter:edu.stanford.nlp.trees.Tree transformTreeHelper(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreeFactory)",
            "edu.stanford.nlp.parser.lexparser.PostSplitter:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void countResultsPerToken(java.util.List,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.lang.String,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void countResults(java.util.List,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.lang.String,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.lang.Class,boolean)"
        ]
    },
    "edu.stanford.nlp.sequences.CoNLLDocumentReaderAndWriter:java.lang.StringBuilder maybeIncrementCounter(java.lang.StringBuilder,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.CoNLLDocumentReaderAndWriter:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.sequences.IOBUtils:boolean countEntityResults(java.util.List,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:boolean countResults(java.util.List,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void countResultsPerToken(java.util.List,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.lang.String,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.lang.Class)"
        ]
    },
    "edu.stanford.nlp.patterns.Data:void computeRawFreqIfNull(java.util.Map,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void setUpConstructor(java.util.Map,java.util.Map,boolean,java.util.Map,java.util.Map,java.util.Map)",
            "edu.stanford.nlp.patterns.Data:void computeRawFreqIfNull(int,boolean)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:void countNameRelations(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:edu.stanford.nlp.pipeline.Annotation read(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter getCountCounts(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.ClassicCounter:void <init>(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.CollectionUtils:java.util.Set modes(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.simple.SentenceAlgorithms:java.lang.Object modeInSpan(edu.stanford.nlp.ie.machinereading.structure.Span,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.Dataset:edu.stanford.nlp.ling.RVFDatum getRVFDatum(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassAccuracyStats:void initMC(edu.stanford.nlp.classify.ProbabilisticClassifier,edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.classify.GeneralDataset$1:edu.stanford.nlp.ling.RVFDatum next()",
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.classify.LinearClassifier fitSigmoid(edu.stanford.nlp.classify.SVMLightClassifier,edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:void testExample(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset,java.util.List,edu.stanford.nlp.stats.Counter,int)",
            "edu.stanford.nlp.classify.GeneralDataset:void printSVMLightFormat(java.io.PrintWriter)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:void countMentionTypes(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:edu.stanford.nlp.pipeline.Annotation read(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.classify.GeneralDataset:edu.stanford.nlp.stats.ClassicCounter numDatumsPerLabel()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.Dataset:java.lang.String toSummaryStatistics()",
            "edu.stanford.nlp.patterns.surface.LearnImportantFeatures:edu.stanford.nlp.stats.Counter getTopFeatures(java.util.Iterator,double,double,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon:edu.stanford.nlp.stats.Distribution getWordLengthDistribution()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:void countAdjacentMentions(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:edu.stanford.nlp.pipeline.Annotation read(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.patterns.dep.ApplyDepPatterns$2:edu.stanford.nlp.stats.Counter apply(edu.stanford.nlp.util.Pair)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.dep.ApplyDepPatterns$2:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.scoref.FeatureExtractor:void addFeature(edu.stanford.nlp.stats.Counter,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,java.util.Map)",
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)"
        ]
    },
    "edu.stanford.nlp.scoref.EvalUtils$B3Evaluator:edu.stanford.nlp.util.Pair getScore(java.util.List,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.EvalUtils$AbstractEvaluator:void update(java.util.List,java.util.List,java.util.Map,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:void modifyUsingCoreNLPNER(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.pipeline.Annotation parse(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseUnknownWordModel:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.scoref.FeatureExtractor:void addDependencyFeatures(edu.stanford.nlp.stats.Counter,java.lang.String,edu.stanford.nlp.semgraph.SemanticGraphEdge,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.naturalli.Util:java.lang.String guessNER(java.util.List,edu.stanford.nlp.ie.machinereading.structure.Span)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.Util:java.lang.String guessNER(java.util.List)",
            "edu.stanford.nlp.naturalli.Util:edu.stanford.nlp.ie.machinereading.structure.Span extractNER(java.util.List,edu.stanford.nlp.ie.machinereading.structure.Span)"
        ]
    },
    "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Counter collectCountCounts(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution simpleGoodTuring(edu.stanford.nlp.stats.Counter,int)"
        ]
    },
    "edu.stanford.nlp.parser.metrics.AbstractEval$RuleErrorEval:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void processResults(edu.stanford.nlp.parser.common.ParserQuery,edu.stanford.nlp.trees.Tree,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,edu.stanford.nlp.trees.TreePrint)"
        ]
    },
    "edu.stanford.nlp.parser.metrics.AbstractEval$CatErrorEval:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void processResults(edu.stanford.nlp.parser.common.ParserQuery,edu.stanford.nlp.trees.Tree,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,edu.stanford.nlp.trees.TreePrint)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreebankAnnotator:java.util.List annotateTrees(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void processResults(edu.stanford.nlp.parser.common.ParserQuery,edu.stanford.nlp.trees.Tree,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,edu.stanford.nlp.trees.TreePrint)",
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter getSegmenterDataFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:edu.stanford.nlp.trees.Tree scoreNonBinarizedTree(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.hcoref.md.MentionDetectionClassifier:edu.stanford.nlp.stats.Counter extractFeatures(edu.stanford.nlp.hcoref.data.Mention,java.util.Set,java.util.Set,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.md.MentionDetectionClassifier:double probabilityOf(edu.stanford.nlp.hcoref.data.Mention,java.util.Set,java.util.Set,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.FrenchUnknownWordModelTrainer:edu.stanford.nlp.parser.lexparser.UnknownWordModel finishTraining()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.SpanishUnknownWordModelTrainer:edu.stanford.nlp.parser.lexparser.UnknownWordModel finishTraining()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.EnglishUnknownWordModelTrainer:edu.stanford.nlp.parser.lexparser.UnknownWordModel finishTraining()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.RVFDataset:edu.stanford.nlp.classify.RVFDataset readSVMLightFormat(java.lang.String,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.RVFDataset:edu.stanford.nlp.classify.RVFDataset readSVMLightFormat(java.lang.String,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.classify.RVFDataset:edu.stanford.nlp.classify.RVFDataset readSVMLightFormat(java.lang.String,java.util.List)"
        ]
    },
    "edu.stanford.nlp.patterns.CandidatePhrase:void addFeatures(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:void tallyTree(edu.stanford.nlp.trees.Tree,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:void tallyTrees(java.util.Collection,double)",
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:void tallyTreeIterator(java.util.Iterator,java.util.function.Function,double)"
        ]
    },
    "edu.stanford.nlp.hcoref.CorefDocMaker:edu.stanford.nlp.hcoref.data.Document nextDoc()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.CorefSystem:void runCoref(java.lang.String[])",
            "edu.stanford.nlp.hcoref.CorefPrinter:void linkDistanceAnalysis(java.lang.String[])",
            "edu.stanford.nlp.scoref.DocumentProcessor:void run(edu.stanford.nlp.hcoref.CorefDocMaker)"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:edu.stanford.nlp.fsm.DFSA getViterbiSearchGraph(java.util.List,java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteViterbiSearchGraph(java.lang.String,java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr SeqRegexDisj(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr SeqRegexDisjConj(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr SeqRegex(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.EnglishGrammaticalRelations:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.GrammaticalRelation:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalRelations:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.nndep.DependencyParser:edu.stanford.nlp.trees.GrammaticalRelation makeGrammaticalRelation(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.nndep.DependencyParser:edu.stanford.nlp.trees.GrammaticalStructure predict(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:edu.stanford.nlp.trees.GrammaticalStructure fromStringReps(java.util.List,java.util.List,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.EnglishGrammaticalRelations:edu.stanford.nlp.trees.GrammaticalRelation getConj(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:edu.stanford.nlp.trees.GrammaticalRelation conjValue(java.lang.String)",
            "edu.stanford.nlp.trees.GrammaticalRelation:java.lang.Object readResolve()"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalRelations:edu.stanford.nlp.trees.GrammaticalRelation getAdvcl(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalRelation:java.lang.Object readResolve()",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:edu.stanford.nlp.trees.GrammaticalRelation getCaseMarkedRelation(edu.stanford.nlp.trees.GrammaticalRelation,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalRelations:edu.stanford.nlp.trees.GrammaticalRelation getConj(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:edu.stanford.nlp.trees.GrammaticalRelation conjValue(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.trees.GrammaticalRelation:java.lang.Object readResolve()"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalRelations:edu.stanford.nlp.trees.GrammaticalRelation getNmod(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void addPassiveAgentToReln(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.trees.GrammaticalRelation:java.lang.Object readResolve()",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:edu.stanford.nlp.trees.GrammaticalRelation getCaseMarkedRelation(edu.stanford.nlp.trees.GrammaticalRelation,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.EnglishGrammaticalRelations:edu.stanford.nlp.trees.GrammaticalRelation getPrepC(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void collapse3WP(java.util.Collection)",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void collapseFlatMWP(java.util.Collection)",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:edu.stanford.nlp.trees.GrammaticalRelation determinePrepRelation(java.util.Map,java.util.List,edu.stanford.nlp.trees.TypedDependency,edu.stanford.nlp.trees.TypedDependency,boolean)",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void collapse2WPbis(java.util.Collection)",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void collapseMultiWordPrep(java.util.Collection,java.util.Collection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.trees.GrammaticalRelation:java.lang.Object readResolve()"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalRelations:edu.stanford.nlp.trees.GrammaticalRelation getAcl(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalRelation:java.lang.Object readResolve()",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:edu.stanford.nlp.trees.GrammaticalRelation getCaseMarkedRelation(edu.stanford.nlp.trees.GrammaticalRelation,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.EnglishGrammaticalRelations:edu.stanford.nlp.trees.GrammaticalRelation getPrep(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void collapse3WP(java.util.Collection)",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void collapseFlatMWP(java.util.Collection)",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:edu.stanford.nlp.trees.GrammaticalRelation determinePrepRelation(java.util.Map,java.util.List,edu.stanford.nlp.trees.TypedDependency,edu.stanford.nlp.trees.TypedDependency,boolean)",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void collapse2WPbis(java.util.Collection)",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void collapseMultiWordPrep(java.util.Collection,java.util.Collection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.trees.GrammaticalRelation:java.lang.Object readResolve()"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalRelation:edu.stanford.nlp.trees.GrammaticalRelation valueOf(edu.stanford.nlp.international.Language,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void addWord(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.lang.String,edu.stanford.nlp.ling.CoreLabel)",
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.semgraph.SemanticGraph fromProto(edu.stanford.nlp.pipeline.CoreNLPProtos$DependencyGraph,java.util.List,java.lang.String)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void addSubtree(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.lang.String,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Collection)",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:void collapsePrepAndPoss(java.util.Collection)",
            "edu.stanford.nlp.naturalli.OpenIE:java.util.List entailmentsFromClause(edu.stanford.nlp.naturalli.SentenceFragment)",
            "edu.stanford.nlp.trees.GrammaticalRelation:edu.stanford.nlp.trees.GrammaticalRelation valueOf(java.lang.String)",
            "edu.stanford.nlp.naturalli.Util:java.util.List cleanTree(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.trees.GrammaticalRelation:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.ud.CoNLLUDocumentReader$SentenceProcessor:edu.stanford.nlp.semgraph.SemanticGraph apply(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.NodePattern NodeGroup(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.NodePattern NodeDisjConj(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.NodePattern NodeConj(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.NodePattern Node(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.NodePattern NodeDisj(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.stats.AbstractCounter:double decrementCount(java.lang.Object,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:void subtractInPlace(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)"
        ]
    },
    "edu.stanford.nlp.stats.IntCounter:double decrementCount(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.VariableStrings:void unsetVar(java.lang.Object)",
            "edu.stanford.nlp.trees.tregex.VariableStrings:void unsetVar(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.stats.IntCounter:void decrementCounts(java.util.Collection,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.IntCounter:void decrementCounts(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.stats.IntCounter:void incrementCounts(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$CorpusStats:void process(edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$CoNLLDocument)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.sentiment.AbstractEvaluate:int countLengthAccuracy(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.AbstractEvaluate:int countLengthAccuracy(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.sentiment.AbstractEvaluate:void eval(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassChunkEvalStats:void markBoundary()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:double score(java.io.BufferedReader,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.stats.MultiClassChunkEvalStats:void finalizeCounts()"
        ]
    },
    "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$CorpusStats:void process(edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.nndep.DependencyParser:edu.stanford.nlp.parser.nndep.Dataset genTrainExamples(java.util.List,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.nndep.DependencyParser:void setupClassifierForTraining(java.util.List,java.util.List,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.international.arabic.process.ArabicTokenizer:void <init>(java.io.Reader,edu.stanford.nlp.process.LexedTokenFactory,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.arabic.process.ArabicTokenizer$ArabicTokenizerFactory:edu.stanford.nlp.process.Tokenizer getTokenizer(java.io.Reader)",
            "edu.stanford.nlp.international.arabic.process.ArabicTokenizer:edu.stanford.nlp.international.arabic.process.ArabicTokenizer newArabicTokenizer(java.io.Reader,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.util.TwoDimensionalSet:boolean removeAll(edu.stanford.nlp.util.TwoDimensionalSet)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher:void resetChildIter(edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher:boolean find()",
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void resetChild()",
            "edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher:boolean matchesAt(edu.stanford.nlp.ling.IndexedWord)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void <init>(edu.stanford.nlp.semgraph.semgrex.NodePattern,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.semgrex.Alignment,edu.stanford.nlp.semgraph.SemanticGraph,boolean,edu.stanford.nlp.ling.IndexedWord,java.util.Map,java.util.Map,edu.stanford.nlp.semgraph.semgrex.VariableStrings,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.NodePattern:edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher matcher(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.semgrex.Alignment,edu.stanford.nlp.semgraph.SemanticGraph,boolean,edu.stanford.nlp.ling.IndexedWord,java.util.Map,java.util.Map,edu.stanford.nlp.semgraph.semgrex.VariableStrings,boolean)",
            "edu.stanford.nlp.semgraph.semgrex.NodePattern:edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher matcher(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Map,java.util.Map,edu.stanford.nlp.semgraph.semgrex.VariableStrings,boolean)"
        ]
    },
    "edu.stanford.nlp.stats.Counters$3:java.lang.Object remove(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters:void retainTop(edu.stanford.nlp.stats.Counter,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.stats.Counter getPatterns(java.lang.String,java.util.Set,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.Counter,java.util.Set)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:java.util.List getHighPrecisionFeatures(edu.stanford.nlp.classify.GeneralDataset,double,int)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:void removeKeys(edu.stanford.nlp.stats.Counter,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:void retainKeys(edu.stanford.nlp.stats.Counter,java.util.function.Function)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void removeLearnedPatterns(java.lang.String,java.util.Collection)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.stats.Counter getPatterns(java.lang.String,java.util.Set,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.Counter,java.util.Set)",
            "edu.stanford.nlp.patterns.surface.LearnImportantFeatures:edu.stanford.nlp.stats.Counter getTopFeatures(java.util.Iterator,double,double,java.lang.String)",
            "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter learnNewPhrasesPrivate(java.lang.String,edu.stanford.nlp.patterns.surface.PatternsForEachToken,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.util.Set,edu.stanford.nlp.util.CollectionValuedMap,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,java.lang.String,java.util.Set,boolean)",
            "edu.stanford.nlp.patterns.PhraseScorer:double getPatTFIDFScore(edu.stanford.nlp.patterns.CandidatePhrase,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass run(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.tregex.TregexMatcher:void resetChildIter(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.TregexMatcher:boolean findAt(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.tregex.TregexMatcher:boolean find()",
            "edu.stanford.nlp.trees.tregex.TregexMatcher:boolean matchesAt(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void resetChild()"
        ]
    },
    "edu.stanford.nlp.parser.dvparser.DVParser:java.util.IdentityHashMap getTopParses(java.util.List,edu.stanford.nlp.trees.TreeTransformer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.dvparser.CacheParseHypotheses$CacheProcessor:java.lang.Object process(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ParseFiles:void parseFiles(java.lang.String[],int,boolean,edu.stanford.nlp.process.TokenizerFactory,java.lang.String,java.lang.String,java.util.function.Function,java.lang.String,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.TreePrint,edu.stanford.nlp.parser.lexparser.LexicalizedParser)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser$1:java.lang.Object process(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.common.ParserGrammar:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure$LazyLoadTreesByParsing$1:edu.stanford.nlp.trees.Tree next()"
        ]
    },
    "edu.stanford.nlp.util.BinaryHeapPriorityQueue:edu.stanford.nlp.util.BinaryHeapPriorityQueue deepCopy()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:java.util.List toSortedList()"
        ]
    },
    "edu.stanford.nlp.classify.PRCurve:void initMC(java.util.ArrayList)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.PRCurve:void init(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.PRCurve:void <init>(java.util.List)",
            "edu.stanford.nlp.classify.PRCurve:void <init>(java.lang.String)",
            "edu.stanford.nlp.classify.PRCurve:void <init>(java.lang.String,boolean)"
        ]
    },
    "edu.stanford.nlp.classify.PRCurve:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.IntervalTree:boolean removeAll(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.IntervalTree:void rotateUp(edu.stanford.nlp.util.IntervalTree$TreeNode,edu.stanford.nlp.util.IntervalTree$TreeNode)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.IntervalTree:edu.stanford.nlp.util.IntervalTree$TreeNode balance(edu.stanford.nlp.util.IntervalTree$TreeNode)"
        ]
    },
    "edu.stanford.nlp.util.IntervalTree:java.util.List getNonNested(java.util.List,java.util.function.Function,java.util.Comparator)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression:java.util.List removeNested(java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringPatternExtractRule:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapFunctionApplier:java.lang.Object apply(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringPatternExtractRule:boolean extract(java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapExtractRule:boolean extract(edu.stanford.nlp.util.CoreMap,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapExtractRule:boolean extract(java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule:boolean extract(java.lang.Object,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern$State:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$State:boolean match0(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates)",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$RepeatState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$State:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:java.util.List extractCoreMapsMergedWithTokens(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.TokensRegexAnnotator:java.util.List extract(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.pipeline.CoreMapAggregator:java.util.List merge(java.util.List,java.util.List,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.NumberNormalizer:java.util.List findAndMergeNumbers(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.time.SUTimeMain:org.w3c.dom.Element annotationToTmlTextElement(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:void processTempEval3File(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.time.SUTimeMain:org.w3c.dom.Document annotationToXmlDocument(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:boolean addToQueue(edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$MatchQueue,edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$MatchQueue,edu.stanford.nlp.ling.tokensregex.matcher.MatchCostFunction,edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$PartialApproxMatch,java.lang.Object,java.lang.Object,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List findClosestMatches(java.util.List,edu.stanford.nlp.ling.tokensregex.matcher.MatchCostFunction,double,int,boolean,boolean)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List findClosestMatches(java.util.List,edu.stanford.nlp.ling.tokensregex.matcher.MatchCostFunction,double,int,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List findClosestMatches(java.util.List,int,boolean,boolean)",
            "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List findClosestMatches(java.lang.Object[],edu.stanford.nlp.ling.tokensregex.matcher.MatchCostFunction,java.lang.Double,int,boolean,boolean)",
            "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List findClosestMatches(java.util.List,int)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$PartialApproxMatch:edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$PartialApproxMatch access$300(edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$PartialApproxMatch,edu.stanford.nlp.ling.tokensregex.matcher.MatchCostFunction,double,java.lang.Object,java.lang.Object,boolean,edu.stanford.nlp.ling.tokensregex.matcher.TrieMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:boolean addToQueue(edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$MatchQueue,edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$MatchQueue,edu.stanford.nlp.ling.tokensregex.matcher.MatchCostFunction,edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$PartialApproxMatch,java.lang.Object,java.lang.Object,boolean,boolean)"
        ]
    },
    "edu.stanford.nlp.util.IntervalTree:java.util.List getNonOverlapping(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.IntervalTree:java.util.List getNonOverlapping(java.util.List,java.util.function.Function,java.util.Comparator)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher:java.util.List findNonOverlapping(java.util.List,java.util.Comparator)",
            "edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher:java.util.List find(java.util.List,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$FindType)",
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression:java.util.List removeOverlapping(java.util.List)",
            "edu.stanford.nlp.util.IntervalTree:java.util.List getNonOverlapping(java.util.List,java.util.Comparator)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher:java.util.List findNonOverlappingMaxScore(java.util.List,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher:java.util.List findNonOverlappingMaxScore(java.util.List)"
        ]
    },
    "edu.stanford.nlp.util.IntervalTree:java.util.List getNonOverlappingMaxScore(java.util.List,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List getNonOverlapping(java.util.List,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$MultiSequencePatternExtractRule:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapToListFunctionApplier:java.lang.Object apply(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapFunctionApplier:java.lang.Object apply(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequencePatternExtractRule:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapToListFunctionApplier:java.lang.Object apply(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapFunctionApplier:java.lang.Object apply(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$MultiSequencePatternExtractRule:boolean extract(java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapExtractRule:boolean extract(edu.stanford.nlp.util.CoreMap,java.util.List)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapToListExtractRule:boolean extract(edu.stanford.nlp.util.CoreMap,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequencePatternExtractRule:boolean extract(java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule:boolean extract(java.lang.Object,java.util.List)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapExtractRule:boolean extract(edu.stanford.nlp.util.CoreMap,java.util.List)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapToListExtractRule:boolean extract(edu.stanford.nlp.util.CoreMap,java.util.List)"
        ]
    },
    "edu.stanford.nlp.util.Beam:java.util.List asSortedList()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Beam:java.util.Iterator iterator()",
            "edu.stanford.nlp.parser.lexparser.FastFactoredParser:boolean parse(java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void discoverItem(edu.stanford.nlp.parser.lexparser.Item)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void initialize(java.util.List)"
        ]
    },
    "edu.stanford.nlp.sequences.BeamBestSequenceFinder:int[] bestSequence(edu.stanford.nlp.sequences.SequenceModel,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void classifySeq(java.util.List)",
            "edu.stanford.nlp.sequences.BeamBestSequenceFinder:int[] bestSequence(edu.stanford.nlp.sequences.SequenceModel)"
        ]
    },
    "edu.stanford.nlp.util.IntervalTree:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.util.Interval getInterval()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.util.Interval getInterval()"
        ]
    },
    "edu.stanford.nlp.ie.NERClassifierCombiner:java.util.List classifyWithGlobalInformation(java.util.List,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List classifySentenceWithGlobalInformation(java.util.List,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.ie.NERClassifierCombiner:java.util.List classify(java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:void addNormalizedQuantitiesToEntities(java.util.List,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:void addNormalizedQuantitiesToEntities(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:java.util.List applySpecializedNER(java.util.List)",
            "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:java.util.List normalizeClassifierOutput(java.util.List)"
        ]
    },
    "edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer:edu.stanford.nlp.trees.Tree lambda$normalizeWholeTree$252(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Tree:edu.stanford.nlp.trees.Tree transform(edu.stanford.nlp.trees.TreeTransformer,edu.stanford.nlp.trees.TreeFactory)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BinaryHeadFinder:edu.stanford.nlp.trees.Tree determineHead(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Tree:void percolateHeads(edu.stanford.nlp.trees.HeadFinder)",
            "edu.stanford.nlp.trees.Tree:void percolateHeadAnnotations(edu.stanford.nlp.trees.HeadFinder)"
        ]
    },
    "edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer:void addTMP9(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer:edu.stanford.nlp.trees.Tree lambda$normalizeWholeTree$252(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer:void addTMP9(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$ImmediatelyHeadedBy$1:void initialize()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$SearchNodeIterator:void <init>()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.TregexPoweredTreebankParserParams$AnnotateHeadFunction:java.lang.String apply(edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TregexPoweredTreebankParserParams$AnnotateHeadFunction:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$ImmediatelyHeads$1:void initialize()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$SearchNodeIterator:void <init>()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$ImmediatelyHeads:boolean satisfies(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.Tree:void percolateHeads(edu.stanford.nlp.trees.HeadFinder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.CollinsHeadFinder:void lambda$main$58(edu.stanford.nlp.trees.HeadFinder,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.ie.machinereading.common.NoPunctuationHeadFinder:void lambda$main$59(edu.stanford.nlp.trees.HeadFinder,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.Tree:void percolateHeads(edu.stanford.nlp.trees.HeadFinder)",
            "edu.stanford.nlp.parser.metrics.UnlabeledAttachmentEval:java.util.Set makeObjects(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void processResults(edu.stanford.nlp.parser.common.ParserQuery,edu.stanford.nlp.trees.Tree,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,edu.stanford.nlp.trees.TreePrint)",
            "edu.stanford.nlp.trees.TreeFunctions:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.FastFactoredParser:double depScoreTree(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.Trees:edu.stanford.nlp.trees.Tree lexicalize(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.HeadFinder)",
            "edu.stanford.nlp.trees.international.french.DybroFrenchHeadFinder:void lambda$main$334(edu.stanford.nlp.trees.HeadFinder,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.international.french.FrenchHeadFinder:void lambda$main$335(edu.stanford.nlp.trees.HeadFinder,edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.TreeAnnotator:edu.stanford.nlp.trees.Tree transformTreeHelper(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreeAnnotator:edu.stanford.nlp.trees.Tree transformTreeHelper(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotator:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$Heads$1:void advance()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$Heads$1:void initialize()"
        ]
    },
    "edu.stanford.nlp.trees.CollocationFinder:void getCollocationsList(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.CollocationFinder:void getCollocationsList()",
            "edu.stanford.nlp.trees.CollocationFinder:void getCollocationsList(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$Heads:boolean satisfies(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$Heads:boolean satisfies(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreeAnnotator:edu.stanford.nlp.trees.Tree transformTreeHelper(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.TreePrint:edu.stanford.nlp.trees.Tree markHeadNodes(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TreePrint:edu.stanford.nlp.trees.Tree[] headMarkChildren(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.TreePrint:edu.stanford.nlp.trees.Tree markHeadNodes(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.TreeBinarizer:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.parser.lexparser.TreeBinarizer:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.server.LexicalizedParserServer:edu.stanford.nlp.trees.Tree parse(java.lang.String,boolean)",
            "edu.stanford.nlp.pipeline.ParserAnnotator:void finishSentence(edu.stanford.nlp.util.CoreMap,java.util.List)",
            "edu.stanford.nlp.pipeline.BinarizerAnnotator:void doOneSentence(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.sentiment.BuildBinarizedDataset:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.TreeBinarizer:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer$TreeNullAnnotator:edu.stanford.nlp.trees.Tree transformTreeHelper(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer$TreeNullAnnotator:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer$TreeNullAnnotator:edu.stanford.nlp.trees.Tree transformTreeHelper(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.CollinsHeadFinder:void lambda$main$58(edu.stanford.nlp.trees.HeadFinder,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.DiskTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.common.NoPunctuationHeadFinder:void lambda$main$59(edu.stanford.nlp.trees.HeadFinder,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.DiskTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)"
        ]
    },
    "edu.stanford.nlp.trees.international.french.DybroFrenchHeadFinder:void lambda$main$334(edu.stanford.nlp.trees.HeadFinder,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.DiskTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:edu.stanford.nlp.trees.GrammaticalStructure buildCoNLLXGrammaticalStructure(java.util.List,java.util.Map,edu.stanford.nlp.trees.GrammaticalStructureFromDependenciesFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure buildCoNLLXGrammaticalStructure(java.util.List)",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:edu.stanford.nlp.trees.EnglishGrammaticalStructure buildCoNLLXGrammaticalStructure(java.util.List)",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure buildCoNLLXGrammaticalStructure(java.util.List)",
            "edu.stanford.nlp.trees.GrammaticalStructure:java.util.List readCoNLLXGrammaticalStructureCollection(java.lang.String,java.util.Map,edu.stanford.nlp.trees.GrammaticalStructureFromDependenciesFactory)"
        ]
    },
    "edu.stanford.nlp.parser.metrics.UnlabeledAttachmentEval:java.util.Set makeObjects(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.AbstractEval:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter,double)"
        ]
    },
    "edu.stanford.nlp.trees.TreeGraphNode:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.FastFactoredParser:double depScoreTree(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FastFactoredParser:boolean parse(java.util.List)"
        ]
    },
    "edu.stanford.nlp.trees.international.french.FrenchHeadFinder:void lambda$main$335(edu.stanford.nlp.trees.HeadFinder,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.DiskTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)"
        ]
    },
    "edu.stanford.nlp.trees.Tree:edu.stanford.nlp.trees.Tree headTerminal(edu.stanford.nlp.trees.HeadFinder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.Preprocessor:int getHeadIndex(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.HeadFinder)",
            "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader:void writeTabSep(java.io.PrintWriter,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CollectionValuedMap)",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:edu.stanford.nlp.trees.Tree safeHead(edu.stanford.nlp.trees.Tree,int)",
            "edu.stanford.nlp.trees.international.spanish.SpanishHeadFinder$1:void visitTree(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams$UnorderedTypedDependencyTyper:java.util.List makeDependency(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams$UntypedDependencyTyper:java.util.List makeDependency(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.parser.lexparser.PostSplitter:edu.stanford.nlp.trees.Tree transformTreeHelper(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreeFactory)",
            "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams$TypedDependencyTyper:java.util.List makeDependency(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.dcoref.MentionExtractor:void addFoundPair(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.util.Set)",
            "edu.stanford.nlp.dcoref.MentionExtractor:int getHeadIndex(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.Tree:java.util.Set mapDependencies(java.util.function.Predicate,edu.stanford.nlp.trees.HeadFinder,java.lang.String)",
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree safeHead(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.Tree safeHead(edu.stanford.nlp.trees.Tree,int)",
            "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams$UnorderedUntypedDependencyTyper:java.util.List makeDependency(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.ie.machinereading.domains.roth.RothCONLL04Reader:void setHeadWord(edu.stanford.nlp.ie.machinereading.structure.EntityMention,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader:void writeTabSep(java.io.PrintWriter,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CollectionValuedMap)"
        ]
    },
    "edu.stanford.nlp.scoref.StatisticalCorefTrainer:void preprocess(java.util.Properties,edu.stanford.nlp.hcoref.data.Dictionaries,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.StatisticalCorefTrainer:void doTraining(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.util.List getShortestDirectedPathEdges(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromVertices(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Collection)",
            "edu.stanford.nlp.semgraph.SemanticGraph:void resetRoots()"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.util.List getShortestUndirectedPathEdges(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.BasicRelationFeatureFactory:void addDependencyPathFeatures(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.ie.machinereading.structure.RelationMention,edu.stanford.nlp.ie.machinereading.structure.EntityMention,edu.stanford.nlp.ie.machinereading.structure.EntityMention,java.util.List,java.util.List,java.util.logging.Logger)"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:java.util.Collection typedDependenciesCollapsedTree()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TreePrint:void printTreeInternal(edu.stanford.nlp.trees.Tree,java.io.PrintWriter,boolean)",
            "edu.stanford.nlp.trees.GrammaticalStructure:void main(java.lang.String[])",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.GrammaticalStructure,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode,edu.stanford.nlp.trees.GrammaticalStructure$Extras,boolean,java.util.function.Predicate)"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:java.util.List typedDependenciesCollapsed(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.GrammaticalStructure,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode,edu.stanford.nlp.trees.GrammaticalStructure$Extras,boolean,java.util.function.Predicate)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode,edu.stanford.nlp.trees.GrammaticalStructure$Extras,boolean,java.util.function.Predicate,boolean)",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph generateCCProcessedDependencies(edu.stanford.nlp.trees.GrammaticalStructure,edu.stanford.nlp.trees.GrammaticalStructure$Extras)",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph generateUncollapsedDependencies(edu.stanford.nlp.trees.GrammaticalStructure,edu.stanford.nlp.trees.GrammaticalStructure$Extras)",
            "edu.stanford.nlp.pipeline.DependencyParseAnnotator:void doOneSentence(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph generateCollapsedDependencies(edu.stanford.nlp.trees.GrammaticalStructure,edu.stanford.nlp.trees.GrammaticalStructure$Extras)",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph generateCCProcessedDependencies(edu.stanford.nlp.trees.GrammaticalStructure)",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph generateUncollapsedDependencies(edu.stanford.nlp.trees.GrammaticalStructure)",
            "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader:void setDependencyTree(edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph generateCollapsedDependencies(edu.stanford.nlp.trees.GrammaticalStructure)",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.GrammaticalStructure,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode,boolean,boolean,java.util.function.Predicate)",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.GrammaticalStructure)"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:java.util.Collection typedDependenciesCollapsed()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:java.util.List typedDependenciesCCprocessed()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TreePrint:void printTreeInternal(edu.stanford.nlp.trees.Tree,java.io.PrintWriter,boolean)"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:java.util.List typedDependenciesCCprocessed(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.international.arabic.pipeline.DefaultLexicalMapper:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.arabic.ArabicTreeNormalizer:void <init>(boolean,boolean,boolean,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.arabic.ArabicTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)",
            "edu.stanford.nlp.trees.international.arabic.ArabicTreeNormalizer:void <init>(boolean,boolean,boolean)"
        ]
    },
    "edu.stanford.nlp.parser.dvparser.DVParser:void <init>(edu.stanford.nlp.parser.lexparser.LexicalizedParser)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.DVParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.patterns.InvertedIndexByTokens:edu.stanford.nlp.patterns.InvertedIndexByTokens createIndex(java.util.Map,java.util.Properties,java.util.Set,java.lang.String,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.SentenceIndex:edu.stanford.nlp.patterns.SentenceIndex createIndex(java.lang.Class,java.util.Map,java.util.Properties,java.util.Set,java.lang.String,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.naturalli.OpenIE:java.util.List relationsInSentence(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.CustomAnnotationSerializer:java.io.OutputStream write(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.CustomAnnotationSerializer:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$RecordHandlerTree:void access$000(edu.stanford.nlp.util.logging.Redwood$RecordHandlerTree,edu.stanford.nlp.util.logging.Redwood$Record,edu.stanford.nlp.util.logging.Redwood$MessageType,int,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood:void lambda$log$38(java.lang.Object,java.lang.Object[],long)",
            "edu.stanford.nlp.util.logging.Redwood$1:void run()",
            "edu.stanford.nlp.util.logging.Redwood:void log(java.lang.Object[])",
            "edu.stanford.nlp.util.logging.Redwood:void stop()",
            "edu.stanford.nlp.util.logging.Redwood:void lambda$endTrack$41(java.lang.String,long)"
        ]
    },
    "edu.stanford.nlp.naturalli.ForwardEntailerSearchProblem:java.util.List search()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.OpenIE:java.util.List entailmentsFromClause(edu.stanford.nlp.naturalli.SentenceFragment)"
        ]
    },
    "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void access$200(edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$3:void lambda$applyTo$4(edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$6:void lambda$applyTo$7(edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$5:void lambda$applyTo$6(edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:void enRepairEdges(edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:void printProbs(java.util.Collection,edu.stanford.nlp.sequences.DocumentReaderAndWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:void printProbs(java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFBiasedClassifier:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.TwoDimensionalCounter add(edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams$AddPOSSequenceFunction:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TregexPoweredTreebankParserParams:java.lang.String getAnnotationString(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.util.IntervalTree:java.util.List getNonOverlappingMaxScore(java.util.List,java.util.function.Function,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.patterns.dep.ApplyDepPatterns:java.lang.Object call()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void addStats(edu.stanford.nlp.stats.TwoDimensionalCounter,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void calculateSufficientStats(java.util.Map,edu.stanford.nlp.patterns.surface.PatternsForEachToken,java.lang.String,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.trees.Treebanks:void lambda$countTaggings$259(edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.DiskTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.trees.MemoryTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.trees.FilteringTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)"
        ]
    },
    "edu.stanford.nlp.patterns.ScorePhrases:void statsWithoutApplyingPatterns(java.util.Map,edu.stanford.nlp.patterns.surface.PatternsForEachToken,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter learnNewPhrasesPrivate(java.lang.String,edu.stanford.nlp.patterns.surface.PatternsForEachToken,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.util.Set,edu.stanford.nlp.util.CollectionValuedMap,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,java.lang.String,java.util.Set,boolean)"
        ]
    },
    "edu.stanford.nlp.patterns.surface.ApplyPatterns:java.lang.Object call()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.TwoDimensionalCounter load2DCounter(java.lang.String,java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.TaggerExperiments:void initTemplatesNew()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TaggerExperiments:void <init>(edu.stanford.nlp.tagger.maxent.TaggerConfig,edu.stanford.nlp.tagger.maxent.MaxentTagger)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.EnglishUnknownWordModel:int getSignatureIndex(int,int,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EnglishUnknownWordModel:double scoreProbTagGivenWordSignature(edu.stanford.nlp.parser.lexparser.IntTaggedWord,int,double,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.EnglishUnknownWordModelTrainer:void train(edu.stanford.nlp.ling.TaggedWord,int,double)"
        ]
    },
    "edu.stanford.nlp.sequences.ColumnDocumentReaderAndWriter$ColumnDocParser:java.util.List apply(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.ColumnDocumentReaderAndWriter$ColumnDocParser:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.process.CoreLabelTokenFactory:edu.stanford.nlp.ling.CoreLabel makeToken(java.lang.String[],java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.CoreLabelTokenFactory:edu.stanford.nlp.util.CoreMap makeToken(java.lang.String[],java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapNodePatternTrigger:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher$BasicSequencePatternTrigger:java.util.Collection apply(java.util.List)"
        ]
    },
    "edu.stanford.nlp.fsm.TransducerGraph:edu.stanford.nlp.fsm.TransducerGraph createRandomGraph(int,int,double,int,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:void main(java.lang.String[])",
            "edu.stanford.nlp.fsm.QuasiDeterminizer:void main(java.lang.String[])",
            "edu.stanford.nlp.fsm.TransducerGraph:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswers(java.util.Collection,edu.stanford.nlp.sequences.DocumentReaderAndWriter,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyFilesAndWriteAnswers(java.util.Collection,edu.stanford.nlp.sequences.DocumentReaderAndWriter,boolean)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswers(java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter,boolean)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswers(java.lang.String,java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter,boolean)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyStdin(edu.stanford.nlp.sequences.DocumentReaderAndWriter)"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswers(java.lang.String,java.io.OutputStream,edu.stanford.nlp.sequences.DocumentReaderAndWriter,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFClassifierEvaluator:double evaluate(double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFClassifierEvaluator:void outputToCmd(java.io.OutputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.CmdEvaluator:void evaluateCmd(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.util.Pair crossValidate(edu.stanford.nlp.classify.GeneralDataset,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:boolean trainClassifier()"
        ]
    },
    "edu.stanford.nlp.classify.ColumnDataClassifier:void testClassifier(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution getDistributionFromPartiallySpecifiedCounter(edu.stanford.nlp.stats.Counter,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.fsm.QuasiDeterminizer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ExactGrammarCompactor:edu.stanford.nlp.fsm.TransducerGraph doCompaction(edu.stanford.nlp.fsm.TransducerGraph,java.util.List,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.GrammarCompactor:edu.stanford.nlp.util.Triple compactGrammar(edu.stanford.nlp.util.Pair,java.util.Map,java.util.Map,edu.stanford.nlp.util.Index)"
        ]
    },
    "edu.stanford.nlp.stats.Counters$2:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.optimization.AbstractCachingDiffFunction:double[] derivativeAt(double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.CGMinimizer$OneDimDiffFunction:double derivativeAt(double)",
            "edu.stanford.nlp.parser.dvparser.DVParser:void executeOneTrainingBatch(java.util.List,java.util.IdentityHashMap,double[])",
            "edu.stanford.nlp.optimization.QNMinimizer:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[],int,edu.stanford.nlp.optimization.QNMinimizer$QNInfo)",
            "edu.stanford.nlp.optimization.CGMinimizer:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[],int)",
            "edu.stanford.nlp.classify.SemiSupervisedLogConditionalObjectiveFunction:void calculate(double[])",
            "edu.stanford.nlp.optimization.SGDWithAdaGradAndFOBOS:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[],int)",
            "edu.stanford.nlp.sentiment.SentimentTraining:void executeOneTrainingBatch(edu.stanford.nlp.sentiment.SentimentModel,java.util.List,double[])",
            "edu.stanford.nlp.optimization.AbstractCachingDiffFunction:boolean gradientCheck(int,int,double[])",
            "edu.stanford.nlp.optimization.QNMinimizer:double[] lineSearchMinPack(edu.stanford.nlp.optimization.DiffFunction,double[],double[],double[],double[],double,double)",
            "edu.stanford.nlp.optimization.QNMinimizer:double evaluateFunction(edu.stanford.nlp.optimization.DiffFunction,double[],double[])",
            "edu.stanford.nlp.optimization.StochasticDiffFunctionTester:boolean testSumOfBatches(double[],double)"
        ]
    },
    "edu.stanford.nlp.optimization.AbstractCachingDiffFunction:double valueAt(double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.DVParser:void executeOneTrainingBatch(java.util.List,java.util.IdentityHashMap,double[])",
            "edu.stanford.nlp.optimization.CGMinimizer:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[],int)",
            "edu.stanford.nlp.classify.SemiSupervisedLogConditionalObjectiveFunction:void calculate(double[])",
            "edu.stanford.nlp.optimization.SGDWithAdaGradAndFOBOS:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[],int)",
            "edu.stanford.nlp.sentiment.SentimentTraining:void executeOneTrainingBatch(edu.stanford.nlp.sentiment.SentimentModel,java.util.List,double[])",
            "edu.stanford.nlp.optimization.QNMinimizer:double[] lineSearchBacktrack(edu.stanford.nlp.optimization.Function,double[],double[],double[],double[],double)",
            "edu.stanford.nlp.optimization.AbstractCachingDiffFunction:boolean gradientCheck(int,int,double[])",
            "edu.stanford.nlp.optimization.QNMinimizer:double[] lineSearchMinPack(edu.stanford.nlp.optimization.DiffFunction,double[],double[],double[],double[],double,double)",
            "edu.stanford.nlp.optimization.QNMinimizer:double evaluateFunction(edu.stanford.nlp.optimization.DiffFunction,double[],double[])",
            "edu.stanford.nlp.optimization.StochasticDiffFunctionTester:boolean testSumOfBatches(double[],double)",
            "edu.stanford.nlp.optimization.QNMinimizer:double[] lineSearchBacktrackOWL(edu.stanford.nlp.optimization.Function,double[],double[],double[],double[],double)",
            "edu.stanford.nlp.optimization.CGMinimizer$OneDimDiffFunction:double valueAt(double)",
            "edu.stanford.nlp.optimization.QNMinimizer$Record:void monitorX(double[])",
            "edu.stanford.nlp.optimization.StochasticMinimizer:double[] minimize(edu.stanford.nlp.optimization.Function,double,double[],int)"
        ]
    },
    "edu.stanford.nlp.ie.pascal.ISODateInstance:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:java.lang.String normalizedDateString(java.lang.String,java.lang.String,edu.stanford.nlp.time.Timex)"
        ]
    },
    "edu.stanford.nlp.ie.pascal.ISODateInstance:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.pascal.ISODateInstance:boolean extractFields(java.lang.String)",
            "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:void fixupNerBeforeNormalization(java.util.List)",
            "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:java.util.List detectTwoSidedRangeModifier(edu.stanford.nlp.util.CoreMap,java.util.List,int,int,boolean)",
            "edu.stanford.nlp.ie.pascal.ISODateInstance:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier:java.util.List classifyWithGlobalInformation(java.util.List,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier$2:java.util.List process(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier$2:java.lang.Object process(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:java.lang.String toString(java.lang.String,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifier:java.lang.String toString()",
            "edu.stanford.nlp.ie.ner.CMMClassifier:void train(java.util.Collection,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:void printClassifier(edu.stanford.nlp.classify.Classifier)"
        ]
    },
    "edu.stanford.nlp.classify.LogisticClassifier:java.lang.Object classOf(edu.stanford.nlp.ling.RVFDatum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:void testExample(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset,java.util.List,edu.stanford.nlp.stats.Counter,int)"
        ]
    },
    "edu.stanford.nlp.classify.LogisticClassifier:java.lang.Object classOfRVFDatum(edu.stanford.nlp.ling.RVFDatum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LogisticClassifier:java.lang.Object classOf(edu.stanford.nlp.ling.Datum)"
        ]
    },
    "edu.stanford.nlp.classify.LogisticClassifier:double probabilityOfRVFDatum(edu.stanford.nlp.ling.RVFDatum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LogisticClassifier:double probabilityOf(edu.stanford.nlp.ling.Datum)",
            "edu.stanford.nlp.classify.LogisticClassifier:double probabilityOf(edu.stanford.nlp.ling.RVFDatum)"
        ]
    },
    "edu.stanford.nlp.stats.Distribution:java.lang.Object argmax()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Distribution:java.lang.Object sampleFrom()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon:java.lang.String sampleFrom(java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon:java.lang.String sampleFrom()",
            "edu.stanford.nlp.stats.Distribution:java.lang.Object drawSample()"
        ]
    },
    "edu.stanford.nlp.stats.Distribution:java.lang.Object drawSample(java.util.Random)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sentiment.SentimentTraining:void train(edu.stanford.nlp.sentiment.SentimentModel,java.lang.String,java.util.List,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.SentimentTraining:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.util.CollectionUtils:java.lang.Object mode(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.LinearClassifier:void dumpSorted()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.LinearClassifier:void justificationOf(edu.stanford.nlp.ling.Datum,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifier:void justificationOf(edu.stanford.nlp.ling.Datum)",
            "edu.stanford.nlp.classify.LinearClassifier:java.lang.String toAllWeightsString()",
            "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:void justificationOf(edu.stanford.nlp.ling.Datum,java.io.PrintWriter,java.lang.String)",
            "edu.stanford.nlp.classify.LinearClassifier:void dump(java.io.PrintWriter)"
        ]
    },
    "edu.stanford.nlp.pipeline.XMLOutputter:nu.xom.Element toXML(edu.stanford.nlp.ie.machinereading.structure.RelationMention,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.XMLOutputter:void addRelations(java.util.List,nu.xom.Element,java.lang.String,double)"
        ]
    },
    "edu.stanford.nlp.pipeline.XMLOutputter:nu.xom.Element toXML(edu.stanford.nlp.ie.machinereading.structure.EntityMention,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.XMLOutputter:nu.xom.Element toXML(edu.stanford.nlp.ie.machinereading.structure.RelationMention,java.lang.String)",
            "edu.stanford.nlp.pipeline.XMLOutputter:void addEntities(java.util.List,nu.xom.Element,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.structure.RelationMention:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.structure.EntityMention:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Pair:void save(java.io.DataOutputStream)",
            "edu.stanford.nlp.patterns.ConstantsAndVariables$ScorePhraseMeasures:int compareTo(java.lang.Object)",
            "edu.stanford.nlp.patterns.surface.Token:boolean equals(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.structure.RelationMention:boolean printableObject(double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.BasicRelationFeatureFactory:edu.stanford.nlp.ling.Datum createTestDatum(edu.stanford.nlp.ie.machinereading.structure.RelationMention,java.util.logging.Logger)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.BasicRelationFeatureFactory:edu.stanford.nlp.ling.Datum createDatum(edu.stanford.nlp.ie.machinereading.structure.RelationMention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:edu.stanford.nlp.ling.Datum createDatum(edu.stanford.nlp.ie.machinereading.structure.RelationMention)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.BasicRelationFeatureFactory:java.util.Set getFeatures(edu.stanford.nlp.ie.machinereading.structure.RelationMention,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.BasicRelationFeatureFactory:java.lang.String getFeature(edu.stanford.nlp.ie.machinereading.structure.RelationMention,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.BasicRelationFeatureFactory:edu.stanford.nlp.ling.Datum createDatum(edu.stanford.nlp.ie.machinereading.structure.RelationMention,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:edu.stanford.nlp.ling.Datum createDatum(edu.stanford.nlp.ie.machinereading.structure.RelationMention,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.sequences.ExactBestSequenceFinder:edu.stanford.nlp.util.Pair bestSequenceWithLinearConstraints(edu.stanford.nlp.sequences.SequenceModel,double[][])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sequences.ExactBestSequenceFinder:int[] bestSequence(edu.stanford.nlp.sequences.SequenceModel)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void classifySeq(java.util.List)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classifyMaxEnt(java.util.List,edu.stanford.nlp.sequences.SequenceModel)",
            "edu.stanford.nlp.tagger.maxent.TestSentence:void runTagInference()",
            "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classifyGibbs(java.util.List,edu.stanford.nlp.util.Triple)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.AbstractDependencyGrammar:double scoreTB(int,int,int,int,boolean,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.AbstractDependencyGrammar:double score(edu.stanford.nlp.parser.lexparser.IntDependency)",
            "edu.stanford.nlp.parser.lexparser.ExhaustiveDependencyParser:boolean parse(java.util.List)"
        ]
    },
    "edu.stanford.nlp.scoref.Clusterer:double lambda$trainPolicy$211(edu.stanford.nlp.util.Pair)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.MultiClassAccuracyStats:void <init>(edu.stanford.nlp.classify.ProbabilisticClassifier,edu.stanford.nlp.classify.GeneralDataset,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory$NegativeScorer:java.lang.Double apply(java.lang.Double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifierFactory$NegativeScorer:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory:java.lang.Double lambda$crossValidateSetSigma$6(edu.stanford.nlp.stats.Scorer,edu.stanford.nlp.util.Triple)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.CrossValidator:double computeAverage(java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void evaluate(java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass runNineYards(edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass,java.util.Properties,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LinearGrammarSmoother:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.Treebank,java.util.List)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:java.lang.String toVerticalString(edu.stanford.nlp.stats.Counter,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:java.lang.String toVerticalString(edu.stanford.nlp.stats.Counter)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:java.lang.String toVerticalString(edu.stanford.nlp.stats.Counter,int,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters:java.lang.String toVerticalString(edu.stanford.nlp.stats.Counter,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.CoNLLDocumentReaderAndWriter:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runNER(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:java.util.List nerTags(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runRegexner(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:java.util.Map coref(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runParse(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:edu.stanford.nlp.trees.Tree parse(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:java.util.Map coref(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runOpenie(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:java.util.Collection openie()",
            "edu.stanford.nlp.simple.Sentence:java.util.Collection openieTriples(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runRegexner(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:void regexner(java.lang.String,boolean)"
        ]
    },
    "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runPOS(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runNER(java.util.Properties)",
            "edu.stanford.nlp.simple.Sentence:java.util.List posTags(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runParse(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runDepparse(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runLemma(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runDepparse(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:edu.stanford.nlp.semgraph.SemanticGraph dependencyGraph(java.util.Properties,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode)",
            "edu.stanford.nlp.simple.Sentence:java.util.List incomingDependencyLabels(java.util.Properties,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode)",
            "edu.stanford.nlp.simple.Sentence:java.util.Optional incomingDependencyLabel(java.util.Properties,int,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode)",
            "edu.stanford.nlp.simple.Sentence:java.util.Optional governor(java.util.Properties,int,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runNatlog(java.util.Properties)",
            "edu.stanford.nlp.simple.Sentence:java.util.List governors(java.util.Properties,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode)"
        ]
    },
    "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runNatlog(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:java.util.List natlogPolarities(java.util.Properties)",
            "edu.stanford.nlp.simple.Sentence:java.util.List operators(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runOpenie(java.util.Properties)",
            "edu.stanford.nlp.simple.Sentence:edu.stanford.nlp.naturalli.Polarity natlogPolarity(java.util.Properties,int)"
        ]
    },
    "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runLemma(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:java.util.List lemmas(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:java.util.Map coref(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runNatlog(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void saveSegmenterDataToText(edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.MachineReading:edu.stanford.nlp.pipeline.Annotation annotate(edu.stanford.nlp.pipeline.Annotation,int)"
        ]
    },
    "edu.stanford.nlp.classify.GeneralDataset:edu.stanford.nlp.classify.GeneralDataset mapDataset(edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.util.Index,java.util.Map,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.WeightedRVFDataset:void add(edu.stanford.nlp.ling.Datum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.util.Pair readDataset(java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.util.Pair readTestExamples(java.lang.String)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.util.Pair readAndReturnTrainingExamples(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.classify.WeightedRVFDataset:void add(edu.stanford.nlp.ling.RVFDatum,float)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.RVFDataset:void addAll(java.lang.Iterable)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.GeneralDataset:edu.stanford.nlp.classify.GeneralDataset mapDataset(edu.stanford.nlp.classify.GeneralDataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.WeightedRVFDataset:void add(edu.stanford.nlp.ling.Datum,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.RVFDataset:void addAllWithSourcesAndIds(edu.stanford.nlp.classify.RVFDataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:void train(java.lang.String,java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void train()"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:void train(java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void train()",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void train(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:void train(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.BasicEntityExtractor:void train(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:void train(java.lang.String[],edu.stanford.nlp.sequences.DocumentReaderAndWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void train()"
        ]
    },
    "edu.stanford.nlp.international.arabic.process.ArabicSegmenter:void train()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.arabic.process.ArabicSegmenter:edu.stanford.nlp.international.arabic.process.ArabicSegmenter getSegmenter(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void init(edu.stanford.nlp.tagger.maxent.TaggerConfig)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void readModelAndInit(java.util.Properties,java.io.DataInputStream,boolean)",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void trainAndSaveModel(edu.stanford.nlp.tagger.maxent.TaggerConfig)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.BoundedCostOrderedMap:void putAll(java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$MultiMatchQueue:void add(edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$PartialApproxMatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:boolean addToQueue(edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$MatchQueue,edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$MatchQueue,edu.stanford.nlp.ling.tokensregex.matcher.MatchCostFunction,edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$PartialApproxMatch,java.lang.Object,java.lang.Object,boolean,boolean)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$MatchQueue:void add(edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$PartialApproxMatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:boolean addToQueue(edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$MatchQueue,edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$MatchQueue,edu.stanford.nlp.ling.tokensregex.matcher.MatchCostFunction,edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$PartialApproxMatch,java.lang.Object,java.lang.Object,boolean,boolean)"
        ]
    },
    "edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$8:void <init>(java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers:edu.stanford.nlp.util.logging.LogRecordHandler showOnlyChannels(java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$6:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers:void <clinit>()"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:boolean isDag(edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:boolean isDag()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.BinaryHeapPriorityQueue:java.util.List toSortedList()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:java.lang.String toVerticalString(edu.stanford.nlp.stats.Counter,int,java.lang.String,boolean)",
            "edu.stanford.nlp.stats.MultiClassAccuracyStats:void initMC(edu.stanford.nlp.classify.ProbabilisticClassifier,edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:java.util.Iterator iterator()",
            "edu.stanford.nlp.classify.PRCurve:void initMC(java.util.ArrayList)",
            "edu.stanford.nlp.classify.PRCurve:void init(java.util.List)",
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:java.lang.String toString(int)",
            "edu.stanford.nlp.ling.tokensregex.matcher.BoundedCostOrderedMap:java.util.List valuesList()",
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:java.lang.String toVerticalString()"
        ]
    },
    "edu.stanford.nlp.util.BinaryHeapPriorityQueue:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$4:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers:void <clinit>()"
        ]
    },
    "edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$3:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers:void <clinit>()"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood:void hideChannelsEverywhere(java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood:void main(java.lang.String[])",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void setUpConstructor(java.util.Map,java.util.Map,boolean,java.util.Map,java.util.Map,java.util.Map)",
            "edu.stanford.nlp.hcoref.CorefSystem:void runCoref(java.lang.String[])",
            "edu.stanford.nlp.scoref.DocumentProcessor:void run(edu.stanford.nlp.hcoref.CorefDocMaker)"
        ]
    },
    "edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$7:void <init>(java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers:edu.stanford.nlp.util.logging.LogRecordHandler hideChannels(java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$5:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers:void <clinit>()"
        ]
    },
    "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:java.util.Set findRootOnlyStates(java.util.List,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:void train(java.util.List,edu.stanford.nlp.util.Pair,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.dcoref.Mention:int getReportEmbedding(edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Mention:java.util.ArrayList getSingletonFeatures(edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Mention:java.util.Collection getHeadSiblings()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Mention:int getReportEmbedding(edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.hcoref.data.Mention:int getNegation(edu.stanford.nlp.hcoref.data.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.Tdiff:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.BinaryHeapPriorityQueue:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:java.lang.String toBiggestValuesFirstString(edu.stanford.nlp.stats.Counter,int,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.stats.Counters:java.lang.String toBiggestValuesFirstString(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.Counters:java.lang.String toBiggestValuesFirstString(edu.stanford.nlp.stats.Counter,int)",
            "edu.stanford.nlp.util.Pair:void save(java.io.DataOutputStream)",
            "edu.stanford.nlp.patterns.ConstantsAndVariables$ScorePhraseMeasures:int compareTo(java.lang.Object)",
            "edu.stanford.nlp.patterns.surface.Token:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.international.morph.MorphoFeatureSpecification:java.lang.String toString()",
            "edu.stanford.nlp.hcoref.data.CorefCluster:java.lang.String toString()"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TestClassifier:void processResults(edu.stanford.nlp.tagger.maxent.TestSentence,edu.stanford.nlp.io.PrintFile,edu.stanford.nlp.io.PrintFile,edu.stanford.nlp.io.PrintFile,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TestClassifier:void test()"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TestSentence:double[] scoresOf(int[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.ExactBestSequenceFinder:edu.stanford.nlp.util.Pair bestSequence(edu.stanford.nlp.sequences.SequenceModel,double[][])",
            "edu.stanford.nlp.tagger.maxent.TestSentence:double scoreOf(int[],int)"
        ]
    },
    "edu.stanford.nlp.sequences.FeatureFactory:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.dvparser.FilterConfusingRules:boolean test(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.FilterConfusingRules:boolean test(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.parser.dvparser.FilterConfusingRules:boolean test(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.dcoref.Document:boolean isIncompatible(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.Document:boolean isIncompatible(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries,java.util.Set,edu.stanford.nlp.dcoref.Semantics)"
        ]
    },
    "edu.stanford.nlp.util.TwoDimensionalSet:boolean containsAll(edu.stanford.nlp.util.TwoDimensionalSet)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Set descendantsTabuTestAndRelns(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Collection,java.util.Collection,edu.stanford.nlp.semgraph.IndexedWordUnaryPred)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Set descendantsTabuTestAndRelns(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Collection,edu.stanford.nlp.semgraph.IndexedWordUnaryPred)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Set tabuDescendants(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Set tabuDescendants(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Collection,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Set descendantsTabuRelns(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.dep.ExtractPhraseFromPattern:void printSubGraph(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.List,java.util.List,java.util.Collection,java.util.Collection,java.util.List,java.util.List,boolean,java.util.Collection,edu.stanford.nlp.semgraph.semgrex.SemgrexPattern,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.dep.ExtractPhraseFromPattern:java.util.Set getSemGrexPatternNodes(edu.stanford.nlp.semgraph.SemanticGraph,java.util.List,java.util.Collection,java.util.Collection,edu.stanford.nlp.semgraph.semgrex.SemgrexPattern,boolean,java.util.Collection,boolean,java.util.function.Function)",
            "edu.stanford.nlp.patterns.dep.ExtractPhraseFromPattern:void printSubGraph(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.List,java.util.List,java.util.Collection,java.util.Collection,java.util.List,java.util.List,boolean,java.util.Collection,edu.stanford.nlp.semgraph.semgrex.SemgrexPattern,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void <init>(edu.stanford.nlp.trees.Tree,java.util.function.Predicate,edu.stanford.nlp.trees.HeadFinder,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode,edu.stanford.nlp.trees.GrammaticalStructure$Extras,boolean,java.util.function.Predicate,boolean)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void <init>(edu.stanford.nlp.trees.Tree,java.util.function.Predicate,edu.stanford.nlp.trees.HeadFinder)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void <init>(edu.stanford.nlp.trees.Tree,java.util.function.Predicate)"
        ]
    },
    "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void <init>(edu.stanford.nlp.trees.Tree,java.util.function.Predicate,edu.stanford.nlp.trees.HeadFinder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode,edu.stanford.nlp.trees.GrammaticalStructure$Extras,boolean,java.util.function.Predicate,boolean)",
            "edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams:edu.stanford.nlp.trees.GrammaticalStructure getGrammaticalStructure(edu.stanford.nlp.trees.Tree,java.util.function.Predicate,edu.stanford.nlp.trees.HeadFinder)",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void <init>(edu.stanford.nlp.trees.Tree,java.util.function.Predicate)",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructureFactory:edu.stanford.nlp.trees.EnglishGrammaticalStructure newGrammaticalStructure(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:void <init>(edu.stanford.nlp.trees.Tree,java.util.function.Predicate,edu.stanford.nlp.trees.HeadFinder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructureFactory:edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure newGrammaticalStructure(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:void <init>(edu.stanford.nlp.trees.Tree,java.util.function.Predicate)",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:void <init>(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.HeadFinder)",
            "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader:void setDependencyTree(edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams:edu.stanford.nlp.trees.GrammaticalStructure getGrammaticalStructure(edu.stanford.nlp.trees.Tree,java.util.function.Predicate,edu.stanford.nlp.trees.HeadFinder)"
        ]
    },
    "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:void addFeatures(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.trees.Tree,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:void main(java.lang.String[])",
            "edu.stanford.nlp.pipeline.UDFeatureAnnotator:void doOneSentence(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.trees.ud.CoNLLUDocumentWriter:java.lang.String printSemanticGraph(edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.CoNLLUOutputter:void print(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream,edu.stanford.nlp.pipeline.AnnotationOutputter$Options)"
        ]
    },
    "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:void extractMentionForHeadword(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:void extractNPorPRPFromDependency(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParserQuery:boolean parse(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.common.ParsingThreadsafeProcessor:edu.stanford.nlp.parser.common.ParserQuery process(java.util.List)",
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParserQuery:boolean parseAndReport(java.util.List,java.io.PrintWriter)",
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:edu.stanford.nlp.trees.Tree parse(java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParserQuery:boolean parse(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.shiftreduce.PerceptronModel$TrainTreeProcessor:edu.stanford.nlp.util.Pair process(java.lang.Integer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.shiftreduce.PerceptronModel$TrainTreeProcessor:java.lang.Object process(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.lang.String apply(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void trainAndSaveModel(edu.stanford.nlp.tagger.maxent.TaggerConfig)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTraining(edu.stanford.nlp.tagger.maxent.TaggerConfig)"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter:void prettyPrint(java.io.PrintWriter,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter:void prettyPrint(java.io.PrintWriter)"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter$CounterView:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter$CounterView:int hashCode()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.GeneralizedCounter$CounterView:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter$OneDimensionalCounterView:int hashCode()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter$Entry:int hashCode()"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter$OneDimensionalCounterView:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter$Entry:boolean equals(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter$OneDimensionalCounterView:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter$Entry:java.lang.String toString()"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:java.util.List RuleList(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:void updateExpressionExtractor(edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor,java.io.Reader)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor getExpressionExtractor(edu.stanford.nlp.ling.tokensregex.Env,java.io.Reader)"
        ]
    },
    "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:void makeBlock(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:void makeInitialBlocks()",
            "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:void minimize()"
        ]
    },
    "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:void minimize()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:edu.stanford.nlp.fsm.TransducerGraph minimizeFA(edu.stanford.nlp.fsm.TransducerGraph)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode,edu.stanford.nlp.trees.GrammaticalStructure$Extras,boolean,java.util.function.Predicate,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.BasicRelationFeatureFactory:void addDependencyPathFeatures(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.ie.machinereading.structure.RelationMention,edu.stanford.nlp.ie.machinereading.structure.EntityMention,edu.stanford.nlp.ie.machinereading.structure.EntityMention,java.util.List,java.util.List,java.util.logging.Logger)",
            "edu.stanford.nlp.dcoref.CoNLLMentionExtractor:edu.stanford.nlp.dcoref.Document nextDoc()",
            "edu.stanford.nlp.pipeline.DeterministicCorefAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode,edu.stanford.nlp.trees.GrammaticalStructure$Extras,boolean)",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode,edu.stanford.nlp.trees.GrammaticalStructure$Extras,java.util.function.Predicate)",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.Tree,boolean)",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode,boolean,boolean,java.util.function.Predicate)"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void <init>(edu.stanford.nlp.trees.Tree,java.util.function.Predicate)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructureFactory:edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure newGrammaticalStructure(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void <init>(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper$GsIterator:void <init>(edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper:java.util.Iterator iterator()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.TestOptions:edu.stanford.nlp.trees.TreePrint treePrint(edu.stanford.nlp.parser.lexparser.TreebankLangParserParams)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:double testOnTreebank(edu.stanford.nlp.trees.Treebank)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:edu.stanford.nlp.trees.TreePrint getTreePrint()",
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.TreePrint getTreePrint()"
        ]
    },
    "edu.stanford.nlp.sentiment.SentimentCostAndGradient:edu.stanford.nlp.sentiment.SentimentCostAndGradient$ModelDerivatives scoreDerivatives(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient:void calculate(double[])",
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient:edu.stanford.nlp.sentiment.SentimentCostAndGradient$ModelDerivatives access$000(edu.stanford.nlp.sentiment.SentimentCostAndGradient,java.util.List)"
        ]
    },
    "edu.stanford.nlp.sentiment.Evaluate:void populatePredictedLabels(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.AbstractEvaluate:void eval(java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.dvparser.DVParserCostAndGradient:double score(edu.stanford.nlp.trees.Tree,java.util.IdentityHashMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.DVParserCostAndGradient$ScoringProcessor:edu.stanford.nlp.util.Pair process(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.parser.dvparser.DVParserCostAndGradient:edu.stanford.nlp.trees.DeepTree getHighestScoringTree(edu.stanford.nlp.trees.Tree,double)",
            "edu.stanford.nlp.parser.dvparser.DVModelReranker$Query:double score(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recountTree(edu.stanford.nlp.trees.Tree,boolean,java.util.IdentityHashMap,java.util.IdentityHashMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recalculateTemporaryBetas(edu.stanford.nlp.trees.Tree,boolean,java.util.Map,edu.stanford.nlp.util.TwoDimensionalMap,edu.stanford.nlp.util.ThreeDimensionalMap)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recalculateMergedBetas(java.util.Map)"
        ]
    },
    "edu.stanford.nlp.simple.Sentence:edu.stanford.nlp.semgraph.SemanticGraph dependencyGraph(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Sentence:edu.stanford.nlp.semgraph.SemanticGraph dependencyGraph(edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Sentence:edu.stanford.nlp.semgraph.SemanticGraph dependencyGraph()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.ie.util.RelationTriple lambda$fromProto$58(java.util.List,edu.stanford.nlp.pipeline.CoreNLPProtos$OpenIETriple)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Sentence:edu.stanford.nlp.ie.util.RelationTriple lambda$openieTriples$104(java.util.List,edu.stanford.nlp.pipeline.CoreNLPProtos$OpenIETriple)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Document:edu.stanford.nlp.pipeline.Annotation asAnnotation()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runNER(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runOpenie(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:java.util.Map coref(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runParse(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:java.lang.String xml(java.util.function.Function[])",
            "edu.stanford.nlp.simple.Document:java.lang.String xmlMinified(java.util.function.Function[])",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runRegexner(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runPOS(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runDepparse(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:java.lang.String json(java.util.function.Function[])",
            "edu.stanford.nlp.simple.Sentence:edu.stanford.nlp.util.CoreMap asCoreMap(java.util.function.Function[])",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runNatlog(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:java.lang.String jsonMinified(java.util.function.Function[])",
            "edu.stanford.nlp.simple.SentenceAlgorithms:void unescapeHTML()",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runLemma(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.pipeline.Annotation readUndelimited(java.io.File)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.util.Pair read(java.io.InputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLPClient$2:void run()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recountOutside(edu.stanford.nlp.trees.Tree,java.util.IdentityHashMap,java.util.IdentityHashMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void recountTree(edu.stanford.nlp.trees.Tree,boolean,java.util.IdentityHashMap,java.util.IdentityHashMap,java.util.IdentityHashMap,java.util.IdentityHashMap)"
        ]
    },
    "edu.stanford.nlp.pipeline.JSONOutputter:void lambda$null$168(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.pipeline.AnnotationOutputter$Options,edu.stanford.nlp.pipeline.JSONOutputter$Writer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.TreePrint:void printTree(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TreePrint:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.pipeline.XMLOutputter:void addConstituentTreeInfo(nu.xom.Element,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreePrint)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.XMLOutputter:nu.xom.Document annotationToDoc(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.pipeline.AnnotationOutputter$Options)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:boolean parse(edu.stanford.nlp.parser.lexparser.HTKLatticeReader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.HTKLatticeReader:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.pipeline.TextOutputter:void print(edu.stanford.nlp.pipeline.Annotation,java.io.PrintWriter,edu.stanford.nlp.pipeline.AnnotationOutputter$Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.TextOutputter:void prettyPrint(edu.stanford.nlp.pipeline.Annotation,java.io.PrintWriter,edu.stanford.nlp.pipeline.StanfordCoreNLP)",
            "edu.stanford.nlp.pipeline.TextOutputter:void print(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream,edu.stanford.nlp.pipeline.AnnotationOutputter$Options)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:void displayTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreePrint,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapSequenceMatcher:void annotateGroup(java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.CoordinationTransformer:edu.stanford.nlp.trees.Tree changeSbarToPP(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.CoordinationTransformer:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.CoordinationTransformer:edu.stanford.nlp.trees.Tree prepCCTransform(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.CoordinationTransformer:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.CoordinationTransformer:edu.stanford.nlp.trees.Tree removeXOverX(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.CoordinationTransformer:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.CoordinationTransformer:edu.stanford.nlp.trees.Tree rearrangeNowThat(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.CoordinationTransformer:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.CoordinationTransformer:edu.stanford.nlp.trees.Tree SQflatten(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.CoordinationTransformer:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.QPTreeTransformer:edu.stanford.nlp.trees.Tree QPtransform(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.QPTreeTransformer:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.DependencyTreeTransformer:edu.stanford.nlp.trees.Tree stripEmptyNode(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.DependencyTreeTransformer:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.CTBErrorCorrectingTreeNormalizer:edu.stanford.nlp.trees.Tree normalizeWholeTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreeFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.PennTreeReader:edu.stanford.nlp.trees.Tree readTree()"
        ]
    },
    "edu.stanford.nlp.trees.CoordinationTransformer:edu.stanford.nlp.trees.Tree UCPtransform(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.CoordinationTransformer:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.CoordinationTransformer:edu.stanford.nlp.trees.Tree MWETransform(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.CoordinationTransformer:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.InputPanel$3:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.CoordinationTransformer:edu.stanford.nlp.trees.Tree moveRB(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.CoordinationTransformer:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.CoordinationTransformer:edu.stanford.nlp.trees.Tree combineConjp(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.CoordinationTransformer:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:edu.stanford.nlp.trees.Tree lambda$processPatternOnTrees$360(edu.stanford.nlp.trees.tregex.TregexPattern,edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:void <init>(edu.stanford.nlp.pipeline.StanfordCoreNLP,boolean,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.roth.RothCONLL04Reader:void <init>()",
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:void <init>(edu.stanford.nlp.pipeline.StanfordCoreNLP,boolean,java.lang.String)",
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:void <init>()"
        ]
    },
    "edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer$NPTmpAdvRetainingTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer:void <init>(int,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer:void <init>()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void <init>(edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.parser.lexparser.Lexicon,edu.stanford.nlp.parser.common.ParserGrammar)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void <init>(edu.stanford.nlp.parser.lexparser.LexicalizedParser)",
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.TreePrint:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.JSONOutputter:void lambda$null$168(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.pipeline.AnnotationOutputter$Options,edu.stanford.nlp.pipeline.JSONOutputter$Writer)",
            "edu.stanford.nlp.pipeline.AnnotationOutputter:void <clinit>()",
            "edu.stanford.nlp.trees.AbstractCollinsHeadFinder:edu.stanford.nlp.trees.Tree determineNonTrivialHead(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void construct(java.util.Properties,boolean,edu.stanford.nlp.pipeline.AnnotatorImplementations)"
        ]
    },
    "edu.stanford.nlp.trees.TreePrint:void <init>(java.lang.String,edu.stanford.nlp.trees.TreebankLanguagePack)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.TregexPattern:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser loadModel()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:void <init>(edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void <init>(edu.stanford.nlp.international.morph.MorphoFeatureSpecification,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.HTKLatticeReader:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.shiftreduce.ShiftReduceOptions:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:edu.stanford.nlp.parser.shiftreduce.ShiftReduceOptions buildTrainingOptions(java.lang.String,java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser loadModel(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.CacheParseHypotheses:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.GrammaticalStructure:java.util.function.Function loadParser(java.lang.String,java.lang.String,boolean)",
            "edu.stanford.nlp.parser.dvparser.DVParser:void main(java.lang.String[])",
            "edu.stanford.nlp.sentiment.BuildBinarizedDataset:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser loadModel(java.lang.String,java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.FactoredLexicon:edu.stanford.nlp.parser.lexparser.Options getOptions(edu.stanford.nlp.international.Language)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:void <init>(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:void <init>()",
            "edu.stanford.nlp.pipeline.DeterministicCorefAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.hcoref.CorefDocMaker:edu.stanford.nlp.trees.HeadFinder getHeadFinder(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.CorefDocMaker:void <init>(java.util.Properties,edu.stanford.nlp.hcoref.data.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.dcoref.MentionExtractor:void <init>(edu.stanford.nlp.dcoref.Dictionaries,edu.stanford.nlp.dcoref.Semantics)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.ACEMentionExtractor:void <init>(edu.stanford.nlp.dcoref.Dictionaries,java.util.Properties,edu.stanford.nlp.dcoref.Semantics)",
            "edu.stanford.nlp.pipeline.DeterministicCorefAnnotator:void <init>(java.util.Properties)",
            "edu.stanford.nlp.dcoref.MUCMentionExtractor:void <init>(edu.stanford.nlp.dcoref.Dictionaries,java.util.Properties,edu.stanford.nlp.dcoref.Semantics)",
            "edu.stanford.nlp.dcoref.CoNLLMentionExtractor:void <init>(edu.stanford.nlp.dcoref.Dictionaries,java.util.Properties,edu.stanford.nlp.dcoref.Semantics)"
        ]
    },
    "edu.stanford.nlp.pipeline.MentionAnnotator:edu.stanford.nlp.trees.HeadFinder getHeadFinder(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.MentionAnnotator:void <init>(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void <init>(edu.stanford.nlp.trees.Tree,java.util.function.Predicate)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.EnglishGrammaticalStructureFactory:edu.stanford.nlp.trees.EnglishGrammaticalStructure newGrammaticalStructure(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void <init>(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.FilePanel$1:void mouseClicked(java.awt.event.MouseEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.gui.TregexGUI:void doTdiff()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.TregexGUI:void actionPerformed(java.awt.event.ActionEvent)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.InputPanel$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.gui.InputPanel:edu.stanford.nlp.trees.tregex.gui.InputPanel$TRegexGUITreeVisitor getMatchTreeVisitor(java.lang.String,java.lang.Thread)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.InputPanel:edu.stanford.nlp.trees.tregex.gui.InputPanel$TRegexGUITreeVisitor access$100(edu.stanford.nlp.trees.tregex.gui.InputPanel,java.lang.String,java.lang.Thread)"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void correctDependencies(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:java.util.List typedDependencies(edu.stanford.nlp.trees.GrammaticalStructure$Extras)"
        ]
    },
    "edu.stanford.nlp.pipeline.SentenceAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runNER(java.util.Properties)",
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runParse(java.util.Properties)",
            "edu.stanford.nlp.pipeline.NERCombinerAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runOpenie(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runRegexner(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runPOS(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runDepparse(java.util.Properties)",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runNatlog(java.util.Properties)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runLemma(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.pipeline.SentenceAnnotator$AnnotatorProcessor:edu.stanford.nlp.util.CoreMap process(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.SentenceAnnotator$AnnotatorProcessor:java.lang.Object process(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.fsm.TransducerGraph:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void addRule(edu.stanford.nlp.parser.lexparser.IntDependency,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammarExtractor:edu.stanford.nlp.parser.lexparser.DependencyGrammar formResult()",
            "edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams$1:edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar formResult()"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.util.Map runPOSNEROnTokens(java.util.List,java.lang.String,boolean,java.lang.String,boolean,java.lang.String,edu.stanford.nlp.patterns.PatternFactory$PatternType)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.util.Pair processSents(java.util.Properties,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.util.Map runPOSNERParseOnTokens(java.util.Map,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.util.Pair processSents(java.util.Properties,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.dcoref.MentionExtractor:edu.stanford.nlp.pipeline.StanfordCoreNLP loadStanfordProcessor(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.ACEMentionExtractor:void <init>(edu.stanford.nlp.dcoref.Dictionaries,java.util.Properties,edu.stanford.nlp.dcoref.Semantics)",
            "edu.stanford.nlp.dcoref.MUCMentionExtractor:void <init>(edu.stanford.nlp.dcoref.Dictionaries,java.util.Properties,edu.stanford.nlp.dcoref.Semantics)",
            "edu.stanford.nlp.dcoref.CoNLLMentionExtractor:void <init>(edu.stanford.nlp.dcoref.Dictionaries,java.util.Properties,edu.stanford.nlp.dcoref.Semantics)"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP:void <init>(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void main(java.lang.String[])",
            "edu.stanford.nlp.pipeline.StanfordCoreNLPServer:edu.stanford.nlp.pipeline.StanfordCoreNLP mkStanfordCoreNLP(java.util.Properties)",
            "edu.stanford.nlp.ie.machinereading.domains.roth.RothCONLL04Reader:void main(java.lang.String[])",
            "edu.stanford.nlp.pipeline.ColumnDataClassifierAnnotator:void main(java.lang.String[])",
            "edu.stanford.nlp.sentiment.SentimentPipeline:void main(java.lang.String[])",
            "edu.stanford.nlp.naturalli.OpenIE:void main(java.lang.String[])",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:int tokenize(java.util.Iterator,java.lang.String,boolean,boolean,java.lang.String,boolean,java.lang.String,boolean,int,java.io.File,java.util.Map,int,edu.stanford.nlp.patterns.PatternFactory$PatternType)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void <init>()",
            "edu.stanford.nlp.pipeline.CustomAnnotationSerializer:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.hcoref.CorefDocMaker:edu.stanford.nlp.pipeline.StanfordCoreNLP loadStanfordProcessor(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.CorefDocMaker:void <init>(java.util.Properties,edu.stanford.nlp.hcoref.data.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.hcoref.CorefDocMaker:edu.stanford.nlp.hcoref.data.Document makeDocument(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.CorefAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.hcoref.CorefSystem:java.util.Map coref(edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.scoref.StatisticalCorefSystem:void annotate(edu.stanford.nlp.pipeline.Annotation,boolean)"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void getExtras(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:void getExtraDeps(java.util.List,java.util.function.Predicate,edu.stanford.nlp.graph.DirectedMultiGraph)"
        ]
    },
    "edu.stanford.nlp.graph.ConnectedComponents:java.util.List getConnectedComponents(edu.stanford.nlp.graph.Graph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.List getConnectedComponents()"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$SearchNodeIterator:void initialize()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$SearchNodeIterator:void <init>()"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.util.List getPathToRoot(edu.stanford.nlp.ling.IndexedWord,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.List getPathToRoot(edu.stanford.nlp.ling.IndexedWord,java.util.List)",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.List getPathToRoot(edu.stanford.nlp.ling.IndexedWord)"
        ]
    },
    "edu.stanford.nlp.dcoref.MentionExtractor:void findSyntacticRelations(edu.stanford.nlp.trees.Tree,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.MentionExtractor:java.util.List arrange(edu.stanford.nlp.pipeline.Annotation,java.util.List,java.util.List,java.util.List,boolean)"
        ]
    },
    "edu.stanford.nlp.trees.international.negra.NegraPennTreeReaderFactory:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.Trees:edu.stanford.nlp.trees.Tree readTree(java.lang.String,edu.stanford.nlp.trees.TreeFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Trees:edu.stanford.nlp.trees.Tree readTree(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.FilteringTreeReader:edu.stanford.nlp.trees.Tree readTree()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Tree:edu.stanford.nlp.trees.Tree valueOf(java.lang.String,edu.stanford.nlp.trees.TreeReaderFactory)",
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:edu.stanford.nlp.trees.Tree primeNextTree()",
            "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader,java.lang.String)",
            "edu.stanford.nlp.trees.MemoryTreebank:void processFile(java.io.File)",
            "edu.stanford.nlp.trees.FilteringTreeReader:edu.stanford.nlp.trees.Tree readTree()"
        ]
    },
    "edu.stanford.nlp.trees.TreeFunctions:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.pennchinese.FragDiscardingPennTreeReader:edu.stanford.nlp.trees.Tree readTree()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Tree:edu.stanford.nlp.trees.Tree valueOf(java.lang.String,edu.stanford.nlp.trees.TreeReaderFactory)",
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:edu.stanford.nlp.trees.Tree primeNextTree()",
            "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader,java.lang.String)",
            "edu.stanford.nlp.trees.MemoryTreebank:void processFile(java.io.File)",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:void AddTreesFromFile(java.lang.String,java.lang.String,edu.stanford.nlp.trees.Treebank)"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:void AddTreesFromFile(java.lang.String,java.lang.String,edu.stanford.nlp.trees.Treebank)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.PennTreeReader:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.hebrew.HebrewTreeReaderFactory:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.MetaClass:java.lang.Object cast(java.lang.String,java.lang.reflect.Type)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.MetaClass:java.lang.Object cast(java.lang.String,java.lang.reflect.Type)",
            "edu.stanford.nlp.util.PropertiesUtils:java.lang.Object get(java.util.Properties,java.lang.String,java.lang.Object,java.lang.reflect.Type)",
            "edu.stanford.nlp.util.PropertiesUtils:double[] getDoubleArray(java.util.Properties,java.lang.String)",
            "edu.stanford.nlp.util.Execution:void fillField(java.lang.Object,java.lang.reflect.Field,java.lang.String)",
            "edu.stanford.nlp.util.MetaClass:java.lang.Object castWithoutKnowingType(java.lang.String)",
            "edu.stanford.nlp.pipeline.DependencyParseAnnotator:void <init>(java.util.Properties)",
            "edu.stanford.nlp.util.PropertiesUtils:java.lang.String[] getStringArray(java.util.Properties,java.lang.String,java.lang.String[])",
            "edu.stanford.nlp.util.PropertiesUtils:java.lang.String[] getStringArray(java.util.Properties,java.lang.String)",
            "edu.stanford.nlp.pipeline.ParserAnnotator:void <init>(java.lang.String,java.util.Properties)",
            "edu.stanford.nlp.util.PropertiesUtils:int[] getIntArray(java.util.Properties,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.TreeTokenizerFactory$1:edu.stanford.nlp.trees.Tree getNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TreeTokenizerFactory$1:java.lang.Object getNext()"
        ]
    },
    "edu.stanford.nlp.trees.Tree:edu.stanford.nlp.trees.Tree valueOf(java.lang.String,edu.stanford.nlp.trees.TreeReaderFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Tree:edu.stanford.nlp.trees.Tree valueOf(java.lang.String)",
            "edu.stanford.nlp.trees.tregex.gui.TreeFromFile:edu.stanford.nlp.trees.Tree getTree()",
            "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$DocumentIterator:edu.stanford.nlp.trees.Tree wordsToParse(java.util.List)",
            "edu.stanford.nlp.parser.dvparser.CacheParseHypotheses:java.util.List convertToTrees(byte[])",
            "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$DocumentIterator:edu.stanford.nlp.trees.Tree wordsToParse(java.util.List)"
        ]
    },
    "edu.stanford.nlp.trees.Trees:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.ui.TreeJPanel:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.CollocationFinder:void <init>(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.WordNetConnection,edu.stanford.nlp.trees.HeadFinder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.CollocationFinder:void <init>(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.WordNetConnection)",
            "edu.stanford.nlp.trees.TreePrint:edu.stanford.nlp.trees.Tree getCollocationProcessedTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.HeadFinder)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceSentenceSegmenter:java.util.List tokenizeAndSegmentSentences(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument parseDocument(java.lang.String,boolean)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument parseDocument(java.lang.String,boolean,java.lang.String)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceSentenceSegmenter:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates getStartStates()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:boolean findMatchStartNoBacktracking(int,boolean)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:boolean findMatchStartBacktracking(int,boolean)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher:boolean findNextMatchingNode()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void correctWHAttachment(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void correctWHAttachment(edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLPServer$SemgrexHandler:void lambda$null$31(edu.stanford.nlp.semgraph.semgrex.SemgrexPattern,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.pipeline.JSONOutputter$Writer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.wordseg.Gale2007ChineseSegmenterFeatureFactory:void createTADetector()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.wordseg.Gale2007ChineseSegmenterFeatureFactory:java.util.Collection featuresCpC(edu.stanford.nlp.util.PaddedList,int)"
        ]
    },
    "edu.stanford.nlp.international.arabic.process.ArabicTokenizer:edu.stanford.nlp.ling.HasWord getNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.arabic.process.ArabicTokenizer:java.lang.Object getNext()"
        ]
    },
    "edu.stanford.nlp.dcoref.Mention:java.util.ArrayList getSingletonFeatures(edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Mention:void setSingleton(edu.stanford.nlp.classify.LogisticClassifier,edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Set descendants(edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:void insertSpecificIntoList(java.lang.String,edu.stanford.nlp.ling.IndexedWord,java.util.List)",
            "edu.stanford.nlp.hcoref.data.Mention:java.util.ArrayList getPostmodifiers()",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:edu.stanford.nlp.util.Pair leftRightMostChildVertices(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.hcoref.data.Mention:java.util.ArrayList getPremodifiers()",
            "edu.stanford.nlp.dcoref.Mention:java.util.ArrayList getPremodifiers()",
            "edu.stanford.nlp.dcoref.Mention:java.util.ArrayList getPostmodifiers()",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:void killNonRooted(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:edu.stanford.nlp.ling.IndexedWord leftMostChildVertice(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.ForwardEntailerSearchProblem:edu.stanford.nlp.util.Pair lambda$searchImplementation$16(edu.stanford.nlp.naturalli.ForwardEntailerSearchProblem$SearchState,edu.stanford.nlp.ling.IndexedWord)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Mention:java.util.ArrayList getSingletonFeatures(edu.stanford.nlp.hcoref.data.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Mention:void setSingleton(edu.stanford.nlp.classify.LogisticClassifier,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,java.util.Map)",
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)"
        ]
    },
    "edu.stanford.nlp.patterns.dep.ExtractPhraseFromPattern:java.util.Set descendants(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.List,java.util.List,boolean,java.util.function.Function,edu.stanford.nlp.util.CollectionValuedMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.dep.ExtractPhraseFromPattern:void printSubGraph(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.List,java.util.List,java.util.Collection,java.util.Collection,java.util.List,java.util.List,boolean,java.util.Collection,edu.stanford.nlp.semgraph.semgrex.SemgrexPattern,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.patterns.dep.ExtractPhraseFromPattern:java.util.Set getSemGrexPatternNodes(edu.stanford.nlp.semgraph.SemanticGraph,java.util.List,java.util.Collection,java.util.Collection,edu.stanford.nlp.semgraph.semgrex.SemgrexPattern,boolean,java.util.Collection,boolean,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.dep.ExtractPhraseFromPattern:void processSentenceForType(edu.stanford.nlp.semgraph.SemanticGraph,java.util.List,java.util.List,java.util.Collection,java.util.Collection,java.util.Collection,boolean,java.util.Collection,boolean)",
            "edu.stanford.nlp.patterns.dep.ApplyDepPatterns:java.util.Collection getMatchedTokensIndex(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.semgrex.SemgrexPattern,edu.stanford.nlp.patterns.DataInstance,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Mention:java.util.Collection getHeadChildren()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Mention:java.lang.String getRelation()"
        ]
    },
    "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:edu.stanford.nlp.util.IntPair getNPSpanOld(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequenceMatchResultExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequenceMatchResultExtractor:java.lang.Object apply(java.lang.Object)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$MultiTokenPatternExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.types.Value lambda$updateExtractRule$41(edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequenceMatchResultExtractor,edu.stanford.nlp.ling.tokensregex.MatchedExpression)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CompositeExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.types.Value lambda$updateExtractRule$39(edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequenceMatchResultExtractor,edu.stanford.nlp.ling.tokensregex.MatchedExpression)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$TokenPatternExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.types.Value lambda$updateExtractRule$40(edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequenceMatchResultExtractor,edu.stanford.nlp.ling.tokensregex.MatchedExpression)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$VarAssignmentExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AssignmentRule:void evaluate(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$WrappedExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequenceMatchResultExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Value attemptTypeConversion(edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue,edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$VarAssignmentExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$WrappedExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringMatchResultExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(java.util.regex.MatchResult)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$IfExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringMatchResultExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(java.util.regex.MatchResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringMatchResultExtractor:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$IfExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$WrappedExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$IfExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.trees.tregex.TregexParser:edu.stanford.nlp.trees.tregex.TregexPattern ModChild()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.TregexParser:edu.stanford.nlp.trees.tregex.TregexPattern ChildrenConj()",
            "edu.stanford.nlp.trees.tregex.TregexParser:edu.stanford.nlp.trees.tregex.TregexPattern ModChild()"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$Util:void finishThread()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood$Util$1$1:void run()"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood:void lambda$main$50(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader:edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$CoNLLDocument getNextDocument()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader:void main(java.lang.String[])",
            "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader:edu.stanford.nlp.hcoref.data.InputDoc nextDoc()"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void calculateSufficientStats(java.util.Map,edu.stanford.nlp.patterns.surface.PatternsForEachToken,java.lang.String,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.stats.Counter getPatterns(java.lang.String,java.util.Set,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.Counter,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.scoref.Clusterer:void trainPolicy(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.Clusterer:void doTraining(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.hcoref.md.CorefMentionFinder:void findHead(edu.stanford.nlp.util.CoreMap,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.md.HybridCorefMentionFinder:java.util.List findMentions(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)",
            "edu.stanford.nlp.hcoref.md.RuleBasedCorefMentionFinder:java.util.List filterPredictedMentions(java.util.List,edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)",
            "edu.stanford.nlp.hcoref.md.RuleBasedCorefMentionFinder:java.util.List findMentions(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.patterns.surface.PatternsForEachTokenInMemory:boolean save(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.stats.Counter getPatterns(java.lang.String,java.util.Set,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.Counter,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void saveModel()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass runNineYards(edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass,java.util.Properties,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void processSents(java.util.Map,java.lang.Boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.stats.Counter getPatterns(java.lang.String,java.util.Set,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.Counter,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$RedwoodChannels:void log(java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood$RedwoodChannels:void logf(java.lang.String,java.lang.Object[])",
            "edu.stanford.nlp.util.logging.Redwood$RedwoodChannels:void logf(edu.stanford.nlp.util.logging.Redwood$Flag,java.lang.String,java.lang.Object[])",
            "edu.stanford.nlp.util.logging.Redwood$RedwoodChannels:void err(java.lang.Object[])",
            "edu.stanford.nlp.util.logging.Redwood$RedwoodChannels:void fatal(java.lang.Object[])",
            "edu.stanford.nlp.pipeline.TokensRegexNERAnnotator:java.util.List readEntries(java.lang.String,java.util.Set,boolean,boolean,java.lang.String[],java.lang.String[],java.lang.String[])",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.util.Map)",
            "edu.stanford.nlp.util.logging.Redwood$RedwoodChannels:void info(java.lang.Object[])",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Iterable)",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Object)",
            "edu.stanford.nlp.util.logging.Redwood$RedwoodChannels:void warn(java.lang.Object[])",
            "edu.stanford.nlp.util.logging.Redwood$RedwoodChannels:void debug(java.lang.Object[])",
            "edu.stanford.nlp.pipeline.TokensRegexNERAnnotator:java.util.List readEntries(java.lang.String,java.lang.String[],java.lang.String[],java.util.List,edu.stanford.nlp.ling.tokensregex.matcher.TrieMap,java.lang.String,java.io.BufferedReader,java.util.Set,boolean,boolean)",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.pipeline.TokensRegexAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.Redwood:void logf(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood:void main(java.lang.String[])",
            "edu.stanford.nlp.util.logging.RedwoodPrintStream:void logf(java.lang.String,java.lang.Object[])",
            "edu.stanford.nlp.util.logging.Redwood$Util:void logf(java.lang.String,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.util.Pair processSents(java.util.Properties,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass run(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.patterns.surface.PatternsForEachTokenDB:void createIndexIfUsingDBAndNotExists()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.stats.Counter getPatterns(java.lang.String,java.util.Set,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.Counter,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$Util:void debug(java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Execution:java.lang.Class[] getVisibleClasses()",
            "edu.stanford.nlp.util.logging.Redwood:void main(java.lang.String[])",
            "edu.stanford.nlp.util.Execution:java.util.Map fillOptionsImpl(java.lang.Object[],java.lang.Class[],java.util.Properties,boolean)"
        ]
    },
    "edu.stanford.nlp.time.TimeAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.RedwoodPrintStream:void log(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.RedwoodPrintStream:void println(int)",
            "edu.stanford.nlp.util.logging.RedwoodPrintStream:void println(java.lang.Object)",
            "edu.stanford.nlp.util.logging.RedwoodPrintStream:void println(char[])",
            "edu.stanford.nlp.util.logging.RedwoodPrintStream:void println(java.lang.String)",
            "edu.stanford.nlp.util.logging.RedwoodPrintStream:void println()",
            "edu.stanford.nlp.util.logging.RedwoodPrintStream:void println(long)",
            "edu.stanford.nlp.util.logging.RedwoodPrintStream:void println(double)",
            "edu.stanford.nlp.util.logging.RedwoodPrintStream:void println(boolean)",
            "edu.stanford.nlp.util.logging.RedwoodPrintStream:void println(float)",
            "edu.stanford.nlp.util.logging.RedwoodPrintStream:void println(char)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$Util:void fatal(java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.data.CorefCluster:void printCorefCluster()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.CorefPrinter:void printFinalConllScore(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.StatisticalCorefSystem:void runOnConll()",
            "edu.stanford.nlp.hcoref.CorefSystem:void runCoref(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.util.List getAllFiles(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.util.Pair processSents(java.util.Properties,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood:void logf(edu.stanford.nlp.util.logging.Redwood$Flag,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:int tokenize(java.util.Iterator,java.lang.String,boolean,boolean,java.lang.String,boolean,java.lang.String,boolean,int,java.io.File,java.util.Map,int,edu.stanford.nlp.patterns.PatternFactory$PatternType)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.util.Pair processSents(java.util.Properties,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$Util:void err(java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Execution:void fillField(java.lang.Object,java.lang.reflect.Field,java.lang.String)",
            "edu.stanford.nlp.naturalli.ClauseSplitter:edu.stanford.nlp.naturalli.ClauseSplitter train(java.util.stream.Stream,java.util.Optional,java.util.Optional,edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$Featurizer)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void processFiles(java.lang.String,java.util.Collection,int,java.util.Properties,java.util.function.BiConsumer,java.util.function.BiConsumer,edu.stanford.nlp.pipeline.StanfordCoreNLP$OutputFormat)",
            "edu.stanford.nlp.util.Execution:java.util.Map fillOptionsImpl(java.lang.Object[],java.lang.Class[],java.util.Properties,boolean)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void run()",
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void lambda$processFiles$15(java.lang.String,java.util.function.BiConsumer,edu.stanford.nlp.util.MutableInteger,boolean,java.io.File,edu.stanford.nlp.util.MutableInteger,edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood:void lambda$endTrack$41(java.lang.String,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood:void endTrack(java.lang.String)",
            "edu.stanford.nlp.util.logging.Redwood:void attemptThreadControl(long,java.lang.Runnable)"
        ]
    },
    "edu.stanford.nlp.patterns.ConstantsAndVariables:void setUp(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ConstantsAndVariables:void <init>(java.util.Properties,java.util.Set,java.util.Map)",
            "edu.stanford.nlp.patterns.surface.CreatePatterns:void <init>(java.util.Properties,edu.stanford.nlp.patterns.ConstantsAndVariables)",
            "edu.stanford.nlp.patterns.ConstantsAndVariables:void <init>(java.util.Properties,java.util.Set,java.util.Map,java.util.Map)",
            "edu.stanford.nlp.patterns.ConstantsAndVariables:void <init>(java.util.Properties,java.lang.String,java.lang.Class)",
            "edu.stanford.nlp.patterns.ConstantsAndVariables:void <init>(java.util.Properties,java.util.Set,java.util.Map,java.util.Map,java.util.Map)",
            "edu.stanford.nlp.patterns.ConstantsAndVariables:void <init>(java.util.Properties,java.util.Map,java.util.Map,java.util.Map,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.stats.Counter runLabelSeedWords(java.util.Map,java.lang.Class,java.lang.String,java.util.Collection,edu.stanford.nlp.patterns.ConstantsAndVariables,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void setUpConstructor(java.util.Map,java.util.Map,boolean,java.util.Map,java.util.Map,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$FileHandler:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$2$1:void <init>(edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$2,java.lang.String,edu.stanford.nlp.util.logging.RedwoodConfiguration)",
            "edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$1$1:void <init>(edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$1,java.lang.String,edu.stanford.nlp.util.logging.RedwoodConfiguration)"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.util.Set enforceMinSupportRequirements(edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.stats.Counter getPatterns(java.lang.String,java.util.Set,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.Counter,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$Util:void runtimeException(java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Execution:void fillField(java.lang.Object,java.lang.reflect.Field,java.lang.String)",
            "edu.stanford.nlp.util.Execution:java.util.Map fillOptionsImpl(java.lang.Object[],java.lang.Class[],java.util.Properties,boolean)"
        ]
    },
    "edu.stanford.nlp.util.logging.RedwoodPrintStream:void logB(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.RedwoodPrintStream:void print(boolean)",
            "edu.stanford.nlp.util.logging.RedwoodPrintStream:void print(long)",
            "edu.stanford.nlp.util.logging.RedwoodPrintStream:void print(java.lang.String)",
            "edu.stanford.nlp.util.logging.RedwoodPrintStream:void log(java.lang.Object)",
            "edu.stanford.nlp.util.logging.RedwoodPrintStream:java.io.PrintStream append(char)",
            "edu.stanford.nlp.util.logging.RedwoodPrintStream:void print(float)",
            "edu.stanford.nlp.util.logging.RedwoodPrintStream:void print(char[])",
            "edu.stanford.nlp.util.logging.RedwoodPrintStream:void print(java.lang.Object)",
            "edu.stanford.nlp.util.logging.RedwoodPrintStream:void print(double)",
            "edu.stanford.nlp.util.logging.RedwoodPrintStream:java.io.PrintStream append(java.lang.CharSequence,int,int)",
            "edu.stanford.nlp.util.logging.RedwoodPrintStream:void print(int)",
            "edu.stanford.nlp.util.logging.RedwoodPrintStream:void print(char)",
            "edu.stanford.nlp.util.logging.RedwoodPrintStream:java.io.PrintStream append(java.lang.CharSequence)"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.util.Map readSeedWords(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.util.Map readSeedWords(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.scoref.PairwiseModelTrainer:void trainRanking(edu.stanford.nlp.scoref.PairwiseModel)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.StatisticalCorefTrainer:void doTraining(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$Util:void log(java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood:void main(java.lang.String[])",
            "edu.stanford.nlp.util.Execution:void fillField(java.lang.Object,java.lang.reflect.Field,java.lang.String)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLPServer:void run()",
            "edu.stanford.nlp.pipeline.StanfordCoreNLPServer$CoreNLPHandler:void handle(com.sun.net.httpserver.HttpExchange)",
            "edu.stanford.nlp.naturalli.ClauseSplitter:edu.stanford.nlp.naturalli.ClauseSplitter train(java.util.stream.Stream,java.util.Optional,java.util.Optional,edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$Featurizer)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void lambda$processFiles$15(java.lang.String,java.util.function.BiConsumer,edu.stanford.nlp.util.MutableInteger,boolean,java.io.File,edu.stanford.nlp.util.MutableInteger,edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.util.Execution:java.lang.Class[] getVisibleClasses()",
            "edu.stanford.nlp.pipeline.StanfordCoreNLPServer:void main(java.lang.String[])",
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void processFiles(java.lang.String,java.util.Collection,int,java.util.Properties,java.util.function.BiConsumer,java.util.function.BiConsumer,edu.stanford.nlp.pipeline.StanfordCoreNLP$OutputFormat)",
            "edu.stanford.nlp.naturalli.ClauseSplitter:void lambda$train$109(edu.stanford.nlp.naturalli.OpenIE,edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$Featurizer,java.util.Optional,edu.stanford.nlp.classify.WeightedDataset,java.util.concurrent.atomic.AtomicInteger,edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.Execution:java.util.Map fillOptionsImpl(java.lang.Object[],java.lang.Class[],java.util.Properties,boolean)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void run()",
            "edu.stanford.nlp.util.Execution:void exec(java.lang.Runnable,java.util.Properties,boolean)"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.util.List getThreadBatches(java.util.List,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.stats.Counter runLabelSeedWords(java.util.Map,java.lang.Class,java.lang.String,java.util.Collection,edu.stanford.nlp.patterns.ConstantsAndVariables,boolean)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$Util:void warn(java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Execution:java.lang.Class[] getVisibleClasses()",
            "edu.stanford.nlp.pipeline.StanfordCoreNLPClient:void lambda$shell$231(edu.stanford.nlp.pipeline.StanfordCoreNLPClient,edu.stanford.nlp.pipeline.StanfordCoreNLP$OutputFormat,java.lang.String)",
            "edu.stanford.nlp.util.Execution:java.util.Map fillOptionsImpl(java.lang.Object[],java.lang.Class[],java.util.Properties,boolean)",
            "edu.stanford.nlp.util.Execution:java.lang.Class filePathToClass(java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.scoref.SimpleLinearClassifier:void printWeightVector(java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.Clusterer:void doTraining(java.lang.String)",
            "edu.stanford.nlp.scoref.Clusterer:void writeModel(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.scoref.SimpleLinearClassifier:void printWeightVector()",
            "edu.stanford.nlp.scoref.PairwiseModel:void writeModel(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood:void lambda$main$49(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.CorefPrinter:void printMentionDetection(java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.Preprocessor:void preprocess(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,edu.stanford.nlp.classify.LogisticClassifier,edu.stanford.nlp.trees.HeadFinder)"
        ]
    },
    "edu.stanford.nlp.naturalli.Util:void dumpAccuracy(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ClauseSplitter:edu.stanford.nlp.naturalli.ClauseSplitter train(java.util.stream.Stream,java.util.Optional,java.util.Optional,edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$Featurizer)"
        ]
    },
    "edu.stanford.nlp.hcoref.md.CorefMentionFinder:edu.stanford.nlp.trees.Tree funkyFindLeafWithApproximateSpan(edu.stanford.nlp.trees.Tree,java.lang.String,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:edu.stanford.nlp.trees.Tree findSyntacticHead(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.trees.Tree,java.util.List)"
        ]
    },
    "edu.stanford.nlp.patterns.surface.PatternToken:void <init>(java.lang.String,boolean,boolean,int,java.lang.String,boolean,boolean,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.surface.PatternToken:edu.stanford.nlp.patterns.surface.PatternToken copy()",
            "edu.stanford.nlp.patterns.surface.SurfacePatternFactory:java.util.Set getContext(java.util.List,int,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.patterns.surface.CreatePatterns:void getAllPatterns(java.util.Map,java.util.Properties,edu.stanford.nlp.patterns.ConstantsAndVariables$PatternForEachTokenWay)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void processSents(java.util.Map,java.lang.Boolean)"
        ]
    },
    "edu.stanford.nlp.scoref.PairwiseModelTrainer:java.util.List getAnaphoricityExamples(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.PairwiseModelTrainer:void trainClassification(edu.stanford.nlp.scoref.PairwiseModel,boolean)",
            "edu.stanford.nlp.scoref.PairwiseModelTrainer:void test(edu.stanford.nlp.scoref.PairwiseModel,java.lang.String,boolean)"
        ]
    },
    "edu.stanford.nlp.hcoref.CorefPrinter:void printScoreSummary(java.lang.String,java.util.logging.Logger,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.StatisticalCorefSystem:void runOnConll()",
            "edu.stanford.nlp.hcoref.CorefSystem:void runCoref(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.patterns.Data:void setRatioGoogleNgramFreqWithDataFreq()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.Data:void computeRawFreqIfNull(java.util.Map,int)"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.util.Map readSeedWords(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass run(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.scoref.PairwiseModelTrainer:void trainClassification(edu.stanford.nlp.scoref.PairwiseModel,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.StatisticalCorefTrainer:void doTraining(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.util.logging.JavaUtilLoggingAdaptor$RedwoodHandler:void publish(java.util.logging.LogRecord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.Preprocessor:void findTwinMentionsStrict(edu.stanford.nlp.hcoref.data.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.Preprocessor:void findTwinMentions(edu.stanford.nlp.hcoref.data.Document,boolean)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$Util:void forceTrack(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ClauseSplitter:edu.stanford.nlp.naturalli.ClauseSplitter train(java.util.stream.Stream,java.util.Optional,java.util.Optional,edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$Featurizer)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood:void forceTrack(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood:void main(java.lang.String[])",
            "edu.stanford.nlp.util.logging.Redwood:void lambda$main$49(int)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$Util:void startTrack(java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood$Util:void threadAndRun(java.lang.String,java.lang.Iterable,int)",
            "edu.stanford.nlp.util.Execution:void exec(java.lang.Runnable,java.util.Properties,boolean)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood:void forceTrack()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.Redwood:void startThreads(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood:void main(java.lang.String[])",
            "edu.stanford.nlp.util.logging.Redwood$Util:void startThreads(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotationPipeline$1:void lambda$next$36(edu.stanford.nlp.pipeline.Annotation,java.util.function.Consumer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood$Util:void threadAndRun(java.lang.String,java.lang.Iterable,int)",
            "edu.stanford.nlp.util.logging.Redwood$Util$1$1:void run()"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood:void endTrack()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood:void main(java.lang.String[])",
            "edu.stanford.nlp.util.logging.Redwood$Util:void endTrack()"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$Util:void endTrackIfOpen(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.Redwood$Util:void endTracksUntil(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood$Util:void endTracksTo(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$Util:void endTrack(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood$Util:void threadAndRun(java.lang.String,java.lang.Iterable,int)",
            "edu.stanford.nlp.naturalli.ClauseSplitter:edu.stanford.nlp.naturalli.ClauseSplitter train(java.util.stream.Stream,java.util.Optional,java.util.Optional,edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$Featurizer)",
            "edu.stanford.nlp.util.logging.Redwood$Util:void endTracksTo(java.lang.String)",
            "edu.stanford.nlp.util.Execution:void exec(java.lang.Runnable,java.util.Properties,boolean)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void finishTraining()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter getSegmenterDataFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void <init>(edu.stanford.nlp.parser.lexparser.TagProjection,edu.stanford.nlp.parser.lexparser.TreebankLangParserParams,boolean,boolean,boolean,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void <init>(edu.stanford.nlp.parser.lexparser.TreebankLangParserParams,boolean,boolean,boolean,boolean,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void readData(java.io.BufferedReader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:java.util.List treeToEvents(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:double evaluateCoverage(java.util.Collection,java.util.Set,java.util.Set,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:void addAll(java.util.List,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void addAll(java.util.List)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Temporal:java.lang.String getTidString(edu.stanford.nlp.time.SUTime$TimeIndex)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Temporal:java.util.Map getTimexAttributes(edu.stanford.nlp.time.SUTime$TimeIndex)",
            "edu.stanford.nlp.time.SUTime$Range:java.util.Map getTimexAttributes(edu.stanford.nlp.time.SUTime$TimeIndex)",
            "edu.stanford.nlp.time.SUTime$RelativeTime:java.util.Map getTimexAttributes(edu.stanford.nlp.time.SUTime$TimeIndex)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TTags:void setClosedClassTags(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void init(edu.stanford.nlp.tagger.maxent.TaggerConfig)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Temporal:java.lang.String getTfidString(edu.stanford.nlp.time.SUTime$TimeIndex)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$RelativeTime:java.util.Map getTimexAttributes(edu.stanford.nlp.time.SUTime$TimeIndex)"
        ]
    },
    "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void access$100(edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraphEdge)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$3:void lambda$applyTo$4(edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$6:void lambda$applyTo$7(edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$5:void lambda$applyTo$6(edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$4:void lambda$applyTo$5(edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.util.Lazy$2:java.lang.Object compute()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Lazy:java.lang.Object get()"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.TokenSequencePattern:edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher getMultiPatternMatcher(edu.stanford.nlp.ling.tokensregex.TokenSequencePattern[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.TokensRegexNERAnnotator:edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher createPatternMatcher(java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.TokensRegexNERAnnotator:void <init>(java.lang.String,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$MultiTokenPatternExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule createMultiTokenPatternRule(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule,java.util.List)"
        ]
    },
    "edu.stanford.nlp.classify.Dataset:void add(java.util.Collection,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.Dataset:void add(edu.stanford.nlp.ling.Datum)",
            "edu.stanford.nlp.classify.LogisticClassifier:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.classify.Dataset getDataset(edu.stanford.nlp.objectbank.ObjectBank,edu.stanford.nlp.classify.Dataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void adapt(edu.stanford.nlp.objectbank.ObjectBank,edu.stanford.nlp.classify.Dataset)"
        ]
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.classify.Dataset getDataset(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.classify.Dataset getDataset(edu.stanford.nlp.objectbank.ObjectBank,edu.stanford.nlp.classify.Dataset)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:void train(java.util.Collection,edu.stanford.nlp.sequences.DocumentReaderAndWriter)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFFeatureExporter:void printFeatures(java.lang.String,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void dumpFeatures(java.util.Collection)",
            "edu.stanford.nlp.ie.crf.CRFFeatureExporter:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFCliqueTree:double prob(int,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery lexicalizedParserQuery()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.HTKLatticeReader:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.common.ParserQuery parserQuery()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.DVParser:java.util.List getTopParsesForOneTree(edu.stanford.nlp.parser.lexparser.LexicalizedParser,int,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreeTransformer)",
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:double testOnTreebank(edu.stanford.nlp.trees.Treebank)",
            "edu.stanford.nlp.parser.common.ParsingThreadsafeProcessor:edu.stanford.nlp.parser.common.ParserQuery process(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.ParseFiles:void parseFiles(java.lang.String[],int,boolean,edu.stanford.nlp.process.TokenizerFactory,java.lang.String,java.lang.String,java.util.function.Function,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Tree parseTree(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Tree parse(java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifierNonlinear:double[] trainWeights(int[][][][],int[][],edu.stanford.nlp.optimization.Evaluator[],int,double[][][][])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void train(java.util.Collection,edu.stanford.nlp.sequences.DocumentReaderAndWriter)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFloatFunction:void <init>(int[][][][],int[][],edu.stanford.nlp.util.Index,int,edu.stanford.nlp.util.Index,java.util.List,int[],java.lang.String,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifierFloat:double[] trainWeights(int[][][][],int[][],edu.stanford.nlp.optimization.Evaluator[],int,double[][][][])"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFloatFunction:void <init>(int[][][][],int[][],edu.stanford.nlp.util.Index,int,edu.stanford.nlp.util.Index,java.util.List,int[],int,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFloatFunction:void <init>(int[][][][],int[][],edu.stanford.nlp.util.Index,int,edu.stanford.nlp.util.Index,java.util.List,int[],java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.util.Pair readEntityMatrices(java.lang.String,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void loadTagIndex()"
        ]
    },
    "edu.stanford.nlp.classify.LogConditionalObjectiveFunction:void calculate(double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.AbstractCachingDiffFunction:void ensure(double[])"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:double score(java.io.BufferedReader,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifierEvaluator:double evaluate(double[])"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:double score(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassChunkEvalStats:void main(java.lang.String[])",
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:double score(java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:edu.stanford.nlp.trees.Tree getBestDependencyParse()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:edu.stanford.nlp.trees.Tree getBestParse(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:edu.stanford.nlp.trees.Tree getBestParse()"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:java.util.List getTopFeatures(double,boolean,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.MultiClassChunkEvalStats:void <init>(edu.stanford.nlp.util.Index,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.sequences.SequenceModel getSequenceModel(edu.stanford.nlp.util.Triple,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classifyMaxEnt(java.util.List,edu.stanford.nlp.util.Triple)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.sequences.SequenceModel getSequenceModel(java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.crf.TestSequenceModel:void <init>(edu.stanford.nlp.ie.crf.CRFCliqueTree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.sequences.SequenceModel getSequenceModel(edu.stanford.nlp.util.Triple,java.util.List)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classifyGibbs(java.util.List,edu.stanford.nlp.util.Triple)"
        ]
    },
    "edu.stanford.nlp.classify.LogisticClassifier:double probabilityOf(edu.stanford.nlp.ling.Datum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Mention:void setSingleton(edu.stanford.nlp.classify.LogisticClassifier,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.dcoref.Mention:void setSingleton(edu.stanford.nlp.classify.LogisticClassifier,edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.classify.LogisticClassifier:java.lang.Object classOf(edu.stanford.nlp.ling.Datum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:java.lang.String classOf(edu.stanford.nlp.ling.Datum)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:void testExample(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset,java.util.List,edu.stanford.nlp.stats.Counter,int)"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:void <init>(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats$MultiClassStringLabelStats:void <init>(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction:double expectedCountsAndValueForADoc(double[][],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction:double expectedAndEmpiricalCountsAndValueForADoc(double[][],double[][],int)",
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction$ExpectationThreadsafeProcessor:edu.stanford.nlp.util.Pair process(edu.stanford.nlp.util.Pair)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction:double expectedCountsForADoc(double[][],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction:double valueForADoc(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction:double valueAt(double[],double,int[])"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TestSentence:double scoreOf(int[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.TestSentence:double[] getHistories(java.lang.String[],edu.stanford.nlp.tagger.maxent.History,java.util.List,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TestSentence:double[] getHistories(java.lang.String[],edu.stanford.nlp.tagger.maxent.History)"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassPrecisionRecallStats:java.lang.String getDescription(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassChunkEvalStats:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassPrecisionRecallStats:double getFMeasure(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:java.lang.String getConllEvalString(java.util.List,boolean)",
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallStats:java.lang.String getF1Description(int,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.classify.WeightedDataset:void add(java.util.Collection,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.WeightedDataset:void add(edu.stanford.nlp.ling.Datum,float)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.WeightedDataset:void add(edu.stanford.nlp.ling.Datum)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern$ConjEndState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern$GroupEndState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern$GroupStartState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$State:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern$SeqStartState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern$BackRefState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$State:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern$SeqEndState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern$NodePatternState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$State:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern$BackRefState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult$MatchedGroup,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$BackRefState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classify(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.BasicEntityExtractor:void runTestSet(java.util.List)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier$2:java.util.List process(java.util.List)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List segmentString(java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.lang.String classifyToString(java.lang.String,java.lang.String,boolean)",
            "edu.stanford.nlp.ie.machinereading.BasicEntityExtractor:edu.stanford.nlp.util.CoreMap extractEntities(edu.stanford.nlp.util.CoreMap,int)",
            "edu.stanford.nlp.international.arabic.process.ArabicSegmenter:void evaluate(java.io.PrintWriter)",
            "edu.stanford.nlp.ie.crf.CRFBiasedClassifier:java.util.List classify(java.util.List)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classifyWithGlobalInformation(java.util.List,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.international.arabic.process.ArabicSegmenter:java.lang.String segmentString(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List getCliqueTrees(java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:void printFactorTableDocument(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void printFactorTableDocuments(edu.stanford.nlp.objectbank.ObjectBank)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classifyMaxEnt(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classify(java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifierWithDropout:edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction getObjectiveFunction(int[][][][],int[][])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:double[] trainWeights(int[][][][],int[][],edu.stanford.nlp.optimization.Evaluator[],int,double[][][][])"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction:void <init>(int[][][][],int[][],int,edu.stanford.nlp.util.Index,java.util.List,int[],java.lang.String,java.lang.String,double,double[][][][],int,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction:void <init>(int[][][][],int[][],int,edu.stanford.nlp.util.Index,java.util.List,int[],java.lang.String,java.lang.String,double,double[][][][],int)",
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunctionNoisyLabel:void <init>(int[][][][],int[][],int,edu.stanford.nlp.util.Index,java.util.List,int[],java.lang.String,java.lang.String,double,double[][][][],int,double[][])"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction$ExpectationThreadsafeProcessor:edu.stanford.nlp.util.Pair process(edu.stanford.nlp.util.Pair)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction$ExpectationThreadsafeProcessor:java.lang.Object process(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler:edu.stanford.nlp.util.Pair samplePositionHelper(edu.stanford.nlp.sequences.SequenceModel,int[],int,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:double sampleSequenceForward(edu.stanford.nlp.sequences.SequenceModel,int[],double,java.util.Set)",
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:double samplePosition(edu.stanford.nlp.sequences.SequenceModel,int[],int,double)",
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:edu.stanford.nlp.util.Pair access$000(edu.stanford.nlp.sequences.SequenceGibbsSampler,edu.stanford.nlp.sequences.SequenceModel,int[],int,double)"
        ]
    },
    "edu.stanford.nlp.sequences.FactoredSequenceModel:double scoreOf(int[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFCliqueTree:edu.stanford.nlp.ie.crf.CRFCliqueTree getCalibratedCliqueTree(int[][][],java.util.List,int,edu.stanford.nlp.util.Index,java.lang.Object,edu.stanford.nlp.ie.crf.CliquePotentialFunction,double[][][])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.ie.crf.CRFCliqueTree getCliqueTree(edu.stanford.nlp.util.Triple)",
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction:double expectedCountsAndValueForADoc(double[][],int,boolean,boolean)",
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunctionNoisyLabel:double expectedAndEmpiricalCountsAndValueForADoc(double[][],double[][],int)",
            "edu.stanford.nlp.ie.crf.CRFNonLinearSecondOrderLogConditionalObjectiveFunction:void calculate(double[])",
            "edu.stanford.nlp.ie.crf.CRFNonLinearLogConditionalObjectiveFunction:void calculate(double[])",
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunctionForLOP:void calculate(double[])",
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunctionWithDropout:edu.stanford.nlp.util.Quadruple expectedCountsAndValueForADoc(int,boolean,boolean)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFCliqueTree:edu.stanford.nlp.ie.crf.CRFCliqueTree getCalibratedCliqueTree(double[],double,int[][],int[][][],java.util.List,int,edu.stanford.nlp.util.Index,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler:double sampleSequenceForward(edu.stanford.nlp.sequences.SequenceModel,int[],double,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:int[] findBestUsingAnnealing(edu.stanford.nlp.sequences.SequenceModel,edu.stanford.nlp.sequences.CoolingSchedule,int[])",
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:double sampleSequenceForward(edu.stanford.nlp.sequences.SequenceModel,int[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:edu.stanford.nlp.trees.Tree getBestPCFGParse(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:edu.stanford.nlp.trees.Tree getBestPCFGParse()",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:boolean parse(edu.stanford.nlp.parser.lexparser.HTKLatticeReader)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:boolean parseInternal(java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.NodePruner:edu.stanford.nlp.trees.Tree prune(edu.stanford.nlp.trees.Tree,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.NodePruner:edu.stanford.nlp.trees.Tree prune(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.parser.lexparser.NodePruner:java.util.List helper(java.util.List,int)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:double getPCFGScore()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Tree parse(java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:boolean hasParse()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:boolean parseAndReport(java.util.List,java.io.PrintWriter)",
            "edu.stanford.nlp.parser.lexparser.ParseFiles:void processResults(edu.stanford.nlp.parser.common.ParserQuery,int,java.io.PrintWriter)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:boolean parse(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.FastFactoredParser:boolean parse(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:edu.stanford.nlp.trees.Tree getBestParse(boolean)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:boolean parse(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:boolean parse(edu.stanford.nlp.parser.lexparser.Lattice)"
        ]
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.stats.Counter scoresOf(java.util.List,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier$Scorer:double[] scoresOf(int[],int)"
        ]
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier:java.lang.String classOf(java.util.List,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void classifyNoSeq(java.util.List)"
        ]
    },
    "edu.stanford.nlp.classify.ColumnDataClassifier:java.lang.String classOf(edu.stanford.nlp.ling.Datum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ColumnDataClassifierAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.classify.Classifier:edu.stanford.nlp.util.Pair evaluatePrecisionAndRecall(edu.stanford.nlp.classify.GeneralDataset,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.Util:void dumpAccuracy(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunctionWithDropout$1:edu.stanford.nlp.util.Quadruple process(edu.stanford.nlp.util.Pair)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunctionWithDropout$1:java.lang.Object process(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:void printFirstOrderProbs(java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFBiasedClassifier:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.util.Execution:void fillOptions(java.lang.Object,java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.MachineReading:void train(edu.stanford.nlp.pipeline.Annotation,int)"
        ]
    },
    "edu.stanford.nlp.parser.nndep.DependencyParser:void parseTextFile(java.io.BufferedReader,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.nndep.DependencyParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.pipeline.POSTaggerAnnotator:edu.stanford.nlp.tagger.maxent.MaxentTagger loadModel(java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.POSTaggerAnnotator:void <init>(java.lang.String,boolean,int,int)",
            "edu.stanford.nlp.pipeline.POSTaggerAnnotator:void <init>(java.lang.String,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.parser.nndep.demo.DependencyParserDemo:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.Execution:void fillOptions(java.lang.Class,java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.MachineReading:edu.stanford.nlp.ie.machinereading.MachineReading makeMachineReading(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.hcoref.CorefSystem:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.Execution:void exec(java.lang.Runnable,java.lang.String[],java.lang.Class[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.Execution:void exec(java.lang.Runnable,java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Execution:void exec(java.lang.Runnable,java.lang.Class[])",
            "edu.stanford.nlp.util.Execution:void exec(java.lang.Runnable)"
        ]
    },
    "edu.stanford.nlp.util.Execution:void fillOptions(java.lang.Class[],java.util.Properties,java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.Execution:void fillOptions(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.fsm.TransducerGraph:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Pair:void save(java.io.DataOutputStream)",
            "edu.stanford.nlp.patterns.ConstantsAndVariables$ScorePhraseMeasures:int compareTo(java.lang.Object)",
            "edu.stanford.nlp.patterns.surface.Token:boolean equals(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.parser.nndep.Util:java.util.List generateDict(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.nndep.DependencyParser:void genDictionaries(java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.nndep.DependencyParser:void genDictionaries(java.util.List,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.nndep.DependencyParser:void train(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:java.lang.String getConllEvalString(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:java.lang.String getConllEvalString()",
            "edu.stanford.nlp.stats.MultiClassChunkEvalStats:java.lang.String getConllEvalString()"
        ]
    },
    "edu.stanford.nlp.stats.IntCounter:double totalCount(java.util.function.Predicate)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.IntCounter:java.lang.Object clone()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.GeneralizedCounter$OneDimensionalCounterView:java.util.Set keySet()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.GeneralizedCounter:void printKeySet()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter$CounterView:java.util.Set keySet()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter$OneDimensionalCounterView:double totalCount()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.GeneralizedCounter$CounterView:double totalCount()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.GeneralizedCounter$CounterView:boolean containsKey(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void decrementCount(java.lang.Object,java.lang.Object,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree parseStrings(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.roth.RothCONLL04Reader:void setHeadWord(edu.stanford.nlp.ie.machinereading.structure.EntityMention,edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree originalFindSyntacticHead(edu.stanford.nlp.ie.machinereading.structure.EntityMention,edu.stanford.nlp.trees.Tree,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree findSyntacticHead(edu.stanford.nlp.ie.machinereading.structure.EntityMention,edu.stanford.nlp.trees.Tree,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:int assignSyntacticHead(edu.stanford.nlp.ie.machinereading.structure.EntityMention,edu.stanford.nlp.trees.Tree,java.util.List,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.MachineReading:void assignSyntacticHeadToEntities(edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:void preProcessSentences(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:void findHead(edu.stanford.nlp.util.CoreMap,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:java.util.List extractPredictedMentions(edu.stanford.nlp.pipeline.Annotation,int,edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:java.util.List filterPredictedMentions(java.util.List,edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.fsm.TransducerGraph:void <init>(edu.stanford.nlp.fsm.TransducerGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.TransducerGraph$NormalizingGraphProcessor:edu.stanford.nlp.fsm.TransducerGraph processGraph(edu.stanford.nlp.fsm.TransducerGraph)"
        ]
    },
    "edu.stanford.nlp.fsm.TransducerGraph:edu.stanford.nlp.fsm.TransducerGraph clone()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.TransducerGraph:java.lang.Object clone()",
            "edu.stanford.nlp.fsm.QuasiDeterminizer:edu.stanford.nlp.fsm.TransducerGraph pushLambdas(edu.stanford.nlp.fsm.TransducerGraph,edu.stanford.nlp.stats.ClassicCounter)"
        ]
    },
    "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:edu.stanford.nlp.fsm.TransducerGraph minimizeFA(edu.stanford.nlp.fsm.TransducerGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ExactGrammarCompactor:edu.stanford.nlp.fsm.TransducerGraph doCompaction(edu.stanford.nlp.fsm.TransducerGraph,java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.hcoref.Preprocessor:void findSpeakersInArticle(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.Preprocessor:void findSpeakers(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.sequences.ObjectBankWrapper:java.util.List processDocument(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.ObjectBankWrapper$WrappedIterator:java.util.List next()",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:edu.stanford.nlp.fsm.DFSA getViterbiSearchGraph(java.util.List,java.lang.Class)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List classifySentenceWithGlobalInformation(java.util.List,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List classifySentence(java.util.List)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:edu.stanford.nlp.stats.Counter classifyKBest(java.util.List,java.lang.Class,int)"
        ]
    },
    "edu.stanford.nlp.process.LowercaseAndAmericanizeFunction:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.process.PTBTokenizer:edu.stanford.nlp.ling.HasWord getNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.PTBTokenizer:java.lang.Object getNext()"
        ]
    },
    "edu.stanford.nlp.process.AmericanizeFunction:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.naturalli.ClauseSplitter:edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem lambda$load$111(edu.stanford.nlp.util.Pair,edu.stanford.nlp.semgraph.SemanticGraph,java.lang.Boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.naturalli.ClauseSplitter:edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem lambda$train$110(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$Featurizer,edu.stanford.nlp.semgraph.SemanticGraph,java.lang.Boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void <init>(edu.stanford.nlp.semgraph.SemanticGraph,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ClauseSplitter:void lambda$train$109(edu.stanford.nlp.naturalli.OpenIE,edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$Featurizer,java.util.Optional,edu.stanford.nlp.classify.WeightedDataset,java.util.concurrent.atomic.AtomicInteger,edu.stanford.nlp.util.Pair)"
        ]
    },
    "edu.stanford.nlp.naturalli.OpenIE:void lambda$annotate$3(java.util.Map,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.international.arabic.process.ArabicDocumentReaderAndWriter$1:java.util.List apply(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.arabic.process.ArabicDocumentReaderAndWriter$1:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.international.arabic.process.IOBUtils:java.util.List StringToIOB(java.util.List,java.lang.Character,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.arabic.process.IOBUtils:java.util.List StringToIOB(java.lang.String,java.lang.Character)",
            "edu.stanford.nlp.international.arabic.process.ArabicDocumentReaderAndWriter$1:java.util.List apply(java.lang.String)",
            "edu.stanford.nlp.international.arabic.process.ArabicSegmenter:java.lang.String segmentString(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.ud.CoNLLUDocumentReader$SentenceProcessor:edu.stanford.nlp.semgraph.SemanticGraph apply(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.ud.CoNLLUDocumentReader$SentenceProcessor:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void lambda$null$9(edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void access$300(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.lang.String,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$6:void lambda$applyTo$7(edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$5:void lambda$applyTo$6(edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$4:void lambda$applyTo$5(edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph$SemanticGraphParsingTask:edu.stanford.nlp.semgraph.SemanticGraph parse()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:edu.stanford.nlp.semgraph.SemanticGraph valueOf(java.lang.String)",
            "edu.stanford.nlp.semgraph.SemanticGraph$SemanticGraphParsingTask:java.lang.Object parse()"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.lang.String semgrexFromGraph(java.lang.Iterable,boolean,boolean,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.lang.String semgrexFromGraph(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Collection,java.util.Map,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.lang.String semgrexFromGraph(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Collection,boolean,boolean,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.lang.String semgrexFromGraphOrderedNodes(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Collection,java.util.Map,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.lang.String toCompactString(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:java.lang.String toCompactString()"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphFormatter:java.lang.String formatSGNodeOneline(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphFormatter:void formatSGNode(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,int)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.MachineReading:void train(edu.stanford.nlp.pipeline.Annotation,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.MachineReading:java.util.List run()"
        ]
    },
    "edu.stanford.nlp.time.TimeFormatter:void access$100(edu.stanford.nlp.time.TimeFormatter$FormatterBuilder,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeFormatter$CustomDateFormatExtractor:void <init>(java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void train(edu.stanford.nlp.trees.Tree,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void train(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void train(java.util.Collection,double)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void train(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.NumberNormalizer:java.util.List findAndAnnotateNumericExpressions(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.TimeExpressionExtractorImpl:java.util.List extractTimeExpressions(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.time.SUTime$Time,edu.stanford.nlp.time.SUTime$TimeIndex)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractorImpl:java.util.List extractTimeExpressions(edu.stanford.nlp.util.CoreMap,java.lang.String,edu.stanford.nlp.time.SUTime$TimeIndex)"
        ]
    },
    "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.classify.GeneralDataset readTrainingExamples(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromFile(java.lang.String,edu.stanford.nlp.parser.lexparser.Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser loadModel(java.lang.String,edu.stanford.nlp.parser.lexparser.Options,java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:double[] trainWeights(int[][][][],int[][],edu.stanford.nlp.optimization.Evaluator[],int,double[][][][])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void train(java.util.Collection,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.crf.CRFClassifierWithLOP:double[] trainWeights(int[][][][],int[][],edu.stanford.nlp.optimization.Evaluator[],int,double[][][][])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern$OrPatternExpr:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr optimize()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$ValuePatternExpr:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr optimize()",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$RepeatPatternExpr:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr optimize()",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern:void readObject(java.io.ObjectInputStream)",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$GroupPatternExpr:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr optimize()"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:void <init>(edu.stanford.nlp.ie.crf.CRFClassifier)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.TimeExpressionExtractorImpl:java.util.List extractTimeExpressionCoreMaps(edu.stanford.nlp.util.CoreMap,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.TimeExpressionExtractorImpl:java.util.List extractTimeExpressionCoreMaps(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:void addGuesses(java.util.List,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:double score(java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassChunkEvalStats:void addGuess(java.lang.Object,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:void addGuess(java.lang.Object,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap$SingletonHolder:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$GOVERNER$1:void advance()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$ALIGNMENT:void setAlignment(edu.stanford.nlp.semgraph.semgrex.Alignment,boolean,edu.stanford.nlp.semgraph.semgrex.GraphRelation$SearchNodeIterator)",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$SearchNodeIterator:void initialize()",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$SearchNodeIterator:edu.stanford.nlp.ling.IndexedWord next()"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:boolean hasChildren(edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphFormatter:void formatSGNode(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,int)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$GRANDPARENT:java.util.Iterator neighborIterator(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$GRANDSOMETHING$1:void advance()"
        ]
    },
    "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$3:void lambda$applyTo$4(edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$6:void lambda$applyTo$7(edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$5:void lambda$applyTo$6(edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$4:void lambda$applyTo$5(edu.stanford.nlp.semgraph.SemanticGraphEdge,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$DEPENDENT$1:void advance()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$ALIGNMENT:void setAlignment(edu.stanford.nlp.semgraph.semgrex.Alignment,boolean,edu.stanford.nlp.semgraph.semgrex.GraphRelation$SearchNodeIterator)",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$SearchNodeIterator:void initialize()",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$SearchNodeIterator:edu.stanford.nlp.ling.IndexedWord next()"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$DEPENDENT:boolean satisfies(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$LIMITED_GRANDKID$1:void advance()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$ALIGNMENT:void setAlignment(edu.stanford.nlp.semgraph.semgrex.Alignment,boolean,edu.stanford.nlp.semgraph.semgrex.GraphRelation$SearchNodeIterator)",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$SearchNodeIterator:edu.stanford.nlp.ling.IndexedWord next()",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$LIMITED_GRANDKID$1:void initialize()"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$LIMITED_GRANDKID$1:void initialize()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$SearchNodeIterator:void <init>()"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$GRANDKID:java.util.List getNeighborPairs(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$LIMITED_GRANDKID:boolean satisfyHelper(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,int,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$LIMITED_GRANDKID:boolean satisfies(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$LIMITED_GRANDKID:boolean satisfyHelper(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,int,java.util.List)"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void getFeatures(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,boolean,java.util.Collection,edu.stanford.nlp.trees.GrammaticalRelation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass$LabelWithSeedWords:edu.stanford.nlp.util.Pair call()",
            "edu.stanford.nlp.patterns.dep.ExtractPhraseFromPattern:void printSubGraph(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.List,java.util.List,java.util.Collection,java.util.Collection,java.util.List,java.util.List,boolean,java.util.Collection,edu.stanford.nlp.semgraph.semgrex.SemgrexPattern,java.util.function.Function)",
            "edu.stanford.nlp.patterns.dep.ExtractPhraseFromPattern:void descendantsHelper(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Set,java.util.List,java.util.List,java.util.List,boolean,java.util.function.Function,edu.stanford.nlp.util.CollectionValuedMap)"
        ]
    },
    "edu.stanford.nlp.hcoref.Preprocessor:boolean isSpeaker(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.Document:boolean isSpeaker(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.CollectionUtils:java.util.Set toSet(java.lang.Iterable)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.CollectionUtils:java.util.List toList(java.lang.Iterable)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.graph.ConnectedComponents:java.util.List getConnectedComponents(edu.stanford.nlp.graph.Graph)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void calculateSufficientStats(java.util.Map,edu.stanford.nlp.patterns.surface.PatternsForEachToken,java.lang.String,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,java.util.Set)",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.List incomingEdgeList(edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.List outgoingEdgeList(edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.util.CollectionUtils:java.util.List sorted(java.lang.Iterable,java.util.Comparator)",
            "edu.stanford.nlp.util.CollectionUtils:java.util.List sorted(java.lang.Iterable)",
            "edu.stanford.nlp.patterns.ScorePhrases:void runParallelApplyPats(java.util.Map,java.lang.String,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.util.CollectionValuedMap,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Mention:int getReportEmbedding(edu.stanford.nlp.hcoref.data.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Mention:java.util.ArrayList getSingletonFeatures(edu.stanford.nlp.hcoref.data.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.List outgoingEdgesWithReln(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.trees.GrammaticalRelation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.List incomingEdgesWithReln(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.trees.GrammaticalRelation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:boolean isNegatedVertex(edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:boolean isNegatedVerb(edu.stanford.nlp.ling.IndexedWord)"
        ]
    },
    "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$8:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void search(edu.stanford.nlp.ling.IndexedWord,java.util.function.Predicate,edu.stanford.nlp.classify.Classifier,java.util.Map,java.util.function.Function,java.util.Collection,int)",
            "edu.stanford.nlp.parser.lexparser.TregexPoweredTreebankParserParams:java.lang.String getAnnotationString(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.util.IntervalTree:java.util.List getNonOverlappingMaxScore(java.util.List,java.util.function.Function,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.dcoref.Mention:java.lang.String getQuantification(edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Mention:java.util.ArrayList getSingletonFeatures(edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Mention:java.lang.String getQuantification(edu.stanford.nlp.hcoref.data.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Mention:java.util.ArrayList getSingletonFeatures(edu.stanford.nlp.hcoref.data.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:boolean isInConditionalContext(edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:boolean hasTo(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional getValidChunk(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Set,java.util.Optional)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional getValidObjectChunk(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Optional)",
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional segmentVerb(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Optional,boolean)",
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional getValidSubjectChunk(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Optional)",
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional getValidAdverbChunk(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Optional)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Mention:boolean isListLikeByDependency()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Mention:void setType(edu.stanford.nlp.hcoref.data.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.naturalli.NaturalLogicAnnotator:edu.stanford.nlp.naturalli.OperatorSpec computeScope(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.naturalli.Operator,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.util.Pair,edu.stanford.nlp.ling.IndexedWord,boolean,edu.stanford.nlp.ling.IndexedWord,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.NaturalLogicAnnotator:void annotateOperators(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.naturalli.NaturalLogicAnnotator:void annotateUnaries(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.naturalli.NaturalLogicAnnotator:edu.stanford.nlp.util.Pair getProperNounSubtreeSpan(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.NaturalLogicAnnotator:edu.stanford.nlp.naturalli.OperatorSpec computeScope(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.naturalli.Operator,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.util.Pair,edu.stanford.nlp.ling.IndexedWord,boolean,edu.stanford.nlp.ling.IndexedWord,int)"
        ]
    },
    "edu.stanford.nlp.naturalli.NaturalLogicAnnotator:edu.stanford.nlp.util.Pair getModifierSubtreeSpan(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.NaturalLogicAnnotator:edu.stanford.nlp.naturalli.OperatorSpec computeScope(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.naturalli.Operator,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.util.Pair,edu.stanford.nlp.ling.IndexedWord,boolean,edu.stanford.nlp.ling.IndexedWord,int)"
        ]
    },
    "edu.stanford.nlp.naturalli.NaturalLogicAnnotator:edu.stanford.nlp.util.Pair getSubtreeSpan(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.NaturalLogicAnnotator:edu.stanford.nlp.naturalli.OperatorSpec computeScope(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.naturalli.Operator,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.util.Pair,edu.stanford.nlp.ling.IndexedWord,boolean,edu.stanford.nlp.ling.IndexedWord,int)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$GRANDPARENT:java.util.List getNeighborPairs(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.Mention:boolean isCoordinated()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries,java.util.Set,edu.stanford.nlp.dcoref.Semantics)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Mention:java.util.ArrayList getPostmodifiers()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Mention:java.lang.String getPattern()"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Mention:java.util.ArrayList getPremodifiers()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Mention:java.lang.String getPattern()",
            "edu.stanford.nlp.hcoref.data.Mention:java.util.List getPremodifierContext()",
            "edu.stanford.nlp.hcoref.data.Mention:java.lang.String[] getSplitPattern()"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Mention:boolean isCoordinated()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.dcoref.Mention:java.util.ArrayList getPostmodifiers()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Mention:java.lang.String getPattern()"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$LIMITED_GRANDPARENT$1:void advance()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$ALIGNMENT:void setAlignment(edu.stanford.nlp.semgraph.semgrex.Alignment,boolean,edu.stanford.nlp.semgraph.semgrex.GraphRelation$SearchNodeIterator)",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$SearchNodeIterator:edu.stanford.nlp.ling.IndexedWord next()",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$LIMITED_GRANDPARENT$1:void initialize()"
        ]
    },
    "edu.stanford.nlp.dcoref.Mention:java.util.ArrayList getPremodifiers()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Mention:java.util.List getPremodifierContext()",
            "edu.stanford.nlp.dcoref.Mention:java.lang.String getPattern()",
            "edu.stanford.nlp.dcoref.Mention:java.lang.String[] getSplitPattern()"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$GOVERNER:boolean satisfies(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:edu.stanford.nlp.trees.GrammaticalRelation reln(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Mention:java.lang.String getRelation()",
            "edu.stanford.nlp.patterns.dep.DepPatternFactory:java.util.Set getContext(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,java.util.Set,edu.stanford.nlp.patterns.DataInstance)",
            "edu.stanford.nlp.hcoref.data.Mention:java.lang.String getRelation()",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void expandPrepConjunction(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.List,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void expandPPConjunction(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.List,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.patterns.dep.ExtractPhraseFromPattern:void descendantsHelper(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Set,java.util.List,java.util.List,java.util.List,boolean,java.util.function.Function,edu.stanford.nlp.util.CollectionValuedMap)"
        ]
    },
    "edu.stanford.nlp.dcoref.Mention:int getModifiers(edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Mention:java.util.ArrayList getSingletonFeatures(edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$LIMITED_GRANDPARENT:boolean satisfyHelper(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,int,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$LIMITED_GRANDPARENT:boolean satisfyHelper(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,int,java.util.List)",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$LIMITED_GRANDPARENT:boolean satisfies(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$LIMITED_GRANDPARENT$1:void initialize()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$SearchNodeIterator:void <init>()"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Mention:int getModifiers(edu.stanford.nlp.hcoref.data.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Mention:java.util.ArrayList getSingletonFeatures(edu.stanford.nlp.hcoref.data.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.naturalli.OpenIE:java.util.Optional relationInFragment(edu.stanford.nlp.naturalli.SentenceFragment,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.OpenIE:java.util.Optional lambda$relationsInFragments$2(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.naturalli.SentenceFragment)"
        ]
    },
    "edu.stanford.nlp.naturalli.OpenIE:java.util.Optional relationInFragment(edu.stanford.nlp.naturalli.SentenceFragment)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional segment(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Optional)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.util.List topologicalSort()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher:boolean find()",
            "edu.stanford.nlp.naturalli.ForwardEntailerSearchProblem:java.util.List searchImplementation()"
        ]
    },
    "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.semgraph.SemanticGraphEdge getDependencyParent(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.semgraph.SemanticGraphEdge getDependencyParent(edu.stanford.nlp.hcoref.data.Mention)",
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.naturalli.Util:boolean isCyclic(edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.Util:boolean isTree(edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$GRANDKID:java.util.Iterator neighborIterator(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$GRANDSOMETHING$1:void advance()"
        ]
    },
    "edu.stanford.nlp.patterns.PatternFactory:java.util.Map getPatternsAroundTokens(edu.stanford.nlp.patterns.PatternFactory$PatternType,edu.stanford.nlp.patterns.DataInstance,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.surface.CreatePatterns$CreatePatternsThread:java.lang.Boolean call()"
        ]
    },
    "edu.stanford.nlp.trees.Tree:edu.stanford.nlp.trees.Tree spliceOut(java.util.function.Predicate,edu.stanford.nlp.trees.TreeFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer:edu.stanford.nlp.trees.Tree normalizeWholeTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreeFactory)",
            "edu.stanford.nlp.trees.international.hebrew.HebrewTreeNormalizer:edu.stanford.nlp.trees.Tree normalizeWholeTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreeFactory)",
            "edu.stanford.nlp.trees.BobChrisTreeNormalizer:edu.stanford.nlp.trees.Tree normalizeWholeTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreeFactory)",
            "edu.stanford.nlp.trees.Tree:edu.stanford.nlp.trees.Tree spliceOut(java.util.function.Predicate)",
            "edu.stanford.nlp.trees.international.arabic.ArabicTreeNormalizer:edu.stanford.nlp.trees.Tree normalizeWholeTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreeFactory)",
            "edu.stanford.nlp.trees.international.french.FrenchTreeNormalizer:edu.stanford.nlp.trees.Tree normalizeWholeTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreeFactory)",
            "edu.stanford.nlp.trees.international.negra.NegraPennTreeNormalizer:edu.stanford.nlp.trees.Tree normalizeWholeTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreeFactory)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonParser:edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern Operation()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonParser:edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPatternRoot Root()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonParser:java.util.List TreeList(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonParser:edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern Operation()"
        ]
    },
    "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.ling.Datum makeDatumFromLine(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ColumnDataClassifierAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.BasicEntityExtractor:edu.stanford.nlp.util.CoreMap extractEntities(edu.stanford.nlp.util.CoreMap,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.BasicEntityExtractor:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.classify.CrossValidator:double computeAverage(java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifierFactory:java.lang.Double lambda$crossValidateSetSigma$7(edu.stanford.nlp.classify.CrossValidator,java.util.function.Function,java.lang.Double)",
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:java.lang.Double lambda$crossValidateSetC$11(edu.stanford.nlp.classify.CrossValidator,java.util.function.Function,java.lang.Double)"
        ]
    },
    "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.classify.Classifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier:void trainSVM(edu.stanford.nlp.classify.Dataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void train(edu.stanford.nlp.classify.Dataset)"
        ]
    },
    "edu.stanford.nlp.pipeline.ColumnDataClassifierAnnotator:void <init>(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorFactories$17:edu.stanford.nlp.pipeline.Annotator create()"
        ]
    },
    "edu.stanford.nlp.classify.ColumnDataClassifier:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ColumnDataClassifierAnnotator:void <init>(java.lang.String)",
            "edu.stanford.nlp.pipeline.ColumnDataClassifierAnnotator:void <init>(java.lang.String,boolean)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:void normalize(edu.stanford.nlp.stats.TwoDimensionalCounter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void <init>(java.util.Properties,java.util.Map,java.util.Set,boolean,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void <init>(java.util.Properties,java.util.Map,java.util.Map,boolean,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void <init>(java.util.Properties,java.util.Map,java.util.Set,boolean,java.lang.String,java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.scoref.StatisticalCorefTrainer:void doTraining(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.StatisticalCorefTrainer:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.hcoref.CorefSystem:java.util.Map coref(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.CorefSystem$1:java.lang.Object process(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.TregexPatternCompiler:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.CollocationFinder:void <init>(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.WordNetConnection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.MentionAnnotator:void <init>(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorImplementations:edu.stanford.nlp.pipeline.Annotator mention(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.scoref.StatisticalCorefSystem:void <init>(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.BestFirstCorefSystem:void <init>(java.util.Properties,java.lang.String,java.lang.String,int,int,double[])",
            "edu.stanford.nlp.scoref.ClusteringCorefSystem:void <init>(java.util.Properties,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.hcoref.CorefSystem:void <init>(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.CorefAnnotator:void <init>(java.util.Properties)",
            "edu.stanford.nlp.hcoref.CorefSystem:void runCoref(java.lang.String[])",
            "edu.stanford.nlp.hcoref.CorefPrinter:void linkDistanceAnalysis(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Dictionaries:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.PostSplitter:void <init>(edu.stanford.nlp.parser.lexparser.TreebankLangParserParams,edu.stanford.nlp.parser.lexparser.Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void <init>(edu.stanford.nlp.trees.HeadFinder,edu.stanford.nlp.trees.HeadFinder,edu.stanford.nlp.parser.lexparser.TreebankLangParserParams,boolean,boolean,boolean,edu.stanford.nlp.parser.lexparser.Options)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void <init>(edu.stanford.nlp.parser.lexparser.TreebankLangParserParams,boolean,boolean,boolean,edu.stanford.nlp.parser.lexparser.Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreebankAnnotator:void <init>(edu.stanford.nlp.parser.lexparser.Options,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void <init>(edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.parser.lexparser.Lexicon,edu.stanford.nlp.parser.common.ParserGrammar,java.util.function.Function)",
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer buildTrainBinarizer(edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter getSegmenterDataFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser:edu.stanford.nlp.trees.Tree scoreNonBinarizedTree(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void <init>(java.lang.String,java.util.Properties,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void <init>(java.lang.String,java.util.Properties)",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void dumpModel(edu.stanford.nlp.tagger.maxent.TaggerConfig)",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void <init>(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequenceMatchAction Action(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.util.Pair SeqRegexWithAction(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.objectbank.XMLBeginEndIterator:void setNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.objectbank.XMLBeginEndIterator:java.lang.Object next()",
            "edu.stanford.nlp.objectbank.XMLBeginEndIterator:void <init>(java.io.Reader,java.lang.String,java.util.function.Function,boolean,boolean,boolean)"
        ]
    },
    "edu.stanford.nlp.util.PropertiesUtils:void printProperties(java.lang.String,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.sievepasses.NameMatch:boolean checkEntityMatch(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Dictionaries,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.dvparser.CacheParseHypotheses:void <init>(edu.stanford.nlp.parser.lexparser.LexicalizedParser)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.CacheParseHypotheses:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.dvparser.DVParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.PreferencesPanel:void <init>(edu.stanford.nlp.trees.tregex.gui.TregexGUI)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.TregexGUI:void doPreferences()",
            "edu.stanford.nlp.trees.tregex.gui.TregexGUI:void loadPreferences()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.TregexGUI:void loadPreferences()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.PreferencesPanel:void syncFromPrefPanel(java.lang.String,java.lang.Integer,java.awt.Color,java.awt.Color,java.awt.Color,java.lang.Integer,java.lang.Integer,boolean,boolean,edu.stanford.nlp.trees.HeadFinder,edu.stanford.nlp.trees.TreeReaderFactory,java.lang.String)",
            "edu.stanford.nlp.trees.tregex.gui.TregexGUI:javax.swing.JMenuBar getMenu()"
        ]
    },
    "edu.stanford.nlp.trees.international.french.FrenchTreeNormalizer:java.lang.String normalizePreterminal(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.french.FrenchTreeNormalizer:edu.stanford.nlp.trees.Tree normalizeWholeTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreeFactory)"
        ]
    },
    "edu.stanford.nlp.util.logging.RedwoodConfiguration:void apply(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.StanfordRedwoodConfiguration:void minimalSetup()",
            "edu.stanford.nlp.util.logging.StanfordRedwoodConfiguration:void apply(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.sentiment.Evaluate:void <init>(edu.stanford.nlp.sentiment.SentimentModel)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.SentimentTraining:void train(edu.stanford.nlp.sentiment.SentimentModel,java.lang.String,java.util.List,java.util.List)",
            "edu.stanford.nlp.sentiment.Evaluate:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.SemgrexParser:edu.stanford.nlp.semgraph.semgrex.SemgrexPattern SubNode(edu.stanford.nlp.semgraph.semgrex.GraphRelation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.SemgrexParser:edu.stanford.nlp.semgraph.semgrex.SemgrexPattern SubNode(edu.stanford.nlp.semgraph.semgrex.GraphRelation)",
            "edu.stanford.nlp.semgraph.semgrex.SemgrexParser:edu.stanford.nlp.semgraph.semgrex.SemgrexPattern Root()",
            "edu.stanford.nlp.semgraph.semgrex.SemgrexParser:edu.stanford.nlp.semgraph.semgrex.SemgrexPattern Relation()"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.SemgrexParser:edu.stanford.nlp.semgraph.semgrex.SemgrexPattern NodeConj(edu.stanford.nlp.semgraph.semgrex.GraphRelation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.SemgrexParser:edu.stanford.nlp.semgraph.semgrex.SemgrexPattern NodeDisj(edu.stanford.nlp.semgraph.semgrex.GraphRelation)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.SemgrexParser:edu.stanford.nlp.semgraph.semgrex.SemgrexPattern Relation()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.SemgrexParser:edu.stanford.nlp.semgraph.semgrex.SemgrexPattern RelChild()"
        ]
    },
    "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void <init>(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:java.lang.String initializeAndRunCoref(java.util.Properties)",
            "edu.stanford.nlp.pipeline.DeterministicCorefAnnotator:void <init>(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.dcoref.Dictionaries:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.Tree:java.util.Set subTrees()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Mention:boolean includedIn(edu.stanford.nlp.dcoref.Mention)"
        ]
    },
    "edu.stanford.nlp.trees.Tree:java.util.List subTreeList()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:void tallyTree(edu.stanford.nlp.trees.Tree,double)",
            "edu.stanford.nlp.parser.metrics.AbstractEval$CatErrorEval:java.util.List myMakeObjects(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.parser.metrics.AbstractEval$RuleErrorEval:java.util.Set makeObjects(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.AuxiliaryTree:void initializeNamesNodesMaps(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.dcoref.Rules:boolean entityHaveIncompatibleModifier(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries,java.util.Set,edu.stanford.nlp.dcoref.Semantics)"
        ]
    },
    "edu.stanford.nlp.hcoref.md.CorefMentionFinder:void removeSpuriousMentions(edu.stanford.nlp.pipeline.Annotation,java.util.List,edu.stanford.nlp.hcoref.data.Dictionaries,boolean,java.util.Locale)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.md.HybridCorefMentionFinder:java.util.List findMentions(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)",
            "edu.stanford.nlp.hcoref.md.RuleBasedCorefMentionFinder:java.util.List filterPredictedMentions(java.util.List,edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)",
            "edu.stanford.nlp.hcoref.md.RuleBasedCorefMentionFinder:java.util.List findMentions(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)",
            "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:java.util.List findMentions(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Dictionaries:void loadAnimacyLists(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Dictionaries:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String[],java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Dictionaries:void loadStatesLists(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Dictionaries:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String[],java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Dictionaries:void loadNumberLists(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Dictionaries:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String[],java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Dictionaries:void loadGenderLists(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Dictionaries:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String[],java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.TreePrint:java.util.List getSortedDeps(edu.stanford.nlp.trees.Tree,java.util.function.Predicate)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TreePrint:void printTreeInternal(edu.stanford.nlp.trees.Tree,java.io.PrintWriter,boolean)"
        ]
    },
    "edu.stanford.nlp.process.WordShapeClassifier:java.lang.String wordShapeChris4(java.lang.String,boolean,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.WordShapeClassifier:java.lang.String wordShape(java.lang.String,int,java.util.Collection)",
            "edu.stanford.nlp.process.WordShapeClassifier:java.lang.String wordShapeChris4(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.dcoref.sievepasses.NameMatchPrecise:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.wordseg.affDict:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.wordseg.TagAffixDetector:void <init>(edu.stanford.nlp.sequences.SeqClassifierFlags)"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:boolean isConnected(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:java.util.Set findKnownStates(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:void train(java.util.List,edu.stanford.nlp.util.Pair,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.wordseg.CorpusDictionary:void <init>(java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.wordseg.CorpusDictionary:void <init>(java.lang.String)",
            "edu.stanford.nlp.wordseg.ChineseSegmenterFeatureFactory:java.util.Collection featuresCpC(edu.stanford.nlp.util.PaddedList,int)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.TregexParser:edu.stanford.nlp.trees.tregex.DescriptionPattern ModDescription(edu.stanford.nlp.trees.tregex.Relation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.TregexParser:edu.stanford.nlp.trees.tregex.DescriptionPattern Node(edu.stanford.nlp.trees.tregex.Relation)",
            "edu.stanford.nlp.trees.tregex.TregexParser:edu.stanford.nlp.trees.tregex.DescriptionPattern SubNode(edu.stanford.nlp.trees.tregex.Relation)"
        ]
    },
    "edu.stanford.nlp.time.JodaTimeUtils:org.joda.time.Period getUnsupportedDurationPeriod(org.joda.time.Partial,org.joda.time.Period)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$PartialTime:edu.stanford.nlp.time.SUTime$Time add(edu.stanford.nlp.time.SUTime$Duration)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Mention:java.util.List getContext()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.Rules:boolean sentenceContextIncompatible(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.hcoref.Rules:boolean contextIncompatible(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.hcoref.Rules:boolean isContextOverlapping(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Mention:java.util.List getPremodifierContext()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.Rules:boolean sentenceContextIncompatible(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.hcoref.Rules:boolean contextIncompatible(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:java.util.List findMentions(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.MentionAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.pipeline.RegexNERAnnotator:void <init>(java.lang.String,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.RegexNERAnnotator:void <init>(java.lang.String,boolean,boolean,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.RegexNERAnnotator:void <init>(java.lang.String,boolean,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.regexp.RegexNERSequenceClassifier:void <init>(java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.GenderAnnotator:void <init>(boolean,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$DocumentIterator:void annotateDocument(edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$CoNLLDocument)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$DocumentIterator:edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$CoNLLDocument readNextDocument()"
        ]
    },
    "edu.stanford.nlp.patterns.surface.LearnImportantFeatures:void setUp()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void setUpConstructor(java.util.Map,java.util.Map,boolean,java.util.Map,java.util.Map,java.util.Map)",
            "edu.stanford.nlp.patterns.surface.LearnImportantFeatures:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.pipeline.CleanXmlAnnotator:void addAnnotationPatterns(edu.stanford.nlp.util.CollectionValuedMap,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.CleanXmlAnnotator:void setSectionAnnotationPatterns(java.lang.String)",
            "edu.stanford.nlp.pipeline.CleanXmlAnnotator:void setDocAnnotationPatterns(java.lang.String)",
            "edu.stanford.nlp.pipeline.CleanXmlAnnotator:void setTokenAnnotationPatterns(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.time.JollyDayHolidays:edu.stanford.nlp.util.CollectionValuedMap getAllHolidaysCVMap(java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.JollyDayHolidays:edu.stanford.nlp.util.CollectionValuedMap getAllHolidaysCVMap(de.jollyday.config.Configuration)"
        ]
    },
    "edu.stanford.nlp.patterns.ScorePhrases:java.util.Map getSentences(java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ScorePhrases:void applyPats(edu.stanford.nlp.stats.Counter,java.lang.String,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.util.CollectionValuedMap,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.util.CollectionValuedMap:void <init>(edu.stanford.nlp.util.CollectionValuedMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.CollectionValuedMap:edu.stanford.nlp.util.CollectionValuedMap clone()",
            "edu.stanford.nlp.util.CollectionValuedMap:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.time.SUTimeMain:java.util.List createTimexNodesPresorted(java.lang.String,java.lang.Integer,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:java.util.List createTimexNodes(java.lang.String,java.lang.Integer,java.util.List)",
            "edu.stanford.nlp.time.SUTimeMain:java.util.List createTimexNodesPresorted(java.lang.String,java.lang.Integer,java.util.List)"
        ]
    },
    "edu.stanford.nlp.util.CollectionValuedMap:void addAll(java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.Pattern:void getRelevantWordsBase(edu.stanford.nlp.patterns.surface.Token,edu.stanford.nlp.util.CollectionValuedMap)",
            "edu.stanford.nlp.patterns.Pattern:void getRelevantWordsBase(edu.stanford.nlp.patterns.surface.Token[],edu.stanford.nlp.util.CollectionValuedMap)"
        ]
    },
    "edu.stanford.nlp.dcoref.Document:void findTwinMentionsStrict()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Document:void findTwinMentions(boolean)"
        ]
    },
    "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$DocumentIterator:void annotateDocument(edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$DocumentIterator:edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$Document readNextDocument()"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.ValueFunctions:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.Mention:int getCoordination()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Mention:java.util.ArrayList getSingletonFeatures(edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Mention:int getCoordination()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Mention:java.util.ArrayList getSingletonFeatures(edu.stanford.nlp.hcoref.data.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:java.util.Set tagSet()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.TokensRegexNERAnnotator:void <init>(java.lang.String,boolean,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.TokensRegexNERAnnotator:void <init>(java.lang.String,boolean)"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotatorImplementations:edu.stanford.nlp.pipeline.Annotator tokensRegexNER(java.util.Properties,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorFactories$7:edu.stanford.nlp.pipeline.Annotator create()"
        ]
    },
    "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.classify.Classifier makeClassifier(edu.stanford.nlp.classify.GeneralDataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.util.Pair crossValidate(edu.stanford.nlp.classify.GeneralDataset,java.util.List)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:boolean trainClassifier()"
        ]
    },
    "edu.stanford.nlp.fsm.DFSAState:java.util.Set statesReachable()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.Rules:boolean entityHaveIncompatibleModifier(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Set)",
            "edu.stanford.nlp.hcoref.sieve.RFSieve:edu.stanford.nlp.ling.RVFDatum extractDatum(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,int,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.dcoref.Dictionaries:void loadStatesLists(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Dictionaries:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String[],java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.dcoref.Dictionaries:void loadAnimacyLists(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Dictionaries:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String[],java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.dcoref.Dictionaries:void loadGenderNumber(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Dictionaries:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String[],java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.dcoref.Dictionaries:void loadNumberLists(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Dictionaries:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String[],java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.dcoref.Dictionaries:void loadGenderLists(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Dictionaries:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String[],java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TTags:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.process.DocumentPreprocessor$XMLIterator:void primeNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.DocumentPreprocessor$XMLIterator:java.util.List next()",
            "edu.stanford.nlp.process.DocumentPreprocessor$XMLIterator:void <init>(edu.stanford.nlp.process.DocumentPreprocessor)"
        ]
    },
    "edu.stanford.nlp.process.DocumentPreprocessor:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.nndep.DependencyParser:void parseTextFile(java.io.BufferedReader,java.io.PrintWriter)",
            "edu.stanford.nlp.parser.lexparser.ParseFiles:void parseFiles(java.lang.String[],int,boolean,edu.stanford.nlp.process.TokenizerFactory,java.lang.String,java.lang.String,java.util.function.Function,java.lang.String)",
            "edu.stanford.nlp.patterns.surface.AnnotatedTextReader:java.util.List parseFile(java.io.BufferedReader,java.util.Set,java.util.Map,boolean,java.lang.String)",
            "edu.stanford.nlp.process.DocumentPreprocessor:void main(java.lang.String[])",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger(java.lang.Iterable,java.io.BufferedWriter,edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle)",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:java.util.List tokenizeText(java.io.Reader,edu.stanford.nlp.process.TokenizerFactory)",
            "edu.stanford.nlp.parser.nndep.demo.DependencyParserDemo:void main(java.lang.String[])",
            "edu.stanford.nlp.sentiment.BuildBinarizedDataset:void main(java.lang.String[])",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTaggerStdin(java.io.BufferedReader,java.io.BufferedWriter,edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle)"
        ]
    },
    "edu.stanford.nlp.optimization.QNMinimizer:double[] pseudoGradientOWL(double[],double[],edu.stanford.nlp.optimization.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.QNMinimizer:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[],int,edu.stanford.nlp.optimization.QNMinimizer$QNInfo)"
        ]
    },
    "edu.stanford.nlp.optimization.QNMinimizer:void constrainSearchDir(double[],double[],double[],edu.stanford.nlp.optimization.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.QNMinimizer:void computeDir(double[],double[],double[],edu.stanford.nlp.optimization.QNMinimizer$QNInfo,edu.stanford.nlp.optimization.Function)"
        ]
    },
    "edu.stanford.nlp.optimization.SGDWithAdaGradAndFOBOS:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.SGDWithAdaGradAndFOBOS:double[] minimize(edu.stanford.nlp.optimization.Function,double,double[],int)",
            "edu.stanford.nlp.optimization.SGDWithAdaGradAndFOBOS:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[])"
        ]
    },
    "edu.stanford.nlp.optimization.QNMinimizer:double[] projectOWL(double[],double[],edu.stanford.nlp.optimization.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.QNMinimizer:double[] lineSearchBacktrackOWL(edu.stanford.nlp.optimization.Function,double[],double[],double[],double[],double)"
        ]
    },
    "edu.stanford.nlp.optimization.QNMinimizer:double l1NormOWL(double[],edu.stanford.nlp.optimization.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.QNMinimizer:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[],int,edu.stanford.nlp.optimization.QNMinimizer$QNInfo)",
            "edu.stanford.nlp.optimization.QNMinimizer:double[] lineSearchBacktrackOWL(edu.stanford.nlp.optimization.Function,double[],double[],double[],double[],double)"
        ]
    },
    "edu.stanford.nlp.hcoref.Rules:boolean entitySameProperHeadLastWord(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Set)",
            "edu.stanford.nlp.hcoref.sieve.RFSieve:edu.stanford.nlp.ling.RVFDatum extractDatum(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,int,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.ling.Datum makeDatum(java.util.List,int,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void classifyNoSeq(java.util.List)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:java.lang.String classOf(java.util.List,int)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:void classifySeq(java.util.List)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.stats.Counter scoresOf(java.util.List,int)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.classify.Dataset getDataset(java.util.Collection,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.classify.Dataset getBiasedDataset(edu.stanford.nlp.objectbank.ObjectBank,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:double loglikelihood(java.util.List)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.ExtractorFramesRare:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.Rules:boolean entitySameProperHeadLastWord(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries,java.util.Set,edu.stanford.nlp.dcoref.Semantics)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:boolean isAuxiliaryVerb(edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraphFormatter:void formatSGNodeMultiline(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphFormatter:void formatSGNode(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,int)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphFormatter:java.lang.String formatSemanticGraph(edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:java.lang.String toFormattedString()",
            "edu.stanford.nlp.semgraph.SemanticGraph:void prettyPrint(edu.stanford.nlp.semgraph.SemanticGraphFormatter)",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.lang.String toFormattedString(edu.stanford.nlp.semgraph.SemanticGraphFormatter)",
            "edu.stanford.nlp.semgraph.SemanticGraphFormatter:void test(java.lang.String)",
            "edu.stanford.nlp.semgraph.SemanticGraph:void prettyPrint()"
        ]
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler:int[] findBestUsingAnnealing(edu.stanford.nlp.sequences.SequenceModel,edu.stanford.nlp.sequences.CoolingSchedule)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classifyGibbs(java.util.List,edu.stanford.nlp.util.Triple)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classifyGibbs(java.util.List)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classify(java.util.List,edu.stanford.nlp.util.Triple)"
        ]
    },
    "edu.stanford.nlp.util.concurrent.SynchronizedInterner:java.util.Set internAll(java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.Tree:java.util.Set dependencies(java.util.function.Predicate)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.UnlabeledAttachmentEval:java.util.Set makeObjects(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.Tree:java.util.Set dependencies()"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteViterbiSearchGraph(java.lang.String,java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.hcoref.sieve.NameMatch:boolean checkEntityMatch(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.Iterables:java.util.HashSet asHashSet(java.util.Iterator)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Iterables:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.util.Iterables:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.Iterables:java.util.ArrayList asArrayList(java.util.Iterator)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Iterables:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.util.Iterables:java.util.Collection asCollection(java.util.Iterator,edu.stanford.nlp.util.CollectionFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Iterables:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TaggerExperiments:void addTemplatesNew(edu.stanford.nlp.tagger.maxent.History,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TaggerExperiments:void <init>(edu.stanford.nlp.tagger.maxent.TaggerConfig,edu.stanford.nlp.tagger.maxent.MaxentTagger)"
        ]
    },
    "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:void loadSentenceMentions(edu.stanford.nlp.pipeline.CoreNLPProtos$Sentence,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.util.CoreMap fromProtoNoTokens(edu.stanford.nlp.pipeline.CoreNLPProtos$Sentence)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.lang.String toString(edu.stanford.nlp.ling.CoreLabel$OutputFormat)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:java.lang.String toString()"
        ]
    },
    "edu.stanford.nlp.hcoref.sieve.NameMatchPrecise:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:java.lang.String setupMorphoFeatures(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:int setOptionFlag(java.lang.String[],int)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams:java.lang.String setupMorphoFeatures(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams:int setOptionFlag(java.lang.String[],int)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.fsm.DFSA:java.util.Set states()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.structure.EventMention:void mergeEvent(edu.stanford.nlp.ie.machinereading.structure.EventMention,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.Tree:java.util.Set constituents(edu.stanford.nlp.trees.ConstituentFactory,boolean,java.util.function.Predicate)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.FilteredEval:java.util.Set makeObjects(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.Tree:java.util.Set constituents(edu.stanford.nlp.trees.ConstituentFactory,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.TopMatchEval:java.util.Set makeObjects(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.Tree:java.util.Set constituents(edu.stanford.nlp.trees.ConstituentFactory,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Tree:java.util.Set constituents(edu.stanford.nlp.trees.ConstituentFactory)"
        ]
    },
    "edu.stanford.nlp.dcoref.Mention:java.util.List getPremodifierContext()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Rules:boolean sentenceContextIncompatible(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.dcoref.Rules:boolean contextIncompatible(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.dcoref.Mention:java.util.List getContext()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Rules:boolean isContextOverlapping(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention)",
            "edu.stanford.nlp.dcoref.Rules:boolean sentenceContextIncompatible(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.dcoref.Rules:boolean contextIncompatible(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.hcoref.Preprocessor:void fillSyntacticInfo(edu.stanford.nlp.hcoref.data.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.Preprocessor:void preprocess(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,edu.stanford.nlp.classify.LogisticClassifier,edu.stanford.nlp.trees.HeadFinder)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$ExplicitTemporalSet:edu.stanford.nlp.time.SUTime$Temporal setTimeZone(org.joda.time.DateTimeZone)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.naturalli.SentenceFragment lambda$fromProto$61(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.pipeline.CoreNLPProtos$SentenceFragment)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.naturalli.SentenceFragment lambda$fromProto$57(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.pipeline.CoreNLPProtos$SentenceFragment)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.naturalli.ForwardEntailerSearchProblem:edu.stanford.nlp.naturalli.SentenceFragment lambda$search$12(edu.stanford.nlp.naturalli.ForwardEntailerSearchProblem$SearchResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:boolean lambda$topClauses$3(double,java.util.List,edu.stanford.nlp.util.Triple)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void search(edu.stanford.nlp.ling.IndexedWord,java.util.function.Predicate,edu.stanford.nlp.classify.Classifier,java.util.Map,java.util.function.Function,java.util.Collection,int)"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:void <init>(java.util.List,edu.stanford.nlp.trees.TreeGraphNode)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void <init>(java.util.List,edu.stanford.nlp.trees.TreeGraphNode)",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void <init>(java.util.List,edu.stanford.nlp.trees.TreeGraphNode)",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:void <init>(java.util.List,edu.stanford.nlp.trees.TreeGraphNode)",
            "edu.stanford.nlp.trees.GrammaticalStructure$1:void <init>(java.util.List,edu.stanford.nlp.trees.TreeGraphNode)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory:double[] heldOutSetSigma(edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.stats.Scorer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier trainClassifierV(edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.classify.GeneralDataset,double,double,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory:double[] heldOutSetSigma(edu.stanford.nlp.classify.GeneralDataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifierFactory:double[][] trainWeights(edu.stanford.nlp.classify.GeneralDataset,double[],boolean,edu.stanford.nlp.optimization.Minimizer)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier trainClassifierV(edu.stanford.nlp.classify.GeneralDataset,double,double,boolean)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory:double[][] trainWeights(edu.stanford.nlp.classify.GeneralDataset,double[],boolean,edu.stanford.nlp.optimization.Minimizer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifierFactory:double[][] trainWeights(edu.stanford.nlp.classify.GeneralDataset,double[],boolean)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory:void crossValidateSetSigma(edu.stanford.nlp.classify.GeneralDataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.NBLinearClassifierFactory:double[][] trainWeights(int[][],int[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.NBLinearClassifierFactory:double[][] trainWeights(edu.stanford.nlp.classify.GeneralDataset)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.TregexGUI:void actionPerformed(java.awt.event.ActionEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.gui.TregexGUI:javax.swing.JSplitPane setUpTopPanels()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.TregexGUI:void <init>(java.util.Properties,java.util.List)"
        ]
    },
    "edu.stanford.nlp.time.Options:void <init>(java.lang.String,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractorImpl:void init(java.lang.String,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams:edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TestOptions:edu.stanford.nlp.trees.TreePrint treePrint(edu.stanford.nlp.parser.lexparser.TreebankLangParserParams)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expression Expression(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expression FunctionCallExpression(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expression ListExpression(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expression NestedVarExpression(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr SeqRegexBasic(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expression BasicCondExpression(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expression CaseExpression(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.AssignableExpression AssignableNestedVarExpression(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expression ListExpression2(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$Rule AssignmentRule(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$Rule ExpressionExtractorRule(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expression NestedFunctionCallExpression(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expression MethodCallExpression(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.ling.tokensregex.types.Expression)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:java.util.Map FieldValue(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.time.TimeFormatter$FormatterBuilder:void appendHalfdayOfDayText()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeFormatter:void parsePatternTo(edu.stanford.nlp.time.TimeFormatter$FormatterBuilder,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.time.TimeFormatter$FormatterBuilder:void appendDayOfWeekShortText()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeFormatter:void parsePatternTo(edu.stanford.nlp.time.TimeFormatter$FormatterBuilder,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.time.TimeFormatter$FormatterBuilder:void appendEraText()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeFormatter:void parsePatternTo(edu.stanford.nlp.time.TimeFormatter$FormatterBuilder,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.time.TimeFormatter$FormatterBuilder:void appendMonthOfYearText()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeFormatter:void parsePatternTo(edu.stanford.nlp.time.TimeFormatter$FormatterBuilder,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.time.TimeFormatter$FormatterBuilder:void appendDayOfWeekText()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeFormatter:void parsePatternTo(edu.stanford.nlp.time.TimeFormatter$FormatterBuilder,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.time.TimeFormatter$FormatterBuilder:void appendMonthOfYearShortText()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeFormatter:void parsePatternTo(edu.stanford.nlp.time.TimeFormatter$FormatterBuilder,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotatorFactories$10:edu.stanford.nlp.pipeline.Annotator create()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorFactories$10:java.lang.Object create()",
            "edu.stanford.nlp.pipeline.AnnotatorPool:edu.stanford.nlp.pipeline.Annotator get(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.pipeline.TrueCaseAnnotator:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.UnknownGTTrainer:void train(java.util.Collection,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.UnknownGTTrainer:void train(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter flatten(java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.util.Map loadFromSavedPatternsWordsDir(edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass,java.util.Properties)",
            "edu.stanford.nlp.patterns.ConstantsAndVariables:edu.stanford.nlp.stats.Counter getLearnedWords(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter getCopy(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.RVFDataset:edu.stanford.nlp.ling.Datum getDatum(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:void testExample(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset,java.util.List,edu.stanford.nlp.stats.Counter,int)"
        ]
    },
    "edu.stanford.nlp.classify.RVFDataset$1:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.classify.SVMLightClassifier trainClassifierBasic(edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Iterable)",
            "edu.stanford.nlp.classify.RVFDataset:void writeSVMLightFormat(java.io.PrintWriter)",
            "edu.stanford.nlp.classify.Classifier:edu.stanford.nlp.util.Pair evaluatePrecisionAndRecall(edu.stanford.nlp.classify.GeneralDataset,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.PostSplitter:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.sequences.CoNLLDocumentReaderAndWriter:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.Data:void computeRawFreqIfNull(int,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.GeneralDataset$1:edu.stanford.nlp.ling.RVFDatum next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.GeneralDataset$1:java.lang.Object next()"
        ]
    },
    "edu.stanford.nlp.classify.Dataset:java.lang.String toSummaryStatistics()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.Dataset:void summaryStatistics()"
        ]
    },
    "edu.stanford.nlp.patterns.dep.ApplyDepPatterns$2:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.scoref.EvalUtils$AbstractEvaluator:void update(java.util.List,java.util.List,java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.EvalUtils$CombinedEvaluator:void update(java.util.List,java.util.List,java.util.Map,java.util.Map)",
            "edu.stanford.nlp.scoref.Clusterer$State:void updateEvaluator(edu.stanford.nlp.scoref.EvalUtils$Evaluator)"
        ]
    },
    "edu.stanford.nlp.naturalli.Util:java.lang.String guessNER(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.naturalli.Util:edu.stanford.nlp.ie.machinereading.structure.Span extractNER(java.util.List,edu.stanford.nlp.ie.machinereading.structure.Span)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.List extract(edu.stanford.nlp.semgraph.SemanticGraph,java.util.List)",
            "edu.stanford.nlp.naturalli.Util:boolean nerOverlap(java.util.List,edu.stanford.nlp.ie.machinereading.structure.Span,edu.stanford.nlp.ie.machinereading.structure.Span,java.util.Optional)",
            "edu.stanford.nlp.naturalli.Util:edu.stanford.nlp.ie.machinereading.structure.Span extractNER(java.util.List,edu.stanford.nlp.ie.machinereading.structure.Span)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.TreebankAnnotator:java.util.List annotateTrees(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreebankAnnotator:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.CNFTransformers:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.hcoref.md.MentionDetectionClassifier:double probabilityOf(edu.stanford.nlp.hcoref.data.Mention,java.util.Set,java.util.Set,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.md.MentionDetectionClassifier:void classifyMentions(java.util.List,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.classify.RVFDataset:edu.stanford.nlp.classify.RVFDataset readSVMLightFormat(java.lang.String,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.RVFDataset:edu.stanford.nlp.classify.RVFDataset readSVMLightFormat(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.classify.RVFDataset:edu.stanford.nlp.classify.RVFDataset readSVMLightFormat(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.util.Pair readDataset(java.lang.String,boolean)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:void tallyTreeIterator(java.util.Iterator,java.util.function.Function,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:java.lang.Object extract(java.util.Iterator,java.util.function.Function,double)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr SeqRegex(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr parseSequence(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$Rule ExpressionExtractorRule(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Value BasicValue(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.util.Pair SeqRegexWithAction(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr SeqRegexGroup(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.parser.nndep.DependencyParser:edu.stanford.nlp.trees.GrammaticalStructure predict(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.DependencyParseAnnotator:void doOneSentence(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.parser.nndep.DependencyParser:edu.stanford.nlp.trees.GrammaticalStructure predict(java.util.List)"
        ]
    },
    "edu.stanford.nlp.trees.EnglishGrammaticalStructure:edu.stanford.nlp.trees.GrammaticalRelation conjValue(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void collapsePrepAndPoss(java.util.Collection)",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void collapseConj(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalRelation:java.lang.Object readResolve()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:edu.stanford.nlp.trees.GrammaticalRelation getCaseMarkedRelation(edu.stanford.nlp.trees.GrammaticalRelation,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void addCaseMarkersToReln(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,java.util.List)"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:edu.stanford.nlp.trees.GrammaticalRelation conjValue(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void addConjToReln(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.List,edu.stanford.nlp.ling.IndexedWord)"
        ]
    },
    "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void collapse3WP(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void collapseDependencies(java.util.List,boolean,edu.stanford.nlp.trees.GrammaticalStructure$Extras)"
        ]
    },
    "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void collapseFlatMWP(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void collapseDependencies(java.util.List,boolean,edu.stanford.nlp.trees.GrammaticalStructure$Extras)"
        ]
    },
    "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void collapse2WPbis(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void collapseDependencies(java.util.List,boolean,edu.stanford.nlp.trees.GrammaticalStructure$Extras)"
        ]
    },
    "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void collapseMultiWordPrep(java.util.Collection,java.util.Collection,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void collapse2WP(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalRelation:edu.stanford.nlp.trees.GrammaticalRelation valueOf(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph$SemanticGraphParsingTask:void readDep(edu.stanford.nlp.ling.IndexedWord,java.lang.String)",
            "edu.stanford.nlp.pipeline.AnnotationSerializer$IntermediateSemanticGraph:edu.stanford.nlp.semgraph.SemanticGraph convertIntermediateGraph(java.util.List)",
            "edu.stanford.nlp.patterns.dep.DepPatternFactory:void setUp(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalRelation:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.NodePattern NodeDisjConj(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.NodePattern NodeGroup(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.NodePattern BracketedNode(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.NodePattern NodeConj(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.NodePattern Node(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr parseNode(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.NodePattern NodeDisj(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.IntCounter:void decrementCounts(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.nndep.DependencyParser:void setupClassifierForTraining(java.util.List,java.util.List,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.nndep.DependencyParser:void train(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.international.arabic.process.ArabicTokenizer$ArabicTokenizerFactory:edu.stanford.nlp.process.Tokenizer getTokenizer(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.arabic.process.ArabicDocumentReaderAndWriter:void main(java.lang.String[])",
            "edu.stanford.nlp.process.DocumentPreprocessor$PlainTextIterator:void <init>(edu.stanford.nlp.process.DocumentPreprocessor)",
            "edu.stanford.nlp.international.arabic.process.ArabicTokenizer:void main(java.lang.String[])",
            "edu.stanford.nlp.international.arabic.process.ArabicDocumentReaderAndWriter$1:java.util.List apply(java.lang.String)",
            "edu.stanford.nlp.parser.common.ParserGrammar:java.util.List tokenize(java.lang.String)",
            "edu.stanford.nlp.international.arabic.process.ArabicTokenizer$ArabicTokenizerFactory:java.util.Iterator getIterator(java.io.Reader)",
            "edu.stanford.nlp.international.arabic.process.ArabicSegmenter:java.lang.String segmentString(java.lang.String)",
            "edu.stanford.nlp.international.arabic.process.ArabicTokenizer$ArabicTokenizerFactory:edu.stanford.nlp.process.Tokenizer getTokenizer(java.io.Reader,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.international.arabic.process.ArabicTokenizer:edu.stanford.nlp.international.arabic.process.ArabicTokenizer newArabicTokenizer(java.io.Reader,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void resetChild()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void goToNextNodeMatch()"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher:boolean matchesAt(edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.semgrex.NodePattern:edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher matcher(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.semgrex.Alignment,edu.stanford.nlp.semgraph.SemanticGraph,boolean,edu.stanford.nlp.ling.IndexedWord,java.util.Map,java.util.Map,edu.stanford.nlp.semgraph.semgrex.VariableStrings,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void resetChild()"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.NodePattern:edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher matcher(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Map,java.util.Map,edu.stanford.nlp.semgraph.semgrex.VariableStrings,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.SemgrexPattern:edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher matcher(edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:void retainKeys(edu.stanford.nlp.stats.Counter,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void removeLearnedPatterns(java.lang.String,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.stats.Counter getPatterns(java.lang.String,java.util.Set,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.Counter,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.TregexMatcher:boolean findAt(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.TregexMatcher:boolean find()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.spanish.SpanishTreeNormalizer:edu.stanford.nlp.trees.Tree expandConmigo(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.hcoref.md.RuleBasedCorefMentionFinder:void extractNPorPRP(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:java.util.Set getImperatives(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:boolean checkPleonastic(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexPattern)",
            "edu.stanford.nlp.hcoref.md.HybridCorefMentionFinder:void extractNPorPRP(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.dcoref.MentionExtractor:void findTreePattern(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexPattern,java.util.Set)",
            "edu.stanford.nlp.trees.tregex.gui.InputPanel$TRegexGUITreeVisitor:void visitTree(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:edu.stanford.nlp.trees.Tree processPattern(edu.stanford.nlp.trees.tregex.TregexPattern,edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:void extractEnumerations(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.dcoref.Mention:void setNumber(edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.trees.tregex.TregexPattern$TRegexTreeVisitor:void visitTree(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:void extractNPorPRP(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.trees.DateTreeTransformer:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:boolean checkPleonastic(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexPattern)",
            "edu.stanford.nlp.trees.tregex.TregexMatcher:boolean findNextMatchingNode()",
            "edu.stanford.nlp.trees.international.spanish.SpanishTreeNormalizer:edu.stanford.nlp.trees.Tree expandCliticPronounsInner(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexPattern)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:void extractEnumerations(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.trees.international.arabic.ArabicTreeNormalizer:edu.stanford.nlp.trees.Tree normalizeWholeTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreeFactory)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.TregexMatcher:boolean matchesAt(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalSemanticHeadFinder:edu.stanford.nlp.trees.Tree determineNonTrivialHead(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.parser.lexparser.TregexPoweredTreebankParserParams:java.lang.String getAnnotationString(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.SemanticHeadFinder:edu.stanford.nlp.trees.Tree determineNonTrivialHead(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void resetChild()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void goToNextTreeNodeMatch()"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure$LazyLoadTreesByParsing$1:edu.stanford.nlp.trees.Tree next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure$LazyLoadTreesByParsing$1:java.lang.Object next()"
        ]
    },
    "edu.stanford.nlp.classify.PRCurve:void <init>(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.AccuracyStats:double score(edu.stanford.nlp.classify.ProbabilisticClassifier,edu.stanford.nlp.classify.GeneralDataset)"
        ]
    },
    "edu.stanford.nlp.classify.PRCurve:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.PRCurve:void <init>(java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.PRCurve:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.util.IntervalTree:edu.stanford.nlp.util.IntervalTree$TreeNode balance(edu.stanford.nlp.util.IntervalTree$TreeNode)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.IntervalTree:boolean add(edu.stanford.nlp.util.IntervalTree$TreeNode,edu.stanford.nlp.util.HasInterval,double)",
            "edu.stanford.nlp.util.IntervalTree:void balance()"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.MatchedExpression:java.util.List removeNested(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:edu.stanford.nlp.util.Pair applyCompositeRule(edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$ExtractRule,java.util.List,java.util.List,int)",
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:java.util.List extractExpressions(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapFunctionApplier:java.lang.Object apply(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapFunctionApplier:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule:boolean extract(java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern$State:boolean match0(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern$State:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.TokensRegexAnnotator:java.util.List extract(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.TokensRegexAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List findClosestMatches(java.util.List,int,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List findClosestMatches(java.lang.Object[],int,boolean,boolean)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List findClosestMatches(java.lang.Object[],edu.stanford.nlp.ling.tokensregex.matcher.MatchCostFunction,java.lang.Double,int,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List findClosestMatches(java.util.List,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List findClosestMatches(java.lang.Object[],int)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher:java.util.List findNonOverlapping(java.util.List,java.util.Comparator)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher:java.util.List findNonOverlapping(java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher:java.util.List find(java.util.List,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$FindType)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.MatchedExpression:java.util.List removeOverlapping(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:edu.stanford.nlp.util.Pair applyCompositeRule(edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$ExtractRule,java.util.List,java.util.List,int)",
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:java.util.List extractExpressions(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.util.IntervalTree:java.util.List getNonOverlapping(java.util.List,java.util.Comparator)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.PhraseTable:java.util.List findNonOverlappingPhrases(java.util.List)",
            "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List getNonOverlapping(java.util.List,java.util.Comparator)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher:java.util.List findNonOverlappingMaxScore(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$MultiSequencePatternExtractRule:java.lang.Object apply(java.util.List)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$MultiSequencePatternExtractRule:boolean extract(java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List getNonOverlapping(java.util.List,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List findNonOverlapping(java.util.List,int,int,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapToListFunctionApplier:java.lang.Object apply(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapToListFunctionApplier:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapToListExtractRule:boolean extract(edu.stanford.nlp.util.CoreMap,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapToListExtractRule:boolean extract(java.lang.Object,java.util.List)"
        ]
    },
    "edu.stanford.nlp.util.Beam:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.BeamBestSequenceFinder:int[] bestSequence(edu.stanford.nlp.sequences.SequenceModel,int)"
        ]
    },
    "edu.stanford.nlp.sequences.BeamBestSequenceFinder:int[] bestSequence(edu.stanford.nlp.sequences.SequenceModel)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classifyMaxEnt(java.util.List,edu.stanford.nlp.sequences.SequenceModel)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.util.Interval getInterval()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List classifySentenceWithGlobalInformation(java.util.List,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.NERCombinerAnnotator:void doOneSentence(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.ie.NERClassifierCombiner:java.util.List classify(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier$2:java.util.List process(java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:java.util.List applySpecializedNER(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:java.util.List normalizeClassifierOutput(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.Tree:edu.stanford.nlp.trees.Tree transform(edu.stanford.nlp.trees.TreeTransformer,edu.stanford.nlp.trees.TreeFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Tree:edu.stanford.nlp.trees.Tree transform(edu.stanford.nlp.trees.TreeTransformer,edu.stanford.nlp.trees.TreeFactory)",
            "edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer:edu.stanford.nlp.trees.Tree normalizeWholeTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreeFactory)",
            "edu.stanford.nlp.trees.Tree:edu.stanford.nlp.trees.Tree transform(edu.stanford.nlp.trees.TreeTransformer)"
        ]
    },
    "edu.stanford.nlp.trees.Tree:void percolateHeadAnnotations(edu.stanford.nlp.trees.HeadFinder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:java.util.List binarizeTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.trees.Tree:void percolateHeadAnnotations(edu.stanford.nlp.trees.HeadFinder)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$SearchNodeIterator:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$13$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$13,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryPrecedes$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryPrecedes,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryDominates$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryDominates,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryFollows$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryFollows,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.Relation$4$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$4,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.tregex.Relation$18$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$18,edu.stanford.nlp.trees.tregex.TregexMatcher,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.tregex.Relation$20$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$20,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.Relation$Heads$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$Heads,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.Relation$5$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$5,edu.stanford.nlp.trees.tregex.TregexMatcher,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.tregex.Relation$8$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$8,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.Relation$6$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$6,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.tregex.Relation$25$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$25,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.tregex.Relation$IthChildOf$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$IthChildOf,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.Relation$16$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$16,edu.stanford.nlp.trees.tregex.TregexMatcher,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.tregex.Relation$22$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$22,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.tregex.Relation$HeadedBy$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$HeadedBy,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.Relation$11$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$11,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.Relation$9$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$9,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.Relation$HasIthChild$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$HasIthChild,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.tregex.Relation$24$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$24,edu.stanford.nlp.trees.tregex.TregexMatcher,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.tregex.Relation$14$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$14,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.Relation$12$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$12,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.tregex.Relation$21$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$21,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.Relation$17$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$17,edu.stanford.nlp.trees.tregex.TregexMatcher,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.tregex.Relation$ImmediatelyHeadedBy$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$ImmediatelyHeadedBy,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.Relation$10$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$10,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.Relation$23$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$23,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryIsDominatedBy$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryIsDominatedBy,edu.stanford.nlp.trees.tregex.TregexMatcher,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.tregex.Relation$1$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$1,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.tregex.Relation$7$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$7,edu.stanford.nlp.trees.tregex.TregexMatcher,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.tregex.Relation$19$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$19,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.Relation$ImmediatelyHeads$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$ImmediatelyHeads,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)",
            "edu.stanford.nlp.trees.tregex.Relation$15$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$15,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.TregexPoweredTreebankParserParams$AnnotateHeadFunction:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TregexPoweredTreebankParserParams:java.lang.String getAnnotationString(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.util.IntervalTree:java.util.List getNonOverlappingMaxScore(java.util.List,java.util.function.Function,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.trees.Trees:edu.stanford.nlp.trees.Tree lexicalize(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.HeadFinder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TreePrint:void printTreeInternal(edu.stanford.nlp.trees.Tree,java.io.PrintWriter,boolean)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.TreeAnnotator:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.TransformingTreebank$TransformingTreebankIterator:edu.stanford.nlp.trees.Tree next()",
            "edu.stanford.nlp.trees.TransformingTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.trees.MemoryTreebank:edu.stanford.nlp.trees.Treebank transform(edu.stanford.nlp.trees.TreeTransformer)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$Heads$1:void initialize()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$SearchNodeIterator:void <init>()"
        ]
    },
    "edu.stanford.nlp.trees.CollocationFinder:void getCollocationsList()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.CollocationFinder:void <init>(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.WordNetConnection,edu.stanford.nlp.trees.HeadFinder)"
        ]
    },
    "edu.stanford.nlp.trees.TreePrint:edu.stanford.nlp.trees.Tree[] headMarkChildren(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TreePrint:edu.stanford.nlp.trees.Tree markHeadNodes(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.TreePrint:edu.stanford.nlp.trees.Tree markHeadNodes(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TreePrint:void printTreeInternal(edu.stanford.nlp.trees.Tree,java.io.PrintWriter,boolean)"
        ]
    },
    "edu.stanford.nlp.parser.server.LexicalizedParserServer:edu.stanford.nlp.trees.Tree parse(java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.server.LexicalizedParserServer:void handleTree(java.lang.String,java.io.OutputStream)",
            "edu.stanford.nlp.parser.server.LexicalizedParserServer:void handleDependencies(java.lang.String,java.io.OutputStream,java.lang.String)",
            "edu.stanford.nlp.parser.server.LexicalizedParserServer:void handleParse(java.lang.String,java.io.OutputStream,boolean)"
        ]
    },
    "edu.stanford.nlp.pipeline.ParserAnnotator:void finishSentence(edu.stanford.nlp.util.CoreMap,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ParserAnnotator:void doOneSentence(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.pipeline.ParserAnnotator:void doOneFailedSentence(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.pipeline.BinarizerAnnotator:void doOneSentence(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.BinarizerAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer$TreeNullAnnotator:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure buildCoNLLXGrammaticalStructure(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.EnglishGrammaticalStructure:edu.stanford.nlp.trees.EnglishGrammaticalStructure buildCoNLLXGrammaticalStructure(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure buildCoNLLXGrammaticalStructure(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:java.util.List readCoNLLXGrammaticalStructureCollection(java.lang.String,java.util.Map,edu.stanford.nlp.trees.GrammaticalStructureFromDependenciesFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:java.util.List readCoNLLXGrammaticalStructureCollection(java.lang.String)",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:java.util.List readCoNLLXGrammaticalStructureCollection(java.lang.String)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:java.util.List readCoNLLXGrammaticalStructureCollection(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.metrics.AbstractEval:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.AbstractEval:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)"
        ]
    },
    "edu.stanford.nlp.hcoref.Preprocessor:int getHeadIndex(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.HeadFinder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.md.CorefMentionFinder:edu.stanford.nlp.trees.Tree safeHead(edu.stanford.nlp.trees.Tree,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:edu.stanford.nlp.trees.Tree findSyntacticHead(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.trees.Tree,java.util.List)"
        ]
    },
    "edu.stanford.nlp.trees.international.spanish.SpanishHeadFinder$1:void visitTree(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.DiskTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams$UnorderedTypedDependencyTyper:java.util.List makeDependency(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams$UnorderedTypedDependencyTyper:java.lang.Object makeDependency(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams$UntypedDependencyTyper:java.util.List makeDependency(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams$UntypedDependencyTyper:java.lang.Object makeDependency(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams$TypedDependencyTyper:java.util.List makeDependency(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams$TypedDependencyTyper:java.lang.Object makeDependency(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.dcoref.MentionExtractor:int getHeadIndex(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.MentionExtractor:java.lang.String treeToKey(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree safeHead(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree findSyntacticHead(edu.stanford.nlp.ie.machinereading.structure.EntityMention,edu.stanford.nlp.trees.Tree,java.util.List)",
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree originalFindSyntacticHead(edu.stanford.nlp.ie.machinereading.structure.EntityMention,edu.stanford.nlp.trees.Tree,java.util.List)"
        ]
    },
    "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.Tree safeHead(edu.stanford.nlp.trees.Tree,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.Tree findSyntacticHead(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.trees.Tree,java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams$UnorderedUntypedDependencyTyper:java.util.List makeDependency(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams$UnorderedUntypedDependencyTyper:java.lang.Object makeDependency(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.roth.RothCONLL04Reader:void setHeadWord(edu.stanford.nlp.ie.machinereading.structure.EntityMention,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph generateCCProcessedDependencies(edu.stanford.nlp.trees.GrammaticalStructure,edu.stanford.nlp.trees.GrammaticalStructure$Extras)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ParserAnnotatorUtils:void fillInParseAnnotations(boolean,boolean,edu.stanford.nlp.trees.GrammaticalStructureFactory,edu.stanford.nlp.util.CoreMap,java.util.List,edu.stanford.nlp.trees.GrammaticalStructure$Extras)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph generateUncollapsedDependencies(edu.stanford.nlp.trees.GrammaticalStructure,edu.stanford.nlp.trees.GrammaticalStructure$Extras)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ParserAnnotatorUtils:void fillInParseAnnotations(boolean,boolean,edu.stanford.nlp.trees.GrammaticalStructureFactory,edu.stanford.nlp.util.CoreMap,java.util.List,edu.stanford.nlp.trees.GrammaticalStructure$Extras)"
        ]
    },
    "edu.stanford.nlp.pipeline.DependencyParseAnnotator:void doOneSentence(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.SentenceAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.pipeline.SentenceAnnotator$AnnotatorProcessor:edu.stanford.nlp.util.CoreMap process(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph generateCollapsedDependencies(edu.stanford.nlp.trees.GrammaticalStructure,edu.stanford.nlp.trees.GrammaticalStructure$Extras)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ParserAnnotatorUtils:void fillInParseAnnotations(boolean,boolean,edu.stanford.nlp.trees.GrammaticalStructureFactory,edu.stanford.nlp.util.CoreMap,java.util.List,edu.stanford.nlp.trees.GrammaticalStructure$Extras)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph generateCCProcessedDependencies(edu.stanford.nlp.trees.GrammaticalStructure)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph generateUncollapsedDependencies(edu.stanford.nlp.trees.GrammaticalStructure)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader:void setDependencyTree(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader:edu.stanford.nlp.hcoref.data.InputDoc nextDoc()"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph generateCollapsedDependencies(edu.stanford.nlp.trees.GrammaticalStructure)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.GrammaticalStructure,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode,boolean,boolean,java.util.function.Predicate)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.GrammaticalStructure)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.arabic.ArabicTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Tree:edu.stanford.nlp.trees.Tree valueOf(java.lang.String,edu.stanford.nlp.trees.TreeReaderFactory)",
            "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader,java.lang.String)",
            "edu.stanford.nlp.trees.MemoryTreebank:void processFile(java.io.File)",
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:boolean primeNextFile()"
        ]
    },
    "edu.stanford.nlp.trees.international.arabic.ArabicTreeNormalizer:void <init>(boolean,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.arabic.ArabicTreeNormalizer:void <init>(boolean,boolean)"
        ]
    },
    "edu.stanford.nlp.patterns.SentenceIndex:edu.stanford.nlp.patterns.SentenceIndex createIndex(java.lang.Class,java.util.Map,java.util.Properties,java.util.Set,java.lang.String,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void setUpConstructor(java.util.Map,java.util.Map,boolean,java.util.Map,java.util.Map,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood:void lambda$log$38(java.lang.Object,java.lang.Object[],long)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood:void attemptThreadControl(long,java.lang.Runnable)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood:void startTrack(java.lang.Object[])",
            "edu.stanford.nlp.util.logging.Redwood:void attemptThreadControl(long,java.lang.Runnable)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood$Util:void exit(int)",
            "edu.stanford.nlp.util.logging.RedwoodConfiguration$1:void run()"
        ]
    },
    "edu.stanford.nlp.sequences.ColumnDocumentReaderAndWriter$ColumnDocParser:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.objectbank.DelimitRegExIterator:java.lang.Object parseString(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.process.CoreLabelTokenFactory:edu.stanford.nlp.util.CoreMap makeToken(java.lang.String[],java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher$BasicSequencePatternTrigger:java.util.Collection apply(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher$BasicSequencePatternTrigger:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyFilesAndWriteAnswers(java.util.Collection,edu.stanford.nlp.sequences.DocumentReaderAndWriter,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyFilesAndWriteAnswers(java.util.Collection)",
            "edu.stanford.nlp.ie.NERClassifierCombiner:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswers(java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.crf.CRFBiasedClassifier:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.regexp.NumberSequenceClassifier:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.NERClassifierCombiner:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswers(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswers(java.lang.String,java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyStdin(edu.stanford.nlp.sequences.DocumentReaderAndWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyStdin()"
        ]
    },
    "edu.stanford.nlp.optimization.CmdEvaluator:void evaluateCmd(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifierEvaluator:double evaluate(double[])",
            "edu.stanford.nlp.optimization.CmdEvaluator:double evaluate(double[])"
        ]
    },
    "edu.stanford.nlp.optimization.CGMinimizer$OneDimDiffFunction:double derivativeAt(double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.CGMinimizer:double dbrent(edu.stanford.nlp.optimization.CGMinimizer$OneDimDiffFunction,double,double,double)"
        ]
    },
    "edu.stanford.nlp.parser.dvparser.DVParser:void executeOneTrainingBatch(java.util.List,java.util.IdentityHashMap,double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.DVParser:void train(java.util.List,java.util.IdentityHashMap,edu.stanford.nlp.trees.Treebank,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.optimization.QNMinimizer:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[],int,edu.stanford.nlp.optimization.QNMinimizer$QNInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.SGDToQNMinimizer:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[],int)",
            "edu.stanford.nlp.optimization.QNMinimizer:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[],int)"
        ]
    },
    "edu.stanford.nlp.optimization.CGMinimizer:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.CGMinimizer:double[] minimize(edu.stanford.nlp.optimization.Function,double,double[],int)",
            "edu.stanford.nlp.optimization.CGMinimizer:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[])"
        ]
    },
    "edu.stanford.nlp.classify.SemiSupervisedLogConditionalObjectiveFunction:void calculate(double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.AbstractCachingDiffFunction:void ensure(double[])"
        ]
    },
    "edu.stanford.nlp.sentiment.SentimentTraining:void executeOneTrainingBatch(edu.stanford.nlp.sentiment.SentimentModel,java.util.List,double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.SentimentTraining:void train(edu.stanford.nlp.sentiment.SentimentModel,java.lang.String,java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.optimization.AbstractCachingDiffFunction:boolean gradientCheck(int,int,double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.AbstractCachingDiffFunction:boolean gradientCheck()",
            "edu.stanford.nlp.sentiment.SentimentTraining:boolean runGradientCheck(edu.stanford.nlp.sentiment.SentimentModel,java.util.List)",
            "edu.stanford.nlp.parser.dvparser.DVParser:boolean runGradientCheck(java.util.List,java.util.IdentityHashMap)"
        ]
    },
    "edu.stanford.nlp.optimization.QNMinimizer:double[] lineSearchMinPack(edu.stanford.nlp.optimization.DiffFunction,double[],double[],double[],double[],double,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.QNMinimizer:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[],int,edu.stanford.nlp.optimization.QNMinimizer$QNInfo)"
        ]
    },
    "edu.stanford.nlp.optimization.QNMinimizer:double evaluateFunction(edu.stanford.nlp.optimization.DiffFunction,double[],double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.QNMinimizer:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[],int,edu.stanford.nlp.optimization.QNMinimizer$QNInfo)"
        ]
    },
    "edu.stanford.nlp.optimization.StochasticDiffFunctionTester:boolean testSumOfBatches(double[],double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:double[] trainWeights(int[][][][],int[][],edu.stanford.nlp.optimization.Evaluator[],int,double[][][][])",
            "edu.stanford.nlp.ie.crf.CRFClassifierNonlinear:double[] trainWeightsUsingNonLinearCRF(edu.stanford.nlp.optimization.AbstractCachingDiffFunction,edu.stanford.nlp.optimization.Evaluator[])"
        ]
    },
    "edu.stanford.nlp.optimization.QNMinimizer:double[] lineSearchBacktrack(edu.stanford.nlp.optimization.Function,double[],double[],double[],double[],double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.QNMinimizer:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[],int,edu.stanford.nlp.optimization.QNMinimizer$QNInfo)"
        ]
    },
    "edu.stanford.nlp.optimization.QNMinimizer:double[] lineSearchBacktrackOWL(edu.stanford.nlp.optimization.Function,double[],double[],double[],double[],double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.QNMinimizer:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[],int,edu.stanford.nlp.optimization.QNMinimizer$QNInfo)"
        ]
    },
    "edu.stanford.nlp.optimization.CGMinimizer$OneDimDiffFunction:double valueAt(double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.CGMinimizer:double dbrent(edu.stanford.nlp.optimization.CGMinimizer$OneDimDiffFunction,double,double,double)",
            "edu.stanford.nlp.optimization.CGMinimizer:edu.stanford.nlp.optimization.CGMinimizer$Triple mnbrak(edu.stanford.nlp.optimization.CGMinimizer$Triple,edu.stanford.nlp.optimization.CGMinimizer$OneDimDiffFunction)"
        ]
    },
    "edu.stanford.nlp.optimization.QNMinimizer$Record:void monitorX(double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.QNMinimizer$Record:void add(double,double[],double[],int,double)",
            "edu.stanford.nlp.optimization.QNMinimizer$Record:void start(double,double[],double[])"
        ]
    },
    "edu.stanford.nlp.optimization.StochasticMinimizer:double[] minimize(edu.stanford.nlp.optimization.Function,double,double[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.SMDMinimizer:double[] minimize(edu.stanford.nlp.optimization.Function,double,double[])",
            "edu.stanford.nlp.optimization.HybridMinimizer:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[],int)",
            "edu.stanford.nlp.optimization.StochasticMinimizer:double[] minimize(edu.stanford.nlp.optimization.Function,double,double[])",
            "edu.stanford.nlp.optimization.SGDToQNMinimizer:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[],int)"
        ]
    },
    "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:java.lang.String normalizedDateString(java.lang.String,java.lang.String,edu.stanford.nlp.time.Timex)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:java.lang.String normalizedDateString(java.lang.String,edu.stanford.nlp.time.Timex)"
        ]
    },
    "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:void fixupNerBeforeNormalization(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:void addNormalizedQuantitiesToEntities(java.util.List,boolean,boolean)"
        ]
    },
    "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:java.util.List detectTwoSidedRangeModifier(edu.stanford.nlp.util.CoreMap,java.util.List,int,int,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:void addNormalizedQuantitiesToEntities(java.util.List,boolean,boolean)"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier$2:java.lang.Object process(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswers(java.util.Collection,java.io.PrintWriter,edu.stanford.nlp.sequences.DocumentReaderAndWriter,boolean)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Pair:void save(java.io.DataOutputStream)",
            "edu.stanford.nlp.patterns.ConstantsAndVariables$ScorePhraseMeasures:int compareTo(java.lang.Object)",
            "edu.stanford.nlp.patterns.surface.Token:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:void train(java.util.Collection,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:void printClassifier(edu.stanford.nlp.classify.Classifier)"
        ]
    },
    "edu.stanford.nlp.classify.LogisticClassifier:double probabilityOf(edu.stanford.nlp.ling.RVFDatum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Distribution:java.lang.Object drawSample()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.LinearClassifier:void justificationOf(edu.stanford.nlp.ling.Datum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void classifyNoSeq(java.util.List)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:void classifySeq(java.util.List)",
            "edu.stanford.nlp.classify.RVFDataset:void main(java.lang.String[])",
            "edu.stanford.nlp.classify.ColumnDataClassifier:void testExample(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset,java.util.List,edu.stanford.nlp.stats.Counter,int)",
            "edu.stanford.nlp.classify.LinearClassifier:void dump()"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:java.lang.String toAllWeightsString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifier:java.lang.String toString(java.lang.String,int)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:void justificationOf(edu.stanford.nlp.ling.Datum,java.io.PrintWriter,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:java.util.List annotateMulticlass(java.util.List)",
            "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:java.util.List extractAllRelations(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:void dump(java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.XMLOutputter:void addRelations(java.util.List,nu.xom.Element,java.lang.String,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.XMLOutputter:nu.xom.Document annotationToDoc(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.pipeline.AnnotationOutputter$Options)"
        ]
    },
    "edu.stanford.nlp.pipeline.XMLOutputter:void addEntities(java.util.List,nu.xom.Element,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.XMLOutputter:nu.xom.Document annotationToDoc(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.pipeline.AnnotationOutputter$Options)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:edu.stanford.nlp.ling.Datum createDatum(edu.stanford.nlp.ie.machinereading.structure.RelationMention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:java.util.List extractAllRelations(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:edu.stanford.nlp.classify.GeneralDataset createDataset(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.BasicRelationFeatureFactory:java.lang.String getFeature(edu.stanford.nlp.ie.machinereading.structure.RelationMention,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:edu.stanford.nlp.ling.Datum createDatum(edu.stanford.nlp.ie.machinereading.structure.RelationMention,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classifyMaxEnt(java.util.List,edu.stanford.nlp.sequences.SequenceModel)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classifyMaxEnt(java.util.List,edu.stanford.nlp.util.Triple)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classifyMaxEnt(java.util.List)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TestSentence:void runTagInference()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TestSentence:java.util.ArrayList testTagInference()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.AbstractDependencyGrammar:double score(edu.stanford.nlp.parser.lexparser.IntDependency)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:double scoreAll(java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void tune(java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.AbstractDependencyGrammar:double score(int,int,int,int,boolean,int)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory$NegativeScorer:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.GoldenSectionLineSearch:double minimize(java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:java.lang.String toVerticalString(edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Sentence:java.util.List nerTags(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:java.util.List nerTags()"
        ]
    },
    "edu.stanford.nlp.simple.Sentence:edu.stanford.nlp.trees.Tree parse(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:edu.stanford.nlp.trees.Tree parse()"
        ]
    },
    "edu.stanford.nlp.simple.Sentence:java.util.Collection openie()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Sentence:java.util.Collection openieTriples(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:java.util.Collection openieTriples()"
        ]
    },
    "edu.stanford.nlp.simple.Sentence:void regexner(java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Sentence:java.util.List posTags(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:java.util.List posTags()"
        ]
    },
    "edu.stanford.nlp.simple.Sentence:java.util.List incomingDependencyLabels(java.util.Properties,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:java.util.List incomingDependencyLabels(java.util.Properties)",
            "edu.stanford.nlp.simple.Sentence:java.util.List incomingDependencyLabels(edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode)",
            "edu.stanford.nlp.simple.Sentence:java.util.List incomingDependencyLabels()"
        ]
    },
    "edu.stanford.nlp.simple.Sentence:java.util.Optional incomingDependencyLabel(java.util.Properties,int,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:java.util.Optional incomingDependencyLabel(java.util.Properties,int)",
            "edu.stanford.nlp.simple.Sentence:java.util.Optional incomingDependencyLabel(int,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode)"
        ]
    },
    "edu.stanford.nlp.simple.Sentence:java.util.Optional governor(java.util.Properties,int,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:java.util.Optional governor(int,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode)",
            "edu.stanford.nlp.simple.Sentence:java.util.Optional governor(java.util.Properties,int)"
        ]
    },
    "edu.stanford.nlp.simple.Sentence:java.util.List governors(java.util.Properties,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:java.util.List governors(edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode)",
            "edu.stanford.nlp.simple.Sentence:java.util.List governors()",
            "edu.stanford.nlp.simple.Sentence:java.util.List governors(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.simple.Sentence:java.util.List natlogPolarities(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:java.util.List natlogPolarities()"
        ]
    },
    "edu.stanford.nlp.simple.Sentence:java.util.List operators(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:java.util.List operators()",
            "edu.stanford.nlp.simple.Sentence:java.util.Optional operatorAt(int)",
            "edu.stanford.nlp.simple.Sentence:java.util.Optional operatorAt(java.util.Properties,int)",
            "edu.stanford.nlp.simple.Sentence:java.util.List operatorsNonempty(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.simple.Sentence:edu.stanford.nlp.naturalli.Polarity natlogPolarity(java.util.Properties,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:edu.stanford.nlp.naturalli.Polarity natlogPolarity(int)"
        ]
    },
    "edu.stanford.nlp.simple.Sentence:java.util.List lemmas(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:java.util.List lemmas()"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.MachineReading:edu.stanford.nlp.pipeline.Annotation annotate(edu.stanford.nlp.pipeline.Annotation,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.MachineReading:edu.stanford.nlp.pipeline.Annotation annotate(edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.ie.machinereading.MachineReading:java.util.List run()"
        ]
    },
    "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.util.Pair readTestExamples(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:void testClassifier(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:void train()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:void train(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.regexp.NumberSequenceClassifier:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.BasicEntityExtractor:void train(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.international.arabic.process.ArabicSegmenter:edu.stanford.nlp.international.arabic.process.ArabicSegmenter getSegmenter(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.arabic.process.ArabicSegmenter:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers:edu.stanford.nlp.util.logging.LogRecordHandler showOnlyChannels(java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.BinaryHeapPriorityQueue:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:boolean isDag(edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.stats.GeneralizedCounter$CounterView:int hashCode()",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:void killNonRooted(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:java.util.Map buildMergeCorrespondence(java.util.List)",
            "edu.stanford.nlp.parser.metrics.AbstractEval:double precision(java.util.Set,java.util.Set)",
            "edu.stanford.nlp.stats.GeneralizedCounter:void prettyPrint(java.io.PrintWriter,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.dcoref.Dictionaries:void setPronouns()",
            "edu.stanford.nlp.parser.metrics.TaggingEval:void display(boolean,java.io.PrintWriter)",
            "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Set)",
            "edu.stanford.nlp.semgraph.SemanticGraph:void <init>(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Map)",
            "edu.stanford.nlp.hcoref.data.Dictionaries:void setPronouns()",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void postProcessing(edu.stanford.nlp.dcoref.Document)",
            "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:boolean skipThisMention(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.semgraph.SemanticGraphFormatter:java.lang.String formatSemanticGraph(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.fsm.QuasiDeterminizer:edu.stanford.nlp.stats.ClassicCounter computeLambda(edu.stanford.nlp.fsm.TransducerGraph)",
            "edu.stanford.nlp.util.CollectionUtils:boolean containsAny(java.util.Collection,java.util.Collection)",
            "edu.stanford.nlp.hcoref.Rules:boolean entityBothHaveProper(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster)",
            "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter chooseTopWords(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.Counter,java.util.Set,double)",
            "edu.stanford.nlp.hcoref.CorefPrinter:java.lang.String printConllOutput(edu.stanford.nlp.hcoref.data.Document,java.util.List,boolean)",
            "edu.stanford.nlp.optimization.SGDWithAdaGradAndFOBOS:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[],int)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter product(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.hcoref.data.CorefCluster:boolean isSinglePronounCluster(edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.parser.lexparser.TregexPoweredTreebankParserParams:void display()",
            "edu.stanford.nlp.hcoref.data.CorefChain:void <init>(edu.stanford.nlp.hcoref.data.CorefCluster,java.util.Map)",
            "edu.stanford.nlp.patterns.ConstantsAndVariables:edu.stanford.nlp.patterns.CandidatePhrase containsFuzzy(java.util.Set,edu.stanford.nlp.patterns.CandidatePhrase,int)",
            "edu.stanford.nlp.parser.metrics.EvalbByCat:void display(boolean,java.io.PrintWriter)",
            "edu.stanford.nlp.fsm.TransducerGraph$NormalizingGraphProcessor:edu.stanford.nlp.fsm.TransducerGraph processGraph(edu.stanford.nlp.fsm.TransducerGraph)",
            "edu.stanford.nlp.graph.DijkstraShortestPath:java.util.List getShortestPath(edu.stanford.nlp.graph.Graph,java.lang.Object,java.lang.Object,boolean)",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.lang.String toString(edu.stanford.nlp.ling.CoreLabel$OutputFormat)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:void addAllInterningAndPrefixing(java.util.Collection,java.util.Collection,java.lang.String)",
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:boolean hasTo(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.dcoref.Rules:boolean entityHaveIncompatibleModifier(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention)",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void treatCC(java.util.Collection)",
            "edu.stanford.nlp.semgraph.SemanticGraph:boolean isDag()",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void collapsePrepAndPoss(java.util.Collection)",
            "edu.stanford.nlp.dcoref.ScorerBCubed:void calculatePrecisionBall(edu.stanford.nlp.dcoref.Document)",
            "edu.stanford.nlp.dcoref.Mention:int getCoordination()",
            "edu.stanford.nlp.stats.GeneralizedCounter$CounterView:java.lang.String toString()",
            "edu.stanford.nlp.optimization.QNMinimizer:void constrainSearchDir(double[],double[],double[],edu.stanford.nlp.optimization.Function)",
            "edu.stanford.nlp.trees.tregex.gui.ScrollableTreeJPanel:void renderRows(java.awt.Graphics2D,java.awt.FontMetrics,java.awt.Color)",
            "edu.stanford.nlp.stats.GeneralizedCounter:void printKeySet()",
            "edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon:void finishTraining()",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:void clean()",
            "edu.stanford.nlp.hcoref.Rules:boolean entityClusterAllCorefDictionary(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Dictionaries,int,int)",
            "edu.stanford.nlp.stats.Counters:double jaccardCoefficient(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.fsm.TransducerGraph:edu.stanford.nlp.fsm.TransducerGraph$Arc getArc(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.fsm.TransducerGraph:void depthFirstSearchHelper(java.lang.Object,java.util.Set,int,boolean,java.lang.StringBuilder)",
            "edu.stanford.nlp.trees.tregex.gui.Tdiff:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void initRulesWithWord()",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.lang.String toList()",
            "edu.stanford.nlp.optimization.QNMinimizer:double l1NormOWL(double[],edu.stanford.nlp.optimization.Function)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void examineIntersection(java.util.Set,java.util.Set)",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:void extractNamedEntityModifiers(java.util.List,java.util.List,java.util.List,java.util.Set)",
            "edu.stanford.nlp.stats.Distribution:edu.stanford.nlp.stats.Distribution getUniformDistribution(java.util.Collection)",
            "edu.stanford.nlp.stats.Counters:void save2DCounter(edu.stanford.nlp.stats.TwoDimensionalCounter,java.lang.String)",
            "edu.stanford.nlp.fsm.TransducerGraph:void <init>(java.util.Set,java.lang.Object,java.util.Set,edu.stanford.nlp.fsm.TransducerGraph$ArcProcessor,edu.stanford.nlp.fsm.TransducerGraph$NodeProcessor)",
            "edu.stanford.nlp.parser.metrics.Evalb$CBEval:void checkCrossing(java.util.Set,java.util.Set)",
            "edu.stanford.nlp.dcoref.ScorerBCubed:void calculateRecallBall(edu.stanford.nlp.dcoref.Document)",
            "edu.stanford.nlp.classify.Dataset:edu.stanford.nlp.stats.Counter getFeatureCounter()",
            "edu.stanford.nlp.fsm.TransducerGraph:java.lang.String asDOTString()",
            "edu.stanford.nlp.semgraph.SemanticGraph:edu.stanford.nlp.ling.IndexedWord getFirstRoot()",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.hcoref.data.Document:void mergeIncompatibles(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster)",
            "edu.stanford.nlp.dcoref.Mention:boolean includedIn(edu.stanford.nlp.dcoref.Mention)",
            "edu.stanford.nlp.stats.Counters:void addInPlace(edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,double)",
            "edu.stanford.nlp.dcoref.Rules:boolean entityAttributesAgree(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,boolean)",
            "edu.stanford.nlp.process.WordToSentenceProcessor:void <init>(java.lang.String,java.util.Set,java.util.Set,java.util.Set,java.lang.String,edu.stanford.nlp.process.WordToSentenceProcessor$NewlineIsSentenceBreak,edu.stanford.nlp.ling.tokensregex.SequencePattern,java.util.Set,boolean,boolean)",
            "edu.stanford.nlp.naturalli.ClauseSplitter:boolean lambda$null$108(edu.stanford.nlp.naturalli.OpenIE,java.util.Collection,java.util.List,edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$Featurizer,java.util.Optional,edu.stanford.nlp.classify.WeightedDataset,edu.stanford.nlp.util.Triple)",
            "edu.stanford.nlp.dcoref.Mention:java.lang.String getQuantification(edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.semgraph.SemanticGraph:boolean matchPatternToVertex(java.lang.String,edu.stanford.nlp.ling.IndexedWord,boolean)",
            "edu.stanford.nlp.dcoref.Rules:boolean entityBothHaveProper(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster)",
            "edu.stanford.nlp.hcoref.Rules:boolean entityAttributesAgree(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,boolean)",
            "edu.stanford.nlp.fsm.QuasiDeterminizer:edu.stanford.nlp.fsm.TransducerGraph pushLambdas(edu.stanford.nlp.fsm.TransducerGraph,edu.stanford.nlp.stats.ClassicCounter)",
            "edu.stanford.nlp.dcoref.ACEMentionExtractor:void printRawDoc(java.util.List,java.util.List,java.lang.String,boolean)",
            "edu.stanford.nlp.hcoref.data.Mention:int getNegation(edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void initRulesWithWord()",
            "edu.stanford.nlp.fsm.TransducerGraph:double getSourceTotal(java.lang.Object)",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Iterable)",
            "edu.stanford.nlp.dcoref.Rules:boolean entityHaveDifferentLocation(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.semgraph.SemanticGraph:edu.stanford.nlp.ling.IndexedWord getCommonAncestor(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.hcoref.CorefPrinter:boolean isFirstMention(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processEdge(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void lambda$null$9(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.pipeline.XMLOutputter:nu.xom.Element buildDependencyTreeInfo(java.lang.String,edu.stanford.nlp.semgraph.SemanticGraph,java.util.List,java.lang.String)",
            "edu.stanford.nlp.hcoref.Rules:boolean entityPersonDisagree(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:edu.stanford.nlp.trees.GrammaticalRelation determinePrepRelation(java.util.Map,java.util.List,edu.stanford.nlp.trees.TypedDependency,edu.stanford.nlp.trees.TypedDependency,boolean)",
            "edu.stanford.nlp.hcoref.data.CorefCluster:void printCorefCluster()",
            "edu.stanford.nlp.fsm.TransducerGraph:double sumOutputs(java.util.Set)",
            "edu.stanford.nlp.dcoref.CorefCluster:boolean isSinglePronounCluster(edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.parser.lexparser.UnknownGTTrainer:void finishTraining()",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void countOriginalStates()",
            "edu.stanford.nlp.hcoref.data.Mention:java.lang.String getQuantification(edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.classify.LinearClassifier:int getFeatureCountLabelIndices(java.util.Set,double,boolean)",
            "edu.stanford.nlp.stats.GeneralizedCounter:edu.stanford.nlp.stats.GeneralizedCounter reverseKeys()",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:edu.stanford.nlp.util.Pair leftRightMostChildVertices(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.classify.Dataset:edu.stanford.nlp.classify.Dataset getRandomSubDataset(double,int)",
            "edu.stanford.nlp.optimization.QNMinimizer:double[] projectOWL(double[],double[],edu.stanford.nlp.optimization.Function)",
            "edu.stanford.nlp.hcoref.Rules:boolean entityHaveDifferentLocation(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void treatCC(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.ling.tokensregex.ComplexNodePattern$AttributesEqualMatchChecker:boolean matches(java.util.Map,java.util.Map)",
            "edu.stanford.nlp.parser.shiftreduce.PerceptronModel:void averageModels(java.util.Collection)",
            "edu.stanford.nlp.hcoref.data.Mention:int getReportEmbedding(edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.hcoref.Rules:boolean entityHeadsAgree(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.ie.NERFeatureFactory:java.util.Collection featuresC(edu.stanford.nlp.util.PaddedList,int)",
            "edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve:boolean skipThisMention(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.pipeline.DeterministicCorefAnnotator:void addObsoleteCoreferenceAnnotations(edu.stanford.nlp.pipeline.Annotation,java.util.List,java.util.Map)",
            "edu.stanford.nlp.patterns.surface.LearnImportantFeatures:edu.stanford.nlp.ling.RVFDatum getDatum(edu.stanford.nlp.ling.CoreLabel[],int)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void removeDeleteSplittersFromSplitters(edu.stanford.nlp.trees.TreebankLanguagePack,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:java.util.Collection getInverseImages(edu.stanford.nlp.fsm.FastExactAutomatonMinimizer$Split)",
            "edu.stanford.nlp.hcoref.Rules:boolean entityHaveIncompatibleModifier(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)",
            "edu.stanford.nlp.dcoref.Rules:boolean entityHaveExtraProperNoun(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,java.util.Set)",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Collection typedDependencies()",
            "edu.stanford.nlp.parser.lexparser.TregexPoweredTreebankParserParams:java.lang.String getAnnotationString(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:edu.stanford.nlp.ling.IndexedWord leftMostChildVertice(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.dcoref.CorefChain:void <init>(edu.stanford.nlp.dcoref.CorefCluster,java.util.Map)",
            "edu.stanford.nlp.naturalli.ForwardEntailerSearchProblem:edu.stanford.nlp.util.Pair lambda$searchImplementation$16(edu.stanford.nlp.naturalli.ForwardEntailerSearchProblem$SearchState,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.time.SUTime$ExplicitTemporalSet:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.parser.lexparser.BinaryGrammarExtractor:edu.stanford.nlp.util.Pair formResult()",
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.pipeline.CoreNLPProtos$Mention toProto(edu.stanford.nlp.hcoref.data.Mention)",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:void collapsePrepAndPoss(java.util.Collection)",
            "edu.stanford.nlp.dcoref.Rules:boolean entityIsAcronym(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster)",
            "edu.stanford.nlp.trees.Dependencies:java.util.Set getGovMaxChains(java.util.Map,edu.stanford.nlp.ling.IndexedWord,int)",
            "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:edu.stanford.nlp.fsm.TransducerGraph buildMinimizedFA()",
            "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:void extractMentionForHeadword(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.trees.TreePrint:void printTreeInternal(edu.stanford.nlp.trees.Tree,java.io.PrintWriter,boolean)",
            "edu.stanford.nlp.parser.lexparser.UnaryGrammar:void readObject(java.io.ObjectInputStream)",
            "edu.stanford.nlp.fsm.TransducerGraph:void depthFirstSearch(boolean,java.lang.StringBuilder)",
            "edu.stanford.nlp.dcoref.MentionExtractor:void markMentionRelation(java.util.List,java.util.Set,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void triggerAllHooks(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.hcoref.sieve.RFSieve:edu.stanford.nlp.ling.RVFDatum extractDatum(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,int,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.String)",
            "edu.stanford.nlp.stats.Counters:java.util.Set retainKeys(edu.stanford.nlp.stats.Counter,java.util.Collection)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void splitToChildOfEdge(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraphEdge)",
            "edu.stanford.nlp.hcoref.Rules:boolean entitySameProperHeadLastWord(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)",
            "edu.stanford.nlp.parser.metrics.EvalbByCat:java.util.Map makeObjectsByCat(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.hcoref.Preprocessor:void markMentionRelation(java.util.List,java.util.Set,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])",
            "edu.stanford.nlp.tagger.maxent.CaselessCompanyNameDetector:void <init>()",
            "edu.stanford.nlp.dcoref.Rules:boolean entitySameProperHeadLastWord(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention)",
            "edu.stanford.nlp.parser.lexparser.ExactGrammarCompactor:edu.stanford.nlp.fsm.TransducerGraph doCompaction(edu.stanford.nlp.fsm.TransducerGraph,java.util.List,java.util.List)",
            "edu.stanford.nlp.graph.ConnectedComponents:java.util.Set bfs(java.util.LinkedList,edu.stanford.nlp.graph.Graph,java.util.List)",
            "edu.stanford.nlp.hcoref.sieve.Sieve:boolean matchedMentionType(edu.stanford.nlp.hcoref.data.Mention,java.util.Set)",
            "edu.stanford.nlp.stats.GeneralizedCounter$OneDimensionalCounterView:int hashCode()",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void clean()",
            "edu.stanford.nlp.util.StringUtils:java.lang.String join(java.lang.Iterable,java.lang.String)",
            "edu.stanford.nlp.dcoref.CorefCluster:void mergeClusters(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster)",
            "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter learnNewPhrasesPrivate(java.lang.String,edu.stanford.nlp.patterns.surface.PatternsForEachToken,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.util.Set,edu.stanford.nlp.util.CollectionValuedMap,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,java.lang.String,java.util.Set,boolean)",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:boolean mentionContainsRemoveChars(edu.stanford.nlp.hcoref.data.Mention,java.util.Set)",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:boolean isConjWithNoPrep(edu.stanford.nlp.ling.IndexedWord,java.util.Collection)",
            "edu.stanford.nlp.dcoref.Rules:boolean entityPersonDisagree(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter average(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void printRawDoc(edu.stanford.nlp.dcoref.Document,boolean)",
            "edu.stanford.nlp.stats.TwoDimensionalCounter:void removeZeroCounts()",
            "edu.stanford.nlp.time.JollyDayHolidays:java.util.Map getAllHolidaysMap(java.util.Set)",
            "edu.stanford.nlp.stats.Counters:void printCounterComparison(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.io.PrintWriter)",
            "edu.stanford.nlp.classify.LinearClassifier:java.util.Set getLabelIndices(java.util.Set)",
            "edu.stanford.nlp.pipeline.CorefAnnotator:void annotateOldFormat(java.util.Map,edu.stanford.nlp.hcoref.data.Document)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter absoluteDifference(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter diff(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.hcoref.CorefSystem:void postProcessing(edu.stanford.nlp.hcoref.data.Document)",
            "edu.stanford.nlp.dcoref.ScorerBCubed:void calculateRecallBconll(edu.stanford.nlp.dcoref.Document)",
            "edu.stanford.nlp.parser.metrics.Evalb:void emitSortedTrees(java.util.PriorityQueue,int,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void buildPT_T()",
            "edu.stanford.nlp.parser.lexparser.GrammarCompactor:edu.stanford.nlp.util.Pair convertGraphsToGrammar(java.util.Set,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void optimizeSieveOrdering(edu.stanford.nlp.dcoref.MentionExtractor,java.util.Properties,java.lang.String)",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromEdges(java.lang.Iterable)",
            "edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern$AttributesEqualMatchChecker:boolean matches(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.stats.Counters:java.util.Set retainMatchingKeys(edu.stanford.nlp.stats.Counter,java.util.List)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter divisionNonNaN(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.time.JollyDayHolidays:edu.stanford.nlp.util.CollectionValuedMap getAllHolidaysCVMap(java.util.Set)",
            "edu.stanford.nlp.stats.Counters:java.util.Set retainAbove(edu.stanford.nlp.stats.Counter,double)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void search(java.util.function.Predicate,edu.stanford.nlp.classify.Classifier,java.util.Map,java.util.function.Function,int)",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.lang.String toReadableString()",
            "edu.stanford.nlp.international.arabic.process.ArabicSegmenterFeatureFactory:java.util.Collection getCliqueFeatures(edu.stanford.nlp.util.PaddedList,int,edu.stanford.nlp.sequences.Clique)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotator:edu.stanford.nlp.trees.Tree transformTreeHelper(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:void addSplits(edu.stanford.nlp.fsm.FastExactAutomatonMinimizer$Block)",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:void addNamedEntityStrings(edu.stanford.nlp.util.CoreMap,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.hcoref.Rules:boolean entityIWithinI(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.parser.nndep.Classifier$CostFunction:edu.stanford.nlp.parser.nndep.Classifier$Cost process(edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.hcoref.data.Mention:int getCoordination()",
            "edu.stanford.nlp.hcoref.Rules:boolean entityIsAcronym(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster)",
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:double sampleSequenceForward(edu.stanford.nlp.sequences.SequenceModel,int[],double,java.util.Set)",
            "edu.stanford.nlp.parser.metrics.EvalbByCat:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void triggerHooks(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.hcoref.md.MentionDetectionClassifier:edu.stanford.nlp.stats.Counter extractFeatures(edu.stanford.nlp.hcoref.data.Mention,java.util.Set,java.util.Set,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter intersection(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.hcoref.data.CorefCluster:void mergeClusters(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster)",
            "edu.stanford.nlp.hcoref.Rules:boolean entityHaveIncompatibleModifier(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster)",
            "edu.stanford.nlp.hcoref.Rules:boolean entityExactStringMatch(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Set)",
            "edu.stanford.nlp.hcoref.Rules:boolean entitySameProperHeadLastWord(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)",
            "edu.stanford.nlp.dcoref.Mention:int getNegation(edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.naturalli.Util:java.util.List cleanTree(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.stats.Counters:java.util.Set retainNonZeros(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.parser.metrics.TreeSpanScoring:java.util.Set simplifyConstituents(edu.stanford.nlp.trees.TreebankLanguagePack,java.util.Set)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void removeDeleteSplittersFromSplitters(edu.stanford.nlp.trees.TreebankLanguagePack,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.sentiment.AbstractEvaluate:edu.stanford.nlp.stats.Counter lengthAccuracies()",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.lang.String toCompactString(boolean)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter division(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.trees.Dependencies:edu.stanford.nlp.stats.Counter getTypedDependencyChains(java.util.List,int)",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void coreference(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processHook(edu.stanford.nlp.parser.lexparser.Hook)",
            "edu.stanford.nlp.sentiment.SentimentModel:void <init>(edu.stanford.nlp.sentiment.RNNOptions,java.util.List)",
            "edu.stanford.nlp.util.PropertiesUtils:void checkProperties(java.util.Properties,java.util.Properties)",
            "edu.stanford.nlp.trees.Constituent:boolean crosses(java.util.Collection)",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void printConllOutput(edu.stanford.nlp.dcoref.Document,java.io.PrintWriter,java.util.List,boolean)",
            "edu.stanford.nlp.dcoref.ScorerBCubed:void calculateRecallBcai(edu.stanford.nlp.dcoref.Document)",
            "edu.stanford.nlp.dcoref.Rules:boolean entityClusterAllCorefDictionary(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Dictionaries,int,int)",
            "edu.stanford.nlp.dcoref.Rules:boolean entityIWithinI(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.semgraph.SemanticGraph:boolean isInConditionalContext(edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.hcoref.Rules:boolean entityHaveExtraProperNoun(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,java.util.Set)",
            "edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries,java.util.Set,edu.stanford.nlp.dcoref.Semantics)",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap:java.lang.String getFirstTranslation(java.lang.String)",
            "edu.stanford.nlp.parser.metrics.TaggingEval:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)",
            "edu.stanford.nlp.dcoref.Rules:boolean entityHeadsAgree(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.tagger.maxent.TaggerExperiments:void getFeaturesNew()",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:boolean insideNE(edu.stanford.nlp.util.IntPair,java.util.Set)",
            "edu.stanford.nlp.stats.Counters:void addInPlace(edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter)",
            "edu.stanford.nlp.util.Sets:java.util.Set powerSet(java.util.Set)",
            "edu.stanford.nlp.ie.crf.LabelDictionary:void lock(int,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:boolean insideNE(edu.stanford.nlp.util.IntPair,java.util.Set)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:edu.stanford.nlp.semgraph.SemanticGraph resetVerticeOrdering(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.dcoref.CorefCluster:void printCorefCluster(java.util.logging.Logger)",
            "edu.stanford.nlp.dcoref.Rules:boolean entityHaveIncompatibleModifier(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster)",
            "edu.stanford.nlp.sentiment.SentimentModel:void initRandomWordVectors(java.util.List)",
            "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter add(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.time.SUTime$ExplicitTemporalSet:edu.stanford.nlp.time.SUTime$Temporal intersect(edu.stanford.nlp.time.SUTime$Temporal)",
            "edu.stanford.nlp.dcoref.Mention:int getReportEmbedding(edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:java.util.Iterator ruleIteratorByWord(int,int,java.lang.String)",
            "edu.stanford.nlp.stats.GeneralizedCounter$OneDimensionalCounterView:java.lang.String toString()",
            "edu.stanford.nlp.stats.TwoDimensionalIntCounter:void removeZeroCounts()",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Collection removeDuplicates(java.util.Collection,java.util.Collection)",
            "edu.stanford.nlp.parser.metrics.AbstractEval$RuleErrorEval:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)",
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:boolean hasBeAux(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.dcoref.Rules:boolean entityExactStringMatch(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Dictionaries,java.util.Set)",
            "edu.stanford.nlp.time.SUTime$ExplicitTemporalSet:edu.stanford.nlp.time.SUTime$ExplicitTemporalSet setTimeZone(org.joda.time.DateTimeZone)",
            "edu.stanford.nlp.dcoref.ScorerBCubed:void calculatePrecisionBcai(edu.stanford.nlp.dcoref.Document)",
            "edu.stanford.nlp.dcoref.Rules:boolean entitySameProperHeadLastWord(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:java.util.Iterator ruleIteratorByWord(int,int,java.lang.String)",
            "edu.stanford.nlp.semgraph.SemanticGraph:int commonAncestor(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.hcoref.md.MentionDetectionClassifier:void classifyMentions(java.util.List,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)",
            "edu.stanford.nlp.util.CollectionUtils:java.util.Set intersection(java.util.Set,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.BoundedCostOrderedMap:java.util.List valuesList()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$MatchQueue:java.util.List toSortedList()"
        ]
    },
    "edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers:edu.stanford.nlp.util.logging.LogRecordHandler hideChannels(java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.RedwoodConfiguration:edu.stanford.nlp.util.logging.RedwoodConfiguration minimal()",
            "edu.stanford.nlp.util.logging.RedwoodConfiguration:edu.stanford.nlp.util.logging.RedwoodConfiguration javaUtilLogging()",
            "edu.stanford.nlp.util.logging.RedwoodConfiguration:edu.stanford.nlp.util.logging.RedwoodConfiguration slf4j()"
        ]
    },
    "edu.stanford.nlp.international.morph.MorphoFeatureSpecification:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:java.lang.String setupMorphoFeatures(java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams:java.lang.String setupMorphoFeatures(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.CorefCluster:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Pair:void save(java.io.DataOutputStream)",
            "edu.stanford.nlp.patterns.ConstantsAndVariables$ScorePhraseMeasures:int compareTo(java.lang.Object)",
            "edu.stanford.nlp.patterns.surface.Token:boolean equals(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.parser.dvparser.FilterConfusingRules:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.CollectionUtils:java.util.List filterAsList(java.util.Collection,java.util.function.Predicate)"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void <init>(edu.stanford.nlp.trees.Tree,java.util.function.Predicate,edu.stanford.nlp.trees.HeadFinder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructureFactory:edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure newGrammaticalStructure(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams:edu.stanford.nlp.trees.GrammaticalStructure getGrammaticalStructure(edu.stanford.nlp.trees.Tree,java.util.function.Predicate,edu.stanford.nlp.trees.HeadFinder)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams:edu.stanford.nlp.trees.GrammaticalStructure getGrammaticalStructure(edu.stanford.nlp.trees.Tree,java.util.function.Predicate,edu.stanford.nlp.trees.HeadFinder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper$GsIterator:void primeGs()"
        ]
    },
    "edu.stanford.nlp.trees.EnglishGrammaticalStructureFactory:edu.stanford.nlp.trees.EnglishGrammaticalStructure newGrammaticalStructure(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.EnglishGrammaticalStructureFactory:edu.stanford.nlp.trees.GrammaticalStructure newGrammaticalStructure(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructureFactory:edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure newGrammaticalStructure(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructureFactory:edu.stanford.nlp.trees.GrammaticalStructure newGrammaticalStructure(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:void <init>(edu.stanford.nlp.trees.Tree,java.util.function.Predicate)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:void <init>(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructureFactory:edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure newGrammaticalStructure(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:void <init>(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.HeadFinder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams:edu.stanford.nlp.trees.GrammaticalStructure getGrammaticalStructure(edu.stanford.nlp.trees.Tree,java.util.function.Predicate,edu.stanford.nlp.trees.HeadFinder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.UDFeatureAnnotator:void doOneSentence(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.SentenceAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.pipeline.SentenceAnnotator$AnnotatorProcessor:edu.stanford.nlp.util.CoreMap process(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.pipeline.CoNLLUOutputter:void print(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream,edu.stanford.nlp.pipeline.AnnotationOutputter$Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotationOutputter:void print(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream,edu.stanford.nlp.pipeline.StanfordCoreNLP)",
            "edu.stanford.nlp.pipeline.CoNLLUOutputter:void conllUPrint(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream,edu.stanford.nlp.pipeline.AnnotationOutputter$Options)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void lambda$createOutputter$14(edu.stanford.nlp.pipeline.StanfordCoreNLP$OutputFormat,edu.stanford.nlp.pipeline.AnnotationOutputter$Options,java.lang.String,java.lang.String,java.util.Properties,edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream)",
            "edu.stanford.nlp.pipeline.AnnotationOutputter:void print(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream)"
        ]
    },
    "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:void extractNPorPRPFromDependency(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:java.util.List findMentions(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParserQuery:boolean parseAndReport(java.util.List,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:double testOnTreebank(edu.stanford.nlp.trees.Treebank)",
            "edu.stanford.nlp.parser.common.ParsingThreadsafeProcessor:edu.stanford.nlp.parser.common.ParserQuery process(java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:edu.stanford.nlp.trees.Tree parse(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.common.ParserGrammar:edu.stanford.nlp.trees.Tree parse(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.shiftreduce.PerceptronModel$TrainTreeProcessor:java.lang.Object process(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TregexPoweredTreebankParserParams:java.lang.String getAnnotationString(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.util.IntervalTree:java.util.List getNonOverlappingMaxScore(java.util.List,java.util.function.Function,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTraining(edu.stanford.nlp.tagger.maxent.TaggerConfig)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter:void prettyPrint(java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter:void prettyPrint()"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter$Entry:int hashCode()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.GeneralizedCounter$Entry:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.GeneralizedCounter$Entry:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:void updateExpressionExtractor(edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor,java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor createExtractorFromFiles(edu.stanford.nlp.ling.tokensregex.Env,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor getExpressionExtractor(edu.stanford.nlp.ling.tokensregex.Env,java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor createExtractorFromString(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:void makeInitialBlocks()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.FastExactAutomatonMinimizer:void minimize()"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode,edu.stanford.nlp.trees.GrammaticalStructure$Extras,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode,boolean,boolean)",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph generateCCProcessedDependencies(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.semgraph.semgrex.SemgrexPattern:void main(java.lang.String[])",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph generateUncollapsedDependencies(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph generateCollapsedDependencies(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode,edu.stanford.nlp.trees.GrammaticalStructure$Extras,java.util.function.Predicate)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode,boolean,java.util.function.Predicate)",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph allTypedDependencies(edu.stanford.nlp.trees.Tree,boolean)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.Tree,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader:void setDependencyTree(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode,boolean,boolean,java.util.function.Predicate)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructureFactory:edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure newGrammaticalStructure(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructureFactory:edu.stanford.nlp.trees.GrammaticalStructure newGrammaticalStructure(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void <init>(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructureFactory:edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure newGrammaticalStructure(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:edu.stanford.nlp.trees.TreePrint getTreePrint()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:boolean parse(edu.stanford.nlp.parser.lexparser.HTKLatticeReader)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:boolean parseInternal(java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.TreePrint getTreePrint()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.sentiment.SentimentCostAndGradient:edu.stanford.nlp.sentiment.SentimentCostAndGradient$ModelDerivatives access$000(edu.stanford.nlp.sentiment.SentimentCostAndGradient,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient$ScoringProcessor:edu.stanford.nlp.sentiment.SentimentCostAndGradient$ModelDerivatives process(java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.dvparser.DVParserCostAndGradient$ScoringProcessor:edu.stanford.nlp.util.Pair process(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.DVParserCostAndGradient$ScoringProcessor:java.lang.Object process(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.parser.dvparser.DVParserCostAndGradient:edu.stanford.nlp.trees.DeepTree getHighestScoringTree(edu.stanford.nlp.trees.Tree,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.DVParserCostAndGradient:java.util.List getAllHighestScoringTreesTest(java.util.List)",
            "edu.stanford.nlp.parser.dvparser.DVParserCostAndGradient$ScoringProcessor:edu.stanford.nlp.util.Pair process(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.parser.dvparser.DVModelReranker$Query:double score(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.RerankingParserQuery:java.util.List rerank(java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.simple.Document:java.lang.String xml(java.util.function.Function[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Document:java.lang.String xmlMinified(java.util.function.Function[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Document:java.lang.String json(java.util.function.Function[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Sentence:edu.stanford.nlp.util.CoreMap asCoreMap(java.util.function.Function[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:java.util.List asCoreLabels(java.util.function.Function[])"
        ]
    },
    "edu.stanford.nlp.simple.Document:java.lang.String jsonMinified(java.util.function.Function[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.SentenceAlgorithms:void unescapeHTML()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLPClient$2:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.XMLOutputter:nu.xom.Document annotationToDoc(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.pipeline.AnnotationOutputter$Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.XMLOutputter:void print(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream,edu.stanford.nlp.pipeline.AnnotationOutputter$Options)",
            "edu.stanford.nlp.pipeline.XMLOutputter:nu.xom.Document annotationToDoc(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.pipeline.StanfordCoreNLP)"
        ]
    },
    "edu.stanford.nlp.pipeline.TextOutputter:void prettyPrint(edu.stanford.nlp.pipeline.Annotation,java.io.PrintWriter,edu.stanford.nlp.pipeline.StanfordCoreNLP)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.TextOutputter:void prettyPrint(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream,edu.stanford.nlp.pipeline.StanfordCoreNLP)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void prettyPrint(edu.stanford.nlp.pipeline.Annotation,java.io.PrintWriter)"
        ]
    },
    "edu.stanford.nlp.pipeline.TextOutputter:void print(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream,edu.stanford.nlp.pipeline.AnnotationOutputter$Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void lambda$createOutputter$14(edu.stanford.nlp.pipeline.StanfordCoreNLP$OutputFormat,edu.stanford.nlp.pipeline.AnnotationOutputter$Options,java.lang.String,java.lang.String,java.util.Properties,edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream)",
            "edu.stanford.nlp.pipeline.AnnotationOutputter:void print(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream)"
        ]
    },
    "edu.stanford.nlp.trees.QPTreeTransformer:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.CoordinationTransformer:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.QPTreeTransformer:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.DependencyTreeTransformer:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.CoordinationTransformer:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.roth.RothCONLL04Reader:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.roth.RothCONLL04Reader:void main(java.lang.String[])",
            "edu.stanford.nlp.pipeline.RelationExtractorAnnotator:void <init>(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:void <init>(edu.stanford.nlp.pipeline.StanfordCoreNLP,boolean,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.ACEMentionExtractor:void <init>(edu.stanford.nlp.dcoref.Dictionaries,java.util.Properties,edu.stanford.nlp.dcoref.Semantics)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:void <init>(edu.stanford.nlp.pipeline.StanfordCoreNLP,boolean)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer$NPTmpRetainingTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void <init>(edu.stanford.nlp.parser.lexparser.LexicalizedParser)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.DVParser:void train(java.util.List,java.util.IdentityHashMap,edu.stanford.nlp.trees.Treebank,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.parser.dvparser.DVParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotationOutputter:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void <init>(edu.stanford.nlp.international.morph.MorphoFeatureSpecification,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:edu.stanford.nlp.parser.shiftreduce.ShiftReduceOptions buildTrainingOptions(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:java.util.function.Function loadParser(java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser loadModel(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.MentionExtractor:void <init>(edu.stanford.nlp.dcoref.Dictionaries,edu.stanford.nlp.dcoref.Semantics)"
        ]
    },
    "edu.stanford.nlp.hcoref.CorefDocMaker:void <init>(java.util.Properties,edu.stanford.nlp.hcoref.data.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.StatisticalCorefSystem:void <init>(java.util.Properties)",
            "edu.stanford.nlp.hcoref.CorefSystem:void <init>(java.util.Properties)",
            "edu.stanford.nlp.scoref.DocumentProcessor:void runFromScratch(java.util.Properties,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.scoref.DocumentProcessor:void run(java.util.Properties,edu.stanford.nlp.hcoref.data.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.dcoref.ACEMentionExtractor:void <init>(edu.stanford.nlp.dcoref.Dictionaries,java.util.Properties,edu.stanford.nlp.dcoref.Semantics)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.ACEMentionExtractor:void <init>(edu.stanford.nlp.dcoref.Dictionaries,java.util.Properties,edu.stanford.nlp.dcoref.Semantics,edu.stanford.nlp.classify.LogisticClassifier)"
        ]
    },
    "edu.stanford.nlp.pipeline.DeterministicCorefAnnotator:void <init>(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorImplementations:edu.stanford.nlp.pipeline.Annotator dcoref(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.dcoref.MUCMentionExtractor:void <init>(edu.stanford.nlp.dcoref.Dictionaries,java.util.Properties,edu.stanford.nlp.dcoref.Semantics)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.MUCMentionExtractor:void <init>(edu.stanford.nlp.dcoref.Dictionaries,java.util.Properties,edu.stanford.nlp.dcoref.Semantics,edu.stanford.nlp.classify.LogisticClassifier)"
        ]
    },
    "edu.stanford.nlp.dcoref.CoNLLMentionExtractor:void <init>(edu.stanford.nlp.dcoref.Dictionaries,java.util.Properties,edu.stanford.nlp.dcoref.Semantics)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.CoNLLMentionExtractor:void <init>(edu.stanford.nlp.dcoref.Dictionaries,java.util.Properties,edu.stanford.nlp.dcoref.Semantics,edu.stanford.nlp.classify.LogisticClassifier)"
        ]
    },
    "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void <init>(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TreeGraphNode:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructureFactory:edu.stanford.nlp.trees.EnglishGrammaticalStructure newGrammaticalStructure(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.InputPanel:edu.stanford.nlp.trees.tregex.gui.InputPanel$TRegexGUITreeVisitor access$100(edu.stanford.nlp.trees.tregex.gui.InputPanel,java.lang.String,java.lang.Thread)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.InputPanel$3:void run()",
            "edu.stanford.nlp.trees.tregex.gui.InputPanel$2:void run()"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:java.util.List typedDependencies(edu.stanford.nlp.trees.GrammaticalStructure$Extras)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TreePrint:java.util.List getSortedDeps(edu.stanford.nlp.trees.Tree,java.util.function.Predicate)",
            "edu.stanford.nlp.trees.GrammaticalStructure:java.util.Collection typedDependenciesCollapsedTree()",
            "edu.stanford.nlp.trees.GrammaticalStructure:java.util.Collection allTypedDependencies()",
            "edu.stanford.nlp.trees.GrammaticalStructure:edu.stanford.nlp.trees.GrammaticalRelation getGrammaticalRelation(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.trees.GrammaticalStructure:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.GrammaticalStructure:java.util.List typedDependenciesCollapsed(edu.stanford.nlp.trees.GrammaticalStructure$Extras)",
            "edu.stanford.nlp.trees.GrammaticalStructure:java.util.List typedDependencies(boolean)",
            "edu.stanford.nlp.trees.GrammaticalStructure:java.util.List typedDependenciesCCprocessed(edu.stanford.nlp.trees.GrammaticalStructure$Extras)",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.GrammaticalStructure:java.util.Collection typedDependencies()",
            "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.GrammaticalStructure,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode,edu.stanford.nlp.trees.GrammaticalStructure$Extras,boolean,java.util.function.Predicate)"
        ]
    },
    "edu.stanford.nlp.pipeline.NERCombinerAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runNER(java.util.Properties)",
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runParse(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runOpenie(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runRegexner(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runPOS(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runDepparse(java.util.Properties)",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runNatlog(java.util.Properties)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runLemma(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.pipeline.SentenceAnnotator$AnnotatorProcessor:java.lang.Object process(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLPServer:edu.stanford.nlp.pipeline.StanfordCoreNLP mkStanfordCoreNLP(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLPServer:edu.stanford.nlp.pipeline.StanfordCoreNLP access$400(edu.stanford.nlp.pipeline.StanfordCoreNLPServer,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.pipeline.ColumnDataClassifierAnnotator:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.RelationExtractorAnnotator:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.graph.DirectedMultiGraph:java.util.List getConnectedComponents()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$SearchNodeIterator:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$ADJACENT_NODE$1:void <init>(edu.stanford.nlp.semgraph.semgrex.GraphRelation$ADJACENT_NODE,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$LIMITED_GRANDPARENT$1:void <init>(edu.stanford.nlp.semgraph.semgrex.GraphRelation$LIMITED_GRANDPARENT,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$DEPENDENT$1:void <init>(edu.stanford.nlp.semgraph.semgrex.GraphRelation$DEPENDENT,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$SIBLING_RELATION$1:void <init>(edu.stanford.nlp.semgraph.semgrex.GraphRelation$SIBLING_RELATION,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$1$1:void <init>(edu.stanford.nlp.semgraph.semgrex.GraphRelation$1,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$ALIGNMENT$1:void <init>(edu.stanford.nlp.semgraph.semgrex.GraphRelation$ALIGNMENT,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$GRANDSOMETHING$1:void <init>(edu.stanford.nlp.semgraph.semgrex.GraphRelation$GRANDSOMETHING,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$LIMITED_GRANDKID$1:void <init>(edu.stanford.nlp.semgraph.semgrex.GraphRelation$LIMITED_GRANDKID,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$3$1:void <init>(edu.stanford.nlp.semgraph.semgrex.GraphRelation$3,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$EQUALS$1:void <init>(edu.stanford.nlp.semgraph.semgrex.GraphRelation$EQUALS,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$GOVERNER$1:void <init>(edu.stanford.nlp.semgraph.semgrex.GraphRelation$GOVERNER,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.util.List getPathToRoot(edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Mention:int getReportEmbedding(edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.semgraph.SemanticGraph:edu.stanford.nlp.ling.IndexedWord getParent(edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.dcoref.Mention:int getModal(edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.hcoref.data.Mention:java.util.List getHeadPathToRoot()",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.util.Map mapTreeToSg(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.trees.Trees:edu.stanford.nlp.trees.Tree readTree(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.charniak.CharniakScoredParsesReaderWriter$ScoredParsesIterator:java.util.List getNext()"
        ]
    },
    "edu.stanford.nlp.util.PropertiesUtils:java.lang.Object get(java.util.Properties,java.lang.String,java.lang.Object,java.lang.reflect.Type)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.Evalb:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.util.PropertiesUtils:double[] getDoubleArray(java.util.Properties,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.Execution:void fillField(java.lang.Object,java.lang.reflect.Field,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Execution:java.util.Map fillOptionsImpl(java.lang.Object[],java.lang.Class[],java.util.Properties,boolean)"
        ]
    },
    "edu.stanford.nlp.util.MetaClass:java.lang.Object castWithoutKnowingType(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.MetaClass:java.lang.Object cast(java.lang.String,java.lang.reflect.Type)",
            "edu.stanford.nlp.util.MetaClass:java.lang.Object lambda$cast$37(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.pipeline.DependencyParseAnnotator:void <init>(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.DependencyParseAnnotator:void <init>()",
            "edu.stanford.nlp.pipeline.AnnotatorImplementations:edu.stanford.nlp.pipeline.Annotator dependencies(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.util.PropertiesUtils:java.lang.String[] getStringArray(java.util.Properties,java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Dictionaries:void <init>(java.util.Properties)",
            "edu.stanford.nlp.dcoref.Dictionaries:void <init>(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.util.PropertiesUtils:java.lang.String[] getStringArray(java.util.Properties,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.TokensRegexAnnotator:void <init>(java.lang.String,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.pipeline.ParserAnnotator:void <init>(java.lang.String,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorImplementations:edu.stanford.nlp.pipeline.Annotator parse(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.util.PropertiesUtils:int[] getIntArray(java.util.Properties,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.TreeTokenizerFactory$1:java.lang.Object getNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.AbstractTokenizer:java.lang.Object next()",
            "edu.stanford.nlp.process.AbstractTokenizer:boolean hasNext()"
        ]
    },
    "edu.stanford.nlp.trees.Tree:edu.stanford.nlp.trees.Tree valueOf(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Trees:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.TreeFromFile:edu.stanford.nlp.trees.Tree getTree()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.DisplayMatchesPanel:void addMatch(edu.stanford.nlp.trees.tregex.gui.TreeFromFile,java.util.List)"
        ]
    },
    "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$DocumentIterator:edu.stanford.nlp.trees.Tree wordsToParse(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$DocumentIterator:edu.stanford.nlp.util.CoreMap wordsToSentence(java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.dvparser.CacheParseHypotheses:java.util.List convertToTrees(byte[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.CacheParseHypotheses$DecompressionProcessor:java.util.List process(byte[])",
            "edu.stanford.nlp.parser.dvparser.DVModel:void filterRulesForBatch(java.util.Map)",
            "edu.stanford.nlp.parser.dvparser.DVModel:void setRulesForTrainingSet(java.util.List,java.util.Map)",
            "edu.stanford.nlp.parser.dvparser.CacheParseHypotheses$CacheProcessor:edu.stanford.nlp.util.Pair process(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$DocumentIterator:edu.stanford.nlp.trees.Tree wordsToParse(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$DocumentIterator:edu.stanford.nlp.util.CoreMap wordsToSentence(java.util.List)"
        ]
    },
    "edu.stanford.nlp.trees.TreePrint:edu.stanford.nlp.trees.Tree getCollocationProcessedTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.HeadFinder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TreePrint:void printTreeInternal(edu.stanford.nlp.trees.Tree,java.io.PrintWriter,boolean)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceSentenceSegmenter:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:boolean findMatchStartNoBacktracking(int,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:boolean findMatchStart(int,boolean)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:boolean findMatchStartBacktracking(int,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:boolean findMatchStart(int,boolean)"
        ]
    },
    "edu.stanford.nlp.international.arabic.process.ArabicTokenizer:java.lang.Object getNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.AbstractTokenizer:java.lang.Object next()",
            "edu.stanford.nlp.process.AbstractTokenizer:boolean hasNext()"
        ]
    },
    "edu.stanford.nlp.dcoref.Mention:void setSingleton(edu.stanford.nlp.classify.LogisticClassifier,edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Mention:void process(edu.stanford.nlp.dcoref.Dictionaries,edu.stanford.nlp.dcoref.Semantics,edu.stanford.nlp.dcoref.MentionExtractor,edu.stanford.nlp.classify.LogisticClassifier)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:void insertSpecificIntoList(java.lang.String,edu.stanford.nlp.ling.IndexedWord,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:java.lang.String toEnUncollapsedSentenceString()"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:edu.stanford.nlp.util.Pair leftRightMostChildVertices(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:edu.stanford.nlp.util.IntPair getNPSpanOld(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,java.util.List)",
            "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:edu.stanford.nlp.util.IntPair getNPSpan(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,java.util.List)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:edu.stanford.nlp.ling.IndexedWord leftMostChildVertice(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:edu.stanford.nlp.util.IntPair getNPSpanOld(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,java.util.List)",
            "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:void extractMentionForHeadword(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Mention:void setSingleton(edu.stanford.nlp.classify.LogisticClassifier,edu.stanford.nlp.hcoref.data.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Mention:void process(edu.stanford.nlp.hcoref.data.Dictionaries,edu.stanford.nlp.hcoref.data.Semantics,edu.stanford.nlp.classify.LogisticClassifier)"
        ]
    },
    "edu.stanford.nlp.patterns.dep.ExtractPhraseFromPattern:void processSentenceForType(edu.stanford.nlp.semgraph.SemanticGraph,java.util.List,java.util.List,java.util.Collection,java.util.Collection,java.util.Collection,boolean,java.util.Collection,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.dep.ApplyDepPatterns:java.util.Collection getMatchedTokensIndex(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.semgrex.SemgrexPattern,edu.stanford.nlp.patterns.DataInstance,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.dep.ApplyDepPatterns:edu.stanford.nlp.util.Pair call()"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Mention:java.lang.String getRelation()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Mention:java.util.ArrayList getSingletonFeatures(edu.stanford.nlp.hcoref.data.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequenceMatchResultExtractor:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$MultiSequencePatternExtractRule:java.lang.Object apply(java.util.List)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequencePatternExtractRule:java.lang.Object apply(java.util.List)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$MultiSequencePatternExtractRule:boolean extract(java.util.List,java.util.List)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequencePatternExtractRule:boolean extract(java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$MultiTokenPatternExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.types.Value lambda$updateExtractRule$41(edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequenceMatchResultExtractor,edu.stanford.nlp.ling.tokensregex.MatchedExpression)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression$SingleAnnotationExtractor:void annotate(edu.stanford.nlp.ling.tokensregex.MatchedExpression)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CompositeExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.types.Value lambda$updateExtractRule$39(edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequenceMatchResultExtractor,edu.stanford.nlp.ling.tokensregex.MatchedExpression)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression$SingleAnnotationExtractor:void annotate(edu.stanford.nlp.ling.tokensregex.MatchedExpression)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$TokenPatternExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.types.Value lambda$updateExtractRule$40(edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequenceMatchResultExtractor,edu.stanford.nlp.ling.tokensregex.MatchedExpression)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression$SingleAnnotationExtractor:void annotate(edu.stanford.nlp.ling.tokensregex.MatchedExpression)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AssignmentRule:void evaluate(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AssignmentRule createAssignmentRule(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.ling.tokensregex.types.AssignableExpression,edu.stanford.nlp.ling.tokensregex.types.Expression)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringMatchResultExtractor:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringPatternExtractRule:java.lang.Object apply(java.lang.String)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringPatternExtractRule:boolean extract(java.lang.String,java.util.List)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.TregexParser:edu.stanford.nlp.trees.tregex.TregexPattern ChildrenConj()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.TregexParser:edu.stanford.nlp.trees.tregex.TregexPattern ChildrenDisj()"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$RedwoodChannels:void logf(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Iterable)",
            "edu.stanford.nlp.util.ArrayCoreMap:void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String)",
            "edu.stanford.nlp.util.logging.RedwoodPrintStream:void logf(java.lang.String,java.lang.Object[])",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Object[])",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$RedwoodChannels:void logf(edu.stanford.nlp.util.logging.Redwood$Flag,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.Redwood$RedwoodChannels:void err(java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood$RedwoodChannels:void errf(java.lang.String,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$RedwoodChannels:void fatal(java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.TokensRegexNERAnnotator:java.util.List readEntries(java.lang.String,java.util.Set,boolean,boolean,java.lang.String[],java.lang.String[],java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.TokensRegexNERAnnotator:void <init>(java.lang.String,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$RedwoodChannels:void info(java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.Redwood$RedwoodChannels:void warn(java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.TokensRegexNERAnnotator:void <init>(java.lang.String,java.util.Properties)",
            "edu.stanford.nlp.util.logging.Redwood$RedwoodChannels:void warnf(java.lang.String,java.lang.Object[])",
            "edu.stanford.nlp.pipeline.TokensRegexNERAnnotator:java.util.List readEntries(java.lang.String,java.lang.String[],java.lang.String[],java.util.List,edu.stanford.nlp.ling.tokensregex.matcher.TrieMap,java.lang.String,java.io.BufferedReader,java.util.Set,boolean,boolean)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$RedwoodChannels:void debug(java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood$RedwoodChannels:void debugf(java.lang.String,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.pipeline.TokensRegexNERAnnotator:java.util.List readEntries(java.lang.String,java.lang.String[],java.lang.String[],java.util.List,edu.stanford.nlp.ling.tokensregex.matcher.TrieMap,java.lang.String,java.io.BufferedReader,java.util.Set,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.TokensRegexNERAnnotator:java.util.List readEntries(java.lang.String,java.util.Set,boolean,boolean,java.lang.String[],java.lang.String[],java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.util.logging.RedwoodPrintStream:void logf(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.RedwoodPrintStream:java.io.PrintStream format(java.lang.String,java.lang.Object[])",
            "edu.stanford.nlp.util.logging.RedwoodPrintStream:java.io.PrintStream printf(java.util.Locale,java.lang.String,java.lang.Object[])",
            "edu.stanford.nlp.util.logging.RedwoodPrintStream:java.io.PrintStream format(java.util.Locale,java.lang.String,java.lang.Object[])",
            "edu.stanford.nlp.util.logging.RedwoodPrintStream:java.io.PrintStream printf(java.lang.String,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$Util:void logf(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.Execution:java.lang.Class[] getVisibleClasses()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Execution:void fillOptions(java.util.Properties,java.lang.String[])",
            "edu.stanford.nlp.util.Execution:void exec(java.lang.Runnable,java.util.Properties,boolean)"
        ]
    },
    "edu.stanford.nlp.util.Execution:java.util.Map fillOptionsImpl(java.lang.Object[],java.lang.Class[],java.util.Properties,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Execution:void fillOptions(java.lang.Object[],java.lang.String[])",
            "edu.stanford.nlp.util.Execution:java.util.Map fillOptionsImpl(java.lang.Object[],java.lang.Class[],java.util.Properties)",
            "edu.stanford.nlp.util.Execution:void fillOptions(java.util.Properties,java.lang.String[])",
            "edu.stanford.nlp.util.Execution:void fillOptions(java.lang.Class[],java.lang.String[])",
            "edu.stanford.nlp.util.Execution:void exec(java.lang.Runnable,java.util.Properties,boolean)"
        ]
    },
    "edu.stanford.nlp.util.logging.RedwoodPrintStream:void println(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.RedwoodPrintStream:void println(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.RedwoodPrintStream:void println(char[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.RedwoodPrintStream:void println(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.RedwoodPrintStream:void println()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.RedwoodPrintStream:void println(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.RedwoodPrintStream:void println(double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.RedwoodPrintStream:void println(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.RedwoodPrintStream:void println(float)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.RedwoodPrintStream:void println(char)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.naturalli.ClauseSplitter:edu.stanford.nlp.naturalli.ClauseSplitter train(java.util.stream.Stream,java.util.Optional,java.util.Optional,edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$Featurizer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ClauseSplitter:edu.stanford.nlp.naturalli.ClauseSplitter train(java.util.stream.Stream,java.io.File,java.io.File)"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP:void processFiles(java.lang.String,java.util.Collection,int,java.util.Properties,java.util.function.BiConsumer,java.util.function.BiConsumer,edu.stanford.nlp.pipeline.StanfordCoreNLP$OutputFormat)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void processFiles(java.lang.String,java.util.Collection,int)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLPClient:void run()"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP:void lambda$processFiles$15(java.lang.String,java.util.function.BiConsumer,edu.stanford.nlp.util.MutableInteger,boolean,java.io.File,edu.stanford.nlp.util.MutableInteger,edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLP$2:void run()",
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void annotate(edu.stanford.nlp.pipeline.Annotation,java.util.function.Consumer)"
        ]
    },
    "edu.stanford.nlp.patterns.ConstantsAndVariables:void <init>(java.util.Properties,java.util.Set,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.surface.CreatePatterns:void <init>(java.util.Properties,edu.stanford.nlp.patterns.ConstantsAndVariables)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void setUpConstructor(java.util.Map,java.util.Map,boolean,java.util.Map,java.util.Map,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.patterns.ConstantsAndVariables:void <init>(java.util.Properties,java.util.Set,java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.ConstantsAndVariables:void <init>(java.util.Properties,java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.ConstantsAndVariables:void <init>(java.util.Properties,java.util.Set,java.util.Map,java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.ConstantsAndVariables:void <init>(java.util.Properties,java.util.Map,java.util.Map,java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void setUpConstructor(java.util.Map,java.util.Map,boolean,java.util.Map,java.util.Map,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$2$1:void <init>(edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$2,java.lang.String,edu.stanford.nlp.util.logging.RedwoodConfiguration)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$2:void apply(edu.stanford.nlp.util.logging.RedwoodConfiguration,edu.stanford.nlp.util.logging.Redwood$RecordHandlerTree)"
        ]
    },
    "edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$1$1:void <init>(edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$1,java.lang.String,edu.stanford.nlp.util.logging.RedwoodConfiguration)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$1:void apply(edu.stanford.nlp.util.logging.RedwoodConfiguration,edu.stanford.nlp.util.logging.Redwood$RecordHandlerTree)"
        ]
    },
    "edu.stanford.nlp.util.logging.RedwoodPrintStream:void print(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.RedwoodPrintStream:void print(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.RedwoodPrintStream:void print(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.RedwoodPrintStream:java.io.PrintStream append(char)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.RedwoodPrintStream:java.lang.Appendable append(char)"
        ]
    },
    "edu.stanford.nlp.util.logging.RedwoodPrintStream:void print(float)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.RedwoodPrintStream:void print(char[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.RedwoodPrintStream:void print(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.RedwoodPrintStream:void print(double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.RedwoodPrintStream:java.io.PrintStream append(java.lang.CharSequence,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.RedwoodPrintStream:java.lang.Appendable append(java.lang.CharSequence,int,int)"
        ]
    },
    "edu.stanford.nlp.util.logging.RedwoodPrintStream:void print(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.RedwoodPrintStream:void print(char)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.RedwoodPrintStream:java.io.PrintStream append(java.lang.CharSequence)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.RedwoodPrintStream:java.lang.Appendable append(java.lang.CharSequence)"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLPServer:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLPServer:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLPServer$CoreNLPHandler:void handle(com.sun.net.httpserver.HttpExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.Execution:void exec(java.lang.Runnable,java.util.Properties,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Execution:void exec(java.lang.Runnable,java.util.Properties)",
            "edu.stanford.nlp.util.Execution:void exec(java.lang.Runnable,java.lang.String[],java.lang.Class[],boolean)",
            "edu.stanford.nlp.util.Execution:void exec(java.lang.Runnable,java.lang.String[],boolean)"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLPClient:void lambda$shell$231(edu.stanford.nlp.pipeline.StanfordCoreNLPClient,edu.stanford.nlp.pipeline.StanfordCoreNLP$OutputFormat,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.io.IOUtils:void console(java.lang.String,java.util.function.Consumer)"
        ]
    },
    "edu.stanford.nlp.util.Execution:java.lang.Class filePathToClass(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Execution:java.lang.Class[] getVisibleClasses()"
        ]
    },
    "edu.stanford.nlp.scoref.Clusterer:void writeModel(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.Clusterer:void doTraining(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.scoref.SimpleLinearClassifier:void printWeightVector()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.scoref.PairwiseModel:void writeModel(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.PairwiseModel:void writeModel()"
        ]
    },
    "edu.stanford.nlp.patterns.surface.PatternToken:edu.stanford.nlp.patterns.surface.PatternToken copy()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.surface.SurfacePattern:edu.stanford.nlp.patterns.surface.SurfacePattern copyNewToken()"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$Util:void threadAndRun(java.lang.String,java.lang.Iterable,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotationPipeline:void annotate(java.lang.Iterable,int,java.util.function.Consumer)",
            "edu.stanford.nlp.util.logging.Redwood$Util:void threadAndRun(java.lang.String,java.lang.Iterable)",
            "edu.stanford.nlp.util.logging.Redwood$Util:void threadAndRun(java.lang.Iterable,int)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$Util:void startThreads(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood$Util$1$1:void run()"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$Util:void endTrack()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.Redwood$Util:void endTracksTo(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Execution:void exec(java.lang.Runnable,java.util.Properties,boolean)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void <init>(edu.stanford.nlp.parser.lexparser.TreebankLangParserParams,boolean,boolean,boolean,boolean,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseSimWordAvgDepGrammar:void <init>(edu.stanford.nlp.parser.lexparser.TreebankLangParserParams,boolean,boolean,boolean,boolean,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTextFile(java.lang.String,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammarExtractor:edu.stanford.nlp.parser.lexparser.DependencyGrammar formResult()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:void addAll(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.SUTime$Temporal:java.util.Map getTimexAttributes(edu.stanford.nlp.time.SUTime$TimeIndex)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Range:java.util.Map getTimexAttributes(edu.stanford.nlp.time.SUTime$TimeIndex)",
            "edu.stanford.nlp.time.SUTime$RelativeTime:java.util.Map getTimexAttributes(edu.stanford.nlp.time.SUTime$TimeIndex)",
            "edu.stanford.nlp.time.SUTime$PeriodicTemporalSet:java.util.Map getTimexAttributes(edu.stanford.nlp.time.SUTime$TimeIndex)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Range:java.util.Map getTimexAttributes(edu.stanford.nlp.time.SUTime$TimeIndex)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.SUTime$RelativeTime:java.util.Map getTimexAttributes(edu.stanford.nlp.time.SUTime$TimeIndex)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.Lazy:java.lang.Object get()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ForwardEntailerSearchProblem:java.util.List searchImplementation()"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule createMultiTokenPatternRule(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule createMergedRule(edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule,java.util.List)"
        ]
    },
    "edu.stanford.nlp.classify.Dataset:void add(edu.stanford.nlp.ling.Datum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.GeneralDataset:void addAll(java.lang.Iterable)",
            "edu.stanford.nlp.classify.GeneralDataset:edu.stanford.nlp.classify.GeneralDataset mapDataset(edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.classify.GeneralDataset:edu.stanford.nlp.classify.GeneralDataset sampleDataset(long,double,boolean)",
            "edu.stanford.nlp.classify.GeneralDataset:edu.stanford.nlp.classify.GeneralDataset mapDataset(edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.util.Index,java.util.Map,java.lang.Object)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.util.Pair readDataset(java.lang.String,boolean)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.classify.Dataset getDataset(java.util.Collection,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.classify.Dataset getBiasedDataset(edu.stanford.nlp.objectbank.ObjectBank,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.classify.Dataset:edu.stanford.nlp.classify.Dataset readSVMLightFormat(java.lang.String,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier:void adapt(edu.stanford.nlp.objectbank.ObjectBank,edu.stanford.nlp.classify.Dataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void adapt(java.lang.String,edu.stanford.nlp.classify.Dataset,edu.stanford.nlp.sequences.DocumentReaderAndWriter)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:void dumpFeatures(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswers(java.util.Collection,java.io.PrintWriter,edu.stanford.nlp.sequences.DocumentReaderAndWriter,boolean)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void train(java.util.Collection,edu.stanford.nlp.sequences.DocumentReaderAndWriter)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifierFloat:double[] trainWeights(int[][][][],int[][],edu.stanford.nlp.optimization.Evaluator[],int,double[][][][])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void train(java.util.Collection,edu.stanford.nlp.sequences.DocumentReaderAndWriter)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFloatFunction:void <init>(int[][][][],int[][],edu.stanford.nlp.util.Index,int,edu.stanford.nlp.util.Index,java.util.List,int[],java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:double score(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:edu.stanford.nlp.trees.Tree getBestParse()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ParseFiles:void processResults(edu.stanford.nlp.parser.common.ParserQuery,int,java.io.PrintWriter)",
            "edu.stanford.nlp.parser.lexparser.HTKLatticeReader:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void processResults(edu.stanford.nlp.parser.common.ParserQuery,edu.stanford.nlp.trees.Tree,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,edu.stanford.nlp.trees.TreePrint)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Tree parseTree(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Tree parse(java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classifyMaxEnt(java.util.List,edu.stanford.nlp.util.Triple)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classify(java.util.List,edu.stanford.nlp.util.Triple)"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats$MultiClassStringLabelStats:void <init>(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassChunkEvalStats:void <init>(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction:double valueAt(double[],double,int[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.MultiClassPrecisionRecallStats:java.lang.String getF1Description(int,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassPrecisionRecallStats:java.lang.String getDescription(int)"
        ]
    },
    "edu.stanford.nlp.classify.WeightedDataset:void add(edu.stanford.nlp.ling.Datum)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ClauseSplitter:boolean lambda$null$108(edu.stanford.nlp.naturalli.OpenIE,java.util.Collection,java.util.List,edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$Featurizer,java.util.Optional,edu.stanford.nlp.classify.WeightedDataset,edu.stanford.nlp.util.Triple)"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List segmentString(java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List segmentString(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFBiasedClassifier:java.util.List classify(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier$2:java.util.List process(java.util.List)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List classifySentence(java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classifyWithGlobalInformation(java.util.List,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.international.arabic.process.ArabicSegmenter:java.lang.String segmentString(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.arabic.process.ArabicSegmenter:long segment(java.io.BufferedReader,java.io.PrintWriter)",
            "edu.stanford.nlp.international.arabic.process.ArabicSegmenter:java.lang.String process(java.lang.String)",
            "edu.stanford.nlp.international.arabic.process.ArabicSegmenter:java.util.List segment(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:void printFactorTableDocuments(edu.stanford.nlp.objectbank.ObjectBank)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void printFactorTable(java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction:void <init>(int[][][][],int[][],int,edu.stanford.nlp.util.Index,java.util.List,int[],java.lang.String,java.lang.String,double,double[][][][],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction getObjectiveFunction(int[][][][],int[][])",
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunctionWithDropout:void <init>(int[][][][],int[][],int,edu.stanford.nlp.util.Index,java.util.List,int[],java.lang.String,java.lang.String,double,double[][][][],double,double,int,boolean,double,int[][][][])"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunctionNoisyLabel:void <init>(int[][][][],int[][],int,edu.stanford.nlp.util.Index,java.util.List,int[],java.lang.String,java.lang.String,double,double[][][][],int,double[][])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifierNoisyLabel:edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction getObjectiveFunction(int[][][][],int[][])"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction$ExpectationThreadsafeProcessor:java.lang.Object process(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler:double samplePosition(edu.stanford.nlp.sequences.SequenceModel,int[],int,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:double sampleSequenceBackward(edu.stanford.nlp.sequences.SequenceModel,int[],double)",
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:double sampleSequenceForward(edu.stanford.nlp.sequences.SequenceModel,int[],double,java.util.Set)",
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:double samplePosition(edu.stanford.nlp.sequences.SequenceModel,int[],int)"
        ]
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler:edu.stanford.nlp.util.Pair access$000(edu.stanford.nlp.sequences.SequenceGibbsSampler,edu.stanford.nlp.sequences.SequenceModel,int[],int,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.SequenceGibbsSampler$1:java.util.List process(java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.ie.crf.CRFCliqueTree getCliqueTree(edu.stanford.nlp.util.Triple)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.ie.crf.CRFCliqueTree getCliqueTree(java.util.List)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.sequences.SequenceModel getSequenceModel(edu.stanford.nlp.util.Triple,java.util.List)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classifyGibbs(java.util.List,edu.stanford.nlp.util.Triple)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.util.Triple printProbsDocument(java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunctionNoisyLabel:double expectedAndEmpiricalCountsAndValueForADoc(double[][],double[][],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction$ExpectationThreadsafeProcessor:edu.stanford.nlp.util.Pair process(edu.stanford.nlp.util.Pair)"
        ]
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler:double sampleSequenceForward(edu.stanford.nlp.sequences.SequenceModel,int[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:double sampleSequenceRepeatedly(edu.stanford.nlp.sequences.SequenceModel,int[],int)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:edu.stanford.nlp.trees.Tree getBestPCFGParse()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void processResults(edu.stanford.nlp.parser.common.ParserQuery,edu.stanford.nlp.trees.Tree,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,edu.stanford.nlp.trees.TreePrint)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:edu.stanford.nlp.trees.Tree getBestParse(boolean)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.NodePruner:edu.stanford.nlp.trees.Tree prune(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:edu.stanford.nlp.trees.Tree getBestParse(boolean)",
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.NodePruner:java.util.List helper(java.util.List,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.NodePruner:edu.stanford.nlp.trees.Tree prune(edu.stanford.nlp.trees.Tree,int)"
        ]
    },
    "edu.stanford.nlp.pipeline.ColumnDataClassifierAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunctionWithDropout$1:java.lang.Object process(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.POSTaggerAnnotator:void <init>(java.lang.String,boolean,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.POSTaggerAnnotator:void <init>(java.lang.String,boolean)"
        ]
    },
    "edu.stanford.nlp.pipeline.POSTaggerAnnotator:void <init>(java.lang.String,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorImplementations:edu.stanford.nlp.pipeline.Annotator posTagger(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.util.Execution:void exec(java.lang.Runnable,java.lang.Class[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.Execution:void exec(java.lang.Runnable)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.nndep.DependencyParser:void train(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.nndep.DependencyParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.nndep.DependencyParser:void train(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats:java.lang.String getConllEvalString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassChunkEvalStats:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassChunkEvalStats:java.lang.String getConllEvalString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.MultiClassChunkEvalStats:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.crf.CRFClassifierEvaluator:double evaluate(double[])"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.MachineReading:void assignSyntacticHeadToEntities(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.MachineReading:edu.stanford.nlp.pipeline.Annotation annotate(edu.stanford.nlp.pipeline.Annotation,int)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:void preProcessSentences(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.pipeline.Annotation parse(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.fsm.TransducerGraph:java.lang.Object clone()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sequences.ObjectBankWrapper$WrappedIterator:java.util.List next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.ObjectBankWrapper$WrappedIterator:java.lang.Object next()"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List classifySentence(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.TrueCaseAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.process.PTBTokenizer:java.lang.Object getNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.AbstractTokenizer:java.lang.Object next()",
            "edu.stanford.nlp.process.AbstractTokenizer:boolean hasNext()"
        ]
    },
    "edu.stanford.nlp.international.arabic.process.ArabicDocumentReaderAndWriter$1:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.objectbank.LineIterator:void setNext()"
        ]
    },
    "edu.stanford.nlp.international.arabic.process.IOBUtils:java.util.List StringToIOB(java.lang.String,java.lang.Character)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.arabic.process.IOBUtils:java.util.List StringToIOB(java.lang.String)",
            "edu.stanford.nlp.international.arabic.process.ArabicDocumentReaderAndWriter$1:java.util.List apply(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.ud.CoNLLUDocumentReader$SentenceProcessor:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.objectbank.DelimitRegExIterator:java.lang.Object parseString(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:edu.stanford.nlp.semgraph.SemanticGraph valueOf(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphFormatter:void test(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph$SemanticGraphParsingTask:java.lang.Object parse()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.lang.String semgrexFromGraph(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Collection,boolean,boolean,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.lang.String semgrexFromGraph(edu.stanford.nlp.semgraph.SemanticGraph,boolean,boolean,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.lang.String toCompactString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphFormatter:void test(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.time.TimeFormatter$CustomDateFormatExtractor:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeFormatter$TimePatternExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void train(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void train(java.util.Collection,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void train(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.time.TimeExpressionExtractorImpl:java.util.List extractTimeExpressions(edu.stanford.nlp.util.CoreMap,java.lang.String,edu.stanford.nlp.time.SUTime$TimeIndex)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractorImpl:java.util.List extractTimeExpressionCoreMaps(edu.stanford.nlp.util.CoreMap,java.lang.String,edu.stanford.nlp.time.SUTime$TimeIndex)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser loadModel(java.lang.String,edu.stanford.nlp.parser.lexparser.Options,java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.HTKLatticeReader:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser loadModel(edu.stanford.nlp.parser.lexparser.Options,java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser loadModel(java.lang.String,java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern$ValuePatternExpr:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr optimize()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$ValuePatternExpr:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr optimize()",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$RepeatPatternExpr:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr optimize()"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern$RepeatPatternExpr:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr optimize()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$ValuePatternExpr:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr optimize()",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$RepeatPatternExpr:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr optimize()"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern:void readObject(java.io.ObjectInputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern$GroupPatternExpr:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr optimize()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$ValuePatternExpr:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr optimize()",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$RepeatPatternExpr:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr optimize()",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern:void readObject(java.io.ObjectInputStream)",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$GroupPatternExpr:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr optimize()",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern:void <init>(java.lang.String,edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr,edu.stanford.nlp.ling.tokensregex.SequenceMatchAction)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$GRANDSOMETHING$1:void advance()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$ALIGNMENT:void setAlignment(edu.stanford.nlp.semgraph.semgrex.Alignment,boolean,edu.stanford.nlp.semgraph.semgrex.GraphRelation$SearchNodeIterator)",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$SearchNodeIterator:edu.stanford.nlp.ling.IndexedWord next()",
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$GRANDSOMETHING$1:void initialize()"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$LIMITED_GRANDKID:boolean satisfies(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.util.List incomingEdgeList(edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.OpenIE:edu.stanford.nlp.semgraph.SemanticGraph canonicalizeCoref(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Map)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void simpleClause(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraphEdge)",
            "edu.stanford.nlp.naturalli.Util:java.util.List cleanTree(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:void replaceNode(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.List getIncomingEdgesSorted(edu.stanford.nlp.ling.IndexedWord)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.util.List outgoingEdgeList(edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.List getOutEdgesSorted(edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.naturalli.OpenIE:edu.stanford.nlp.semgraph.SemanticGraph canonicalizeCoref(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Map)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.lang.String semgrexFromGraphHelper(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,java.util.Set,java.util.Set,boolean,boolean,java.util.Collection,java.util.Map,boolean,java.util.function.Function)",
            "edu.stanford.nlp.semgraph.SemanticGraph:void recToString(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.CoreLabel$OutputFormat,java.lang.StringBuilder,int,java.util.Set)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:void replaceNode(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.util.CollectionUtils:java.util.List sorted(java.lang.Iterable,java.util.Comparator)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.lang.String semgrexFromGraphHelper(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,java.util.Set,java.util.Set,boolean,boolean,java.util.Collection,java.util.Map,boolean,java.util.function.Function)",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$MultiNodePatternState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)"
        ]
    },
    "edu.stanford.nlp.util.CollectionUtils:java.util.List sorted(java.lang.Iterable)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:int hIndex(edu.stanford.nlp.stats.Counter)",
            "edu.stanford.nlp.stats.Counters:java.lang.String toSortedByKeysString(edu.stanford.nlp.stats.Counter,java.lang.String,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.util.CollectionUtils:java.util.Set modes(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:boolean isNegatedVerb(edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:boolean attachedNegatedVerb(edu.stanford.nlp.ling.IndexedWord)"
        ]
    },
    "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional getValidObjectChunk(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Optional)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional segmentACL(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Optional,boolean)",
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional segmentVerb(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Optional,boolean)"
        ]
    },
    "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional getValidSubjectChunk(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Optional)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional segmentACL(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Optional,boolean)",
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional segmentVerb(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Optional,boolean)"
        ]
    },
    "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional getValidAdverbChunk(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Optional)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional segmentACL(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Optional,boolean)",
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional segmentVerb(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Optional,boolean)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Mention:void setType(edu.stanford.nlp.hcoref.data.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Mention:void process(edu.stanford.nlp.hcoref.data.Dictionaries,edu.stanford.nlp.hcoref.data.Semantics)"
        ]
    },
    "edu.stanford.nlp.naturalli.NaturalLogicAnnotator:void annotateOperators(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.NaturalLogicAnnotator:void doOneSentence(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Mention:java.lang.String getPattern()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Mention:java.lang.String[] getSplitPattern()"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Mention:java.lang.String[] getSplitPattern()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.Rules:boolean entityCorefDictionary(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries,int,int)"
        ]
    },
    "edu.stanford.nlp.dcoref.Mention:java.lang.String getPattern()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Mention:java.lang.String[] getSplitPattern()"
        ]
    },
    "edu.stanford.nlp.dcoref.Mention:java.lang.String[] getSplitPattern()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Rules:boolean entityCorefDictionary(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries,int,int)"
        ]
    },
    "edu.stanford.nlp.dcoref.Mention:java.lang.String getRelation()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Mention:java.util.ArrayList getSingletonFeatures(edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.patterns.dep.DepPatternFactory:java.util.Set getContext(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,java.util.Set,edu.stanford.nlp.patterns.DataInstance)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.dep.DepPatternFactory:java.util.Set getContext(edu.stanford.nlp.patterns.DataInstance,int,java.util.Set)",
            "edu.stanford.nlp.patterns.dep.DepPatternFactory:java.util.Map getPatternsForAllPhrases(edu.stanford.nlp.patterns.DataInstance,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$LIMITED_GRANDPARENT:boolean satisfies(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.naturalli.OpenIE:java.util.Optional lambda$relationsInFragments$2(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.naturalli.SentenceFragment)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.semgraph.SemanticGraphEdge getDependencyParent(edu.stanford.nlp.hcoref.data.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,java.util.Map)",
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)"
        ]
    },
    "edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer:edu.stanford.nlp.trees.Tree normalizeWholeTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreeFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.PennTreeReader:edu.stanford.nlp.trees.Tree readTree()"
        ]
    },
    "edu.stanford.nlp.trees.international.hebrew.HebrewTreeNormalizer:edu.stanford.nlp.trees.Tree normalizeWholeTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreeFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.PennTreeReader:edu.stanford.nlp.trees.Tree readTree()"
        ]
    },
    "edu.stanford.nlp.trees.BobChrisTreeNormalizer:edu.stanford.nlp.trees.Tree normalizeWholeTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreeFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TreePrint:void printTreeInternal(edu.stanford.nlp.trees.Tree,java.io.PrintWriter,boolean)",
            "edu.stanford.nlp.trees.Treebanks:void lambda$main$256(edu.stanford.nlp.trees.TreeNormalizer,int,int,java.io.PrintWriter,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.PennTreeReader:edu.stanford.nlp.trees.Tree readTree()",
            "edu.stanford.nlp.trees.BobChrisTreeNormalizer:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.Treebanks:void lambda$main$257(edu.stanford.nlp.trees.TreeNormalizer,java.io.PrintWriter,edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.Tree:edu.stanford.nlp.trees.Tree spliceOut(java.util.function.Predicate)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.pennchinese.CTBErrorCorrectingTreeNormalizer:edu.stanford.nlp.trees.Tree normalizeWholeTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreeFactory)",
            "edu.stanford.nlp.trees.international.spanish.SpanishTreeNormalizer:edu.stanford.nlp.trees.Tree normalizeWholeTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreeFactory)"
        ]
    },
    "edu.stanford.nlp.trees.international.french.FrenchTreeNormalizer:edu.stanford.nlp.trees.Tree normalizeWholeTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreeFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.PennTreeReader:edu.stanford.nlp.trees.Tree readTree()",
            "edu.stanford.nlp.trees.international.french.FrenchXMLTreeReader:edu.stanford.nlp.trees.Tree readTree()"
        ]
    },
    "edu.stanford.nlp.trees.international.negra.NegraPennTreeNormalizer:edu.stanford.nlp.trees.Tree normalizeWholeTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreeFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.PennTreeReader:edu.stanford.nlp.trees.Tree readTree()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonParser:edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPatternRoot Root()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonParser:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern parseOperation(java.lang.String)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonParser:edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPatternRoot Root()"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.BasicEntityExtractor:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.MachineReading:edu.stanford.nlp.pipeline.Annotation annotate(edu.stanford.nlp.pipeline.Annotation,int)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory:java.lang.Double lambda$crossValidateSetSigma$7(edu.stanford.nlp.classify.CrossValidator,java.util.function.Function,java.lang.Double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.GoldenSectionLineSearch:double minimize(java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.classify.SVMLightClassifierFactory:java.lang.Double lambda$crossValidateSetC$11(edu.stanford.nlp.classify.CrossValidator,java.util.function.Function,java.lang.Double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.GoldenSectionLineSearch:double minimize(java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier:void train(edu.stanford.nlp.classify.Dataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void train(java.util.Collection,edu.stanford.nlp.sequences.DocumentReaderAndWriter)"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotatorFactories$17:edu.stanford.nlp.pipeline.Annotator create()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorFactories$17:java.lang.Object create()",
            "edu.stanford.nlp.pipeline.AnnotatorPool:edu.stanford.nlp.pipeline.Annotator get(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.pipeline.ColumnDataClassifierAnnotator:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.ColumnDataClassifierAnnotator:void <init>(java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.AnnotatorImplementations:edu.stanford.nlp.pipeline.Annotator mention(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorFactories$12:edu.stanford.nlp.pipeline.Annotator create()"
        ]
    },
    "edu.stanford.nlp.scoref.BestFirstCorefSystem:void <init>(java.util.Properties,java.lang.String,java.lang.String,int,int,double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.BestFirstCorefSystem:void <init>(java.util.Properties,java.lang.String,java.lang.String,int,int,double)",
            "edu.stanford.nlp.scoref.StatisticalCorefSystem:edu.stanford.nlp.scoref.StatisticalCorefSystem fromProps(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.scoref.ClusteringCorefSystem:void <init>(java.util.Properties,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.StatisticalCorefSystem:edu.stanford.nlp.scoref.StatisticalCorefSystem fromProps(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.pipeline.CorefAnnotator:void <init>(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorImplementations:edu.stanford.nlp.pipeline.Annotator coref(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void <init>(edu.stanford.nlp.trees.HeadFinder,edu.stanford.nlp.trees.HeadFinder,edu.stanford.nlp.parser.lexparser.TreebankLangParserParams,boolean,boolean,boolean,edu.stanford.nlp.parser.lexparser.Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void <init>(edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.parser.lexparser.Lexicon,edu.stanford.nlp.parser.common.ParserGrammar,java.util.function.Function)",
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer buildTrainBinarizer(edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void <init>(edu.stanford.nlp.parser.lexparser.TreebankLangParserParams,boolean,boolean,boolean,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter getSegmenterDataFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer buildTrainBinarizer(edu.stanford.nlp.parser.lexparser.Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.CompositeTreeTransformer buildTrainTransformer(edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void <init>(java.lang.String,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger(edu.stanford.nlp.tagger.maxent.TaggerConfig)",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void <init>(edu.stanford.nlp.tagger.maxent.TaggerConfig)",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTest(edu.stanford.nlp.tagger.maxent.TaggerConfig)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void dumpModel(edu.stanford.nlp.tagger.maxent.TaggerConfig)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.util.Pair SeqRegexWithAction(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.util.Pair parseSequenceWithAction(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.objectbank.XMLBeginEndIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.DocumentPreprocessor$XMLIterator:void primeNext()",
            "edu.stanford.nlp.objectbank.XMLBeginEndIterator:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.objectbank.XMLBeginEndIterator:void <init>(java.io.Reader,java.lang.String,java.util.function.Function,boolean,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.objectbank.XMLBeginEndIterator:void <init>(java.io.Reader,java.lang.String,java.util.function.Function,boolean,boolean)",
            "edu.stanford.nlp.objectbank.XMLBeginEndIterator:void <init>(java.io.Reader,java.lang.String,boolean,boolean,boolean)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.TregexGUI:void doPreferences()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.TregexGUI:void actionPerformed(java.awt.event.ActionEvent)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.PreferencesPanel:void syncFromPrefPanel(java.lang.String,java.lang.Integer,java.awt.Color,java.awt.Color,java.awt.Color,java.lang.Integer,java.lang.Integer,boolean,boolean,edu.stanford.nlp.trees.HeadFinder,edu.stanford.nlp.trees.TreeReaderFactory,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.PreferencesPanel:void access$200(edu.stanford.nlp.trees.tregex.gui.PreferencesPanel,java.lang.String,java.lang.Integer,java.awt.Color,java.awt.Color,java.awt.Color,java.lang.Integer,java.lang.Integer,boolean,boolean,edu.stanford.nlp.trees.HeadFinder,edu.stanford.nlp.trees.TreeReaderFactory,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.TregexGUI:javax.swing.JMenuBar getMenu()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.TregexGUI:void <init>(java.util.Properties,java.util.List)"
        ]
    },
    "edu.stanford.nlp.util.logging.StanfordRedwoodConfiguration:void minimalSetup()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLPClient:void run()",
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void run()"
        ]
    },
    "edu.stanford.nlp.util.logging.StanfordRedwoodConfiguration:void apply(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.StanfordRedwoodConfiguration:void setup()",
            "edu.stanford.nlp.util.Execution:void exec(java.lang.Runnable,java.util.Properties,boolean)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.SemgrexParser:edu.stanford.nlp.semgraph.semgrex.SemgrexPattern Root()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.SemgrexPattern:edu.stanford.nlp.semgraph.semgrex.SemgrexPattern compile(java.lang.String,edu.stanford.nlp.semgraph.semgrex.Env)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.SemgrexParser:edu.stanford.nlp.semgraph.semgrex.SemgrexPattern NodeDisj(edu.stanford.nlp.semgraph.semgrex.GraphRelation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.SemgrexParser:edu.stanford.nlp.semgraph.semgrex.SemgrexPattern Child(edu.stanford.nlp.semgraph.semgrex.GraphRelation)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.SemgrexParser:edu.stanford.nlp.semgraph.semgrex.SemgrexPattern RelChild()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.SemgrexParser:edu.stanford.nlp.semgraph.semgrex.SemgrexPattern ModRelation()"
        ]
    },
    "edu.stanford.nlp.dcoref.Mention:boolean includedIn(edu.stanford.nlp.dcoref.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Mention:boolean isListMemberOf(edu.stanford.nlp.dcoref.Mention)",
            "edu.stanford.nlp.dcoref.Rules:boolean entityIWithinI(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.parser.metrics.AbstractEval$CatErrorEval:java.util.List myMakeObjects(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.AbstractEval$CatErrorEval:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)"
        ]
    },
    "edu.stanford.nlp.process.WordShapeClassifier:java.lang.String wordShape(java.lang.String,int,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.ObjectBankWrapper:void doBasicStuff(java.util.List)",
            "edu.stanford.nlp.process.WordShapeClassifier:java.lang.String wordShape(java.lang.String,int)"
        ]
    },
    "edu.stanford.nlp.process.WordShapeClassifier:java.lang.String wordShapeChris4(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.wordseg.CorpusDictionary:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.wordseg.Gale2007ChineseSegmenterFeatureFactory:void createOutDict()",
            "edu.stanford.nlp.wordseg.NonDict2:void <init>(edu.stanford.nlp.sequences.SeqClassifierFlags)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.TregexParser:edu.stanford.nlp.trees.tregex.DescriptionPattern Node(edu.stanford.nlp.trees.tregex.Relation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.TregexParser:edu.stanford.nlp.trees.tregex.TregexPattern Relation()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.TregexParser:edu.stanford.nlp.trees.tregex.DescriptionPattern SubNode(edu.stanford.nlp.trees.tregex.Relation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.TregexParser:edu.stanford.nlp.trees.tregex.DescriptionPattern Node(edu.stanford.nlp.trees.tregex.Relation)",
            "edu.stanford.nlp.trees.tregex.TregexParser:edu.stanford.nlp.trees.tregex.TregexPattern Root()",
            "edu.stanford.nlp.trees.tregex.TregexParser:edu.stanford.nlp.trees.tregex.DescriptionPattern SubNode(edu.stanford.nlp.trees.tregex.Relation)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$PartialTime:edu.stanford.nlp.time.SUTime$Time add(edu.stanford.nlp.time.SUTime$Duration)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$PartialTime:edu.stanford.nlp.time.SUTime$Range getRange(int,edu.stanford.nlp.time.SUTime$Duration)",
            "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Time mid()",
            "edu.stanford.nlp.time.SUTime$CompositePartialTime:edu.stanford.nlp.time.SUTime$Range getIntersectedRange(edu.stanford.nlp.time.SUTime$CompositePartialTime,edu.stanford.nlp.time.SUTime$Range,edu.stanford.nlp.time.SUTime$Duration)",
            "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Time subtract(edu.stanford.nlp.time.SUTime$Duration)",
            "edu.stanford.nlp.time.SUTime$Duration:edu.stanford.nlp.time.SUTime$Time toTime(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Time offset(edu.stanford.nlp.time.SUTime$Duration,int)"
        ]
    },
    "edu.stanford.nlp.hcoref.Rules:boolean isContextOverlapping(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.Rules:boolean sentenceContextIncompatible(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.hcoref.Rules:boolean contextIncompatible(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.pipeline.RegexNERAnnotator:void <init>(java.lang.String,boolean,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.RegexNERAnnotator:void <init>(java.lang.String,boolean)"
        ]
    },
    "edu.stanford.nlp.pipeline.GenderAnnotator:void <init>(boolean,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorImplementations:edu.stanford.nlp.pipeline.Annotator gender(java.util.Properties,boolean)",
            "edu.stanford.nlp.pipeline.GenderAnnotator:void <init>()"
        ]
    },
    "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$DocumentIterator:edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$CoNLLDocument readNextDocument()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$DocumentIterator:void <init>(java.lang.String,edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$Options)",
            "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$DocumentIterator:edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$CoNLLDocument next()"
        ]
    },
    "edu.stanford.nlp.patterns.surface.LearnImportantFeatures:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.CleanXmlAnnotator:void setSectionAnnotationPatterns(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorFactories$2:edu.stanford.nlp.pipeline.Annotator create()"
        ]
    },
    "edu.stanford.nlp.pipeline.CleanXmlAnnotator:void setDocAnnotationPatterns(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorFactories$2:edu.stanford.nlp.pipeline.Annotator create()"
        ]
    },
    "edu.stanford.nlp.pipeline.CleanXmlAnnotator:void setTokenAnnotationPatterns(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorFactories$2:edu.stanford.nlp.pipeline.Annotator create()"
        ]
    },
    "edu.stanford.nlp.time.JollyDayHolidays:edu.stanford.nlp.util.CollectionValuedMap getAllHolidaysCVMap(de.jollyday.config.Configuration)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.CollectionValuedMap:edu.stanford.nlp.util.CollectionValuedMap clone()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.CollectionValuedMap:java.lang.Object clone()"
        ]
    },
    "edu.stanford.nlp.patterns.Pattern:void getRelevantWordsBase(edu.stanford.nlp.patterns.surface.Token,edu.stanford.nlp.util.CollectionValuedMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.dep.DepPattern:edu.stanford.nlp.util.CollectionValuedMap getRelevantWords()"
        ]
    },
    "edu.stanford.nlp.patterns.Pattern:void getRelevantWordsBase(edu.stanford.nlp.patterns.surface.Token[],edu.stanford.nlp.util.CollectionValuedMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.surface.SurfacePattern:edu.stanford.nlp.util.CollectionValuedMap getRelevantWords()"
        ]
    },
    "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$DocumentIterator:edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$Document readNextDocument()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$DocumentIterator:void <init>(java.lang.String,edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$Options)",
            "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$DocumentIterator:edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$Document next()"
        ]
    },
    "edu.stanford.nlp.pipeline.TokensRegexNERAnnotator:void <init>(java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.TokensRegexNERAnnotator:void <init>(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotatorFactories$7:edu.stanford.nlp.pipeline.Annotator create()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorPool:edu.stanford.nlp.pipeline.Annotator get(java.lang.String)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.pipeline.Annotator getOrCreate(edu.stanford.nlp.pipeline.AnnotatorFactory)",
            "edu.stanford.nlp.pipeline.AnnotatorFactories$7:java.lang.Object create()",
            "edu.stanford.nlp.simple.Document$4:edu.stanford.nlp.pipeline.Annotator get()"
        ]
    },
    "edu.stanford.nlp.process.DocumentPreprocessor$XMLIterator:java.util.List next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.DocumentPreprocessor$XMLIterator:java.lang.Object next()"
        ]
    },
    "edu.stanford.nlp.process.DocumentPreprocessor$XMLIterator:void <init>(edu.stanford.nlp.process.DocumentPreprocessor)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.DocumentPreprocessor:java.util.Iterator iterator()"
        ]
    },
    "edu.stanford.nlp.patterns.surface.AnnotatedTextReader:java.util.List parseFile(java.io.BufferedReader,java.util.Set,java.util.Map,boolean,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.util.Pair processSents(java.util.Properties,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:java.util.List tokenizeText(java.io.Reader,edu.stanford.nlp.process.TokenizerFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:java.util.List tokenizeText(java.io.Reader)",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger$TaggerWrapper:java.lang.String apply(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTaggerStdin(java.io.BufferedReader,java.io.BufferedWriter,edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger()"
        ]
    },
    "edu.stanford.nlp.optimization.QNMinimizer:void computeDir(double[],double[],double[],edu.stanford.nlp.optimization.QNMinimizer$QNInfo,edu.stanford.nlp.optimization.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.QNMinimizer:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[],int,edu.stanford.nlp.optimization.QNMinimizer$QNInfo)"
        ]
    },
    "edu.stanford.nlp.optimization.SGDWithAdaGradAndFOBOS:double[] minimize(edu.stanford.nlp.optimization.Function,double,double[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.optimization.SGDWithAdaGradAndFOBOS:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.SGDWithAdaGradAndFOBOS:double[] minimize(edu.stanford.nlp.optimization.Function,double,double[])"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.lang.String toFormattedString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:void prettyPrint(edu.stanford.nlp.semgraph.SemanticGraphFormatter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.lang.String toFormattedString(edu.stanford.nlp.semgraph.SemanticGraphFormatter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraphFormatter:void test(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphFormatter:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:void prettyPrint()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classify(java.util.List,edu.stanford.nlp.util.Triple)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void classifyAndWriteAnswers(java.util.Collection,java.util.List,java.io.PrintWriter,edu.stanford.nlp.sequences.DocumentReaderAndWriter)"
        ]
    },
    "edu.stanford.nlp.trees.Tree:java.util.Set dependencies()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.util.CoreMap fromProtoNoTokens(edu.stanford.nlp.pipeline.CoreNLPProtos$Sentence)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.pipeline.Annotation fromProto(edu.stanford.nlp.pipeline.CoreNLPProtos$Document)",
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.util.CoreMap fromProto(edu.stanford.nlp.pipeline.CoreNLPProtos$Sentence)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Pair:void save(java.io.DataOutputStream)",
            "edu.stanford.nlp.patterns.ConstantsAndVariables$ScorePhraseMeasures:int compareTo(java.lang.Object)",
            "edu.stanford.nlp.semgraph.semgrex.NodePattern:boolean nodeAttrMatch(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,boolean)",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.lang.String toString(edu.stanford.nlp.semgraph.SemanticGraph$OutputFormat)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass$1:java.util.Map apply(edu.stanford.nlp.ling.CoreLabel)",
            "edu.stanford.nlp.patterns.surface.Token:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.pipeline.JSONOutputter$JSONWriter:void routeObject(int,java.lang.Object)",
            "edu.stanford.nlp.semgraph.SemanticGraph:void topologicalSortHelper(edu.stanford.nlp.ling.IndexedWord,java.util.Set,java.util.Set,java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.metrics.FilteredEval:java.util.Set makeObjects(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.AbstractEval:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter,double)"
        ]
    },
    "edu.stanford.nlp.parser.metrics.TopMatchEval:java.util.Set makeObjects(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.Tree:java.util.Set constituents(edu.stanford.nlp.trees.ConstituentFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.NodePruner:java.util.List prune(java.util.List,edu.stanford.nlp.ling.Label,int,int)",
            "edu.stanford.nlp.parser.metrics.TreeSpanScoring:int countSpanErrors(edu.stanford.nlp.trees.TreebankLanguagePack,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.Tree:java.util.Set constituents()",
            "edu.stanford.nlp.parser.metrics.Evalb:java.util.Set makeObjects(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.tregex.gui.Tdiff:java.util.Set markDiff(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.dcoref.Rules:boolean isContextOverlapping(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Rules:boolean sentenceContextIncompatible(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.dcoref.Rules:boolean contextIncompatible(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void <init>(java.util.List,edu.stanford.nlp.trees.TreeGraphNode)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure$FromDependenciesFactory:edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure build(java.util.List,edu.stanford.nlp.trees.TreeGraphNode)",
            "edu.stanford.nlp.parser.nndep.DependencyParser:edu.stanford.nlp.trees.GrammaticalStructure makeGrammaticalStructure(java.util.List,edu.stanford.nlp.trees.TreeGraphNode)"
        ]
    },
    "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void <init>(java.util.List,edu.stanford.nlp.trees.TreeGraphNode)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure$FromDependenciesFactory:edu.stanford.nlp.trees.EnglishGrammaticalStructure build(java.util.List,edu.stanford.nlp.trees.TreeGraphNode)",
            "edu.stanford.nlp.parser.nndep.DependencyParser:edu.stanford.nlp.trees.GrammaticalStructure makeGrammaticalStructure(java.util.List,edu.stanford.nlp.trees.TreeGraphNode)"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:void <init>(java.util.List,edu.stanford.nlp.trees.TreeGraphNode)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure$FromDependenciesFactory:edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure build(java.util.List,edu.stanford.nlp.trees.TreeGraphNode)",
            "edu.stanford.nlp.parser.nndep.DependencyParser:edu.stanford.nlp.trees.GrammaticalStructure makeGrammaticalStructure(java.util.List,edu.stanford.nlp.trees.TreeGraphNode)"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure$1:void <init>(java.util.List,edu.stanford.nlp.trees.TreeGraphNode)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:edu.stanford.nlp.trees.GrammaticalStructure fromStringReps(java.util.List,java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier trainClassifierV(edu.stanford.nlp.classify.GeneralDataset,double,double,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory:double[][] trainWeights(edu.stanford.nlp.classify.GeneralDataset,double[],boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifierFactory:double[] heldOutSetSigma(edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.stats.Scorer,edu.stanford.nlp.optimization.LineSearcher)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset,double[])",
            "edu.stanford.nlp.classify.LinearClassifierFactory$NegativeScorer:java.lang.Double apply(java.lang.Double)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:double[][] trainWeights(edu.stanford.nlp.classify.GeneralDataset,double[])",
            "edu.stanford.nlp.classify.LinearClassifierFactory:java.lang.Double lambda$crossValidateSetSigma$6(edu.stanford.nlp.stats.Scorer,edu.stanford.nlp.util.Triple)"
        ]
    },
    "edu.stanford.nlp.classify.NBLinearClassifierFactory:double[][] trainWeights(edu.stanford.nlp.classify.GeneralDataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.AbstractLinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.TregexGUI:void <init>(java.util.Properties,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.TregexGUI:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.time.TimeExpressionExtractorImpl:void init(java.lang.String,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractorImpl:void <init>(java.lang.String,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expression FunctionCallExpression(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expression NestedFunctionCallExpression(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expression ListExpression(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expression Expression(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expression NestedVarExpression(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expression Expression(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expression BasicCondExpression(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expression BasicCondExpression(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expression CondGroup(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expression CaseExpression(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expression Expression(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.AssignableExpression AssignableNestedVarExpression(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.AssignableExpression AssignableExpression(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expression ListExpression2(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expression Expression(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$Rule AssignmentRule(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$Rule Rule(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$Rule ExpressionExtractorRule(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$Rule Rule(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expression NestedFunctionCallExpression(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expression Expression(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expression BasicCondExpression(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expression MethodCallExpression(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.ling.tokensregex.types.Expression)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expression NestedVarExpression(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expression NestedFunctionCallExpression(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotatorFactories$10:java.lang.Object create()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.UnknownGTTrainer:void train(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.ConstantsAndVariables:edu.stanford.nlp.stats.Counter getLearnedWords(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ConstantsAndVariables:edu.stanford.nlp.util.Pair getEditDistanceFromThisClass(java.lang.String,java.lang.String,int)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.util.Map loadFromSavedPatternsWordsDir(edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass,java.util.Properties)",
            "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter learnNewPhrases(java.lang.String,edu.stanford.nlp.patterns.surface.PatternsForEachToken,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.util.CollectionValuedMap,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,java.lang.String,java.util.Set)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass$CalculateSufficientStatsThreads:edu.stanford.nlp.util.Triple call()",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void iterateExtractApply(java.util.Map,java.util.Map,java.util.Map)",
            "edu.stanford.nlp.patterns.ConstantsAndVariables:java.lang.String getLearnedWordsAsJson()",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.util.Pair getPrecisionRecall(java.lang.String,java.util.Map)",
            "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter learnNewPhrasesPrivate(java.lang.String,edu.stanford.nlp.patterns.surface.PatternsForEachToken,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.util.Set,edu.stanford.nlp.util.CollectionValuedMap,edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,java.lang.String,java.util.Set,boolean)"
        ]
    },
    "edu.stanford.nlp.classify.GeneralDataset$1:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.classify.SVMLightClassifier trainClassifierBasic(edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Iterable)",
            "edu.stanford.nlp.classify.Classifier:double evaluateAccuracy(edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.classify.Classifier:edu.stanford.nlp.util.Pair evaluatePrecisionAndRecall(edu.stanford.nlp.classify.GeneralDataset,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.classify.Dataset:void summaryStatistics()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.util.Pair readAndReturnTrainingExamples(java.lang.String)",
            "edu.stanford.nlp.classify.LogisticClassifier:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.classify.Dataset getDataset(java.util.Collection,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.classify.Dataset getBiasedDataset(edu.stanford.nlp.objectbank.ObjectBank,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.classify.Dataset getDataset(edu.stanford.nlp.classify.Dataset,edu.stanford.nlp.util.Index)"
        ]
    },
    "edu.stanford.nlp.scoref.EvalUtils$CombinedEvaluator:void update(java.util.List,java.util.List,java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.EvalUtils:double getCombinedF1(double,java.util.List,java.util.List,java.util.Map,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.scoref.Clusterer$State:void updateEvaluator(edu.stanford.nlp.scoref.EvalUtils$Evaluator)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.Clusterer:double evaluatePolicy(java.util.List,boolean)"
        ]
    },
    "edu.stanford.nlp.naturalli.Util:boolean nerOverlap(java.util.List,edu.stanford.nlp.ie.machinereading.structure.Span,edu.stanford.nlp.ie.machinereading.structure.Span,java.util.Optional)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.Util:boolean nerOverlap(java.util.List,edu.stanford.nlp.ie.machinereading.structure.Span,edu.stanford.nlp.ie.machinereading.structure.Span)"
        ]
    },
    "edu.stanford.nlp.classify.RVFDataset:edu.stanford.nlp.classify.RVFDataset readSVMLightFormat(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:java.lang.Object extract(java.util.Iterator,java.util.function.Function,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:java.lang.Object extract(java.util.Iterator,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr parseSequence(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.Env:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr getSequencePatternExpr(java.lang.String,boolean)",
            "edu.stanford.nlp.ling.tokensregex.TokenSequencePattern:edu.stanford.nlp.ling.tokensregex.TokenSequencePattern compile(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Value BasicValue(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Value ValueExpression(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr SeqRegexGroup(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr SeqRegexBasic(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.parser.nndep.DependencyParser:edu.stanford.nlp.trees.GrammaticalStructure predict(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.nndep.DependencyParser:void parseTextFile(java.io.BufferedReader,java.io.PrintWriter)",
            "edu.stanford.nlp.parser.nndep.demo.DependencyParserDemo:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void collapseConj(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void collapseDependencies(java.util.List,boolean,edu.stanford.nlp.trees.GrammaticalStructure$Extras)"
        ]
    },
    "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void collapse2WP(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void collapseDependencies(java.util.List,boolean,edu.stanford.nlp.trees.GrammaticalStructure$Extras)"
        ]
    },
    "edu.stanford.nlp.patterns.dep.DepPatternFactory:void setUp(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.PatternFactory:void setUp(java.util.Properties,edu.stanford.nlp.patterns.PatternFactory$PatternType,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.NodePattern BracketedNode(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr SeqRegexBasic(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.NodePattern Node(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr parseNode(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.Env:edu.stanford.nlp.ling.tokensregex.NodePattern getNodePattern(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.international.arabic.process.ArabicDocumentReaderAndWriter:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.common.ParserGrammar:java.util.List tokenize(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.server.LexicalizedParserServer:void handleTokenize(java.lang.String,java.io.OutputStream)",
            "edu.stanford.nlp.parser.common.ParserGrammar:edu.stanford.nlp.trees.Tree parse(java.lang.String)",
            "edu.stanford.nlp.parser.common.ParserGrammar:java.util.List lemmatize(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.international.arabic.process.ArabicTokenizer$ArabicTokenizerFactory:java.util.Iterator getIterator(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.international.arabic.process.ArabicTokenizer$ArabicTokenizerFactory:edu.stanford.nlp.process.Tokenizer getTokenizer(java.io.Reader,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.DocumentPreprocessor$PlainTextIterator:void <init>(edu.stanford.nlp.process.DocumentPreprocessor)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.SemgrexPattern:edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher matcher(edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void correctSubjPass(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void process3WP(edu.stanford.nlp.semgraph.SemanticGraph,java.util.HashMap)",
            "edu.stanford.nlp.semgraph.semgrex.SemgrexPattern:void main(java.lang.String[])",
            "edu.stanford.nlp.naturalli.OpenIE:java.util.List entailmentsFromClause(edu.stanford.nlp.naturalli.SentenceFragment)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void processComplex2WP(edu.stanford.nlp.semgraph.SemanticGraph,java.util.HashMap)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void expandPrepConjunctions(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void addConjInformation(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.NaturalLogicAnnotator:void annotateUnaries(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLPServer$SemgrexHandler:void lambda$null$31(edu.stanford.nlp.semgraph.semgrex.SemgrexPattern,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.pipeline.JSONOutputter$Writer)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void expandPPConjunctions(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void processSimple2WP(edu.stanford.nlp.semgraph.SemanticGraph,java.util.HashMap)",
            "edu.stanford.nlp.hcoref.data.Mention:edu.stanford.nlp.util.Pair findDependentVerb(edu.stanford.nlp.hcoref.data.Mention)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void addCaseMarkerInformation(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.dcoref.Mention:edu.stanford.nlp.util.Pair findDependentVerb(edu.stanford.nlp.dcoref.Mention)",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void correctWHAttachment(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLPServer$SemgrexHandler:java.lang.Boolean lambda$null$28(edu.stanford.nlp.semgraph.semgrex.SemgrexPattern,edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void correctWHAttachment(edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:java.util.Set getImperatives(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:void addFeatures(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.trees.Tree,boolean,boolean)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.TregexMatcher:boolean findNextMatchingNode()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.GrammaticalStructure$LazyLoadTreesByParsing$1:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper$GsIterator:void primeGs()"
        ]
    },
    "edu.stanford.nlp.stats.AccuracyStats:double score(edu.stanford.nlp.classify.ProbabilisticClassifier,edu.stanford.nlp.classify.GeneralDataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.AccuracyStats:void <init>(edu.stanford.nlp.classify.ProbabilisticClassifier,edu.stanford.nlp.classify.GeneralDataset,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.util.IntervalTree:void balance()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:edu.stanford.nlp.util.Pair applyCompositeRule(edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$ExtractRule,java.util.List,java.util.List,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:java.util.List extractExpressions(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:java.util.List extractExpressions(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:java.util.List extractCoreMapsToList(java.util.List,edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.time.TimeExpressionExtractorImpl:java.util.List extractTimeExpressions(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.time.SUTime$Time,edu.stanford.nlp.time.SUTime$TimeIndex)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapFunctionApplier:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression$SingleAnnotationExtractor:void annotate(edu.stanford.nlp.ling.tokensregex.MatchedExpression)",
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression$SingleAnnotationExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List findClosestMatches(java.lang.Object[],int,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List findClosestMatches(java.lang.Object[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher:java.util.List findNonOverlapping(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.TokensRegexNERAnnotator:void annotateMatched(java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.PhraseTable:java.util.List findNonOverlappingPhrases(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List getNonOverlapping(java.util.List,java.util.Comparator)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List getNonOverlapping(java.util.List)",
            "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List findNonOverlapping(java.util.List,int,int,java.util.Comparator)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List findNonOverlapping(java.util.List,int,int,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List segment(java.util.List,int,int,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapToListFunctionApplier:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression$SingleAnnotationExtractor:void annotate(edu.stanford.nlp.ling.tokensregex.MatchedExpression)",
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression$SingleAnnotationExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapToListExtractRule:boolean extract(java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule:boolean extract(java.lang.Object,java.util.List)"
        ]
    },
    "edu.stanford.nlp.pipeline.NERCombinerAnnotator:void doOneSentence(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.SentenceAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.pipeline.SentenceAnnotator$AnnotatorProcessor:edu.stanford.nlp.util.CoreMap process(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.trees.Tree:edu.stanford.nlp.trees.Tree transform(edu.stanford.nlp.trees.TreeTransformer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer:edu.stanford.nlp.trees.Tree normalizeWholeTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreeFactory)",
            "edu.stanford.nlp.tagger.io.TreeTaggedFileReader:java.util.List next()",
            "edu.stanford.nlp.trees.international.spanish.SpanishTreeNormalizer:edu.stanford.nlp.trees.Tree normalizeWholeTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.TreeFactory)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$13$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$13,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$13:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryPrecedes$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryPrecedes,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryPrecedes:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryDominates$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryDominates,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryDominates:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryFollows$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryFollows,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryFollows:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$4$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$4,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$4:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$18$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$18,edu.stanford.nlp.trees.tregex.TregexMatcher,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$18:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$20$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$20,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$20:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$Heads$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$Heads,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$Heads:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$5$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$5,edu.stanford.nlp.trees.tregex.TregexMatcher,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$5:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$8$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$8,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$8:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$6$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$6,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$6:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$25$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$25,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$25:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$IthChildOf$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$IthChildOf,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$IthChildOf:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$16$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$16,edu.stanford.nlp.trees.tregex.TregexMatcher,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$16:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$22$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$22,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$22:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$HeadedBy$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$HeadedBy,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$HeadedBy:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$11$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$11,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$11:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$9$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$9,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$9:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$HasIthChild$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$HasIthChild,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$HasIthChild:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$24$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$24,edu.stanford.nlp.trees.tregex.TregexMatcher,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$24:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$14$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$14,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$14:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$12$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$12,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$12:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$21$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$21,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$21:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$17$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$17,edu.stanford.nlp.trees.tregex.TregexMatcher,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$17:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$ImmediatelyHeadedBy$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$ImmediatelyHeadedBy,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$ImmediatelyHeadedBy:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$10$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$10,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$10:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$23$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$23,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$23:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryIsDominatedBy$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryIsDominatedBy,edu.stanford.nlp.trees.tregex.TregexMatcher,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryIsDominatedBy:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$1$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$1,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$1:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$7$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$7,edu.stanford.nlp.trees.tregex.TregexMatcher,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$7:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$19$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$19,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$19:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$ImmediatelyHeads$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$ImmediatelyHeads,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$ImmediatelyHeads:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$15$1:void <init>(edu.stanford.nlp.trees.tregex.Relation$15,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.Relation$15:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)"
        ]
    },
    "edu.stanford.nlp.trees.MemoryTreebank:edu.stanford.nlp.trees.Treebank transform(edu.stanford.nlp.trees.TreeTransformer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.CacheParseHypotheses:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:java.util.List binarizeTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.parser.dvparser.DVParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter getSegmenterDataFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)"
        ]
    },
    "edu.stanford.nlp.parser.server.LexicalizedParserServer:void handleTree(java.lang.String,java.io.OutputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.server.LexicalizedParserServer:void processRequest(java.net.Socket)"
        ]
    },
    "edu.stanford.nlp.parser.server.LexicalizedParserServer:void handleDependencies(java.lang.String,java.io.OutputStream,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.server.LexicalizedParserServer:void processRequest(java.net.Socket)"
        ]
    },
    "edu.stanford.nlp.parser.server.LexicalizedParserServer:void handleParse(java.lang.String,java.io.OutputStream,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.server.LexicalizedParserServer:void processRequest(java.net.Socket)"
        ]
    },
    "edu.stanford.nlp.pipeline.ParserAnnotator:void doOneSentence(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.SentenceAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.pipeline.SentenceAnnotator$AnnotatorProcessor:edu.stanford.nlp.util.CoreMap process(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.pipeline.ParserAnnotator:void doOneFailedSentence(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ParserAnnotator:void doOneSentence(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.pipeline.SentenceAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.pipeline.BinarizerAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.EnglishGrammaticalStructure:java.util.List readCoNLLXGrammaticalStructureCollection(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams:java.util.List readGrammaticalStructureFromFile(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:java.util.List readCoNLLXGrammaticalStructureCollection(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams:java.util.List readGrammaticalStructureFromFile(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:java.util.List readCoNLLXGrammaticalStructureCollection(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams:java.util.List readGrammaticalStructureFromFile(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.metrics.AbstractEval:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void processResults(edu.stanford.nlp.parser.common.ParserQuery,edu.stanford.nlp.trees.Tree,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,edu.stanford.nlp.trees.TreePrint)",
            "edu.stanford.nlp.parser.metrics.BestOfTopKEval:void evaluate(java.util.List,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)",
            "edu.stanford.nlp.parser.metrics.UnlabeledAttachmentEval:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)",
            "edu.stanford.nlp.parser.metrics.Evalb:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)",
            "edu.stanford.nlp.parser.metrics.AbstractEval:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.parser.metrics.TaggingEval:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams$UnorderedTypedDependencyTyper:java.lang.Object makeDependency(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams:void dependencyObjectifyHelper(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.HeadFinder,java.util.Collection,edu.stanford.nlp.trees.DependencyTyper)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams$UntypedDependencyTyper:java.lang.Object makeDependency(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams:void dependencyObjectifyHelper(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.HeadFinder,java.util.Collection,edu.stanford.nlp.trees.DependencyTyper)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams$TypedDependencyTyper:java.lang.Object makeDependency(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams:void dependencyObjectifyHelper(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.HeadFinder,java.util.Collection,edu.stanford.nlp.trees.DependencyTyper)"
        ]
    },
    "edu.stanford.nlp.dcoref.MentionExtractor:java.lang.String treeToKey(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.MentionExtractor:java.util.List arrange(edu.stanford.nlp.pipeline.Annotation,java.util.List,java.util.List,java.util.List,boolean)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams$UnorderedUntypedDependencyTyper:java.lang.Object makeDependency(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams:void dependencyObjectifyHelper(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.HeadFinder,java.util.Collection,edu.stanford.nlp.trees.DependencyTyper)"
        ]
    },
    "edu.stanford.nlp.pipeline.ParserAnnotatorUtils:void fillInParseAnnotations(boolean,boolean,edu.stanford.nlp.trees.GrammaticalStructureFactory,edu.stanford.nlp.util.CoreMap,java.util.List,edu.stanford.nlp.trees.GrammaticalStructure$Extras)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ParserAnnotator:void finishSentence(edu.stanford.nlp.util.CoreMap,java.util.List)",
            "edu.stanford.nlp.pipeline.CharniakParserAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.trees.international.arabic.ArabicTreeNormalizer:void <init>(boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.arabic.ArabicTreeNormalizer:void <init>(boolean)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$Util:void exit(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood:void main(java.lang.String[])",
            "edu.stanford.nlp.util.logging.Redwood$Util:void exit()"
        ]
    },
    "edu.stanford.nlp.util.logging.RedwoodConfiguration$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.objectbank.DelimitRegExIterator:java.lang.Object parseString(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.objectbank.DelimitRegExIterator:void setNext()"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher$BasicSequencePatternTrigger:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher:java.util.Collection getTriggeredPatterns(java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyFilesAndWriteAnswers(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.NERClassifierCombiner:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswers(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.NERClassifierCombiner:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyStdin()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.NERClassifierCombiner:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.optimization.CmdEvaluator:double evaluate(double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.optimization.CGMinimizer:double dbrent(edu.stanford.nlp.optimization.CGMinimizer$OneDimDiffFunction,double,double,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.CGMinimizer:double[] lineMinimize(edu.stanford.nlp.optimization.DiffFunction,double[],double[])"
        ]
    },
    "edu.stanford.nlp.optimization.SGDToQNMinimizer:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.SGDToQNMinimizer:double[] minimize(edu.stanford.nlp.optimization.Function,double,double[],int)",
            "edu.stanford.nlp.optimization.SGDToQNMinimizer:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[])"
        ]
    },
    "edu.stanford.nlp.optimization.QNMinimizer:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.DVParser:void executeOneTrainingBatch(java.util.List,java.util.IdentityHashMap,double[])",
            "edu.stanford.nlp.optimization.QNMinimizer:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[])",
            "edu.stanford.nlp.optimization.QNMinimizer:double[] minimize(edu.stanford.nlp.optimization.Function,double,double[],int)"
        ]
    },
    "edu.stanford.nlp.optimization.CGMinimizer:double[] minimize(edu.stanford.nlp.optimization.Function,double,double[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.optimization.CGMinimizer:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.CGMinimizer:double[] minimize(edu.stanford.nlp.optimization.Function,double,double[])"
        ]
    },
    "edu.stanford.nlp.optimization.AbstractCachingDiffFunction:boolean gradientCheck()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:double[] trainWeights(int[][][][],int[][],edu.stanford.nlp.optimization.Evaluator[],int,double[][][][])",
            "edu.stanford.nlp.ie.crf.CRFClassifierNonlinear:double[] trainWeightsUsingNonLinearCRF(edu.stanford.nlp.optimization.AbstractCachingDiffFunction,edu.stanford.nlp.optimization.Evaluator[])"
        ]
    },
    "edu.stanford.nlp.sentiment.SentimentTraining:boolean runGradientCheck(edu.stanford.nlp.sentiment.SentimentModel,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.SentimentTraining:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.dvparser.DVParser:boolean runGradientCheck(java.util.List,java.util.IdentityHashMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.DVParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifierNonlinear:double[] trainWeightsUsingNonLinearCRF(edu.stanford.nlp.optimization.AbstractCachingDiffFunction,edu.stanford.nlp.optimization.Evaluator[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifierNonlinear:double[] trainWeights(int[][][][],int[][],edu.stanford.nlp.optimization.Evaluator[],int,double[][][][])"
        ]
    },
    "edu.stanford.nlp.optimization.CGMinimizer:edu.stanford.nlp.optimization.CGMinimizer$Triple mnbrak(edu.stanford.nlp.optimization.CGMinimizer$Triple,edu.stanford.nlp.optimization.CGMinimizer$OneDimDiffFunction)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.CGMinimizer:double[] lineMinimize(edu.stanford.nlp.optimization.DiffFunction,double[],double[])"
        ]
    },
    "edu.stanford.nlp.optimization.QNMinimizer$Record:void add(double,double[],double[],int,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.QNMinimizer:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[],int,edu.stanford.nlp.optimization.QNMinimizer$QNInfo)"
        ]
    },
    "edu.stanford.nlp.optimization.QNMinimizer$Record:void start(double,double[],double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.QNMinimizer:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[],int,edu.stanford.nlp.optimization.QNMinimizer$QNInfo)",
            "edu.stanford.nlp.optimization.QNMinimizer$Record:void start(double,double[])"
        ]
    },
    "edu.stanford.nlp.optimization.SMDMinimizer:double[] minimize(edu.stanford.nlp.optimization.Function,double,double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:double[] trainWeights(int[][][][],int[][],edu.stanford.nlp.optimization.Evaluator[],int,double[][][][])",
            "edu.stanford.nlp.optimization.SMDMinimizer:void main(java.lang.String[])",
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.Classifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset,float[],edu.stanford.nlp.classify.LogPrior)",
            "edu.stanford.nlp.optimization.StochasticMinimizer:double tuneDouble(edu.stanford.nlp.optimization.Function,double[],long,edu.stanford.nlp.optimization.StochasticMinimizer$PropertySetter,double,double,double)",
            "edu.stanford.nlp.optimization.StochasticMinimizer:int tuneBatch(edu.stanford.nlp.optimization.Function,double[],long,int)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:double[][] trainWeights(edu.stanford.nlp.classify.GeneralDataset,double[],boolean,edu.stanford.nlp.optimization.Minimizer)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:double[][] adaptWeights(double[][],edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.ie.crf.CRFClassifierNonlinear:double[] trainWeightsUsingNonLinearCRF(edu.stanford.nlp.optimization.AbstractCachingDiffFunction,edu.stanford.nlp.optimization.Evaluator[])",
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.Classifier trainClassifier(java.lang.Iterable)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:double[][] trainWeightsSemiSup(edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.classify.GeneralDataset,double[][],double[])",
            "edu.stanford.nlp.ie.crf.CRFClassifierWithLOP:double[] trainWeights(int[][][][],int[][],edu.stanford.nlp.optimization.Evaluator[],int,double[][][][])",
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier trainSemiSupGE(edu.stanford.nlp.classify.GeneralDataset,java.util.List,java.util.List,double)"
        ]
    },
    "edu.stanford.nlp.optimization.HybridMinimizer:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.HybridMinimizer:double[] minimize(edu.stanford.nlp.optimization.Function,double,double[],int)",
            "edu.stanford.nlp.optimization.HybridMinimizer:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[])"
        ]
    },
    "edu.stanford.nlp.optimization.StochasticMinimizer:double[] minimize(edu.stanford.nlp.optimization.Function,double,double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.StochasticMinimizer:double tuneDouble(edu.stanford.nlp.optimization.Function,double[],long,edu.stanford.nlp.optimization.StochasticMinimizer$PropertySetter,double,double,double)",
            "edu.stanford.nlp.optimization.StochasticMinimizer:int tuneBatch(edu.stanford.nlp.optimization.Function,double[],long,int)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:double[][] adaptWeights(double[][],edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.Classifier trainClassifier(java.lang.Iterable)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier trainSemiSupGE(edu.stanford.nlp.classify.GeneralDataset,java.util.List,java.util.List,double)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:double[] trainWeights(int[][][][],int[][],edu.stanford.nlp.optimization.Evaluator[],int,double[][][][])",
            "edu.stanford.nlp.optimization.InefficientSGDMinimizer:void main(java.lang.String[])",
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.Classifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset,float[],edu.stanford.nlp.classify.LogPrior)",
            "edu.stanford.nlp.optimization.StochasticMinimizer:edu.stanford.nlp.util.Pair tune(edu.stanford.nlp.optimization.Function,double[],long,java.util.List,java.util.List)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:double[][] trainWeights(edu.stanford.nlp.classify.GeneralDataset,double[],boolean,edu.stanford.nlp.optimization.Minimizer)",
            "edu.stanford.nlp.ie.crf.CRFClassifierNonlinear:double[] trainWeightsUsingNonLinearCRF(edu.stanford.nlp.optimization.AbstractCachingDiffFunction,edu.stanford.nlp.optimization.Evaluator[])",
            "edu.stanford.nlp.classify.LinearClassifierFactory:double[][] trainWeightsSemiSup(edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.classify.GeneralDataset,double[][],double[])",
            "edu.stanford.nlp.ie.crf.CRFClassifierWithLOP:double[] trainWeights(int[][][][],int[][],edu.stanford.nlp.optimization.Evaluator[],int,double[][][][])",
            "edu.stanford.nlp.optimization.ScaledSGDMinimizer:double tuneFixedGain(edu.stanford.nlp.optimization.Function,double[],long,double)"
        ]
    },
    "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:java.lang.String normalizedDateString(java.lang.String,edu.stanford.nlp.time.Timex)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:java.util.List processEntity(java.util.List,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:void dump()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void classifySeq(java.util.List)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TestSentence:java.util.ArrayList testTagInference()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TestSentence:java.util.ArrayList tagSentence(java.util.List,boolean)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:double scoreAll(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FastFactoredParser:double depScoreTree(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.AbstractDependencyGrammar:double score(int,int,int,int,boolean,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Sentence:java.util.List nerTags()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:java.lang.String nerTag(int)"
        ]
    },
    "edu.stanford.nlp.simple.Sentence:edu.stanford.nlp.trees.Tree parse()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Sentence:java.util.Collection openieTriples()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Sentence:java.util.List posTags()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:java.lang.String posTag(int)"
        ]
    },
    "edu.stanford.nlp.simple.Sentence:java.util.List incomingDependencyLabels(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Sentence:java.util.List incomingDependencyLabels(edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Sentence:java.util.List incomingDependencyLabels()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Sentence:java.util.Optional incomingDependencyLabel(java.util.Properties,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:java.util.Optional incomingDependencyLabel(int)"
        ]
    },
    "edu.stanford.nlp.simple.Sentence:java.util.Optional incomingDependencyLabel(int,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Sentence:java.util.Optional governor(int,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Sentence:java.util.Optional governor(java.util.Properties,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:java.util.Optional governor(int)"
        ]
    },
    "edu.stanford.nlp.simple.Sentence:java.util.List governors(edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Sentence:java.util.List governors()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.SentenceAlgorithms:java.util.List dependencyPathBetween(int,int,java.util.function.Function)",
            "edu.stanford.nlp.simple.SentenceAlgorithms:int headOfSpan(edu.stanford.nlp.ie.machinereading.structure.Span)"
        ]
    },
    "edu.stanford.nlp.simple.Sentence:java.util.List governors(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Sentence:java.util.List natlogPolarities()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Sentence:java.util.List operators()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Sentence:java.util.Optional operatorAt(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Sentence:java.util.Optional operatorAt(java.util.Properties,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Sentence:java.util.List operatorsNonempty(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:java.util.List operatorsNonempty()"
        ]
    },
    "edu.stanford.nlp.simple.Sentence:edu.stanford.nlp.naturalli.Polarity natlogPolarity(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Sentence:java.util.List lemmas()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:java.lang.String lemma(int)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.MachineReading:edu.stanford.nlp.pipeline.Annotation annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.RelationExtractorAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.parser.metrics.AbstractEval:double precision(java.util.Set,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.EvalbByCat:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)",
            "edu.stanford.nlp.parser.metrics.TaggingEval:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)",
            "edu.stanford.nlp.parser.metrics.AbstractEval:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter,double)"
        ]
    },
    "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:boolean skipThisMention(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:void findCoreferentAntecedent(edu.stanford.nlp.hcoref.data.Mention,int,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.StringBuilder)",
            "edu.stanford.nlp.hcoref.sieve.RFSieve:edu.stanford.nlp.ling.RVFDatum extractDatum(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,int,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.util.CollectionUtils:boolean containsAny(java.util.Collection,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Mention:boolean isMemberOfSameList(edu.stanford.nlp.hcoref.data.Mention)",
            "edu.stanford.nlp.dcoref.Mention:boolean isMemberOfSameList(edu.stanford.nlp.dcoref.Mention)"
        ]
    },
    "edu.stanford.nlp.hcoref.Rules:boolean entityBothHaveProper(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.RFSieve:edu.stanford.nlp.ling.RVFDatum extractDatum(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,int,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.CorefCluster:boolean isSinglePronounCluster(edu.stanford.nlp.hcoref.data.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.TregexPoweredTreebankParserParams:void display()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SpanishTreebankParserParams:void display()"
        ]
    },
    "edu.stanford.nlp.patterns.ConstantsAndVariables:edu.stanford.nlp.patterns.CandidatePhrase containsFuzzy(java.util.Set,edu.stanford.nlp.patterns.CandidatePhrase,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ScorePhrases:edu.stanford.nlp.stats.Counter chooseTopWords(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.Counter,java.util.Set,double)"
        ]
    },
    "edu.stanford.nlp.classify.ColumnDataClassifier:void addAllInterningAndPrefixing(java.util.Collection,java.util.Collection,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.ling.Datum makeDatum(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.ScrollableTreeJPanel:void renderRows(java.awt.Graphics2D,java.awt.FontMetrics,java.awt.Color)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.ScrollableTreeJPanel:void paintComponent(java.awt.Graphics)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:double jaccardCoefficient(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.lang.String toList()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:java.lang.String toString(edu.stanford.nlp.semgraph.SemanticGraph$OutputFormat)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:void examineIntersection(java.util.Set,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.md.CorefMentionFinder:void extractNamedEntityModifiers(java.util.List,java.util.List,java.util.List,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.md.HybridCorefMentionFinder:java.util.List findMentions(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.parser.metrics.Evalb$CBEval:void checkCrossing(java.util.Set,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.Evalb$CBEval:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:edu.stanford.nlp.ling.IndexedWord getFirstRoot()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.SemgrexPattern:edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher matcher(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.semgrex.Alignment,edu.stanford.nlp.semgraph.SemanticGraph,boolean)",
            "edu.stanford.nlp.semgraph.semgrex.NodePattern:edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher matcher(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.semgrex.Alignment,edu.stanford.nlp.semgraph.SemanticGraph,boolean,edu.stanford.nlp.ling.IndexedWord,java.util.Map,java.util.Map,edu.stanford.nlp.semgraph.semgrex.VariableStrings,boolean)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$8:edu.stanford.nlp.stats.Counter apply(edu.stanford.nlp.util.Triple)",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.lang.String semgrexFromGraph(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Collection,java.util.Map,java.util.function.Function)",
            "edu.stanford.nlp.hcoref.data.Mention:java.lang.String getRelation()",
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.lang.String semgrexFromGraphOrderedNodes(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Collection,java.util.Map,java.util.function.Function)",
            "edu.stanford.nlp.semgraph.semgrex.SemgrexPattern:edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher matcher(edu.stanford.nlp.semgraph.SemanticGraph,boolean)",
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:boolean lambda$fromProto$66(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.semgraph.SemanticGraph:edu.stanford.nlp.semgraph.SemanticGraph makeSoftCopy()",
            "edu.stanford.nlp.semgraph.semgrex.SemgrexPattern:edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher matcher(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Map)",
            "edu.stanford.nlp.dcoref.Mention:java.lang.String getRelation()",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void stripAuxMark(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional segmentACL(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Optional,boolean)",
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.pipeline.CoreNLPProtos$SentenceFragment toProto(edu.stanford.nlp.naturalli.SentenceFragment)",
            "edu.stanford.nlp.semgraph.semgrex.SemgrexPattern:edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher matcher(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:void lambda$fromProto$67(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void simpleClause(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraphEdge)",
            "edu.stanford.nlp.semgraph.semgrex.SemgrexPattern:edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher matcher(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.semgrex.Alignment,edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional segment(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Optional,boolean)",
            "edu.stanford.nlp.semgraph.SemanticGraphFormatter:java.lang.String formatSemanticGraph(edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.dcoref.Rules:boolean entityAttributesAgree(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.sievepasses.NameMatch:boolean checkEntityMatch(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Dictionaries,java.util.Set)",
            "edu.stanford.nlp.dcoref.Rules:boolean entityAttributesAgree(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster)"
        ]
    },
    "edu.stanford.nlp.process.WordToSentenceProcessor:void <init>(java.lang.String,java.util.Set,java.util.Set,java.util.Set,java.lang.String,edu.stanford.nlp.process.WordToSentenceProcessor$NewlineIsSentenceBreak,edu.stanford.nlp.ling.tokensregex.SequencePattern,java.util.Set,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.WordToSentenceProcessor:void <init>(java.util.Set)",
            "edu.stanford.nlp.process.WordToSentenceProcessor:void <init>(java.lang.String,java.util.Set,java.util.Set,edu.stanford.nlp.process.WordToSentenceProcessor$NewlineIsSentenceBreak,edu.stanford.nlp.ling.tokensregex.SequencePattern,java.util.Set)",
            "edu.stanford.nlp.process.WordToSentenceProcessor:void <init>(java.lang.String,java.util.Set,java.util.Set,edu.stanford.nlp.process.WordToSentenceProcessor$NewlineIsSentenceBreak)",
            "edu.stanford.nlp.process.WordToSentenceProcessor:void <init>(java.lang.String,edu.stanford.nlp.process.WordToSentenceProcessor$NewlineIsSentenceBreak,boolean)"
        ]
    },
    "edu.stanford.nlp.dcoref.Rules:boolean entityBothHaveProper(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.Rules:boolean entityAttributesAgree(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.Rules:boolean entityAttributesAgree(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster)",
            "edu.stanford.nlp.hcoref.sieve.NameMatch:boolean checkEntityMatch(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.pipeline.XMLOutputter:nu.xom.Element buildDependencyTreeInfo(java.lang.String,edu.stanford.nlp.semgraph.SemanticGraph,java.util.List,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.XMLOutputter:nu.xom.Document annotationToDoc(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.pipeline.AnnotationOutputter$Options)"
        ]
    },
    "edu.stanford.nlp.fsm.TransducerGraph:double sumOutputs(java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.fsm.TransducerGraph:double inFlow(java.lang.Object)",
            "edu.stanford.nlp.fsm.TransducerGraph:double outFlow(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.dcoref.CorefCluster:boolean isSinglePronounCluster(edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve:java.util.List getOrderedAntecedents(int,int,java.util.List,java.util.List,edu.stanford.nlp.dcoref.Mention,int,java.util.Map,edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:int getFeatureCountLabelIndices(java.util.Set,double,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifier:int getFeatureCount(java.util.Set,double,boolean)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.ComplexNodePattern$AttributesEqualMatchChecker:boolean matches(java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.ComplexNodePattern$AttributesEqualMatchChecker:boolean matches(java.lang.Object,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.hcoref.Rules:boolean entityHeadsAgree(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Set)",
            "edu.stanford.nlp.hcoref.sieve.RFSieve:edu.stanford.nlp.ling.RVFDatum extractDatum(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,int,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve:boolean skipThisMention(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void coreference(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void removeDeleteSplittersFromSplitters(edu.stanford.nlp.trees.TreebankLanguagePack,edu.stanford.nlp.parser.lexparser.Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Collection typedDependencies()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void correctDependencies(java.util.List)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void postProcessDependencies(java.util.List)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void correctDependencies(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void getExtras(java.util.List)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void collapseDependencies(java.util.List,boolean,edu.stanford.nlp.trees.GrammaticalStructure$Extras)",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void postProcessDependencies(java.util.List)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$ExplicitTemporalSet:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.pipeline.CoreNLPProtos$Mention toProto(edu.stanford.nlp.hcoref.data.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.pipeline.CoreNLPProtos$Sentence$Builder toProtoBuilder(edu.stanford.nlp.util.CoreMap,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.dcoref.MentionExtractor:void markMentionRelation(java.util.List,java.util.Set,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.MentionExtractor:void findSyntacticRelations(edu.stanford.nlp.trees.Tree,java.util.List)"
        ]
    },
    "edu.stanford.nlp.hcoref.Preprocessor:void markMentionRelation(java.util.List,java.util.Set,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.Preprocessor:void findSyntacticRelationsFromDependency(java.util.List)"
        ]
    },
    "edu.stanford.nlp.hcoref.sieve.Sieve:boolean matchedMentionType(edu.stanford.nlp.hcoref.data.Mention,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.OracleSieve:void findCoreferentAntecedent(edu.stanford.nlp.hcoref.data.Mention,int,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.StringBuilder)",
            "edu.stanford.nlp.hcoref.sieve.RFSieve:void findCoreferentAntecedent(edu.stanford.nlp.hcoref.data.Mention,int,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.StringBuilder)",
            "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:void findCoreferentAntecedent(edu.stanford.nlp.hcoref.data.Mention,int,edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.StringBuilder)"
        ]
    },
    "edu.stanford.nlp.util.StringUtils:java.lang.String join(java.lang.Iterable,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:java.lang.String ensurePrerequisiteAnnotators(java.lang.String[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$FunctionCallExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.util.Map runPOSNEROnTokens(java.util.List,java.lang.String,boolean,java.lang.String,boolean,java.lang.String,edu.stanford.nlp.patterns.PatternFactory$PatternType)",
            "edu.stanford.nlp.ling.tokensregex.NodePattern$ConjNodePattern:java.lang.String toString()",
            "edu.stanford.nlp.pipeline.StanfordCoreNLPClient:void <init>(java.util.Properties,java.util.List)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$MethodCallExpression:java.lang.String toString()",
            "edu.stanford.nlp.ling.tokensregex.matcher.Match:java.lang.String toString()",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$FunctionCallExpression:java.lang.String toString()",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.lang.String toEnUncollapsedSentenceString()",
            "edu.stanford.nlp.pipeline.CoNLLOutputter:java.lang.String line(int,edu.stanford.nlp.ling.CoreLabel,int,java.lang.String)",
            "edu.stanford.nlp.ling.tokensregex.NodePattern$DisjNodePattern:java.lang.String toString()",
            "edu.stanford.nlp.ie.machinereading.BasicRelationFeatureFactory:java.lang.String generalizedDependencyPath(java.util.List,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.patterns.dep.DataInstanceDep:java.lang.String toString()",
            "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void serializeTextClassifier(java.io.PrintWriter)",
            "edu.stanford.nlp.simple.SentenceAlgorithms:java.lang.String lambda$keyphrases$11(java.util.function.Function,edu.stanford.nlp.ie.machinereading.structure.Span)",
            "edu.stanford.nlp.ie.EntityBIO:java.lang.String toString(edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.ling.tokensregex.matcher.TrieMap:java.lang.String toFormattedString()",
            "edu.stanford.nlp.patterns.surface.AnnotatedTextReader:java.util.List parseFile(java.io.BufferedReader,java.util.Set,java.util.Map,boolean,java.lang.String)",
            "edu.stanford.nlp.util.StringUtils:java.util.Properties argsToPropertiesWithResolve(java.lang.String[])",
            "edu.stanford.nlp.util.StringUtils:java.lang.String join(java.lang.Iterable)",
            "edu.stanford.nlp.util.StringUtils:java.util.Collection getNgramsFromTokens(java.util.List,int,int)",
            "edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult:java.lang.String group(int)",
            "edu.stanford.nlp.sequences.TrueCasingForNISTDocumentReaderAndWriter:void printAnswers(java.util.List,java.io.PrintWriter)",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$AndPatternExpr:java.lang.String toString()",
            "edu.stanford.nlp.ie.machinereading.domains.roth.RothCONLL04Reader:edu.stanford.nlp.pipeline.Annotation readSentence(edu.stanford.nlp.pipeline.Annotation,java.lang.String,java.util.Iterator)",
            "edu.stanford.nlp.stats.Counters:java.lang.String toSortedByKeysString(edu.stanford.nlp.stats.Counter,java.lang.String,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:java.util.Map runPOSNERParseOnTokens(java.util.Map,java.util.Properties)",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$OrPatternExpr:java.lang.String toString()",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:int tokenize(java.util.Iterator,java.lang.String,boolean,boolean,java.lang.String,boolean,java.lang.String,boolean,int,java.io.File,java.util.Map,int,edu.stanford.nlp.patterns.PatternFactory$PatternType)",
            "edu.stanford.nlp.naturalli.NaturalLogicAnnotator:void <clinit>()",
            "edu.stanford.nlp.util.StringUtils:java.util.Collection getNgrams(java.util.List,int,int)",
            "edu.stanford.nlp.patterns.ConstantsAndVariables:void setUp(java.util.Properties)",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void runAndScoreCorefDist(java.lang.String,java.util.Properties,java.lang.String)",
            "edu.stanford.nlp.patterns.dep.ExtractPhraseFromPattern:java.util.Set getSemGrexPatternNodes(edu.stanford.nlp.semgraph.SemanticGraph,java.util.List,java.util.Collection,java.util.Collection,edu.stanford.nlp.semgraph.semgrex.SemgrexPattern,boolean,java.util.Collection,boolean,java.util.function.Function)",
            "edu.stanford.nlp.international.Language:void <clinit>()",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void writeColumnOutputSents(java.util.Map,java.io.BufferedWriter,java.util.Map)",
            "edu.stanford.nlp.ie.machinereading.structure.AnnotationUtils:java.lang.String sentenceToString(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.patterns.surface.PatternToken:java.lang.String getTokenStr(java.util.List)",
            "edu.stanford.nlp.patterns.dep.ExtractPhraseFromPattern:void printSubGraph(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.List,java.util.List,java.util.Collection,java.util.Collection,java.util.List,java.util.List,boolean,java.util.Collection,edu.stanford.nlp.semgraph.semgrex.SemgrexPattern,java.util.function.Function)",
            "edu.stanford.nlp.ling.tokensregex.PhraseTable:boolean addPhrase(java.util.List,java.lang.String,java.lang.Object)",
            "edu.stanford.nlp.util.ConfusionMatrix$Contingency:java.lang.String toString()",
            "edu.stanford.nlp.ling.tokensregex.matcher.MultiMatch:java.lang.String toString()",
            "edu.stanford.nlp.ling.tokensregex.types.ValueFunctions:java.lang.String join(java.lang.Object[],java.lang.String)",
            "edu.stanford.nlp.util.StringUtils:java.util.Properties argsToProperties(java.lang.String[],java.util.Map)",
            "edu.stanford.nlp.trees.GrammaticalStructure:void main(java.lang.String[])",
            "edu.stanford.nlp.naturalli.Util:void annotate(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.pipeline.AnnotationPipeline)",
            "edu.stanford.nlp.ie.crf.CRFClassifierNonlinear:void serializeTextClassifier(java.io.PrintWriter)",
            "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader:void main(java.lang.String[])",
            "edu.stanford.nlp.util.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String)",
            "edu.stanford.nlp.time.SUTimeMain:edu.stanford.nlp.util.CoreMap wordsToSentence(java.util.List)",
            "edu.stanford.nlp.ie.machinereading.BasicRelationFeatureFactory:java.lang.String dependencyPath(java.util.List,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.pipeline.Requirement:java.lang.String getMissingRequirement(java.util.Set)",
            "edu.stanford.nlp.stats.Counters:java.lang.String toSortedString(edu.stanford.nlp.stats.Counter,int,java.lang.String,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$SequencePatternExpr:java.lang.String toString()",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void iterateExtractApply(java.util.Map,java.util.Map,java.util.Map)",
            "edu.stanford.nlp.time.SUTime$ExplicitTemporalSet:java.lang.String toFormattedString(int)"
        ]
    },
    "edu.stanford.nlp.hcoref.md.CorefMentionFinder:boolean mentionContainsRemoveChars(edu.stanford.nlp.hcoref.data.Mention,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:void removeSpuriousMentionsZh(edu.stanford.nlp.pipeline.Annotation,java.util.List,edu.stanford.nlp.hcoref.data.Dictionaries,boolean)"
        ]
    },
    "edu.stanford.nlp.trees.EnglishGrammaticalStructure:boolean isConjWithNoPrep(edu.stanford.nlp.ling.IndexedWord,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void collapsePrepAndPoss(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:void printCounterComparison(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:void printCounterComparison(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.io.PrintStream)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter absoluteDifference(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.metrics.Evalb:void emitSortedTrees(java.util.PriorityQueue,int,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.Evalb:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern$AttributesEqualMatchChecker:boolean matches(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern$AttributesEqualMatchChecker:boolean matches(java.lang.Object,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.lang.String toReadableString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraph:java.lang.String toString(edu.stanford.nlp.semgraph.SemanticGraph$OutputFormat)"
        ]
    },
    "edu.stanford.nlp.hcoref.Rules:boolean entityIWithinI(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.RFSieve:edu.stanford.nlp.ling.RVFDatum extractDatum(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,int,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:edu.stanford.nlp.stats.Counter intersection(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.Rules:boolean entityExactStringMatch(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.RFSieve:edu.stanford.nlp.ling.RVFDatum extractDatum(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,int,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.String)",
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)"
        ]
    },
    "edu.stanford.nlp.parser.metrics.TreeSpanScoring:java.util.Set simplifyConstituents(edu.stanford.nlp.trees.TreebankLanguagePack,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.TreeSpanScoring:int countSpanErrors(edu.stanford.nlp.trees.TreebankLanguagePack,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void removeDeleteSplittersFromSplitters(edu.stanford.nlp.trees.TreebankLanguagePack,edu.stanford.nlp.parser.lexparser.Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)"
        ]
    },
    "edu.stanford.nlp.trees.Constituent:boolean crosses(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.NodePruner:java.util.List prune(java.util.List,edu.stanford.nlp.ling.Label,int,int)"
        ]
    },
    "edu.stanford.nlp.dcoref.Rules:boolean entityIWithinI(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.Rules:boolean entityHeadsAgree(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries,java.util.Set,edu.stanford.nlp.dcoref.Semantics)"
        ]
    },
    "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:boolean insideNE(edu.stanford.nlp.util.IntPair,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:void extractEnumerations(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:void extractNPorPRP(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.hcoref.md.CorefMentionFinder:boolean insideNE(edu.stanford.nlp.util.IntPair,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.md.RuleBasedCorefMentionFinder:void extractNPorPRP(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.hcoref.md.HybridCorefMentionFinder:void extractNPorPRP(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:void extractPronounForHeadword(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:void extractEnumerations(edu.stanford.nlp.util.CoreMap,java.util.List,java.util.Set,java.util.Set)",
            "edu.stanford.nlp.hcoref.md.DependencyCorefMentionFinder:void addMention(int,int,edu.stanford.nlp.ling.IndexedWord,java.util.List,java.util.Set,java.util.Set,java.util.List,edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.dcoref.CorefCluster:void printCorefCluster(java.util.logging.Logger)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void printLogs(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Document,int)",
            "edu.stanford.nlp.dcoref.CorefCluster:void mergeClusters(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster)",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void printTopK(java.util.logging.Logger,edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.Semantics)"
        ]
    },
    "edu.stanford.nlp.dcoref.Rules:boolean entityExactStringMatch(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Dictionaries,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries,java.util.Set,edu.stanford.nlp.dcoref.Semantics)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher$MatchQueue:java.util.List toSortedList()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List findClosestMatches(java.util.List,edu.stanford.nlp.ling.tokensregex.matcher.MatchCostFunction,double,int,boolean,boolean)"
        ]
    },
    "edu.stanford.nlp.util.logging.RedwoodConfiguration:edu.stanford.nlp.util.logging.RedwoodConfiguration minimal()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood:void <clinit>()"
        ]
    },
    "edu.stanford.nlp.util.logging.RedwoodConfiguration:edu.stanford.nlp.util.logging.RedwoodConfiguration javaUtilLogging()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.RedwoodConfiguration:edu.stanford.nlp.util.logging.RedwoodConfiguration slf4j()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.CollectionUtils:java.util.List filterAsList(java.util.Collection,java.util.function.Predicate)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.CacheParseHypotheses:byte[] convertToBytes(java.util.List)",
            "edu.stanford.nlp.sentiment.SentimentUtils:java.util.List filterUnknownRoots(java.util.List)",
            "edu.stanford.nlp.neural.NeuralUtils:org.ejml.simple.SimpleMatrix convertTextMatrix(java.lang.String)",
            "edu.stanford.nlp.parser.dvparser.CacheParseHypotheses$CacheProcessor:edu.stanford.nlp.util.Pair process(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper$GsIterator:void primeGs()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper$GsIterator:edu.stanford.nlp.trees.GrammaticalStructure next()",
            "edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper$GsIterator:void <init>(edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper)"
        ]
    },
    "edu.stanford.nlp.trees.EnglishGrammaticalStructureFactory:edu.stanford.nlp.trees.GrammaticalStructure newGrammaticalStructure(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TreePrint:java.util.List getSortedDeps(edu.stanford.nlp.trees.Tree,java.util.function.Predicate)",
            "edu.stanford.nlp.trees.TreePrint:void printTreeInternal(edu.stanford.nlp.trees.Tree,java.io.PrintWriter,boolean)",
            "edu.stanford.nlp.pipeline.ParserAnnotatorUtils:void fillInParseAnnotations(boolean,boolean,edu.stanford.nlp.trees.GrammaticalStructureFactory,edu.stanford.nlp.util.CoreMap,java.util.List,edu.stanford.nlp.trees.GrammaticalStructure$Extras)"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructureFactory:edu.stanford.nlp.trees.GrammaticalStructure newGrammaticalStructure(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TreePrint:java.util.List getSortedDeps(edu.stanford.nlp.trees.Tree,java.util.function.Predicate)",
            "edu.stanford.nlp.trees.TreePrint:void printTreeInternal(edu.stanford.nlp.trees.Tree,java.io.PrintWriter,boolean)"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:void <init>(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructureFactory:edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure newGrammaticalStructure(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotationOutputter:void print(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream,edu.stanford.nlp.pipeline.StanfordCoreNLP)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.XMLOutputter:void xmlPrint(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream,edu.stanford.nlp.pipeline.StanfordCoreNLP)",
            "edu.stanford.nlp.pipeline.CoNLLOutputter:void conllPrint(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream,edu.stanford.nlp.pipeline.StanfordCoreNLP)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void shell(edu.stanford.nlp.pipeline.StanfordCoreNLP)",
            "edu.stanford.nlp.pipeline.JSONOutputter:void jsonPrint(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream,edu.stanford.nlp.pipeline.StanfordCoreNLP)",
            "edu.stanford.nlp.pipeline.CoNLLUOutputter:void conllUPrint(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream,edu.stanford.nlp.pipeline.StanfordCoreNLP)"
        ]
    },
    "edu.stanford.nlp.pipeline.CoNLLUOutputter:void conllUPrint(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream,edu.stanford.nlp.pipeline.AnnotationOutputter$Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP:void lambda$createOutputter$14(edu.stanford.nlp.pipeline.StanfordCoreNLP$OutputFormat,edu.stanford.nlp.pipeline.AnnotationOutputter$Options,java.lang.String,java.lang.String,java.util.Properties,edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLPServer$CoreNLPHandler:void handle(com.sun.net.httpserver.HttpExchange)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void lambda$processFiles$15(java.lang.String,java.util.function.BiConsumer,edu.stanford.nlp.util.MutableInteger,boolean,java.io.File,edu.stanford.nlp.util.MutableInteger,edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotationOutputter:void print(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.XMLOutputter:void xmlPrint(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLPClient:void lambda$shell$231(edu.stanford.nlp.pipeline.StanfordCoreNLPClient,edu.stanford.nlp.pipeline.StanfordCoreNLP$OutputFormat,java.lang.String)",
            "edu.stanford.nlp.pipeline.CoNLLUOutputter:void conllUPrint(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream)",
            "edu.stanford.nlp.pipeline.JSONOutputter:java.lang.String jsonPrint(edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.pipeline.JSONOutputter:void jsonPrint(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream)",
            "edu.stanford.nlp.pipeline.CoNLLOutputter:void conllPrint(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream)"
        ]
    },
    "edu.stanford.nlp.parser.common.ParserGrammar:edu.stanford.nlp.trees.Tree parse(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.server.LexicalizedParserServer:edu.stanford.nlp.trees.Tree parse(java.lang.String,boolean)",
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:edu.stanford.nlp.trees.Tree parse(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.stats.GeneralizedCounter:void prettyPrint()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.GeneralizedCounter:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor createExtractorFromFiles(edu.stanford.nlp.ling.tokensregex.Env,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor createExtractorFromFile(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String)",
            "edu.stanford.nlp.time.GenericTimeExpressionPatterns:edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor createExtractor()",
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor createExtractorFromFiles(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor createExtractorFromString(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph generateCCProcessedDependencies(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph generateUncollapsedDependencies(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph generateCollapsedDependencies(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode,boolean,java.util.function.Predicate)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.SemanticGraphFactory:edu.stanford.nlp.semgraph.SemanticGraph allTypedDependencies(edu.stanford.nlp.trees.Tree,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructureFactory:edu.stanford.nlp.trees.GrammaticalStructure newGrammaticalStructure(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TreePrint:java.util.List getSortedDeps(edu.stanford.nlp.trees.Tree,java.util.function.Predicate)",
            "edu.stanford.nlp.trees.TreePrint:void printTreeInternal(edu.stanford.nlp.trees.Tree,java.io.PrintWriter,boolean)"
        ]
    },
    "edu.stanford.nlp.sentiment.SentimentCostAndGradient$ScoringProcessor:edu.stanford.nlp.sentiment.SentimentCostAndGradient$ModelDerivatives process(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.SentimentCostAndGradient$ScoringProcessor:java.lang.Object process(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.parser.dvparser.DVParserCostAndGradient$ScoringProcessor:java.lang.Object process(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.dvparser.DVParserCostAndGradient:java.util.List getAllHighestScoringTreesTest(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.RerankingParserQuery:java.util.List rerank(java.util.List,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.RerankingParserQuery:boolean parseAndReport(java.util.List,java.io.PrintWriter)",
            "edu.stanford.nlp.parser.lexparser.RerankingParserQuery:boolean parse(java.util.List)"
        ]
    },
    "edu.stanford.nlp.simple.Sentence:java.util.List asCoreLabels(java.util.function.Function[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:edu.stanford.nlp.semgraph.SemanticGraph dependencyGraph(java.util.Properties,edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode)",
            "edu.stanford.nlp.simple.Sentence:java.util.Collection openieTriples(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.pipeline.XMLOutputter:void print(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream,edu.stanford.nlp.pipeline.AnnotationOutputter$Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotationOutputter:void print(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream,edu.stanford.nlp.pipeline.StanfordCoreNLP)",
            "edu.stanford.nlp.pipeline.XMLOutputter:void xmlPrint(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream,edu.stanford.nlp.pipeline.AnnotationOutputter$Options)",
            "edu.stanford.nlp.pipeline.AnnotationOutputter:java.lang.String print(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.pipeline.AnnotationOutputter$Options)",
            "edu.stanford.nlp.pipeline.AnnotationOutputter:void print(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream)"
        ]
    },
    "edu.stanford.nlp.pipeline.XMLOutputter:nu.xom.Document annotationToDoc(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.pipeline.StanfordCoreNLP)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.TextOutputter:void prettyPrint(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream,edu.stanford.nlp.pipeline.StanfordCoreNLP)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void prettyPrint(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream)"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP:void prettyPrint(edu.stanford.nlp.pipeline.Annotation,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.RelationExtractorAnnotator:void <init>(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.RelationExtractorAnnotator:void main(java.lang.String[])",
            "edu.stanford.nlp.pipeline.AnnotatorImplementations:edu.stanford.nlp.pipeline.Annotator relations(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:void <init>(edu.stanford.nlp.pipeline.StanfordCoreNLP,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:void <init>()",
            "edu.stanford.nlp.dcoref.ACEMentionExtractor:void <init>(edu.stanford.nlp.dcoref.Dictionaries,java.util.Properties,edu.stanford.nlp.dcoref.Semantics)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer$NPTmpRetainingTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.ACEMentionExtractor:void <init>(edu.stanford.nlp.dcoref.Dictionaries,java.util.Properties,edu.stanford.nlp.dcoref.Semantics,edu.stanford.nlp.classify.LogisticClassifier)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:java.lang.String initializeAndRunCoref(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotatorImplementations:edu.stanford.nlp.pipeline.Annotator dcoref(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorFactories$14:edu.stanford.nlp.pipeline.Annotator create()"
        ]
    },
    "edu.stanford.nlp.dcoref.MUCMentionExtractor:void <init>(edu.stanford.nlp.dcoref.Dictionaries,java.util.Properties,edu.stanford.nlp.dcoref.Semantics,edu.stanford.nlp.classify.LogisticClassifier)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:java.lang.String initializeAndRunCoref(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.dcoref.CoNLLMentionExtractor:void <init>(edu.stanford.nlp.dcoref.Dictionaries,java.util.Properties,edu.stanford.nlp.dcoref.Semantics,edu.stanford.nlp.classify.LogisticClassifier)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:java.lang.String initializeAndRunCoref(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.InputPanel$2:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:java.util.Collection allTypedDependencies()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TreePrint:void printTreeInternal(edu.stanford.nlp.trees.Tree,java.io.PrintWriter,boolean)",
            "edu.stanford.nlp.trees.GrammaticalStructure:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:edu.stanford.nlp.trees.GrammaticalRelation getGrammaticalRelation(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:edu.stanford.nlp.trees.GrammaticalRelation getGrammaticalRelation(int,int)"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:java.util.List typedDependencies(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:java.util.Collection typedDependencies()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TreePrint:void printTreeInternal(edu.stanford.nlp.trees.Tree,java.io.PrintWriter,boolean)",
            "edu.stanford.nlp.parser.nndep.DependencyParser:void parseTextFile(java.io.BufferedReader,java.io.PrintWriter)",
            "edu.stanford.nlp.trees.GrammaticalStructure:java.lang.String dependenciesToCoNLLXString(edu.stanford.nlp.trees.GrammaticalStructure,edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLPServer:edu.stanford.nlp.pipeline.StanfordCoreNLP access$400(edu.stanford.nlp.pipeline.StanfordCoreNLPServer,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLPServer$TokensRegexHandler:java.lang.String lambda$handle$27(com.sun.net.httpserver.HttpExchange)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLPServer$CoreNLPHandler:void handle(com.sun.net.httpserver.HttpExchange)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLPServer$SemgrexHandler:java.lang.String lambda$handle$34(com.sun.net.httpserver.HttpExchange)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$ADJACENT_NODE$1:void <init>(edu.stanford.nlp.semgraph.semgrex.GraphRelation$ADJACENT_NODE,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$ADJACENT_NODE:java.util.Iterator searchNodeIterator(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$LIMITED_GRANDPARENT$1:void <init>(edu.stanford.nlp.semgraph.semgrex.GraphRelation$LIMITED_GRANDPARENT,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$LIMITED_GRANDPARENT:java.util.Iterator searchNodeIterator(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$DEPENDENT$1:void <init>(edu.stanford.nlp.semgraph.semgrex.GraphRelation$DEPENDENT,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$DEPENDENT:java.util.Iterator searchNodeIterator(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$SIBLING_RELATION$1:void <init>(edu.stanford.nlp.semgraph.semgrex.GraphRelation$SIBLING_RELATION,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$SIBLING_RELATION:java.util.Iterator searchNodeIterator(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$1$1:void <init>(edu.stanford.nlp.semgraph.semgrex.GraphRelation$1,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$1:java.util.Iterator searchNodeIterator(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$ALIGNMENT$1:void <init>(edu.stanford.nlp.semgraph.semgrex.GraphRelation$ALIGNMENT,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$ALIGNMENT:java.util.Iterator searchNodeIterator(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$GRANDSOMETHING$1:void <init>(edu.stanford.nlp.semgraph.semgrex.GraphRelation$GRANDSOMETHING,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$GRANDSOMETHING:java.util.Iterator searchNodeIterator(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$LIMITED_GRANDKID$1:void <init>(edu.stanford.nlp.semgraph.semgrex.GraphRelation$LIMITED_GRANDKID,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$LIMITED_GRANDKID:java.util.Iterator searchNodeIterator(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$3$1:void <init>(edu.stanford.nlp.semgraph.semgrex.GraphRelation$3,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$3:java.util.Iterator searchNodeIterator(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$EQUALS$1:void <init>(edu.stanford.nlp.semgraph.semgrex.GraphRelation$EQUALS,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$EQUALS:java.util.Iterator searchNodeIterator(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$GOVERNER$1:void <init>(edu.stanford.nlp.semgraph.semgrex.GraphRelation$GOVERNER,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$GOVERNER:java.util.Iterator searchNodeIterator(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:edu.stanford.nlp.ling.IndexedWord getParent(edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void process3WP(edu.stanford.nlp.semgraph.SemanticGraph,java.util.HashMap)",
            "edu.stanford.nlp.dcoref.Mention:int getModal(edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void processComplex2WP(edu.stanford.nlp.semgraph.SemanticGraph,java.util.HashMap)",
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:java.util.HashMap getGraphFeatures(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:java.lang.String wasPerson(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:java.util.HashMap getRelAndIntPronFeatures(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void createMultiWordExpression(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.trees.GrammaticalRelation,edu.stanford.nlp.ling.IndexedWord[])",
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:java.lang.String pronounCase(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.dcoref.Mention:java.lang.String getRelation()",
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:boolean hasBeAux(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.hcoref.data.Mention:edu.stanford.nlp.ling.IndexedWord getHeadParent()",
            "edu.stanford.nlp.patterns.dep.DepPatternFactory:java.util.Set getContext(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,java.util.Set,edu.stanford.nlp.patterns.DataInstance)",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.util.Collection getSiblings(edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:boolean hasAux(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void expandPrepConjunction(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.List,edu.stanford.nlp.ling.IndexedWord)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void expandPPConjunction(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.List,edu.stanford.nlp.ling.IndexedWord)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Mention:java.util.List getHeadPathToRoot()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Mention:int getReportEmbedding(edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.hcoref.data.Mention:int getModal(edu.stanford.nlp.hcoref.data.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.parser.charniak.CharniakScoredParsesReaderWriter$ScoredParsesIterator:java.util.List getNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.charniak.CharniakScoredParsesReaderWriter$ScoredParsesIterator:java.util.List next()",
            "edu.stanford.nlp.parser.charniak.CharniakScoredParsesReaderWriter$ScoredParsesIterator:void <init>(java.lang.String,java.io.BufferedReader)"
        ]
    },
    "edu.stanford.nlp.util.MetaClass:java.lang.Object lambda$cast$37(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Lazy$2:java.lang.Object compute()"
        ]
    },
    "edu.stanford.nlp.pipeline.DependencyParseAnnotator:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.AnnotatorImplementations:edu.stanford.nlp.pipeline.Annotator dependencies(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorFactories$18:edu.stanford.nlp.pipeline.Annotator create()"
        ]
    },
    "edu.stanford.nlp.pipeline.TokensRegexAnnotator:void <init>(java.lang.String,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.TokensRegexAnnotator:void <init>(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotatorImplementations:edu.stanford.nlp.pipeline.Annotator parse(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorFactories$11:edu.stanford.nlp.pipeline.Annotator create()"
        ]
    },
    "edu.stanford.nlp.process.AbstractTokenizer:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.negra.NegraPennTokenizer:void main(java.lang.String[])",
            "edu.stanford.nlp.process.DocumentPreprocessor$PlainTextIterator:void primeNext()",
            "edu.stanford.nlp.process.WordSegmentingTokenizer:edu.stanford.nlp.ling.HasWord getNext()",
            "edu.stanford.nlp.trees.TreePrint:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.PennTreeReader:void <init>(java.io.Reader,edu.stanford.nlp.trees.TreeFactory,edu.stanford.nlp.trees.TreeNormalizer,edu.stanford.nlp.process.Tokenizer)",
            "edu.stanford.nlp.process.ChineseDocumentToSentenceProcessor:void main(java.lang.String[])",
            "edu.stanford.nlp.international.spanish.process.SpanishTokenizer:void main(java.lang.String[])",
            "edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter:java.util.Iterator getIterator(java.io.Reader)",
            "edu.stanford.nlp.process.AbstractTokenizer:java.util.List tokenize()",
            "edu.stanford.nlp.trees.international.pennchinese.CHTBTokenizer:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.international.arabic.ArabicTreebankTokenizer:void main(java.lang.String[])",
            "edu.stanford.nlp.process.LexerTokenizer:void main(java.lang.String[])",
            "edu.stanford.nlp.process.WhitespaceTokenizer:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.pascal.ISODateInstance:void tokenizeDate(java.lang.String)",
            "edu.stanford.nlp.international.arabic.process.ArabicTokenizer:void main(java.lang.String[])",
            "edu.stanford.nlp.international.french.process.FrenchTokenizer:void main(java.lang.String[])",
            "edu.stanford.nlp.process.PTBTokenizer:int tokReader(java.io.Reader,java.io.BufferedWriter,java.util.regex.Pattern,java.lang.String,boolean,boolean,boolean)",
            "edu.stanford.nlp.trees.PennTreeReader:edu.stanford.nlp.trees.Tree getTreeFromInputStream()"
        ]
    },
    "edu.stanford.nlp.process.AbstractTokenizer:boolean hasNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.negra.NegraPennTokenizer:void main(java.lang.String[])",
            "edu.stanford.nlp.process.DocumentPreprocessor$PlainTextIterator:void primeNext()",
            "edu.stanford.nlp.process.WordSegmentingTokenizer:edu.stanford.nlp.ling.HasWord getNext()",
            "edu.stanford.nlp.trees.TreePrint:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.PennTreeReader:void <init>(java.io.Reader,edu.stanford.nlp.trees.TreeFactory,edu.stanford.nlp.trees.TreeNormalizer,edu.stanford.nlp.process.Tokenizer)",
            "edu.stanford.nlp.process.ChineseDocumentToSentenceProcessor:void main(java.lang.String[])",
            "edu.stanford.nlp.international.spanish.process.SpanishTokenizer:void main(java.lang.String[])",
            "edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter:java.util.Iterator getIterator(java.io.Reader)",
            "edu.stanford.nlp.process.AbstractTokenizer:java.util.List tokenize()",
            "edu.stanford.nlp.trees.international.pennchinese.CHTBTokenizer:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.international.arabic.ArabicTreebankTokenizer:void main(java.lang.String[])",
            "edu.stanford.nlp.process.LexerTokenizer:void main(java.lang.String[])",
            "edu.stanford.nlp.process.WhitespaceTokenizer:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.pascal.ISODateInstance:void tokenizeDate(java.lang.String)",
            "edu.stanford.nlp.international.arabic.process.ArabicTokenizer:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.PennTreeReader:edu.stanford.nlp.trees.Tree readTree()",
            "edu.stanford.nlp.international.french.process.FrenchTokenizer:void main(java.lang.String[])",
            "edu.stanford.nlp.process.PTBTokenizer:int tokReader(java.io.Reader,java.io.BufferedWriter,java.util.regex.Pattern,java.lang.String,boolean,boolean,boolean)",
            "edu.stanford.nlp.trees.PennTreeReader:edu.stanford.nlp.trees.Tree getTreeFromInputStream()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.DisplayMatchesPanel:void addMatch(edu.stanford.nlp.trees.tregex.gui.TreeFromFile,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.DisplayMatchesPanel:void setMatch(edu.stanford.nlp.trees.tregex.gui.TreeFromFile,java.util.List)"
        ]
    },
    "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$DocumentIterator:edu.stanford.nlp.util.CoreMap wordsToSentence(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$DocumentIterator:void annotateDocument(edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$Document)"
        ]
    },
    "edu.stanford.nlp.parser.dvparser.CacheParseHypotheses$DecompressionProcessor:java.util.List process(byte[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.CacheParseHypotheses$DecompressionProcessor:java.lang.Object process(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$DocumentIterator:edu.stanford.nlp.util.CoreMap wordsToSentence(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$DocumentIterator:void annotateDocument(edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$CoNLLDocument)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:boolean findMatchStart(int,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:boolean matches()",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:boolean find0(int,boolean)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.lang.String toEnUncollapsedSentenceString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.MatchedExpression$SingleAnnotationExtractor:void annotate(edu.stanford.nlp.ling.tokensregex.MatchedExpression)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression$SingleAnnotationExtractor:void annotate(edu.stanford.nlp.ling.tokensregex.MatchedExpression,java.util.List)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationMatchedFilter:boolean test(edu.stanford.nlp.ling.tokensregex.MatchedExpression)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AssignmentRule createAssignmentRule(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.ling.tokensregex.types.AssignableExpression,edu.stanford.nlp.ling.tokensregex.types.Expression)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$Rule AssignmentRule(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.TregexParser:edu.stanford.nlp.trees.tregex.TregexPattern ChildrenDisj()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.TregexParser:edu.stanford.nlp.trees.tregex.TregexPattern Child()",
            "edu.stanford.nlp.trees.tregex.TregexParser:edu.stanford.nlp.trees.tregex.DescriptionPattern SubNode(edu.stanford.nlp.trees.tregex.Relation)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$RedwoodChannels:void errf(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.Redwood$RedwoodChannels:void warnf(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.Redwood$RedwoodChannels:void debugf(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.RedwoodPrintStream:java.io.PrintStream format(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.RedwoodPrintStream:java.io.PrintStream printf(java.util.Locale,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.RedwoodPrintStream:java.io.PrintStream format(java.util.Locale,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.RedwoodPrintStream:java.io.PrintStream printf(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.Execution:java.util.Map fillOptionsImpl(java.lang.Object[],java.lang.Class[],java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Execution:void fillOptions(java.lang.Class[],java.util.Properties)",
            "edu.stanford.nlp.util.Execution:void fillOptions(java.lang.Object[],java.lang.String[])",
            "edu.stanford.nlp.util.Execution:void fillOptions(java.util.Properties,java.lang.String[])",
            "edu.stanford.nlp.util.Execution:void fillOptions(java.lang.Class[],java.lang.String[])",
            "edu.stanford.nlp.util.Execution:void fillOptions(java.lang.Object[],java.util.Properties)",
            "edu.stanford.nlp.util.Execution:void fillOptions(java.lang.Class,java.util.Properties)",
            "edu.stanford.nlp.util.Execution:void exec(java.lang.Runnable,java.util.Properties,boolean)"
        ]
    },
    "edu.stanford.nlp.naturalli.ClauseSplitter:edu.stanford.nlp.naturalli.ClauseSplitter train(java.util.stream.Stream,java.io.File,java.io.File)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP:void processFiles(java.lang.String,java.util.Collection,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void processFiles(java.util.Collection,int)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void run()"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLPClient:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLPClient:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP$2:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP:void annotate(edu.stanford.nlp.pipeline.Annotation,java.util.function.Consumer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void processFiles(java.lang.String,java.util.Collection,int,java.util.Properties,java.util.function.BiConsumer,java.util.function.BiConsumer,edu.stanford.nlp.pipeline.StanfordCoreNLP$OutputFormat)"
        ]
    },
    "edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$2:void apply(edu.stanford.nlp.util.logging.RedwoodConfiguration,edu.stanford.nlp.util.logging.Redwood$RecordHandlerTree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$1:void apply(edu.stanford.nlp.util.logging.RedwoodConfiguration,edu.stanford.nlp.util.logging.Redwood$RecordHandlerTree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.RedwoodPrintStream:java.lang.Appendable append(char)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.RedwoodPrintStream:java.lang.Appendable append(java.lang.CharSequence,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.RedwoodPrintStream:java.lang.Appendable append(java.lang.CharSequence)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.Execution:void exec(java.lang.Runnable,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.io.IOUtils:void console(java.lang.String,java.util.function.Consumer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLPClient:void shell(edu.stanford.nlp.pipeline.StanfordCoreNLPClient)",
            "edu.stanford.nlp.io.IOUtils:void console(java.util.function.Consumer)"
        ]
    },
    "edu.stanford.nlp.scoref.PairwiseModel:void writeModel()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.PairwiseModelTrainer:void trainClassification(edu.stanford.nlp.scoref.PairwiseModel,boolean)",
            "edu.stanford.nlp.scoref.PairwiseModelTrainer:void trainRanking(edu.stanford.nlp.scoref.PairwiseModel)"
        ]
    },
    "edu.stanford.nlp.patterns.surface.SurfacePattern:edu.stanford.nlp.patterns.surface.SurfacePattern copyNewToken()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.AnnotationPipeline:void annotate(java.lang.Iterable,int,java.util.function.Consumer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotationPipeline:void annotate(java.lang.Iterable,java.util.function.Consumer)",
            "edu.stanford.nlp.pipeline.AnnotationPipeline:void annotate(java.lang.Iterable,int)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$Util:void threadAndRun(java.lang.String,java.lang.Iterable)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.Redwood$Util:void threadAndRun(java.lang.Iterable,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood:void main(java.lang.String[])",
            "edu.stanford.nlp.util.logging.Redwood$Util:void threadAndRun(java.lang.Iterable)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$PeriodicTemporalSet:java.util.Map getTimexAttributes(edu.stanford.nlp.time.SUTime$TimeIndex)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule createMergedRule(edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:java.util.List collapse(java.util.List)"
        ]
    },
    "edu.stanford.nlp.classify.GeneralDataset:void addAll(java.lang.Iterable)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.AbstractLinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier trainClassifier(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.classify.Dataset:edu.stanford.nlp.classify.Dataset readSVMLightFormat(java.lang.String,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.Dataset:edu.stanford.nlp.classify.Dataset readSVMLightFormat(java.lang.String,java.util.List)",
            "edu.stanford.nlp.classify.Dataset:edu.stanford.nlp.classify.Dataset readSVMLightFormat(java.lang.String,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)"
        ]
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier:void adapt(java.lang.String,edu.stanford.nlp.classify.Dataset,edu.stanford.nlp.sequences.DocumentReaderAndWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void train(java.util.Collection,edu.stanford.nlp.sequences.DocumentReaderAndWriter)"
        ]
    },
    "edu.stanford.nlp.stats.MultiClassChunkEvalStats:void <init>(edu.stanford.nlp.classify.Classifier,edu.stanford.nlp.classify.GeneralDataset,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List segmentString(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ChineseSegmenterAnnotator:void runSegmentation(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.international.arabic.process.ArabicSegmenter:long segment(java.io.BufferedReader,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.arabic.process.ArabicSegmenter:double decode(edu.stanford.nlp.international.arabic.process.ArabicSegmenter,java.io.BufferedReader,java.io.PrintWriter,int)"
        ]
    },
    "edu.stanford.nlp.international.arabic.process.ArabicSegmenter:java.lang.String process(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.arabic.process.ArabicSegmenter:java.lang.Object process(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.international.arabic.process.ArabicSegmenter:java.util.List segment(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:void printFactorTable(java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction getObjectiveFunction(int[][][][],int[][])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:double[] trainWeights(int[][][][],int[][],edu.stanford.nlp.optimization.Evaluator[],int,double[][][][])",
            "edu.stanford.nlp.ie.crf.CRFClassifierWithLOP:double[] trainWeights(int[][][][],int[][],edu.stanford.nlp.optimization.Evaluator[],int,double[][][][])"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunctionWithDropout:void <init>(int[][][][],int[][],int,edu.stanford.nlp.util.Index,java.util.List,int[],java.lang.String,java.lang.String,double,double[][][][],double,double,int,boolean,double,int[][][][])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifierWithDropout:edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction getObjectiveFunction(int[][][][],int[][])"
        ]
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler:double sampleSequenceBackward(edu.stanford.nlp.sequences.SequenceModel,int[],double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:double sampleSequenceBackward(edu.stanford.nlp.sequences.SequenceModel,int[])"
        ]
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler:double samplePosition(edu.stanford.nlp.sequences.SequenceModel,int[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler$1:java.util.List process(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.SequenceGibbsSampler$1:java.lang.Object process(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler:double sampleSequenceRepeatedly(edu.stanford.nlp.sequences.SequenceModel,int[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:java.util.List collectSamples(edu.stanford.nlp.sequences.SequenceModel,int,int,int[])",
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:double sampleSequenceRepeatedly(edu.stanford.nlp.sequences.SequenceModel,int)"
        ]
    },
    "edu.stanford.nlp.pipeline.POSTaggerAnnotator:void <init>(java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.POSTaggerAnnotator:void <init>(boolean)"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotatorImplementations:edu.stanford.nlp.pipeline.Annotator posTagger(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorFactories$4:edu.stanford.nlp.pipeline.Annotator create()"
        ]
    },
    "edu.stanford.nlp.parser.nndep.DependencyParser:void train(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.nndep.DependencyParser:void train(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.sequences.ObjectBankWrapper$WrappedIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void makeAnswerArraysAndTagIndex(java.util.Collection)",
            "edu.stanford.nlp.ie.crf.CRFFeatureExporter:void printFeatures(java.lang.String,java.util.Collection)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteViterbiSearchGraph(java.lang.String,java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswersKBest(edu.stanford.nlp.objectbank.ObjectBank,int,java.io.PrintWriter,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List getCliqueTrees(java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void printFactorTableDocuments(edu.stanford.nlp.objectbank.ObjectBank)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void printFirstOrderProbsDocuments(edu.stanford.nlp.objectbank.ObjectBank)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List classifyToCharacterOffsets(java.lang.String)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void printProbsDocuments(edu.stanford.nlp.objectbank.ObjectBank)",
            "edu.stanford.nlp.ie.crf.CRFClassifierWithDropout:java.util.Collection loadAuxiliaryData(java.util.Collection,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.international.arabic.process.ArabicSegmenter:void evaluate(java.io.PrintWriter)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void makeAnswerArraysAndTagIndex(java.util.Collection)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void classifyAndWriteAnswers(java.util.Collection,java.util.List,java.io.PrintWriter,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswers(java.util.Collection,java.io.PrintWriter,edu.stanford.nlp.sequences.DocumentReaderAndWriter,boolean)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List segmentString(java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.lang.String classifyToString(java.lang.String,java.lang.String,boolean)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List classifyRaw(java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void printLabelInformation(java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void train(java.util.Collection,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.classify.Dataset getDataset(java.util.Collection,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.classify.Dataset getBiasedDataset(edu.stanford.nlp.objectbank.ObjectBank,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List documentsToDataAndLabelsList(java.util.Collection)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List classify(java.lang.String)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List classifyFile(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.objectbank.LineIterator:void setNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.objectbank.LineIterator:void <init>(java.io.Reader,java.util.function.Function)",
            "edu.stanford.nlp.objectbank.LineIterator:java.lang.Object next()"
        ]
    },
    "edu.stanford.nlp.international.arabic.process.IOBUtils:java.util.List StringToIOB(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.arabic.process.ArabicSegmenter:java.lang.String segmentString(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.lang.String semgrexFromGraph(edu.stanford.nlp.semgraph.SemanticGraph,boolean,boolean,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.SemanticGraphUtils:java.lang.String semgrexFromGraph(java.lang.Iterable,boolean,boolean,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.time.TimeFormatter$TimePatternExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void train(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void train(java.util.Collection,java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter getSegmenterDataFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)"
        ]
    },
    "edu.stanford.nlp.time.TimeExpressionExtractorImpl:java.util.List extractTimeExpressionCoreMaps(edu.stanford.nlp.util.CoreMap,java.lang.String,edu.stanford.nlp.time.SUTime$TimeIndex)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeAnnotator:java.util.List annotateSingleSentence(edu.stanford.nlp.util.CoreMap,java.lang.String,edu.stanford.nlp.time.SUTime$TimeIndex)",
            "edu.stanford.nlp.time.TimeExpressionExtractorImpl:java.util.List extractTimeExpressionCoreMaps(edu.stanford.nlp.util.CoreMap,java.lang.String)",
            "edu.stanford.nlp.time.TimeExpressionExtractorImpl:java.util.List extractTimeExpressionCoreMaps(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.time.TimeAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser loadModel(edu.stanford.nlp.parser.lexparser.Options,java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser loadModel()"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern:void <init>(java.lang.String,edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr,edu.stanford.nlp.ling.tokensregex.SequenceMatchAction)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequencePattern:void <init>(java.lang.String,edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr)",
            "edu.stanford.nlp.ling.tokensregex.TokenSequencePattern:void <init>(java.lang.String,edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr,edu.stanford.nlp.ling.tokensregex.SequenceMatchAction)",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern:edu.stanford.nlp.ling.tokensregex.SequencePattern compile(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String)",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern:edu.stanford.nlp.ling.tokensregex.SequencePattern transform(edu.stanford.nlp.ling.tokensregex.NodePatternTransformer)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$GRANDSOMETHING$1:void initialize()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.GraphRelation$SearchNodeIterator:void <init>()"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.util.List getIncomingEdgesSorted(edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem:void lambda$null$9(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.lang.String toEnUncollapsedSentenceString()"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.util.List getOutEdgesSorted(edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:java.util.Optional getValidChunk(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Set,java.util.Optional,boolean)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void process3WP(edu.stanford.nlp.semgraph.SemanticGraph,java.util.HashMap)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void getFeatures(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,boolean,java.util.Collection,edu.stanford.nlp.trees.GrammaticalRelation)",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void processComplex2WP(edu.stanford.nlp.semgraph.SemanticGraph,java.util.HashMap)",
            "edu.stanford.nlp.semgraph.SemanticGraphFormatter:void formatSGNodeMultiline(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,int)",
            "edu.stanford.nlp.naturalli.NaturalLogicAnnotator:edu.stanford.nlp.util.Pair getGeneralizedSubtreeSpan(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.util.Set)",
            "edu.stanford.nlp.semgraph.SemanticGraph:void toCompactStringHelper(edu.stanford.nlp.ling.IndexedWord,java.lang.StringBuilder,java.util.Set,boolean)",
            "edu.stanford.nlp.semgraph.SemanticGraphFormatter:void formatSGNodeOnelineHelper(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.ling.IndexedWord,java.lang.StringBuilder,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.stats.Counters:java.lang.String toSortedByKeysString(edu.stanford.nlp.stats.Counter,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.dep.DepPatternFactory:java.util.Set getContext(edu.stanford.nlp.patterns.DataInstance,int,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.Pattern:java.util.Set getContext(edu.stanford.nlp.patterns.PatternFactory$PatternType,edu.stanford.nlp.patterns.DataInstance,int,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.patterns.dep.DepPatternFactory:java.util.Map getPatternsForAllPhrases(edu.stanford.nlp.patterns.DataInstance,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.dep.DepPatternFactory:java.util.Map getPatternsAroundTokens(edu.stanford.nlp.patterns.DataInstance,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.trees.Treebanks:void lambda$main$256(edu.stanford.nlp.trees.TreeNormalizer,int,int,java.io.PrintWriter,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.DiskTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.trees.MemoryTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.trees.FilteringTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)"
        ]
    },
    "edu.stanford.nlp.trees.BobChrisTreeNormalizer:edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.Treebanks:void lambda$main$257(edu.stanford.nlp.trees.TreeNormalizer,java.io.PrintWriter,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.DiskTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.trees.MemoryTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.trees.FilteringTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)"
        ]
    },
    "edu.stanford.nlp.trees.international.french.FrenchXMLTreeReader:edu.stanford.nlp.trees.Tree readTree()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:edu.stanford.nlp.trees.Tree primeNextTree()",
            "edu.stanford.nlp.trees.international.french.FrenchXMLTreeReader:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader,java.lang.String)",
            "edu.stanford.nlp.trees.MemoryTreebank:void processFile(java.io.File)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonParser:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern parseOperation(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.spanish.SpanishTreeNormalizer:edu.stanford.nlp.trees.Tree expandConmigo(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.trees.DependencyTreeTransformer:void <clinit>()",
            "edu.stanford.nlp.trees.international.spanish.SpanishTreeNormalizer:java.util.List compilePatterns(edu.stanford.nlp.util.Pair[])",
            "edu.stanford.nlp.sentiment.ReadSentimentDataset:void <clinit>()",
            "edu.stanford.nlp.trees.QPTreeTransformer:void <clinit>()",
            "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern getTsurgeonOperationsFromReader(java.io.BufferedReader)",
            "edu.stanford.nlp.trees.EnglishPTBTreebankCorrector:void <init>()",
            "edu.stanford.nlp.trees.international.spanish.SpanishTreeNormalizer:void <clinit>()",
            "edu.stanford.nlp.trees.international.pennchinese.CTBErrorCorrectingTreeNormalizer:void <clinit>()",
            "edu.stanford.nlp.trees.international.spanish.SpanishTreeNormalizer:edu.stanford.nlp.trees.Tree expandCliticPronounsInner(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexPattern)",
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParserQuery:void <clinit>()",
            "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.CoordinationTransformer:void <clinit>()"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotatorFactories$17:java.lang.Object create()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.AnnotatorFactories$12:edu.stanford.nlp.pipeline.Annotator create()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorFactories$12:java.lang.Object create()",
            "edu.stanford.nlp.pipeline.AnnotatorPool:edu.stanford.nlp.pipeline.Annotator get(java.lang.String)",
            "edu.stanford.nlp.simple.Document$9:edu.stanford.nlp.pipeline.Annotator get()",
            "edu.stanford.nlp.simple.Document:java.util.Map coref(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.scoref.BestFirstCorefSystem:void <init>(java.util.Properties,java.lang.String,java.lang.String,int,int,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.scoref.StatisticalCorefSystem:edu.stanford.nlp.scoref.StatisticalCorefSystem fromProps(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.StatisticalCorefSystem:void main(java.lang.String[])",
            "edu.stanford.nlp.pipeline.CorefAnnotator:void <init>(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotatorImplementations:edu.stanford.nlp.pipeline.Annotator coref(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorFactories$13:edu.stanford.nlp.pipeline.Annotator create()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.CompositeTreeTransformer buildTrainTransformer(edu.stanford.nlp.parser.lexparser.Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.DVModelReranker$Query:void <init>(edu.stanford.nlp.parser.dvparser.DVModelReranker)",
            "edu.stanford.nlp.parser.dvparser.DVParser:edu.stanford.nlp.trees.TreeTransformer buildTrainTransformer(edu.stanford.nlp.parser.lexparser.Options)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void <init>(edu.stanford.nlp.tagger.maxent.TaggerConfig)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.util.Pair parseSequenceWithAction(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.TokenSequencePattern:edu.stanford.nlp.ling.tokensregex.TokenSequencePattern compile(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String)",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern:edu.stanford.nlp.ling.tokensregex.SequencePattern compile(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.objectbank.XMLBeginEndIterator:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.objectbank.XMLBeginEndIterator:void <init>(java.io.Reader,java.lang.String,java.util.function.Function,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.objectbank.XMLBeginEndIterator$XMLBeginEndIteratorFactory:java.util.Iterator getIterator(java.io.Reader)",
            "edu.stanford.nlp.objectbank.XMLBeginEndIterator:void <init>(java.io.Reader,java.lang.String,java.util.function.Function,boolean)",
            "edu.stanford.nlp.objectbank.XMLBeginEndIterator:void <init>(java.io.Reader,java.lang.String,boolean,boolean)"
        ]
    },
    "edu.stanford.nlp.objectbank.XMLBeginEndIterator:void <init>(java.io.Reader,java.lang.String,boolean,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.gui.PreferencesPanel:void access$200(edu.stanford.nlp.trees.tregex.gui.PreferencesPanel,java.lang.String,java.lang.Integer,java.awt.Color,java.awt.Color,java.awt.Color,java.lang.Integer,java.lang.Integer,boolean,boolean,edu.stanford.nlp.trees.HeadFinder,edu.stanford.nlp.trees.TreeReaderFactory,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.PreferencesPanel$1:void actionPerformed(java.awt.event.ActionEvent)"
        ]
    },
    "edu.stanford.nlp.util.logging.StanfordRedwoodConfiguration:void setup()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.semgrex.SemgrexPattern:edu.stanford.nlp.semgraph.semgrex.SemgrexPattern compile(java.lang.String,edu.stanford.nlp.semgraph.semgrex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.SemgrexPattern:edu.stanford.nlp.semgraph.semgrex.SemgrexPattern compile(java.lang.String)",
            "edu.stanford.nlp.patterns.ScorePhrases:void runParallelApplyPats(java.util.Map,java.lang.String,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.util.CollectionValuedMap,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.SemgrexParser:edu.stanford.nlp.semgraph.semgrex.SemgrexPattern ModRelation()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.SemgrexParser:edu.stanford.nlp.semgraph.semgrex.SemgrexPattern RelationConj()"
        ]
    },
    "edu.stanford.nlp.dcoref.Mention:boolean isListMemberOf(edu.stanford.nlp.dcoref.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.Rules:boolean entityIWithinI(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Rules:boolean entityIWithinI(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries,java.util.Set,edu.stanford.nlp.dcoref.Semantics)"
        ]
    },
    "edu.stanford.nlp.process.WordShapeClassifier:java.lang.String wordShape(java.lang.String,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.ExtractorWordShapeConjunction:java.lang.String extract(edu.stanford.nlp.tagger.maxent.History,edu.stanford.nlp.tagger.maxent.PairsHolder)",
            "edu.stanford.nlp.tagger.maxent.ExtractorWordShapeClassifier:java.lang.String extract(edu.stanford.nlp.tagger.maxent.History,edu.stanford.nlp.tagger.maxent.PairsHolder)",
            "edu.stanford.nlp.process.WordShapeClassifier:void main(java.lang.String[])",
            "edu.stanford.nlp.process.DistSimClassifier:java.lang.String distSimClass(java.lang.String)",
            "edu.stanford.nlp.patterns.ConstantsAndVariables:void addWordShapes(java.lang.String,java.util.Set)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:void makeDatum(java.lang.String,edu.stanford.nlp.classify.ColumnDataClassifier$Flags,java.lang.Object,java.lang.String)",
            "edu.stanford.nlp.ie.NERFeatureFactory:void initLexicon(edu.stanford.nlp.sequences.SeqClassifierFlags)",
            "edu.stanford.nlp.patterns.PhraseScorer:java.lang.String wordShape(java.lang.String)",
            "edu.stanford.nlp.ie.NERFeatureFactory:void distSimAnnotate(edu.stanford.nlp.util.PaddedList)",
            "edu.stanford.nlp.process.DistSimClassifier:void <init>(java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.wordseg.Gale2007ChineseSegmenterFeatureFactory:void createOutDict()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.wordseg.Gale2007ChineseSegmenterFeatureFactory:java.util.Collection featuresCpC(edu.stanford.nlp.util.PaddedList,int)"
        ]
    },
    "edu.stanford.nlp.wordseg.NonDict2:void <init>(edu.stanford.nlp.sequences.SeqClassifierFlags)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.wordseg.Gale2007ChineseSegmenterFeatureFactory:java.util.Collection featuresCpC(edu.stanford.nlp.util.PaddedList,int)",
            "edu.stanford.nlp.wordseg.ChineseSegmenterFeatureFactory:java.util.Collection featuresCpC(edu.stanford.nlp.util.PaddedList,int)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.TregexParser:edu.stanford.nlp.trees.tregex.TregexPattern Root()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.TregexPatternCompiler:edu.stanford.nlp.trees.tregex.TregexPattern compile(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$PartialTime:edu.stanford.nlp.time.SUTime$Range getRange(int,edu.stanford.nlp.time.SUTime$Duration)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Time mid()",
            "edu.stanford.nlp.time.SUTime$Temporal:edu.stanford.nlp.time.SUTime$Range getRange(int)",
            "edu.stanford.nlp.time.SUTime$InexactTime:edu.stanford.nlp.time.SUTime$Range getRange(int,edu.stanford.nlp.time.SUTime$Duration)",
            "edu.stanford.nlp.time.SUTime$CompositePartialTime:edu.stanford.nlp.time.SUTime$Range getRange(int,edu.stanford.nlp.time.SUTime$Duration)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Time mid()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$InexactTime:org.joda.time.Instant getJodaTimeInstant()",
            "edu.stanford.nlp.time.SUTime$InexactTime:org.joda.time.Partial getJodaTimePartial()",
            "edu.stanford.nlp.time.SUTime$InexactTime:void <init>(edu.stanford.nlp.time.SUTime$Range)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$CompositePartialTime:edu.stanford.nlp.time.SUTime$Range getIntersectedRange(edu.stanford.nlp.time.SUTime$CompositePartialTime,edu.stanford.nlp.time.SUTime$Range,edu.stanford.nlp.time.SUTime$Duration)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$CompositePartialTime:edu.stanford.nlp.time.SUTime$Range getRange(int,edu.stanford.nlp.time.SUTime$Duration)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Time subtract(edu.stanford.nlp.time.SUTime$Duration)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$PartialTime:edu.stanford.nlp.time.SUTime$Range getRange(int,edu.stanford.nlp.time.SUTime$Duration)",
            "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Time mid()",
            "edu.stanford.nlp.time.SUTime$Duration:edu.stanford.nlp.time.SUTime$Time toTime(edu.stanford.nlp.time.SUTime$Time,int)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Duration:edu.stanford.nlp.time.SUTime$Time toTime(edu.stanford.nlp.time.SUTime$Time,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$TemporalOp$5:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$Duration:edu.stanford.nlp.time.SUTime$Time toTime(edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$3:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$2:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Time offset(edu.stanford.nlp.time.SUTime$Duration,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$OrdinalTime:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$9:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Range add(edu.stanford.nlp.time.SUTime$Duration,int)",
            "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Range offset(edu.stanford.nlp.time.SUTime$Duration,int,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$18:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)"
        ]
    },
    "edu.stanford.nlp.pipeline.RegexNERAnnotator:void <init>(java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.RegexNERAnnotator:void <init>(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotatorImplementations:edu.stanford.nlp.pipeline.Annotator gender(java.util.Properties,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorFactories$9:edu.stanford.nlp.pipeline.Annotator create()"
        ]
    },
    "edu.stanford.nlp.pipeline.GenderAnnotator:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$DocumentIterator:void <init>(java.lang.String,edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader:edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$CoNLLDocument getNextDocument()"
        ]
    },
    "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$DocumentIterator:edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$CoNLLDocument next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader:edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$CoNLLDocument getNextDocument()",
            "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$DocumentIterator:java.lang.Object next()"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotatorFactories$2:edu.stanford.nlp.pipeline.Annotator create()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorPool:edu.stanford.nlp.pipeline.Annotator get(java.lang.String)",
            "edu.stanford.nlp.pipeline.AnnotatorFactories$2:java.lang.Object create()"
        ]
    },
    "edu.stanford.nlp.util.CollectionValuedMap:java.lang.Object clone()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.dep.DepPattern:edu.stanford.nlp.util.CollectionValuedMap getRelevantWords()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.surface.SurfacePattern:edu.stanford.nlp.util.CollectionValuedMap getRelevantWords()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$DocumentIterator:void <init>(java.lang.String,edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader:edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$Document getNextDocument()"
        ]
    },
    "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$DocumentIterator:edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$Document next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$DocumentIterator:java.lang.Object next()",
            "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader:edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$Document getNextDocument()"
        ]
    },
    "edu.stanford.nlp.pipeline.TokensRegexNERAnnotator:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Document:edu.stanford.nlp.pipeline.Annotator getOrCreate(edu.stanford.nlp.pipeline.AnnotatorFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runNER(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runParse(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runOpenie(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runRegexner(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runPOS(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runDepparse(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runNatlog(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runLemma(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotatorFactories$7:java.lang.Object create()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Document$4:edu.stanford.nlp.pipeline.Annotator get()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Document$4:java.lang.Object get()"
        ]
    },
    "edu.stanford.nlp.process.DocumentPreprocessor$XMLIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.nndep.DependencyParser:void parseTextFile(java.io.BufferedReader,java.io.PrintWriter)",
            "edu.stanford.nlp.parser.lexparser.ParseFiles:void parseFiles(java.lang.String[],int,boolean,edu.stanford.nlp.process.TokenizerFactory,java.lang.String,java.lang.String,java.util.function.Function,java.lang.String)",
            "edu.stanford.nlp.patterns.surface.AnnotatedTextReader:java.util.List parseFile(java.io.BufferedReader,java.util.Set,java.util.Map,boolean,java.lang.String)",
            "edu.stanford.nlp.process.DocumentPreprocessor:void main(java.lang.String[])",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger(java.lang.Iterable,java.io.BufferedWriter,edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle)",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:java.util.List tokenizeText(java.io.Reader,edu.stanford.nlp.process.TokenizerFactory)",
            "edu.stanford.nlp.parser.nndep.demo.DependencyParserDemo:void main(java.lang.String[])",
            "edu.stanford.nlp.sentiment.BuildBinarizedDataset:void main(java.lang.String[])",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTaggerStdin(java.io.BufferedReader,java.io.BufferedWriter,edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:java.util.List tokenizeText(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger$TaggerWrapper:java.lang.String apply(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:java.lang.String tagString(java.lang.String)",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger$TaggerWrapper:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.optimization.SGDWithAdaGradAndFOBOS:double[] minimize(edu.stanford.nlp.optimization.Function,double,double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:double[] trainWeights(int[][][][],int[][],edu.stanford.nlp.optimization.Evaluator[],int,double[][][][])",
            "edu.stanford.nlp.ie.crf.CRFClassifierNonlinear:double[] trainWeightsUsingNonLinearCRF(edu.stanford.nlp.optimization.AbstractCachingDiffFunction,edu.stanford.nlp.optimization.Evaluator[])",
            "edu.stanford.nlp.ie.crf.CRFClassifierWithLOP:double[] trainWeights(int[][][][],int[][],edu.stanford.nlp.optimization.Evaluator[],int,double[][][][])"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraphFormatter:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.semgrex.NodePattern:boolean nodeAttrMatch(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void goToNextNodeMatch()"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.lang.String toString(edu.stanford.nlp.semgraph.SemanticGraph$OutputFormat)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ParserAnnotatorUtils:void fillInParseAnnotations(boolean,boolean,edu.stanford.nlp.trees.GrammaticalStructureFactory,edu.stanford.nlp.util.CoreMap,java.util.List,edu.stanford.nlp.trees.GrammaticalStructure$Extras)",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.lang.String toString(edu.stanford.nlp.ling.CoreLabel$OutputFormat)"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass$1:java.util.Map apply(edu.stanford.nlp.ling.CoreLabel)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass$1:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.pipeline.JSONOutputter$JSONWriter:void routeObject(int,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.JSONOutputter$JSONWriter:void routeObject(int,java.lang.Object)",
            "edu.stanford.nlp.pipeline.JSONOutputter$JSONWriter:void lambda$object$178(edu.stanford.nlp.util.Pointer,int,java.lang.String,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.parser.metrics.TreeSpanScoring:int countSpanErrors(edu.stanford.nlp.trees.TreebankLanguagePack,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.DVParserCostAndGradient:double getMargin(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.Tree:java.util.Set constituents()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.metrics.Evalb:java.util.Set makeObjects(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.Evalb$CBEval:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)",
            "edu.stanford.nlp.parser.metrics.EvalbByCat:java.util.Set makeObjects(edu.stanford.nlp.trees.Tree)",
            "edu.stanford.nlp.parser.metrics.AbstractEval:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter,double)"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure$FromDependenciesFactory:edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure build(java.util.List,edu.stanford.nlp.trees.TreeGraphNode)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure$FromDependenciesFactory:edu.stanford.nlp.trees.GrammaticalStructure build(java.util.List,edu.stanford.nlp.trees.TreeGraphNode)"
        ]
    },
    "edu.stanford.nlp.parser.nndep.DependencyParser:edu.stanford.nlp.trees.GrammaticalStructure makeGrammaticalStructure(java.util.List,edu.stanford.nlp.trees.TreeGraphNode)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.nndep.DependencyParser:edu.stanford.nlp.trees.GrammaticalStructure predict(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.trees.EnglishGrammaticalStructure$FromDependenciesFactory:edu.stanford.nlp.trees.EnglishGrammaticalStructure build(java.util.List,edu.stanford.nlp.trees.TreeGraphNode)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure$FromDependenciesFactory:edu.stanford.nlp.trees.GrammaticalStructure build(java.util.List,edu.stanford.nlp.trees.TreeGraphNode)"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure$FromDependenciesFactory:edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure build(java.util.List,edu.stanford.nlp.trees.TreeGraphNode)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure$FromDependenciesFactory:edu.stanford.nlp.trees.GrammaticalStructure build(java.util.List,edu.stanford.nlp.trees.TreeGraphNode)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset,double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier trainClassifierWithInitialWeights(edu.stanford.nlp.classify.GeneralDataset,double[][])"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory:double[][] trainWeights(edu.stanford.nlp.classify.GeneralDataset,double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void retrain(edu.stanford.nlp.objectbank.ObjectBank,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:double[][] trainWeights(edu.stanford.nlp.classify.GeneralDataset)"
        ]
    },
    "edu.stanford.nlp.classify.AbstractLinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.classify.Classifier makeClassifier(edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.classify.AbstractLinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier trainClassifier(java.util.Collection)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:void trainMaxEnt(edu.stanford.nlp.classify.Dataset)",
            "edu.stanford.nlp.classify.AbstractLinearClassifierFactory:edu.stanford.nlp.classify.Classifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.TregexGUI:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.TimeExpressionExtractorImpl:void <init>(java.lang.String,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeAnnotator:void <init>(java.lang.String,java.util.Properties,boolean)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expression CondGroup(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expression CondExpression(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.AssignableExpression AssignableExpression(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$Rule AssignmentRule(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.patterns.ConstantsAndVariables:edu.stanford.nlp.util.Pair getEditDistanceFromThisClass(java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ConstantsAndVariables:edu.stanford.nlp.util.Pair getEditDistanceFromOtherClasses(java.lang.String,java.lang.String,int)",
            "edu.stanford.nlp.patterns.ConstantsAndVariables:double getEditDistanceScoresThisClass(java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.patterns.ConstantsAndVariables:java.lang.String getLearnedWordsAsJson()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.util.Pair getPrecisionRecall(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void evaluate(java.util.Map)"
        ]
    },
    "edu.stanford.nlp.classify.Classifier:double evaluateAccuracy(edu.stanford.nlp.classify.GeneralDataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.scoref.EvalUtils:double getCombinedF1(double,java.util.List,java.util.List,java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.Clusterer$State:double getFinalCost(edu.stanford.nlp.scoref.Clusterer$ClustererClassifier)"
        ]
    },
    "edu.stanford.nlp.naturalli.Util:boolean nerOverlap(java.util.List,edu.stanford.nlp.ie.machinereading.structure.Span,edu.stanford.nlp.ie.machinereading.structure.Span)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ClauseSplitter:boolean lambda$null$108(edu.stanford.nlp.naturalli.OpenIE,java.util.Collection,java.util.List,edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$Featurizer,java.util.Optional,edu.stanford.nlp.classify.WeightedDataset,edu.stanford.nlp.util.Triple)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:java.lang.Object extract(java.util.Iterator,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.Env:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr getSequencePatternExpr(java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr SeqVar(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.TokenSequencePattern:edu.stanford.nlp.ling.tokensregex.TokenSequencePattern compile(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.TokenSequencePattern:edu.stanford.nlp.ling.tokensregex.TokenSequencePattern compile(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.patterns.PatternFactory:void setUp(java.util.Properties,edu.stanford.nlp.patterns.PatternFactory$PatternType,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void setUpConstructor(java.util.Map,java.util.Map,boolean,java.util.Map,java.util.Map,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.Env:edu.stanford.nlp.ling.tokensregex.NodePattern getNodePattern(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.NodePattern CoreMapVarNodePattern(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.parser.server.LexicalizedParserServer:void handleTokenize(java.lang.String,java.io.OutputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.server.LexicalizedParserServer:void processRequest(java.net.Socket)"
        ]
    },
    "edu.stanford.nlp.parser.common.ParserGrammar:java.util.List lemmatize(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.server.LexicalizedParserServer:void handleLemma(java.lang.String,java.io.OutputStream)"
        ]
    },
    "edu.stanford.nlp.stats.AccuracyStats:void <init>(edu.stanford.nlp.classify.ProbabilisticClassifier,edu.stanford.nlp.classify.GeneralDataset,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:java.util.List extractCoreMapsToList(java.util.List,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:java.util.List extractCoreMaps(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.MatchedExpression$SingleAnnotationExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression$SingleAnnotationExtractor:java.lang.Object apply(java.lang.Object)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$BasicSequenceExtractRule:boolean extract(java.util.List,java.util.List)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationMatchedFilter:boolean test(edu.stanford.nlp.ling.tokensregex.MatchedExpression)"
        ]
    },
    "edu.stanford.nlp.pipeline.TokensRegexNERAnnotator:void annotateMatched(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.TokensRegexNERAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List getNonOverlapping(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List findNonOverlapping(java.util.List,int,int,java.util.Comparator)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List findNonOverlapping(java.util.List,int,int)",
            "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List segment(java.util.List,int,int,java.util.Comparator)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List segment(java.util.List,int,int,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List segment(java.util.List,java.util.function.Function)",
            "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List segment(java.util.List,int,int)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$13:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void goToNextTreeNodeMatch()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryPrecedes:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryDominates:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryFollows:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.Relation$4:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void goToNextTreeNodeMatch()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$18:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void goToNextTreeNodeMatch()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$20:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void goToNextTreeNodeMatch()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$Heads:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.Relation$5:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void goToNextTreeNodeMatch()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$8:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void goToNextTreeNodeMatch()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$6:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void goToNextTreeNodeMatch()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$25:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void goToNextTreeNodeMatch()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$IthChildOf:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.Relation$16:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void goToNextTreeNodeMatch()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$22:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void goToNextTreeNodeMatch()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$HeadedBy:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.Relation$11:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void goToNextTreeNodeMatch()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$9:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void goToNextTreeNodeMatch()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$HasIthChild:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.Relation$24:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void goToNextTreeNodeMatch()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$14:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void goToNextTreeNodeMatch()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$12:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void goToNextTreeNodeMatch()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$21:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void goToNextTreeNodeMatch()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$17:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void goToNextTreeNodeMatch()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$ImmediatelyHeadedBy:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.Relation$10:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void goToNextTreeNodeMatch()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$23:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void goToNextTreeNodeMatch()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryIsDominatedBy:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.Relation$1:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void goToNextTreeNodeMatch()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$7:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void goToNextTreeNodeMatch()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$19:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void goToNextTreeNodeMatch()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.Relation$ImmediatelyHeads:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.Relation$15:java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.tregex.TregexMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher:void goToNextTreeNodeMatch()"
        ]
    },
    "edu.stanford.nlp.parser.server.LexicalizedParserServer:void processRequest(java.net.Socket)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.server.LexicalizedParserServer:void listen()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams:java.util.List readGrammaticalStructureFromFile(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams:java.util.List readGrammaticalStructureFromFile(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.metrics.BestOfTopKEval:void evaluate(java.util.List,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.metrics.UnlabeledAttachmentEval:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void processResults(edu.stanford.nlp.parser.common.ParserQuery,edu.stanford.nlp.trees.Tree,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,edu.stanford.nlp.trees.TreePrint)",
            "edu.stanford.nlp.parser.metrics.UnlabeledAttachmentEval:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.metrics.Evalb:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void processResults(edu.stanford.nlp.parser.common.ParserQuery,edu.stanford.nlp.trees.Tree,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,edu.stanford.nlp.trees.TreePrint)",
            "edu.stanford.nlp.parser.metrics.BestOfTopKEval:void evaluate(java.util.List,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)",
            "edu.stanford.nlp.parser.metrics.Evalb:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.metrics.AbstractEval:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams:void dependencyObjectifyHelper(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.HeadFinder,java.util.Collection,edu.stanford.nlp.trees.DependencyTyper)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams:java.util.Collection dependencyObjectify(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.HeadFinder,edu.stanford.nlp.trees.TreeTransformer,edu.stanford.nlp.trees.DependencyTyper)",
            "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams:void dependencyObjectifyHelper(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.HeadFinder,java.util.Collection,edu.stanford.nlp.trees.DependencyTyper)"
        ]
    },
    "edu.stanford.nlp.pipeline.CharniakParserAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runNER(java.util.Properties)",
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runParse(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runOpenie(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runRegexner(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runPOS(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runDepparse(java.util.Properties)",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runNatlog(java.util.Properties)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runLemma(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.trees.international.arabic.ArabicTreeNormalizer:void <init>(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.arabic.ArabicTreeNormalizer:void <init>()"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$Util:void exit()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.objectbank.DelimitRegExIterator:void setNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.objectbank.DelimitRegExIterator:void <init>(java.io.Reader,java.lang.String,java.util.function.Function)",
            "edu.stanford.nlp.objectbank.DelimitRegExIterator:java.lang.Object next()"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher:java.util.Collection getTriggeredPatterns(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher:java.util.List findNonOverlapping(java.util.List,java.util.Comparator)",
            "edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher:java.util.List find(java.util.List,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$FindType)",
            "edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher:java.util.List findNonOverlappingMaxScore(java.util.List,java.util.function.Function)",
            "edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher:java.lang.Iterable findAllNonOverlappingMatchesPerPattern(java.util.List)"
        ]
    },
    "edu.stanford.nlp.optimization.CGMinimizer:double[] lineMinimize(edu.stanford.nlp.optimization.DiffFunction,double[],double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.CGMinimizer:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[],int)"
        ]
    },
    "edu.stanford.nlp.optimization.SGDToQNMinimizer:double[] minimize(edu.stanford.nlp.optimization.Function,double,double[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.optimization.SGDToQNMinimizer:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.SGDToQNMinimizer:double[] minimize(edu.stanford.nlp.optimization.Function,double,double[])"
        ]
    },
    "edu.stanford.nlp.optimization.QNMinimizer:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.QNMinimizer:double[] minimize(edu.stanford.nlp.optimization.Function,double,double[])"
        ]
    },
    "edu.stanford.nlp.optimization.QNMinimizer:double[] minimize(edu.stanford.nlp.optimization.Function,double,double[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.HybridMinimizer:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[],int)"
        ]
    },
    "edu.stanford.nlp.optimization.CGMinimizer:double[] minimize(edu.stanford.nlp.optimization.Function,double,double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.Classifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset,float[],edu.stanford.nlp.classify.LogPrior)",
            "edu.stanford.nlp.maxent.CGRunner:void solveCG()",
            "edu.stanford.nlp.classify.LinearClassifierFactory:double[][] trainWeights(edu.stanford.nlp.classify.GeneralDataset,double[],boolean,edu.stanford.nlp.optimization.Minimizer)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:double[][] adaptWeights(double[][],edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.Classifier trainClassifier(java.lang.Iterable)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:double[][] trainWeightsSemiSup(edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.classify.GeneralDataset,double[][],double[])",
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier trainSemiSupGE(edu.stanford.nlp.classify.GeneralDataset,java.util.List,java.util.List,double)"
        ]
    },
    "edu.stanford.nlp.optimization.QNMinimizer$Record:void start(double,double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.optimization.SMDMinimizer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.Classifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset,float[],edu.stanford.nlp.classify.LogPrior)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.optimization.StochasticMinimizer:double tuneDouble(edu.stanford.nlp.optimization.Function,double[],long,edu.stanford.nlp.optimization.StochasticMinimizer$PropertySetter,double,double,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.StochasticMinimizer:double tuneDouble(edu.stanford.nlp.optimization.Function,double[],long,edu.stanford.nlp.optimization.StochasticMinimizer$PropertySetter,double,double)"
        ]
    },
    "edu.stanford.nlp.optimization.StochasticMinimizer:int tuneBatch(edu.stanford.nlp.optimization.Function,double[],long,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.SMDMinimizer:edu.stanford.nlp.util.Pair tune(edu.stanford.nlp.optimization.Function,double[],long)",
            "edu.stanford.nlp.optimization.ScaledSGDMinimizer:edu.stanford.nlp.util.Pair tune(edu.stanford.nlp.optimization.Function,double[],long)",
            "edu.stanford.nlp.optimization.InefficientSGDMinimizer:edu.stanford.nlp.util.Pair tune(edu.stanford.nlp.optimization.Function,double[],long,double,double)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory:double[][] adaptWeights(double[][],edu.stanford.nlp.classify.GeneralDataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifier:void adaptWeights(edu.stanford.nlp.classify.Dataset,edu.stanford.nlp.classify.LinearClassifierFactory)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory:double[][] trainWeightsSemiSup(edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.classify.GeneralDataset,double[][],double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.Classifier trainClassifierSemiSup(edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.classify.GeneralDataset,double[][],double[])"
        ]
    },
    "edu.stanford.nlp.optimization.HybridMinimizer:double[] minimize(edu.stanford.nlp.optimization.Function,double,double[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.optimization.HybridMinimizer:double[] minimize(edu.stanford.nlp.optimization.DiffFunction,double,double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.HybridMinimizer:double[] minimize(edu.stanford.nlp.optimization.Function,double,double[])"
        ]
    },
    "edu.stanford.nlp.optimization.InefficientSGDMinimizer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.optimization.StochasticMinimizer:edu.stanford.nlp.util.Pair tune(edu.stanford.nlp.optimization.Function,double[],long,java.util.List,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.optimization.ScaledSGDMinimizer:double tuneFixedGain(edu.stanford.nlp.optimization.Function,double[],long,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.TestSentence:java.util.ArrayList tagSentence(java.util.List,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:java.util.List tagSentence(java.util.List)",
            "edu.stanford.nlp.tagger.maxent.TestClassifier$TestSentenceProcessor:edu.stanford.nlp.tagger.maxent.TestSentence process(java.util.List)",
            "edu.stanford.nlp.tagger.maxent.TestClassifier:void test()",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:java.util.List apply(java.util.List)",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:java.lang.String tagTokenizedString(java.lang.String)",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:java.util.List process(java.util.List)",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:java.util.List tagSentence(java.util.List,boolean)"
        ]
    },
    "edu.stanford.nlp.simple.Sentence:java.lang.String nerTag(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:java.util.List mentions()",
            "edu.stanford.nlp.simple.Sentence:java.util.List mentions(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.simple.Sentence:java.lang.String posTag(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.SentenceAlgorithms:java.util.List keyphraseSpans()"
        ]
    },
    "edu.stanford.nlp.simple.Sentence:java.util.Optional incomingDependencyLabel(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.SentenceAlgorithms:java.util.List dependencyPathBetween(int,int,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.simple.Sentence:java.util.Optional governor(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.SentenceAlgorithms:java.util.List dependencyPathBetween(int,int,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.SentenceAlgorithms:java.util.List dependencyPathBetween(int,int)"
        ]
    },
    "edu.stanford.nlp.simple.SentenceAlgorithms:int headOfSpan(edu.stanford.nlp.ie.machinereading.structure.Span)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Sentence:java.util.List operatorsNonempty()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Sentence:java.lang.String lemma(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.SentenceAlgorithms:java.util.List keyphraseSpans()"
        ]
    },
    "edu.stanford.nlp.pipeline.RelationExtractorAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.pipeline.RelationExtractorAnnotator:void main(java.lang.String[])",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Mention:boolean isMemberOfSameList(edu.stanford.nlp.hcoref.data.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.Mention:boolean isMemberOfSameList(edu.stanford.nlp.dcoref.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.SpanishTreebankParserParams:void display()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.gui.ScrollableTreeJPanel:void paintComponent(java.awt.Graphics)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.metrics.Evalb$CBEval:void evaluate(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void processResults(edu.stanford.nlp.parser.common.ParserQuery,edu.stanford.nlp.trees.Tree,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,edu.stanford.nlp.trees.TreePrint)",
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.SemgrexPattern:edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher matcher(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.semgrex.Alignment,edu.stanford.nlp.semgraph.SemanticGraph,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.semgrex.SemgrexPattern:edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher matcher(edu.stanford.nlp.semgraph.SemanticGraph,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.dep.ExtractPhraseFromPattern:java.util.Set getSemGrexPatternNodes(edu.stanford.nlp.semgraph.SemanticGraph,java.util.List,java.util.Collection,java.util.Collection,edu.stanford.nlp.semgraph.semgrex.SemgrexPattern,boolean,java.util.Collection,boolean,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.SemgrexPattern:edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher matcher(edu.stanford.nlp.semgraph.SemanticGraph,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.pipeline.CoreNLPProtos$SentenceFragment toProto(edu.stanford.nlp.naturalli.SentenceFragment)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.pipeline.CoreNLPProtos$Sentence$Builder toProtoBuilder(edu.stanford.nlp.util.CoreMap,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.SemgrexPattern:edu.stanford.nlp.semgraph.semgrex.SemgrexMatcher matcher(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.semgraph.semgrex.Alignment,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.Rules:boolean entityAttributesAgree(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries,java.util.Set,edu.stanford.nlp.dcoref.Semantics)",
            "edu.stanford.nlp.dcoref.Rules:boolean entityIsPredicateNominatives(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention)",
            "edu.stanford.nlp.dcoref.Rules:boolean entityIsRoleAppositive(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.dcoref.Rules:boolean entityIsApposition(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention)"
        ]
    },
    "edu.stanford.nlp.process.WordToSentenceProcessor:void <init>(java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.WordsToSentencesAnnotator:edu.stanford.nlp.pipeline.WordsToSentencesAnnotator newlineSplitter(boolean,java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.process.WordToSentenceProcessor:void <init>(java.lang.String,java.util.Set,java.util.Set,edu.stanford.nlp.process.WordToSentenceProcessor$NewlineIsSentenceBreak,edu.stanford.nlp.ling.tokensregex.SequencePattern,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.WordsToSentencesAnnotator:void <init>(boolean,java.lang.String,java.util.Set,java.util.Set,java.lang.String,java.lang.String,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.process.WordToSentenceProcessor:void <init>(java.lang.String,java.util.Set,java.util.Set,edu.stanford.nlp.process.WordToSentenceProcessor$NewlineIsSentenceBreak)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.WordsToSentencesAnnotator:void <init>(boolean,java.lang.String,java.util.Set,java.util.Set,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.process.WordToSentenceProcessor:void <init>(java.lang.String,edu.stanford.nlp.process.WordToSentenceProcessor$NewlineIsSentenceBreak,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.WordToSentenceProcessor:void <init>(edu.stanford.nlp.process.WordToSentenceProcessor$NewlineIsSentenceBreak)",
            "edu.stanford.nlp.process.WordToSentenceProcessor:void <init>(boolean)"
        ]
    },
    "edu.stanford.nlp.hcoref.Rules:boolean entityAttributesAgree(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.Rules:boolean entityAttributesAgree(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,java.util.Locale)",
            "edu.stanford.nlp.hcoref.Rules:boolean entityIsApposition(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)",
            "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Set)",
            "edu.stanford.nlp.hcoref.sieve.RFSieve:edu.stanford.nlp.ling.RVFDatum extractDatum(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,int,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.String)",
            "edu.stanford.nlp.hcoref.Rules:boolean entityIsPredicateNominatives(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)",
            "edu.stanford.nlp.hcoref.Rules:boolean entityIsRoleAppositive(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries)",
            "edu.stanford.nlp.scoref.FeatureExtractor:edu.stanford.nlp.stats.Counter getFeatures(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.ComplexNodePattern$AttributesEqualMatchChecker:boolean matches(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.pipeline.CoreNLPProtos$Sentence$Builder toProtoBuilder(edu.stanford.nlp.util.CoreMap,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.pipeline.CoreNLPProtos$Sentence$Builder toProtoBuilder(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.pipeline.CoreNLPProtos$Sentence toProto(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP:java.lang.String ensurePrerequisiteAnnotators(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLPServer$CoreNLPHandler:java.util.Properties getProperties(com.sun.net.httpserver.HttpExchange)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$FunctionCallExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AssignmentRule:void evaluate(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionNodePattern:boolean match(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$44:edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env,java.util.List)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$MethodCallExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequenceMatchResultExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Value attemptTypeConversion(edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue,edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$VarAssignmentExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$WrappedExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringMatchResultExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(java.util.regex.MatchResult)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$ConditionalExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$FunctionCallExpression:edu.stanford.nlp.ling.tokensregex.types.Expression simplify(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$IfExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.NodePattern$ConjNodePattern:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLPClient:void <init>(java.util.Properties,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLPClient:void <init>(java.util.Properties,java.lang.String,int,int)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLPClient:void <init>(java.util.Properties,java.lang.String,int)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLPClient:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$MethodCallExpression:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Pair:void save(java.io.DataOutputStream)",
            "edu.stanford.nlp.patterns.ConstantsAndVariables$ScorePhraseMeasures:int compareTo(java.lang.Object)",
            "edu.stanford.nlp.patterns.surface.Token:boolean equals(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.Match:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.matcher.MultiMatch:java.lang.String toString()"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$FunctionCallExpression:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Pair:void save(java.io.DataOutputStream)",
            "edu.stanford.nlp.patterns.ConstantsAndVariables$ScorePhraseMeasures:int compareTo(java.lang.Object)",
            "edu.stanford.nlp.patterns.surface.Token:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionNodePattern:java.lang.String toString()"
        ]
    },
    "edu.stanford.nlp.pipeline.CoNLLOutputter:java.lang.String line(int,edu.stanford.nlp.ling.CoreLabel,int,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.CoNLLOutputter:void print(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream,edu.stanford.nlp.pipeline.AnnotationOutputter$Options)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.NodePattern$DisjNodePattern:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$NodePatternExpr:java.lang.String toString()"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.BasicRelationFeatureFactory:java.lang.String generalizedDependencyPath(java.util.List,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.BasicRelationFeatureFactory:void addDependencyPathFeatures(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.ie.machinereading.structure.RelationMention,edu.stanford.nlp.ie.machinereading.structure.EntityMention,edu.stanford.nlp.ie.machinereading.structure.EntityMention,java.util.List,java.util.List,java.util.logging.Logger)"
        ]
    },
    "edu.stanford.nlp.patterns.dep.DataInstanceDep:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.SentenceAlgorithms:java.lang.String lambda$keyphrases$11(java.util.function.Function,edu.stanford.nlp.ie.machinereading.structure.Span)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.EntityBIO:java.lang.String toString(edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.EntityCachingAbstractSequencePriorBIO:java.lang.String toString(int)",
            "edu.stanford.nlp.ie.EntityCachingAbstractSequencePriorBIO:void updateSequenceElement(int[],int,int)",
            "edu.stanford.nlp.ie.EntityCachingAbstractSequencePriorBIO:java.lang.String toString()"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.TrieMap:java.lang.String toFormattedString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.StringUtils:java.util.Properties argsToPropertiesWithResolve(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.GoogleNGramsSQLBacked:void main(java.lang.String[])",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void main(java.lang.String[])",
            "edu.stanford.nlp.patterns.surface.LearnImportantFeatures:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.util.StringUtils:java.lang.String join(java.lang.Iterable)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.pipeline.CoreNLPProtos$Document toProto(edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.util.AcronymMatcher:boolean isFancyAcronymImpl(java.lang.String,java.util.List)",
            "edu.stanford.nlp.hcoref.data.Mention:java.lang.String getPattern(java.util.List)",
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.pipeline.CoreNLPProtos$Token toProto(edu.stanford.nlp.ling.CoreLabel)",
            "edu.stanford.nlp.process.PTBTokenizer:java.lang.String ptb2Text(java.util.List)",
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.pipeline.CoreNLPProtos$Sentence toProto(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.patterns.surface.SurfacePatternFactory:java.util.Set getContext(java.util.List,int,java.util.Set)",
            "edu.stanford.nlp.dcoref.Mention:java.lang.String getPattern(java.util.List)"
        ]
    },
    "edu.stanford.nlp.util.StringUtils:java.util.Collection getNgramsFromTokens(java.util.List,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult:java.lang.String group(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult:edu.stanford.nlp.ling.tokensregex.SequenceMatchResult$MatchedGroupInfo groupInfo(int)",
            "edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult:java.lang.String group(java.lang.String)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$RegexMatchVarExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult:java.lang.String group()"
        ]
    },
    "edu.stanford.nlp.sequences.TrueCasingForNISTDocumentReaderAndWriter:void printAnswers(java.util.List,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern$AndPatternExpr:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.domains.roth.RothCONLL04Reader:edu.stanford.nlp.pipeline.Annotation readSentence(edu.stanford.nlp.pipeline.Annotation,java.lang.String,java.util.Iterator)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.roth.RothCONLL04Reader:edu.stanford.nlp.pipeline.Annotation read(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern$OrPatternExpr:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Pair:void save(java.io.DataOutputStream)",
            "edu.stanford.nlp.patterns.ConstantsAndVariables$ScorePhraseMeasures:int compareTo(java.lang.Object)",
            "edu.stanford.nlp.patterns.surface.Token:boolean equals(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.naturalli.NaturalLogicAnnotator:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.StringUtils:java.util.Collection getNgrams(java.util.List,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void setUpConstructor(java.util.Map,java.util.Map,boolean,java.util.Map,java.util.Map,java.util.Map)",
            "edu.stanford.nlp.util.StringUtils:java.util.Collection getNgramsString(java.lang.String,int,int)"
        ]
    },
    "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void runAndScoreCorefDist(java.lang.String,java.util.Properties,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void optimizeSieveOrdering(edu.stanford.nlp.dcoref.MentionExtractor,java.util.Properties,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void writeColumnOutputSents(java.util.Map,java.io.BufferedWriter,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void writeColumnOutput(java.lang.String,boolean,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.structure.AnnotationUtils:java.lang.String sentenceToString(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.structure.AnnotationUtils:java.lang.String datasetToString(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.patterns.surface.PatternToken:java.lang.String getTokenStr(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.surface.SurfacePattern:java.lang.String toString(java.util.List)",
            "edu.stanford.nlp.patterns.surface.PatternToken:int hashCode()",
            "edu.stanford.nlp.patterns.surface.SurfacePattern:java.lang.String toString(java.lang.String,java.lang.String,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.PhraseTable:boolean addPhrase(java.util.List,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.PhraseTable:boolean addPhrase(java.util.List,java.lang.String)",
            "edu.stanford.nlp.ling.tokensregex.MultiCoreMapNodePattern$StringSequenceAnnotationPattern:void <init>(java.lang.Class,java.util.Map,boolean)"
        ]
    },
    "edu.stanford.nlp.util.ConfusionMatrix$Contingency:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.ConfusionMatrix:java.lang.String printTable()"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.MultiMatch:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Pair:void save(java.io.DataOutputStream)",
            "edu.stanford.nlp.patterns.ConstantsAndVariables$ScorePhraseMeasures:int compareTo(java.lang.Object)",
            "edu.stanford.nlp.ling.tokensregex.matcher.ApproxMatch:java.lang.String toString()",
            "edu.stanford.nlp.patterns.surface.Token:boolean equals(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.ValueFunctions:java.lang.String join(java.lang.Object[],java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.ValueFunctions:java.lang.String access$000(java.lang.Object[],java.lang.String)"
        ]
    },
    "edu.stanford.nlp.naturalli.Util:void annotate(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.pipeline.AnnotationPipeline)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:void processTimebankCsvSent(edu.stanford.nlp.pipeline.AnnotationPipeline,edu.stanford.nlp.time.SUTimeMain$TimebankSent,java.io.PrintWriter,edu.stanford.nlp.time.SUTimeMain$EvalStats)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:java.lang.String ensurePrerequisiteAnnotators(java.lang.String[])",
            "edu.stanford.nlp.time.SUTimeMain:void processTempEval2Doc(edu.stanford.nlp.pipeline.AnnotationPipeline,edu.stanford.nlp.pipeline.Annotation,java.util.Map,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter)",
            "edu.stanford.nlp.patterns.surface.SurfacePattern:java.lang.String toStringSimple()",
            "edu.stanford.nlp.trees.EnglishPatterns:void <clinit>()",
            "edu.stanford.nlp.util.ArrayStringFilter:java.lang.String toString()",
            "edu.stanford.nlp.util.StringUtils:java.lang.String join(java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$NamedValueFunction:java.lang.String getParamDesc(java.lang.String,int)",
            "edu.stanford.nlp.patterns.surface.SurfacePattern:java.lang.String toString(java.util.List)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void labelWords(java.lang.String,java.util.Map,java.util.Collection,java.lang.String,edu.stanford.nlp.util.CollectionValuedMap)",
            "edu.stanford.nlp.sentiment.RNNOptions:java.lang.String toString()",
            "edu.stanford.nlp.ling.tokensregex.matcher.ApproxMatch:java.lang.String toString()",
            "edu.stanford.nlp.ling.tokensregex.types.ValueFunctions:java.lang.String join(java.lang.Object[],java.lang.String)",
            "edu.stanford.nlp.patterns.surface.SurfacePattern:java.lang.String getPrevContextStr()",
            "edu.stanford.nlp.pipeline.TokensRegexNERAnnotator$Entry:java.lang.String getTypeDescription()",
            "edu.stanford.nlp.patterns.surface.SurfacePattern:java.lang.String toString(java.lang.String,java.lang.String,java.util.List)",
            "edu.stanford.nlp.process.Americanize:void <clinit>()",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void serializeTextClassifier(java.io.PrintWriter)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass$LabelWithSeedWords:edu.stanford.nlp.util.Pair call()",
            "edu.stanford.nlp.patterns.surface.SurfacePattern:java.lang.String getNextContextStr()",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void optimizeSieveOrdering(edu.stanford.nlp.dcoref.MentionExtractor,java.util.Properties,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.time.SUTimeMain:edu.stanford.nlp.util.CoreMap wordsToSentence(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:void processTempEval2Tab(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.BasicRelationFeatureFactory:java.lang.String dependencyPath(java.util.List,edu.stanford.nlp.ling.IndexedWord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.BasicRelationFeatureFactory:void addDependencyPathFeatures(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.ie.machinereading.structure.RelationMention,edu.stanford.nlp.ie.machinereading.structure.EntityMention,edu.stanford.nlp.ie.machinereading.structure.EntityMention,java.util.List,java.util.List,java.util.logging.Logger)"
        ]
    },
    "edu.stanford.nlp.pipeline.Requirement:java.lang.String getMissingRequirement(java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern$SequencePatternExpr:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Pair:void save(java.io.DataOutputStream)",
            "edu.stanford.nlp.patterns.ConstantsAndVariables$ScorePhraseMeasures:int compareTo(java.lang.Object)",
            "edu.stanford.nlp.patterns.surface.Token:boolean equals(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$ExplicitTemporalSet:java.lang.String toFormattedString(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters:void printCounterComparison(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter,java.io.PrintStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:void printCounterComparison(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern$AttributesEqualMatchChecker:boolean matches(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$BackRefState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult$MatchedGroup,int)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.dvparser.CacheParseHypotheses:byte[] convertToBytes(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.CacheParseHypotheses:java.util.IdentityHashMap convertToBytes(java.util.IdentityHashMap)",
            "edu.stanford.nlp.parser.dvparser.CacheParseHypotheses$CacheProcessor:edu.stanford.nlp.util.Pair process(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.sentiment.SentimentUtils:java.util.List filterUnknownRoots(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sentiment.Evaluate:void main(java.lang.String[])",
            "edu.stanford.nlp.sentiment.SentimentPipeline:java.util.List getAnnotations(edu.stanford.nlp.pipeline.StanfordCoreNLP,edu.stanford.nlp.sentiment.SentimentPipeline$Input,java.lang.String,boolean)",
            "edu.stanford.nlp.sentiment.SentimentTraining:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.neural.NeuralUtils:org.ejml.simple.SimpleMatrix convertTextMatrix(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.neural.NeuralUtils:org.ejml.simple.SimpleMatrix loadTextMatrix(java.lang.String)",
            "edu.stanford.nlp.neural.NeuralUtils:org.ejml.simple.SimpleMatrix loadTextMatrix(java.io.File)"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper$GsIterator:edu.stanford.nlp.trees.GrammaticalStructure next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper$GsIterator:java.lang.Object next()"
        ]
    },
    "edu.stanford.nlp.pipeline.XMLOutputter:void xmlPrint(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream,edu.stanford.nlp.pipeline.StanfordCoreNLP)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void xmlPrint(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream)"
        ]
    },
    "edu.stanford.nlp.pipeline.CoNLLOutputter:void conllPrint(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream,edu.stanford.nlp.pipeline.StanfordCoreNLP)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void conllPrint(edu.stanford.nlp.pipeline.Annotation,java.io.Writer)"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP:void shell(edu.stanford.nlp.pipeline.StanfordCoreNLP)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void run()"
        ]
    },
    "edu.stanford.nlp.pipeline.JSONOutputter:void jsonPrint(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream,edu.stanford.nlp.pipeline.StanfordCoreNLP)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void jsonPrint(edu.stanford.nlp.pipeline.Annotation,java.io.Writer)"
        ]
    },
    "edu.stanford.nlp.pipeline.CoNLLUOutputter:void conllUPrint(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream,edu.stanford.nlp.pipeline.StanfordCoreNLP)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.XMLOutputter:void xmlPrint(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.CoNLLUOutputter:void conllUPrint(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.JSONOutputter:java.lang.String jsonPrint(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.JSONOutputter:void jsonPrint(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.CoNLLOutputter:void conllPrint(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:edu.stanford.nlp.trees.Tree parse(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor createExtractorFromFile(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.GenericTimeExpressionPatterns:edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor createExtractor()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractorImpl:void init(edu.stanford.nlp.time.Options)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor createExtractorFromFiles(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.TokensRegexAnnotator:void <init>(java.lang.String,java.util.Properties)",
            "edu.stanford.nlp.pipeline.TokensRegexAnnotator:void <init>(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.sentiment.SentimentCostAndGradient$ScoringProcessor:java.lang.Object process(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.XMLOutputter:void xmlPrint(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream,edu.stanford.nlp.pipeline.AnnotationOutputter$Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.AnnotationOutputter:java.lang.String print(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.pipeline.AnnotationOutputter$Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotationOutputter:java.lang.String print(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.pipeline.StanfordCoreNLP)",
            "edu.stanford.nlp.pipeline.AnnotationOutputter:java.lang.String print(edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.simple.Document:java.lang.String xmlMinified(java.util.function.Function[])",
            "edu.stanford.nlp.simple.Document:java.lang.String jsonMinified(java.util.function.Function[])"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP:void prettyPrint(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void shell(edu.stanford.nlp.pipeline.StanfordCoreNLP)"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotatorImplementations:edu.stanford.nlp.pipeline.Annotator relations(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorFactories$15:edu.stanford.nlp.pipeline.Annotator create()"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.AnnotatorFactories$14:edu.stanford.nlp.pipeline.Annotator create()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorFactories$14:java.lang.Object create()",
            "edu.stanford.nlp.pipeline.AnnotatorPool:edu.stanford.nlp.pipeline.Annotator get(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:java.lang.String dependenciesToCoNLLXString(edu.stanford.nlp.trees.GrammaticalStructure,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLPServer$TokensRegexHandler:java.lang.String lambda$handle$27(com.sun.net.httpserver.HttpExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLPServer$SemgrexHandler:java.lang.String lambda$handle$34(com.sun.net.httpserver.HttpExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$ADJACENT_NODE:java.util.Iterator searchNodeIterator(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void resetChildIter()"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$LIMITED_GRANDPARENT:java.util.Iterator searchNodeIterator(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void resetChildIter()"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$DEPENDENT:java.util.Iterator searchNodeIterator(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void resetChildIter()"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$SIBLING_RELATION:java.util.Iterator searchNodeIterator(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void resetChildIter()"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$1:java.util.Iterator searchNodeIterator(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void resetChildIter()"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$ALIGNMENT:java.util.Iterator searchNodeIterator(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void resetChildIter()"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$GRANDSOMETHING:java.util.Iterator searchNodeIterator(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void resetChildIter()"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$LIMITED_GRANDKID:java.util.Iterator searchNodeIterator(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void resetChildIter()"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$3:java.util.Iterator searchNodeIterator(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void resetChildIter()"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$EQUALS:java.util.Iterator searchNodeIterator(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void resetChildIter()"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.GraphRelation$GOVERNER:java.util.Iterator searchNodeIterator(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.NodePattern$NodeMatcher:void resetChildIter()"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Mention:edu.stanford.nlp.ling.IndexedWord getHeadParent()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Mention:java.lang.String getRelation()",
            "edu.stanford.nlp.hcoref.data.Mention:int getModal(edu.stanford.nlp.hcoref.data.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.parser.charniak.CharniakScoredParsesReaderWriter$ScoredParsesIterator:java.util.List next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.charniak.CharniakScoredParsesReaderWriter$ScoredParsesIterator:java.lang.Object next()"
        ]
    },
    "edu.stanford.nlp.parser.charniak.CharniakScoredParsesReaderWriter$ScoredParsesIterator:void <init>(java.lang.String,java.io.BufferedReader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.charniak.CharniakScoredParsesReaderWriter$ScoredParsesIterator:void <init>(java.lang.String,java.io.BufferedReader,edu.stanford.nlp.parser.charniak.CharniakScoredParsesReaderWriter$1)",
            "edu.stanford.nlp.parser.charniak.CharniakScoredParsesReaderWriter$ScoredParsesIterator:void <init>(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotatorFactories$18:edu.stanford.nlp.pipeline.Annotator create()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorFactories$18:java.lang.Object create()",
            "edu.stanford.nlp.pipeline.AnnotatorPool:edu.stanford.nlp.pipeline.Annotator get(java.lang.String)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.pipeline.Annotator getOrCreate(edu.stanford.nlp.pipeline.AnnotatorFactory)",
            "edu.stanford.nlp.simple.Document$6:edu.stanford.nlp.pipeline.Annotator get()"
        ]
    },
    "edu.stanford.nlp.pipeline.TokensRegexAnnotator:void <init>(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.AnnotatorFactories$11:edu.stanford.nlp.pipeline.Annotator create()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorFactories$11:java.lang.Object create()",
            "edu.stanford.nlp.pipeline.AnnotatorPool:edu.stanford.nlp.pipeline.Annotator get(java.lang.String)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.pipeline.Annotator getOrCreate(edu.stanford.nlp.pipeline.AnnotatorFactory)",
            "edu.stanford.nlp.simple.Document$5:edu.stanford.nlp.pipeline.Annotator get()"
        ]
    },
    "edu.stanford.nlp.trees.international.negra.NegraPennTokenizer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.process.DocumentPreprocessor$PlainTextIterator:void primeNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.DocumentPreprocessor$PlainTextIterator:java.util.List next()",
            "edu.stanford.nlp.process.DocumentPreprocessor$PlainTextIterator:boolean hasNext()"
        ]
    },
    "edu.stanford.nlp.process.WordSegmentingTokenizer:edu.stanford.nlp.ling.HasWord getNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.WordSegmentingTokenizer:java.lang.Object getNext()"
        ]
    },
    "edu.stanford.nlp.trees.PennTreeReader:void <init>(java.io.Reader,edu.stanford.nlp.trees.TreeFactory,edu.stanford.nlp.trees.TreeNormalizer,edu.stanford.nlp.process.Tokenizer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.PennTreeReader:void <init>(java.io.Reader,edu.stanford.nlp.trees.TreeFactory,edu.stanford.nlp.trees.TreeNormalizer)",
            "edu.stanford.nlp.trees.PennTreeReader:void <init>(java.io.Reader,edu.stanford.nlp.trees.TreeFactory)",
            "edu.stanford.nlp.trees.international.arabic.ArabicTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)",
            "edu.stanford.nlp.trees.PennTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)",
            "edu.stanford.nlp.trees.international.spanish.SpanishTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)",
            "edu.stanford.nlp.trees.international.negra.NegraPennTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)",
            "edu.stanford.nlp.trees.international.pennchinese.FragDiscardingPennTreeReader:void <init>(java.io.Reader,edu.stanford.nlp.trees.TreeFactory,edu.stanford.nlp.trees.TreeNormalizer,edu.stanford.nlp.process.Tokenizer)",
            "edu.stanford.nlp.trees.international.hebrew.HebrewTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)",
            "edu.stanford.nlp.trees.international.pennchinese.CTBTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)",
            "edu.stanford.nlp.trees.international.french.FrenchTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)"
        ]
    },
    "edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter:java.util.Iterator getIterator(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.objectbank.ObjectBank$OBIterator:void setNextObject()"
        ]
    },
    "edu.stanford.nlp.process.AbstractTokenizer:java.util.List tokenize()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.arabic.process.ArabicDocumentReaderAndWriter:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.RobustTokenizer:void main(java.lang.String[])",
            "edu.stanford.nlp.pipeline.TokenizerAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:java.lang.String[] ptbTokenize(java.lang.String)",
            "edu.stanford.nlp.international.arabic.process.ArabicDocumentReaderAndWriter$1:java.util.List apply(java.lang.String)",
            "edu.stanford.nlp.parser.common.ParserGrammar:java.util.List tokenize(java.lang.String)",
            "edu.stanford.nlp.ling.BasicDocument:void parse(java.lang.String)",
            "edu.stanford.nlp.trees.GrammaticalStructure$LazyLoadTreesByParsing$1:edu.stanford.nlp.trees.Tree next()",
            "edu.stanford.nlp.dcoref.MUCMentionExtractor:edu.stanford.nlp.dcoref.Document nextDoc()",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:void main(java.lang.String[])",
            "edu.stanford.nlp.international.arabic.process.ArabicSegmenter:java.lang.String segmentString(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.CHTBTokenizer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.arabic.ArabicTreebankTokenizer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.process.LexerTokenizer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.process.WhitespaceTokenizer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.pascal.ISODateInstance:void tokenizeDate(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.pascal.ISODateInstance:boolean extractFields(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.process.PTBTokenizer:int tokReader(java.io.Reader,java.io.BufferedWriter,java.util.regex.Pattern,java.lang.String,boolean,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.PTBTokenizer:void tok(java.util.List,java.util.List,java.lang.String,java.util.regex.Pattern,java.lang.String,boolean,boolean,boolean)"
        ]
    },
    "edu.stanford.nlp.trees.PennTreeReader:edu.stanford.nlp.trees.Tree getTreeFromInputStream()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.PennTreeReader:edu.stanford.nlp.trees.Tree readTree()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.gui.DisplayMatchesPanel:void setMatch(edu.stanford.nlp.trees.tregex.gui.TreeFromFile,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.DisplayMatchesPanel:void valueChanged(javax.swing.event.ListSelectionEvent)"
        ]
    },
    "edu.stanford.nlp.parser.dvparser.CacheParseHypotheses$DecompressionProcessor:java.lang.Object process(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:boolean matches()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.ComplexNodePattern$SequenceRegexPattern:java.lang.Object matchWithResult(java.util.List)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequencePatternExtractRule:java.lang.Object apply(java.util.List)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLPServer$TokensRegexHandler:java.lang.Boolean lambda$null$21(edu.stanford.nlp.ling.tokensregex.TokenSequencePattern,edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.ling.tokensregex.ComplexNodePattern$SequenceRegexPattern:boolean match(java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:boolean find0(int,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:boolean find(int,boolean)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.MatchedExpression$SingleAnnotationExtractor:void annotate(edu.stanford.nlp.ling.tokensregex.MatchedExpression,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression:boolean extractAnnotation(java.util.List,edu.stanford.nlp.pipeline.CoreMapAggregator)",
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression:boolean extractAnnotation(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.pipeline.CoreMapAggregator)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationMatchedFilter:boolean test(edu.stanford.nlp.ling.tokensregex.MatchedExpression)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationMatchedFilter:boolean test(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.util.Execution:void fillOptions(java.lang.Class[],java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.OpenIE:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.util.Execution:void fillOptions(java.lang.Object[],java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Execution:void fillOptions(java.lang.Object,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.util.Execution:void fillOptions(java.lang.Class,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ConstantsAndVariables:void setUp(java.util.Properties)",
            "edu.stanford.nlp.patterns.SentenceIndex:edu.stanford.nlp.patterns.SentenceIndex loadIndex(java.lang.Class,java.util.Properties,java.util.Set,java.lang.String,java.util.function.Function)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void setUpConstructor(java.util.Map,java.util.Map,boolean,java.util.Map,java.util.Map,java.util.Map)",
            "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:edu.stanford.nlp.stats.Counter convert2OneDim(java.lang.String,java.util.function.Function,java.util.Set,edu.stanford.nlp.stats.TwoDimensionalCounter,boolean,boolean,edu.stanford.nlp.stats.Counter,boolean)",
            "edu.stanford.nlp.patterns.PatternFactory:void setUp(java.util.Properties,edu.stanford.nlp.patterns.PatternFactory$PatternType,java.util.Set)",
            "edu.stanford.nlp.util.GoogleNGramsSQLBacked:void main(java.lang.String[])",
            "edu.stanford.nlp.patterns.surface.SurfacePatternFactory:void setUp(java.util.Properties)",
            "edu.stanford.nlp.patterns.surface.CreatePatterns:void <init>(java.util.Properties,edu.stanford.nlp.patterns.ConstantsAndVariables)",
            "edu.stanford.nlp.patterns.SentenceIndex:edu.stanford.nlp.patterns.SentenceIndex createIndex(java.lang.Class,java.util.Map,java.util.Properties,java.util.Set,java.lang.String,java.util.function.Function)",
            "edu.stanford.nlp.patterns.dep.DepPatternFactory:void setUp(java.util.Properties)",
            "edu.stanford.nlp.patterns.surface.PatternsForEachTokenDB:void <init>(java.util.Properties,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP:void processFiles(java.util.Collection,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void processFiles(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLPClient:void shell(edu.stanford.nlp.pipeline.StanfordCoreNLPClient)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLPClient:void run()"
        ]
    },
    "edu.stanford.nlp.io.IOUtils:void console(java.util.function.Consumer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.AnnotationPipeline:void annotate(java.lang.Iterable,java.util.function.Consumer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.AnnotationPipeline:void annotate(java.lang.Iterable,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotationPipeline:void annotate(java.lang.Iterable)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$Util:void threadAndRun(java.lang.Iterable)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:java.util.List collapse(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:void appendRules(java.util.List)"
        ]
    },
    "edu.stanford.nlp.classify.AbstractLinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier trainClassifier(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.AbstractLinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier trainClassifier(java.lang.ref.Reference)"
        ]
    },
    "edu.stanford.nlp.classify.Dataset:edu.stanford.nlp.classify.Dataset readSVMLightFormat(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.util.Pair readDataset(java.lang.String,boolean)"
        ]
    },
    "edu.stanford.nlp.classify.Dataset:edu.stanford.nlp.classify.Dataset readSVMLightFormat(java.lang.String,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.Dataset:edu.stanford.nlp.classify.Dataset readSVMLightFormat(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.pipeline.ChineseSegmenterAnnotator:void runSegmentation(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ChineseSegmenterAnnotator:void doOneSentence(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.international.arabic.process.ArabicSegmenter:double decode(edu.stanford.nlp.international.arabic.process.ArabicSegmenter,java.io.BufferedReader,java.io.PrintWriter,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.international.arabic.process.ArabicSegmenter:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.international.arabic.process.ArabicSegmenter:java.lang.Object process(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler:double sampleSequenceBackward(edu.stanford.nlp.sequences.SequenceModel,int[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler$1:java.lang.Object process(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler:java.util.List collectSamples(edu.stanford.nlp.sequences.SequenceModel,int,int,int[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:int[] findBestUsingSampling(edu.stanford.nlp.sequences.SequenceModel,int,int,int[])",
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:java.util.List collectSamples(edu.stanford.nlp.sequences.SequenceModel,int,int)"
        ]
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler:double sampleSequenceRepeatedly(edu.stanford.nlp.sequences.SequenceModel,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.POSTaggerAnnotator:void <init>(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.POSTaggerAnnotator:void <init>()",
            "edu.stanford.nlp.time.SUTimeMain:edu.stanford.nlp.pipeline.AnnotationPipeline getPipeline(java.util.Properties,boolean)"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotatorFactories$4:edu.stanford.nlp.pipeline.Annotator create()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorPool:edu.stanford.nlp.pipeline.Annotator get(java.lang.String)",
            "edu.stanford.nlp.pipeline.AnnotatorFactories$4:java.lang.Object create()",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.pipeline.Annotator getOrCreate(edu.stanford.nlp.pipeline.AnnotatorFactory)",
            "edu.stanford.nlp.simple.Document$2:edu.stanford.nlp.pipeline.Annotator get()"
        ]
    },
    "edu.stanford.nlp.parser.nndep.DependencyParser:void train(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.nndep.DependencyParser:void train(java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List classifyToCharacterOffsets(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFClassifierWithDropout:java.util.Collection loadAuxiliaryData(java.util.Collection,edu.stanford.nlp.sequences.DocumentReaderAndWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void train(java.util.Collection,edu.stanford.nlp.sequences.DocumentReaderAndWriter)"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List classifyRaw(java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List classify(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List classifyFile(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.objectbank.LineIterator:void <init>(java.io.Reader,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.objectbank.LineIterator:void <init>(java.io.Reader)",
            "edu.stanford.nlp.objectbank.LineIterator$LineIteratorFactory:java.util.Iterator getIterator(java.io.Reader)"
        ]
    },
    "edu.stanford.nlp.objectbank.LineIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.objectbank.ObjectBank$OBIterator:void setNextObject()",
            "edu.stanford.nlp.sequences.TrueCasingForNISTDocumentReaderAndWriter:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void train(java.util.Collection,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.TimeAnnotator:java.util.List annotateSingleSentence(edu.stanford.nlp.util.CoreMap,java.lang.String,edu.stanford.nlp.time.SUTime$TimeIndex)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern:void <init>(java.lang.String,edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequencePattern:void <init>(edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr)",
            "edu.stanford.nlp.ling.tokensregex.TokenSequencePattern:void <init>(java.lang.String,edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.TokenSequencePattern:void <init>(java.lang.String,edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr,edu.stanford.nlp.ling.tokensregex.SequenceMatchAction)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.TokenSequencePattern:edu.stanford.nlp.ling.tokensregex.TokenSequencePattern compile(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern:edu.stanford.nlp.ling.tokensregex.SequencePattern compile(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequencePatternExtractRule:void <init>(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern:edu.stanford.nlp.ling.tokensregex.SequencePattern transform(edu.stanford.nlp.ling.tokensregex.NodePatternTransformer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.dep.DepPatternFactory:java.util.Map getPatternsAroundTokens(edu.stanford.nlp.patterns.DataInstance,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.PatternFactory:java.util.Map getPatternsAroundTokens(edu.stanford.nlp.patterns.PatternFactory$PatternType,edu.stanford.nlp.patterns.DataInstance,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.trees.DependencyTreeTransformer:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.spanish.SpanishTreeNormalizer:java.util.List compilePatterns(edu.stanford.nlp.util.Pair[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.spanish.SpanishTreeNormalizer:void <clinit>()"
        ]
    },
    "edu.stanford.nlp.sentiment.ReadSentimentDataset:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.QPTreeTransformer:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern getTsurgeonOperationsFromReader(java.io.BufferedReader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.gui.InputPanel$3:void run()",
            "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:edu.stanford.nlp.util.Pair getOperationFromReader(java.io.BufferedReader,edu.stanford.nlp.trees.tregex.TregexPatternCompiler)"
        ]
    },
    "edu.stanford.nlp.trees.international.spanish.SpanishTreeNormalizer:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.pennchinese.CTBErrorCorrectingTreeNormalizer:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParserQuery:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.CoordinationTransformer:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.AnnotatorFactories$12:java.lang.Object create()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Document$9:edu.stanford.nlp.pipeline.Annotator get()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Document$9:java.lang.Object get()"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotatorFactories$13:edu.stanford.nlp.pipeline.Annotator create()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorFactories$13:java.lang.Object create()",
            "edu.stanford.nlp.pipeline.AnnotatorPool:edu.stanford.nlp.pipeline.Annotator get(java.lang.String)",
            "edu.stanford.nlp.simple.Document:java.util.Map coref(java.util.Properties)",
            "edu.stanford.nlp.simple.Document$10:edu.stanford.nlp.pipeline.Annotator get()"
        ]
    },
    "edu.stanford.nlp.parser.dvparser.DVModelReranker$Query:void <init>(edu.stanford.nlp.parser.dvparser.DVModelReranker)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.DVModelReranker:edu.stanford.nlp.parser.dvparser.DVModelReranker$Query process(java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.dvparser.DVParser:edu.stanford.nlp.trees.TreeTransformer buildTrainTransformer(edu.stanford.nlp.parser.lexparser.Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.CacheParseHypotheses:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.dvparser.DVParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.TokenSequencePattern:edu.stanford.nlp.ling.tokensregex.TokenSequencePattern compile(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.TokensRegexNERAnnotator:edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher createPatternMatcher(java.util.Map)",
            "edu.stanford.nlp.ie.NumberNormalizer:void <clinit>()",
            "edu.stanford.nlp.patterns.ScorePhrases:void runParallelApplyPats(java.util.Map,java.lang.String,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.util.CollectionValuedMap,java.util.Set)",
            "edu.stanford.nlp.ling.tokensregex.TokenSequencePattern:edu.stanford.nlp.ling.tokensregex.TokenSequencePattern compile(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.objectbank.XMLBeginEndIterator$XMLBeginEndIteratorFactory:java.util.Iterator getIterator(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.objectbank.XMLBeginEndIterator:void <init>(java.io.Reader,java.lang.String,java.util.function.Function,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.objectbank.XMLBeginEndIterator:void <init>(java.io.Reader,java.lang.String)",
            "edu.stanford.nlp.objectbank.XMLBeginEndIterator:void <init>(java.io.Reader,java.lang.String,boolean)"
        ]
    },
    "edu.stanford.nlp.objectbank.XMLBeginEndIterator:void <init>(java.io.Reader,java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.semgraph.semgrex.SemgrexPattern:edu.stanford.nlp.semgraph.semgrex.SemgrexPattern compile(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.NaturalLogicAnnotator$1:void <init>()",
            "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void <clinit>()",
            "edu.stanford.nlp.naturalli.OpenIE:void <clinit>()",
            "edu.stanford.nlp.hcoref.data.Mention:edu.stanford.nlp.util.Pair findDependentVerb(edu.stanford.nlp.hcoref.data.Mention)",
            "edu.stanford.nlp.semgraph.semgrex.SemgrexPattern:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void <clinit>()",
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter$1:void <init>(edu.stanford.nlp.naturalli.RelationTripleSegmenter)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLPServer$SemgrexHandler:java.lang.String lambda$handle$34(com.sun.net.httpserver.HttpExchange)",
            "edu.stanford.nlp.naturalli.NaturalLogicAnnotator:void <clinit>()",
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter$2:void <init>(edu.stanford.nlp.naturalli.RelationTripleSegmenter)",
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter$4:void <init>(edu.stanford.nlp.naturalli.RelationTripleSegmenter,boolean)",
            "edu.stanford.nlp.dcoref.Mention:edu.stanford.nlp.util.Pair findDependentVerb(edu.stanford.nlp.dcoref.Mention)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.SemgrexParser:edu.stanford.nlp.semgraph.semgrex.SemgrexPattern RelationConj()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.SemgrexParser:edu.stanford.nlp.semgraph.semgrex.SemgrexPattern RelationDisj()"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.ExtractorWordShapeConjunction:java.lang.String extract(edu.stanford.nlp.tagger.maxent.History,edu.stanford.nlp.tagger.maxent.PairsHolder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.ExtractorWordShapeClassifier:java.lang.String extract(edu.stanford.nlp.tagger.maxent.History,edu.stanford.nlp.tagger.maxent.PairsHolder)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.process.WordShapeClassifier:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.ConstantsAndVariables:void addWordShapes(java.lang.String,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.PhraseScorer:java.lang.String wordShape(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.PhraseScorer:double getWordShapeScore(java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.TregexPatternCompiler:edu.stanford.nlp.trees.tregex.TregexPattern compile(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalRelation:void <init>(edu.stanford.nlp.international.Language,java.lang.String,java.lang.String,edu.stanford.nlp.trees.GrammaticalRelation,java.lang.String,edu.stanford.nlp.trees.tregex.TregexPatternCompiler,java.lang.String[],java.lang.String)",
            "edu.stanford.nlp.trees.tregex.TregexPattern:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.EnglishPTBTreebankCorrector:void <init>()",
            "edu.stanford.nlp.trees.tregex.TregexPattern:edu.stanford.nlp.trees.tregex.TregexPattern safeCompile(java.lang.String,boolean)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:edu.stanford.nlp.util.Pair getOperationFromReader(java.io.BufferedReader,edu.stanford.nlp.trees.tregex.TregexPatternCompiler)",
            "edu.stanford.nlp.trees.DateTreeTransformer:void <clinit>()",
            "edu.stanford.nlp.parser.lexparser.TregexPoweredTreebankParserParams:void compileAnnotations(edu.stanford.nlp.trees.HeadFinder)",
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:void initializeAnnotationPatterns()",
            "edu.stanford.nlp.trees.tregex.TregexPattern:edu.stanford.nlp.trees.tregex.TregexPattern compile(java.lang.String)",
            "edu.stanford.nlp.trees.tregex.gui.InputPanel:edu.stanford.nlp.trees.tregex.gui.InputPanel$TRegexGUITreeVisitor getMatchTreeVisitor(java.lang.String,java.lang.Thread)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Temporal:edu.stanford.nlp.time.SUTime$Range getRange(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Temporal:edu.stanford.nlp.time.SUTime$Range getRange()"
        ]
    },
    "edu.stanford.nlp.time.SUTime$InexactTime:edu.stanford.nlp.time.SUTime$Range getRange(int,edu.stanford.nlp.time.SUTime$Duration)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Time mid()",
            "edu.stanford.nlp.time.SUTime$Temporal:edu.stanford.nlp.time.SUTime$Range getRange(int)",
            "edu.stanford.nlp.time.SUTime$InexactTime:edu.stanford.nlp.time.SUTime$Range getRange(int,edu.stanford.nlp.time.SUTime$Duration)",
            "edu.stanford.nlp.time.SUTime$CompositePartialTime:edu.stanford.nlp.time.SUTime$Range getRange(int,edu.stanford.nlp.time.SUTime$Duration)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$CompositePartialTime:edu.stanford.nlp.time.SUTime$Range getRange(int,edu.stanford.nlp.time.SUTime$Duration)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Time mid()",
            "edu.stanford.nlp.time.SUTime$Temporal:edu.stanford.nlp.time.SUTime$Range getRange(int)",
            "edu.stanford.nlp.time.SUTime$InexactTime:edu.stanford.nlp.time.SUTime$Range getRange(int,edu.stanford.nlp.time.SUTime$Duration)",
            "edu.stanford.nlp.time.SUTime$CompositePartialTime:edu.stanford.nlp.time.SUTime$Range getRange(int,edu.stanford.nlp.time.SUTime$Duration)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$InexactTime:org.joda.time.Instant getJodaTimeInstant()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$InexactTime:org.joda.time.Instant getJodaTimeInstant()",
            "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Time closest(edu.stanford.nlp.time.SUTime$Time,edu.stanford.nlp.time.SUTime$Time[])",
            "edu.stanford.nlp.time.SUTime$Time:int compareTo(edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$Duration:edu.stanford.nlp.time.SUTime$Time toTime(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$Range:org.joda.time.Interval getJodaTimeInterval()",
            "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Duration difference(edu.stanford.nlp.time.SUTime$Time,edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$DurationWithFields:edu.stanford.nlp.time.SUTime$Duration resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$Time:boolean isComparable(edu.stanford.nlp.time.SUTime$Time)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$InexactTime:org.joda.time.Partial getJodaTimePartial()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Duration:edu.stanford.nlp.time.SUTime$Time toTime(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.JollyDayHolidays$JollyHoliday:edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$CompositePartialTime:edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$PartialTime:edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$InexactTime:org.joda.time.Partial getJodaTimePartial()",
            "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Duration getGranularity()",
            "edu.stanford.nlp.time.SUTime$CompositePartialTime:org.joda.time.Instant getJodaTimeInstant()"
        ]
    },
    "edu.stanford.nlp.time.SUTime$InexactTime:void <init>(edu.stanford.nlp.time.SUTime$Range)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime:void <clinit>()"
        ]
    },
    "edu.stanford.nlp.time.SUTime$TemporalOp$5:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$RelativeTime:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Duration:edu.stanford.nlp.time.SUTime$Time toTime(edu.stanford.nlp.time.SUTime$Time)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.SUTime$TemporalOp$3:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$RelativeTime:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$TemporalOp$2:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$RelativeTime:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$OrdinalTime:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Temporal:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$4:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$5:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Range resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$InexactTime:edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$PeriodicTemporalSet:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$RelativeTime:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$PartialTime:edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$3:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$2:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.TimeExpressionExtractorImpl:void resolveTimeExpression(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.time.TimeExpression,edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$1:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$TemporalOp$9:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$RelativeTime:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Range add(edu.stanford.nlp.time.SUTime$Duration,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Range subtract(edu.stanford.nlp.time.SUTime$Duration,int)",
            "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Range add(edu.stanford.nlp.time.SUTime$Duration)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Range offset(edu.stanford.nlp.time.SUTime$Duration,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Range offset(edu.stanford.nlp.time.SUTime$Duration,int)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$TemporalOp$18:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$RelativeTime:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal)"
        ]
    },
    "edu.stanford.nlp.pipeline.RegexNERAnnotator:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.AnnotatorFactories$9:edu.stanford.nlp.pipeline.Annotator create()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorPool:edu.stanford.nlp.pipeline.Annotator get(java.lang.String)",
            "edu.stanford.nlp.pipeline.AnnotatorFactories$9:java.lang.Object create()"
        ]
    },
    "edu.stanford.nlp.hcoref.docreader.CoNLLDocumentReader$DocumentIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.AnnotatorFactories$2:java.lang.Object create()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader:edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$Document getNextDocument()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.CoNLLMentionExtractor:edu.stanford.nlp.dcoref.Document nextDoc()",
            "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$DocumentIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Document$4:java.lang.Object get()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runRegexner(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger$TaggerWrapper:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.TransformXML$SAXInterface:void processText(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass$1:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.InvertedIndexByTokens:void add(java.util.List,java.lang.String,boolean)"
        ]
    },
    "edu.stanford.nlp.pipeline.JSONOutputter$JSONWriter:void lambda$object$178(edu.stanford.nlp.util.Pointer,int,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.JSONOutputter:void lambda$null$172(java.util.Map,edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.pipeline.JSONOutputter$Writer)",
            "edu.stanford.nlp.pipeline.JSONOutputter:void lambda$print$173(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.pipeline.AnnotationOutputter$Options,edu.stanford.nlp.pipeline.JSONOutputter$Writer)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLPServer$TokensRegexHandler:void lambda$null$26(boolean,edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.ling.tokensregex.TokenSequencePattern,edu.stanford.nlp.pipeline.JSONOutputter$Writer)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLPServer$SemgrexHandler:void lambda$null$33(boolean,edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.semgraph.semgrex.SemgrexPattern,edu.stanford.nlp.pipeline.JSONOutputter$Writer)"
        ]
    },
    "edu.stanford.nlp.parser.dvparser.DVParserCostAndGradient:double getMargin(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.DVParserCostAndGradient:edu.stanford.nlp.trees.DeepTree getHighestScoringTree(edu.stanford.nlp.trees.Tree,double)"
        ]
    },
    "edu.stanford.nlp.parser.metrics.EvalbByCat:java.util.Set makeObjects(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.EvalbByCat:java.util.Map makeObjectsByCat(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure$FromDependenciesFactory:edu.stanford.nlp.trees.GrammaticalStructure build(java.util.List,edu.stanford.nlp.trees.TreeGraphNode)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:edu.stanford.nlp.trees.GrammaticalStructure buildCoNLLXGrammaticalStructure(java.util.List,java.util.Map,edu.stanford.nlp.trees.GrammaticalStructureFromDependenciesFactory)"
        ]
    },
    "edu.stanford.nlp.trees.EnglishGrammaticalStructure$FromDependenciesFactory:edu.stanford.nlp.trees.GrammaticalStructure build(java.util.List,edu.stanford.nlp.trees.TreeGraphNode)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:edu.stanford.nlp.trees.GrammaticalStructure buildCoNLLXGrammaticalStructure(java.util.List,java.util.Map,edu.stanford.nlp.trees.GrammaticalStructureFromDependenciesFactory)"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure$FromDependenciesFactory:edu.stanford.nlp.trees.GrammaticalStructure build(java.util.List,edu.stanford.nlp.trees.TreeGraphNode)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:edu.stanford.nlp.trees.GrammaticalStructure buildCoNLLXGrammaticalStructure(java.util.List,java.util.Map,edu.stanford.nlp.trees.GrammaticalStructureFromDependenciesFactory)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.classify.Classifier makeClassifier(edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.naturalli.ClauseSplitter:edu.stanford.nlp.naturalli.ClauseSplitter train(java.util.stream.Stream,java.util.Optional,java.util.Optional,edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$Featurizer)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.classify.Classifier makeClassifierAdaptL1(edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:void trainMaxEnt(edu.stanford.nlp.classify.Dataset)",
            "edu.stanford.nlp.classify.RVFDataset:void main(java.lang.String[])",
            "edu.stanford.nlp.classify.SVMLightClassifierFactory:edu.stanford.nlp.classify.LinearClassifier fitSigmoid(edu.stanford.nlp.classify.SVMLightClassifier,edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.ie.machinereading.BasicRelationExtractor:void trainMulticlass(edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.Classifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier trainClassifierWithInitialWeights(edu.stanford.nlp.classify.GeneralDataset,double[][])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier trainClassifierWithInitialWeights(edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.classify.LinearClassifier)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory:double[][] trainWeights(edu.stanford.nlp.classify.GeneralDataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier trainClassifierV(edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.classify.GeneralDataset,double,double,boolean)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier trainClassifierV(edu.stanford.nlp.classify.GeneralDataset,double,double,boolean)"
        ]
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier:void trainMaxEnt(edu.stanford.nlp.classify.Dataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void train(edu.stanford.nlp.classify.Dataset)"
        ]
    },
    "edu.stanford.nlp.classify.AbstractLinearClassifierFactory:edu.stanford.nlp.classify.Classifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.TimeAnnotator:void <init>(java.lang.String,java.util.Properties,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeAnnotator:void <init>(java.lang.String,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expression CondExpression(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expression CaseExpression(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.NodePattern CoreMapExprNodePattern(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Expression CondGroup(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.patterns.ConstantsAndVariables:edu.stanford.nlp.util.Pair getEditDistanceFromOtherClasses(java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ConstantsAndVariables:double getEditDistanceScoresOtherClass(java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.patterns.ConstantsAndVariables:double getEditDistanceScoresThisClass(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ConstantsAndVariables:double getEditDistanceScoresThisClassThreshold(java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.scoref.Clusterer$State:double getFinalCost(edu.stanford.nlp.scoref.Clusterer$ClustererClassifier)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.scoref.Clusterer$State:edu.stanford.nlp.util.Pair getActions(edu.stanford.nlp.scoref.Clusterer$ClustererClassifier)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr SeqVar(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr SeqRegexBasic(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.TokenSequencePattern:edu.stanford.nlp.ling.tokensregex.TokenSequencePattern compile(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.NodePattern CoreMapVarNodePattern(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.NodePattern CoreMapNode(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.parser.server.LexicalizedParserServer:void handleLemma(java.lang.String,java.io.OutputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.server.LexicalizedParserServer:void processRequest(java.net.Socket)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:java.util.List extractCoreMaps(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:java.util.List extractCoreMapsMergedWithTokens(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.pipeline.TokensRegexAnnotator:java.util.List extract(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.MatchedExpression$SingleAnnotationExtractor:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.TokensRegexNERAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runNER(java.util.Properties)",
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runParse(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runOpenie(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runRegexner(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runPOS(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runDepparse(java.util.Properties)",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runNatlog(java.util.Properties)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runLemma(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List findNonOverlapping(java.util.List,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List findNonOverlapping(java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List segment(java.util.List,int,int,java.util.Comparator)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List segment(java.util.List,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List segment(java.util.List,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List segment(java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.server.LexicalizedParserServer:void listen()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.server.LexicalizedParserServer:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams:java.util.Collection dependencyObjectify(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.HeadFinder,edu.stanford.nlp.trees.TreeTransformer,edu.stanford.nlp.trees.DependencyTyper)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams:java.util.Collection unorderedTypedDependencyObjectify(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.HeadFinder,edu.stanford.nlp.trees.TreeTransformer)",
            "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams:java.util.Collection untypedDependencyObjectify(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.HeadFinder,edu.stanford.nlp.trees.TreeTransformer)",
            "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams:java.util.Collection unorderedUntypedDependencyObjectify(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.HeadFinder,edu.stanford.nlp.trees.TreeTransformer)",
            "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams:java.util.Collection typedDependencyObjectify(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.HeadFinder,edu.stanford.nlp.trees.TreeTransformer)"
        ]
    },
    "edu.stanford.nlp.trees.international.arabic.ArabicTreeNormalizer:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.objectbank.DelimitRegExIterator:void <init>(java.io.Reader,java.lang.String,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.objectbank.DelimitRegExIterator$DelimitRegExIteratorFactory:java.util.Iterator getIterator(java.io.Reader)",
            "edu.stanford.nlp.objectbank.DelimitRegExIterator:edu.stanford.nlp.objectbank.DelimitRegExIterator defaultDelimitRegExIterator(java.io.Reader,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.objectbank.DelimitRegExIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.SemgrexPattern:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:void main(java.lang.String[])",
            "edu.stanford.nlp.objectbank.DelimitRegExIterator:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher:java.lang.Iterable findAllNonOverlappingMatchesPerPattern(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.optimization.SGDToQNMinimizer:double[] minimize(edu.stanford.nlp.optimization.Function,double,double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:double[] trainWeights(int[][][][],int[][],edu.stanford.nlp.optimization.Evaluator[],int,double[][][][])",
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.Classifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset,float[],edu.stanford.nlp.classify.LogPrior)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:double[][] trainWeights(edu.stanford.nlp.classify.GeneralDataset,double[],boolean,edu.stanford.nlp.optimization.Minimizer)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:double[][] adaptWeights(double[][],edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.ie.crf.CRFClassifierNonlinear:double[] trainWeightsUsingNonLinearCRF(edu.stanford.nlp.optimization.AbstractCachingDiffFunction,edu.stanford.nlp.optimization.Evaluator[])",
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.Classifier trainClassifier(java.lang.Iterable)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:double[][] trainWeightsSemiSup(edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.classify.GeneralDataset,double[][],double[])",
            "edu.stanford.nlp.ie.crf.CRFClassifierWithLOP:double[] trainWeights(int[][][][],int[][],edu.stanford.nlp.optimization.Evaluator[],int,double[][][][])",
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier trainSemiSupGE(edu.stanford.nlp.classify.GeneralDataset,java.util.List,java.util.List,double)"
        ]
    },
    "edu.stanford.nlp.optimization.QNMinimizer:double[] minimize(edu.stanford.nlp.optimization.Function,double,double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.maxent.CGRunner:void solveQN()",
            "edu.stanford.nlp.classify.LogisticClassifier:void trainWeightedData(edu.stanford.nlp.classify.GeneralDataset,float[])",
            "edu.stanford.nlp.maxent.CGRunner:void solveOWLQN2(double)",
            "edu.stanford.nlp.classify.LogisticClassifier:void train(edu.stanford.nlp.classify.GeneralDataset,double,double)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:double[][] adaptWeights(double[][],edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.Classifier trainClassifier(java.lang.Iterable)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier trainSemiSupGE(edu.stanford.nlp.classify.GeneralDataset,java.util.List,java.util.List,double)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:double[] trainWeights(int[][][][],int[][],edu.stanford.nlp.optimization.Evaluator[],int,double[][][][])",
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.Classifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset,float[],edu.stanford.nlp.classify.LogPrior)",
            "edu.stanford.nlp.classify.LogisticClassifierFactory:edu.stanford.nlp.classify.LogisticClassifier trainWeightedData(edu.stanford.nlp.classify.GeneralDataset,float[])",
            "edu.stanford.nlp.classify.LinearClassifierFactory:double[][] trainWeights(edu.stanford.nlp.classify.GeneralDataset,double[],boolean,edu.stanford.nlp.optimization.Minimizer)",
            "edu.stanford.nlp.ie.crf.CRFClassifierNonlinear:double[] trainWeightsUsingNonLinearCRF(edu.stanford.nlp.optimization.AbstractCachingDiffFunction,edu.stanford.nlp.optimization.Evaluator[])",
            "edu.stanford.nlp.classify.LogisticClassifierFactory:edu.stanford.nlp.classify.LogisticClassifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset,double,double,edu.stanford.nlp.classify.LogPrior,boolean)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:double[][] trainWeightsSemiSup(edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.classify.GeneralDataset,double[][],double[])",
            "edu.stanford.nlp.ie.crf.CRFClassifierWithLOP:double[] trainWeights(int[][][][],int[][],edu.stanford.nlp.optimization.Evaluator[],int,double[][][][])"
        ]
    },
    "edu.stanford.nlp.maxent.CGRunner:void solveCG()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void trainAndSaveModel(edu.stanford.nlp.tagger.maxent.TaggerConfig)"
        ]
    },
    "edu.stanford.nlp.optimization.StochasticMinimizer:double tuneDouble(edu.stanford.nlp.optimization.Function,double[],long,edu.stanford.nlp.optimization.StochasticMinimizer$PropertySetter,double,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.StochasticMinimizer:double tuneGain(edu.stanford.nlp.optimization.Function,double[],long,double,double)",
            "edu.stanford.nlp.optimization.SMDMinimizer:edu.stanford.nlp.util.Pair tune(edu.stanford.nlp.optimization.Function,double[],long)",
            "edu.stanford.nlp.optimization.ScaledSGDMinimizer:edu.stanford.nlp.util.Pair tune(edu.stanford.nlp.optimization.Function,double[],long)"
        ]
    },
    "edu.stanford.nlp.optimization.SMDMinimizer:edu.stanford.nlp.util.Pair tune(edu.stanford.nlp.optimization.Function,double[],long)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.optimization.ScaledSGDMinimizer:edu.stanford.nlp.util.Pair tune(edu.stanford.nlp.optimization.Function,double[],long)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.optimization.InefficientSGDMinimizer:edu.stanford.nlp.util.Pair tune(edu.stanford.nlp.optimization.Function,double[],long,double,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.InefficientSGDMinimizer:edu.stanford.nlp.util.Pair tune(edu.stanford.nlp.optimization.Function,double[],long)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifier:void adaptWeights(edu.stanford.nlp.classify.Dataset,edu.stanford.nlp.classify.LinearClassifierFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void adaptMaxEnt(edu.stanford.nlp.classify.Dataset)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.Classifier trainClassifierSemiSup(edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.classify.GeneralDataset,double[][],double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void trainSemiSup(edu.stanford.nlp.classify.Dataset,edu.stanford.nlp.classify.Dataset,double[][])"
        ]
    },
    "edu.stanford.nlp.optimization.HybridMinimizer:double[] minimize(edu.stanford.nlp.optimization.Function,double,double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:double[] trainWeights(int[][][][],int[][],edu.stanford.nlp.optimization.Evaluator[],int,double[][][][])",
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.Classifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset,float[],edu.stanford.nlp.classify.LogPrior)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:double[][] trainWeights(edu.stanford.nlp.classify.GeneralDataset,double[],boolean,edu.stanford.nlp.optimization.Minimizer)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:double[][] adaptWeights(double[][],edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.ie.crf.CRFClassifierNonlinear:double[] trainWeightsUsingNonLinearCRF(edu.stanford.nlp.optimization.AbstractCachingDiffFunction,edu.stanford.nlp.optimization.Evaluator[])",
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.Classifier trainClassifier(java.lang.Iterable)",
            "edu.stanford.nlp.classify.LinearClassifierFactory:double[][] trainWeightsSemiSup(edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.classify.GeneralDataset,double[][],double[])",
            "edu.stanford.nlp.ie.crf.CRFClassifierWithLOP:double[] trainWeights(int[][][][],int[][],edu.stanford.nlp.optimization.Evaluator[],int,double[][][][])",
            "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier trainSemiSupGE(edu.stanford.nlp.classify.GeneralDataset,java.util.List,java.util.List,double)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:java.util.List tagSentence(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.nndep.DependencyParser:void parseTextFile(java.io.BufferedReader,java.io.PrintWriter)",
            "edu.stanford.nlp.parser.nndep.demo.DependencyParserDemo:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TestClassifier$TestSentenceProcessor:edu.stanford.nlp.tagger.maxent.TestSentence process(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TestClassifier$TestSentenceProcessor:java.lang.Object process(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:java.util.List apply(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:java.lang.String tagTokenizedString(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:java.util.List process(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:java.util.List tagSentence(java.util.List,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void tagCoreLabels(java.util.List,boolean)",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:java.util.List tagCoreLabelsOrHasWords(java.util.List,edu.stanford.nlp.process.Morphology,boolean)",
            "edu.stanford.nlp.pipeline.POSTaggerAnnotator:edu.stanford.nlp.util.CoreMap doOneSentence(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTaggerSGML(java.io.BufferedReader,java.io.BufferedWriter,edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle)"
        ]
    },
    "edu.stanford.nlp.simple.Sentence:java.util.List mentions()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Sentence:java.util.List mentions(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.SentenceAlgorithms:java.util.List keyphraseSpans()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.SentenceAlgorithms:java.util.List keyphrases(java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.simple.SentenceAlgorithms:java.util.List dependencyPathBetween(int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.Rules:boolean entityIsPredicateNominatives(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries,java.util.Set,edu.stanford.nlp.dcoref.Semantics)"
        ]
    },
    "edu.stanford.nlp.dcoref.Rules:boolean entityIsRoleAppositive(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries,java.util.Set,edu.stanford.nlp.dcoref.Semantics)"
        ]
    },
    "edu.stanford.nlp.dcoref.Rules:boolean entityIsApposition(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries,java.util.Set,edu.stanford.nlp.dcoref.Semantics)"
        ]
    },
    "edu.stanford.nlp.pipeline.WordsToSentencesAnnotator:edu.stanford.nlp.pipeline.WordsToSentencesAnnotator newlineSplitter(boolean,java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorFactories$3:edu.stanford.nlp.pipeline.Annotator create()"
        ]
    },
    "edu.stanford.nlp.pipeline.WordsToSentencesAnnotator:void <init>(boolean,java.lang.String,java.util.Set,java.util.Set,java.lang.String,java.lang.String,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorImplementations:edu.stanford.nlp.pipeline.Annotator wordToSentences(java.util.Properties,boolean,java.lang.String,java.util.Set,java.util.Set,java.lang.String,java.lang.String,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.pipeline.WordsToSentencesAnnotator:void <init>(boolean,java.lang.String,java.util.Set,java.util.Set,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.process.WordToSentenceProcessor:void <init>(edu.stanford.nlp.process.WordToSentenceProcessor$NewlineIsSentenceBreak)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter:void <init>()"
        ]
    },
    "edu.stanford.nlp.process.WordToSentenceProcessor:void <init>(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.WordToSentenceProcessor:void <init>()",
            "edu.stanford.nlp.pipeline.WordsToSentencesAnnotator:edu.stanford.nlp.pipeline.WordsToSentencesAnnotator nonSplitter(boolean)"
        ]
    },
    "edu.stanford.nlp.hcoref.Rules:boolean entityAttributesAgree(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,java.util.Locale)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.hcoref.Rules:boolean entityIsApposition(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Set)",
            "edu.stanford.nlp.hcoref.sieve.RFSieve:edu.stanford.nlp.ling.RVFDatum extractDatum(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,int,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.hcoref.Rules:boolean entityIsPredicateNominatives(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Set)",
            "edu.stanford.nlp.hcoref.sieve.RFSieve:edu.stanford.nlp.ling.RVFDatum extractDatum(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,int,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.hcoref.Rules:boolean entityIsRoleAppositive(edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.sieve.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.hcoref.data.Document,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.CorefCluster,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Set)",
            "edu.stanford.nlp.hcoref.sieve.RFSieve:edu.stanford.nlp.ling.RVFDatum extractDatum(edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Mention,edu.stanford.nlp.hcoref.data.Document,int,edu.stanford.nlp.hcoref.data.Dictionaries,java.util.Properties,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.pipeline.CoreNLPProtos$Sentence$Builder toProtoBuilder(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Document:java.util.List sentences(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:void <init>(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.pipeline.CoreNLPProtos$Sentence toProto(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.pipeline.CoreNLPProtos$Document$Builder toProtoBuilder(edu.stanford.nlp.pipeline.Annotation,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLPServer$CoreNLPHandler:java.util.Properties getProperties(com.sun.net.httpserver.HttpExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLPServer$CoreNLPHandler:void handle(com.sun.net.httpserver.HttpExchange)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionNodePattern:boolean match(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionNodePattern:boolean match(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$44:edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$MethodCallExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$MethodCallExpression:edu.stanford.nlp.ling.tokensregex.types.Expression simplify(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$MethodCallExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequenceMatchResultExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Value attemptTypeConversion(edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue,edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$VarAssignmentExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$WrappedExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringMatchResultExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(java.util.regex.MatchResult)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$ConditionalExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$IfExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$ConditionalExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$FunctionCallExpression:edu.stanford.nlp.ling.tokensregex.types.Expression simplify(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$MethodCallExpression:edu.stanford.nlp.ling.tokensregex.types.Expression simplify(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLPClient:void <init>(java.util.Properties,java.lang.String,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLPClient:void <init>(java.util.Properties,java.lang.String,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionNodePattern:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$NodePatternExpr:java.lang.String toString()"
        ]
    },
    "edu.stanford.nlp.pipeline.CoNLLOutputter:void print(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream,edu.stanford.nlp.pipeline.AnnotationOutputter$Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.CoNLLOutputter:void conllPrint(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream,edu.stanford.nlp.pipeline.AnnotationOutputter$Options)",
            "edu.stanford.nlp.pipeline.AnnotationOutputter:void print(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream,edu.stanford.nlp.pipeline.StanfordCoreNLP)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void lambda$createOutputter$14(edu.stanford.nlp.pipeline.StanfordCoreNLP$OutputFormat,edu.stanford.nlp.pipeline.AnnotationOutputter$Options,java.lang.String,java.lang.String,java.util.Properties,edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream)",
            "edu.stanford.nlp.pipeline.AnnotationOutputter:void print(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern$NodePatternExpr:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.EntityCachingAbstractSequencePriorBIO:java.lang.String toString(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.EntityCachingAbstractSequencePriorBIO:void updateSequenceElement(int[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.EntityCachingAbstractSequencePriorBIO:double[] scoresOf(int[],int)"
        ]
    },
    "edu.stanford.nlp.ie.EntityCachingAbstractSequencePriorBIO:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.GoogleNGramsSQLBacked:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.pipeline.CoreNLPProtos$Document toProto(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:java.io.OutputStream write(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream)"
        ]
    },
    "edu.stanford.nlp.util.AcronymMatcher:boolean isFancyAcronymImpl(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.AcronymMatcher:boolean isFancyAcronym(java.lang.String[],java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.hcoref.data.Mention:java.lang.String getPattern(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.data.Mention:java.lang.String getPattern()",
            "edu.stanford.nlp.hcoref.data.Mention:java.lang.String[] getSplitPattern()"
        ]
    },
    "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.pipeline.CoreNLPProtos$Token toProto(edu.stanford.nlp.ling.CoreLabel)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.pipeline.CoreNLPProtos$Document$Builder toProtoBuilder(edu.stanford.nlp.pipeline.Annotation,java.util.Set)",
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.pipeline.CoreNLPProtos$Sentence$Builder toProtoBuilder(edu.stanford.nlp.util.CoreMap,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.process.PTBTokenizer:java.lang.String ptb2Text(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.PTBTokenizer:java.lang.String labelList2Text(java.util.List)"
        ]
    },
    "edu.stanford.nlp.dcoref.Mention:java.lang.String getPattern(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Mention:java.lang.String getPattern()",
            "edu.stanford.nlp.dcoref.Mention:java.lang.String[] getSplitPattern()"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult:edu.stanford.nlp.ling.tokensregex.SequenceMatchResult$MatchedGroupInfo groupInfo(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:edu.stanford.nlp.ling.tokensregex.SequenceMatchResult$MatchedGroupInfo groupInfo(int)",
            "edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult:edu.stanford.nlp.ling.tokensregex.SequenceMatchResult$MatchedGroupInfo groupInfo()",
            "edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult:edu.stanford.nlp.ling.tokensregex.SequenceMatchResult$MatchedGroupInfo groupInfo(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult:java.lang.String group(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$RegexMatchVarExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$MethodCallExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequenceMatchResultExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Value attemptTypeConversion(edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue,edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$VarAssignmentExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$WrappedExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringMatchResultExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(java.util.regex.MatchResult)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$ConditionalExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$IfExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult:java.lang.String group()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLPServer$TokensRegexHandler:void lambda$null$23(edu.stanford.nlp.ling.tokensregex.TokenSequenceMatcher,edu.stanford.nlp.pipeline.JSONOutputter$Writer)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:boolean find(int,boolean)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.roth.RothCONLL04Reader:edu.stanford.nlp.pipeline.Annotation read(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.pipeline.Annotation parse(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.util.StringUtils:java.util.Collection getNgramsString(java.lang.String,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void writeColumnOutput(java.lang.String,boolean,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass runNineYards(edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass,java.util.Properties,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.structure.AnnotationUtils:java.lang.String datasetToString(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.roth.RothCONLL04Reader:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.patterns.surface.SurfacePattern:java.lang.String toString(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.surface.SurfacePattern:java.lang.String toString()"
        ]
    },
    "edu.stanford.nlp.patterns.surface.PatternToken:int hashCode()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.surface.SurfacePattern:java.lang.String toString(java.lang.String,java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.PhraseTable:boolean addPhrase(java.util.List,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.PhraseTable:boolean addPhrase(java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.MultiCoreMapNodePattern$StringSequenceAnnotationPattern:void <init>(java.lang.Class,java.util.Map,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.MultiCoreMapNodePattern$StringSequenceAnnotationPattern:void <init>(java.lang.Class,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.util.ConfusionMatrix:java.lang.String printTable()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.ConfusionMatrix:java.lang.String toString()"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.ApproxMatch:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.types.ValueFunctions:java.lang.String access$000(java.lang.Object[],java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$13:java.lang.String compute(java.lang.String[])",
            "edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$18:edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env,java.util.List)"
        ]
    },
    "edu.stanford.nlp.time.SUTimeMain:void processTimebankCsvSent(edu.stanford.nlp.pipeline.AnnotationPipeline,edu.stanford.nlp.time.SUTimeMain$TimebankSent,java.io.PrintWriter,edu.stanford.nlp.time.SUTimeMain$EvalStats)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:void processTimebankCsv(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.patterns.surface.SurfacePattern:java.lang.String toStringSimple()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.EnglishPatterns:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.ArrayStringFilter:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.StringUtils:java.lang.String join(java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.AcronymMatcher:boolean isFancyAcronym(java.lang.String[],java.lang.String[])",
            "edu.stanford.nlp.pipeline.TokensRegexNERAnnotator$Entry:java.lang.String toString()",
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParser:void main(java.lang.String[])",
            "edu.stanford.nlp.pipeline.TokensRegexNERAnnotator:java.util.List readEntries(java.lang.String,java.lang.String[],java.lang.String[],java.util.List,edu.stanford.nlp.ling.tokensregex.matcher.TrieMap,java.lang.String,java.io.BufferedReader,java.util.Set,boolean,boolean)",
            "edu.stanford.nlp.ling.tokensregex.TokenSequencePattern:edu.stanford.nlp.ling.tokensregex.TokenSequencePattern compile(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String[])",
            "edu.stanford.nlp.util.AcronymMatcher:boolean isAcronym(java.lang.String[],java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$NamedValueFunction:java.lang.String getParamDesc(java.lang.String,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$BooleanFunction:java.lang.String getParamDesc()",
            "edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$NumericFunction:java.lang.String getParamDesc()",
            "edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$StringFunction:java.lang.String getParamDesc()"
        ]
    },
    "edu.stanford.nlp.sentiment.RNNOptions:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.surface.SurfacePattern:java.lang.String getPrevContextStr()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.surface.SurfacePattern:java.lang.String toStringToWrite()"
        ]
    },
    "edu.stanford.nlp.pipeline.TokensRegexNERAnnotator$Entry:java.lang.String getTypeDescription()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.TokensRegexNERAnnotator:java.util.List readEntries(java.lang.String,java.lang.String[],java.lang.String[],java.util.List,edu.stanford.nlp.ling.tokensregex.matcher.TrieMap,java.lang.String,java.io.BufferedReader,java.util.Set,boolean,boolean)"
        ]
    },
    "edu.stanford.nlp.patterns.surface.SurfacePattern:java.lang.String getNextContextStr()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.surface.SurfacePattern:java.lang.String toStringToWrite()"
        ]
    },
    "edu.stanford.nlp.stats.Counters:void printCounterComparison(edu.stanford.nlp.stats.Counter,edu.stanford.nlp.stats.Counter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.dvparser.CacheParseHypotheses:java.util.IdentityHashMap convertToBytes(java.util.IdentityHashMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.neural.NeuralUtils:org.ejml.simple.SimpleMatrix loadTextMatrix(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.neural.NeuralUtils:org.ejml.simple.SimpleMatrix loadTextMatrix(java.io.File)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper$GsIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP:void xmlPrint(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void xmlPrint(edu.stanford.nlp.pipeline.Annotation,java.io.Writer)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void shell(edu.stanford.nlp.pipeline.StanfordCoreNLP)"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP:void conllPrint(edu.stanford.nlp.pipeline.Annotation,java.io.Writer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP:void jsonPrint(edu.stanford.nlp.pipeline.Annotation,java.io.Writer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.TimeExpressionExtractorImpl:void init(edu.stanford.nlp.time.Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractorImpl:void <init>()",
            "edu.stanford.nlp.time.TimeExpressionExtractorImpl:void init(java.lang.String,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.pipeline.TokensRegexAnnotator:void <init>(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.AnnotationOutputter:java.lang.String print(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.pipeline.StanfordCoreNLP)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.AnnotationOutputter:java.lang.String print(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Document:java.lang.String xml(java.util.function.Function[])",
            "edu.stanford.nlp.simple.Document:java.lang.String json(java.util.function.Function[])"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotatorFactories$15:edu.stanford.nlp.pipeline.Annotator create()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorFactories$15:java.lang.Object create()",
            "edu.stanford.nlp.pipeline.AnnotatorPool:edu.stanford.nlp.pipeline.Annotator get(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotatorFactories$14:java.lang.Object create()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.charniak.CharniakScoredParsesReaderWriter$ScoredParsesIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.IterableIterator:java.lang.Object next()"
        ]
    },
    "edu.stanford.nlp.parser.charniak.CharniakScoredParsesReaderWriter$ScoredParsesIterator:void <init>(java.lang.String,java.io.BufferedReader,edu.stanford.nlp.parser.charniak.CharniakScoredParsesReaderWriter$1)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.charniak.CharniakScoredParsesReaderWriter:java.lang.Iterable readScoredTrees(java.lang.String,java.io.BufferedReader)"
        ]
    },
    "edu.stanford.nlp.parser.charniak.CharniakScoredParsesReaderWriter$ScoredParsesIterator:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.charniak.CharniakScoredParsesReaderWriter$ScoredParsesIterator:void <init>(java.lang.String,edu.stanford.nlp.parser.charniak.CharniakScoredParsesReaderWriter$1)"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotatorFactories$18:java.lang.Object create()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Document$6:edu.stanford.nlp.pipeline.Annotator get()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Document$6:java.lang.Object get()"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotatorFactories$11:java.lang.Object create()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Document$5:edu.stanford.nlp.pipeline.Annotator get()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Document$5:java.lang.Object get()"
        ]
    },
    "edu.stanford.nlp.process.DocumentPreprocessor$PlainTextIterator:java.util.List next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.DocumentPreprocessor$XMLIterator:void primeNext()",
            "edu.stanford.nlp.process.DocumentPreprocessor$PlainTextIterator:java.lang.Object next()"
        ]
    },
    "edu.stanford.nlp.process.DocumentPreprocessor$PlainTextIterator:boolean hasNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.DocumentPreprocessor$XMLIterator:void primeNext()",
            "edu.stanford.nlp.parser.nndep.DependencyParser:void parseTextFile(java.io.BufferedReader,java.io.PrintWriter)",
            "edu.stanford.nlp.parser.lexparser.ParseFiles:void parseFiles(java.lang.String[],int,boolean,edu.stanford.nlp.process.TokenizerFactory,java.lang.String,java.lang.String,java.util.function.Function,java.lang.String)",
            "edu.stanford.nlp.patterns.surface.AnnotatedTextReader:java.util.List parseFile(java.io.BufferedReader,java.util.Set,java.util.Map,boolean,java.lang.String)",
            "edu.stanford.nlp.process.DocumentPreprocessor:void main(java.lang.String[])",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger(java.lang.Iterable,java.io.BufferedWriter,edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle)",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:java.util.List tokenizeText(java.io.Reader,edu.stanford.nlp.process.TokenizerFactory)",
            "edu.stanford.nlp.parser.nndep.demo.DependencyParserDemo:void main(java.lang.String[])",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTaggerStdin(java.io.BufferedReader,java.io.BufferedWriter,edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle)"
        ]
    },
    "edu.stanford.nlp.process.WordSegmentingTokenizer:java.lang.Object getNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.AbstractTokenizer:java.lang.Object next()",
            "edu.stanford.nlp.process.AbstractTokenizer:boolean hasNext()"
        ]
    },
    "edu.stanford.nlp.trees.PennTreeReader:void <init>(java.io.Reader,edu.stanford.nlp.trees.TreeFactory,edu.stanford.nlp.trees.TreeNormalizer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TreePrint:edu.stanford.nlp.trees.TreeReader lambda$main$20(java.io.Reader)",
            "edu.stanford.nlp.trees.tregex.TregexPattern$TRegexTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)",
            "edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer$NPTmpAdvRetainingTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)",
            "edu.stanford.nlp.parser.lexparser.SisterAnnotationStats:edu.stanford.nlp.trees.TreeReader lambda$main$116(java.io.Reader)",
            "edu.stanford.nlp.trees.international.tuebadz.TueBaDZTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)",
            "edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer$NPTmpRetainingTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)",
            "edu.stanford.nlp.parser.lexparser.TreeBinarizer:edu.stanford.nlp.trees.TreeReader lambda$main$42(java.io.Reader)",
            "edu.stanford.nlp.trees.LabeledScoredTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)",
            "edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams:edu.stanford.nlp.trees.TreeReader lambda$testMemoryTreebank$108(java.io.Reader)",
            "edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams:edu.stanford.nlp.trees.TreeReader lambda$treeReaderFactory$107(java.io.Reader)",
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:edu.stanford.nlp.trees.TreeReader lambda$main$113(java.io.Reader)",
            "edu.stanford.nlp.parser.lexparser.TreebankAnnotator:edu.stanford.nlp.trees.TreeReader lambda$getTrees$117(java.io.Reader)"
        ]
    },
    "edu.stanford.nlp.trees.PennTreeReader:void <init>(java.io.Reader,edu.stanford.nlp.trees.TreeFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Trees:edu.stanford.nlp.trees.Tree readTree(java.lang.String,edu.stanford.nlp.trees.TreeFactory)",
            "edu.stanford.nlp.trees.TreeFunctions:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.QPTreeTransformer:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.CoordinationTransformer:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.PennTreeReader:void <init>(java.io.Reader)",
            "edu.stanford.nlp.trees.PennTreeReader:void main(java.lang.String[])",
            "edu.stanford.nlp.util.MetaClass:java.lang.Object cast(java.lang.String,java.lang.reflect.Type)",
            "edu.stanford.nlp.trees.Treebanks:edu.stanford.nlp.trees.TreeReader lambda$main$253(java.io.Reader)",
            "edu.stanford.nlp.trees.TreeGraphNode:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.tregex.TregexPattern:void main(java.lang.String[])",
            "edu.stanford.nlp.pipeline.CustomAnnotationSerializer:edu.stanford.nlp.util.Pair read(java.io.InputStream)",
            "edu.stanford.nlp.trees.Trees:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.StringLabeledScoredTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)",
            "edu.stanford.nlp.parser.ui.TreeJPanel:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.PennTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Tree:edu.stanford.nlp.trees.Tree valueOf(java.lang.String,edu.stanford.nlp.trees.TreeReaderFactory)",
            "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader,java.lang.String)",
            "edu.stanford.nlp.trees.MemoryTreebank:void processFile(java.io.File)",
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:boolean primeNextFile()",
            "edu.stanford.nlp.trees.TreeTokenizerFactory$1:void <init>(edu.stanford.nlp.trees.TreeTokenizerFactory,java.io.Reader)"
        ]
    },
    "edu.stanford.nlp.trees.international.spanish.SpanishTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader,java.lang.String)",
            "edu.stanford.nlp.trees.MemoryTreebank:void processFile(java.io.File)",
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:boolean primeNextFile()"
        ]
    },
    "edu.stanford.nlp.trees.international.negra.NegraPennTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.negra.NegraPennTreeReaderFactory:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader,java.lang.String)",
            "edu.stanford.nlp.trees.MemoryTreebank:void processFile(java.io.File)",
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:boolean primeNextFile()"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.FragDiscardingPennTreeReader:void <init>(java.io.Reader,edu.stanford.nlp.trees.TreeFactory,edu.stanford.nlp.trees.TreeNormalizer,edu.stanford.nlp.process.Tokenizer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.pennchinese.CTBTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)"
        ]
    },
    "edu.stanford.nlp.trees.international.hebrew.HebrewTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader,java.lang.String)",
            "edu.stanford.nlp.trees.MemoryTreebank:void processFile(java.io.File)",
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:boolean primeNextFile()",
            "edu.stanford.nlp.trees.international.hebrew.HebrewTreeReaderFactory:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.CTBTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Tree:edu.stanford.nlp.trees.Tree valueOf(java.lang.String,edu.stanford.nlp.trees.TreeReaderFactory)",
            "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader,java.lang.String)",
            "edu.stanford.nlp.trees.MemoryTreebank:void processFile(java.io.File)",
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:boolean primeNextFile()",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:void AddTreesFromFile(java.lang.String,java.lang.String,edu.stanford.nlp.trees.Treebank)"
        ]
    },
    "edu.stanford.nlp.trees.international.french.FrenchTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Tree:edu.stanford.nlp.trees.Tree valueOf(java.lang.String,edu.stanford.nlp.trees.TreeReaderFactory)",
            "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader,java.lang.String)",
            "edu.stanford.nlp.trees.MemoryTreebank:void processFile(java.io.File)",
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:boolean primeNextFile()"
        ]
    },
    "edu.stanford.nlp.objectbank.ObjectBank$OBIterator:void setNextObject()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.objectbank.ObjectBank$OBIterator:java.lang.Object next()",
            "edu.stanford.nlp.objectbank.ObjectBank$OBIterator:void <init>(edu.stanford.nlp.objectbank.ObjectBank)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.RobustTokenizer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.TokenizerAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Document:java.util.List sentences(java.util.Properties)",
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.classify.ColumnDataClassifier:java.lang.String[] ptbTokenize(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:void makeDatum(java.lang.String,edu.stanford.nlp.classify.ColumnDataClassifier$Flags,java.lang.Object,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ling.BasicDocument:void parse(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.BasicDocument:edu.stanford.nlp.ling.BasicDocument init(java.lang.String,java.lang.String,boolean)"
        ]
    },
    "edu.stanford.nlp.process.PTBTokenizer:void tok(java.util.List,java.util.List,java.lang.String,java.util.regex.Pattern,java.lang.String,boolean,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.PTBTokenizer:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.ComplexNodePattern$SequenceRegexPattern:java.lang.Object matchWithResult(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.ComplexNodePattern$SequenceRegexPattern:java.lang.Object matchWithResult(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLPServer$TokensRegexHandler:java.lang.Boolean lambda$null$21(edu.stanford.nlp.ling.tokensregex.TokenSequencePattern,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.ComplexNodePattern$SequenceRegexPattern:boolean match(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.ComplexNodePattern$SequenceRegexPattern:boolean match(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:boolean find(int,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:boolean findNextAll()",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:boolean findNextNonOverlapping()",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:boolean find(int)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationMatchedFilter:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule:boolean test(edu.stanford.nlp.ling.tokensregex.MatchedExpression)"
        ]
    },
    "edu.stanford.nlp.util.Execution:void fillOptions(java.lang.Object,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ConstantsAndVariables:void setUp(java.util.Properties)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void setUpConstructor(java.util.Map,java.util.Map,boolean,java.util.Map,java.util.Map,java.util.Map)",
            "edu.stanford.nlp.patterns.SentenceIndex:void setUp(java.util.Properties)",
            "edu.stanford.nlp.patterns.surface.PatternsForEachTokenInMemory:void <init>(java.util.Properties,java.util.Map)",
            "edu.stanford.nlp.patterns.InvertedIndexByTokens:void <init>(java.util.Properties,java.util.Set,java.util.function.Function)",
            "edu.stanford.nlp.patterns.InvertedIndexByTokens:void <init>(java.util.Properties,java.util.Set,java.util.function.Function,java.util.Map)",
            "edu.stanford.nlp.patterns.ScorePhrases:void <init>(java.util.Properties,edu.stanford.nlp.patterns.ConstantsAndVariables)",
            "edu.stanford.nlp.patterns.surface.LearnImportantFeatures:void main(java.lang.String[])",
            "edu.stanford.nlp.patterns.surface.CreatePatterns:void setUp(java.util.Properties)",
            "edu.stanford.nlp.naturalli.OpenIE:void <init>(java.util.Properties)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass runNineYards(edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass,java.util.Properties,java.util.Map)",
            "edu.stanford.nlp.patterns.surface.PatternsForEachTokenDB:void <init>(java.util.Properties,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.patterns.SentenceIndex:edu.stanford.nlp.patterns.SentenceIndex loadIndex(java.lang.Class,java.util.Properties,java.util.Set,java.lang.String,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void setUpConstructor(java.util.Map,java.util.Map,boolean,java.util.Map,java.util.Map,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.patterns.surface.SurfacePatternFactory:void setUp(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.PatternFactory:void setUp(java.util.Properties,edu.stanford.nlp.patterns.PatternFactory$PatternType,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.patterns.surface.PatternsForEachTokenDB:void <init>(java.util.Properties,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.surface.PatternsForEachTokenDB:void <init>(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP:void processFiles(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.AnnotationPipeline:void annotate(java.lang.Iterable)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:void appendRules(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:void <init>(edu.stanford.nlp.ling.tokensregex.Env,java.util.List)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:void updateExpressionExtractor(edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor,java.io.Reader)"
        ]
    },
    "edu.stanford.nlp.classify.AbstractLinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier trainClassifier(java.lang.ref.Reference)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.Dataset:edu.stanford.nlp.classify.Dataset readSVMLightFormat(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.CrossValidator:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.pipeline.ChineseSegmenterAnnotator:void doOneSentence(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ChineseSegmenterAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler:int[] findBestUsingSampling(edu.stanford.nlp.sequences.SequenceModel,int,int,int[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:int[] bestSequence(edu.stanford.nlp.sequences.SequenceModel)"
        ]
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler:java.util.List collectSamples(edu.stanford.nlp.sequences.SequenceModel,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.POSTaggerAnnotator:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.SUTimeMain:edu.stanford.nlp.pipeline.AnnotationPipeline getPipeline(java.util.Properties,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotatorFactories$4:java.lang.Object create()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Document$2:edu.stanford.nlp.pipeline.Annotator get()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Document$2:java.lang.Object get()"
        ]
    },
    "edu.stanford.nlp.parser.nndep.DependencyParser:void train(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.objectbank.LineIterator:void <init>(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.objectbank.LineIterator$LineIteratorFactory:java.util.Iterator getIterator(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.TrueCasingForNISTDocumentReaderAndWriter:java.util.Iterator getIterator(java.io.Reader)",
            "edu.stanford.nlp.objectbank.ObjectBank$OBIterator:void setNextObject()",
            "edu.stanford.nlp.international.arabic.process.ArabicDocumentReaderAndWriter:java.util.Iterator getIterator(java.io.Reader)",
            "edu.stanford.nlp.wordseg.Sighan2005DocumentReaderAndWriter:java.util.Iterator getIterator(java.io.Reader)"
        ]
    },
    "edu.stanford.nlp.sequences.TrueCasingForNISTDocumentReaderAndWriter:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern:void <init>(edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequencePattern:edu.stanford.nlp.ling.tokensregex.SequencePattern compile(edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.TokenSequencePattern:void <init>(java.lang.String,edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.TokenSequencePattern:edu.stanford.nlp.ling.tokensregex.TokenSequencePattern compile(edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.types.Value BasicValue(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.TokenSequencePattern:edu.stanford.nlp.ling.tokensregex.TokenSequencePattern compile(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequencePatternExtractRule:void <init>(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:edu.stanford.nlp.util.Pair getOperationFromReader(java.io.BufferedReader,edu.stanford.nlp.trees.tregex.TregexPatternCompiler)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:java.util.List getOperationsFromReader(java.io.BufferedReader,edu.stanford.nlp.trees.tregex.TregexPatternCompiler)"
        ]
    },
    "edu.stanford.nlp.simple.Document$9:java.lang.Object get()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Document:java.util.Map coref(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotatorFactories$13:java.lang.Object create()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Document$10:edu.stanford.nlp.pipeline.Annotator get()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Document$10:java.lang.Object get()"
        ]
    },
    "edu.stanford.nlp.parser.dvparser.DVModelReranker:edu.stanford.nlp.parser.dvparser.DVModelReranker$Query process(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.dvparser.DVModelReranker:edu.stanford.nlp.parser.lexparser.RerankerQuery process(java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.TokenSequencePattern:edu.stanford.nlp.ling.tokensregex.TokenSequencePattern compile(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLPServer$TokensRegexHandler:java.lang.String lambda$handle$27(com.sun.net.httpserver.HttpExchange)",
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter$3:void <init>(edu.stanford.nlp.naturalli.RelationTripleSegmenter)",
            "edu.stanford.nlp.naturalli.NaturalLogicAnnotator:void <clinit>()",
            "edu.stanford.nlp.pipeline.WordsToSentencesAnnotator:void <init>(boolean,java.lang.String,java.util.Set,java.util.Set,java.lang.String,java.lang.String,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.objectbank.XMLBeginEndIterator:void <init>(java.io.Reader,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.DocumentPreprocessor$XMLIterator:void <init>(edu.stanford.nlp.process.DocumentPreprocessor)"
        ]
    },
    "edu.stanford.nlp.objectbank.XMLBeginEndIterator:void <init>(java.io.Reader,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.objectbank.XMLBeginEndIterator:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.naturalli.NaturalLogicAnnotator$1:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.NaturalLogicAnnotator:void <clinit>()"
        ]
    },
    "edu.stanford.nlp.trees.EnglishGrammaticalStructure:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.naturalli.OpenIE:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.UniversalEnglishGrammaticalStructure:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.naturalli.RelationTripleSegmenter$1:void <init>(edu.stanford.nlp.naturalli.RelationTripleSegmenter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:void <init>(boolean)"
        ]
    },
    "edu.stanford.nlp.naturalli.RelationTripleSegmenter$2:void <init>(edu.stanford.nlp.naturalli.RelationTripleSegmenter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:void <init>(boolean)"
        ]
    },
    "edu.stanford.nlp.naturalli.RelationTripleSegmenter$4:void <init>(edu.stanford.nlp.naturalli.RelationTripleSegmenter,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:void <init>(boolean)"
        ]
    },
    "edu.stanford.nlp.semgraph.semgrex.SemgrexParser:edu.stanford.nlp.semgraph.semgrex.SemgrexPattern RelationDisj()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.SemgrexParser:edu.stanford.nlp.semgraph.semgrex.SemgrexPattern SubNode(edu.stanford.nlp.semgraph.semgrex.GraphRelation)",
            "edu.stanford.nlp.semgraph.semgrex.SemgrexParser:edu.stanford.nlp.semgraph.semgrex.SemgrexPattern RelChild()"
        ]
    },
    "edu.stanford.nlp.patterns.PhraseScorer:double getWordShapeScore(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ScorePhrasesAverageFeatures:edu.stanford.nlp.stats.Counter scorePhrases(java.lang.String,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.Counter,java.util.Set,boolean)"
        ]
    },
    "edu.stanford.nlp.trees.tregex.TregexPattern:edu.stanford.nlp.trees.tregex.TregexPattern safeCompile(java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.DependencyTreeTransformer:void <clinit>()"
        ]
    },
    "edu.stanford.nlp.trees.DateTreeTransformer:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.TregexPattern:edu.stanford.nlp.trees.tregex.TregexPattern compile(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.SemanticHeadFinder:void <clinit>()",
            "edu.stanford.nlp.trees.international.spanish.SpanishTreeNormalizer:java.util.List compilePatterns(edu.stanford.nlp.util.Pair[])",
            "edu.stanford.nlp.sentiment.ReadSentimentDataset:void <clinit>()",
            "edu.stanford.nlp.trees.QPTreeTransformer:void <clinit>()",
            "edu.stanford.nlp.dcoref.Mention:void setNumber(edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:void <clinit>()",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:edu.stanford.nlp.trees.tregex.TregexPattern[] getPleonasticPatterns()",
            "edu.stanford.nlp.dcoref.MentionExtractor:void <clinit>()",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.tregex.TregexPattern[] getPleonasticPatterns()",
            "edu.stanford.nlp.trees.international.spanish.SpanishTreeNormalizer:void <clinit>()",
            "edu.stanford.nlp.trees.international.pennchinese.CTBErrorCorrectingTreeNormalizer:void <clinit>()",
            "edu.stanford.nlp.trees.international.arabic.ArabicTreeNormalizer:void <init>(boolean,boolean,boolean,boolean,boolean)",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:void <clinit>()",
            "edu.stanford.nlp.parser.shiftreduce.ShiftReduceParserQuery:void <clinit>()",
            "edu.stanford.nlp.dcoref.MentionExtractor:void findTreePattern(edu.stanford.nlp.trees.Tree,java.lang.String,java.util.Set)",
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:void <clinit>()",
            "edu.stanford.nlp.trees.CoordinationTransformer:void <clinit>()",
            "edu.stanford.nlp.trees.UniversalSemanticHeadFinder:void <clinit>()",
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:void initializeAnnotationPatterns()"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Temporal:edu.stanford.nlp.time.SUTime$Range getRange()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$GroundedTime:edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$InexactTime:edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$GroundedTime:edu.stanford.nlp.time.SUTime$Temporal intersect(edu.stanford.nlp.time.SUTime$Temporal)",
            "edu.stanford.nlp.time.SUTime$OrdinalTime:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$Time:boolean contains(edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$InexactTime:void <init>(org.joda.time.Partial)",
            "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Time beginTime()",
            "edu.stanford.nlp.time.SUTime$TimeWithRange:edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.util.Interval getInterval()"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Time closest(edu.stanford.nlp.time.SUTime$Time,edu.stanford.nlp.time.SUTime$Time[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$PartialTime:edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time,int)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Time:int compareTo(edu.stanford.nlp.time.SUTime$Time)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$TemporalOp$5:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Time max(edu.stanford.nlp.time.SUTime$Time,edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$InexactTime:int compareTo(edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$Time:int compareTo(java.lang.Object)",
            "edu.stanford.nlp.time.SUTime$Duration:edu.stanford.nlp.time.SUTime$Time toTime(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$PartialTime:edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$2:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Duration distance(edu.stanford.nlp.time.SUTime$Time,edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Time min(edu.stanford.nlp.time.SUTime$Time,edu.stanford.nlp.time.SUTime$Time)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Range:org.joda.time.Interval getJodaTimeInterval()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Duration difference(edu.stanford.nlp.time.SUTime$Time,edu.stanford.nlp.time.SUTime$Time)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Range:void <init>(edu.stanford.nlp.time.SUTime$Time,edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Duration distance(edu.stanford.nlp.time.SUTime$Time,edu.stanford.nlp.time.SUTime$Time)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$DurationWithFields:edu.stanford.nlp.time.SUTime$Duration resolve(edu.stanford.nlp.time.SUTime$Time,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Range resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$DurationWithFields:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Time:boolean isComparable(edu.stanford.nlp.time.SUTime$Time)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Time max(edu.stanford.nlp.time.SUTime$Time,edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$Time:boolean isComparable(java.lang.Object)",
            "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Time min(edu.stanford.nlp.time.SUTime$Time,edu.stanford.nlp.time.SUTime$Time)"
        ]
    },
    "edu.stanford.nlp.time.JollyDayHolidays$JollyHoliday:edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.JollyDayHolidays$JollyHoliday:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.JollyDayHolidays$JollyHoliday:edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$CompositePartialTime:edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$CompositePartialTime:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$InexactTime:edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$TimeWithRange:edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time,int)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$PartialTime:edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$PartialTime:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Duration getGranularity()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Duration difference(edu.stanford.nlp.time.SUTime$Time,edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$PartialTime:edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time,int)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$CompositePartialTime:org.joda.time.Instant getJodaTimeInstant()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$InexactTime:org.joda.time.Instant getJodaTimeInstant()",
            "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Time closest(edu.stanford.nlp.time.SUTime$Time,edu.stanford.nlp.time.SUTime$Time[])",
            "edu.stanford.nlp.time.SUTime$Time:int compareTo(edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$Duration:edu.stanford.nlp.time.SUTime$Time toTime(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$Range:org.joda.time.Interval getJodaTimeInterval()",
            "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Duration difference(edu.stanford.nlp.time.SUTime$Time,edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$DurationWithFields:edu.stanford.nlp.time.SUTime$Duration resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$Time:boolean isComparable(edu.stanford.nlp.time.SUTime$Time)"
        ]
    },
    "edu.stanford.nlp.time.SUTime:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.SUTime$RelativeTime:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Temporal:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$4:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$5:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Range resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$InexactTime:edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$PeriodicTemporalSet:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$RelativeTime:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$PartialTime:edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$3:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$2:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.TimeExpressionExtractorImpl:void resolveTimeExpression(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.time.TimeExpression,edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$1:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Temporal:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$PartialTime:edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$TemporalOp$4:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$TemporalOp:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Range resolve(edu.stanford.nlp.time.SUTime$Time,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$InexactTime:edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$PeriodicTemporalSet:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$TimeWithRange:edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$InexactTime:edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$InexactTime:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$PeriodicTemporalSet:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractorImpl:void resolveTimeExpression(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.time.TimeExpression,edu.stanford.nlp.time.SUTime$Time)"
        ]
    },
    "edu.stanford.nlp.time.TimeExpressionExtractorImpl:void resolveTimeExpression(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.time.TimeExpression,edu.stanford.nlp.time.SUTime$Time)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractorImpl:void resolveTimeExpressions(edu.stanford.nlp.util.CoreMap,java.util.List,edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.TimeExpressionExtractorImpl:java.util.List extractTimeExpressions(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.time.SUTime$Time,edu.stanford.nlp.time.SUTime$TimeIndex)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$TemporalOp$1:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$TemporalOp:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$TemporalOp:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Temporal:edu.stanford.nlp.time.SUTime$Temporal prev()",
            "edu.stanford.nlp.time.SUTime$InexactTime:edu.stanford.nlp.time.SUTime$Time add(edu.stanford.nlp.time.SUTime$Duration)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$5:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal[])",
            "edu.stanford.nlp.time.SUTime$Temporal:edu.stanford.nlp.time.SUTime$Temporal next()",
            "edu.stanford.nlp.time.SUTime$TemporalOp$2:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Range subtract(edu.stanford.nlp.time.SUTime$Duration,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Range subtract(edu.stanford.nlp.time.SUTime$Duration)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Range add(edu.stanford.nlp.time.SUTime$Duration)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Range offset(edu.stanford.nlp.time.SUTime$Duration,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$TimeWithRange:edu.stanford.nlp.time.SUTime$Time add(edu.stanford.nlp.time.SUTime$Duration)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$9:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$18:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotatorFactories$9:java.lang.Object create()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.process.TransformXML$SAXInterface:void processText(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.TransformXML$SAXInterface:void endElement(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.pipeline.JSONOutputter:void lambda$null$172(java.util.Map,edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.pipeline.JSONOutputter$Writer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.JSONOutputter$JSONWriter:void object(int,java.util.function.Consumer)"
        ]
    },
    "edu.stanford.nlp.pipeline.JSONOutputter:void lambda$print$173(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.pipeline.AnnotationOutputter$Options,edu.stanford.nlp.pipeline.JSONOutputter$Writer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.JSONOutputter$JSONWriter:void object(int,java.util.function.Consumer)"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLPServer$TokensRegexHandler:void lambda$null$26(boolean,edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.ling.tokensregex.TokenSequencePattern,edu.stanford.nlp.pipeline.JSONOutputter$Writer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.JSONOutputter$JSONWriter:void object(int,java.util.function.Consumer)"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLPServer$SemgrexHandler:void lambda$null$33(boolean,edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.semgraph.semgrex.SemgrexPattern,edu.stanford.nlp.pipeline.JSONOutputter$Writer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.JSONOutputter$JSONWriter:void object(int,java.util.function.Consumer)"
        ]
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.Classifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.LinearClassifierFactory:edu.stanford.nlp.classify.LinearClassifier trainClassifierWithInitialWeights(edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.classify.LinearClassifier)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.TimeAnnotator:void <init>(java.lang.String,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:edu.stanford.nlp.pipeline.AnnotationPipeline getPipeline(java.util.Properties,boolean)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.NodePattern CoreMapExprNodePattern(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.NodePattern CoreMapNode(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.patterns.ConstantsAndVariables:double getEditDistanceScoresOtherClass(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ConstantsAndVariables:double getEditDistanceScoresOtherClassThreshold(java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.patterns.ConstantsAndVariables:double getEditDistanceScoresThisClassThreshold(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:edu.stanford.nlp.stats.Counter convert2OneDim(java.lang.String,java.util.function.Function,java.util.Set,edu.stanford.nlp.stats.TwoDimensionalCounter,boolean,boolean,edu.stanford.nlp.stats.Counter,boolean)",
            "edu.stanford.nlp.patterns.ScorePhrasesAverageFeatures:edu.stanford.nlp.stats.Counter scorePhrases(java.lang.String,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.Counter,java.util.Set,boolean)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List findNonOverlapping(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List findNonOverlapping(java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List segment(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List segment(java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.parser.server.LexicalizedParserServer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams:java.util.Collection unorderedTypedDependencyObjectify(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.HeadFinder,edu.stanford.nlp.trees.TreeTransformer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams:java.util.Collection untypedDependencyObjectify(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.HeadFinder,edu.stanford.nlp.trees.TreeTransformer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams:java.util.Collection unorderedUntypedDependencyObjectify(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.HeadFinder,edu.stanford.nlp.trees.TreeTransformer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams:java.util.Collection typedDependencyObjectify(edu.stanford.nlp.trees.Tree,edu.stanford.nlp.trees.HeadFinder,edu.stanford.nlp.trees.TreeTransformer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.objectbank.DelimitRegExIterator$DelimitRegExIteratorFactory:java.util.Iterator getIterator(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.ColumnDocumentReaderAndWriter:java.util.Iterator getIterator(java.io.Reader)",
            "edu.stanford.nlp.trees.ud.CoNLLUDocumentReader:java.util.Iterator getIterator(java.io.Reader)"
        ]
    },
    "edu.stanford.nlp.objectbank.DelimitRegExIterator:edu.stanford.nlp.objectbank.DelimitRegExIterator defaultDelimitRegExIterator(java.io.Reader,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.objectbank.DelimitRegExIterator:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.objectbank.DelimitRegExIterator:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.maxent.CGRunner:void solveQN()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void trainAndSaveModel(edu.stanford.nlp.tagger.maxent.TaggerConfig)"
        ]
    },
    "edu.stanford.nlp.classify.LogisticClassifier:void trainWeightedData(edu.stanford.nlp.classify.GeneralDataset,float[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.maxent.CGRunner:void solveOWLQN2(double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void trainAndSaveModel(edu.stanford.nlp.tagger.maxent.TaggerConfig)"
        ]
    },
    "edu.stanford.nlp.classify.LogisticClassifier:void train(edu.stanford.nlp.classify.GeneralDataset,double,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LogisticClassifier:void train(edu.stanford.nlp.classify.GeneralDataset)"
        ]
    },
    "edu.stanford.nlp.classify.LogisticClassifierFactory:edu.stanford.nlp.classify.LogisticClassifier trainWeightedData(edu.stanford.nlp.classify.GeneralDataset,float[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.LogisticClassifierFactory:edu.stanford.nlp.classify.LogisticClassifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset,double,double,edu.stanford.nlp.classify.LogPrior,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.classify.Classifier makeClassifier(edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.classify.LogisticClassifierFactory:edu.stanford.nlp.classify.LogisticClassifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset,double,double,boolean)",
            "edu.stanford.nlp.classify.LogisticClassifierFactory:edu.stanford.nlp.classify.LogisticClassifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset,double,double)",
            "edu.stanford.nlp.classify.LogisticClassifierFactory:edu.stanford.nlp.classify.LogisticClassifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.classify.LogPrior,boolean)",
            "edu.stanford.nlp.classify.LogisticClassifierFactory:edu.stanford.nlp.classify.LogisticClassifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset,double,double,edu.stanford.nlp.classify.LogPrior)"
        ]
    },
    "edu.stanford.nlp.optimization.StochasticMinimizer:double tuneGain(edu.stanford.nlp.optimization.Function,double[],long,double,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.SMDMinimizer:edu.stanford.nlp.util.Pair tune(edu.stanford.nlp.optimization.Function,double[],long)",
            "edu.stanford.nlp.optimization.ScaledSGDMinimizer:edu.stanford.nlp.util.Pair tune(edu.stanford.nlp.optimization.Function,double[],long)",
            "edu.stanford.nlp.optimization.InefficientSGDMinimizer:edu.stanford.nlp.util.Pair tune(edu.stanford.nlp.optimization.Function,double[],long,double,double)"
        ]
    },
    "edu.stanford.nlp.optimization.InefficientSGDMinimizer:edu.stanford.nlp.util.Pair tune(edu.stanford.nlp.optimization.Function,double[],long)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier:void adaptMaxEnt(edu.stanford.nlp.classify.Dataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void adapt(edu.stanford.nlp.classify.Dataset)"
        ]
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier:void trainSemiSup(edu.stanford.nlp.classify.Dataset,edu.stanford.nlp.classify.Dataset,double[][])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void trainSemiSup()"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TestClassifier$TestSentenceProcessor:java.lang.Object process(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void tagCoreLabels(java.util.List,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void tagCoreLabels(java.util.List)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:java.util.List tagCoreLabelsOrHasWords(java.util.List,edu.stanford.nlp.process.Morphology,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger$SentenceTaggingProcessor:java.util.List process(java.util.List)",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void tagAndOutputSentence(java.util.List,boolean,edu.stanford.nlp.process.Morphology,edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle,boolean,int,java.lang.String,java.io.Writer)",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger$TaggerWrapper:java.lang.String apply(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.pipeline.POSTaggerAnnotator:edu.stanford.nlp.util.CoreMap doOneSentence(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.POSTaggerAnnotator:edu.stanford.nlp.util.CoreMap access$100(edu.stanford.nlp.pipeline.POSTaggerAnnotator,edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.pipeline.POSTaggerAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTaggerSGML(java.io.BufferedReader,java.io.BufferedWriter,edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.SentenceAlgorithms:java.util.List keyphrases(java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.SentenceAlgorithms:java.util.List keyphrases()"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotatorFactories$3:edu.stanford.nlp.pipeline.Annotator create()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Document:java.util.List sentences(java.util.Properties)",
            "edu.stanford.nlp.pipeline.AnnotatorPool:edu.stanford.nlp.pipeline.Annotator get(java.lang.String)",
            "edu.stanford.nlp.pipeline.AnnotatorFactories$3:java.lang.Object create()",
            "edu.stanford.nlp.simple.Document:void <clinit>()"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotatorImplementations:edu.stanford.nlp.pipeline.Annotator wordToSentences(java.util.Properties,boolean,java.lang.String,java.util.Set,java.util.Set,java.lang.String,java.lang.String,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorFactories$3:edu.stanford.nlp.pipeline.Annotator create()"
        ]
    },
    "edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.regexp.NumberSequenceClassifier:void main(java.lang.String[])",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTaggerSGML(java.io.BufferedReader,java.io.BufferedWriter,edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle)"
        ]
    },
    "edu.stanford.nlp.process.WordToSentenceProcessor:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.StripTagsProcessor:void main(java.lang.String[])",
            "edu.stanford.nlp.pipeline.WordsToSentencesAnnotator:void <init>(boolean)",
            "edu.stanford.nlp.sequences.ObjectBankWrapper:void fixDocLengths(java.util.List)"
        ]
    },
    "edu.stanford.nlp.pipeline.WordsToSentencesAnnotator:edu.stanford.nlp.pipeline.WordsToSentencesAnnotator nonSplitter(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorFactories$3:edu.stanford.nlp.pipeline.Annotator create()"
        ]
    },
    "edu.stanford.nlp.simple.Document:java.util.List sentences(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Document:java.util.List sentences()",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Sentence sentence(int,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.simple.Document:void <init>(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:void <init>(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.pipeline.CoreNLPProtos$Document$Builder toProtoBuilder(edu.stanford.nlp.pipeline.Annotation,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.pipeline.CoreNLPProtos$Document toProto(edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.pipeline.CoreNLPProtos$Document$Builder toProtoBuilder(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionNodePattern:boolean match(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$NodePatternState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)",
            "edu.stanford.nlp.ling.tokensregex.NodePattern:java.lang.Object matchWithResult(java.lang.Object)",
            "edu.stanford.nlp.ling.tokensregex.NodePattern$NegateNodePattern:boolean match(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$MethodCallExpression:edu.stanford.nlp.ling.tokensregex.types.Expression simplify(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$MethodCallExpression:edu.stanford.nlp.ling.tokensregex.types.Expression simplify(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.pipeline.CoNLLOutputter:void conllPrint(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream,edu.stanford.nlp.pipeline.AnnotationOutputter$Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.EntityCachingAbstractSequencePriorBIO:double[] scoresOf(int[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.EntityCachingAbstractSequencePriorBIO:double scoreOf(int[],int)",
            "edu.stanford.nlp.ie.EntityCachingAbstractSequencePriorBIO:double[] getConditionalDistribution(int[],int)"
        ]
    },
    "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:java.io.OutputStream write(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLPClient$2:void run()"
        ]
    },
    "edu.stanford.nlp.util.AcronymMatcher:boolean isFancyAcronym(java.lang.String[],java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.process.PTBTokenizer:java.lang.String labelList2Text(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:edu.stanford.nlp.ling.tokensregex.SequenceMatchResult$MatchedGroupInfo groupInfo(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLPServer$TokensRegexHandler:void lambda$null$23(edu.stanford.nlp.ling.tokensregex.TokenSequenceMatcher,edu.stanford.nlp.pipeline.JSONOutputter$Writer)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$RegexMatchResultVarExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult:edu.stanford.nlp.ling.tokensregex.SequenceMatchResult$MatchedGroupInfo groupInfo(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult:edu.stanford.nlp.ling.tokensregex.SequenceMatchResult$MatchedGroupInfo groupInfo()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult:edu.stanford.nlp.ling.tokensregex.SequenceMatchResult$MatchedGroupInfo groupInfo(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$RegexMatchResultVarExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLPServer$TokensRegexHandler:void lambda$null$23(edu.stanford.nlp.ling.tokensregex.TokenSequenceMatcher,edu.stanford.nlp.pipeline.JSONOutputter$Writer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.surface.SurfacePattern:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.surface.SurfacePattern:void <init>(edu.stanford.nlp.patterns.surface.Token[],edu.stanford.nlp.patterns.surface.PatternToken,edu.stanford.nlp.patterns.surface.Token[],edu.stanford.nlp.patterns.surface.SurfacePatternFactory$Genre)",
            "edu.stanford.nlp.patterns.surface.SurfacePattern:int compareTo(edu.stanford.nlp.patterns.surface.SurfacePattern)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.PhraseTable:boolean addPhrase(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.MultiCoreMapNodePattern$StringSequenceAnnotationPattern:void <init>(java.lang.Class,java.util.Set,boolean)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.MultiCoreMapNodePattern$StringSequenceAnnotationPattern:void <init>(java.lang.Class,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.ConfusionMatrix:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TestClassifier:void <init>(edu.stanford.nlp.tagger.maxent.MaxentTagger,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$13:java.lang.String compute(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$18:edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.SUTimeMain:void processTimebankCsv(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.pipeline.TokensRegexNERAnnotator$Entry:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.AcronymMatcher:boolean isAcronym(java.lang.String[],java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$BooleanFunction:java.lang.String getParamDesc()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$NamedValueFunction:java.lang.String toString()"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$NumericFunction:java.lang.String getParamDesc()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$NamedValueFunction:java.lang.String toString()"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$StringFunction:java.lang.String getParamDesc()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$NamedValueFunction:java.lang.String toString()"
        ]
    },
    "edu.stanford.nlp.patterns.surface.SurfacePattern:java.lang.String toStringToWrite()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP:void xmlPrint(edu.stanford.nlp.pipeline.Annotation,java.io.Writer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.TimeExpressionExtractorImpl:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeAnnotator:void <init>(boolean)"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotatorFactories$15:java.lang.Object create()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.IterableIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.IterableIterator:java.lang.Object next()",
            "edu.stanford.nlp.util.logging.Redwood$Util:void threadAndRun(java.lang.String,java.lang.Iterable,int)",
            "edu.stanford.nlp.parser.charniak.CharniakParser:java.util.List getKBestParses(java.util.List,int,boolean)",
            "edu.stanford.nlp.naturalli.Util:java.util.List cleanTree(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.parser.charniak.CharniakScoredParsesReaderWriter:java.util.List stringToParses(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.charniak.CharniakScoredParsesReaderWriter:java.lang.Iterable readScoredTrees(java.lang.String,java.io.BufferedReader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.charniak.CharniakScoredParsesReaderWriter:java.util.List stringToParses(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.charniak.CharniakScoredParsesReaderWriter$ScoredParsesIterator:void <init>(java.lang.String,edu.stanford.nlp.parser.charniak.CharniakScoredParsesReaderWriter$1)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.charniak.CharniakScoredParsesReaderWriter:java.lang.Iterable readScoredTrees(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.simple.Document$6:java.lang.Object get()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runDepparse(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.simple.Document$5:java.lang.Object get()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runParse(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.process.DocumentPreprocessor$PlainTextIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.nndep.DependencyParser:void parseTextFile(java.io.BufferedReader,java.io.PrintWriter)",
            "edu.stanford.nlp.parser.lexparser.ParseFiles:void parseFiles(java.lang.String[],int,boolean,edu.stanford.nlp.process.TokenizerFactory,java.lang.String,java.lang.String,java.util.function.Function,java.lang.String)",
            "edu.stanford.nlp.patterns.surface.AnnotatedTextReader:java.util.List parseFile(java.io.BufferedReader,java.util.Set,java.util.Map,boolean,java.lang.String)",
            "edu.stanford.nlp.process.DocumentPreprocessor:void main(java.lang.String[])",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger(java.lang.Iterable,java.io.BufferedWriter,edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle)",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:java.util.List tokenizeText(java.io.Reader,edu.stanford.nlp.process.TokenizerFactory)",
            "edu.stanford.nlp.parser.nndep.demo.DependencyParserDemo:void main(java.lang.String[])",
            "edu.stanford.nlp.sentiment.BuildBinarizedDataset:void main(java.lang.String[])",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTaggerStdin(java.io.BufferedReader,java.io.BufferedWriter,edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle)"
        ]
    },
    "edu.stanford.nlp.trees.TreePrint:edu.stanford.nlp.trees.TreeReader lambda$main$20(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader,java.lang.String)",
            "edu.stanford.nlp.trees.MemoryTreebank:void processFile(java.io.File)",
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:boolean primeNextFile()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.TregexPattern$TRegexTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Tree:edu.stanford.nlp.trees.Tree valueOf(java.lang.String,edu.stanford.nlp.trees.TreeReaderFactory)",
            "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader,java.lang.String)",
            "edu.stanford.nlp.trees.MemoryTreebank:void processFile(java.io.File)",
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:boolean primeNextFile()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SisterAnnotationStats:edu.stanford.nlp.trees.TreeReader lambda$main$116(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader,java.lang.String)",
            "edu.stanford.nlp.trees.MemoryTreebank:void processFile(java.io.File)",
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:boolean primeNextFile()"
        ]
    },
    "edu.stanford.nlp.trees.international.tuebadz.TueBaDZTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.TreeBinarizer:edu.stanford.nlp.trees.TreeReader lambda$main$42(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader,java.lang.String)",
            "edu.stanford.nlp.trees.MemoryTreebank:void processFile(java.io.File)",
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:boolean primeNextFile()"
        ]
    },
    "edu.stanford.nlp.trees.LabeledScoredTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Tree:edu.stanford.nlp.trees.Tree valueOf(java.lang.String,edu.stanford.nlp.trees.TreeReaderFactory)",
            "edu.stanford.nlp.trees.tregex.gui.Tdiff:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader,java.lang.String)",
            "edu.stanford.nlp.trees.MemoryTreebank:void processFile(java.io.File)",
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:boolean primeNextFile()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams:edu.stanford.nlp.trees.TreeReader lambda$testMemoryTreebank$108(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader,java.lang.String)",
            "edu.stanford.nlp.trees.MemoryTreebank:void processFile(java.io.File)",
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:boolean primeNextFile()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams:edu.stanford.nlp.trees.TreeReader lambda$treeReaderFactory$107(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader,java.lang.String)",
            "edu.stanford.nlp.trees.MemoryTreebank:void processFile(java.io.File)",
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:boolean primeNextFile()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:edu.stanford.nlp.trees.TreeReader lambda$main$113(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader,java.lang.String)",
            "edu.stanford.nlp.trees.MemoryTreebank:void processFile(java.io.File)",
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:boolean primeNextFile()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.TreebankAnnotator:edu.stanford.nlp.trees.TreeReader lambda$getTrees$117(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader,java.lang.String)",
            "edu.stanford.nlp.trees.MemoryTreebank:void processFile(java.io.File)",
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:boolean primeNextFile()"
        ]
    },
    "edu.stanford.nlp.trees.PennTreeReader:void <init>(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TransformingTreebank:edu.stanford.nlp.trees.TreeReader lambda$main$323(java.io.Reader)",
            "edu.stanford.nlp.trees.MemoryTreebank:edu.stanford.nlp.trees.TreeReader lambda$main$106(java.io.Reader)",
            "edu.stanford.nlp.trees.GrammaticalStructure:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.TransformingTreebank:edu.stanford.nlp.trees.TreeReader lambda$main$324(java.io.Reader)"
        ]
    },
    "edu.stanford.nlp.trees.Treebanks:edu.stanford.nlp.trees.TreeReader lambda$main$253(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader,java.lang.String)",
            "edu.stanford.nlp.trees.MemoryTreebank:void processFile(java.io.File)",
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:boolean primeNextFile()"
        ]
    },
    "edu.stanford.nlp.trees.StringLabeledScoredTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Tree:edu.stanford.nlp.trees.Tree valueOf(java.lang.String,edu.stanford.nlp.trees.TreeReaderFactory)",
            "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader,java.lang.String)",
            "edu.stanford.nlp.trees.MemoryTreebank:void processFile(java.io.File)",
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:boolean primeNextFile()"
        ]
    },
    "edu.stanford.nlp.trees.TreeTokenizerFactory$1:void <init>(edu.stanford.nlp.trees.TreeTokenizerFactory,java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TreeTokenizerFactory:edu.stanford.nlp.process.Tokenizer getTokenizer(java.io.Reader)"
        ]
    },
    "edu.stanford.nlp.objectbank.ObjectBank$OBIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void makeAnswerArraysAndTagIndex(java.util.Collection)",
            "edu.stanford.nlp.objectbank.ObjectBank:java.lang.Object[] toArray(java.lang.Object[])",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswersKBest(edu.stanford.nlp.objectbank.ObjectBank,int,java.io.PrintWriter,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void printFactorTableDocuments(edu.stanford.nlp.objectbank.ObjectBank)",
            "edu.stanford.nlp.ie.NERFeatureFactory:java.util.Collection featuresC(edu.stanford.nlp.util.PaddedList,int)",
            "edu.stanford.nlp.objectbank.ObjectBank:java.lang.Object[] toArray()",
            "edu.stanford.nlp.objectbank.ObjectBank:java.util.Iterator iterator()",
            "edu.stanford.nlp.classify.PRCurve:void <init>(java.lang.String)",
            "edu.stanford.nlp.process.WordShapeClassifier$DistributionalClusters:java.util.Map loadWordClusters(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.wordseg.ChineseStringUtils:void main(java.lang.String[])",
            "edu.stanford.nlp.sequences.ObjectBankWrapper$WrappedIterator:java.util.List next()",
            "edu.stanford.nlp.sequences.CoNLLDocumentReaderAndWriter:java.util.Iterator splitIntoDocs(java.io.Reader)",
            "edu.stanford.nlp.ie.NERFeatureFactory:void initLexicon(edu.stanford.nlp.sequences.SeqClassifierFlags)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void run()",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTaggerSGML(java.io.BufferedReader,java.io.BufferedWriter,edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void printFirstOrderProbsDocuments(edu.stanford.nlp.objectbank.ObjectBank)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void printProbsDocuments(edu.stanford.nlp.objectbank.ObjectBank)",
            "edu.stanford.nlp.objectbank.ObjectBank:int size()",
            "edu.stanford.nlp.pipeline.StanfordCoreNLPClient:void run()",
            "edu.stanford.nlp.trees.MemoryTreebank:void readSRLFile(java.lang.String)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.util.Pair readDataset(java.lang.String,boolean)",
            "edu.stanford.nlp.sequences.ObjectBankWrapper$WrappedIterator:boolean hasNext()",
            "edu.stanford.nlp.process.ChineseDocumentToSentenceProcessor:void <init>(java.lang.String)",
            "edu.stanford.nlp.classify.Dataset:edu.stanford.nlp.classify.Dataset readSVMLightFormat(java.lang.String,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index,java.util.List)",
            "edu.stanford.nlp.classify.LogisticClassifier:void main(java.lang.String[])",
            "edu.stanford.nlp.pipeline.TrueCaseAnnotator:java.util.Map loadMixedCaseMap(java.lang.String)",
            "edu.stanford.nlp.objectbank.ObjectBank:boolean contains(java.lang.Object)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.classify.Dataset getDataset(java.util.Collection,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.process.DistSimClassifier:void <init>(java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean,java.lang.String)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.classify.Dataset getBiasedDataset(edu.stanford.nlp.objectbank.ObjectBank,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.classify.PRCurve:void <init>(java.lang.String,boolean)",
            "edu.stanford.nlp.tagger.maxent.Distsim:void <init>(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.objectbank.ObjectBank$OBIterator:void <init>(edu.stanford.nlp.objectbank.ObjectBank)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.objectbank.ObjectBank:java.util.Iterator iterator()"
        ]
    },
    "edu.stanford.nlp.ling.BasicDocument:edu.stanford.nlp.ling.BasicDocument init(java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.BasicDocument:edu.stanford.nlp.ling.BasicDocument init(java.io.Reader,java.lang.String,boolean)",
            "edu.stanford.nlp.ling.BasicDocument:void main(java.lang.String[])",
            "edu.stanford.nlp.ling.BasicDocument:edu.stanford.nlp.ling.BasicDocument init(java.lang.String)",
            "edu.stanford.nlp.ling.BasicDocument:edu.stanford.nlp.ling.BasicDocument init(java.lang.String,boolean)",
            "edu.stanford.nlp.ling.BasicDocument:edu.stanford.nlp.ling.BasicDocument init()",
            "edu.stanford.nlp.ling.BasicDocument:edu.stanford.nlp.ling.BasicDocument init(java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.ComplexNodePattern$SequenceRegexPattern:java.lang.Object matchWithResult(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.ComplexNodePattern$SequenceRegexPattern:boolean match(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:boolean findNextAll()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:boolean find()"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:boolean findNextNonOverlapping()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:boolean find()"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:boolean find(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule:boolean test(edu.stanford.nlp.ling.tokensregex.MatchedExpression)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule:boolean test(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.patterns.SentenceIndex:void setUp(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.surface.PatternsForEachTokenInMemory:void <init>(java.util.Properties,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.surface.PatternsForEachTokenInMemory:void <init>(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.patterns.InvertedIndexByTokens:void <init>(java.util.Properties,java.util.Set,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.InvertedIndexByTokens:edu.stanford.nlp.patterns.InvertedIndexByTokens createIndex(java.util.Map,java.util.Properties,java.util.Set,java.lang.String,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.patterns.InvertedIndexByTokens:void <init>(java.util.Properties,java.util.Set,java.util.function.Function,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.InvertedIndexByTokens:edu.stanford.nlp.patterns.InvertedIndexByTokens loadIndex(java.util.Properties,java.util.Set,java.lang.String,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.patterns.ScorePhrases:void <init>(java.util.Properties,edu.stanford.nlp.patterns.ConstantsAndVariables)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:void setUpConstructor(java.util.Map,java.util.Map,boolean,java.util.Map,java.util.Map,java.util.Map)",
            "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:edu.stanford.nlp.stats.Counter convert2OneDim(java.lang.String,java.util.function.Function,java.util.Set,edu.stanford.nlp.stats.TwoDimensionalCounter,boolean,boolean,edu.stanford.nlp.stats.Counter,boolean)"
        ]
    },
    "edu.stanford.nlp.patterns.surface.CreatePatterns:void setUp(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.surface.CreatePatterns:void <init>(java.util.Properties,edu.stanford.nlp.patterns.ConstantsAndVariables)"
        ]
    },
    "edu.stanford.nlp.naturalli.OpenIE:void <init>(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.ClauseSplitter:edu.stanford.nlp.naturalli.ClauseSplitter train(java.util.stream.Stream,java.util.Optional,java.util.Optional,edu.stanford.nlp.naturalli.ClauseSplitterSearchProblem$Featurizer)",
            "edu.stanford.nlp.naturalli.OpenIE:void <init>()",
            "edu.stanford.nlp.pipeline.AnnotatorImplementations:edu.stanford.nlp.pipeline.Annotator openie(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.patterns.surface.PatternsForEachTokenDB:void <init>(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.surface.PatternsForEachToken:edu.stanford.nlp.patterns.surface.PatternsForEachToken getPatternsInstance(java.util.Properties,edu.stanford.nlp.patterns.ConstantsAndVariables$PatternForEachTokenWay)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:void <init>(edu.stanford.nlp.ling.tokensregex.Env,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor getExpressionExtractor(edu.stanford.nlp.ling.tokensregex.Env,java.io.Reader)"
        ]
    },
    "edu.stanford.nlp.classify.CrossValidator:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.ChineseSegmenterAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler:int[] bestSequence(edu.stanford.nlp.sequences.SequenceModel)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Document$2:java.lang.Object get()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runPOS(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.sequences.TrueCasingForNISTDocumentReaderAndWriter:java.util.Iterator getIterator(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.TrueCasingForNISTDocumentReaderAndWriter:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.international.arabic.process.ArabicDocumentReaderAndWriter:java.util.Iterator getIterator(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.objectbank.ObjectBank$OBIterator:void setNextObject()"
        ]
    },
    "edu.stanford.nlp.wordseg.Sighan2005DocumentReaderAndWriter:java.util.Iterator getIterator(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern:edu.stanford.nlp.ling.tokensregex.SequencePattern compile(edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.TokenSequencePattern:edu.stanford.nlp.ling.tokensregex.TokenSequencePattern compile(edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$TokenPatternExtractRuleCreator:void updateExtractRule(edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule,edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr,edu.stanford.nlp.ling.tokensregex.types.Expression,edu.stanford.nlp.ling.tokensregex.types.Expression)",
            "edu.stanford.nlp.pipeline.TokensRegexNERAnnotator:edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher createPatternMatcher(java.util.Map)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CompositeExtractRuleCreator:void updateExtractRule(edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule,edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr,edu.stanford.nlp.ling.tokensregex.types.Expression,edu.stanford.nlp.ling.tokensregex.types.Expression)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$Rule ExpressionExtractorRule(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.TokenSequencePattern:void <clinit>()"
        ]
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:java.util.List getOperationsFromReader(java.io.BufferedReader,edu.stanford.nlp.trees.tregex.TregexPatternCompiler)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:java.util.List getOperationsFromFile(java.lang.String,java.lang.String,edu.stanford.nlp.trees.tregex.TregexPatternCompiler)"
        ]
    },
    "edu.stanford.nlp.simple.Document$10:java.lang.Object get()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Document:java.util.Map coref(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.parser.dvparser.DVModelReranker:edu.stanford.nlp.parser.lexparser.RerankerQuery process(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.RerankingParserQuery:java.util.List rerank(java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.naturalli.RelationTripleSegmenter$3:void <init>(edu.stanford.nlp.naturalli.RelationTripleSegmenter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:void <init>(boolean)"
        ]
    },
    "edu.stanford.nlp.naturalli.RelationTripleSegmenter:void <init>(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.naturalli.RelationTripleSegmenter:void <init>()",
            "edu.stanford.nlp.naturalli.OpenIE:void <init>(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.trees.SemanticHeadFinder:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.hcoref.md.CorefMentionFinder:edu.stanford.nlp.trees.tregex.TregexPattern[] getPleonasticPatterns()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:void <clinit>()"
        ]
    },
    "edu.stanford.nlp.dcoref.MentionExtractor:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.tregex.TregexPattern[] getPleonasticPatterns()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:void <clinit>()"
        ]
    },
    "edu.stanford.nlp.hcoref.md.CorefMentionFinder:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.UniversalSemanticHeadFinder:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.SUTime$GroundedTime:edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$TimeWithRange:edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time,edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$PartialTime:edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$GroundedTime:edu.stanford.nlp.time.SUTime$Temporal intersect(edu.stanford.nlp.time.SUTime$Temporal)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Temporal intersect(edu.stanford.nlp.time.SUTime$Temporal)",
            "edu.stanford.nlp.time.SUTime$PeriodicTemporalSet:edu.stanford.nlp.time.SUTime$Temporal intersect(edu.stanford.nlp.time.SUTime$Temporal)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$7:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Time:boolean contains(edu.stanford.nlp.time.SUTime$Time)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.SUTime$InexactTime:void <init>(org.joda.time.Partial)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime:void <clinit>()"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Time beginTime()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$CompositePartialTime:edu.stanford.nlp.time.SUTime$Range getIntersectedRange(edu.stanford.nlp.time.SUTime$CompositePartialTime,edu.stanford.nlp.time.SUTime$Range,edu.stanford.nlp.time.SUTime$Duration)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$TimeWithRange:edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$TimeWithRange:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Time max(edu.stanford.nlp.time.SUTime$Time,edu.stanford.nlp.time.SUTime$Time)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Temporal intersect(edu.stanford.nlp.time.SUTime$Temporal)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$13:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$InexactTime:int compareTo(edu.stanford.nlp.time.SUTime$Time)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$TemporalOp$5:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Time max(edu.stanford.nlp.time.SUTime$Time,edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$InexactTime:int compareTo(edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$InexactTime:int compareTo(java.lang.Object)",
            "edu.stanford.nlp.time.SUTime$PartialTime:edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$2:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Time min(edu.stanford.nlp.time.SUTime$Time,edu.stanford.nlp.time.SUTime$Time)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Time:int compareTo(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Interval:java.lang.Comparable min(java.lang.Comparable,java.lang.Comparable)",
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:int compare(edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry,edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry)",
            "edu.stanford.nlp.util.Pair$BySecondReversePairComparator:int compare(edu.stanford.nlp.util.Pair,edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.Interval:int getRelationFlags(edu.stanford.nlp.util.Interval)",
            "edu.stanford.nlp.util.Interval:boolean overlaps(edu.stanford.nlp.util.Interval)",
            "edu.stanford.nlp.util.Interval:java.lang.Comparable max(java.lang.Comparable,java.lang.Comparable)",
            "edu.stanford.nlp.util.Interval:edu.stanford.nlp.util.Interval toInterval(java.lang.Comparable,java.lang.Comparable,int)",
            "edu.stanford.nlp.util.Pair$ByFirstReversePairComparator:int compare(edu.stanford.nlp.util.Pair,edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.IntervalTree:void getOverlapping(edu.stanford.nlp.util.IntervalTree$TreeNode,edu.stanford.nlp.util.Interval,java.util.List)",
            "edu.stanford.nlp.util.Pair$BySecondPairComparator:int compare(edu.stanford.nlp.util.Pair,edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.Interval:boolean containsOpen(java.lang.Comparable)",
            "edu.stanford.nlp.util.Pair$ByFirstPairComparator:int compare(edu.stanford.nlp.util.Pair,edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.FuzzyInterval:edu.stanford.nlp.util.FuzzyInterval toInterval(edu.stanford.nlp.util.FuzzyInterval$FuzzyComparable,edu.stanford.nlp.util.FuzzyInterval$FuzzyComparable,int)",
            "edu.stanford.nlp.util.FuzzyInterval:int getRelationFlags(edu.stanford.nlp.util.Interval)",
            "edu.stanford.nlp.util.Triple:int compareTo(edu.stanford.nlp.util.Triple)",
            "edu.stanford.nlp.util.Interval:edu.stanford.nlp.util.Interval$RelType getRelation(edu.stanford.nlp.util.Interval)",
            "edu.stanford.nlp.stats.IntCounter$NaturalComparator:int compare(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.util.IntervalTree:boolean contains(edu.stanford.nlp.util.IntervalTree$TreeNode,edu.stanford.nlp.util.Interval,java.util.function.Function)",
            "edu.stanford.nlp.util.Interval:void <init>(java.lang.Comparable,java.lang.Comparable,int)",
            "edu.stanford.nlp.util.Interval:boolean contains(java.lang.Comparable)",
            "edu.stanford.nlp.util.IntervalTree:boolean overlaps(edu.stanford.nlp.util.IntervalTree$TreeNode,edu.stanford.nlp.util.Interval)",
            "edu.stanford.nlp.util.Pair:int compareTo(edu.stanford.nlp.util.Pair)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Duration distance(edu.stanford.nlp.time.SUTime$Time,edu.stanford.nlp.time.SUTime$Time)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Time min(edu.stanford.nlp.time.SUTime$Time,edu.stanford.nlp.time.SUTime$Time)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Temporal intersect(edu.stanford.nlp.time.SUTime$Temporal)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$12:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Range:void <init>(edu.stanford.nlp.time.SUTime$Time,edu.stanford.nlp.time.SUTime$Time)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Temporal intersect(edu.stanford.nlp.time.SUTime$Temporal)",
            "edu.stanford.nlp.time.SUTime$PartialTime:edu.stanford.nlp.time.SUTime$Range getRange(int,edu.stanford.nlp.time.SUTime$Duration)",
            "edu.stanford.nlp.time.JollyDayHolidays$JollyHoliday:edu.stanford.nlp.time.SUTime$Range getRange(int,edu.stanford.nlp.time.SUTime$Duration)",
            "edu.stanford.nlp.time.SUTime:void <clinit>()",
            "edu.stanford.nlp.time.SUTime$RelativeTime:edu.stanford.nlp.time.SUTime$Range getRange(int,edu.stanford.nlp.time.SUTime$Duration)",
            "edu.stanford.nlp.time.SUTime$GroundedTime:edu.stanford.nlp.time.SUTime$Range getRange(int,edu.stanford.nlp.time.SUTime$Duration)",
            "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Range getRange(int,edu.stanford.nlp.time.SUTime$Duration)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$DurationWithFields:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$TemporalOp$4:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$5:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$PeriodicTemporalSet:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$3:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$2:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.TimeExpressionExtractorImpl:void resolveTimeExpression(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.time.TimeExpression,edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$1:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Time:boolean isComparable(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.FuzzyInterval:int getRelationFlags(edu.stanford.nlp.util.Interval)"
        ]
    },
    "edu.stanford.nlp.time.JollyDayHolidays$JollyHoliday:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Temporal:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$4:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$5:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Range resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$InexactTime:edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$PeriodicTemporalSet:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$RelativeTime:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$PartialTime:edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$3:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$2:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.TimeExpressionExtractorImpl:void resolveTimeExpression(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.time.TimeExpression,edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$1:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)"
        ]
    },
    "edu.stanford.nlp.time.JollyDayHolidays$JollyHoliday:edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Temporal intersect(edu.stanford.nlp.time.SUTime$Temporal)",
            "edu.stanford.nlp.time.JollyDayHolidays$JollyHoliday:edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$TimeWithRange:edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time,edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$PartialTime:edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$CompositePartialTime:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Temporal:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$4:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$5:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Range resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$InexactTime:edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$PeriodicTemporalSet:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$RelativeTime:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$PartialTime:edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$3:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$2:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.TimeExpressionExtractorImpl:void resolveTimeExpression(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.time.TimeExpression,edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$1:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$PartialTime:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Temporal:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$4:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$5:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Range resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$InexactTime:edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$PeriodicTemporalSet:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$RelativeTime:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$PartialTime:edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$3:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$2:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.TimeExpressionExtractorImpl:void resolveTimeExpression(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.time.TimeExpression,edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$1:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$PartialTime:edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Temporal intersect(edu.stanford.nlp.time.SUTime$Temporal)",
            "edu.stanford.nlp.time.JollyDayHolidays$JollyHoliday:edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$TimeWithRange:edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time,edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$PartialTime:edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$CompositePartialTime:edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$TemporalOp$4:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$5:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$PeriodicTemporalSet:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$3:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$2:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.TimeExpressionExtractorImpl:void resolveTimeExpression(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.time.TimeExpression,edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$1:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$InexactTime:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Temporal:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$4:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$5:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Range resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$InexactTime:edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$PeriodicTemporalSet:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$RelativeTime:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$PartialTime:edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$3:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$2:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.TimeExpressionExtractorImpl:void resolveTimeExpression(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.time.TimeExpression,edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$1:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)"
        ]
    },
    "edu.stanford.nlp.time.TimeExpressionExtractorImpl:void resolveTimeExpressions(edu.stanford.nlp.util.CoreMap,java.util.List,edu.stanford.nlp.time.SUTime$Time)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractorImpl:java.util.List extractTimeExpressions(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.time.SUTime$Time,edu.stanford.nlp.time.SUTime$TimeIndex)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Temporal:edu.stanford.nlp.time.SUTime$Temporal prev()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$TemporalOp$4:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$PartialTime:edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time,int)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$InexactTime:edu.stanford.nlp.time.SUTime$Time add(edu.stanford.nlp.time.SUTime$Duration)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Time mid()",
            "edu.stanford.nlp.time.SUTime$CompositePartialTime:edu.stanford.nlp.time.SUTime$Range getIntersectedRange(edu.stanford.nlp.time.SUTime$CompositePartialTime,edu.stanford.nlp.time.SUTime$Range,edu.stanford.nlp.time.SUTime$Duration)",
            "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Time subtract(edu.stanford.nlp.time.SUTime$Duration)",
            "edu.stanford.nlp.time.SUTime$Duration:edu.stanford.nlp.time.SUTime$Time toTime(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Time offset(edu.stanford.nlp.time.SUTime$Duration,int)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$TemporalOp:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.SUTime$Temporal:edu.stanford.nlp.time.SUTime$Temporal next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$PartialTime:edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$1:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Range subtract(edu.stanford.nlp.time.SUTime$Duration)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.SUTime$TimeWithRange:edu.stanford.nlp.time.SUTime$Time add(edu.stanford.nlp.time.SUTime$Duration)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Time mid()",
            "edu.stanford.nlp.time.SUTime$CompositePartialTime:edu.stanford.nlp.time.SUTime$Range getIntersectedRange(edu.stanford.nlp.time.SUTime$CompositePartialTime,edu.stanford.nlp.time.SUTime$Range,edu.stanford.nlp.time.SUTime$Duration)",
            "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Time subtract(edu.stanford.nlp.time.SUTime$Duration)",
            "edu.stanford.nlp.time.SUTime$Duration:edu.stanford.nlp.time.SUTime$Time toTime(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Time offset(edu.stanford.nlp.time.SUTime$Duration,int)"
        ]
    },
    "edu.stanford.nlp.process.TransformXML$SAXInterface:void endElement(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.JSONOutputter$JSONWriter:void object(int,java.util.function.Consumer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.JSONOutputter$JSONWriter:void object(java.util.function.Consumer)",
            "edu.stanford.nlp.pipeline.JSONOutputter$JSONWriter:void routeObject(int,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.patterns.ConstantsAndVariables:double getEditDistanceScoresOtherClassThreshold(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.ScorePatternsRatioModifiedFreq:edu.stanford.nlp.stats.Counter convert2OneDim(java.lang.String,java.util.function.Function,java.util.Set,edu.stanford.nlp.stats.TwoDimensionalCounter,boolean,boolean,edu.stanford.nlp.stats.Counter,boolean)",
            "edu.stanford.nlp.patterns.ScorePhrasesAverageFeatures:edu.stanford.nlp.stats.Counter scorePhrases(java.lang.String,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.TwoDimensionalCounter,edu.stanford.nlp.stats.Counter,java.util.Set,boolean)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List findNonOverlapping(java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.matcher.TrieMapMatcher:java.util.List segment(java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sequences.ColumnDocumentReaderAndWriter:java.util.Iterator getIterator(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.ud.CoNLLUDocumentReader:java.util.Iterator getIterator(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.semgraph.semgrex.SemgrexPattern:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.classify.LogisticClassifier:void train(edu.stanford.nlp.classify.GeneralDataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.LogisticClassifierFactory:edu.stanford.nlp.classify.LogisticClassifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset,double,double,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LogisticClassifier:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.classify.LogisticClassifierFactory:edu.stanford.nlp.classify.LogisticClassifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset,double,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LogisticClassifierFactory:edu.stanford.nlp.classify.LogisticClassifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset,double)"
        ]
    },
    "edu.stanford.nlp.classify.LogisticClassifierFactory:edu.stanford.nlp.classify.LogisticClassifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset,edu.stanford.nlp.classify.LogPrior,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.classify.Classifier makeClassifier(edu.stanford.nlp.classify.GeneralDataset)"
        ]
    },
    "edu.stanford.nlp.classify.LogisticClassifierFactory:edu.stanford.nlp.classify.LogisticClassifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset,double,double,edu.stanford.nlp.classify.LogPrior)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier:void adapt(edu.stanford.nlp.classify.Dataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void adapt(edu.stanford.nlp.objectbank.ObjectBank,edu.stanford.nlp.classify.Dataset)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void tagCoreLabels(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:java.util.List tagCoreLabelsOrHasWords(java.util.List,edu.stanford.nlp.process.Morphology,boolean)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger$SentenceTaggingProcessor:java.util.List process(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger$SentenceTaggingProcessor:java.lang.Object process(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void tagAndOutputSentence(java.util.List,boolean,edu.stanford.nlp.process.Morphology,edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle,boolean,int,java.lang.String,java.io.Writer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger(java.lang.Iterable,java.io.BufferedWriter,edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle)",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTaggerStdin(java.io.BufferedReader,java.io.BufferedWriter,edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle)"
        ]
    },
    "edu.stanford.nlp.pipeline.POSTaggerAnnotator:edu.stanford.nlp.util.CoreMap access$100(edu.stanford.nlp.pipeline.POSTaggerAnnotator,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.POSTaggerAnnotator$POSTaggerProcessor:edu.stanford.nlp.util.CoreMap process(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.pipeline.POSTaggerAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runNER(java.util.Properties)",
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runParse(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runOpenie(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runRegexner(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runPOS(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runDepparse(java.util.Properties)",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runNatlog(java.util.Properties)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runLemma(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.simple.SentenceAlgorithms:java.util.List keyphrases()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.AnnotatorFactories$3:java.lang.Object create()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Document:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.process.StripTagsProcessor:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.WordsToSentencesAnnotator:void <init>(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.WordsToSentencesAnnotator:void <init>()",
            "edu.stanford.nlp.pipeline.AnnotationPipeline:void main(java.lang.String[])",
            "edu.stanford.nlp.time.SUTimeMain:edu.stanford.nlp.pipeline.AnnotationPipeline getPipeline(java.util.Properties,boolean)"
        ]
    },
    "edu.stanford.nlp.sequences.ObjectBankWrapper:void fixDocLengths(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.ObjectBankWrapper:void access$000(edu.stanford.nlp.sequences.ObjectBankWrapper,java.util.List)"
        ]
    },
    "edu.stanford.nlp.simple.Document:java.util.List sentences()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.pipeline.CoreNLPProtos$Document serialize()",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runParse(java.util.Properties)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Sentence sentence(int)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runPOS(java.util.Properties)",
            "edu.stanford.nlp.simple.Sentence:void <init>(edu.stanford.nlp.simple.Document,edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Sentence sentence(int,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:void <init>(java.lang.String,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.simple.Sentence:void <init>(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:void <init>(edu.stanford.nlp.naturalli.SentenceFragment)"
        ]
    },
    "edu.stanford.nlp.pipeline.ProtobufAnnotationSerializer:edu.stanford.nlp.pipeline.CoreNLPProtos$Document$Builder toProtoBuilder(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Document:void <init>(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.NodePattern:java.lang.Object matchWithResult(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$NodePatternState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.NodePattern$NegateNodePattern:boolean match(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$NodePatternState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)",
            "edu.stanford.nlp.ling.tokensregex.NodePattern:java.lang.Object matchWithResult(java.lang.Object)",
            "edu.stanford.nlp.ling.tokensregex.NodePattern$NegateNodePattern:boolean match(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ie.EntityCachingAbstractSequencePriorBIO:double scoreOf(int[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.EntityCachingAbstractSequencePriorBIO:double[] getConditionalDistribution(int[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$RegexMatchResultVarExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$MethodCallExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequenceMatchResultExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Value attemptTypeConversion(edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue,edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$VarAssignmentExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$WrappedExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringMatchResultExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(java.util.regex.MatchResult)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$ConditionalExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$IfExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.patterns.surface.SurfacePattern:void <init>(edu.stanford.nlp.patterns.surface.Token[],edu.stanford.nlp.patterns.surface.PatternToken,edu.stanford.nlp.patterns.surface.Token[],edu.stanford.nlp.patterns.surface.SurfacePatternFactory$Genre)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.surface.SurfacePattern:edu.stanford.nlp.patterns.surface.SurfacePattern copyNewToken()",
            "edu.stanford.nlp.patterns.surface.SurfacePatternFactory:java.util.Set getContext(java.util.List,int,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.patterns.surface.SurfacePattern:int compareTo(edu.stanford.nlp.patterns.surface.SurfacePattern)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.surface.SurfacePattern:int compareTo(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.MultiCoreMapNodePattern$StringSequenceAnnotationPattern:void <init>(java.lang.Class,java.util.Set,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$OrPatternExpr:edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr optimizeOrStringSeqs()",
            "edu.stanford.nlp.ling.tokensregex.MultiCoreMapNodePattern$StringSequenceAnnotationPattern:void <init>(java.lang.Class,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$NamedValueFunction:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Pair:void save(java.io.DataOutputStream)",
            "edu.stanford.nlp.patterns.ConstantsAndVariables$ScorePhraseMeasures:int compareTo(java.lang.Object)",
            "edu.stanford.nlp.semgraph.semgrex.NodePattern:boolean nodeAttrMatch(edu.stanford.nlp.ling.IndexedWord,edu.stanford.nlp.semgraph.SemanticGraph,boolean)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass$1:java.util.Map apply(edu.stanford.nlp.ling.CoreLabel)",
            "edu.stanford.nlp.patterns.surface.Token:boolean equals(java.lang.Object)",
            "edu.stanford.nlp.pipeline.JSONOutputter$JSONWriter:void routeObject(int,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.time.TimeAnnotator:void <init>(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeAnnotator:void <init>()"
        ]
    },
    "edu.stanford.nlp.parser.charniak.CharniakParser:java.util.List getKBestParses(java.util.List,int,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.charniak.CharniakParser:java.util.List getKBestParses(java.util.List,int)"
        ]
    },
    "edu.stanford.nlp.parser.charniak.CharniakScoredParsesReaderWriter:java.util.List stringToParses(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.charniak.CharniakScoredParsesReaderWriter:java.lang.Iterable readScoredTrees(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.charniak.CharniakParser:java.lang.Iterable getKBestParses(java.lang.Iterable,int,boolean)",
            "edu.stanford.nlp.parser.charniak.CharniakParser:java.util.List getKBestParses(java.util.List,int,boolean)"
        ]
    },
    "edu.stanford.nlp.trees.TransformingTreebank:edu.stanford.nlp.trees.TreeReader lambda$main$323(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader,java.lang.String)",
            "edu.stanford.nlp.trees.MemoryTreebank:void processFile(java.io.File)",
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:boolean primeNextFile()"
        ]
    },
    "edu.stanford.nlp.trees.MemoryTreebank:edu.stanford.nlp.trees.TreeReader lambda$main$106(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader,java.lang.String)",
            "edu.stanford.nlp.trees.MemoryTreebank:void processFile(java.io.File)",
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:boolean primeNextFile()"
        ]
    },
    "edu.stanford.nlp.trees.TransformingTreebank:edu.stanford.nlp.trees.TreeReader lambda$main$324(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader,java.lang.String)",
            "edu.stanford.nlp.trees.MemoryTreebank:void processFile(java.io.File)",
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:boolean primeNextFile()"
        ]
    },
    "edu.stanford.nlp.trees.TreeTokenizerFactory:edu.stanford.nlp.process.Tokenizer getTokenizer(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TreePrint:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.TreeTokenizerFactory:edu.stanford.nlp.process.Tokenizer getTokenizer(java.io.Reader,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.objectbank.ObjectBank:java.lang.Object[] toArray(java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.ObjectBankWrapper:java.util.List[] toArray(java.util.List[])"
        ]
    },
    "edu.stanford.nlp.objectbank.ObjectBank:java.lang.Object[] toArray()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.ObjectBankWrapper:java.lang.Object[] toArray()"
        ]
    },
    "edu.stanford.nlp.objectbank.ObjectBank:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void makeAnswerArraysAndTagIndex(java.util.Collection)",
            "edu.stanford.nlp.objectbank.ObjectBank:java.lang.Object[] toArray(java.lang.Object[])",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswersKBest(edu.stanford.nlp.objectbank.ObjectBank,int,java.io.PrintWriter,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void printFactorTableDocuments(edu.stanford.nlp.objectbank.ObjectBank)",
            "edu.stanford.nlp.ie.NERFeatureFactory:java.util.Collection featuresC(edu.stanford.nlp.util.PaddedList,int)",
            "edu.stanford.nlp.objectbank.ObjectBank:java.lang.Object[] toArray()",
            "edu.stanford.nlp.classify.PRCurve:void <init>(java.lang.String)",
            "edu.stanford.nlp.process.WordShapeClassifier$DistributionalClusters:java.util.Map loadWordClusters(java.lang.String,java.lang.String)",
            "edu.stanford.nlp.wordseg.ChineseStringUtils:void main(java.lang.String[])",
            "edu.stanford.nlp.sequences.CoNLLDocumentReaderAndWriter:java.util.Iterator splitIntoDocs(java.io.Reader)",
            "edu.stanford.nlp.ie.NERFeatureFactory:void initLexicon(edu.stanford.nlp.sequences.SeqClassifierFlags)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void run()",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTaggerSGML(java.io.BufferedReader,java.io.BufferedWriter,edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void printFirstOrderProbsDocuments(edu.stanford.nlp.objectbank.ObjectBank)",
            "edu.stanford.nlp.sequences.ObjectBankWrapper:java.util.Iterator iterator()",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void printProbsDocuments(edu.stanford.nlp.objectbank.ObjectBank)",
            "edu.stanford.nlp.objectbank.ObjectBank:int size()",
            "edu.stanford.nlp.pipeline.StanfordCoreNLPClient:void run()",
            "edu.stanford.nlp.trees.MemoryTreebank:void readSRLFile(java.lang.String)",
            "edu.stanford.nlp.classify.ColumnDataClassifier:edu.stanford.nlp.util.Pair readDataset(java.lang.String,boolean)",
            "edu.stanford.nlp.process.ChineseDocumentToSentenceProcessor:void <init>(java.lang.String)",
            "edu.stanford.nlp.classify.Dataset:edu.stanford.nlp.classify.Dataset readSVMLightFormat(java.lang.String,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index,java.util.List)",
            "edu.stanford.nlp.classify.LogisticClassifier:void main(java.lang.String[])",
            "edu.stanford.nlp.objectbank.ObjectBank:boolean isEmpty()",
            "edu.stanford.nlp.pipeline.TrueCaseAnnotator:java.util.Map loadMixedCaseMap(java.lang.String)",
            "edu.stanford.nlp.objectbank.ObjectBank:boolean contains(java.lang.Object)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.classify.Dataset getDataset(java.util.Collection,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.process.DistSimClassifier:void <init>(java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean,java.lang.String)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.classify.Dataset getBiasedDataset(edu.stanford.nlp.objectbank.ObjectBank,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.classify.PRCurve:void <init>(java.lang.String,boolean)",
            "edu.stanford.nlp.tagger.maxent.Distsim:void <init>(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.process.WordShapeClassifier$DistributionalClusters:java.util.Map loadWordClusters(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.WordShapeClassifier$DistributionalClusters:void <clinit>()"
        ]
    },
    "edu.stanford.nlp.wordseg.ChineseStringUtils:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sequences.CoNLLDocumentReaderAndWriter:java.util.Iterator splitIntoDocs(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.CoNLLDocumentReaderAndWriter:java.util.Iterator access$000(java.io.Reader)"
        ]
    },
    "edu.stanford.nlp.objectbank.ObjectBank:int size()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.ObjectBankWrapper:int size()",
            "edu.stanford.nlp.pipeline.StanfordCoreNLPClient:void run()",
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void run()"
        ]
    },
    "edu.stanford.nlp.sequences.ObjectBankWrapper$WrappedIterator:boolean hasNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void makeAnswerArraysAndTagIndex(java.util.Collection)",
            "edu.stanford.nlp.ie.crf.CRFFeatureExporter:void printFeatures(java.lang.String,java.util.Collection)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteViterbiSearchGraph(java.lang.String,java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswersKBest(edu.stanford.nlp.objectbank.ObjectBank,int,java.io.PrintWriter,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List getCliqueTrees(java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void printFactorTableDocuments(edu.stanford.nlp.objectbank.ObjectBank)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void printFirstOrderProbsDocuments(edu.stanford.nlp.objectbank.ObjectBank)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List classifyToCharacterOffsets(java.lang.String)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void printProbsDocuments(edu.stanford.nlp.objectbank.ObjectBank)",
            "edu.stanford.nlp.ie.crf.CRFClassifierWithDropout:java.util.Collection loadAuxiliaryData(java.util.Collection,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.international.arabic.process.ArabicSegmenter:void evaluate(java.io.PrintWriter)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void makeAnswerArraysAndTagIndex(java.util.Collection)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void classifyAndWriteAnswers(java.util.Collection,java.util.List,java.io.PrintWriter,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswers(java.util.Collection,java.io.PrintWriter,edu.stanford.nlp.sequences.DocumentReaderAndWriter,boolean)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List segmentString(java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.lang.String classifyToString(java.lang.String,java.lang.String,boolean)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List classifyRaw(java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void printLabelInformation(java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void train(java.util.Collection,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.classify.Dataset getDataset(java.util.Collection,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.classify.Dataset getBiasedDataset(edu.stanford.nlp.objectbank.ObjectBank,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List documentsToDataAndLabelsList(java.util.Collection)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List classify(java.lang.String)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List classifyFile(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.process.ChineseDocumentToSentenceProcessor:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.wordseg.Sighan2005DocumentReaderAndWriter:void init(edu.stanford.nlp.sequences.SeqClassifierFlags)",
            "edu.stanford.nlp.wordseg.ChineseDictionary:void main(java.lang.String[])",
            "edu.stanford.nlp.process.ChineseDocumentToSentenceProcessor:void <init>()"
        ]
    },
    "edu.stanford.nlp.objectbank.ObjectBank:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.ObjectBankWrapper:boolean contains(java.util.List)",
            "edu.stanford.nlp.objectbank.ObjectBank:boolean containsAll(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.ling.BasicDocument:edu.stanford.nlp.ling.BasicDocument init(java.io.Reader,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.BasicDocument:edu.stanford.nlp.ling.BasicDocument init(java.io.Reader,boolean)",
            "edu.stanford.nlp.ling.BasicDocument:edu.stanford.nlp.ling.BasicDocument init(java.io.Reader)",
            "edu.stanford.nlp.ling.BasicDocument:edu.stanford.nlp.ling.BasicDocument init(java.net.URL,java.lang.String,boolean)",
            "edu.stanford.nlp.ling.BasicDocument:void main(java.lang.String[])",
            "edu.stanford.nlp.ling.BasicDocument:edu.stanford.nlp.ling.BasicDocument init(java.io.Reader,java.lang.String)",
            "edu.stanford.nlp.ling.BasicDocument:edu.stanford.nlp.ling.BasicDocument init(java.io.File,java.lang.String,boolean)"
        ]
    },
    "edu.stanford.nlp.ling.BasicDocument:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.BasicDocument:edu.stanford.nlp.ling.BasicDocument init(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.StripTagsProcessor:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ling.BasicDocument:edu.stanford.nlp.ling.BasicDocument init(java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.DocumentReader:edu.stanford.nlp.ling.BasicDocument parseDocumentText(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ling.BasicDocument:edu.stanford.nlp.ling.BasicDocument init()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.BasicDocument:edu.stanford.nlp.ling.BasicDocument init(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:boolean find()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:java.util.List replaceAll(java.util.List)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatcher$1:edu.stanford.nlp.ling.tokensregex.SequenceMatchResult getNext()",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:java.util.List replaceAllExtended(java.util.List)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:java.util.List replaceFirstExtended(java.util.List)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:java.util.List replaceFirst(java.util.List)",
            "edu.stanford.nlp.ie.NumberNormalizer:java.util.List findNumbers(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.process.WordToSentenceProcessor:java.util.List wordsToSentences(java.util.List)",
            "edu.stanford.nlp.ie.NumberNormalizer:java.util.List findNumberRanges(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchAction$StartMatchAction:edu.stanford.nlp.ling.tokensregex.SequenceMatchResult apply(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult,int[])",
            "edu.stanford.nlp.pipeline.StanfordCoreNLPServer$TokensRegexHandler:void lambda$null$24(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.ling.tokensregex.TokenSequencePattern,edu.stanford.nlp.pipeline.JSONOutputter$Writer)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequencePatternExtractRule:boolean extract(java.util.List,java.util.List)",
            "edu.stanford.nlp.naturalli.NaturalLogicAnnotator:void annotateUnaries(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.surface.PatternsForEachTokenInMemory:void <init>(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.surface.PatternsForEachToken:edu.stanford.nlp.patterns.surface.PatternsForEachToken getPatternsInstance(java.util.Properties,edu.stanford.nlp.patterns.ConstantsAndVariables$PatternForEachTokenWay)"
        ]
    },
    "edu.stanford.nlp.patterns.InvertedIndexByTokens:edu.stanford.nlp.patterns.InvertedIndexByTokens loadIndex(java.util.Properties,java.util.Set,java.lang.String,java.util.function.Function)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.SentenceIndex:edu.stanford.nlp.patterns.SentenceIndex loadIndex(java.lang.Class,java.util.Properties,java.util.Set,java.lang.String,java.util.function.Function)"
        ]
    },
    "edu.stanford.nlp.naturalli.OpenIE:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.AnnotatorImplementations:edu.stanford.nlp.pipeline.Annotator openie(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorFactories$20:edu.stanford.nlp.pipeline.Annotator create()"
        ]
    },
    "edu.stanford.nlp.patterns.surface.PatternsForEachToken:edu.stanford.nlp.patterns.surface.PatternsForEachToken getPatternsInstance(java.util.Properties,edu.stanford.nlp.patterns.ConstantsAndVariables$PatternForEachTokenWay)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.surface.CreatePatterns$CreatePatternsThread:void <init>(edu.stanford.nlp.patterns.surface.CreatePatterns,java.util.Map,java.util.List,java.util.Properties,edu.stanford.nlp.patterns.ConstantsAndVariables$PatternForEachTokenWay)",
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.stats.Counter getPatterns(java.lang.String,java.util.Set,edu.stanford.nlp.patterns.Pattern,edu.stanford.nlp.stats.Counter,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$TokenPatternExtractRuleCreator:void updateExtractRule(edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule,edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr,edu.stanford.nlp.ling.tokensregex.types.Expression,edu.stanford.nlp.ling.tokensregex.types.Expression)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$TokenPatternExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr,edu.stanford.nlp.ling.tokensregex.types.Expression)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CompositeExtractRuleCreator:void updateExtractRule(edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule,edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr,edu.stanford.nlp.ling.tokensregex.types.Expression,edu.stanford.nlp.ling.tokensregex.types.Expression)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CompositeExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr,edu.stanford.nlp.ling.tokensregex.types.Expression)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.TokenSequencePattern:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:java.util.List getOperationsFromFile(java.lang.String,java.lang.String,edu.stanford.nlp.trees.tregex.TregexPatternCompiler)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalPOSMapper:void load(java.lang.String)",
            "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.naturalli.RelationTripleSegmenter:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.SUTime$TimeWithRange:edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Temporal intersect(edu.stanford.nlp.time.SUTime$Temporal)",
            "edu.stanford.nlp.time.SUTime$TimeWithRange:edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time,edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$PartialTime:edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time,edu.stanford.nlp.time.SUTime$Time)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$CompositePartialTime:edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Temporal intersect(edu.stanford.nlp.time.SUTime$Temporal)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Temporal intersect(edu.stanford.nlp.time.SUTime$Temporal)",
            "edu.stanford.nlp.time.SUTime$PeriodicTemporalSet:edu.stanford.nlp.time.SUTime$Temporal intersect(edu.stanford.nlp.time.SUTime$Temporal)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$7:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$PeriodicTemporalSet:edu.stanford.nlp.time.SUTime$Temporal intersect(edu.stanford.nlp.time.SUTime$Temporal)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.SUTime$TemporalOp$7:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$RelativeTime:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$TimeWithRange:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Temporal:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$4:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$5:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Range resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$InexactTime:edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$PeriodicTemporalSet:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$RelativeTime:edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$PartialTime:edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$3:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$2:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.TimeExpressionExtractorImpl:void resolveTimeExpression(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.time.TimeExpression,edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$1:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Temporal intersect(edu.stanford.nlp.time.SUTime$Temporal)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Temporal intersect(edu.stanford.nlp.time.SUTime$Temporal)",
            "edu.stanford.nlp.time.SUTime$PeriodicTemporalSet:edu.stanford.nlp.time.SUTime$Temporal intersect(edu.stanford.nlp.time.SUTime$Temporal)",
            "edu.stanford.nlp.time.SUTime$TemporalOp$7:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)",
            "edu.stanford.nlp.time.SUTime$TimeWithRange:edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$TemporalOp$13:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.SUTime$InexactTime:int compareTo(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Interval:java.lang.Comparable min(java.lang.Comparable,java.lang.Comparable)",
            "edu.stanford.nlp.util.BinaryHeapPriorityQueue:int compare(edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry,edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry)",
            "edu.stanford.nlp.util.Pair$BySecondReversePairComparator:int compare(edu.stanford.nlp.util.Pair,edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.Interval:int getRelationFlags(edu.stanford.nlp.util.Interval)",
            "edu.stanford.nlp.util.Interval:boolean overlaps(edu.stanford.nlp.util.Interval)",
            "edu.stanford.nlp.util.Interval:java.lang.Comparable max(java.lang.Comparable,java.lang.Comparable)",
            "edu.stanford.nlp.util.Interval:edu.stanford.nlp.util.Interval toInterval(java.lang.Comparable,java.lang.Comparable,int)",
            "edu.stanford.nlp.util.Pair$ByFirstReversePairComparator:int compare(edu.stanford.nlp.util.Pair,edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.IntervalTree:void getOverlapping(edu.stanford.nlp.util.IntervalTree$TreeNode,edu.stanford.nlp.util.Interval,java.util.List)",
            "edu.stanford.nlp.util.Pair$BySecondPairComparator:int compare(edu.stanford.nlp.util.Pair,edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.Interval:boolean containsOpen(java.lang.Comparable)",
            "edu.stanford.nlp.util.Pair$ByFirstPairComparator:int compare(edu.stanford.nlp.util.Pair,edu.stanford.nlp.util.Pair)",
            "edu.stanford.nlp.util.FuzzyInterval:edu.stanford.nlp.util.FuzzyInterval toInterval(edu.stanford.nlp.util.FuzzyInterval$FuzzyComparable,edu.stanford.nlp.util.FuzzyInterval$FuzzyComparable,int)",
            "edu.stanford.nlp.util.FuzzyInterval:int getRelationFlags(edu.stanford.nlp.util.Interval)",
            "edu.stanford.nlp.util.Triple:int compareTo(edu.stanford.nlp.util.Triple)",
            "edu.stanford.nlp.util.Interval:edu.stanford.nlp.util.Interval$RelType getRelation(edu.stanford.nlp.util.Interval)",
            "edu.stanford.nlp.stats.IntCounter$NaturalComparator:int compare(java.lang.Object,java.lang.Object)",
            "edu.stanford.nlp.util.IntervalTree:boolean contains(edu.stanford.nlp.util.IntervalTree$TreeNode,edu.stanford.nlp.util.Interval,java.util.function.Function)",
            "edu.stanford.nlp.util.Interval:void <init>(java.lang.Comparable,java.lang.Comparable,int)",
            "edu.stanford.nlp.util.Interval:boolean contains(java.lang.Comparable)",
            "edu.stanford.nlp.util.IntervalTree:boolean overlaps(edu.stanford.nlp.util.IntervalTree$TreeNode,edu.stanford.nlp.util.Interval)",
            "edu.stanford.nlp.util.Pair:int compareTo(edu.stanford.nlp.util.Pair)"
        ]
    },
    "edu.stanford.nlp.util.FuzzyInterval:int getRelationFlags(edu.stanford.nlp.util.Interval)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.FuzzyInterval:edu.stanford.nlp.util.Interval$RelType getRelation(edu.stanford.nlp.util.Interval)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$TemporalOp$12:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal,edu.stanford.nlp.time.SUTime$Temporal,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.JollyDayHolidays$JollyHoliday:edu.stanford.nlp.time.SUTime$Range getRange(int,edu.stanford.nlp.time.SUTime$Duration)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Time mid()",
            "edu.stanford.nlp.time.SUTime$Temporal:edu.stanford.nlp.time.SUTime$Range getRange(int)",
            "edu.stanford.nlp.time.SUTime$InexactTime:edu.stanford.nlp.time.SUTime$Range getRange(int,edu.stanford.nlp.time.SUTime$Duration)",
            "edu.stanford.nlp.time.SUTime$CompositePartialTime:edu.stanford.nlp.time.SUTime$Range getRange(int,edu.stanford.nlp.time.SUTime$Duration)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$RelativeTime:edu.stanford.nlp.time.SUTime$Range getRange(int,edu.stanford.nlp.time.SUTime$Duration)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Time mid()",
            "edu.stanford.nlp.time.SUTime$Temporal:edu.stanford.nlp.time.SUTime$Range getRange(int)",
            "edu.stanford.nlp.time.SUTime$InexactTime:edu.stanford.nlp.time.SUTime$Range getRange(int,edu.stanford.nlp.time.SUTime$Duration)",
            "edu.stanford.nlp.time.SUTime$CompositePartialTime:edu.stanford.nlp.time.SUTime$Range getRange(int,edu.stanford.nlp.time.SUTime$Duration)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$GroundedTime:edu.stanford.nlp.time.SUTime$Range getRange(int,edu.stanford.nlp.time.SUTime$Duration)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Time mid()",
            "edu.stanford.nlp.time.SUTime$Temporal:edu.stanford.nlp.time.SUTime$Range getRange(int)",
            "edu.stanford.nlp.time.SUTime$InexactTime:edu.stanford.nlp.time.SUTime$Range getRange(int,edu.stanford.nlp.time.SUTime$Duration)",
            "edu.stanford.nlp.time.SUTime$CompositePartialTime:edu.stanford.nlp.time.SUTime$Range getRange(int,edu.stanford.nlp.time.SUTime$Duration)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Range getRange(int,edu.stanford.nlp.time.SUTime$Duration)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Range:edu.stanford.nlp.time.SUTime$Time mid()",
            "edu.stanford.nlp.time.SUTime$Temporal:edu.stanford.nlp.time.SUTime$Range getRange(int)",
            "edu.stanford.nlp.time.SUTime$InexactTime:edu.stanford.nlp.time.SUTime$Range getRange(int,edu.stanford.nlp.time.SUTime$Duration)",
            "edu.stanford.nlp.time.SUTime$CompositePartialTime:edu.stanford.nlp.time.SUTime$Range getRange(int,edu.stanford.nlp.time.SUTime$Duration)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$CompositePartialTime:edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Temporal intersect(edu.stanford.nlp.time.SUTime$Temporal)",
            "edu.stanford.nlp.time.SUTime$CompositePartialTime:edu.stanford.nlp.time.SUTime$Range getIntersectedRange(edu.stanford.nlp.time.SUTime$CompositePartialTime,edu.stanford.nlp.time.SUTime$Range,edu.stanford.nlp.time.SUTime$Duration)",
            "edu.stanford.nlp.time.SUTime$TimeWithRange:edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$Time:edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time,edu.stanford.nlp.time.SUTime$Time)",
            "edu.stanford.nlp.time.SUTime$PartialTime:edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time)"
        ]
    },
    "edu.stanford.nlp.pipeline.JSONOutputter$JSONWriter:void object(java.util.function.Consumer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.JSONOutputter:void print(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream,edu.stanford.nlp.pipeline.AnnotationOutputter$Options)",
            "edu.stanford.nlp.pipeline.JSONOutputter$JSONWriter:java.lang.String objectToJSON(java.util.function.Consumer)"
        ]
    },
    "edu.stanford.nlp.classify.LogisticClassifierFactory:edu.stanford.nlp.classify.LogisticClassifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LogisticClassifierFactory:edu.stanford.nlp.classify.LogisticClassifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger$SentenceTaggingProcessor:java.lang.Object process(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.POSTaggerAnnotator$POSTaggerProcessor:edu.stanford.nlp.util.CoreMap process(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.POSTaggerAnnotator$POSTaggerProcessor:java.lang.Object process(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.pipeline.WordsToSentencesAnnotator:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.AnnotationPipeline:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sequences.ObjectBankWrapper:void access$000(edu.stanford.nlp.sequences.ObjectBankWrapper,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.ObjectBankWrapper$WrappedIterator:java.util.List next()",
            "edu.stanford.nlp.sequences.ObjectBankWrapper$WrappedIterator:boolean hasNext()"
        ]
    },
    "edu.stanford.nlp.simple.Document:edu.stanford.nlp.pipeline.CoreNLPProtos$Document serialize()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.pipeline.Annotation asAnnotation()",
            "edu.stanford.nlp.simple.Document:void serialize(java.io.OutputStream)"
        ]
    },
    "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Sentence sentence(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:void <init>(java.lang.String,java.util.Properties)",
            "edu.stanford.nlp.simple.Sentence:void <init>(edu.stanford.nlp.pipeline.CoreNLPProtos$Sentence)",
            "edu.stanford.nlp.simple.Document:java.lang.String xml(java.util.function.Function[])",
            "edu.stanford.nlp.simple.Document:java.lang.String xmlMinified(java.util.function.Function[])",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.hcoref.data.CorefChain fromProto(edu.stanford.nlp.pipeline.CoreNLPProtos$CorefChain)",
            "edu.stanford.nlp.simple.Document:java.lang.String json(java.util.function.Function[])",
            "edu.stanford.nlp.simple.Sentence:void <init>(edu.stanford.nlp.simple.Document,int)",
            "edu.stanford.nlp.simple.Document:java.lang.String jsonMinified(java.util.function.Function[])",
            "edu.stanford.nlp.simple.Sentence:void <init>(edu.stanford.nlp.simple.Document,edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.simple.Sentence:void <init>(edu.stanford.nlp.simple.Document,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:void <init>(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.simple.Sentence:void <init>(java.lang.String,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:void <init>(java.lang.String)",
            "edu.stanford.nlp.simple.Sentence:void <init>(java.util.List)"
        ]
    },
    "edu.stanford.nlp.simple.Sentence:void <init>(edu.stanford.nlp.naturalli.SentenceFragment)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.patterns.surface.SurfacePattern:int compareTo(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.MultiCoreMapNodePattern$StringSequenceAnnotationPattern:void <init>(java.lang.Class,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.TimeAnnotator:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.charniak.CharniakParser:java.util.List getKBestParses(java.util.List,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.charniak.CharniakParser:edu.stanford.nlp.util.ScoredObject getBestScoredParse(java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.charniak.CharniakParser:java.lang.Iterable getKBestParses(java.lang.Iterable,int,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.charniak.CharniakParser:java.lang.Iterable getKBestParses(java.lang.Iterable,int)"
        ]
    },
    "edu.stanford.nlp.trees.TreeTokenizerFactory:edu.stanford.nlp.process.Tokenizer getTokenizer(java.io.Reader,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sequences.ObjectBankWrapper:java.util.List[] toArray(java.util.List[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sequences.ObjectBankWrapper:java.lang.Object[] toArray()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sequences.ObjectBankWrapper:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void makeAnswerArraysAndTagIndex(java.util.Collection)",
            "edu.stanford.nlp.ie.crf.CRFFeatureExporter:void printFeatures(java.lang.String,java.util.Collection)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteViterbiSearchGraph(java.lang.String,java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswersKBest(edu.stanford.nlp.objectbank.ObjectBank,int,java.io.PrintWriter,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List getCliqueTrees(java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void printFactorTableDocuments(edu.stanford.nlp.objectbank.ObjectBank)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void printFirstOrderProbsDocuments(edu.stanford.nlp.objectbank.ObjectBank)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List classifyToCharacterOffsets(java.lang.String)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void printProbsDocuments(edu.stanford.nlp.objectbank.ObjectBank)",
            "edu.stanford.nlp.ie.crf.CRFClassifierWithDropout:java.util.Collection loadAuxiliaryData(java.util.Collection,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.international.arabic.process.ArabicSegmenter:void evaluate(java.io.PrintWriter)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void makeAnswerArraysAndTagIndex(java.util.Collection)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void classifyAndWriteAnswers(java.util.Collection,java.util.List,java.io.PrintWriter,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswers(java.util.Collection,java.io.PrintWriter,edu.stanford.nlp.sequences.DocumentReaderAndWriter,boolean)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List segmentString(java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.lang.String classifyToString(java.lang.String,java.lang.String,boolean)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List classifyRaw(java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void printLabelInformation(java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void train(java.util.Collection,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.classify.Dataset getDataset(java.util.Collection,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.ie.ner.CMMClassifier:edu.stanford.nlp.classify.Dataset getBiasedDataset(edu.stanford.nlp.objectbank.ObjectBank,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List documentsToDataAndLabelsList(java.util.Collection)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List classify(java.lang.String)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List classifyFile(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.objectbank.ObjectBank:boolean isEmpty()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.ObjectBankWrapper:boolean isEmpty()"
        ]
    },
    "edu.stanford.nlp.process.WordShapeClassifier$DistributionalClusters:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sequences.CoNLLDocumentReaderAndWriter:java.util.Iterator access$000(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.CoNLLDocumentReaderAndWriter$CoNLLIterator:void <init>(edu.stanford.nlp.sequences.CoNLLDocumentReaderAndWriter,java.io.Reader)"
        ]
    },
    "edu.stanford.nlp.sequences.ObjectBankWrapper:int size()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.wordseg.Sighan2005DocumentReaderAndWriter:void init(edu.stanford.nlp.sequences.SeqClassifierFlags)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.process.ChineseDocumentToSentenceProcessor:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.ChineseDocumentToSentenceProcessor:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.sequences.ObjectBankWrapper:boolean contains(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.objectbank.ObjectBank:boolean containsAll(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.ObjectBankWrapper:boolean containsAll(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.ling.BasicDocument:edu.stanford.nlp.ling.BasicDocument init(java.io.Reader,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.BasicDocument:edu.stanford.nlp.ling.BasicDocument init(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.BasicDocument:edu.stanford.nlp.ling.BasicDocument init(java.net.URL,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.BasicDocument:void main(java.lang.String[])",
            "edu.stanford.nlp.ling.BasicDocument:edu.stanford.nlp.ling.BasicDocument init(java.net.URL)",
            "edu.stanford.nlp.ling.BasicDocument:edu.stanford.nlp.ling.BasicDocument init(java.net.URL,boolean)",
            "edu.stanford.nlp.ling.BasicDocument:edu.stanford.nlp.ling.BasicDocument init(java.net.URL,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ling.BasicDocument:edu.stanford.nlp.ling.BasicDocument init(java.io.Reader,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.BasicDocument:edu.stanford.nlp.ling.BasicDocument init(java.io.File,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.BasicDocument:edu.stanford.nlp.ling.BasicDocument init(java.io.File,boolean)",
            "edu.stanford.nlp.ling.BasicDocument:void main(java.lang.String[])",
            "edu.stanford.nlp.ling.BasicDocument:edu.stanford.nlp.ling.BasicDocument init(java.io.File,java.lang.String)",
            "edu.stanford.nlp.ling.BasicDocument:edu.stanford.nlp.ling.BasicDocument init(java.io.File)"
        ]
    },
    "edu.stanford.nlp.ling.DocumentReader:edu.stanford.nlp.ling.BasicDocument parseDocumentText(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.DocumentReader:edu.stanford.nlp.ling.BasicDocument readDocument()"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:java.util.List replaceAll(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatcher$1:edu.stanford.nlp.ling.tokensregex.SequenceMatchResult getNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatcher$1:boolean hasNext()"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:java.util.List replaceAllExtended(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:java.util.List replaceFirstExtended(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:java.util.List replaceFirst(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.process.WordToSentenceProcessor:java.util.List wordsToSentences(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.WordToSentenceProcessor:java.util.List process(java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchAction$StartMatchAction:edu.stanford.nlp.ling.tokensregex.SequenceMatchResult apply(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult,int[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLPServer$TokensRegexHandler:void lambda$null$24(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.ling.tokensregex.TokenSequencePattern,edu.stanford.nlp.pipeline.JSONOutputter$Writer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.AnnotatorFactories$20:edu.stanford.nlp.pipeline.Annotator create()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorPool:edu.stanford.nlp.pipeline.Annotator get(java.lang.String)",
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.pipeline.Annotator getOrCreate(edu.stanford.nlp.pipeline.AnnotatorFactory)",
            "edu.stanford.nlp.pipeline.AnnotatorFactories$20:java.lang.Object create()",
            "edu.stanford.nlp.simple.Document$8:edu.stanford.nlp.pipeline.Annotator get()"
        ]
    },
    "edu.stanford.nlp.patterns.surface.CreatePatterns$CreatePatternsThread:void <init>(edu.stanford.nlp.patterns.surface.CreatePatterns,java.util.Map,java.util.List,java.util.Properties,edu.stanford.nlp.patterns.ConstantsAndVariables$PatternForEachTokenWay)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.surface.CreatePatterns:void getAllPatterns(java.util.Map,java.util.Properties,edu.stanford.nlp.patterns.ConstantsAndVariables$PatternForEachTokenWay)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$TokenPatternExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr,edu.stanford.nlp.ling.tokensregex.types.Expression)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule createTokenPatternRule(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr,edu.stanford.nlp.ling.tokensregex.types.Expression)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CompositeExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr,edu.stanford.nlp.ling.tokensregex.types.Expression)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.UniversalPOSMapper:void load(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalPOSMapper:void load()"
        ]
    },
    "edu.stanford.nlp.util.FuzzyInterval:edu.stanford.nlp.util.Interval$RelType getRelation(edu.stanford.nlp.util.Interval)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.JSONOutputter:void print(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream,edu.stanford.nlp.pipeline.AnnotationOutputter$Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotationOutputter:void print(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream,edu.stanford.nlp.pipeline.StanfordCoreNLP)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void lambda$createOutputter$14(edu.stanford.nlp.pipeline.StanfordCoreNLP$OutputFormat,edu.stanford.nlp.pipeline.AnnotationOutputter$Options,java.lang.String,java.lang.String,java.util.Properties,edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream)",
            "edu.stanford.nlp.pipeline.JSONOutputter:void jsonPrint(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream,edu.stanford.nlp.pipeline.AnnotationOutputter$Options)",
            "edu.stanford.nlp.pipeline.AnnotationOutputter:java.lang.String print(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.pipeline.AnnotationOutputter$Options)",
            "edu.stanford.nlp.pipeline.AnnotationOutputter:void print(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream)"
        ]
    },
    "edu.stanford.nlp.pipeline.JSONOutputter$JSONWriter:java.lang.String objectToJSON(java.util.function.Consumer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLPServer$TokensRegexHandler:java.lang.String lambda$handle$27(com.sun.net.httpserver.HttpExchange)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLPServer$SemgrexHandler:java.lang.String lambda$handle$34(com.sun.net.httpserver.HttpExchange)"
        ]
    },
    "edu.stanford.nlp.classify.LogisticClassifierFactory:edu.stanford.nlp.classify.LogisticClassifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.classify.LogisticClassifierFactory:edu.stanford.nlp.classify.Classifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset)",
            "edu.stanford.nlp.patterns.surface.LearnImportantFeatures:edu.stanford.nlp.stats.Counter getTopFeatures(java.util.Iterator,double,double,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.pipeline.POSTaggerAnnotator$POSTaggerProcessor:java.lang.Object process(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Document:void serialize(java.io.OutputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Sentence:void <init>(edu.stanford.nlp.pipeline.CoreNLPProtos$Sentence)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Sentence:edu.stanford.nlp.simple.Sentence deserialize(java.io.InputStream)"
        ]
    },
    "edu.stanford.nlp.simple.Document:edu.stanford.nlp.hcoref.data.CorefChain fromProto(edu.stanford.nlp.pipeline.CoreNLPProtos$CorefChain)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Document:java.util.Map coref(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.simple.Sentence:void <init>(edu.stanford.nlp.simple.Document,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Sentence:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Sentence:void <init>(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.charniak.CharniakParser:edu.stanford.nlp.util.ScoredObject getBestScoredParse(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.charniak.CharniakParser:edu.stanford.nlp.trees.Tree getBestParse(java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.charniak.CharniakParser:java.lang.Iterable getKBestParses(java.lang.Iterable,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sequences.ObjectBankWrapper:boolean isEmpty()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyStdin(edu.stanford.nlp.sequences.DocumentReaderAndWriter)"
        ]
    },
    "edu.stanford.nlp.sequences.CoNLLDocumentReaderAndWriter$CoNLLIterator:void <init>(edu.stanford.nlp.sequences.CoNLLDocumentReaderAndWriter,java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.CoNLLDocumentReaderAndWriter:java.util.Iterator getIterator(java.io.Reader)"
        ]
    },
    "edu.stanford.nlp.sequences.ObjectBankWrapper:boolean containsAll(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.BasicDocument:edu.stanford.nlp.ling.BasicDocument init(java.net.URL)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.PTBEscapingProcessor:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ling.BasicDocument:edu.stanford.nlp.ling.BasicDocument init(java.net.URL,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.BasicDocument:edu.stanford.nlp.ling.BasicDocument init(java.net.URL,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.BasicDocument:edu.stanford.nlp.ling.BasicDocument init(java.io.File,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.BasicDocument:edu.stanford.nlp.ling.BasicDocument init(java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.BasicDocument:edu.stanford.nlp.ling.BasicDocument init(java.io.File)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.PTBEscapingProcessor:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ling.DocumentReader:edu.stanford.nlp.ling.BasicDocument readDocument()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatcher$1:boolean hasNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatcher$1:edu.stanford.nlp.ling.tokensregex.SequenceMatchResult next()",
            "edu.stanford.nlp.util.IterableIterator:boolean hasNext()"
        ]
    },
    "edu.stanford.nlp.process.WordToSentenceProcessor:java.util.List process(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter:java.util.Iterator getIterator(java.io.Reader)",
            "edu.stanford.nlp.process.WordToSentenceProcessor:edu.stanford.nlp.ling.Document processDocument(edu.stanford.nlp.ling.Document)",
            "edu.stanford.nlp.pipeline.WordsToSentencesAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.sequences.ObjectBankWrapper:void fixDocLengths(java.util.List)"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotatorFactories$20:java.lang.Object create()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Document$8:edu.stanford.nlp.pipeline.Annotator get()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Document$8:java.lang.Object get()"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule createTokenPatternRule(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr,edu.stanford.nlp.ling.tokensregex.types.Expression)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$Rule ExpressionExtractorRule(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.trees.UniversalPOSMapper:void load()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.UniversalPOSMapper:edu.stanford.nlp.trees.Tree mapTree(edu.stanford.nlp.trees.Tree)"
        ]
    },
    "edu.stanford.nlp.pipeline.JSONOutputter:void jsonPrint(edu.stanford.nlp.pipeline.Annotation,java.io.OutputStream,edu.stanford.nlp.pipeline.AnnotationOutputter$Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.classify.LogisticClassifierFactory:edu.stanford.nlp.classify.Classifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.simple.Sentence:edu.stanford.nlp.simple.Sentence deserialize(java.io.InputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.charniak.CharniakParser:edu.stanford.nlp.trees.Tree getBestParse(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.CharniakParserAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.sequences.CoNLLDocumentReaderAndWriter:java.util.Iterator getIterator(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.CoNLLDocumentReaderAndWriter:void main(java.lang.String[])",
            "edu.stanford.nlp.patterns.surface.AnnotatedTextReader:java.util.Map parseColumnFile(java.io.BufferedReader,java.util.Set,java.util.Map,boolean,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.process.PTBEscapingProcessor:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatcher$1:edu.stanford.nlp.ling.tokensregex.SequenceMatchResult next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatcher$1:java.lang.Object next()"
        ]
    },
    "edu.stanford.nlp.util.IterableIterator:boolean hasNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood$Util:void threadAndRun(java.lang.String,java.lang.Iterable,int)",
            "edu.stanford.nlp.util.IterableIterator:boolean hasNext()",
            "edu.stanford.nlp.naturalli.Util:java.util.List cleanTree(edu.stanford.nlp.semgraph.SemanticGraph)",
            "edu.stanford.nlp.parser.charniak.CharniakScoredParsesReaderWriter:java.util.List stringToParses(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.process.WordToSentenceProcessor:edu.stanford.nlp.ling.Document processDocument(edu.stanford.nlp.ling.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.StripTagsProcessor:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.pipeline.WordsToSentencesAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Document:java.util.List sentences(java.util.Properties)",
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.hcoref.md.CorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.simple.Document$8:java.lang.Object get()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.simple.Document:edu.stanford.nlp.simple.Document runOpenie(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.trees.UniversalPOSMapper:edu.stanford.nlp.trees.Tree mapTree(edu.stanford.nlp.trees.Tree)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.ud.UniversalDependenciesFeatureAnnotator:void addFeatures(edu.stanford.nlp.semgraph.SemanticGraph,edu.stanford.nlp.trees.Tree,boolean,boolean)",
            "edu.stanford.nlp.trees.GrammaticalStructure:java.lang.String dependenciesToString(edu.stanford.nlp.trees.GrammaticalStructure,java.util.Collection,edu.stanford.nlp.trees.Tree,boolean,boolean)"
        ]
    },
    "edu.stanford.nlp.patterns.surface.AnnotatedTextReader:java.util.Map parseColumnFile(java.io.BufferedReader,java.util.Set,java.util.Map,boolean,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.patterns.GetPatternsFromDataMultiClass:edu.stanford.nlp.util.Pair processSents(java.util.Properties,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatcher$1:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.IterableIterator:java.lang.Object next()"
        ]
    }
}