{
    "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": true,
        "srcRoot": [
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()": {
        "isVulRoot": true,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void terminateRequest()",
            "io.undertow.server.HttpServerExchange:void terminateResponse()"
        ]
    },
    "io.undertow.server.HttpServerExchange:void terminateRequest()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:void setupRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpTransferEncoding:boolean handleRequestEncoding(io.undertow.server.HttpServerExchange,java.lang.String,java.lang.String,io.undertow.server.protocol.http.HttpServerConnection,io.undertow.conduits.PipelingBufferingStreamSinkConduit,boolean)",
            "io.undertow.server.protocol.http.HttpTransferEncoding$3:void handleEvent(io.undertow.conduits.FixedLengthStreamSourceConduit)",
            "io.undertow.server.protocol.ajp.AjpReadListener:org.xnio.conduits.StreamSourceConduit createSourceConduit(org.xnio.conduits.StreamSourceConduit,io.undertow.server.protocol.ajp.AjpServerResponseConduit,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpTransferEncoding$1:void handleEvent(io.undertow.conduits.FinishableStreamSourceConduit)",
            "io.undertow.server.protocol.ajp.AjpReadListener$3:void handleEvent(io.undertow.server.protocol.ajp.AjpServerRequestConduit)",
            "io.undertow.server.protocol.http.HttpTransferEncoding$4:void handleEvent(io.undertow.conduits.ChunkedStreamSourceConduit)"
        ]
    },
    "io.undertow.server.HttpServerExchange:void terminateResponse()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpReadListener$1:void handleEvent(io.undertow.server.protocol.ajp.AjpServerResponseConduit)",
            "io.undertow.server.protocol.http.HttpTransferEncoding$5:void handleEvent(org.xnio.conduits.StreamSinkConduit)"
        ]
    },
    "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()": {
        "isVulRoot": true,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpReadListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.conduits.PipelingBufferingStreamSinkConduit$PipelineExchangeCompletionListener$1:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.conduits.PipelingBufferingStreamSinkConduit$PipelineExchangeCompletionListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.RequestLimitingHandler$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.MetricsHandler$2:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.session.SessionAttachmentHandler$UpdateLastAccessTimeListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.conduits.PipelingBufferingStreamSinkConduit$PipelineExchangeCompletionListener:void performFlush(io.undertow.server.ExchangeCompletionListener$NextListener,io.undertow.server.protocol.http.HttpServerConnection)",
            "io.undertow.server.handlers.RequestDumplingHandler$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.SSLHeaderHandler$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler$AccessLogCompletionListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.proxy.ProxyHandler$2:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.JDBCLogHandler$JDBCLogCompletionListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.proxy.Host$2:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.error.FileErrorPageHandler$2$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.conduits.PipelingBufferingStreamSinkConduit$PipelineExchangeCompletionListener$1:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.conduits.PipelingBufferingStreamSinkConduit$PipelineExchangeCompletionListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.handlers.form.MultiPartParserDefinition$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.handlers.RequestLimitingHandler$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.handlers.MetricsHandler$2:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.session.SessionAttachmentHandler$UpdateLastAccessTimeListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.conduits.PipelingBufferingStreamSinkConduit$PipelineExchangeCompletionListener:void performFlush(io.undertow.server.ExchangeCompletionListener$NextListener,io.undertow.server.protocol.http.HttpServerConnection)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.conduits.PipelingBufferingStreamSinkConduit$PipelineExchangeCompletionListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)"
        ]
    },
    "io.undertow.server.handlers.RequestDumplingHandler$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.handlers.SSLHeaderHandler$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.handlers.accesslog.AccessLogHandler$AccessLogCompletionListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$2:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.protocol.http.HttpReadListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.handlers.JDBCLogHandler$JDBCLogCompletionListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.handlers.proxy.Host$2:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.handlers.error.FileErrorPageHandler$2$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.protocol.http.HttpTransferEncoding:void setupRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpServerConnection:io.undertow.server.HttpServerExchange sendOutOfBandResponse(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.ajp.AjpServerConnection:io.undertow.server.HttpServerExchange sendOutOfBandResponse(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.protocol.http.HttpTransferEncoding:boolean handleRequestEncoding(io.undertow.server.HttpServerExchange,java.lang.String,java.lang.String,io.undertow.server.protocol.http.HttpServerConnection,io.undertow.conduits.PipelingBufferingStreamSinkConduit,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:void setupRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.protocol.http.HttpTransferEncoding$3:void handleEvent(io.undertow.conduits.FixedLengthStreamSourceConduit)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpTransferEncoding$3:void handleEvent(org.xnio.conduits.Conduit)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener:org.xnio.conduits.StreamSourceConduit createSourceConduit(org.xnio.conduits.StreamSourceConduit,io.undertow.server.protocol.ajp.AjpServerResponseConduit,io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.server.protocol.http.HttpTransferEncoding$1:void handleEvent(io.undertow.conduits.FinishableStreamSourceConduit)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpTransferEncoding$1:void handleEvent(org.xnio.conduits.Conduit)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener$3:void handleEvent(io.undertow.server.protocol.ajp.AjpServerRequestConduit)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpReadListener$3:void handleEvent(org.xnio.conduits.Conduit)"
        ]
    },
    "io.undertow.server.protocol.http.HttpTransferEncoding$4:void handleEvent(io.undertow.conduits.ChunkedStreamSourceConduit)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpTransferEncoding$4:void handleEvent(org.xnio.conduits.Conduit)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener$1:void handleEvent(io.undertow.server.protocol.ajp.AjpServerResponseConduit)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpReadListener$1:void handleEvent(org.xnio.conduits.Conduit)"
        ]
    },
    "io.undertow.server.protocol.http.HttpTransferEncoding$5:void handleEvent(org.xnio.conduits.StreamSinkConduit)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpTransferEncoding$5:void handleEvent(org.xnio.conduits.Conduit)"
        ]
    },
    "io.undertow.server.protocol.http.HttpServerConnection:io.undertow.server.HttpServerExchange sendOutOfBandResponse(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpContinue:io.undertow.server.protocol.http.HttpContinue$ContinueResponseSender createResponseSender(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpContinue:void sendContinueResponseBlocking(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.protocol.http.HttpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpReadListener:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.server.protocol.http.HttpReadListener:void run()",
            "io.undertow.server.protocol.http.HttpOpenListener:void handleEvent(org.xnio.StreamConnection)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpServerConnection:io.undertow.server.HttpServerExchange sendOutOfBandResponse(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpContinue:io.undertow.server.protocol.http.HttpContinue$ContinueResponseSender createResponseSender(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpContinue:void sendContinueResponseBlocking(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.protocol.http.HttpTransferEncoding$3:void handleEvent(org.xnio.conduits.Conduit)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void invokeFinishListener()",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void checkMaxSize(long)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpOpenListener:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleCPing()",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.server.protocol.ajp.AjpReadListener$2:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)"
        ]
    },
    "io.undertow.server.protocol.http.HttpTransferEncoding$1:void handleEvent(org.xnio.conduits.Conduit)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.conduits.FinishableStreamSourceConduit:void exitRead(long)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener$3:void handleEvent(org.xnio.conduits.Conduit)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int doRead(java.nio.ByteBuffer,long)"
        ]
    },
    "io.undertow.server.protocol.http.HttpTransferEncoding$4:void handleEvent(org.xnio.conduits.Conduit)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.conduits.ChunkedStreamSourceConduit:void updateRemainingAllowed(int)",
            "io.undertow.conduits.ChunkedStreamSourceConduit:void callFinish()"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener$1:void handleEvent(org.xnio.conduits.Conduit)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void finished()"
        ]
    },
    "io.undertow.server.protocol.http.HttpTransferEncoding$5:void handleEvent(org.xnio.conduits.Conduit)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.conduits.FinishableStreamSinkConduit:void truncateWrites()",
            "io.undertow.conduits.ChunkedStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.FixedLengthStreamSinkConduit:void exitFlush(long,boolean)",
            "io.undertow.conduits.HeadStreamSinkConduit:void exitFlush(int,boolean)",
            "io.undertow.conduits.FinishableStreamSinkConduit:boolean flush()"
        ]
    },
    "io.undertow.server.protocol.http.HttpContinue:io.undertow.server.protocol.http.HttpContinue$ContinueResponseSender createResponseSender(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:void awaitReadable()",
            "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:long transferTo(long,long,java.nio.channels.FileChannel)"
        ]
    },
    "io.undertow.server.protocol.http.HttpContinue:void sendContinueResponseBlocking(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpContinue:void sendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.protocol.http.HttpReadListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.protocol.http.HttpReadListener:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.protocol.http.HttpOpenListener:void handleEvent(org.xnio.StreamConnection)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpOpenListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:void invokeFinishListener()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void exitRead(long)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,long,java.nio.channels.FileChannel)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void exitShutdownReads(long)"
        ]
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:void checkMaxSize(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,long,java.nio.channels.FileChannel)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpOpenListener:void handleEvent(org.xnio.StreamConnection)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpOpenListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener:void handleCPing()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.protocol.ajp.AjpReadListener$2:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpReadListener$2:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.conduits.FinishableStreamSourceConduit:void exitRead(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.conduits.FinishableStreamSourceConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.conduits.FinishableStreamSourceConduit:long transferTo(long,long,java.nio.channels.FileChannel)",
            "io.undertow.conduits.FinishableStreamSourceConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.FinishableStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int doRead(java.nio.ByteBuffer,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int read(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.conduits.ChunkedStreamSourceConduit:void updateRemainingAllowed(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.conduits.ChunkedStreamSourceConduit:int read(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.conduits.ChunkedStreamSourceConduit:void callFinish()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.conduits.ChunkedStreamSourceConduit:int read(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void finished()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.conduits.AbstractFramedStreamSinkConduit:boolean flush()"
        ]
    },
    "io.undertow.conduits.FinishableStreamSinkConduit:void truncateWrites()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.conduits.ChunkedStreamSinkConduit:boolean flush()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.conduits.FixedLengthStreamSinkConduit:void exitFlush(long,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSinkConduit:boolean flush()"
        ]
    },
    "io.undertow.conduits.HeadStreamSinkConduit:void exitFlush(int,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.conduits.HeadStreamSinkConduit:boolean flush()"
        ]
    },
    "io.undertow.conduits.FinishableStreamSinkConduit:boolean flush()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:void awaitReadable()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:long read(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:long transferTo(long,long,java.nio.channels.FileChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.protocol.http.HttpContinue:void sendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1$1:void handleContinue(io.undertow.client.ClientExchange)"
        ]
    },
    "io.undertow.server.protocol.http.HttpOpenListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long read(java.nio.ByteBuffer[])"
        ]
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:void exitRead(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,long,java.nio.channels.FileChannel)"
        ]
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,long,java.nio.channels.FileChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:void exitShutdownReads(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void terminateReads()"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpOpenListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.protocol.ajp.AjpReadListener$2:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.conduits.FinishableStreamSourceConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.conduits.FinishableStreamSourceConduit:long transferTo(long,long,java.nio.channels.FileChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.conduits.FinishableStreamSourceConduit:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.conduits.FinishableStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:long read(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.conduits.ChunkedStreamSourceConduit:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.conduits.ChunkedStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.conduits.AbstractFramedStreamSinkConduit:boolean flush()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit$AjpServerWriteReadyHandler:void writeReady()",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:int write(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.conduits.FixedLengthStreamSinkConduit:boolean flush()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.conduits.HeadStreamSinkConduit:boolean flush()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1$1:void handleContinue(io.undertow.client.ClientExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:long read(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:void terminateReads()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.protocol.ajp.AjpServerRequestConduit:long read(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.conduits.ChunkedStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.protocol.ajp.AjpServerResponseConduit$AjpServerWriteReadyHandler:void writeReady()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.protocol.ajp.AjpServerResponseConduit:int write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:long write(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpServerResponseConduit:long write(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:long write(java.nio.ByteBuffer[])"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpServerResponseConduit:long write(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    }
}