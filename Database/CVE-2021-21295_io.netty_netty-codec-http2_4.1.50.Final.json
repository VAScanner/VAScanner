{
    "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder:void <init>(io.netty.handler.codec.http2.Http2Connection,io.netty.handler.codec.http2.Http2ConnectionEncoder,io.netty.handler.codec.http2.Http2FrameReader,io.netty.handler.codec.http2.Http2PromisedRequestVerifier,boolean,boolean)": {
        "isVulRoot": true,
        "srcRoot": [
            "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder:void <init>(io.netty.handler.codec.http2.Http2Connection,io.netty.handler.codec.http2.Http2ConnectionEncoder,io.netty.handler.codec.http2.Http2FrameReader,io.netty.handler.codec.http2.Http2PromisedRequestVerifier,boolean,boolean)"
        ],
        "vulCaller": [
            "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder:void <init>(io.netty.handler.codec.http2.Http2Connection,io.netty.handler.codec.http2.Http2ConnectionEncoder,io.netty.handler.codec.http2.Http2FrameReader,io.netty.handler.codec.http2.Http2PromisedRequestVerifier,boolean)",
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder:io.netty.handler.codec.http2.Http2MultiplexCodec build()",
            "io.netty.handler.codec.http2.Http2FrameCodecBuilder:io.netty.handler.codec.http2.Http2FrameCodec build()",
            "io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder:io.netty.handler.codec.http2.Http2ConnectionHandler buildFromConnection(io.netty.handler.codec.http2.Http2Connection)"
        ]
    },
    "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder:void <init>(io.netty.handler.codec.http2.Http2Connection,io.netty.handler.codec.http2.Http2ConnectionEncoder,io.netty.handler.codec.http2.Http2FrameReader,io.netty.handler.codec.http2.Http2PromisedRequestVerifier,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder:void <init>(io.netty.handler.codec.http2.Http2Connection,io.netty.handler.codec.http2.Http2ConnectionEncoder,io.netty.handler.codec.http2.Http2FrameReader,io.netty.handler.codec.http2.Http2PromisedRequestVerifier,boolean,boolean)"
        ],
        "vulCaller": [
            "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder:void <init>(io.netty.handler.codec.http2.Http2Connection,io.netty.handler.codec.http2.Http2ConnectionEncoder,io.netty.handler.codec.http2.Http2FrameReader,io.netty.handler.codec.http2.Http2PromisedRequestVerifier)"
        ]
    },
    "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder:io.netty.handler.codec.http2.Http2MultiplexCodec build()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder:void <init>(io.netty.handler.codec.http2.Http2Connection,io.netty.handler.codec.http2.Http2ConnectionEncoder,io.netty.handler.codec.http2.Http2FrameReader,io.netty.handler.codec.http2.Http2PromisedRequestVerifier,boolean,boolean)"
        ],
        "vulCaller": [
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder:io.netty.handler.codec.http2.Http2ConnectionHandler build()"
        ]
    },
    "io.netty.handler.codec.http2.Http2FrameCodecBuilder:io.netty.handler.codec.http2.Http2FrameCodec build()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder:void <init>(io.netty.handler.codec.http2.Http2Connection,io.netty.handler.codec.http2.Http2ConnectionEncoder,io.netty.handler.codec.http2.Http2FrameReader,io.netty.handler.codec.http2.Http2PromisedRequestVerifier,boolean,boolean)"
        ],
        "vulCaller": [
            "io.netty.handler.codec.http2.Http2FrameCodecBuilder:io.netty.handler.codec.http2.Http2ConnectionHandler build()"
        ]
    },
    "io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder:io.netty.handler.codec.http2.Http2ConnectionHandler buildFromConnection(io.netty.handler.codec.http2.Http2Connection)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder:void <init>(io.netty.handler.codec.http2.Http2Connection,io.netty.handler.codec.http2.Http2ConnectionEncoder,io.netty.handler.codec.http2.Http2FrameReader,io.netty.handler.codec.http2.Http2PromisedRequestVerifier,boolean,boolean)"
        ],
        "vulCaller": [
            "io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder:io.netty.handler.codec.http2.Http2ConnectionHandler build()"
        ]
    },
    "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener:void onHeadersRead(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.http2.Http2Headers,int,short,boolean,int,boolean)": {
        "isVulRoot": true,
        "srcRoot": [
            "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener:void onHeadersRead(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.http2.Http2Headers,int,short,boolean,int,boolean)"
        ],
        "vulCaller": [
            "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$PrefaceFrameListener:void onHeadersRead(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.http2.Http2Headers,int,short,boolean,int,boolean)",
            "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener:void onHeadersRead(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.http2.Http2Headers,int,boolean)"
        ]
    },
    "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$PrefaceFrameListener:void onHeadersRead(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.http2.Http2Headers,int,short,boolean,int,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener:void onHeadersRead(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.http2.Http2Headers,int,short,boolean,int,boolean)"
        ],
        "vulCaller": [
            "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$PrefaceFrameListener:void onHeadersRead(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.http2.Http2Headers,int,short,boolean,int,boolean)"
        ]
    },
    "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener:void onHeadersRead(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.http2.Http2Headers,int,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener:void onHeadersRead(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.http2.Http2Headers,int,short,boolean,int,boolean)"
        ],
        "vulCaller": [
            "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$PrefaceFrameListener:void onHeadersRead(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.http2.Http2Headers,int,boolean)"
        ]
    },
    "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener:int onDataRead(io.netty.channel.ChannelHandlerContext,int,io.netty.buffer.ByteBuf,int,boolean)": {
        "isVulRoot": true,
        "srcRoot": [
            "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener:int onDataRead(io.netty.channel.ChannelHandlerContext,int,io.netty.buffer.ByteBuf,int,boolean)"
        ],
        "vulCaller": [
            "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$PrefaceFrameListener:int onDataRead(io.netty.channel.ChannelHandlerContext,int,io.netty.buffer.ByteBuf,int,boolean)"
        ]
    },
    "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$PrefaceFrameListener:int onDataRead(io.netty.channel.ChannelHandlerContext,int,io.netty.buffer.ByteBuf,int,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener:int onDataRead(io.netty.channel.ChannelHandlerContext,int,io.netty.buffer.ByteBuf,int,boolean)"
        ],
        "vulCaller": [
            "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$PrefaceFrameListener:int onDataRead(io.netty.channel.ChannelHandlerContext,int,io.netty.buffer.ByteBuf,int,boolean)"
        ]
    },
    "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder:void <init>(io.netty.handler.codec.http2.Http2Connection,io.netty.handler.codec.http2.Http2ConnectionEncoder,io.netty.handler.codec.http2.Http2FrameReader,io.netty.handler.codec.http2.Http2PromisedRequestVerifier)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder:void <init>(io.netty.handler.codec.http2.Http2Connection,io.netty.handler.codec.http2.Http2ConnectionEncoder,io.netty.handler.codec.http2.Http2FrameReader,io.netty.handler.codec.http2.Http2PromisedRequestVerifier,boolean,boolean)"
        ],
        "vulCaller": [
            "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder:void <init>(io.netty.handler.codec.http2.Http2Connection,io.netty.handler.codec.http2.Http2ConnectionEncoder,io.netty.handler.codec.http2.Http2FrameReader)"
        ]
    },
    "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder:io.netty.handler.codec.http2.Http2ConnectionHandler build()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder:void <init>(io.netty.handler.codec.http2.Http2Connection,io.netty.handler.codec.http2.Http2ConnectionEncoder,io.netty.handler.codec.http2.Http2FrameReader,io.netty.handler.codec.http2.Http2PromisedRequestVerifier,boolean,boolean)"
        ],
        "vulCaller": []
    },
    "io.netty.handler.codec.http2.Http2FrameCodecBuilder:io.netty.handler.codec.http2.Http2ConnectionHandler build()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder:void <init>(io.netty.handler.codec.http2.Http2Connection,io.netty.handler.codec.http2.Http2ConnectionEncoder,io.netty.handler.codec.http2.Http2FrameReader,io.netty.handler.codec.http2.Http2PromisedRequestVerifier,boolean,boolean)"
        ],
        "vulCaller": []
    },
    "io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder:io.netty.handler.codec.http2.Http2ConnectionHandler build()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder:void <init>(io.netty.handler.codec.http2.Http2Connection,io.netty.handler.codec.http2.Http2ConnectionEncoder,io.netty.handler.codec.http2.Http2FrameReader,io.netty.handler.codec.http2.Http2PromisedRequestVerifier,boolean,boolean)"
        ],
        "vulCaller": [
            "io.netty.handler.codec.http2.Http2ConnectionHandlerBuilder:io.netty.handler.codec.http2.Http2ConnectionHandler build()",
            "io.netty.handler.codec.http2.HttpToHttp2ConnectionHandlerBuilder:io.netty.handler.codec.http2.HttpToHttp2ConnectionHandler build()",
            "io.netty.handler.codec.http2.Http2MultiplexCodecBuilder:io.netty.handler.codec.http2.Http2MultiplexCodec build()",
            "io.netty.handler.codec.http2.Http2FrameCodecBuilder:io.netty.handler.codec.http2.Http2FrameCodec build()"
        ]
    },
    "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$PrefaceFrameListener:void onHeadersRead(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.http2.Http2Headers,int,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener:void onHeadersRead(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.http2.Http2Headers,int,short,boolean,int,boolean)"
        ],
        "vulCaller": [
            "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$PrefaceFrameListener:void onHeadersRead(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.http2.Http2Headers,int,boolean)"
        ]
    },
    "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder:void <init>(io.netty.handler.codec.http2.Http2Connection,io.netty.handler.codec.http2.Http2ConnectionEncoder,io.netty.handler.codec.http2.Http2FrameReader)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder:void <init>(io.netty.handler.codec.http2.Http2Connection,io.netty.handler.codec.http2.Http2ConnectionEncoder,io.netty.handler.codec.http2.Http2FrameReader,io.netty.handler.codec.http2.Http2PromisedRequestVerifier,boolean,boolean)"
        ],
        "vulCaller": []
    },
    "io.netty.handler.codec.http2.Http2ConnectionHandlerBuilder:io.netty.handler.codec.http2.Http2ConnectionHandler build()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder:void <init>(io.netty.handler.codec.http2.Http2Connection,io.netty.handler.codec.http2.Http2ConnectionEncoder,io.netty.handler.codec.http2.Http2FrameReader,io.netty.handler.codec.http2.Http2PromisedRequestVerifier,boolean,boolean)"
        ],
        "vulCaller": []
    },
    "io.netty.handler.codec.http2.HttpToHttp2ConnectionHandlerBuilder:io.netty.handler.codec.http2.HttpToHttp2ConnectionHandler build()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder:void <init>(io.netty.handler.codec.http2.Http2Connection,io.netty.handler.codec.http2.Http2ConnectionEncoder,io.netty.handler.codec.http2.Http2FrameReader,io.netty.handler.codec.http2.Http2PromisedRequestVerifier,boolean,boolean)"
        ],
        "vulCaller": [
            "io.netty.handler.codec.http2.HttpToHttp2ConnectionHandlerBuilder:io.netty.handler.codec.http2.Http2ConnectionHandler build()"
        ]
    },
    "io.netty.handler.codec.http2.HttpToHttp2ConnectionHandlerBuilder:io.netty.handler.codec.http2.Http2ConnectionHandler build()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder:void <init>(io.netty.handler.codec.http2.Http2Connection,io.netty.handler.codec.http2.Http2ConnectionEncoder,io.netty.handler.codec.http2.Http2FrameReader,io.netty.handler.codec.http2.Http2PromisedRequestVerifier,boolean,boolean)"
        ],
        "vulCaller": []
    }
}