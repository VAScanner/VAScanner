{
    "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])": {
        "isVulRoot": true,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": [
            "com.google.crypto.tink.signature.PublicKeyVerifyWrapper$WrappedPublicKeyVerify:void verify(byte[],byte[])",
            "com.google.crypto.tink.daead.DeterministicAeadWrapper$WrappedDeterministicAead:byte[] decryptDeterministically(byte[],byte[])",
            "com.google.crypto.tink.PrimitiveSet:void setPrimary(com.google.crypto.tink.PrimitiveSet$Entry)",
            "com.google.crypto.tink.mac.MacWrapper$WrappedMac:void verifyMac(byte[],byte[])",
            "com.google.crypto.tink.aead.AeadWrapper$WrappedAead:byte[] decrypt(byte[],byte[])",
            "com.google.crypto.tink.hybrid.HybridDecryptWrapper$WrappedHybridDecrypt:byte[] decrypt(byte[],byte[])",
            "com.google.crypto.tink.PrimitiveSet:java.util.List getRawPrimitives()",
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(com.google.crypto.tink.proto.Keyset$Key)"
        ]
    },
    "com.google.crypto.tink.signature.PublicKeyVerifyWrapper$WrappedPublicKeyVerify:void verify(byte[],byte[])": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": []
    },
    "com.google.crypto.tink.daead.DeterministicAeadWrapper$WrappedDeterministicAead:byte[] decryptDeterministically(byte[],byte[])": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": []
    },
    "com.google.crypto.tink.PrimitiveSet:void setPrimary(com.google.crypto.tink.PrimitiveSet$Entry)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": [
            "com.google.crypto.tink.Registry:com.google.crypto.tink.PrimitiveSet getPrimitivesInternal(com.google.crypto.tink.KeysetHandle,com.google.crypto.tink.KeyManager,java.lang.Class)"
        ]
    },
    "com.google.crypto.tink.mac.MacWrapper$WrappedMac:void verifyMac(byte[],byte[])": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": []
    },
    "com.google.crypto.tink.aead.AeadWrapper$WrappedAead:byte[] decrypt(byte[],byte[])": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": []
    },
    "com.google.crypto.tink.hybrid.HybridDecryptWrapper$WrappedHybridDecrypt:byte[] decrypt(byte[],byte[])": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": []
    },
    "com.google.crypto.tink.PrimitiveSet:java.util.List getRawPrimitives()": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": [
            "com.google.crypto.tink.signature.PublicKeyVerifyWrapper$WrappedPublicKeyVerify:void verify(byte[],byte[])",
            "com.google.crypto.tink.daead.DeterministicAeadWrapper$WrappedDeterministicAead:byte[] decryptDeterministically(byte[],byte[])",
            "com.google.crypto.tink.streamingaead.ReadableByteChannelDecrypter:int read(java.nio.ByteBuffer)",
            "com.google.crypto.tink.mac.MacWrapper$WrappedMac:void verifyMac(byte[],byte[])",
            "com.google.crypto.tink.streamingaead.SeekableByteChannelDecrypter:int read(java.nio.ByteBuffer)",
            "com.google.crypto.tink.streamingaead.InputStreamDecrypter:int read(byte[],int,int)",
            "com.google.crypto.tink.aead.AeadWrapper$WrappedAead:byte[] decrypt(byte[],byte[])",
            "com.google.crypto.tink.hybrid.HybridDecryptWrapper$WrappedHybridDecrypt:byte[] decrypt(byte[],byte[])"
        ]
    },
    "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(com.google.crypto.tink.proto.Keyset$Key)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": []
    },
    "com.google.crypto.tink.Registry:com.google.crypto.tink.PrimitiveSet getPrimitivesInternal(com.google.crypto.tink.KeysetHandle,com.google.crypto.tink.KeyManager,java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": [
            "com.google.crypto.tink.Registry:com.google.crypto.tink.PrimitiveSet getPrimitives(com.google.crypto.tink.KeysetHandle,com.google.crypto.tink.KeyManager)",
            "com.google.crypto.tink.Registry:com.google.crypto.tink.PrimitiveSet getPrimitives(com.google.crypto.tink.KeysetHandle,com.google.crypto.tink.KeyManager,java.lang.Class)"
        ]
    },
    "com.google.crypto.tink.streamingaead.ReadableByteChannelDecrypter:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": []
    },
    "com.google.crypto.tink.streamingaead.SeekableByteChannelDecrypter:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": []
    },
    "com.google.crypto.tink.streamingaead.InputStreamDecrypter:int read(byte[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": [
            "com.google.crypto.tink.streamingaead.InputStreamDecrypter:int read(byte[])"
        ]
    },
    "com.google.crypto.tink.Registry:com.google.crypto.tink.PrimitiveSet getPrimitives(com.google.crypto.tink.KeysetHandle,com.google.crypto.tink.KeyManager)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": [
            "com.google.crypto.tink.Registry:com.google.crypto.tink.PrimitiveSet getPrimitives(com.google.crypto.tink.KeysetHandle)"
        ]
    },
    "com.google.crypto.tink.Registry:com.google.crypto.tink.PrimitiveSet getPrimitives(com.google.crypto.tink.KeysetHandle,com.google.crypto.tink.KeyManager,java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": [
            "com.google.crypto.tink.mac.MacFactory:com.google.crypto.tink.Mac getPrimitive(com.google.crypto.tink.KeysetHandle,com.google.crypto.tink.KeyManager)",
            "com.google.crypto.tink.daead.DeterministicAeadFactory:com.google.crypto.tink.DeterministicAead getPrimitive(com.google.crypto.tink.KeysetHandle,com.google.crypto.tink.KeyManager)",
            "com.google.crypto.tink.signature.PublicKeyVerifyFactory:com.google.crypto.tink.PublicKeyVerify getPrimitive(com.google.crypto.tink.KeysetHandle,com.google.crypto.tink.KeyManager)",
            "com.google.crypto.tink.signature.PublicKeySignFactory:com.google.crypto.tink.PublicKeySign getPrimitive(com.google.crypto.tink.KeysetHandle,com.google.crypto.tink.KeyManager)",
            "com.google.crypto.tink.aead.AeadFactory:com.google.crypto.tink.Aead getPrimitive(com.google.crypto.tink.KeysetHandle,com.google.crypto.tink.KeyManager)",
            "com.google.crypto.tink.Registry:com.google.crypto.tink.PrimitiveSet getPrimitives(com.google.crypto.tink.KeysetHandle,java.lang.Class)",
            "com.google.crypto.tink.KeysetHandle:java.lang.Object getPrimitive(com.google.crypto.tink.KeyManager,java.lang.Class)",
            "com.google.crypto.tink.hybrid.HybridDecryptFactory:com.google.crypto.tink.HybridDecrypt getPrimitive(com.google.crypto.tink.KeysetHandle,com.google.crypto.tink.KeyManager)",
            "com.google.crypto.tink.hybrid.HybridEncryptFactory:com.google.crypto.tink.HybridEncrypt getPrimitive(com.google.crypto.tink.KeysetHandle,com.google.crypto.tink.KeyManager)",
            "com.google.crypto.tink.streamingaead.StreamingAeadFactory:com.google.crypto.tink.StreamingAead getPrimitive(com.google.crypto.tink.KeysetHandle,com.google.crypto.tink.KeyManager)"
        ]
    },
    "com.google.crypto.tink.streamingaead.InputStreamDecrypter:int read(byte[])": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": [
            "com.google.crypto.tink.streamingaead.InputStreamDecrypter:int read()"
        ]
    },
    "com.google.crypto.tink.Registry:com.google.crypto.tink.PrimitiveSet getPrimitives(com.google.crypto.tink.KeysetHandle)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": []
    },
    "com.google.crypto.tink.mac.MacFactory:com.google.crypto.tink.Mac getPrimitive(com.google.crypto.tink.KeysetHandle,com.google.crypto.tink.KeyManager)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": [
            "com.google.crypto.tink.mac.MacFactory:com.google.crypto.tink.Mac getPrimitive(com.google.crypto.tink.KeysetHandle)"
        ]
    },
    "com.google.crypto.tink.daead.DeterministicAeadFactory:com.google.crypto.tink.DeterministicAead getPrimitive(com.google.crypto.tink.KeysetHandle,com.google.crypto.tink.KeyManager)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": [
            "com.google.crypto.tink.daead.DeterministicAeadFactory:com.google.crypto.tink.DeterministicAead getPrimitive(com.google.crypto.tink.KeysetHandle)"
        ]
    },
    "com.google.crypto.tink.signature.PublicKeyVerifyFactory:com.google.crypto.tink.PublicKeyVerify getPrimitive(com.google.crypto.tink.KeysetHandle,com.google.crypto.tink.KeyManager)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": [
            "com.google.crypto.tink.signature.PublicKeyVerifyFactory:com.google.crypto.tink.PublicKeyVerify getPrimitive(com.google.crypto.tink.KeysetHandle)"
        ]
    },
    "com.google.crypto.tink.signature.PublicKeySignFactory:com.google.crypto.tink.PublicKeySign getPrimitive(com.google.crypto.tink.KeysetHandle,com.google.crypto.tink.KeyManager)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": [
            "com.google.crypto.tink.signature.PublicKeySignFactory:com.google.crypto.tink.PublicKeySign getPrimitive(com.google.crypto.tink.KeysetHandle)"
        ]
    },
    "com.google.crypto.tink.aead.AeadFactory:com.google.crypto.tink.Aead getPrimitive(com.google.crypto.tink.KeysetHandle,com.google.crypto.tink.KeyManager)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": [
            "com.google.crypto.tink.aead.AeadFactory:com.google.crypto.tink.Aead getPrimitive(com.google.crypto.tink.KeysetHandle)"
        ]
    },
    "com.google.crypto.tink.Registry:com.google.crypto.tink.PrimitiveSet getPrimitives(com.google.crypto.tink.KeysetHandle,java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": [
            "com.google.crypto.tink.KeysetHandle:java.lang.Object getPrimitive(java.lang.Class)"
        ]
    },
    "com.google.crypto.tink.KeysetHandle:java.lang.Object getPrimitive(com.google.crypto.tink.KeyManager,java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": []
    },
    "com.google.crypto.tink.hybrid.HybridDecryptFactory:com.google.crypto.tink.HybridDecrypt getPrimitive(com.google.crypto.tink.KeysetHandle,com.google.crypto.tink.KeyManager)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": [
            "com.google.crypto.tink.hybrid.HybridDecryptFactory:com.google.crypto.tink.HybridDecrypt getPrimitive(com.google.crypto.tink.KeysetHandle)"
        ]
    },
    "com.google.crypto.tink.hybrid.HybridEncryptFactory:com.google.crypto.tink.HybridEncrypt getPrimitive(com.google.crypto.tink.KeysetHandle,com.google.crypto.tink.KeyManager)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": [
            "com.google.crypto.tink.hybrid.HybridEncryptFactory:com.google.crypto.tink.HybridEncrypt getPrimitive(com.google.crypto.tink.KeysetHandle)"
        ]
    },
    "com.google.crypto.tink.streamingaead.StreamingAeadFactory:com.google.crypto.tink.StreamingAead getPrimitive(com.google.crypto.tink.KeysetHandle,com.google.crypto.tink.KeyManager)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": [
            "com.google.crypto.tink.streamingaead.StreamingAeadFactory:com.google.crypto.tink.StreamingAead getPrimitive(com.google.crypto.tink.KeysetHandle)"
        ]
    },
    "com.google.crypto.tink.streamingaead.InputStreamDecrypter:int read()": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": []
    },
    "com.google.crypto.tink.mac.MacFactory:com.google.crypto.tink.Mac getPrimitive(com.google.crypto.tink.KeysetHandle)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": []
    },
    "com.google.crypto.tink.daead.DeterministicAeadFactory:com.google.crypto.tink.DeterministicAead getPrimitive(com.google.crypto.tink.KeysetHandle)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": []
    },
    "com.google.crypto.tink.signature.PublicKeyVerifyFactory:com.google.crypto.tink.PublicKeyVerify getPrimitive(com.google.crypto.tink.KeysetHandle)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": []
    },
    "com.google.crypto.tink.signature.PublicKeySignFactory:com.google.crypto.tink.PublicKeySign getPrimitive(com.google.crypto.tink.KeysetHandle)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": []
    },
    "com.google.crypto.tink.aead.AeadFactory:com.google.crypto.tink.Aead getPrimitive(com.google.crypto.tink.KeysetHandle)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": []
    },
    "com.google.crypto.tink.KeysetHandle:java.lang.Object getPrimitive(java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": []
    },
    "com.google.crypto.tink.hybrid.HybridDecryptFactory:com.google.crypto.tink.HybridDecrypt getPrimitive(com.google.crypto.tink.KeysetHandle)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": []
    },
    "com.google.crypto.tink.hybrid.HybridEncryptFactory:com.google.crypto.tink.HybridEncrypt getPrimitive(com.google.crypto.tink.KeysetHandle)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": []
    },
    "com.google.crypto.tink.streamingaead.StreamingAeadFactory:com.google.crypto.tink.StreamingAead getPrimitive(com.google.crypto.tink.KeysetHandle)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": []
    }
}