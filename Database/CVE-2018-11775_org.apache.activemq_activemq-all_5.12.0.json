{
    "org.apache.activemq.transport.tcp.TcpTransportServer:void configureServerSocket(java.net.ServerSocket)": {
        "isVulRoot": true,
        "srcRoot": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void configureServerSocket(java.net.ServerSocket)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void bind()"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpTransportServer:void bind()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void configureServerSocket(java.net.ServerSocket)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.tcp.SslTransportServer:void bind()",
            "org.apache.activemq.transport.tcp.TcpTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()": {
        "isVulRoot": true,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTNIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()",
            "org.apache.activemq.transport.stomp.StompNIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.amqp.AmqpNioSslTransport:void initializeStreams()"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTNIOSSLTransport:void initializeStreams()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.tcp.TcpTransport:void connect()": {
        "isVulRoot": true,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.amqp.AmqpNioTransport:void doStart()",
            "org.apache.activemq.transport.mqtt.MQTTNIOTransport:void doStart()",
            "org.apache.activemq.transport.nio.NIOTransport:void doStart()",
            "org.apache.activemq.transport.stomp.StompNIOTransport:void doStart()",
            "org.apache.activemq.transport.tcp.TcpTransport:void doStart()"
        ]
    },
    "org.apache.activemq.transport.stomp.StompNIOSSLTransport:void initializeStreams()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.amqp.AmqpNioSslTransport:void initializeStreams()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.amqp.AmqpNioTransport:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.mqtt.MQTTNIOTransport:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.nio.NIOTransport:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doStart()"
        ]
    },
    "org.apache.activemq.transport.stomp.StompNIOTransport:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.tcp.TcpTransport:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void start()"
        ]
    },
    "org.apache.activemq.transport.tcp.SslTransportServer:void bind()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void configureServerSocket(java.net.ServerSocket)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.tcp.SslTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void configureServerSocket(java.net.ServerSocket)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.StompNIOSSLTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.net.URI)",
            "org.apache.activemq.transport.amqp.AmqpNioSslTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.net.URI)",
            "org.apache.activemq.transport.mqtt.MQTTNIOSSLTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.net.URI)",
            "org.apache.activemq.transport.nio.NIOSSLTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.nio.NIOSSLTransport:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.util.ServiceSupport:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyStoreReplayer:void load()",
            "org.apache.activemq.broker.BrokerService:void doStartPersistenceAdapter()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void start()",
            "org.apache.activemq.broker.TransportConnector:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:org.apache.activemq.broker.scheduler.JobScheduler getJobScheduler(java.lang.String)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void start()",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void start()",
            "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$start_master$1:void apply$mcV$sp()",
            "org.apache.activemq.transport.mqtt.MQTTPacketIdGenerator:org.apache.activemq.transport.mqtt.MQTTPacketIdGenerator getMQTTPacketIdGenerator(org.apache.activemq.broker.BrokerService)",
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$start_slave$1:void apply$mcV$sp()",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.thread.Scheduler getScheduler()",
            "org.apache.activemq.network.NetworkConnector:void start()",
            "org.apache.activemq.broker.LockableServiceSupport:void preStart()",
            "org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter:void doStart()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl:void intialize()",
            "org.apache.activemq.broker.TransportConnection:void start()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.thread.Scheduler getScheduler()"
        ]
    },
    "org.apache.activemq.transport.tcp.SslTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void configureServerSocket(java.net.ServerSocket)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.SslBrokerService:org.apache.activemq.transport.TransportServer createSslTransportServer(java.net.URI,javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompNIOSSLTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void configureServerSocket(java.net.ServerSocket)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.amqp.AmqpNioSslTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void configureServerSocket(java.net.ServerSocket)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.mqtt.MQTTNIOSSLTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void configureServerSocket(java.net.ServerSocket)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.nio.NIOSSLTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void configureServerSocket(java.net.ServerSocket)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyStoreReplayer:void load()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void upgradeFromLegacy()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void doStartPersistenceAdapter()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startPersistenceAdapter(boolean)",
            "org.apache.activemq.broker.BrokerService:void access$000(org.apache.activemq.broker.BrokerService)"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnector:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector startTransportConnector(org.apache.activemq.broker.TransportConnector)",
            "org.apache.activemq.broker.jmx.ConnectorView:void start()",
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.transport.InactivityMonitor:void start()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void start()",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void start()",
            "org.apache.activemq.broker.TransportConnection:void start()"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:org.apache.activemq.broker.scheduler.JobScheduler getJobScheduler(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$8:void visit(org.apache.activemq.store.kahadb.data.KahaRescheduleJobCommand)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$8:void visit(org.apache.activemq.store.kahadb.data.KahaRemoveScheduledJobCommand)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$8:void visit(org.apache.activemq.store.kahadb.data.KahaRemoveScheduledJobsCommand)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$8:void visit(org.apache.activemq.store.kahadb.data.KahaAddScheduledJobCommand)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void start()",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void start()",
            "org.apache.activemq.broker.TransportConnection:void start()"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void start()",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void start()",
            "org.apache.activemq.broker.TransportConnection:void start()"
        ]
    },
    "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$start_master$1:void apply$mcV$sp()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$start_master$1:void apply()"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTPacketIdGenerator:org.apache.activemq.transport.mqtt.MQTTPacketIdGenerator getMQTTPacketIdGenerator(org.apache.activemq.broker.BrokerService)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void <init>(org.apache.activemq.transport.mqtt.MQTTTransport,org.apache.activemq.broker.BrokerService)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.proxy.ProxyConnection:void start()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()",
            "org.apache.activemq.transport.WireFormatNegotiator:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.transport.mock.MockTransport:void start()",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void start()",
            "org.apache.activemq.transport.reliable.ReliableTransport:void start()",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void start()",
            "org.apache.activemq.transport.udp.UdpTransportServer$2:void start()",
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.WriteTimeoutFilter:void start()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void start()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void start()",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void start()",
            "org.apache.activemq.broker.TransportConnection:void start()"
        ]
    },
    "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$start_slave$1:void apply$mcV$sp()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$start_slave$1:void apply()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:org.apache.activemq.thread.Scheduler getScheduler()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession$5:void afterRollback()",
            "org.apache.activemq.ActiveMQSession:void clearMessagesInProgress(java.util.concurrent.atomic.AtomicInteger)",
            "org.apache.activemq.ActiveMQMessageConsumer:void setOptimizedAckScheduledAckInterval(long)",
            "org.apache.activemq.ActiveMQSession:org.apache.activemq.thread.Scheduler getScheduler()",
            "org.apache.activemq.ActiveMQMessageConsumer:void dispose()"
        ]
    },
    "org.apache.activemq.network.NetworkConnector:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.LdapNetworkConnector:void addConnector(javax.naming.directory.SearchResult)",
            "org.apache.activemq.broker.jmx.BrokerView:java.lang.String addNetworkConnector(java.lang.String)",
            "org.apache.activemq.broker.jmx.NetworkConnectorView:void start()",
            "org.apache.activemq.broker.BrokerService$9:void run()"
        ]
    },
    "org.apache.activemq.broker.LockableServiceSupport:void preStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void start()"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void duplexStart(org.apache.activemq.broker.TransportConnection,org.apache.activemq.command.BrokerInfo,org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.network.DiscoveryNetworkConnector:void onServiceAdd(org.apache.activemq.command.DiscoveryEvent)",
            "org.apache.activemq.broker.jmx.NetworkBridgeView:void start()",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStart()"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl:void intialize()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl:org.apache.activemq.store.kahadb.plist.PListImpl getPList(java.lang.String)",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl:void doStart()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ConnectionView:void start()",
            "org.apache.activemq.broker.TransportConnector$1$1:void run()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.thread.Scheduler getScheduler()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.MBeanBridgeDestination:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.network.NetworkBridgeConfiguration,org.apache.activemq.network.NetworkBridge,org.apache.activemq.broker.jmx.NetworkBridgeView)",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createRegionBroker(org.apache.activemq.broker.region.DestinationInterceptor)",
            "org.apache.activemq.camel.camelplugin.CamelRoutesBroker:void start()",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl:void setBrokerService(org.apache.activemq.broker.BrokerService)"
        ]
    },
    "org.apache.activemq.broker.SslBrokerService:org.apache.activemq.transport.TransportServer createSslTransportServer(java.net.URI,javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void configureServerSocket(java.net.ServerSocket)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.SslBrokerService:org.apache.activemq.broker.TransportConnector addSslConnector(java.net.URI,javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void upgradeFromLegacy()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void load()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void startPersistenceAdapter(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void start()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void access$000(org.apache.activemq.broker.BrokerService)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService$2:void run()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector startTransportConnector(org.apache.activemq.broker.TransportConnector)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:java.lang.String addConnector(java.lang.String)",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()"
        ]
    },
    "org.apache.activemq.broker.jmx.ConnectorView:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.peer.PeerTransportFactory$1:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)",
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.InactivityMonitor:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void start()",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void start()",
            "org.apache.activemq.broker.TransportConnection:void start()"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$8:void visit(org.apache.activemq.store.kahadb.data.KahaRescheduleJobCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.data.KahaRescheduleJobCommand:void visit(org.apache.activemq.store.kahadb.Visitor)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$8:void visit(org.apache.activemq.store.kahadb.data.KahaRemoveScheduledJobCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.data.KahaRemoveScheduledJobCommand:void visit(org.apache.activemq.store.kahadb.Visitor)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$8:void visit(org.apache.activemq.store.kahadb.data.KahaRemoveScheduledJobsCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.data.KahaRemoveScheduledJobsCommand:void visit(org.apache.activemq.store.kahadb.Visitor)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$8:void visit(org.apache.activemq.store.kahadb.data.KahaAddScheduledJobCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.data.KahaAddScheduledJobCommand:void visit(org.apache.activemq.store.kahadb.Visitor)"
        ]
    },
    "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$start_master$1:void apply()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$start_master$1:java.lang.Object apply()"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void <init>(org.apache.activemq.transport.mqtt.MQTTTransport,org.apache.activemq.broker.BrokerService)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.ws.AbstractMQTTSocket:org.apache.activemq.transport.mqtt.MQTTProtocolConverter getProtocolConverter()",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void <init>(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,org.apache.activemq.broker.BrokerService)"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnection:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.proxy.ProxyConnector$1:void onAccept(org.apache.activemq.transport.Transport)"
        ]
    },
    "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void start()",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void start()",
            "org.apache.activemq.broker.TransportConnection:void start()"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void start()",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void start()",
            "org.apache.activemq.broker.TransportConnection:void start()"
        ]
    },
    "org.apache.activemq.transport.reliable.ReliableTransport:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void start()",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void start()",
            "org.apache.activemq.broker.TransportConnection:void start()"
        ]
    },
    "org.apache.activemq.transport.udp.UdpTransportServer$2:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void start()",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void start()",
            "org.apache.activemq.broker.TransportConnection:void start()"
        ]
    },
    "org.apache.activemq.transport.WriteTimeoutFilter:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void start()",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void start()",
            "org.apache.activemq.broker.TransportConnection:void start()"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpTransportFilter:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void start()",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void start()",
            "org.apache.activemq.broker.TransportConnection:void start()"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void start()",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void start()",
            "org.apache.activemq.broker.TransportConnection:void start()"
        ]
    },
    "org.apache.activemq.transport.stomp.StompTransportFilter:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void start()",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void start()",
            "org.apache.activemq.broker.TransportConnection:void start()"
        ]
    },
    "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$start_slave$1:void apply()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$start_slave$1:java.lang.Object apply()"
        ]
    },
    "org.apache.activemq.ActiveMQSession$5:void afterRollback()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:void clearMessagesInProgress(java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void setOptimizedAckScheduledAckInterval(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean,javax.jms.MessageListener)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:org.apache.activemq.thread.Scheduler getScheduler()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void rollback()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void dispose()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void doClose()"
        ]
    },
    "org.apache.activemq.network.LdapNetworkConnector:void addConnector(javax.naming.directory.SearchResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.LdapNetworkConnector:void objectAdded(javax.naming.event.NamingEvent)",
            "org.apache.activemq.network.LdapNetworkConnector:void start()",
            "org.apache.activemq.network.LdapNetworkConnector:void objectChanged(javax.naming.event.NamingEvent)"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:java.lang.String addNetworkConnector(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.NetworkConnectorView:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService$9:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void duplexStart(org.apache.activemq.broker.TransportConnection,org.apache.activemq.command.BrokerInfo,org.apache.activemq.command.BrokerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBrokerInfo(org.apache.activemq.command.BrokerInfo)"
        ]
    },
    "org.apache.activemq.network.DiscoveryNetworkConnector:void onServiceAdd(org.apache.activemq.command.DiscoveryEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.NetworkBridgeView:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.MulticastNetworkConnector:void handleStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.NetworkConnector$1:void doStart()"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl:org.apache.activemq.store.kahadb.plist.PListImpl getPList(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl:org.apache.activemq.store.PList getPList(java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ConnectionView:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnector$1$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.MBeanBridgeDestination:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.network.NetworkBridgeConfiguration,org.apache.activemq.network.NetworkBridge,org.apache.activemq.broker.jmx.NetworkBridgeView)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.MBeanNetworkListener:void onStart(org.apache.activemq.network.NetworkBridge)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createRegionBroker(org.apache.activemq.broker.region.DestinationInterceptor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createRegionBroker()"
        ]
    },
    "org.apache.activemq.camel.camelplugin.CamelRoutesBroker:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl:void setBrokerService(org.apache.activemq.broker.BrokerService)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.SslBrokerService:org.apache.activemq.broker.TransportConnector addSslConnector(java.net.URI,javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void configureServerSocket(java.net.ServerSocket)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.SslBrokerService:org.apache.activemq.broker.TransportConnector addSslConnector(java.lang.String,javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void load()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void start(boolean)",
            "org.apache.activemq.xbean.XBeanBrokerService:void afterPropertiesSet()",
            "org.apache.activemq.broker.BrokerService:void autoStart()",
            "org.apache.activemq.transport.http.HttpEmbeddedTunnelServlet:void init()",
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)",
            "org.apache.activemq.broker.jmx.BrokerView:void start()"
        ]
    },
    "org.apache.activemq.broker.BrokerService$2:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:java.lang.String addConnector(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:void startAllConnectors()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void doStartBroker()",
            "org.apache.activemq.broker.BrokerService:void masterFailed()",
            "org.apache.activemq.util.DefaultIOExceptionHandler$1$1:void run()"
        ]
    },
    "org.apache.activemq.transport.peer.PeerTransportFactory$1:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.peer.PeerTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)",
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.peer.PeerTransportFactory$1:org.apache.activemq.transport.Transport doConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.store.kahadb.data.KahaRescheduleJobCommand:void visit(org.apache.activemq.store.kahadb.Visitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.MessageDatabase$IndexAware)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.store.kahadb.data.KahaRemoveScheduledJobCommand:void visit(org.apache.activemq.store.kahadb.Visitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.MessageDatabase$IndexAware)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.store.kahadb.data.KahaRemoveScheduledJobsCommand:void visit(org.apache.activemq.store.kahadb.Visitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.MessageDatabase$IndexAware)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.store.kahadb.data.KahaAddScheduledJobCommand:void visit(org.apache.activemq.store.kahadb.Visitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.MessageDatabase$IndexAware)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$start_master$1:java.lang.Object apply()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.ws.AbstractMQTTSocket:org.apache.activemq.transport.mqtt.MQTTProtocolConverter getProtocolConverter()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.ws.AbstractMQTTSocket:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ws.jetty8.MQTTSocket:void onMessage(byte[],int,int)",
            "org.apache.activemq.transport.ws.jetty8.MQTTSocket:void onClose(int,java.lang.String)",
            "org.apache.activemq.transport.ws.jetty9.MQTTSocket:void onWebSocketClose(int,java.lang.String)",
            "org.apache.activemq.transport.ws.jetty9.MQTTSocket:void onWebSocketBinary(byte[],int,int)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void <init>(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,org.apache.activemq.broker.BrokerService)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTNIOTransportFactory:org.apache.activemq.transport.Transport compositeConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFactory:org.apache.activemq.transport.Transport compositeConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)",
            "org.apache.activemq.transport.mqtt.MQTTSslTransportFactory:org.apache.activemq.transport.Transport compositeConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnector$1:void onAccept(org.apache.activemq.transport.Transport)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$start_slave$1:java.lang.Object apply()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean,javax.jms.MessageListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean,javax.jms.MessageListener)",
            "org.apache.activemq.ActiveMQQueueReceiver:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,int,int,boolean)",
            "org.apache.activemq.ActiveMQTopicSubscriber:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean)",
            "org.apache.activemq.ActiveMQQueueBrowser$1:void <init>(org.apache.activemq.ActiveMQQueueBrowser,org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean,javax.jms.MessageListener)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void rollback()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer$5:void afterRollback()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void doClose()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer$3:void afterCommit()",
            "org.apache.activemq.ActiveMQMessageConsumer:void close()",
            "org.apache.activemq.ActiveMQMessageConsumer$3:void afterRollback()"
        ]
    },
    "org.apache.activemq.network.LdapNetworkConnector:void objectAdded(javax.naming.event.NamingEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.LdapNetworkConnector:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.LdapNetworkConnector:void objectChanged(javax.naming.event.NamingEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBrokerInfo(org.apache.activemq.command.BrokerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.command.BrokerInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.network.NetworkConnector$1:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void start()"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl:org.apache.activemq.store.PList getPList(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.MBeanNetworkListener:void onStart(org.apache.activemq.network.NetworkBridge)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createRegionBroker()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createBroker()"
        ]
    },
    "org.apache.activemq.broker.SslBrokerService:org.apache.activemq.broker.TransportConnector addSslConnector(java.lang.String,javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void configureServerSocket(java.net.ServerSocket)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:void start(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.xbean.XBeanBrokerService:void afterPropertiesSet()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.xbean.XBeanBrokerService:void postConstruct()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void autoStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void postConstruct()"
        ]
    },
    "org.apache.activemq.transport.http.HttpEmbeddedTunnelServlet:void init()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:void doStartBroker()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void access$300(org.apache.activemq.broker.BrokerService)",
            "org.apache.activemq.broker.BrokerService:void startBroker(boolean)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void masterFailed()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.util.DefaultIOExceptionHandler$1$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.peer.PeerTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.peer.PeerTransportFactory$1:org.apache.activemq.transport.Transport doConnect(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.peer.PeerTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void doRecover(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.AbstractKahaDBStore:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand,boolean,java.lang.Runnable,java.lang.Runnable,java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.MessageDatabase$IndexAware)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand,boolean,org.apache.activemq.store.kahadb.MessageDatabase$IndexAware,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void incrementalRecover()",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.disk.journal.Location)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void recover()"
        ]
    },
    "org.apache.activemq.transport.ws.AbstractMQTTSocket:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.ws.jetty8.MQTTSocket:void onMessage(byte[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.ws.jetty8.MQTTSocket:void onClose(int,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.ws.jetty9.MQTTSocket:void onWebSocketClose(int,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.ws.jetty9.MQTTSocket:void onWebSocketBinary(byte[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.mqtt.MQTTNIOTransportFactory:org.apache.activemq.transport.Transport compositeConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport serverConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.HashMap)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTTransportFactory:org.apache.activemq.transport.Transport compositeConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport serverConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.HashMap)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTSslTransportFactory:org.apache.activemq.transport.Transport compositeConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport serverConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.HashMap)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean,javax.jms.MessageListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,javax.jms.MessageListener)",
            "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueReceiver:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,int,int,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSubscriber:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic,java.lang.String,boolean)",
            "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueBrowser$1:void <init>(org.apache.activemq.ActiveMQQueueBrowser,org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean,javax.jms.MessageListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueBrowser:org.apache.activemq.ActiveMQMessageConsumer createConsumer()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQQueueBrowser$1:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:boolean iterate()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer$5:void afterRollback()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQMessageConsumer$3:void afterCommit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledMessageConsumer:void close()",
            "org.apache.activemq.ActiveMQQueueBrowser:void destroyConsumer()",
            "org.apache.activemq.util.ConsumerThread:void run()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer$3:void afterRollback()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.command.BrokerInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void doStartLocalAndRemoteBridges()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createBroker()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker getBroker()"
        ]
    },
    "org.apache.activemq.xbean.XBeanBrokerService:void postConstruct()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:void postConstruct()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:void access$300(org.apache.activemq.broker.BrokerService)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService$3:void run()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void startBroker(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void start()"
        ]
    },
    "org.apache.activemq.transport.peer.PeerTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void doRecover(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.disk.journal.Location)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void recover()"
        ]
    },
    "org.apache.activemq.store.kahadb.AbstractKahaDBStore:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand,boolean,java.lang.Runnable,java.lang.Runnable,java.lang.Runnable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.AbstractKahaDBStore:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand)",
            "org.apache.activemq.store.kahadb.AbstractKahaDBStore:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand,java.lang.Runnable)",
            "org.apache.activemq.store.kahadb.AbstractKahaDBStore:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand,boolean,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.kahadb.AbstractKahaDBStore:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand,boolean,org.apache.activemq.store.kahadb.MessageDatabase$IndexAware,java.lang.Runnable,java.lang.Runnable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand,boolean,org.apache.activemq.store.kahadb.MessageDatabase$IndexAware,java.lang.Runnable)",
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand,java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void incrementalRecover()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void recover()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void open()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:boolean iterate()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void duplexStart(org.apache.activemq.broker.TransportConnection,org.apache.activemq.command.BrokerInfo,org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$3:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport$1:void onCommand(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$2:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void doStartLocalAndRemoteBridges()"
        ]
    },
    "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void oneway(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter$1$1:void onResponse(org.apache.activemq.transport.mqtt.MQTTProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter$2:void onResponse(org.apache.activemq.transport.mqtt.MQTTProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter$1:void onResponse(org.apache.activemq.transport.mqtt.MQTTProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onActiveMQCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onSubscribe(org.fusesource.mqtt.codec.SUBSCRIBE)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTConnect(org.fusesource.mqtt.codec.CONNECT)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.ResponseCorrelator:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.ResponseCorrelator:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.reliable.ReliableTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.reliable.ReliableTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.MutexTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)"
        ]
    },
    "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.proxy.ProxyConnection$1:void onCommand(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ThreadNameFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.transport.WriteTimeoutFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mock.MockTransport:void oneway(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter$2:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.stomp.ProtocolConverter$1:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onActiveMQCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.stomp.StompSubscription:void onMessageDispatch(org.apache.activemq.command.MessageDispatch,java.lang.String)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void access$800(org.apache.activemq.transport.AbstractInactivityMonitor,java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport serverConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.HashMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.amqp.AmqpNioTransportFactory:org.apache.activemq.transport.Transport serverConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.HashMap)",
            "org.apache.activemq.transport.tcp.TcpTransportServer:void handleSocket(java.net.Socket)",
            "org.apache.activemq.transport.stomp.StompTransportFactory:org.apache.activemq.transport.Transport serverConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.HashMap)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFactory:org.apache.activemq.transport.Transport serverConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.HashMap)",
            "org.apache.activemq.transport.stomp.StompNIOTransportFactory:org.apache.activemq.transport.Transport serverConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.HashMap)",
            "org.apache.activemq.transport.mqtt.MQTTNIOTransportFactory:org.apache.activemq.transport.Transport serverConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.HashMap)",
            "org.apache.activemq.transport.mqtt.MQTTSslTransportFactory:org.apache.activemq.transport.Transport serverConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.HashMap)",
            "org.apache.activemq.transport.stomp.StompSslTransportFactory:org.apache.activemq.transport.Transport serverConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.HashMap)",
            "org.apache.activemq.transport.amqp.AmqpTransportFactory:org.apache.activemq.transport.Transport serverConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.HashMap)",
            "org.apache.activemq.transport.amqp.AmqpSslTransportFactory:org.apache.activemq.transport.Transport serverConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.HashMap)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,javax.jms.MessageListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,javax.jms.MessageListener)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)",
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)",
            "org.apache.activemq.jms.pool.PooledSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue,java.lang.String)",
            "org.apache.activemq.jms.pool.PooledSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue,java.lang.String)",
            "org.apache.activemq.ActiveMQSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic)",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic,java.lang.String,boolean)",
            "org.apache.activemq.jms.pool.PooledSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String)",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String,java.lang.String,boolean)",
            "org.apache.activemq.jms.pool.PooledSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueBrowser:org.apache.activemq.ActiveMQMessageConsumer createConsumer()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueBrowser:java.util.Enumeration getEnumeration()"
        ]
    },
    "org.apache.activemq.ActiveMQQueueBrowser$1:void dispatch(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:boolean iterate()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledMessageConsumer:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueBrowser:void destroyConsumer()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueBrowser:java.lang.Object nextElement()",
            "org.apache.activemq.ActiveMQQueueBrowser:void close()",
            "org.apache.activemq.ActiveMQQueueBrowser:boolean hasMoreElements()"
        ]
    },
    "org.apache.activemq.util.ConsumerThread:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection$1:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void doStartLocalAndRemoteBridges()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void access$500(org.apache.activemq.network.DemandForwardingBridgeSupport)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker getBroker()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startDestinations()",
            "org.apache.activemq.broker.jmx.DurableSubscriptionView:void destroy()",
            "org.apache.activemq.broker.BrokerService:void removeDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.TransportConnector:void start()",
            "org.apache.activemq.network.LdapNetworkConnector:void addConnector(javax.naming.directory.SearchResult)",
            "org.apache.activemq.broker.jmx.BrokerView:void gc()",
            "org.apache.activemq.transport.amqp.sasl.AmqpAuthenticator:org.apache.activemq.security.AuthenticationBroker getAuthenticator()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.ConnectionContext getAdminConnectionContext()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void fireFailedForwardAdvisory(org.apache.activemq.command.MessageDispatch,java.lang.Throwable)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.broker.view.MessageBrokerView:java.util.Set getDestinations()",
            "org.apache.activemq.broker.region.BaseDestination:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.store.MessageStore,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)",
            "org.apache.activemq.broker.view.MessageBrokerView:java.lang.String getBrokerId()",
            "org.apache.activemq.broker.jmx.BrokerView:void destroyDurableSubscriber(java.lang.String,java.lang.String)",
            "org.apache.activemq.advisory.AdvisoryBroker:void nowMasterBroker()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.region.Destination getDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.transport.amqp.protocol.AmqpConnection:org.apache.activemq.command.ConsumerInfo lookupSubscription(java.lang.String)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)",
            "org.apache.activemq.transport.mqtt.strategy.AbstractMQTTSubscriptionStrategy:void onReSubscribe(org.apache.activemq.transport.mqtt.MQTTSubscription)",
            "org.apache.activemq.broker.BrokerService:void doStartBroker()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()",
            "org.apache.activemq.advisory.AdvisoryBroker:void networkBridgeStarted(org.apache.activemq.command.BrokerInfo,boolean,java.lang.String)",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.jmx.BrokerView getAdminView()",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:org.apache.activemq.broker.inteceptor.MessageInterceptorFilter getFilter()",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.Broker getRoot()",
            "org.apache.activemq.transport.mqtt.strategy.AbstractMQTTSubscriptionStrategy:java.util.List lookupSubscription(java.lang.String)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()",
            "org.apache.activemq.advisory.AdvisoryBroker:void networkBridgeStopped(org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:void destroy()"
        ]
    },
    "org.apache.activemq.broker.BrokerService$3:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void recover()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void load()"
        ]
    },
    "org.apache.activemq.store.kahadb.AbstractKahaDBStore:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void doSchedule(java.lang.String,org.apache.activemq.util.ByteSequence,java.lang.String,long,long,int)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void doRemoveRange(long,long)",
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyStoreReplayer:void replayScheduler(org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerImpl,org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void doReschedule(java.lang.String,long,long,int)",
            "org.apache.activemq.store.kahadb.AbstractKahaDBStore:void doStart()",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void doRemove(long,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadb.AbstractKahaDBStore:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand,java.lang.Runnable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.AbstractKahaDBStore:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand,boolean,java.lang.Runnable,java.lang.Runnable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.AbstractKahaDBStore:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand,boolean,org.apache.activemq.store.kahadb.MessageDatabase$IndexAware,java.lang.Runnable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void updateMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void addSubscription(org.apache.activemq.command.SubscriptionInfo,boolean)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void recover()",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore:void prepare(org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void doAcknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore:void rollback(org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand,java.lang.Runnable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.disk.journal.Location checkpointAckMessageFileMap()",
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.disk.journal.Location checkpointProducerAudit()"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void open()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void load()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchSync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:boolean iterate()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:boolean iterate()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$3:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.WireFormatNegotiator:void start()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$1:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$2:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.reliable.DefaultReplayStrategy:boolean onDroppedPackets(org.apache.activemq.transport.reliable.ReliableTransport,int,int,int)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void onMissingResponse(org.apache.activemq.command.Command,org.apache.activemq.transport.FutureResponse)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter$1$1:void onResponse(org.apache.activemq.transport.mqtt.MQTTProtocolConverter,org.apache.activemq.command.Response)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void sendToActiveMQ(org.apache.activemq.command.Command,org.apache.activemq.transport.mqtt.ResponseHandler)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter$2:void onResponse(org.apache.activemq.transport.mqtt.MQTTProtocolConverter,org.apache.activemq.command.Response)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void sendToActiveMQ(org.apache.activemq.command.Command,org.apache.activemq.transport.mqtt.ResponseHandler)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter$1:void onResponse(org.apache.activemq.transport.mqtt.MQTTProtocolConverter,org.apache.activemq.command.Response)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void sendToActiveMQ(org.apache.activemq.command.Command,org.apache.activemq.transport.mqtt.ResponseHandler)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onActiveMQCommand(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.ws.AbstractMQTTSocket:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void oneway(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onSubscribe(org.fusesource.mqtt.codec.SUBSCRIBE)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTCommand(org.fusesource.mqtt.codec.MQTTFrame)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTCommand(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTPubRel(org.fusesource.mqtt.codec.PUBREL)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTPubRec(org.fusesource.mqtt.codec.PUBREC)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onUnSubscribe(org.fusesource.mqtt.codec.UNSUBSCRIBE)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTConnect(org.fusesource.mqtt.codec.CONNECT)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTCommand(org.fusesource.mqtt.codec.MQTTFrame)"
        ]
    },
    "org.apache.activemq.transport.ResponseCorrelator:java.lang.Object request(java.lang.Object,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object,int)"
        ]
    },
    "org.apache.activemq.transport.ResponseCorrelator:java.lang.Object request(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.TransportLogger:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.TransportLogger:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)"
        ]
    },
    "org.apache.activemq.transport.reliable.ReliableTransport:java.lang.Object request(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.reliable.ReliableTransport:java.lang.Object request(java.lang.Object,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object,int)"
        ]
    },
    "org.apache.activemq.transport.MutexTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.TransportLogger:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.mock.MockTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportLogger:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnection$1:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.ThreadNameFilter:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.WriteTimeoutFilter:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter$2:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter$1:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onActiveMQCommand(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.ws.AbstractStompSocket:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void oneway(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompSubscription:void onMessageDispatch(org.apache.activemq.command.MessageDispatch,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.StompQueueBrowserSubscription:void onMessageDispatch(org.apache.activemq.command.MessageDispatch,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.StompQueueBrowserSubscription:void onMessageDispatch(org.apache.activemq.command.MessageDispatch,java.lang.String)",
            "org.apache.activemq.transport.stomp.ProtocolConverter$3$1:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void handleException(java.lang.Throwable,org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void sendReceipt(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor:void access$800(org.apache.activemq.transport.AbstractInactivityMonitor,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor$4:void run()"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpNioTransportFactory:org.apache.activemq.transport.Transport serverConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.HashMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void handleSocket(java.net.Socket)"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpTransportServer:void handleSocket(java.net.Socket)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransportServer$1:void onSelect(org.apache.activemq.transport.nio.SelectorSelection)",
            "org.apache.activemq.transport.tcp.TcpTransportServer$2:void run()",
            "org.apache.activemq.transport.tcp.TcpTransportServer:void run()"
        ]
    },
    "org.apache.activemq.transport.stomp.StompTransportFactory:org.apache.activemq.transport.Transport serverConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.HashMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.mqtt.MQTTTransportFactory:org.apache.activemq.transport.Transport serverConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.HashMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void handleSocket(java.net.Socket)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompNIOTransportFactory:org.apache.activemq.transport.Transport serverConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.HashMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void handleSocket(java.net.Socket)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTNIOTransportFactory:org.apache.activemq.transport.Transport serverConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.HashMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void handleSocket(java.net.Socket)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTSslTransportFactory:org.apache.activemq.transport.Transport serverConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.HashMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void handleSocket(java.net.Socket)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompSslTransportFactory:org.apache.activemq.transport.Transport serverConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.HashMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void handleSocket(java.net.Socket)"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpTransportFactory:org.apache.activemq.transport.Transport serverConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.HashMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.amqp.AmqpSslTransportFactory:org.apache.activemq.transport.Transport serverConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.HashMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,javax.jms.MessageListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)",
            "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)",
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue)",
            "org.apache.activemq.jms.pool.PooledSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic)",
            "org.apache.activemq.jms.pool.PooledSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ConsumerThread:void run()",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String)",
            "org.apache.activemq.jms.pool.PooledSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueBrowser:java.util.Enumeration getEnumeration()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.filter.AmqMessagesQueryFilter:java.util.List queryMessages(org.apache.activemq.command.ActiveMQQueue,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueBrowser:java.lang.Object nextElement()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueBrowser:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueBrowser:boolean hasMoreElements()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnection$1:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.state.ConnectionStateTracker:void connectionInterruptProcessingComplete(org.apache.activemq.transport.Transport,org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void access$500(org.apache.activemq.network.DemandForwardingBridgeSupport)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport$5:void run()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void startDestinations()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void doStartBroker()"
        ]
    },
    "org.apache.activemq.broker.jmx.DurableSubscriptionView:void destroy()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:void removeDestination(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.MirroredQueue:void remove(org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:void gc()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.amqp.sasl.AmqpAuthenticator:org.apache.activemq.security.AuthenticationBroker getAuthenticator()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.amqp.sasl.AmqpAuthenticator:boolean tryAuthenticate(org.apache.activemq.command.ConnectionInfo,java.security.cert.X509Certificate[])"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.ConnectionContext getAdminConnectionContext()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startDestinations()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.region.Destination getDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerService:void startVirtualConsumerDestinations()",
            "org.apache.activemq.broker.BrokerService:void removeDestination(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void fireFailedForwardAdvisory(org.apache.activemq.command.MessageDispatch,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalException(org.apache.activemq.command.MessageDispatch,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.broker.view.MessageBrokerView:java.util.Set getDestinations()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.view.MessageBrokerView:java.util.Set getTopics()",
            "org.apache.activemq.broker.view.MessageBrokerView:java.util.Set getTempTopics()",
            "org.apache.activemq.broker.view.MessageBrokerView:java.util.Set getQueues()",
            "org.apache.activemq.broker.view.MessageBrokerView:java.util.Set getTempQueues()"
        ]
    },
    "org.apache.activemq.broker.region.BaseDestination:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.store.MessageStore,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.TopicMessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)",
            "org.apache.activemq.broker.region.Queue:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.MessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)"
        ]
    },
    "org.apache.activemq.broker.view.MessageBrokerView:java.lang.String getBrokerId()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:void destroyDurableSubscriber(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void nowMasterBroker()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void nowMasterBroker()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.region.Destination getDestination(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.view.MessageBrokerView:org.apache.activemq.broker.view.BrokerDestinationView getDestinationView(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.virtual.MirroredQueue:org.apache.activemq.broker.region.Destination getMirrorDestination(org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.transport.amqp.protocol.AmqpConnection:org.apache.activemq.command.ConsumerInfo lookupSubscription(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.amqp.protocol.AmqpSession:void createSender(org.apache.qpid.proton.engine.Sender)"
        ]
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.mqtt.strategy.AbstractMQTTSubscriptionStrategy:void onReSubscribe(org.apache.activemq.transport.mqtt.MQTTSubscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.strategy.AbstractMQTTSubscriptionStrategy:byte onSubscribe(org.fusesource.mqtt.client.Topic)",
            "org.apache.activemq.transport.mqtt.strategy.MQTTVirtualTopicSubscriptionStrategy:void onReSubscribe(org.apache.activemq.transport.mqtt.MQTTSubscription)",
            "org.apache.activemq.transport.mqtt.strategy.MQTTDefaultSubscriptionStrategy:void onReSubscribe(org.apache.activemq.transport.mqtt.MQTTSubscription)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void networkBridgeStarted(org.apache.activemq.command.BrokerInfo,boolean,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void networkBridgeStarted(org.apache.activemq.command.BrokerInfo,boolean,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.jmx.BrokerView getAdminView()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.AbstractRegion:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void start()"
        ]
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:org.apache.activemq.broker.inteceptor.MessageInterceptorFilter getFilter()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:org.apache.activemq.broker.inteceptor.MessageInterceptor addMessageInterceptor(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:void removeMessageInterceptor(org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.inteceptor.MessageInterceptor)",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:void injectMessage(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:org.apache.activemq.broker.inteceptor.MessageInterceptor addMessageInterceptor(org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.inteceptor.MessageInterceptor)",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:void removeMessageInterceptorForQueue(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:void removeMessageInterceptor(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:org.apache.activemq.broker.inteceptor.MessageInterceptor addMessageInterceptorForQueue(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:org.apache.activemq.broker.inteceptor.MessageInterceptor addMessageInterceptorForTopic(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:void removeMessageInterceptorForTopic(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.Broker getRoot()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void discard(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.Broker getRoot()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void sendToDLQ(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,java.lang.Throwable)",
            "org.apache.activemq.broker.region.RegionBroker:void purgeInactiveDestinations()",
            "org.apache.activemq.broker.region.RegionBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.transport.mqtt.strategy.AbstractMQTTSubscriptionStrategy:java.util.List lookupSubscription(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.strategy.MQTTDefaultSubscriptionStrategy:void onConnect(org.fusesource.mqtt.codec.CONNECT)",
            "org.apache.activemq.transport.mqtt.strategy.MQTTVirtualTopicSubscriptionStrategy:void onConnect(org.fusesource.mqtt.codec.CONNECT)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.NetworkBridgeView:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void networkBridgeStopped(org.apache.activemq.command.BrokerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void networkBridgeStopped(org.apache.activemq.command.BrokerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:void destroy()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void doSchedule(java.lang.String,org.apache.activemq.util.ByteSequence,java.lang.String,long,long,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void schedule(java.lang.String,org.apache.activemq.util.ByteSequence,long)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void schedule(java.lang.String,org.apache.activemq.util.ByteSequence,java.lang.String)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void schedule(java.lang.String,org.apache.activemq.util.ByteSequence,java.lang.String,long,long,int)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void doRemoveRange(long,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void removeAllJobs(long,long)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void remove(long)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void removeAllJobs()"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyStoreReplayer:void replayScheduler(org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerImpl,org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyStoreReplayer:void startReplay(org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void doReschedule(java.lang.String,long,long,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void mainLoop()"
        ]
    },
    "org.apache.activemq.store.kahadb.AbstractKahaDBStore:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void doRemove(long,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void doRemove(long,java.util.List)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void remove(java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void updateMessage(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:void updateMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyMessageStore:void updateMessage(org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void addSubscription(org.apache.activemq.command.SubscriptionInfo,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:void addSubscription(org.apache.activemq.command.SubscriptionInfo,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.memory.MemoryTransactionStore:void removeMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$7:java.util.concurrent.Future run(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$4:void run(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void removeMessage(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$6:java.util.concurrent.Future run(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.ProxyMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void load()"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.ProxyMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore:void prepare(org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void doAcknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$StoreTopicTask:void run()",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore:void rollback(org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore:org.apache.activemq.store.ListenableFuture asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.AbstractMessageStore:org.apache.activemq.store.ListenableFuture asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:org.apache.activemq.store.ListenableFuture asyncAddTopicMessage(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.AbstractMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void addMessage(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.AbstractMessageStore:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.KahaDBStore$StoreTopicTask:void run()",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.KahaDBStore$StoreQueueTask:void run()",
            "org.apache.activemq.store.memory.MemoryTransactionStore$3:void run(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$3:java.util.concurrent.Future run(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.disk.journal.Location checkpointAckMessageFileMap()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void checkpointUpdate(org.apache.activemq.store.kahadb.disk.page.Transaction,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.disk.journal.Location checkpointProducerAudit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void checkpointUpdate(org.apache.activemq.store.kahadb.disk.page.Transaction,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void load()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void doStart()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void dispatchSync(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void dispatch(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.TransportConnection$1:void onCommand(java.lang.Object)",
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void serviceException(java.lang.Throwable)",
            "org.apache.activemq.broker.region.PrefetchSubscription:boolean dispatch(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.thread.PooledTaskRunner:void runTask()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.PooledTaskRunner$1:void run()"
        ]
    },
    "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.DedicatedTaskRunner$1:void run()"
        ]
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.ws.AbstractStompSocket:void processStompFrame(java.lang.String)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransport:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.vm.VMTransportServer$1:void stop()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void stop()"
        ]
    },
    "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onActiveMQCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void sendToActiveMQ(org.apache.activemq.command.Command,org.apache.activemq.transport.mqtt.ResponseHandler)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTPubComp(org.fusesource.mqtt.codec.PUBCOMP)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTPubAck(org.fusesource.mqtt.codec.PUBACK)"
        ]
    },
    "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void sendToActiveMQ(org.apache.activemq.command.Command,org.apache.activemq.transport.stomp.ResponseHandler)",
            "org.apache.activemq.transport.stomp.StompSubscription:void onMessageDispatch(org.apache.activemq.command.MessageDispatch,java.lang.String)",
            "org.apache.activemq.transport.stomp.StompSubscription:void onStompCommit(org.apache.activemq.command.TransactionId)"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransport:void dispatch(org.apache.activemq.transport.vm.VMTransport,java.util.concurrent.BlockingQueue,java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void start()"
        ]
    },
    "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransport:boolean iterate()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.udp.ResponseRedirectInterceptor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransport:void doRun()",
            "org.apache.activemq.transport.tcp.SslTransport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.udp.UdpTransport:void run()",
            "org.apache.activemq.transport.http.HttpClientTransport:void run()",
            "org.apache.activemq.transport.nio.NIOTransport:void serviceRead()",
            "org.apache.activemq.transport.amqp.AmqpFrameParser$1:void onFrame(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTCodec$1:void onFrame(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.transport.stomp.StompCodec:void processCommand()",
            "org.apache.activemq.transport.ws.AbstractMQTTSocket:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompCodec:void parse(java.io.ByteArrayInputStream,int)",
            "org.apache.activemq.transport.ws.AbstractStompSocket:void sendToActiveMQ(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.reliable.DefaultReplayStrategy:boolean onDroppedPackets(org.apache.activemq.transport.reliable.ReliableTransport,int,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.reliable.ReliableTransport:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.reliable.ReliableTransport:void onMissingResponse(org.apache.activemq.command.Command,org.apache.activemq.transport.FutureResponse)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.reliable.ReliableTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.reliable.ReliableTransport:java.lang.Object request(java.lang.Object,int)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void sendToActiveMQ(org.apache.activemq.command.Command,org.apache.activemq.transport.mqtt.ResponseHandler)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.strategy.AbstractMQTTSubscriptionStrategy:void deleteDurableSubs(java.util.List)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter$1:void onResponse(org.apache.activemq.transport.mqtt.MQTTProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onTransportError()",
            "org.apache.activemq.transport.mqtt.strategy.AbstractMQTTSubscriptionStrategy:void doUnSubscribe(org.apache.activemq.transport.mqtt.MQTTSubscription)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTDisconnect()",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTPublish(org.fusesource.mqtt.codec.PUBLISH)",
            "org.apache.activemq.transport.mqtt.strategy.AbstractMQTTSubscriptionStrategy:byte doSubscribe(org.apache.activemq.command.ConsumerInfo,java.lang.String,org.fusesource.mqtt.client.QoS)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void handleException(java.lang.Throwable,org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTConnect(org.fusesource.mqtt.codec.CONNECT)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTCommand(org.fusesource.mqtt.codec.MQTTFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.ws.jetty8.MQTTSocket:void onMessage(byte[],int,int)",
            "org.apache.activemq.transport.ws.jetty8.MQTTSocket:void onClose(int,java.lang.String)",
            "org.apache.activemq.transport.ws.jetty9.MQTTSocket:void onWebSocketClose(int,java.lang.String)",
            "org.apache.activemq.transport.ws.jetty9.MQTTSocket:void onWebSocketBinary(byte[],int,int)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTPubRel(org.fusesource.mqtt.codec.PUBREL)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTCommand(org.fusesource.mqtt.codec.MQTTFrame)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTPubRec(org.fusesource.mqtt.codec.PUBREC)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTCommand(org.fusesource.mqtt.codec.MQTTFrame)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onUnSubscribe(org.fusesource.mqtt.codec.UNSUBSCRIBE)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTCommand(org.fusesource.mqtt.codec.MQTTFrame)"
        ]
    },
    "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object,int)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.TransportLogger:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object,int)"
        ]
    },
    "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.TransportLogger:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)"
        ]
    },
    "org.apache.activemq.transport.ws.AbstractStompSocket:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompTransportFilter:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompQueueBrowserSubscription:void onMessageDispatch(org.apache.activemq.command.MessageDispatch,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter$3$1:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void handleException(java.lang.Throwable,org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter$3$1:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.stomp.ProtocolConverter$2:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.stomp.ProtocolConverter$1:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.stomp.ProtocolConverter$3:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onActiveMQCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void sendReceipt(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor$4:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.tcp.TcpTransportServer$1:void onSelect(org.apache.activemq.transport.nio.SelectorSelection)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorSelection:void onSelect()"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpTransportServer$2:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.tcp.TcpTransportServer:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)",
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)",
            "org.apache.activemq.util.ConsumerThread:void run()",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)",
            "org.apache.activemq.advisory.DestinationSource:void start()"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.console.filter.AmqMessagesQueryFilter:java.util.List queryMessages(org.apache.activemq.command.ActiveMQQueue,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.filter.AmqMessagesQueryFilter:java.util.List query(java.util.List)"
        ]
    },
    "org.apache.activemq.state.ConnectionStateTracker:void connectionInterruptProcessingComplete(org.apache.activemq.transport.Transport,org.apache.activemq.command.ConnectionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void connectionInterruptProcessingComplete(org.apache.activemq.command.ConnectionId)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$5:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.virtual.MirroredQueue:void remove(org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.amqp.sasl.AmqpAuthenticator:boolean tryAuthenticate(org.apache.activemq.command.ConnectionInfo,java.security.cert.X509Certificate[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.amqp.sasl.AmqpAuthenticator:void processSaslExchange(org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void startVirtualConsumerDestinations()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startDestinations()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalException(org.apache.activemq.command.MessageDispatch,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport$11:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalException(java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.broker.view.MessageBrokerView:java.util.Set getTopics()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.camel.component.broker.BrokerComponent:java.util.List completeEndpointPath(org.apache.camel.ComponentConfiguration,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.view.MessageBrokerView:java.util.Set getTempTopics()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.MessageBrokerView:java.util.Set getQueues()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.camel.component.broker.BrokerComponent:java.util.List completeEndpointPath(org.apache.camel.ComponentConfiguration,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.view.MessageBrokerView:java.util.Set getTempQueues()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Topic:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.TopicMessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TempTopic:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.TopicMessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)",
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.MessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TempQueue:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.MessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)",
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void nowMasterBroker()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.camel.camelplugin.CamelRoutesBroker:void nowMasterBroker()",
            "org.apache.activemq.broker.BrokerFilter:void nowMasterBroker()",
            "org.apache.activemq.advisory.AdvisoryBroker:void nowMasterBroker()"
        ]
    },
    "org.apache.activemq.broker.view.MessageBrokerView:org.apache.activemq.broker.view.BrokerDestinationView getDestinationView(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.view.MessageBrokerView:org.apache.activemq.broker.view.BrokerDestinationView getDestinationView(java.lang.String,byte)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.MirroredQueue:org.apache.activemq.broker.region.Destination getMirrorDestination(org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.MirroredQueue:org.apache.activemq.broker.region.Destination intercept(org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.transport.amqp.protocol.AmqpSession:void createSender(org.apache.qpid.proton.engine.Sender)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.mqtt.strategy.AbstractMQTTSubscriptionStrategy:byte onSubscribe(org.fusesource.mqtt.client.Topic)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.strategy.AbstractMQTTSubscriptionStrategy:void restoreDurableSubs(java.util.List)"
        ]
    },
    "org.apache.activemq.transport.mqtt.strategy.MQTTVirtualTopicSubscriptionStrategy:void onReSubscribe(org.apache.activemq.transport.mqtt.MQTTSubscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.strategy.AbstractMQTTSubscriptionStrategy:byte onSubscribe(org.fusesource.mqtt.client.Topic)"
        ]
    },
    "org.apache.activemq.transport.mqtt.strategy.MQTTDefaultSubscriptionStrategy:void onReSubscribe(org.apache.activemq.transport.mqtt.MQTTSubscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.strategy.AbstractMQTTSubscriptionStrategy:byte onSubscribe(org.fusesource.mqtt.client.Topic)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void networkBridgeStarted(org.apache.activemq.command.BrokerInfo,boolean,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void networkBridgeStarted(org.apache.activemq.command.BrokerInfo,boolean,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void start()",
            "org.apache.activemq.broker.BrokerFilter:void start()",
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.broker.BrokerBroadcaster:void start()"
        ]
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:org.apache.activemq.broker.inteceptor.MessageInterceptor addMessageInterceptor(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:void removeMessageInterceptor(org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.inteceptor.MessageInterceptor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.camel.component.broker.BrokerEndpoint:void removeMessageInterceptor(org.apache.activemq.broker.inteceptor.MessageInterceptor)"
        ]
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:void injectMessage(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.camel.component.broker.BrokerEndpoint:void inject(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:org.apache.activemq.broker.inteceptor.MessageInterceptor addMessageInterceptor(org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.inteceptor.MessageInterceptor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.camel.component.broker.BrokerEndpoint:void addMessageInterceptor(org.apache.activemq.broker.inteceptor.MessageInterceptor)"
        ]
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:void removeMessageInterceptorForQueue(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:void removeMessageInterceptor(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:org.apache.activemq.broker.inteceptor.MessageInterceptor addMessageInterceptorForQueue(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:org.apache.activemq.broker.inteceptor.MessageInterceptor addMessageInterceptorForTopic(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:void removeMessageInterceptorForTopic(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TopicSubscription:void discard(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.Broker getRoot()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.Broker getRoot()",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorFilter:void injectMessage(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void sendToDLQ(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void purgeInactiveDestinations()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker$1:void run()"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.BrokerFilter:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.transport.mqtt.strategy.MQTTDefaultSubscriptionStrategy:void onConnect(org.fusesource.mqtt.codec.CONNECT)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.mqtt.strategy.MQTTVirtualTopicSubscriptionStrategy:void onConnect(org.fusesource.mqtt.codec.CONNECT)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.NetworkBridgeView:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnection:void doStop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void serviceTransportException(java.io.IOException)",
            "org.apache.activemq.broker.TransportConnection$4:void run()"
        ]
    },
    "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$6:void run()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void remove(boolean,java.net.URI[])",
            "org.apache.activemq.ActiveMQConnection:void close()",
            "org.apache.activemq.broker.TransportConnector$1$1:void run()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$6:void run()",
            "org.apache.activemq.network.DiscoveryNetworkConnector:void onServiceAdd(org.apache.activemq.command.DiscoveryEvent)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void collectBrokerInfos()",
            "org.apache.activemq.transport.vm.VMTransportFactory:void stopped(java.lang.String)",
            "org.apache.activemq.transport.failover.FailoverTransport:void disposeTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$9:void run()",
            "org.apache.activemq.transport.fanout.FanoutTransport:boolean doConnect()",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.network.ForwardingBridge:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.ForwardingBridge:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnector$1:void onAccept(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.vm.VMTransportFactory:boolean validateBroker(java.lang.String)"
        ]
    },
    "org.apache.activemq.network.MulticastNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.NetworkConnector$1:void doStop(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void networkBridgeStopped(org.apache.activemq.command.BrokerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void networkBridgeStopped(org.apache.activemq.command.BrokerInfo)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void schedule(java.lang.String,org.apache.activemq.util.ByteSequence,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void schedule(java.lang.String,org.apache.activemq.util.ByteSequence,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void schedule(java.lang.String,org.apache.activemq.util.ByteSequence,java.lang.String,long,long,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void mainLoop()"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void removeAllJobs(long,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void remove(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void removeAllJobs()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyStoreReplayer:void startReplay(org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void upgradeFromLegacy()"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void mainLoop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void run()"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void doRemove(long,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void mainLoop()"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void remove(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void updateMessage(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void preProcessDispatch(org.apache.activemq.command.MessageDispatch)"
        ]
    },
    "org.apache.activemq.store.ProxyMessageStore:void updateMessage(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void preProcessDispatch(org.apache.activemq.command.MessageDispatch)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void addSubscription(org.apache.activemq.command.SubscriptionInfo,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void addSubscription(org.apache.activemq.command.SubscriptionInfo,boolean)",
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore:void removeMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.memory.MemoryTransactionStore$2:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$1:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$2:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$1:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$7:java.util.concurrent.Future run(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$4:void run(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$2:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$1:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void removeMessage(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$1:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$2:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void removeAsyncMessage(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.ProxyMessageStore:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$6:java.util.concurrent.Future run(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void dispose(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.journal.JournalMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.ProxyMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void dispose(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.journal.JournalMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.region.Topic:void deleteSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.util.SubscriptionKey)",
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$StoreTopicTask:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.TopicMessageStore,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$8:java.util.concurrent.Future run(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void acknowledge(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.TopicMessageStore,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$5:void run(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore$3:void run(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore:void acknowledge(org.apache.activemq.store.TopicMessageStore,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void acknowledge(org.apache.activemq.store.TopicMessageStore,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore:org.apache.activemq.store.ListenableFuture asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$2:org.apache.activemq.store.ListenableFuture asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$2:org.apache.activemq.store.ListenableFuture asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)"
        ]
    },
    "org.apache.activemq.store.ProxyMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.AbstractMessageStore:org.apache.activemq.store.ListenableFuture asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore:org.apache.activemq.store.ListenableFuture asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.store.ListenableFuture asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:org.apache.activemq.store.ListenableFuture asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyMessageStore:org.apache.activemq.store.ListenableFuture asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$5:java.util.concurrent.Future run(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:org.apache.activemq.store.ListenableFuture asyncAddTopicMessage(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.memory.MemoryTransactionStore$2:org.apache.activemq.store.ListenableFuture asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$2:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$1:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$1:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$2:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$1:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$2:org.apache.activemq.store.ListenableFuture asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$1:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:org.apache.activemq.store.ListenableFuture asyncAddTopicMessage(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$2:org.apache.activemq.store.ListenableFuture asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$2:org.apache.activemq.store.ListenableFuture asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.AbstractMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)",
            "org.apache.activemq.store.ProxyMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)",
            "org.apache.activemq.store.AbstractMessageStore:org.apache.activemq.store.ListenableFuture asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)",
            "org.apache.activemq.store.AbstractMessageStore:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void addMessage(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$2:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$1:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$1:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$2:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.AbstractMessageStore:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyMessageStore:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$4:java.util.concurrent.Future run(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$2:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$1:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$2:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$1:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$1:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$1:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$1:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$1:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$StoreQueueTask:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$3:void run(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$3:java.util.concurrent.Future run(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void checkpointUpdate(org.apache.activemq.store.kahadb.disk.page.Transaction,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$17:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore:void doStart()"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void dispatch(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:org.apache.activemq.command.Response pullMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.TopicSubscription:void pullTimeout(long,boolean)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void dispatch(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.Topic$3:void run()",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void updateConsumerPrefetch(int)",
            "org.apache.activemq.broker.TransportConnection:void serviceException(java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection:void updateClient(org.apache.activemq.command.ConnectionControl)",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue$4:void run()",
            "org.apache.activemq.broker.TransportConnection:void start()",
            "org.apache.activemq.broker.region.TopicSubscription:void updateConsumerPrefetch(int)",
            "org.apache.activemq.broker.region.PrefetchSubscription:boolean dispatch(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void serviceException(java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void pullTimeout(long,boolean)",
            "org.apache.activemq.broker.TransportConnection$2:void run()",
            "org.apache.activemq.broker.region.TopicSubscription:void pullTimeout(long,boolean)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:boolean dispatch(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchPending()"
        ]
    },
    "org.apache.activemq.thread.PooledTaskRunner$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.thread.DedicatedTaskRunner$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.ws.AbstractStompSocket:void processStompFrame(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.ws.jetty9.StompSocket:void onWebSocketText(java.lang.String)",
            "org.apache.activemq.transport.ws.jetty8.StompSocket:void onMessage(java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()",
            "org.apache.activemq.transport.ws.AbstractMQTTSocket:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void stop()"
        ]
    },
    "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.broker.region.RegionBroker:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.network.ForwardingBridge:void stop()",
            "org.apache.activemq.proxy.ProxyConnection:void stop()",
            "org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.discovery.DiscoveryTransport:void stop()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()",
            "org.apache.activemq.proxy.ProxyConnector:void stop()",
            "org.apache.activemq.broker.TransportConnector:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stopServices(java.util.List)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void stop()",
            "org.apache.activemq.broker.BrokerService:void stopAllConnectors(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransportServer$1:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void stop()"
        ]
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.transport.ws.AbstractStompSocket:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void stop()"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.ResponseCorrelator:void stop()",
            "org.apache.activemq.transport.WriteTimeoutFilter:void stop()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void stop()",
            "org.apache.activemq.transport.mock.MockTransport:void stop()",
            "org.apache.activemq.transport.WireFormatNegotiator:void stop()",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.proxy.ProxyConnector$2:void stop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.transport.CommandJoiner:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void stop()",
            "org.apache.activemq.transport.TransportLogger:void stop()"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void stop()"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTPubComp(org.fusesource.mqtt.codec.PUBCOMP)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTCommand(org.fusesource.mqtt.codec.MQTTFrame)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTPubAck(org.fusesource.mqtt.codec.PUBACK)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTCommand(org.fusesource.mqtt.codec.MQTTFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void sendToActiveMQ(org.apache.activemq.command.Command,org.apache.activemq.transport.stomp.ResponseHandler)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompSubscribe(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:org.apache.activemq.command.ActiveMQDestination createTempDestination(java.lang.String,boolean)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompNack(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompSend(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompAck(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter$2:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompConnect(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompBegin(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompUnsubscribe(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompAbort(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompDisconnect(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter$3:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommit(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompSubscription:void onStompCommit(org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.vm.VMTransport:void dispatch(org.apache.activemq.transport.vm.VMTransport,java.util.concurrent.BlockingQueue,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransport:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void start()",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void start()",
            "org.apache.activemq.broker.TransportConnection:void start()"
        ]
    },
    "org.apache.activemq.transport.reliable.ReliableTransport:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.udp.UdpTransportServer$2:void start()",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.udp.ResponseRedirectInterceptor:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.tcp.TcpTransport:void doRun()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransport:void run()"
        ]
    },
    "org.apache.activemq.transport.tcp.SslTransport:void doConsume(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.StompSslTransportFactory$1$1:void doConsume(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.udp.UdpTransport:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.http.HttpClientTransport:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.nio.NIOTransport:void serviceRead()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOTransport$1:void onSelect(org.apache.activemq.transport.nio.SelectorSelection)"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpFrameParser$1:void onFrame(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.amqp.AmqpFrameParser$3:void parse(java.nio.ByteBuffer)",
            "org.apache.activemq.transport.amqp.AmqpFrameParser$5:void parse(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTCodec$1:void onFrame(org.fusesource.mqtt.codec.MQTTFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTCodec:void processCommand()"
        ]
    },
    "org.apache.activemq.transport.stomp.StompCodec:void processCommand()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.StompCodec:void parse(java.io.ByteArrayInputStream,int)"
        ]
    },
    "org.apache.activemq.transport.ws.AbstractMQTTSocket:void sendToActiveMQ(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onActiveMQCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void sendToActiveMQ(org.apache.activemq.command.Command,org.apache.activemq.transport.mqtt.ResponseHandler)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTPubComp(org.fusesource.mqtt.codec.PUBCOMP)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTPubAck(org.fusesource.mqtt.codec.PUBACK)"
        ]
    },
    "org.apache.activemq.transport.nio.NIOSSLTransport:void doConsume(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.amqp.AmqpFrameParser$1:void onFrame(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTCodec$1:void onFrame(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.transport.nio.NIOSSLTransport:void processCommand(java.nio.ByteBuffer)",
            "org.apache.activemq.transport.stomp.StompNIOSSLTransport:void doConsume(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompCodec:void parse(java.io.ByteArrayInputStream,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.StompNIOTransport:void serviceRead()",
            "org.apache.activemq.transport.stomp.StompNIOSSLTransport:void processCommand(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.activemq.transport.ws.AbstractStompSocket:void sendToActiveMQ(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void sendToActiveMQ(org.apache.activemq.command.Command,org.apache.activemq.transport.stomp.ResponseHandler)",
            "org.apache.activemq.transport.stomp.StompSubscription:void onMessageDispatch(org.apache.activemq.command.MessageDispatch,java.lang.String)",
            "org.apache.activemq.transport.stomp.StompSubscription:void onStompCommit(org.apache.activemq.command.TransactionId)"
        ]
    },
    "org.apache.activemq.transport.mqtt.strategy.AbstractMQTTSubscriptionStrategy:void deleteDurableSubs(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.strategy.MQTTDefaultSubscriptionStrategy:void onConnect(org.fusesource.mqtt.codec.CONNECT)",
            "org.apache.activemq.transport.mqtt.strategy.MQTTVirtualTopicSubscriptionStrategy:void onConnect(org.fusesource.mqtt.codec.CONNECT)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onTransportError()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void onException(java.io.IOException)"
        ]
    },
    "org.apache.activemq.transport.mqtt.strategy.AbstractMQTTSubscriptionStrategy:void doUnSubscribe(org.apache.activemq.transport.mqtt.MQTTSubscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.strategy.MQTTVirtualTopicSubscriptionStrategy:void onReSubscribe(org.apache.activemq.transport.mqtt.MQTTSubscription)",
            "org.apache.activemq.transport.mqtt.strategy.MQTTVirtualTopicSubscriptionStrategy:void onUnSubscribe(java.lang.String)",
            "org.apache.activemq.transport.mqtt.strategy.MQTTDefaultSubscriptionStrategy:void onUnSubscribe(java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTDisconnect()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTCommand(org.fusesource.mqtt.codec.MQTTFrame)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTPublish(org.fusesource.mqtt.codec.PUBLISH)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTCommand(org.fusesource.mqtt.codec.MQTTFrame)"
        ]
    },
    "org.apache.activemq.transport.mqtt.strategy.AbstractMQTTSubscriptionStrategy:byte doSubscribe(org.apache.activemq.command.ConsumerInfo,java.lang.String,org.fusesource.mqtt.client.QoS)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.strategy.MQTTVirtualTopicSubscriptionStrategy:void restoreDurableQueue(java.util.List)",
            "org.apache.activemq.transport.mqtt.strategy.MQTTDefaultSubscriptionStrategy:byte onSubscribe(java.lang.String,org.fusesource.mqtt.client.QoS)",
            "org.apache.activemq.transport.mqtt.strategy.MQTTVirtualTopicSubscriptionStrategy:void onReSubscribe(org.apache.activemq.transport.mqtt.MQTTSubscription)",
            "org.apache.activemq.transport.mqtt.strategy.MQTTVirtualTopicSubscriptionStrategy:byte onSubscribe(java.lang.String,org.fusesource.mqtt.client.QoS)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void handleException(java.lang.Throwable,org.fusesource.mqtt.codec.MQTTFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onActiveMQCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTCommand(org.fusesource.mqtt.codec.MQTTFrame)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.TransportLogger:java.lang.Object request(java.lang.Object,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object,int)"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object,int)"
        ]
    },
    "org.apache.activemq.transport.TransportLogger:java.lang.Object request(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter$3:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.StompTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ws.AbstractStompSocket:void processStompFrame(java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.nio.SelectorSelection:void onSelect()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorWorker$1:void run()"
        ]
    },
    "org.apache.activemq.jms.pool.PooledSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.advisory.DestinationSource:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.advisory.DestinationSource getDestinationSource()"
        ]
    },
    "org.apache.activemq.console.filter.AmqMessagesQueryFilter:java.util.List query(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.filter.MBeansAttributeQueryFilter:java.util.List query(java.util.List)",
            "org.apache.activemq.console.filter.RegExQueryFilter:java.util.List query(java.util.List)",
            "org.apache.activemq.console.filter.WildcardTransformFilter:java.util.List query(java.util.List)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void connectionInterruptProcessingComplete(org.apache.activemq.command.ConnectionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.amqp.sasl.AmqpAuthenticator:void processSaslExchange(org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.amqp.protocol.AmqpConnection:void processSaslExchange()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$11:void onCompletion(org.apache.activemq.transport.FutureResponse)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.FutureResponse:void set(org.apache.activemq.command.Response)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalException(java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport$1:void onException(java.io.IOException)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$2:void onException(java.io.IOException)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void doStartLocalAndRemoteBridges()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void collectBrokerInfos()"
        ]
    },
    "org.apache.activemq.camel.component.broker.BrokerComponent:java.util.List completeEndpointPath(org.apache.camel.ComponentConfiguration,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TempTopic:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.TopicMessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractTempRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.TempQueue:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.MessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)"
        ]
    },
    "org.apache.activemq.camel.camelplugin.CamelRoutesBroker:void nowMasterBroker()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.MessageBrokerView:org.apache.activemq.broker.view.BrokerDestinationView getDestinationView(java.lang.String,byte)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.view.MessageBrokerView:org.apache.activemq.broker.view.BrokerDestinationView getQueueDestinationView(java.lang.String)",
            "org.apache.activemq.broker.view.MessageBrokerView:org.apache.activemq.broker.view.BrokerDestinationView getTopicDestinationView(java.lang.String)",
            "org.apache.activemq.broker.view.MessageBrokerView:org.apache.activemq.broker.view.BrokerDestinationView getDestinationView(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.MirroredQueue:org.apache.activemq.broker.region.Destination intercept(org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.mqtt.strategy.AbstractMQTTSubscriptionStrategy:void restoreDurableSubs(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.strategy.MQTTDefaultSubscriptionStrategy:void onConnect(org.fusesource.mqtt.codec.CONNECT)",
            "org.apache.activemq.transport.mqtt.strategy.MQTTVirtualTopicSubscriptionStrategy:void onConnect(org.fusesource.mqtt.codec.CONNECT)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void start()",
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.broker.BrokerBroadcaster:void start()"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void start()",
            "org.apache.activemq.plugin.StatisticsBroker:void start()",
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.camel.camelplugin.CamelRoutesBroker:void start()",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void start()",
            "org.apache.activemq.broker.BrokerBroadcaster:void start()"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void start()",
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.broker.BrokerBroadcaster:void start()"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.camel.component.broker.BrokerEndpoint:void removeMessageInterceptor(org.apache.activemq.broker.inteceptor.MessageInterceptor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.camel.component.broker.BrokerEndpoint:void inject(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.camel.component.broker.BrokerProducer:boolean processInOnly(org.apache.camel.Exchange,org.apache.camel.AsyncCallback)"
        ]
    },
    "org.apache.activemq.camel.component.broker.BrokerEndpoint:void addMessageInterceptor(org.apache.activemq.broker.inteceptor.MessageInterceptor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.camel.component.broker.BrokerEndpoint:void doStart()"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:org.apache.activemq.command.Response pullMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:void access$100(org.apache.activemq.broker.region.TopicSubscription)",
            "org.apache.activemq.broker.region.TopicSubscription:void setPrefetchSize(int)",
            "org.apache.activemq.broker.region.TopicSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorFilter:void injectMessage(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:void injectMessage(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.RegionBroker$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.SchedulerTimerTask:void run()"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.advisory.AdvisoryBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void serviceTransportException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void serviceException(java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection$1:void onException(java.io.IOException)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection$4:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection$6:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:void remove(boolean,java.net.URI[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.discovery.DiscoveryTransport:void onServiceRemove(org.apache.activemq.command.DiscoveryEvent)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.activemq.jms.pool.ConnectionPool:void close()",
            "org.apache.activemq.console.command.ProducerCommand:void runTask(java.util.List)",
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.console.filter.AmqMessagesQueryFilter:java.util.List queryMessages(org.apache.activemq.command.ActiveMQQueue,java.lang.String)",
            "org.apache.activemq.console.command.ConsumerCommand:void runTask(java.util.List)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$6:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void collectBrokerInfos()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void access$400(org.apache.activemq.network.DemandForwardingBridgeSupport)"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransportFactory:void stopped(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.transport.vm.VMTransportFactory:void stopped(org.apache.activemq.transport.vm.VMTransportServer)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void disposeTransport(org.apache.activemq.transport.Transport)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void handleTransportFailure(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean buildBackups()",
            "org.apache.activemq.transport.failover.FailoverTransport:void stop()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$9:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:boolean doConnect()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.fanout.FanoutTransport:boolean access$800(org.apache.activemq.transport.fanout.FanoutTransport)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)"
        ]
    },
    "org.apache.activemq.network.ForwardingBridge:void serviceLocalCommand(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.ForwardingBridge$1:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.network.ForwardingBridge:void serviceRemoteCommand(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.ForwardingBridge$2:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.TransportConnector$1:void onAccept(org.apache.activemq.transport.Transport)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void handleSocket(java.net.Socket)",
            "org.apache.activemq.transport.udp.UdpTransportServer:org.apache.activemq.transport.Transport configureTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.vm.VMTransportServer:org.apache.activemq.transport.vm.VMTransport connect()"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransportFactory:boolean validateBroker(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.network.NetworkConnector$1:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void stop()"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.RegionBroker:void preProcessDispatch(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void preProcessDispatch(org.apache.activemq.command.MessageDispatch)"
        ]
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:void addSubscription(org.apache.activemq.command.SubscriptionInfo,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$2:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:void replayRemoveMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doPageInForDispatch(boolean,boolean)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$1:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:void replayRemoveMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doPageInForDispatch(boolean,boolean)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$2:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$1:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$2:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$1:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$1:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$2:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$2:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$1:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void removeAsyncMessage(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$1:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$2:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyMessageStore:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.BaseDestination:void dispose(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TempQueue:void dispose(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Topic:void deleteSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.util.SubscriptionKey)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.TopicMessageStore,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$2:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$8:java.util.concurrent.Future run(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void acknowledge(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.TopicMessageStore,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$2:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$5:void run(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore$3:void run(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore:void acknowledge(org.apache.activemq.store.TopicMessageStore,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.memory.MemoryTransactionStore$2:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore:void acknowledge(org.apache.activemq.store.TopicMessageStore,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.memory.MemoryTransactionStore$2:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$2:org.apache.activemq.store.ListenableFuture asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$2:org.apache.activemq.store.ListenableFuture asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.store.ListenableFuture asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:org.apache.activemq.store.ListenableFuture asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore:org.apache.activemq.store.ListenableFuture asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.store.ListenableFuture asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$5:java.util.concurrent.Future run(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:org.apache.activemq.store.ListenableFuture asyncAddTopicMessage(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.ProxyMessageStore:org.apache.activemq.store.ListenableFuture asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$5:java.util.concurrent.Future run(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$2:org.apache.activemq.store.ListenableFuture asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$2:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:void replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$1:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$1:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$2:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$1:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:void replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$2:org.apache.activemq.store.ListenableFuture asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$1:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$2:org.apache.activemq.store.ListenableFuture asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$2:org.apache.activemq.store.ListenableFuture asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.AbstractMessageStore:org.apache.activemq.store.ListenableFuture asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.store.ListenableFuture asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)",
            "org.apache.activemq.store.ProxyMessageStore:org.apache.activemq.store.ListenableFuture asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)",
            "org.apache.activemq.broker.region.Topic:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.AbstractMessageStore:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyMessageStore:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)",
            "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)",
            "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$2:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$1:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$1:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$2:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyMessageStore:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$4:java.util.concurrent.Future run(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyMessageStore:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$4:java.util.concurrent.Future run(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$2:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$1:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$2:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$1:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$1:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$1:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$1:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$1:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$17:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void start()"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:org.apache.activemq.command.Response pullMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TopicSubscription:void pullTimeout(long,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void access$200(org.apache.activemq.broker.region.TopicSubscription,long,boolean)"
        ]
    },
    "org.apache.activemq.broker.region.Topic$3:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedTransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.command.ConnectionInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void updateConsumerPrefetch(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.PolicyEntry:void configurePrefetch(org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void updateClient(org.apache.activemq.command.ConnectionControl)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue$4:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TopicSubscription:void updateConsumerPrefetch(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.PolicyEntry:void configurePrefetch(org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void pullTimeout(long,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription$1:void run()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection$2:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchPending()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription$2:void afterCommit()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void setPrefetchSize(int)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void onDispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void pullTimeout(long,boolean)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void dispatchPending()",
            "org.apache.activemq.broker.region.PrefetchSubscription:org.apache.activemq.command.Response pullMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)"
        ]
    },
    "org.apache.activemq.transport.ws.jetty9.StompSocket:void onWebSocketText(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.ws.jetty8.StompSocket:void onMessage(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.ws.AbstractMQTTSocket:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void stop()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void start()",
            "org.apache.activemq.broker.LockableServiceSupport:void stopBroker()",
            "org.apache.activemq.console.command.StartCommand$1:void run()",
            "org.apache.activemq.broker.BrokerService:void stopGracefully(java.lang.String,java.lang.String,long,long)",
            "org.apache.activemq.broker.TransportConnection:void serviceTransportException(java.io.IOException)",
            "org.apache.activemq.util.DefaultIOExceptionHandler$2:void run()",
            "org.apache.activemq.broker.jmx.BrokerView:void restart()",
            "org.apache.activemq.broker.BrokerService:void masterFailed()",
            "org.apache.activemq.xbean.XBeanBrokerService:void stop()",
            "org.apache.activemq.broker.BrokerService:void containerShutdown()",
            "org.apache.activemq.broker.BrokerService:void preDestroy()",
            "org.apache.activemq.broker.jmx.BrokerView:void stop()"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void stop()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void doStop(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.network.ForwardingBridge:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnection:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.proxy.ProxyConnection:void onFailure(java.io.IOException)",
            "org.apache.activemq.proxy.ProxyConnection$1:void onCommand(java.lang.Object)",
            "org.apache.activemq.proxy.ProxyConnector$1:void onAccept(org.apache.activemq.transport.Transport)"
        ]
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.discovery.DiscoveryTransport:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void stop()"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnector:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ProxyConnectorView:void stop()"
        ]
    },
    "org.apache.activemq.broker.TransportConnector:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ConnectorView:void stop()"
        ]
    },
    "org.apache.activemq.util.ServiceStopper:void stopServices(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void stop()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void stopAllConnectors(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.util.DefaultIOExceptionHandler$1:void run()"
        ]
    },
    "org.apache.activemq.transport.ws.AbstractStompSocket:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void stop()"
        ]
    },
    "org.apache.activemq.transport.ResponseCorrelator:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void stop()"
        ]
    },
    "org.apache.activemq.transport.WriteTimeoutFilter:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void stop()"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void stopTransport()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void stop()"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void stop()"
        ]
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void stop()"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnector$2:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.CommandJoiner:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void stop()"
        ]
    },
    "org.apache.activemq.transport.TransportLogger:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void stop()"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompSubscribe(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:org.apache.activemq.command.ActiveMQDestination createTempDestination(java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.LegacyFrameTranslator:org.apache.activemq.command.ActiveMQDestination convertDestination(org.apache.activemq.transport.stomp.ProtocolConverter,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompNack(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompSend(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompAck(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompConnect(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompBegin(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompUnsubscribe(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompAbort(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompDisconnect(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommit(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpTransport:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.stomp.StompSslTransportFactory$1$1:void doConsume(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.nio.NIOTransport$1:void onSelect(org.apache.activemq.transport.nio.SelectorSelection)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorSelection:void onSelect()"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpFrameParser$3:void parse(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.amqp.AmqpFrameParser$4:void parse(java.nio.ByteBuffer)",
            "org.apache.activemq.transport.amqp.AmqpFrameParser:void parse(java.nio.ByteBuffer)",
            "org.apache.activemq.transport.amqp.AmqpFrameParser$3:void parse(java.nio.ByteBuffer)",
            "org.apache.activemq.transport.amqp.AmqpFrameParser$5:void parse(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpFrameParser$5:void parse(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.amqp.AmqpFrameParser$4:void parse(java.nio.ByteBuffer)",
            "org.apache.activemq.transport.amqp.AmqpFrameParser:void parse(java.nio.ByteBuffer)",
            "org.apache.activemq.transport.amqp.AmqpFrameParser$3:void parse(java.nio.ByteBuffer)",
            "org.apache.activemq.transport.amqp.AmqpFrameParser$5:void parse(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTCodec:void processCommand()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTCodec:void access$400(org.apache.activemq.transport.mqtt.MQTTCodec)"
        ]
    },
    "org.apache.activemq.transport.nio.NIOSSLTransport:void processCommand(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void serviceRead()"
        ]
    },
    "org.apache.activemq.transport.stomp.StompNIOSSLTransport:void doConsume(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.StompCodec:void processCommand()",
            "org.apache.activemq.transport.stomp.StompCodec:void parse(java.io.ByteArrayInputStream,int)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompNIOTransport:void serviceRead()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.StompNIOTransport:void access$000(org.apache.activemq.transport.stomp.StompNIOTransport)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompNIOSSLTransport:void processCommand(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void serviceRead()"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:void propagateFailureToExceptionListener(java.lang.Exception)",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor$1$1:void run()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor$2$1:void run()"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter$1$1:void onResponse(org.apache.activemq.transport.mqtt.MQTTProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:void propagateFailureToExceptionListener(java.lang.Exception)",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter$1:void onResponse(org.apache.activemq.transport.mqtt.MQTTProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTConnect(org.fusesource.mqtt.codec.CONNECT)"
        ]
    },
    "org.apache.activemq.transport.mqtt.strategy.MQTTVirtualTopicSubscriptionStrategy:void onUnSubscribe(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.strategy.AbstractMQTTSubscriptionStrategy:byte onSubscribe(org.fusesource.mqtt.client.Topic)"
        ]
    },
    "org.apache.activemq.transport.mqtt.strategy.MQTTDefaultSubscriptionStrategy:void onUnSubscribe(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.strategy.AbstractMQTTSubscriptionStrategy:byte onSubscribe(org.fusesource.mqtt.client.Topic)"
        ]
    },
    "org.apache.activemq.transport.mqtt.strategy.MQTTVirtualTopicSubscriptionStrategy:void restoreDurableQueue(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.strategy.MQTTVirtualTopicSubscriptionStrategy:void onConnect(org.fusesource.mqtt.codec.CONNECT)"
        ]
    },
    "org.apache.activemq.transport.mqtt.strategy.MQTTDefaultSubscriptionStrategy:byte onSubscribe(java.lang.String,org.fusesource.mqtt.client.QoS)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.strategy.AbstractMQTTSubscriptionStrategy:byte onSubscribe(org.fusesource.mqtt.client.Topic)"
        ]
    },
    "org.apache.activemq.transport.mqtt.strategy.MQTTVirtualTopicSubscriptionStrategy:byte onSubscribe(java.lang.String,org.fusesource.mqtt.client.QoS)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.strategy.AbstractMQTTSubscriptionStrategy:byte onSubscribe(org.fusesource.mqtt.client.Topic)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompTransportFilter:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.nio.SelectorWorker$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:org.apache.activemq.advisory.DestinationSource getDestinationSource()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.pool.PooledConnection:org.apache.activemq.advisory.DestinationSource getDestinationSource()"
        ]
    },
    "org.apache.activemq.console.filter.MBeansAttributeQueryFilter:java.util.List query(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.filter.AbstractQueryFilter:java.util.List query(java.lang.String)",
            "org.apache.activemq.console.util.JmxMBeansUtil:java.util.List queryMBeans(javax.management.MBeanServerConnection,java.util.List,java.util.Set)"
        ]
    },
    "org.apache.activemq.console.filter.RegExQueryFilter:java.util.List query(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.filter.MBeansAttributeQueryFilter:java.util.List query(java.util.List)",
            "org.apache.activemq.console.filter.RegExQueryFilter:java.util.List query(java.util.List)",
            "org.apache.activemq.console.filter.WildcardTransformFilter:java.util.List query(java.util.List)"
        ]
    },
    "org.apache.activemq.console.filter.WildcardTransformFilter:java.util.List query(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.filter.AbstractQueryFilter:java.util.List query(java.lang.String)",
            "org.apache.activemq.console.command.BrowseCommand:void runTask(java.util.List)",
            "org.apache.activemq.console.util.AmqMessagesUtil:java.util.List getMessages(java.net.URI,javax.jms.Destination,java.util.List)",
            "org.apache.activemq.console.util.AmqMessagesUtil:java.util.List getMessages(javax.jms.ConnectionFactory,javax.jms.Destination,java.util.List)"
        ]
    },
    "org.apache.activemq.transport.amqp.protocol.AmqpConnection:void processSaslExchange()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.amqp.protocol.AmqpConnection:void onAMQPData(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.FutureResponse:void set(org.apache.activemq.command.Response)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$1:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$2:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.AbstractTempRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.jmx.ManagedTopicRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.jmx.ManagedQueueRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.view.MessageBrokerView:org.apache.activemq.broker.view.BrokerDestinationView getQueueDestinationView(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.MessageBrokerView:org.apache.activemq.broker.view.BrokerDestinationView getTopicDestinationView(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.MessageBrokerView:org.apache.activemq.broker.view.BrokerDestinationView getDestinationView(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.plugin.StatisticsBroker:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.scheduler.SchedulerBroker:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void start()",
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.broker.BrokerBroadcaster:void start()"
        ]
    },
    "org.apache.activemq.camel.component.broker.BrokerProducer:boolean processInOnly(org.apache.camel.Exchange,org.apache.camel.AsyncCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.camel.component.broker.BrokerProducer:boolean process(org.apache.camel.Exchange,org.apache.camel.AsyncCallback)"
        ]
    },
    "org.apache.activemq.camel.component.broker.BrokerEndpoint:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TopicSubscription:void access$100(org.apache.activemq.broker.region.TopicSubscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription$1:void afterCommit()"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void setPrefetchSize(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.PolicyEntry:void configurePrefetch(org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.thread.SchedulerTimerTask:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection$1:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:void propagateFailureToExceptionListener(java.lang.Exception)",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.discovery.DiscoveryTransport:void onServiceRemove(org.apache.activemq.command.DiscoveryEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessageWithProperties(java.lang.String)"
        ]
    },
    "org.apache.activemq.jms.pool.ConnectionPool:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.ConnectionPool:void onException(javax.jms.JMSException)",
            "org.apache.activemq.jms.pool.ConnectionPool:boolean expiredCheck()"
        ]
    },
    "org.apache.activemq.console.command.ProducerCommand:void runTask(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.Connection createConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.TopicConnection createTopicConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection()",
            "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XATopicConnection createXATopicConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAQueueConnection createXAQueueConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.QueueConnection createQueueConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAConnection createXAConnection(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.console.command.ConsumerCommand:void runTask(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void access$400(org.apache.activemq.network.DemandForwardingBridgeSupport)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport$5:void run()"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransportFactory:void stopped(org.apache.activemq.transport.vm.VMTransportServer)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransportServer:void stop()"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void handleTransportFailure(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport$2:boolean iterate()"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:boolean buildBackups()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport$2:boolean iterate()",
            "org.apache.activemq.transport.failover.FailoverTransport:void updateURIs(boolean,java.net.URI[])"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void stop()"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:boolean access$800(org.apache.activemq.transport.fanout.FanoutTransport)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.fanout.FanoutTransport$1:boolean iterate()"
        ]
    },
    "org.apache.activemq.network.ForwardingBridge$1:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.ForwardingBridge$2:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.udp.UdpTransportServer:org.apache.activemq.transport.Transport configureTransport(org.apache.activemq.transport.Transport)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.udp.UdpTransportServer:void processInboundConnection(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransportServer:org.apache.activemq.transport.vm.VMTransport connect()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.util.ServiceSupport:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void stop()",
            "org.apache.activemq.network.NetworkConnector:void stop()",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void run()",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void stopTransport()",
            "org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.tcp.TcpTransport:void stop()",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyStoreReplayer:void unload()",
            "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$stop_master$1:void apply$mcV$sp()",
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.transport.http.HttpClientTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.transport.udp.UdpTransport:void run()",
            "org.apache.activemq.ActiveMQConnection:void close()",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()",
            "org.apache.activemq.broker.LockableServiceSupport:void postStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void mainLoop()",
            "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$stop_slave$1:void apply$mcV$sp()",
            "org.apache.activemq.leveldb.LevelDBClient$$anon$2:void run()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void stop()",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl:void doStop(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void preProcessDispatch(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.camel.camelplugin.CamelRoutesBroker:void preProcessDispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.broker.BrokerFilter:void preProcessDispatch(org.apache.activemq.command.MessageDispatch)"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Queue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.broker.region.RegionBroker)"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:void replayRemoveMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void recover()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doPageInForDispatch(boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void pageInMessages(boolean)",
            "org.apache.activemq.broker.region.Queue:void doPageIn(boolean,boolean)"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.TransactionTemplate:void run(org.apache.activemq.util.Callback)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void duplicateFromStore(org.apache.activemq.command.Message,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Queue:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.QueueMessageReference,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$2:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$1:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$1:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$2:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TempQueue:void dispose(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$2:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$2:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$2:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalTopicMessageStore$2:void execute()",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void replayAcknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.broker.region.Topic:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:void replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void recover()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue$4:void run()"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic$3:void run()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.store.ListenableFuture asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyMessageStore:org.apache.activemq.store.ListenableFuture asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyMessageStore:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.store.ListenableFuture asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void processAdd(org.apache.activemq.store.kahadb.data.KahaAddMessageCommand,org.apache.activemq.command.TransactionId,org.apache.activemq.util.ByteSequence)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadb.plist.PListImpl:java.lang.Object addFirst(java.lang.String,org.apache.activemq.util.ByteSequence)",
            "org.apache.activemq.store.kahadb.plist.PListImpl:org.apache.activemq.store.PListEntry getFirst()",
            "org.apache.activemq.store.kahadb.plist.PListImpl:boolean remove(long)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$8:void visit(org.apache.activemq.store.kahadb.data.KahaAddScheduledJobCommand)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:java.util.List getAllJobs(long,long)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void checkpointUpdate(boolean)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.data.KahaCommitCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.MessageDatabase$IndexAware)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void resetBatching()",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerImpl:java.util.List getAllJobs(long,long)",
            "org.apache.activemq.store.kahadb.AbstractKahaDBStore:void checkpointUpdate(boolean)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void process(org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand)",
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerStoreImpl:void doStart()",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl:boolean removePList(java.lang.String)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:java.util.List getNextScheduleJobs()",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void processCommit(org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl:org.apache.activemq.store.kahadb.plist.PListImpl getPList(java.lang.String)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void unload()",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void loadPageFile()",
            "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination readPayload(java.io.DataInput)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$8:void visit(org.apache.activemq.store.kahadb.data.KahaRescheduleJobCommand)",
            "org.apache.activemq.store.kahadb.plist.PListImpl:boolean remove(java.lang.String)",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl:void intialize()",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:boolean removeJobScheduler(java.lang.String)",
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerImpl:java.util.List getNextScheduleJobs()",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void processRemove(org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$8:void visit(org.apache.activemq.store.kahadb.data.KahaRemoveScheduledJobCommand)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void recover()",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void process(org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.data.KahaAddMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.MessageDatabase$IndexAware)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:java.util.List getAllJobs()",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void loadPageFile()",
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerImpl:java.util.List getAllJobs()",
            "org.apache.activemq.store.kahadb.plist.PListImpl:void destroy()",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.data.KahaUpdateMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void recover()",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void unload()",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$8:void visit(org.apache.activemq.store.kahadb.data.KahaRemoveScheduledJobsCommand)",
            "org.apache.activemq.store.kahadb.plist.PListImpl:java.lang.Object addLast(java.lang.String,org.apache.activemq.util.ByteSequence)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore:java.util.Set getDestinations()",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:org.apache.activemq.broker.scheduler.JobScheduler getJobScheduler(java.lang.String)",
            "org.apache.activemq.store.kahadb.plist.PListImpl:org.apache.activemq.store.PListEntry getLast()",
            "org.apache.activemq.store.kahadb.plist.PListImpl$PListIteratorImpl:void remove()",
            "org.apache.activemq.store.kahadb.plist.PListImpl:void claimFileLocations(java.util.Set)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void upgradeFromLegacy()",
            "org.apache.activemq.store.kahadb.plist.PListImpl:org.apache.activemq.store.PListEntry get(long)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void setBatch(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadb.KahaDBStore:java.util.Set getDestinations()",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void loadPageFile()",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void access$200(org.apache.activemq.broker.region.TopicSubscription,long,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription$2:void run()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.command.ConnectionInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.command.ConnectionInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.broker.region.policy.PolicyEntry:void configurePrefetch(org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)",
            "org.apache.activemq.broker.region.policy.PolicyEntry:void configure(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.region.QueueBrowserSubscription)",
            "org.apache.activemq.broker.region.policy.PolicyEntry:void configure(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.region.TopicSubscription)",
            "org.apache.activemq.broker.region.policy.PolicyEntry:void configure(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.region.QueueSubscription)",
            "org.apache.activemq.broker.region.policy.PolicyEntry:void configure(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.region.DurableTopicSubscription)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.SchedulerTimerTask:void run()"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription$2:void afterCommit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void pullTimeout(long,boolean)",
            "org.apache.activemq.broker.region.QueueBrowserSubscription:void checkDone()",
            "org.apache.activemq.broker.region.PrefetchSubscription:org.apache.activemq.command.Response pullMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void setPrefetchSize(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.PolicyEntry:void configurePrefetch(org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void onDispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.PrefetchSubscription$3:void onSuccess()",
            "org.apache.activemq.broker.region.PrefetchSubscription:boolean dispatch(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void dispatchPending()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void setPrefetchSize(int)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void onDispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void onUsageChanged(org.apache.activemq.usage.Usage,int,int)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.broker.region.RegionBroker)",
            "org.apache.activemq.broker.region.Topic:void clearPendingAndDispatch(org.apache.activemq.broker.region.DurableTopicSubscription)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:org.apache.activemq.command.Response pullMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.LockableServiceSupport:void stopBroker()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.LockableServiceSupport:void keepLockAlive()"
        ]
    },
    "org.apache.activemq.console.command.StartCommand$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:void stopGracefully(java.lang.String,java.lang.String,long,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:void stopGracefully(java.lang.String,java.lang.String,long,long)"
        ]
    },
    "org.apache.activemq.util.DefaultIOExceptionHandler$2:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:void restart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.xbean.XBeanBrokerService:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void start()",
            "org.apache.activemq.broker.BrokerService:void stopGracefully(java.lang.String,java.lang.String,long,long)",
            "org.apache.activemq.broker.TransportConnection:void serviceTransportException(java.io.IOException)",
            "org.apache.activemq.xbean.XBeanBrokerService:void destroy()",
            "org.apache.activemq.util.DefaultIOExceptionHandler$2:void run()",
            "org.apache.activemq.broker.jmx.BrokerView:void restart()",
            "org.apache.activemq.broker.BrokerService:void containerShutdown()",
            "org.apache.activemq.broker.jmx.BrokerView:void stop()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void containerShutdown()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService$7:void run()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void preDestroy()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.RegionBroker:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void stop()",
            "org.apache.activemq.broker.BrokerFilter:void stop()",
            "org.apache.activemq.broker.TransactionBroker:void stop()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void stop()"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnection:void onFailure(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.proxy.ProxyConnection$1:void onCommand(java.lang.Object)",
            "org.apache.activemq.proxy.ProxyConnection$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.proxy.ProxyConnection$2:void onException(java.io.IOException)",
            "org.apache.activemq.proxy.ProxyConnection$1:void onException(java.io.IOException)"
        ]
    },
    "org.apache.activemq.broker.jmx.ProxyConnectorView:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ConnectorView:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.util.DefaultIOExceptionHandler$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void stopTransport()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTDisconnect()",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void handleException(java.lang.Throwable,org.fusesource.mqtt.codec.MQTTFrame)"
        ]
    },
    "org.apache.activemq.transport.udp.UdpTransportServer:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.stomp.LegacyFrameTranslator:org.apache.activemq.command.ActiveMQDestination convertDestination(org.apache.activemq.transport.stomp.ProtocolConverter,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompSubscribe(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompUnsubscribe(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.FrameTranslator$Helper:void copyStandardHeadersFromFrameToMessage(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.transport.stomp.StompFrame,org.apache.activemq.command.ActiveMQMessage,org.apache.activemq.transport.stomp.FrameTranslator)"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpFrameParser$4:void parse(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.amqp.AmqpFrameParser$4:void parse(java.nio.ByteBuffer)",
            "org.apache.activemq.transport.amqp.AmqpFrameParser:void parse(java.nio.ByteBuffer)",
            "org.apache.activemq.transport.amqp.AmqpFrameParser$3:void parse(java.nio.ByteBuffer)",
            "org.apache.activemq.transport.amqp.AmqpFrameParser$5:void parse(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpFrameParser:void parse(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.amqp.AmqpNioSslTransport:void processCommand(java.nio.ByteBuffer)",
            "org.apache.activemq.transport.amqp.AmqpNioTransport:void serviceRead()"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTCodec:void access$400(org.apache.activemq.transport.mqtt.MQTTCodec)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTCodec$3:void parse(org.fusesource.hawtbuf.DataByteArrayInputStream,int)",
            "org.apache.activemq.transport.mqtt.MQTTCodec$4:void parse(org.fusesource.hawtbuf.DataByteArrayInputStream,int)"
        ]
    },
    "org.apache.activemq.transport.nio.NIOSSLTransport:void serviceRead()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTNIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.nio.NIOSSLTransport$1:void onSelect(org.apache.activemq.transport.nio.SelectorSelection)",
            "org.apache.activemq.transport.stomp.StompNIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.amqp.AmqpNioSslTransport:void initializeStreams()"
        ]
    },
    "org.apache.activemq.transport.stomp.StompNIOTransport:void access$000(org.apache.activemq.transport.stomp.StompNIOTransport)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.StompNIOTransport$1:void onSelect(org.apache.activemq.transport.nio.SelectorSelection)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void propagateFailureToExceptionListener(java.lang.Exception)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void handleTransportFailure(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor$2$1:void run()",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor$1$1:void run()",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:void propagateFailureToExceptionListener(java.lang.Exception)",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter$3$1:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter$1$1:void onResponse(org.apache.activemq.transport.mqtt.MQTTProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.stomp.StompNIOTransport:void serviceRead()",
            "org.apache.activemq.transport.amqp.AmqpNioTransport:void serviceRead()",
            "org.apache.activemq.transport.udp.UdpTransport:void run()",
            "org.apache.activemq.transport.http.HttpClientTransport:void run()",
            "org.apache.activemq.transport.nio.NIOTransport:void serviceRead()",
            "org.apache.activemq.transport.tcp.TcpTransport:void run()",
            "org.apache.activemq.transport.nio.NIOSSLTransport:void serviceRead()",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.ws.AbstractStompSocket:void processStompFrame(java.lang.String)",
            "org.apache.activemq.transport.nio.NIOTransport$1:void onError(org.apache.activemq.transport.nio.SelectorSelection,java.lang.Throwable)",
            "org.apache.activemq.transport.ws.AbstractMQTTSocket:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.amqp.AmqpNioTransport$1:void onError(org.apache.activemq.transport.nio.SelectorSelection,java.lang.Throwable)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter$1:void onResponse(org.apache.activemq.transport.mqtt.MQTTProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.mqtt.MQTTNIOTransport$1:void onError(org.apache.activemq.transport.nio.SelectorSelection,java.lang.Throwable)",
            "org.apache.activemq.transport.ws.AbstractStompSocket:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ws.jetty8.MQTTSocket:void onMessage(byte[],int,int)",
            "org.apache.activemq.transport.nio.NIOSSLTransport$1:void onError(org.apache.activemq.transport.nio.SelectorSelection,java.lang.Throwable)",
            "org.apache.activemq.transport.ws.jetty9.MQTTSocket:void onWebSocketBinary(byte[],int,int)",
            "org.apache.activemq.transport.stomp.ProtocolConverter$3:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.stomp.StompNIOTransport$1:void onError(org.apache.activemq.transport.nio.SelectorSelection,java.lang.Throwable)",
            "org.apache.activemq.transport.mqtt.MQTTNIOTransport:void serviceRead()",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTConnect(org.fusesource.mqtt.codec.CONNECT)"
        ]
    },
    "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:void propagateFailureToExceptionListener(java.lang.Exception)",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.stomp.ProtocolConverter$3$1:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:void propagateFailureToExceptionListener(java.lang.Exception)",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void handleException(java.io.IOException)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToActiveMQ(java.io.IOException)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.stomp.ProtocolConverter$3:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onException(java.io.IOException)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor$1$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.AbstractInactivityMonitor$4:void run()",
            "org.apache.activemq.transport.failover.FailoverTransport:void propagateFailureToExceptionListener(java.lang.Exception)",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.AbstractInactivityMonitor$1$1:void run()",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.AbstractInactivityMonitor$5:void run()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.InactivityMonitor:void processInboundWireFormatInfo(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor$2$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.pool.PooledConnection:org.apache.activemq.advisory.DestinationSource getDestinationSource()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.console.filter.AbstractQueryFilter:java.util.List query(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.util.JmxMBeansUtil:java.util.List queryMBeans(javax.management.MBeanServerConnection,java.lang.String,java.util.Set)",
            "org.apache.activemq.console.util.JmxMBeansUtil:java.util.List x_queryMBeans(javax.management.MBeanServerConnection,java.util.List)",
            "org.apache.activemq.console.util.JmxMBeansUtil:java.util.List getAllBrokers(javax.management.MBeanServerConnection,java.util.Set)",
            "org.apache.activemq.console.util.JmxMBeansUtil:java.util.List getBrokersByName(javax.management.MBeanServerConnection,java.lang.String,java.util.Set)",
            "org.apache.activemq.console.util.JmxMBeansUtil:java.util.List getAllBrokers(javax.management.MBeanServerConnection)",
            "org.apache.activemq.console.util.JmxMBeansUtil:java.util.List getBrokersByName(javax.management.MBeanServerConnection,java.lang.String)",
            "org.apache.activemq.console.util.AmqMessagesUtil:java.util.List getMessages(java.net.URI,javax.jms.Destination,java.lang.String)",
            "org.apache.activemq.console.util.AmqMessagesUtil:java.util.List getMessages(javax.jms.ConnectionFactory,javax.jms.Destination,java.lang.String)",
            "org.apache.activemq.console.util.JmxMBeansUtil:java.util.List queryMBeans(javax.management.MBeanServerConnection,java.util.List,java.util.Set)",
            "org.apache.activemq.console.util.JmxMBeansUtil:java.util.List queryMBeans(javax.management.MBeanServerConnection,java.lang.String)"
        ]
    },
    "org.apache.activemq.console.util.JmxMBeansUtil:java.util.List queryMBeans(javax.management.MBeanServerConnection,java.util.List,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.util.JmxMBeansUtil:java.util.Map queryMBeansAsMap(javax.management.MBeanServerConnection,java.util.List,java.util.Set)"
        ]
    },
    "org.apache.activemq.console.command.BrowseCommand:void runTask(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.console.util.AmqMessagesUtil:java.util.List getMessages(java.net.URI,javax.jms.Destination,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.console.util.AmqMessagesUtil:java.util.List getMessages(javax.jms.ConnectionFactory,javax.jms.Destination,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.command.AmqBrowseCommand:void runTask(java.util.List)"
        ]
    },
    "org.apache.activemq.transport.amqp.protocol.AmqpConnection:void onAMQPData(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination lookup(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTopicRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedQueueRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.camel.component.broker.BrokerProducer:boolean process(org.apache.camel.Exchange,org.apache.camel.AsyncCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TopicSubscription$1:void afterCommit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessageWithProperties(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.ConnectionPool:void onException(javax.jms.JMSException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.ConnectionPool:void onException(javax.jms.JMSException)",
            "org.apache.activemq.ActiveMQConnection$5:void run()"
        ]
    },
    "org.apache.activemq.jms.pool.ConnectionPool:boolean expiredCheck()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.ConnectionPool:void decrementReferenceCount()"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.Connection createConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.activemq.console.command.AbstractAmqCommand:javax.jms.Connection createConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.console.command.ProducerCommand:void runTask(java.util.List)",
            "org.apache.activemq.console.command.ConsumerCommand:void runTask(java.util.List)",
            "org.apache.activemq.jms.pool.PooledConnectionFactory:javax.jms.Connection createConnection(org.apache.activemq.jms.pool.ConnectionKey)"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.TopicConnection createTopicConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAQueueConnection createXAQueueConnection()",
            "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XATopicConnection createXATopicConnection()",
            "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.Connection createConnection()",
            "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.TopicConnection createTopicConnection()",
            "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.QueueConnection createQueueConnection()",
            "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAConnection createXAConnection()"
        ]
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XATopicConnection createXATopicConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAQueueConnection createXAQueueConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.QueueConnection createQueueConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAConnection createXAConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.XaPooledConnectionFactory:javax.jms.Connection createConnection(org.apache.activemq.jms.pool.ConnectionKey)"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransportServer:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.vm.VMTransportServer$1:void stop()"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport$2:boolean iterate()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void updateURIs(boolean,java.net.URI[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFilter:void updateURIs(boolean,java.net.URI[])",
            "org.apache.activemq.transport.failover.FailoverTransport:void processNewTransports(boolean,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport$1:boolean iterate()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()"
        ]
    },
    "org.apache.activemq.transport.udp.UdpTransportServer:void processInboundConnection(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.udp.UdpTransportServer$1:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.NetworkConnector:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.NetworkConnectorView:void stop()"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.tcp.TcpTransport:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void stop()"
        ]
    },
    "org.apache.activemq.broker.scheduler.SchedulerBroker:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void stop()",
            "org.apache.activemq.broker.BrokerFilter:void stop()",
            "org.apache.activemq.broker.TransactionBroker:void stop()"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyStoreReplayer:void unload()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$stop_master$1:void apply$mcV$sp()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$stop_master$1:void apply()"
        ]
    },
    "org.apache.activemq.transport.http.HttpClientTransport:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.LockableServiceSupport:void postStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void stop()"
        ]
    },
    "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$stop_slave$1:void apply$mcV$sp()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$stop_slave$1:void apply()"
        ]
    },
    "org.apache.activemq.leveldb.LevelDBClient$$anon$2:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.camel.camelplugin.CamelRoutesBroker:void preProcessDispatch(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Topic:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.TempTopic:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.TempQueue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.broker.region.RegionBroker)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter:void recover()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void start()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void pageInMessages(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void doBrowse(java.util.List,int)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void doPageIn(boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void purge()",
            "org.apache.activemq.broker.region.Queue:void doPageIn(boolean)"
        ]
    },
    "org.apache.activemq.util.TransactionTemplate:void run(org.apache.activemq.util.Callback)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:org.apache.activeio.journal.RecordLocation checkpoint(org.apache.activemq.util.Callback)"
        ]
    },
    "org.apache.activemq.broker.region.BaseDestination:void duplicateFromStore(org.apache.activemq.command.Message,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void dealWithDuplicates()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.QueueMessageReference,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.QueueMessageReference)"
        ]
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore$2:void execute()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()"
        ]
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:void replayAcknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void recover()"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void duplicateFromStore(org.apache.activemq.command.Message,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Topic:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void processAdd(org.apache.activemq.store.kahadb.data.KahaAddMessageCommand,org.apache.activemq.command.TransactionId,org.apache.activemq.util.ByteSequence)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl:java.lang.Object addFirst(java.lang.String,org.apache.activemq.util.ByteSequence)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl:org.apache.activemq.store.PListEntry getFirst()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl:boolean remove(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand,org.apache.activemq.store.kahadb.disk.journal.Location)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$10:void visit(org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void <init>(org.apache.activemq.store.kahadb.KahaDBStore,org.apache.activemq.command.ActiveMQTopic)",
            "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:java.util.List getAllJobs(long,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void checkpointUpdate(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void checkpointCleanup(boolean)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void close()"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.data.KahaCommitCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.MessageDatabase$IndexAware)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$10:void visit(org.apache.activemq.store.kahadb.data.KahaCommitCommand)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand,org.apache.activemq.store.kahadb.disk.journal.Location)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$10:void visit(org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void resetBatching()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyMessageStore:void resetBatching()",
            "org.apache.activemq.store.ProxyTopicMessageStore:void resetBatching()"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerImpl:java.util.List getAllJobs(long,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.AbstractKahaDBStore:void checkpointUpdate(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void unload()",
            "org.apache.activemq.store.kahadb.AbstractKahaDBStore:void checkpointCleanup(boolean)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void upgradeFromLegacy()"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void process(org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerStoreImpl:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void start()"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl:boolean removePList(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:java.util.List getNextScheduleJobs()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void processCommit(org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempKahaDBStore$1:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void unload()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void doStop(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void loadPageFile()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void load()",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void upgradeFromLegacy()"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination readPayload(java.io.DataInput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller:java.lang.Object readPayload(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl:boolean remove(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListImpl:boolean remove(java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:boolean removeJobScheduler(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$8:void visit(org.apache.activemq.store.kahadb.data.KahaDestroySchedulerCommand)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerImpl:java.util.List getNextScheduleJobs()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void processRemove(org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void process(org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:void addSubscription(org.apache.activemq.command.SubscriptionInfo,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.data.KahaAddMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.MessageDatabase$IndexAware)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$10:void visit(org.apache.activemq.store.kahadb.data.KahaAddMessageCommand)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:java.util.List getAllJobs()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void loadPageFile()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void open()",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void load()"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerImpl:java.util.List getAllJobs()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyStoreReplayer:void replayScheduler(org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerImpl,org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl:void destroy()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.data.KahaUpdateMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$10:void visit(org.apache.activemq.store.kahadb.data.KahaUpdateMessageCommand)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void unload()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.AbstractKahaDBStore:void doStop(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl:java.lang.Object addLast(java.lang.String,org.apache.activemq.util.ByteSequence)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore:java.util.Set getDestinations()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl:org.apache.activemq.store.PListEntry getLast()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl$PListIteratorImpl:void remove()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl:void claimFileLocations(java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl:org.apache.activemq.store.PListEntry get(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void setBatch(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyMessageStore:void setBatch(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void setBatch(org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore:java.util.Set getDestinations()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter:java.util.Set getDestinations()"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void loadPageFile()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void open()"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$10:void visit(org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand)"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription$2:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.SchedulerTimerTask:void run()"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)"
        ]
    },
    "org.apache.activemq.broker.region.policy.PolicyEntry:void configure(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.region.QueueBrowserSubscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.QueueRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.policy.PolicyEntry:void configure(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.region.TopicSubscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TempTopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.policy.PolicyEntry:void configure(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.region.QueueSubscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.QueueRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.policy.PolicyEntry:void configure(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.region.DurableTopicSubscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.broker.region.RegionBroker)"
        ]
    },
    "org.apache.activemq.broker.region.QueueBrowserSubscription:void checkDone()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.QueueBrowserSubscription:void decrementQueueRef()",
            "org.apache.activemq.broker.region.QueueBrowserSubscription:void destinationsAdded()"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic$2:boolean recoverMessage(org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.PrefetchSubscription$3:void onSuccess()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker$2:void onSuccess()",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void onUsageChanged(org.apache.activemq.usage.Usage,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Topic:void clearPendingAndDispatch(org.apache.activemq.broker.region.DurableTopicSubscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void clearPendingMessages()"
        ]
    },
    "org.apache.activemq.broker.LockableServiceSupport:void keepLockAlive()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.LockableServiceSupport$1:void run()"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:void stopGracefully(java.lang.String,java.lang.String,long,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.xbean.XBeanBrokerService:void destroy()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.xbean.XBeanBrokerService:void preDestroy()"
        ]
    },
    "org.apache.activemq.broker.BrokerService$7:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.camel.camelplugin.CamelRoutesBroker:void stop()",
            "org.apache.activemq.plugin.StatisticsBroker:void stop()",
            "org.apache.activemq.broker.BrokerBroadcaster:void stop()",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void stop()",
            "org.apache.activemq.broker.BrokerFilter:void stop()",
            "org.apache.activemq.broker.TransactionBroker:void stop()"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void stop()",
            "org.apache.activemq.broker.BrokerFilter:void stop()",
            "org.apache.activemq.broker.TransactionBroker:void stop()"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnection$2:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnection$2:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnection$1:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.stomp.FrameTranslator$Helper:void copyStandardHeadersFromFrameToMessage(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.transport.stomp.StompFrame,org.apache.activemq.command.ActiveMQMessage,org.apache.activemq.transport.stomp.FrameTranslator)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.JmsFrameTranslator:org.apache.activemq.command.ActiveMQMessage convertFrame(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.LegacyFrameTranslator:org.apache.activemq.command.ActiveMQMessage convertFrame(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpNioSslTransport:void processCommand(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void serviceRead()"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpNioTransport:void serviceRead()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.amqp.AmqpNioTransport:void access$000(org.apache.activemq.transport.amqp.AmqpNioTransport)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTCodec$3:void parse(org.fusesource.hawtbuf.DataByteArrayInputStream,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTCodec:void parse(org.fusesource.hawtbuf.DataByteArrayInputStream,int)",
            "org.apache.activemq.transport.mqtt.MQTTCodec$2:void parse(org.fusesource.hawtbuf.DataByteArrayInputStream,int)",
            "org.apache.activemq.transport.mqtt.MQTTCodec$3:void parse(org.fusesource.hawtbuf.DataByteArrayInputStream,int)",
            "org.apache.activemq.transport.mqtt.MQTTCodec$4:void parse(org.fusesource.hawtbuf.DataByteArrayInputStream,int)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTCodec$4:void parse(org.fusesource.hawtbuf.DataByteArrayInputStream,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTCodec:void parse(org.fusesource.hawtbuf.DataByteArrayInputStream,int)",
            "org.apache.activemq.transport.mqtt.MQTTCodec$2:void parse(org.fusesource.hawtbuf.DataByteArrayInputStream,int)",
            "org.apache.activemq.transport.mqtt.MQTTCodec$3:void parse(org.fusesource.hawtbuf.DataByteArrayInputStream,int)",
            "org.apache.activemq.transport.mqtt.MQTTCodec$4:void parse(org.fusesource.hawtbuf.DataByteArrayInputStream,int)"
        ]
    },
    "org.apache.activemq.transport.nio.NIOSSLTransport$1:void onSelect(org.apache.activemq.transport.nio.SelectorSelection)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorSelection:void onSelect()"
        ]
    },
    "org.apache.activemq.transport.stomp.StompNIOTransport$1:void onSelect(org.apache.activemq.transport.nio.SelectorSelection)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorSelection:void onSelect()"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpInactivityMonitor$2$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.amqp.AmqpInactivityMonitor$1$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.nio.NIOTransport$1:void onError(org.apache.activemq.transport.nio.SelectorSelection,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorSelection:void onError(java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpNioTransport$1:void onError(org.apache.activemq.transport.nio.SelectorSelection,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorSelection:void onError(java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTNIOTransport$1:void onError(org.apache.activemq.transport.nio.SelectorSelection,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorSelection:void onError(java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.transport.nio.NIOSSLTransport$1:void onError(org.apache.activemq.transport.nio.SelectorSelection,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorSelection:void onError(java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompNIOTransport$1:void onError(org.apache.activemq.transport.nio.SelectorSelection,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorSelection:void onError(java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTNIOTransport:void serviceRead()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTNIOTransport:void access$000(org.apache.activemq.transport.mqtt.MQTTNIOTransport)"
        ]
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:void propagateFailureToExceptionListener(java.lang.Exception)",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void negociate(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpTransportFilter:void handleException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:long keepAlive()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToActiveMQ(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.ResponseCorrelator:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:void propagateFailureToExceptionListener(java.lang.Exception)",
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void replayCommands(org.apache.activemq.command.ReplayCommand)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor$1$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor$5:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.InactivityMonitor:void processInboundWireFormatInfo(org.apache.activemq.command.WireFormatInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.console.util.JmxMBeansUtil:java.util.List queryMBeans(javax.management.MBeanServerConnection,java.lang.String,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.console.util.JmxMBeansUtil:java.util.List x_queryMBeans(javax.management.MBeanServerConnection,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.console.util.JmxMBeansUtil:java.util.List getAllBrokers(javax.management.MBeanServerConnection,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.console.util.JmxMBeansUtil:java.util.List getBrokersByName(javax.management.MBeanServerConnection,java.lang.String,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.console.util.JmxMBeansUtil:java.util.List getAllBrokers(javax.management.MBeanServerConnection)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.command.ListCommand:void runTask(java.util.List)",
            "org.apache.activemq.console.command.ShutdownCommand:void runTask(java.util.List)"
        ]
    },
    "org.apache.activemq.console.util.JmxMBeansUtil:java.util.List getBrokersByName(javax.management.MBeanServerConnection,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.command.ShutdownCommand:void runTask(java.util.List)"
        ]
    },
    "org.apache.activemq.console.util.AmqMessagesUtil:java.util.List getMessages(java.net.URI,javax.jms.Destination,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.util.AmqMessagesUtil:java.util.List getAllMessages(java.net.URI,javax.jms.Destination)"
        ]
    },
    "org.apache.activemq.console.util.AmqMessagesUtil:java.util.List getMessages(javax.jms.ConnectionFactory,javax.jms.Destination,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.console.util.JmxMBeansUtil:java.util.List queryMBeans(javax.management.MBeanServerConnection,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.command.DstatCommand:void displayQueueStats()",
            "org.apache.activemq.console.command.BrowseCommand:void runTask(java.util.List)",
            "org.apache.activemq.console.command.DstatCommand:void displayTopicStats()",
            "org.apache.activemq.console.command.PurgeCommand:void runTask(java.util.List)",
            "org.apache.activemq.console.command.DstatCommand:void displayAllDestinations()"
        ]
    },
    "org.apache.activemq.console.util.JmxMBeansUtil:java.util.Map queryMBeansAsMap(javax.management.MBeanServerConnection,java.util.List,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.command.QueryCommand:void runTask(java.util.List)"
        ]
    },
    "org.apache.activemq.console.command.AmqBrowseCommand:void runTask(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination lookup(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.RegionBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.RegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.region.RegionBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination lookup(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)",
            "org.apache.activemq.broker.region.AbstractRegion:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection$5:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.ConnectionPool:void decrementReferenceCount()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.XaConnectionPool$Synchronization:void afterCompletion(int)",
            "org.apache.activemq.jms.pool.PooledConnection:void close()"
        ]
    },
    "org.apache.activemq.console.command.AbstractAmqCommand:javax.jms.Connection createConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.command.AbstractAmqCommand:javax.jms.Connection createConnection()"
        ]
    },
    "org.apache.activemq.jms.pool.PooledConnectionFactory:javax.jms.Connection createConnection(org.apache.activemq.jms.pool.ConnectionKey)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledConnectionFactory$1:org.apache.commons.pool2.PooledObject makeObject(org.apache.activemq.jms.pool.ConnectionKey)"
        ]
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAQueueConnection createXAQueueConnection()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XATopicConnection createXATopicConnection()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.Connection createConnection()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.command.AbstractAmqCommand:javax.jms.Connection createConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.ActiveMQConnection makeConnection()",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.ActiveMQConnection makeConnection(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.activemq.console.filter.AmqMessagesQueryFilter:javax.jms.Connection createConnection()",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.ActiveMQConnection makeConnection(java.lang.String)",
            "org.apache.activemq.jms.pool.PooledConnectionFactory:javax.jms.Connection createConnection(org.apache.activemq.jms.pool.ConnectionKey)"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.TopicConnection createTopicConnection()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.QueueConnection createQueueConnection()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAConnection createXAConnection()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.XaPooledConnectionFactory:javax.jms.Connection createConnection(org.apache.activemq.jms.pool.ConnectionKey)"
        ]
    },
    "org.apache.activemq.jms.pool.XaPooledConnectionFactory:javax.jms.Connection createConnection(org.apache.activemq.jms.pool.ConnectionKey)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledConnectionFactory$1:org.apache.commons.pool2.PooledObject makeObject(org.apache.activemq.jms.pool.ConnectionKey)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:void updateURIs(boolean,java.net.URI[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFilter:void updateURIs(boolean,java.net.URI[])",
            "org.apache.activemq.transport.mock.MockTransport:void updateURIs(boolean,java.net.URI[])"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void processNewTransports(boolean,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void doUpdateURIsFromDisk()",
            "org.apache.activemq.transport.failover.FailoverTransport:void handleConnectionControl(org.apache.activemq.command.ConnectionControl)"
        ]
    },
    "org.apache.activemq.transport.udp.UdpTransportServer$1:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.jmx.NetworkConnectorView:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$stop_master$1:void apply()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$stop_master$1:java.lang.Object apply()"
        ]
    },
    "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$stop_slave$1:void apply()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$stop_slave$1:java.lang.Object apply()"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.broker.region.TempTopic:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TempQueue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void doBrowse(java.util.List,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void expireMessages()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message[] browse()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:boolean iterate()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()",
            "org.apache.activemq.broker.region.Queue:void wakeup()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void purge()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TempQueue:void dispose(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.broker.jmx.QueueView:void purge()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void doPageIn(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(org.apache.activemq.broker.region.MessageReferenceFilter,int)",
            "org.apache.activemq.broker.region.Queue:int copyMatchingMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.region.Queue:void start()",
            "org.apache.activemq.broker.region.Queue:int retryMessages(org.apache.activemq.broker.ConnectionContext,int)"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:org.apache.activeio.journal.RecordLocation checkpoint(org.apache.activemq.util.Callback)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:org.apache.activeio.journal.RecordLocation checkpoint()",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:org.apache.activeio.journal.RecordLocation checkpoint()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void dealWithDuplicates()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:boolean addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void doFillBatch()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.QueueMessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.Queue:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.QueueMessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void doBrowse(java.util.List,int)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void discardExpiredMessage(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchPending()"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$10:void visit(org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand:void visit(org.apache.activemq.store.kahadb.Visitor)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void <init>(org.apache.activemq.store.kahadb.KahaDBStore,org.apache.activemq.command.ActiveMQTopic)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore:org.apache.activemq.store.TopicMessageStore createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.command.SubscriptionInfo[] getAllDurableSubscriptions(org.apache.activemq.command.ActiveMQTopic)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void checkpointCleanup(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$3:void run()",
            "org.apache.activemq.store.kahadb.KahaDBStore:void checkpoint(boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void unload()"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$10:void visit(org.apache.activemq.store.kahadb.data.KahaCommitCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.data.KahaCommitCommand:void visit(org.apache.activemq.store.kahadb.Visitor)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$10:void visit(org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand:void visit(org.apache.activemq.store.kahadb.Visitor)"
        ]
    },
    "org.apache.activemq.store.ProxyMessageStore:void resetBatching()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:void resetBatching()",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void resetBatch()"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void resetBatching()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:void resetBatching()",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void resetBatch()"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.broker.region.Queue:void initialize()",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void doFillBatch()"
        ]
    },
    "org.apache.activemq.store.ProxyMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.broker.region.Queue:void initialize()",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void doFillBatch()"
        ]
    },
    "org.apache.activemq.store.kahadb.AbstractKahaDBStore:void checkpointCleanup(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.AbstractKahaDBStore$2:void run()"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void doFillBatch()",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$1:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore:void doStop(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller:java.lang.Object readPayload(java.io.DataInput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:org.apache.activemq.store.kahadb.disk.index.BTreeNode readPayload(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl:boolean remove(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void resetBatch()",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$8:void visit(org.apache.activemq.store.kahadb.data.KahaDestroySchedulerCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.data.KahaDestroySchedulerCommand:void visit(org.apache.activemq.store.kahadb.Visitor)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:void addSubscription(org.apache.activemq.command.SubscriptionInfo,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void doBrowse(java.util.List,int)",
            "org.apache.activemq.store.journal.JournalMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:java.util.List getSubscriberMessages(org.apache.activemq.broker.jmx.SubscriptionView)"
        ]
    },
    "org.apache.activemq.store.ProxyMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$10:void visit(org.apache.activemq.store.kahadb.data.KahaAddMessageCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.data.KahaAddMessageCommand:void visit(org.apache.activemq.store.kahadb.Visitor)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void open()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void load()"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void load()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempKahaDBStore:void load()",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void start()"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$10:void visit(org.apache.activemq.store.kahadb.data.KahaUpdateMessageCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.data.KahaUpdateMessageCommand:void visit(org.apache.activemq.store.kahadb.Visitor)"
        ]
    },
    "org.apache.activemq.store.kahadb.AbstractKahaDBStore:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void stop()"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.ProxyMessageStore:void setBatch(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void setBatch(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.journal.JournalMessageStore:void setBatch(org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void setBatch(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void setBatch(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.journal.JournalMessageStore:void setBatch(org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter:java.util.Set getDestinations()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$10:void visit(org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand:void visit(org.apache.activemq.store.kahadb.Visitor)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)"
        ]
    },
    "org.apache.activemq.broker.region.QueueRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedQueueRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.jmx.ManagedTopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.TempTopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.QueueBrowserSubscription:void decrementQueueRef()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue$BrowserDispatch:void done()"
        ]
    },
    "org.apache.activemq.broker.region.QueueBrowserSubscription:void destinationsAdded()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.Topic$2:boolean recoverMessage(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore$2:boolean recoverMessage(long,byte[])",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:int recoverRolledBackAcks(org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,org.apache.activemq.store.kahadb.disk.page.Transaction,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker$2:void onSuccess()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker$2:void onSuccess()",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void clearPendingMessages()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker$PreparedDestinationCompletion:void afterCommit()",
            "org.apache.activemq.broker.TransactionBroker$PreparedDestinationCompletion:void afterRollback()"
        ]
    },
    "org.apache.activemq.broker.LockableServiceSupport$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.xbean.XBeanBrokerService:void preDestroy()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.camel.camelplugin.CamelRoutesBroker:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.plugin.StatisticsBroker:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.stomp.JmsFrameTranslator:org.apache.activemq.command.ActiveMQMessage convertFrame(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:org.apache.activemq.command.ActiveMQMessage convertMessage(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.LegacyFrameTranslator:org.apache.activemq.command.ActiveMQMessage convertFrame(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.JmsFrameTranslator:org.apache.activemq.command.ActiveMQMessage convertFrame(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:org.apache.activemq.command.ActiveMQMessage convertMessage(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpNioTransport:void access$000(org.apache.activemq.transport.amqp.AmqpNioTransport)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.amqp.AmqpNioTransport$1:void onSelect(org.apache.activemq.transport.nio.SelectorSelection)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTCodec:void parse(org.fusesource.hawtbuf.DataByteArrayInputStream,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTNIOTransport:void serviceRead()",
            "org.apache.activemq.transport.mqtt.MQTTNIOSSLTransport:void processCommand(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTCodec$2:void parse(org.fusesource.hawtbuf.DataByteArrayInputStream,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTCodec:void parse(org.fusesource.hawtbuf.DataByteArrayInputStream,int)",
            "org.apache.activemq.transport.mqtt.MQTTCodec$2:void parse(org.fusesource.hawtbuf.DataByteArrayInputStream,int)",
            "org.apache.activemq.transport.mqtt.MQTTCodec$3:void parse(org.fusesource.hawtbuf.DataByteArrayInputStream,int)",
            "org.apache.activemq.transport.mqtt.MQTTCodec$4:void parse(org.fusesource.hawtbuf.DataByteArrayInputStream,int)"
        ]
    },
    "org.apache.activemq.transport.nio.SelectorSelection:void onError(java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorWorker$1:void run()"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTNIOTransport:void access$000(org.apache.activemq.transport.mqtt.MQTTNIOTransport)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTNIOTransport$1:void onSelect(org.apache.activemq.transport.nio.SelectorSelection)"
        ]
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void negociate(org.apache.activemq.command.WireFormatInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpTransportFilter:long keepAlive()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.amqp.AmqpInactivityMonitor$2$1:void run()"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpTransportFilter:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.reliable.ReliableTransport:void replayCommands(org.apache.activemq.command.ReplayCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.reliable.ReliableTransport:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.console.command.ListCommand:void runTask(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.console.command.ShutdownCommand:void runTask(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.command.AbstractCommand:void execute(java.util.List)"
        ]
    },
    "org.apache.activemq.console.util.AmqMessagesUtil:java.util.List getAllMessages(java.net.URI,javax.jms.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.console.command.DstatCommand:void displayQueueStats()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.command.DstatCommand:void runTask(java.util.List)"
        ]
    },
    "org.apache.activemq.console.command.DstatCommand:void displayTopicStats()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.command.DstatCommand:void runTask(java.util.List)"
        ]
    },
    "org.apache.activemq.console.command.PurgeCommand:void runTask(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.console.command.DstatCommand:void displayAllDestinations()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.command.DstatCommand:void runTask(java.util.List)"
        ]
    },
    "org.apache.activemq.console.command.QueryCommand:void runTask(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.command.BstatCommand:void runTask(java.util.List)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void doForward(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.util.BrokerSupport:void doResend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.BaseDestination:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.util.RedeliveryPlugin:void scheduleRedelivery(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,long,int)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.RegionBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination lookup(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.security.AuthorizationBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.TransactionBroker:void forceDestinationWakeupOnCompletion(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.transaction.Transaction,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.BaseCommand)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.RegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)",
            "org.apache.activemq.plugin.DiscardingDLQBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.jms.pool.XaConnectionPool$Synchronization:void afterCompletion(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledConnection:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledConnectionFactory:void start()"
        ]
    },
    "org.apache.activemq.console.command.AbstractAmqCommand:javax.jms.Connection createConnection()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledConnectionFactory$1:org.apache.commons.pool2.PooledObject makeObject(org.apache.activemq.jms.pool.ConnectionKey)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledConnectionFactory$1:org.apache.commons.pool2.PooledObject makeObject(java.lang.Object)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:org.apache.activemq.ActiveMQConnection makeConnection()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:org.apache.activemq.ActiveMQConnection makeConnection(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.console.filter.AmqMessagesQueryFilter:javax.jms.Connection createConnection()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.filter.AmqMessagesQueryFilter:java.util.List queryMessages(org.apache.activemq.command.ActiveMQQueue,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:org.apache.activemq.ActiveMQConnection makeConnection(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.mock.MockTransport:void updateURIs(boolean,java.net.URI[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFilter:void updateURIs(boolean,java.net.URI[])"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void doUpdateURIsFromDisk()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void handleConnectionControl(org.apache.activemq.command.ConnectionControl)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$stop_master$1:java.lang.Object apply()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$stop_slave$1:java.lang.Object apply()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:void expireMessages()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void access$100(org.apache.activemq.broker.region.Queue)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message[] browse()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void wakeup()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue$8:void afterRollback()",
            "org.apache.activemq.broker.region.Queue$8:void afterCommit()",
            "org.apache.activemq.broker.region.Queue:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,long)",
            "org.apache.activemq.broker.region.Queue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Queue:void messageSent(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:void purge()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.region.Queue:boolean moveMessageTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(org.apache.activemq.broker.region.MessageReferenceFilter,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:boolean removeMessage(java.lang.String)",
            "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(java.lang.String,int)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:int copyMatchingMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:int copyMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.region.Queue:boolean copyMessageTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:int retryMessages(org.apache.activemq.broker.ConnectionContext,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:int retryMessages()"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:org.apache.activeio.journal.RecordLocation checkpoint()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter$4:org.apache.activeio.journal.RecordLocation call()"
        ]
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:org.apache.activeio.journal.RecordLocation checkpoint()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter$5:org.apache.activeio.journal.RecordLocation call()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:boolean addMessageLast(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:boolean addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:boolean addMessageLast(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void doFillBatch()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void fillBatch()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void discardExpiredMessage(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchPending()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.QueueMessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(org.apache.activemq.broker.region.MessageReferenceFilter,int)",
            "org.apache.activemq.broker.region.Queue:void purge()",
            "org.apache.activemq.broker.region.Queue:boolean moveMessageTo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.QueueMessageReference,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void doBrowse(java.util.List,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.broker.region.Topic:void access$100(org.apache.activemq.broker.region.Topic,java.util.List,int)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void discardExpiredMessage(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:boolean tryAddMessageLast(org.apache.activemq.broker.region.MessageReference,long)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void expireOldMessages()"
        ]
    },
    "org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand:void visit(org.apache.activemq.store.kahadb.Visitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.MessageDatabase$IndexAware)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore:org.apache.activemq.store.TopicMessageStore createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter:org.apache.activemq.store.TopicMessageStore createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.command.SubscriptionInfo[] getAllDurableSubscriptions(org.apache.activemq.command.ActiveMQTopic)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void buildExistingSubscriptions()"
        ]
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$3:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBStore:void checkpoint(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter:void checkpoint(boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.data.KahaCommitCommand:void visit(org.apache.activemq.store.kahadb.Visitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.MessageDatabase$IndexAware)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand:void visit(org.apache.activemq.store.kahadb.Visitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.MessageDatabase$IndexAware)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:void resetBatching()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void resetBatch()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void stop()",
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void start()",
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void fillBatch()"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:void initialize()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)"
        ]
    },
    "org.apache.activemq.store.kahadb.AbstractKahaDBStore$2:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void doFillBatch()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBStore:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void stop()"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:org.apache.activemq.store.kahadb.disk.index.BTreeNode readPayload(java.io.DataInput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:java.lang.Object readPayload(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void resetBatch()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void start()"
        ]
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.data.KahaDestroySchedulerCommand:void visit(org.apache.activemq.store.kahadb.Visitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.MessageDatabase$IndexAware)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:java.util.List getSubscriberMessages(org.apache.activemq.broker.jmx.SubscriptionView)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.TabularData browseAsTable(org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.CompositeData[] browse(org.apache.activemq.broker.jmx.SubscriptionView)"
        ]
    },
    "org.apache.activemq.store.kahadb.data.KahaAddMessageCommand:void visit(org.apache.activemq.store.kahadb.Visitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.MessageDatabase$IndexAware)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore:void load()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.data.KahaUpdateMessageCommand:void visit(org.apache.activemq.store.kahadb.Visitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.MessageDatabase$IndexAware)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void setBatch(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void syncWithStore(org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:void setBatch(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand:void visit(org.apache.activemq.store.kahadb.Visitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.MessageDatabase$IndexAware)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)",
            "org.apache.activemq.camel.camelplugin.CamelRoutesBroker:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedQueueRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.Queue$BrowserDispatch:void done()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.JDBCTopicMessageStore$2:boolean recoverMessage(long,byte[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverSubscription(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:int recoverRolledBackAcks(org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,org.apache.activemq.store.kahadb.disk.page.Transaction,int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker$PreparedDestinationCompletion:void afterCommit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransactionBroker$PreparedDestinationCompletion:void afterRollback()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:org.apache.activemq.command.ActiveMQMessage convertMessage(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompSend(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpNioTransport$1:void onSelect(org.apache.activemq.transport.nio.SelectorSelection)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorSelection:void onSelect()"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTNIOSSLTransport:void processCommand(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void serviceRead()"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTNIOTransport$1:void onSelect(org.apache.activemq.transport.nio.SelectorSelection)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorSelection:void onSelect()"
        ]
    },
    "org.apache.activemq.console.command.AbstractCommand:void execute(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.command.ShellCommand:int main(java.lang.String[],java.io.InputStream,java.io.PrintStream)",
            "org.apache.activemq.console.ActiveMQLauncher:void start()",
            "org.apache.activemq.console.command.AbstractJmxCommand:void execute(java.util.List)"
        ]
    },
    "org.apache.activemq.console.command.DstatCommand:void runTask(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.console.command.BstatCommand:void runTask(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void doForward(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void doResend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.util.RedeliveryPlugin:void scheduleRedelivery(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,long,int)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void doForward(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void access$000(org.apache.activemq.broker.region.virtual.CompositeDestinationFilter,org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.plugin.StatisticsBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendSubStats(org.apache.activemq.broker.ConnectionContext,javax.management.ObjectName[],org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.util.BrokerSupport:void doResend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.BrokerSupport:void resendNoCopy(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.util.BrokerSupport:void resend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.BaseDestination:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void dispatch(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:void messageSent(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.usage.Usage)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireConsumerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.advisory.AdvisoryBroker:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.advisory.AdvisoryBroker:void networkBridgeStarted(org.apache.activemq.command.BrokerInfo,boolean,java.lang.String)",
            "org.apache.activemq.advisory.AdvisoryBroker:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.advisory.AdvisoryBroker:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.advisory.AdvisoryBroker:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireProducerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.advisory.AdvisoryBroker:void networkBridgeStopped(org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void nowMasterBroker()"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void scheduledJob(java.lang.String,org.apache.activemq.util.ByteSequence)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.UserIDBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorFilter:void injectMessage(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.security.AuthorizationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.camel.camelplugin.CamelRoutesBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void doResend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.plugin.StatisticsBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.BaseDestination:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.util.RedeliveryPlugin:void scheduleRedelivery(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,long,int)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void doResend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.util.RedeliveryPlugin:void scheduleRedelivery(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,long,int)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.util.RedeliveryPlugin:void scheduleRedelivery(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,long,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.util.RedeliveryPlugin:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.security.AuthorizationBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.security.AuthorizationBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransactionBroker:void forceDestinationWakeupOnCompletion(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.transaction.Transaction,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.BaseCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker:void access$000(org.apache.activemq.broker.TransactionBroker,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.transaction.Transaction,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.BaseCommand)"
        ]
    },
    "org.apache.activemq.broker.view.DestinationDotFileInterceptor:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination lookup(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.RegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.security.AuthorizationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.camel.camelplugin.CamelRoutesBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerFilter:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)",
            "org.apache.activemq.plugin.DiscardingDLQBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)",
            "org.apache.activemq.advisory.AdvisoryBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.plugin.DiscardingDLQBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.jms.pool.PooledConnectionFactory:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledConnectionFactory$1:org.apache.commons.pool2.PooledObject makeObject(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:void access$100(org.apache.activemq.broker.region.Queue)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue$2:void run()"
        ]
    },
    "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages()"
        ]
    },
    "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse()"
        ]
    },
    "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable()"
        ]
    },
    "org.apache.activemq.broker.region.Queue$8:void afterRollback()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue$8:void afterCommit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:void messageSent(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()",
            "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue$CursorAddSync:void afterCommit()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.jmx.QueueView:int moveMatchingMessagesTo(java.lang.String,java.lang.String,int)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:boolean moveMessageTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:boolean moveMessageTo(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:boolean removeMessage(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:boolean removeMessage(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(java.lang.String,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(java.lang.String)",
            "org.apache.activemq.broker.jmx.QueueView:int removeMatchingMessages(java.lang.String,int)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:int copyMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:int copyMatchingMessagesTo(java.lang.String,java.lang.String,int)",
            "org.apache.activemq.broker.region.Queue:int copyMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:boolean copyMessageTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:boolean copyMessageTo(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:int retryMessages()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter$4:org.apache.activeio.journal.RecordLocation call()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter$4:java.lang.Object call()"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter$5:org.apache.activeio.journal.RecordLocation call()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter$5:java.lang.Object call()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:boolean addMessageLast(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:boolean cursorAdd(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()",
            "org.apache.activemq.broker.region.Queue$BatchMessageRecoveryListener:boolean recoverMessage(org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:boolean addMessageLast(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void fillBatch()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:boolean hasNext()",
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void reset()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doPageInForDispatch(boolean,boolean)",
            "org.apache.activemq.broker.region.Queue$BatchMessageRecoveryListener:void processExpired()",
            "org.apache.activemq.broker.region.Queue:void doBrowseList(java.util.List,int,org.apache.activemq.broker.region.cursors.PendingList,java.util.concurrent.locks.ReentrantReadWriteLock,org.apache.activemq.broker.ConnectionContext,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:boolean moveMessageTo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.QueueMessageReference,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.jmx.QueueView:boolean retryMessage(java.lang.String)",
            "org.apache.activemq.broker.region.Queue:int retryMessages(org.apache.activemq.broker.ConnectionContext,int)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:org.apache.activemq.command.Message[] browse()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void access$100(org.apache.activemq.broker.region.Topic,java.util.List,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic$6:void run()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:boolean tryAddMessageLast(org.apache.activemq.broker.region.MessageReference,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:boolean addMessageLast(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void expireOldMessages()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void onUsageChanged(org.apache.activemq.usage.Usage,int,int)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:boolean tryAddMessageLast(org.apache.activemq.broker.region.MessageReference,long)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter:org.apache.activemq.store.TopicMessageStore createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void buildExistingSubscriptions()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void start()"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter:void checkpoint(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void stop()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void start()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:java.lang.Object readPayload(java.io.DataInput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void load(org.apache.activemq.store.kahadb.disk.page.Page,org.apache.activemq.store.kahadb.disk.util.Marshaller)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.TabularData browseAsTable(org.apache.activemq.broker.jmx.SubscriptionView)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:javax.management.openmbean.TabularData browseAsTable()",
            "org.apache.activemq.broker.jmx.DurableSubscriptionView:javax.management.openmbean.TabularData browseAsTable()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.CompositeData[] browse(org.apache.activemq.broker.jmx.SubscriptionView)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DurableSubscriptionView:javax.management.openmbean.CompositeData[] browse()",
            "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:javax.management.openmbean.CompositeData[] browse()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void syncWithStore(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:boolean addMessageLast(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.camel.camelplugin.CamelRoutesBroker:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverSubscription(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.console.command.ShellCommand:int main(java.lang.String[],java.io.InputStream,java.io.PrintStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.command.ShellCommand:void main(java.lang.String[])"
        ]
    },
    "org.apache.activemq.console.ActiveMQLauncher:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.console.command.AbstractJmxCommand:void execute(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.ActiveMQLauncher:void stop()"
        ]
    },
    "org.apache.activemq.broker.scheduler.SchedulerBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void doResend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.util.RedeliveryPlugin:void scheduleRedelivery(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,long,int)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void access$000(org.apache.activemq.broker.region.virtual.CompositeDestinationFilter,org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter$1:void run()"
        ]
    },
    "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.plugin.StatisticsBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.plugin.StatisticsBroker:void sendSubStats(org.apache.activemq.broker.ConnectionContext,javax.management.ObjectName[],org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.plugin.StatisticsBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.util.BrokerSupport:void resendNoCopy(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.util.BrokerSupport:void resend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:boolean moveMessageTo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.QueueMessageReference,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.Queue:int copyMatchingMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void dispatch(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic$4:void afterCommit()",
            "org.apache.activemq.broker.region.Topic:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.usage.Usage)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.usage.Usage)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireConsumerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void fireConsumerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command)",
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireProducerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireProducerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.broker.scheduler.SchedulerBroker:void scheduledJob(java.lang.String,org.apache.activemq.util.ByteSequence)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.UserIDBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.security.AuthorizationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.camel.camelplugin.CamelRoutesBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.RedeliveryPlugin:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.security.AuthorizationBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransactionBroker:void access$000(org.apache.activemq.broker.TransactionBroker,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.transaction.Transaction,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.BaseCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker$1:void recover(org.apache.activemq.command.XATransactionId,org.apache.activemq.command.Message[],org.apache.activemq.command.MessageAck[])"
        ]
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.security.AuthorizationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.camel.camelplugin.CamelRoutesBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.advisory.AdvisoryBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)",
            "org.apache.activemq.plugin.DiscardingDLQBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.plugin.SubQueueSelectorCacheBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.security.AuthorizationBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.cluster.ConnectionSplitBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:javax.management.ObjectName createDurableSubscriber(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue$2:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void orderedCursorAdd(org.apache.activemq.command.Message,org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.broker.region.Queue:void access$600(org.apache.activemq.broker.region.Queue)"
        ]
    },
    "org.apache.activemq.broker.region.Queue$CursorAddSync:void afterCommit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:int moveMatchingMessagesTo(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:int moveMatchingMessagesTo(java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.QueueView:boolean moveMessageTo(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.QueueView:boolean removeMessage(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:int removeMatchingMessages(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:int removeMatchingMessages(java.lang.String,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.QueueView:int copyMatchingMessagesTo(java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:int copyMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:int copyMatchingMessagesTo(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:boolean copyMessageTo(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter$4:java.lang.Object call()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter$5:java.lang.Object call()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:boolean cursorAdd(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void orderedCursorAdd(org.apache.activemq.command.Message,org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.broker.region.Queue$CursorAddSync:void afterCommit()"
        ]
    },
    "org.apache.activemq.broker.region.Queue$BatchMessageRecoveryListener:boolean recoverMessage(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:int recoverRolledBackAcks(org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,org.apache.activemq.store.kahadb.disk.page.Transaction,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.JDBCMessageStore$4:boolean recoverMessage(long,byte[])",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:boolean hasNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:boolean hasNext()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void reset()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void reset()"
        ]
    },
    "org.apache.activemq.broker.region.Queue$BatchMessageRecoveryListener:void processExpired()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void initialize()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void doBrowseList(java.util.List,int,org.apache.activemq.broker.region.cursors.PendingList,java.util.concurrent.locks.ReentrantReadWriteLock,org.apache.activemq.broker.ConnectionContext,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void doBrowse(java.util.List,int)"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:boolean retryMessage(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Topic$6:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:boolean addMessageLast(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void addRecoveredMessage(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:boolean addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:boolean addMessageLast(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean,long)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void onUsageChanged(org.apache.activemq.usage.Usage,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void stop()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void start()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction:void load(org.apache.activemq.store.kahadb.disk.page.Page,org.apache.activemq.store.kahadb.disk.util.Marshaller)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:org.apache.activemq.store.kahadb.disk.page.Page load(long,org.apache.activemq.store.kahadb.disk.util.Marshaller)"
        ]
    },
    "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:javax.management.openmbean.TabularData browseAsTable()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.DurableSubscriptionView:javax.management.openmbean.TabularData browseAsTable()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.DurableSubscriptionView:javax.management.openmbean.CompositeData[] browse()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:javax.management.openmbean.CompositeData[] browse()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.console.command.ShellCommand:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.console.ActiveMQLauncher:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Topic$4:void afterCommit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.usage.Usage)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.usage.Usage)",
            "org.apache.activemq.camel.camelplugin.CamelRoutesBroker:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.usage.Usage)",
            "org.apache.activemq.broker.BrokerFilter:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.usage.Usage)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireConsumerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.advisory.AdvisoryBroker:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.camel.camelplugin.CamelRoutesBroker:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.camel.camelplugin.CamelRoutesBroker:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.advisory.AdvisoryBroker:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.BrokerFilter:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.camel.camelplugin.CamelRoutesBroker:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.BrokerFilter:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.BrokerFilter:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireProducerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker$1:void recover(org.apache.activemq.command.XATransactionId,org.apache.activemq.command.Message[],org.apache.activemq.command.MessageAck[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.memory.MemoryTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)"
        ]
    },
    "org.apache.activemq.plugin.SubQueueSelectorCacheBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.security.AuthorizationBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.cluster.ConnectionSplitBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:javax.management.ObjectName createDurableSubscriber(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:void orderedCursorAdd(org.apache.activemq.command.Message,org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void access$600(org.apache.activemq.broker.region.Queue)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue$CursorAddSync:void afterCommit()"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:int moveMatchingMessagesTo(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.QueueView:int removeMatchingMessages(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.QueueView:int copyMatchingMessagesTo(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.JDBCMessageStore$4:boolean recoverMessage(long,byte[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverNextMessages(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,long[],long,int,boolean,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.broker.region.Queue:void initialize()",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void doFillBatch()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:boolean hasNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doPageInForDispatch(boolean,boolean)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.QueueMessageReference getMatchingMessage(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.QueueMessageReference getMessage(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void reset()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void clearPendingMessages()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doPageInForDispatch(boolean,boolean)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.QueueMessageReference getMatchingMessage(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void rebase()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.QueueMessageReference getMessage(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void addRecoveredMessage(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void doAddRecoveredMessage(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:boolean addMessageLast(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction:org.apache.activemq.store.kahadb.disk.page.Page load(long,org.apache.activemq.store.kahadb.disk.util.Marshaller)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:org.apache.activemq.store.kahadb.disk.index.HashBin getBin(org.apache.activemq.store.kahadb.disk.page.Transaction,int,long)",
            "org.apache.activemq.store.kahadb.MessageDatabase$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void free(long,int)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:org.apache.activemq.store.kahadb.disk.index.ListNode createNode(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void free(long)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:org.apache.activemq.store.kahadb.disk.index.ListNode loadNode(org.apache.activemq.store.kahadb.disk.page.Transaction,long)",
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerStoreImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void free(org.apache.activemq.store.kahadb.disk.page.Page,int)",
            "org.apache.activemq.store.kahadb.disk.page.Transaction$3:void findNextPage()",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.page.Transaction$1:void onWrite()",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:void clearBinAtPage(org.apache.activemq.store.kahadb.disk.page.Transaction,long)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:org.apache.activemq.store.kahadb.disk.index.BTreeNode loadNode(org.apache.activemq.store.kahadb.disk.page.Transaction,long,org.apache.activemq.store.kahadb.disk.index.BTreeNode)",
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void free(org.apache.activemq.store.kahadb.disk.page.Page)"
        ]
    },
    "org.apache.activemq.camel.camelplugin.CamelRoutesBroker:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.usage.Usage)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.camel.camelplugin.CamelRoutesBroker:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.camel.camelplugin.CamelRoutesBroker:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.camel.camelplugin.CamelRoutesBroker:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.security.AbstractAuthenticationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.CompositeDestinationBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverNextMessages(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,long[],long,int,boolean,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.QueueMessageReference getMatchingMessage(org.apache.activemq.command.MessageDispatchNotification)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.QueueMessageReference getMessage(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:javax.management.openmbean.CompositeData getMessage(java.lang.String)",
            "org.apache.activemq.broker.jmx.QueueView:boolean retryMessage(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void clearPendingMessages()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker$PreparedDestinationCompletion:void afterCommit()",
            "org.apache.activemq.broker.TransactionBroker$PreparedDestinationCompletion:void afterRollback()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void rebase()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void clearPendingMessages()"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void doAddRecoveredMessage(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractSubscription:boolean addRecoveredMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex:org.apache.activemq.store.kahadb.disk.index.HashBin getBin(org.apache.activemq.store.kahadb.disk.page.Transaction,int,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:org.apache.activemq.store.kahadb.disk.index.HashBin getBin(org.apache.activemq.store.kahadb.disk.page.Transaction,int)",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:org.apache.activemq.store.kahadb.disk.index.HashBin getBin(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,long,int)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction:void free(long,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:void resize(org.apache.activemq.store.kahadb.disk.page.Transaction,int)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:org.apache.activemq.store.kahadb.disk.index.ListNode createNode(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListNode:void split(org.apache.activemq.store.kahadb.disk.page.Transaction,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction:void free(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand)",
            "org.apache.activemq.store.kahadb.disk.index.ListNode:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.page.Transaction$1:void close()",
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void remove(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$MetaData:void loadLists(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Map)",
            "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.springframework.util.ReflectionUtils:java.lang.Object invokeMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:org.apache.activemq.store.kahadb.disk.index.ListNode loadNode(org.apache.activemq.store.kahadb.disk.page.Transaction,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.ListNode$ListNodeIterator:org.apache.activemq.store.kahadb.disk.index.ListNode next()",
            "org.apache.activemq.store.kahadb.disk.index.ListNode$ListIterator:org.apache.activemq.store.kahadb.disk.index.ListNode$KeyValueEntry getFromNextNode()",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:org.apache.activemq.store.kahadb.disk.index.ListNode getHead(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:org.apache.activemq.store.kahadb.disk.index.ListNode getTail(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerStoreImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction:void free(org.apache.activemq.store.kahadb.disk.page.Page,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void free(long,int)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction$3:void findNextPage()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction$3:org.apache.activemq.store.kahadb.disk.page.Page next()",
            "org.apache.activemq.store.kahadb.disk.page.Transaction$3:boolean hasNext()"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerStoreImpl$MetaData:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$MetaData:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerKahaDBMetaData:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerImpl:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction$1:void onWrite()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void writeInt(int)",
            "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void writeByte(int)",
            "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void writeBoolean(boolean)",
            "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void writeUTF(java.lang.String)",
            "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void writeLong(long)",
            "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void writeShort(int)",
            "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void write(byte[],int,int)",
            "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void skip(int)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex:void clearBinAtPage(org.apache.activemq.store.kahadb.disk.page.Transaction,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:void resize(org.apache.activemq.store.kahadb.disk.page.Transaction,int)",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:org.apache.activemq.store.kahadb.disk.index.BTreeNode loadNode(org.apache.activemq.store.kahadb.disk.page.Transaction,long,org.apache.activemq.store.kahadb.disk.index.BTreeNode)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$BTreeIterator:void findNextPage()",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:org.apache.activemq.store.kahadb.disk.index.BTreeNode getChild(org.apache.activemq.store.kahadb.disk.page.Transaction,int)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:org.apache.activemq.store.kahadb.disk.index.BTreeNode getRoot(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction:void free(org.apache.activemq.store.kahadb.disk.page.Page)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void free(long)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void free(org.apache.activemq.store.kahadb.disk.page.Page,int)",
            "org.apache.activemq.store.kahadb.disk.page.Transaction$3:void remove()",
            "org.apache.activemq.store.kahadb.disk.index.ListNode$ListIterator:void remove()"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.cluster.ConnectionSplitBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.cluster.ConnectionSplitBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.plugin.SubQueueSelectorCacheBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.security.JaasCertificateAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.security.AbstractAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.security.JaasDualAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.security.AuthorizationBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.security.JaasAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.security.JaasDualAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.security.SimpleAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.security.JaasCertificateAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.security.AuthorizationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.security.AbstractAuthenticationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.security.JaasDualAuthenticationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.security.AbstractAuthenticationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.security.JaasDualAuthenticationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.CompositeDestinationBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.CompositeDestinationBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.JDBCMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.QueueView:javax.management.openmbean.CompositeData getMessage(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.AbstractSubscription:boolean addRecoveredMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.LastImageSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)",
            "org.apache.activemq.broker.region.policy.RetainedMessageSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex:org.apache.activemq.store.kahadb.disk.index.HashBin getBin(org.apache.activemq.store.kahadb.disk.page.Transaction,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:int sizeOfBin(org.apache.activemq.store.kahadb.disk.page.Transaction,int)",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:void resize(org.apache.activemq.store.kahadb.disk.page.Transaction,int)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex:org.apache.activemq.store.kahadb.disk.index.HashBin getBin(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,long,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:void resize(org.apache.activemq.store.kahadb.disk.page.Transaction,int)",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:org.apache.activemq.store.kahadb.disk.index.HashBin getBin(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex:void resize(org.apache.activemq.store.kahadb.disk.page.Transaction,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode:void split(org.apache.activemq.store.kahadb.disk.page.Transaction,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListNode:void store(org.apache.activemq.store.kahadb.disk.page.Transaction,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void access$200(org.apache.activemq.store.kahadb.TempMessageDatabase,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction$1:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void store(org.apache.activemq.store.kahadb.disk.page.Page,org.apache.activemq.store.kahadb.disk.util.Marshaller,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand,org.apache.activemq.store.kahadb.disk.journal.Location)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase$14:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void remove(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination access$200(org.apache.activemq.store.kahadb.MessageDatabase,org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination getStoredDestination(org.apache.activemq.store.kahadb.data.KahaDestination,org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl$MetaData:void loadLists(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.springframework.util.ReflectionUtils:java.lang.Object invokeMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.core.convert.support.IdToEntityConverter:java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)",
            "org.springframework.jmx.access.MBeanClientInterceptor:java.lang.Object convertResultValueIfNecessary(java.lang.Object,org.springframework.core.MethodParameter)",
            "org.springframework.jmx.access.MBeanClientInterceptor:java.lang.Object convertDataArrayToTargetArray(java.lang.Object[],java.lang.Class)",
            "org.springframework.jmx.access.MBeanClientInterceptor:java.util.Collection convertDataArrayToTargetCollection(java.lang.Object[],java.lang.Class,java.lang.Class)",
            "org.springframework.util.ReflectionUtils:java.lang.Object invokeMethod(java.lang.reflect.Method,java.lang.Object)",
            "org.springframework.context.support.ContextTypeMatchClassLoader$ContextOverridingClassLoader:boolean isEligibleForOverriding(java.lang.String)",
            "org.springframework.core.io.support.PathMatchingResourcePatternResolver:org.springframework.core.io.Resource resolveRootDirResource(org.springframework.core.io.Resource)",
            "org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver:void addTransformer(java.lang.instrument.ClassFileTransformer)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode$ListNodeIterator:org.apache.activemq.store.kahadb.disk.index.ListNode next()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListNode$ListNodeIterator:java.lang.Object next()"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode$ListIterator:org.apache.activemq.store.kahadb.disk.index.ListNode$KeyValueEntry getFromNextNode()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListNode$ListIterator:boolean hasNext()",
            "org.apache.activemq.store.kahadb.disk.index.ListNode$ListIterator:void remove()"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:org.apache.activemq.store.kahadb.disk.index.ListNode getHead(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.util.Map$Entry getFirst(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:boolean isEmpty(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object addFirst(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction,long)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.util.Iterator listNodeIterator(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:org.apache.activemq.store.kahadb.disk.index.ListNode getTail(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object add(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.util.Map$Entry getLast(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction$3:org.apache.activemq.store.kahadb.disk.page.Page next()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction$3:java.lang.Object next()"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction$3:boolean hasNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.PageFile:void load()"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerStoreImpl$MetaData:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerStoreImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl$MetaData:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerKahaDBMetaData:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase:org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination getStoredDestination(org.apache.activemq.store.kahadb.data.KahaDestination,org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerImpl:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerStoreImpl$MetaData:void loadScheduler(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Map)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerKahaDBMetaData:void loadScheduler(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Map)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void writeInt(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$Metadata:void write(java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.MessageDatabase$LocationSizeMarshaller:void writePayload(org.apache.activemq.store.kahadb.disk.journal.Location,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender:void initBuffer(org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream)",
            "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void writeFloat(float)",
            "org.apache.activemq.store.kahadb.disk.util.SequenceSet$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.util.SequenceSet,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.index.HashBin$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.HashBin,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.MessageDatabase$HashSetStringMarshaller:void writePayload(java.util.HashSet,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.page.Page:void write(java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex$Metadata:void write(java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.journal.DataFileAppender:void processQueue()",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerKahaDBMetaData:void write(java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase$ByteSequenceMarshaller:void writePayload(org.apache.activemq.util.ByteSequence,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.util.LocationMarshaller:void writePayload(org.apache.activemq.store.kahadb.disk.journal.Location,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.scheduler.JobLocationsMarshaller:void writePayload(java.util.List,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.util.IntegerMarshaller:void writePayload(java.lang.Integer,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender:boolean appendToBuffer(org.apache.activemq.store.kahadb.disk.journal.Journal$WriteCommand,org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream)",
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerImpl$ValueMarshaller:void writePayload(java.util.List,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender:void processQueue()",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerKahaDBMetaData$IntegerListMarshaller:void writePayload(java.util.List,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void writeByte(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.journal.DataFileAppender:void processQueue()",
            "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender:boolean appendToBuffer(org.apache.activemq.store.kahadb.disk.journal.Journal$WriteCommand,org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream)",
            "org.apache.activemq.store.kahadb.MessageDatabase$LastAckMarshaller:void writePayload(org.apache.activemq.store.kahadb.MessageDatabase$LastAck,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.page.Page:void write(java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void writeBoolean(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller:void writePayload(org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.MessageDatabase$Metadata:void write(java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerKahaDBMetaData:void write(java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.util.SequenceSet$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.util.SequenceSet,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestinationMarshaller:void writePayload(org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void writeUTF(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void write(java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.util.StringMarshaller:void writePayload(java.lang.String,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase$MessageKeysMarshaller:void writePayload(org.apache.activemq.store.kahadb.TempMessageDatabase$MessageRecord,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerImpl:void write(java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageKeysMarshaller:void writePayload(org.apache.activemq.store.kahadb.MessageDatabase$MessageKeys,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void writeLong(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller:void writePayload(org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.MessageDatabase$Metadata:void write(java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender:void initBuffer(org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream)",
            "org.apache.activemq.store.kahadb.disk.util.SequenceSet$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.util.SequenceSet,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestinationMarshaller:void writePayload(org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void writeDouble(double)",
            "org.apache.activemq.store.kahadb.disk.page.Page:void write(java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void write(java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.util.LongMarshaller:void writePayload(java.lang.Long,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex$Metadata:void write(java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.journal.DataFileAppender:void processQueue()",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerKahaDBMetaData:void write(java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$MetaData:void write(java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.index.ListNode$NodeMarshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.ListNode,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerStoreImpl$MetaData:void write(java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerImpl:void write(java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.MessageDatabase$LastAckMarshaller:void writePayload(org.apache.activemq.store.kahadb.MessageDatabase$LastAck,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender:void processQueue()",
            "org.apache.activemq.store.kahadb.plist.PListImpl:void write(java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void writeShort(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void writeUTF(java.lang.String)",
            "org.apache.activemq.store.kahadb.disk.index.ListNode$NodeMarshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.ListNode,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.journal.DataFileAppender:void processQueue()",
            "org.apache.activemq.store.kahadb.TempMessageDatabase$ByteSequenceMarshaller:void writePayload(org.apache.activemq.util.ByteSequence,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender:boolean appendToBuffer(org.apache.activemq.store.kahadb.disk.journal.Journal$WriteCommand,org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void skip(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.journal.DataFileAppender:void processQueue()",
            "org.apache.activemq.store.kahadb.disk.page.Transaction:java.io.OutputStream openOutputStream(org.apache.activemq.store.kahadb.disk.page.Page,boolean)",
            "org.apache.activemq.store.kahadb.disk.page.Transaction$1:void onWrite()",
            "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender:void processQueue()"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode$BTreeIterator:void findNextPage()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$BTreeIterator:java.util.Map$Entry next()",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$BTreeIterator:boolean hasNext()"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:org.apache.activemq.store.kahadb.disk.index.BTreeNode getChild(org.apache.activemq.store.kahadb.disk.page.Transaction,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.util.Map$Entry getFirst(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:int getMaxLeafDepth(org.apache.activemq.store.kahadb.disk.page.Transaction,int)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.util.Map$Entry getLast(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void printStructure(org.apache.activemq.store.kahadb.disk.page.Transaction,java.io.PrintWriter,java.lang.String)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void visit(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.BTreeVisitor)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:org.apache.activemq.store.kahadb.disk.index.BTreeNode getRightLeaf(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:org.apache.activemq.store.kahadb.disk.index.BTreeNode getFirstLeafNode(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:org.apache.activemq.store.kahadb.disk.index.BTreeNode getLeafNode(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:org.apache.activemq.store.kahadb.disk.index.BTreeNode getLeftPeer(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.BTreeNode)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:int getMinLeafDepth(org.apache.activemq.store.kahadb.disk.page.Transaction,int)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:org.apache.activemq.store.kahadb.disk.index.BTreeNode getLeftLeaf(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:org.apache.activemq.store.kahadb.disk.index.BTreeNode getRoot(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:void printStructure(org.apache.activemq.store.kahadb.disk.page.Transaction,java.io.OutputStream)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.util.Map$Entry getLast(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:int getMaxLeafDepth(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:int getMinLeafDepth(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.lang.Object get(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:void visit(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.BTreeVisitor)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.util.Map$Entry getFirst(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:void printStructure(org.apache.activemq.store.kahadb.disk.page.Transaction,java.io.PrintWriter)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:boolean containsKey(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:boolean isEmpty(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction$3:void remove()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode$ListIterator:void remove()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListImpl$PListIteratorImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.plist.PListImpl$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.cluster.ConnectionSplitBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.plugin.SubQueueSelectorCacheBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.security.JaasCertificateAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.security.JaasDualAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.security.AbstractAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.security.JaasDualAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.security.JaasDualAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.security.AuthorizationBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.security.JaasAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.security.JaasDualAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.security.JaasDualAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.security.SimpleAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.security.JaasCertificateAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.security.JaasDualAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.security.AuthorizationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.security.JaasDualAuthenticationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.policy.LastImageSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void recoverRetroactiveMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Topic:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.policy.RetainedMessageSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void recoverRetroactiveMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Topic:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex:int sizeOfBin(org.apache.activemq.store.kahadb.disk.page.Transaction,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex:org.apache.activemq.store.kahadb.disk.index.HashBin getBin(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:boolean containsKey(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:java.lang.Object get(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode:void store(org.apache.activemq.store.kahadb.disk.page.Transaction,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListNode:void split(org.apache.activemq.store.kahadb.disk.page.Transaction,boolean)",
            "org.apache.activemq.store.kahadb.disk.index.ListNode:java.lang.Object addFirst(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.ListNode:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.ListNode:void storeUpdate(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void access$200(org.apache.activemq.store.kahadb.TempMessageDatabase,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction:void store(org.apache.activemq.store.kahadb.disk.page.Page,org.apache.activemq.store.kahadb.disk.util.Marshaller,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:void unload(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:void store(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.HashBin)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void checkpointUpdate(org.apache.activemq.store.kahadb.disk.page.Transaction,boolean)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:void storeNode(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.ListNode,boolean)",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:void resize(org.apache.activemq.store.kahadb.disk.page.Transaction,int)",
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerStoreImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void checkpointUpdate(org.apache.activemq.store.kahadb.disk.page.Transaction,boolean)",
            "org.apache.activemq.store.kahadb.MessageDatabase$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:void storeNode(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.BTreeNode,boolean)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$6:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand,org.apache.activemq.store.kahadb.disk.journal.Location)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$15:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$14:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination access$200(org.apache.activemq.store.kahadb.MessageDatabase,org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination getStoredDestination(org.apache.activemq.store.kahadb.data.KahaDestination,org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$6:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$2:org.apache.activemq.command.SubscriptionInfo execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase:long updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaAddMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination getExistingStoredDestination(org.apache.activemq.store.kahadb.data.KahaDestination,org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$3:java.lang.Integer execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$4:org.apache.activemq.store.kahadb.disk.journal.Location execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$2:java.lang.Boolean execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaUpdateMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$7:org.apache.activemq.store.MessageStoreStatistics execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$6:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.springframework.core.convert.support.IdToEntityConverter:java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.jmx.access.MBeanClientInterceptor:java.lang.Object convertResultValueIfNecessary(java.lang.Object,org.springframework.core.MethodParameter)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.access.MBeanClientInterceptor:java.lang.Object doInvoke(org.aopalliance.intercept.MethodInvocation)"
        ]
    },
    "org.springframework.jmx.access.MBeanClientInterceptor:java.lang.Object convertDataArrayToTargetArray(java.lang.Object[],java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.access.MBeanClientInterceptor:java.lang.Object convertResultValueIfNecessary(java.lang.Object,org.springframework.core.MethodParameter)"
        ]
    },
    "org.springframework.jmx.access.MBeanClientInterceptor:java.util.Collection convertDataArrayToTargetCollection(java.lang.Object[],java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.access.MBeanClientInterceptor:java.lang.Object convertResultValueIfNecessary(java.lang.Object,org.springframework.core.MethodParameter)"
        ]
    },
    "org.springframework.util.ReflectionUtils:java.lang.Object invokeMethod(java.lang.reflect.Method,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor:boolean determineRequiredStatus(java.lang.annotation.Annotation)",
            "org.springframework.beans.annotation.AnnotationBeanUtils:void copyPropertiesToBean(java.lang.annotation.Annotation,java.lang.Object,org.springframework.util.StringValueResolver,java.lang.String[])",
            "org.springframework.core.io.VfsUtils:java.lang.String doGetPath(java.lang.Object)",
            "org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver:java.lang.ClassLoader getThrowawayClassLoader()"
        ]
    },
    "org.springframework.context.support.ContextTypeMatchClassLoader$ContextOverridingClassLoader:boolean isEligibleForOverriding(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.core.io.support.PathMatchingResourcePatternResolver:org.springframework.core.io.Resource resolveRootDirResource(org.springframework.core.io.Resource)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.core.io.support.PathMatchingResourcePatternResolver:org.springframework.core.io.Resource[] findPathMatchingResources(java.lang.String)"
        ]
    },
    "org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver:void addTransformer(java.lang.instrument.ClassFileTransformer)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.weaving.DefaultContextLoadTimeWeaver:void addTransformer(java.lang.instrument.ClassFileTransformer)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode$ListNodeIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode$ListIterator:boolean hasNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListImpl$PListIteratorImpl:boolean hasNext()",
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.plist.PListImpl$9:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object get(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:boolean containsKey(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.ListNode$ListIterator:void moveToRequestedStart(long)",
            "org.apache.activemq.store.kahadb.plist.PListImpl$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void addAckLocationForRetroactiveSub(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.util.Map$Entry getFirst(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListImpl$7:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:boolean isEmpty(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void removeAckLocationsForSub(org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object addFirst(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListImpl$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.plist.PListImpl$9:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object get(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:boolean containsKey(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.plist.PListImpl$PListIteratorImpl:void <init>(org.apache.activemq.store.kahadb.plist.PListImpl)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void addAckLocationForRetroactiveSub(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListImpl$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.plist.PListImpl$6:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.util.Iterator listNodeIterator(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object add(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void addAckLocation(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.Long,java.lang.String)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.plist.PListImpl$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void addAckLocationForNewMessage(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.Long)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.util.Map$Entry getLast(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListImpl$8:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction$3:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.PageFile:void load()"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.PageFile:void load()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void loadPageFile()",
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerStoreImpl:void doStart()",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void loadPageFile()",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl:void intialize()",
            "org.apache.activemq.store.kahadb.MessageDatabase:void loadPageFile()"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination getStoredDestination(org.apache.activemq.store.kahadb.data.KahaDestination,org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$1:org.apache.activemq.util.ByteSequence execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$6:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$4:java.lang.Long execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void upadateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaAddMessageCommand,org.apache.activemq.util.ByteSequence)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$2:org.apache.activemq.command.SubscriptionInfo execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$5:java.lang.Integer execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$3:java.lang.Integer execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerStoreImpl$MetaData:void loadScheduler(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerStoreImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerKahaDBMetaData:void loadScheduler(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$Metadata:void write(java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$MetadataMarshaller:void writePayload(org.apache.activemq.store.kahadb.MessageDatabase$Metadata,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$LocationSizeMarshaller:void writePayload(org.apache.activemq.store.kahadb.disk.journal.Location,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$LocationSizeMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender:void initBuffer(org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender:void access$000(org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender,org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void writeFloat(float)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.util.SequenceSet$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.util.SequenceSet,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.util.SequenceSet$Marshaller:void writePayload(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.page.PageFile:void storeFreeList()"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.HashBin$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.HashBin,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.HashBin$Marshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$HashSetStringMarshaller:void writePayload(java.util.HashSet,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$HashSetStringMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Page:void write(java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.PageFile:org.apache.activemq.store.kahadb.disk.page.Page allocate(int)",
            "org.apache.activemq.store.kahadb.disk.page.Transaction$1:void onWrite()",
            "org.apache.activemq.store.kahadb.disk.page.Transaction$1:void close()",
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void free(org.apache.activemq.store.kahadb.disk.page.Page)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex$Metadata:void write(java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.HashIndex$Metadata$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.HashIndex$Metadata,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.journal.DataFileAppender:void processQueue()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.journal.DataFileAppender$1:void run()"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerKahaDBMetaData:void write(java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$MetaDataMarshaller:void writePayload(org.apache.activemq.store.kahadb.scheduler.JobSchedulerKahaDBMetaData,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase$ByteSequenceMarshaller:void writePayload(org.apache.activemq.util.ByteSequence,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase$ByteSequenceMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase$MessageKeysMarshaller:void writePayload(org.apache.activemq.store.kahadb.TempMessageDatabase$MessageRecord,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.util.LocationMarshaller:void writePayload(org.apache.activemq.store.kahadb.disk.journal.Location,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$Metadata:void write(java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerKahaDBMetaData:void write(java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.util.LocationMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageKeysMarshaller:void writePayload(org.apache.activemq.store.kahadb.MessageDatabase$MessageKeys,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobLocationsMarshaller:void writePayload(java.util.List,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobLocationsMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.util.IntegerMarshaller:void writePayload(java.lang.Integer,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.util.IntegerMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerKahaDBMetaData$IntegerListMarshaller:void writePayload(java.util.List,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender:boolean appendToBuffer(org.apache.activemq.store.kahadb.disk.journal.Journal$WriteCommand,org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender:boolean access$100(org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender,org.apache.activemq.store.kahadb.disk.journal.Journal$WriteCommand,org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerImpl$ValueMarshaller:void writePayload(java.util.List,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerImpl$ValueMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender:void processQueue()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.journal.DataFileAppender$1:void run()"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerKahaDBMetaData$IntegerListMarshaller:void writePayload(java.util.List,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerKahaDBMetaData$IntegerListMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$LastAckMarshaller:void writePayload(org.apache.activemq.store.kahadb.MessageDatabase$LastAck,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$LastAckMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller:void writePayload(org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestinationMarshaller:void writePayload(org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestinationMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void write(java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerKahaDBMetaData$JobSchedulerMarshaller:void writePayload(org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.util.StringMarshaller:void writePayload(java.lang.String,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.util.StringMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase$MessageKeysMarshaller:void writePayload(org.apache.activemq.store.kahadb.TempMessageDatabase$MessageRecord,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase$MessageKeysMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerImpl:void write(java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerStoreImpl$JobSchedulerMarshaller:void writePayload(org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerImpl,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageKeysMarshaller:void writePayload(org.apache.activemq.store.kahadb.MessageDatabase$MessageKeys,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageKeysMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void writeDouble(double)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.util.LongMarshaller:void writePayload(java.lang.Long,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.util.LongMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl$MetaData:void write(java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$MetaDataMarshaller:void writePayload(org.apache.activemq.store.kahadb.plist.PListStoreImpl$MetaData,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode$NodeMarshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.ListNode,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListNode$NodeMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerStoreImpl$MetaData:void write(java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerStoreImpl$MetaDataMarshaller:void writePayload(org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerStoreImpl$MetaData,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl:void write(java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$PListMarshaller:void writePayload(org.apache.activemq.store.kahadb.plist.PListImpl,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction:java.io.OutputStream openOutputStream(org.apache.activemq.store.kahadb.disk.page.Page,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void store(org.apache.activemq.store.kahadb.disk.page.Page,org.apache.activemq.store.kahadb.disk.util.Marshaller,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void remove(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode$BTreeIterator:java.util.Map$Entry next()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$BTreeIterator:java.lang.Object next()"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode$BTreeIterator:boolean hasNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempKahaDBStore$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$MetaData:void loadLists(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Map)",
            "org.apache.activemq.store.kahadb.MessageDatabase$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void process(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveScheduledJobCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void checkpointUpdate(org.apache.activemq.store.kahadb.disk.page.Transaction,boolean)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$5:java.lang.Integer execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$3:java.lang.Integer execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void removeJournalRCForMissingFiles(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Set)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex$MessageOrderIterator:boolean hasNext()",
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerImpl$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerImpl$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerStoreImpl$MetaData:void loadScheduler(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Map)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void removeInRange(org.apache.activemq.store.kahadb.disk.page.Transaction,long,long,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:java.util.List getAllScheduledJobs(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void recoverIndex(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void removeAckByteSequence(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination,java.lang.String,java.lang.Long)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:int removeJobsInMissingOrCorruptJounralFiles(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Set,java.util.Set)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerKahaDBMetaData:void loadScheduler(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Map)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$7:org.apache.activemq.store.MessageStoreStatistics execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.util.Map$Entry getFirst(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.util.Map$Entry getFirst(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:int getMaxLeafDepth(org.apache.activemq.store.kahadb.disk.page.Transaction,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:int getMaxLeafDepth(org.apache.activemq.store.kahadb.disk.page.Transaction,int)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:int getMaxLeafDepth(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.util.Map$Entry getLast(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.util.Map$Entry getLast(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void printStructure(org.apache.activemq.store.kahadb.disk.page.Transaction,java.io.PrintWriter,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void printStructure(org.apache.activemq.store.kahadb.disk.page.Transaction,java.io.PrintWriter,java.lang.String)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:void printStructure(org.apache.activemq.store.kahadb.disk.page.Transaction,java.io.OutputStream)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:void printStructure(org.apache.activemq.store.kahadb.disk.page.Transaction,java.io.PrintWriter)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void visit(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.BTreeVisitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:void visit(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.BTreeVisitor)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void visit(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.BTreeVisitor)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:org.apache.activemq.store.kahadb.disk.index.BTreeNode getRightLeaf(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:org.apache.activemq.store.kahadb.disk.index.BTreeNode getFirstLeafNode(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:org.apache.activemq.store.kahadb.disk.index.BTreeNode getLeafNode(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:boolean contains(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.lang.Object get(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:org.apache.activemq.store.kahadb.disk.index.BTreeNode getLeftPeer(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.BTreeNode)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:int getMinLeafDepth(org.apache.activemq.store.kahadb.disk.page.Transaction,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:int getMinLeafDepth(org.apache.activemq.store.kahadb.disk.page.Transaction,int)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:int getMinLeafDepth(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:org.apache.activemq.store.kahadb.disk.index.BTreeNode getLeftLeaf(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:void printStructure(org.apache.activemq.store.kahadb.disk.page.Transaction,java.io.OutputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.util.Map$Entry getLast(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase:org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void addLast(java.util.TreeSet,org.apache.activemq.store.kahadb.disk.index.BTreeIndex,org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:int getMaxLeafDepth(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:int getMinLeafDepth(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void removeInRange(org.apache.activemq.store.kahadb.disk.page.Transaction,long,long,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:boolean removeJobAtTime(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,long)",
            "org.apache.activemq.store.kahadb.MessageDatabase:long updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaAddMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void decrementJournalCount(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void removeAckLocationsForSub(org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void removeAckByteSequence(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination,java.lang.String,java.lang.Long)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void process(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveScheduledJobCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:org.apache.activemq.store.kahadb.MessageDatabase$MessageKeys remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Long)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaUpdateMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void process(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaAddScheduledJobCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void checkpointUpdate(org.apache.activemq.store.kahadb.disk.page.Transaction,boolean)",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void process(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRescheduleJobCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void removeJournalRCForMissingFiles(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Set)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void removeAckLocation(org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String,java.lang.Long)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.lang.Object get(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$1:org.apache.activemq.util.ByteSequence execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:int recoverRolledBackAcks(org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,org.apache.activemq.store.kahadb.disk.page.Transaction,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$2:org.apache.activemq.command.SubscriptionInfo execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:org.apache.activemq.store.kahadb.MessageDatabase$MessageKeys get(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Long)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void incrementJournalCount(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void decrementJournalCount(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$LastAck getLastAck(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String)",
            "org.apache.activemq.store.kahadb.KahaDBStore$4:org.apache.activemq.store.kahadb.disk.journal.Location execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$4:java.lang.Long execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$2:org.apache.activemq.command.SubscriptionInfo execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaUpdateMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void referenceRemovedLocation(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.scheduler.JobLocation)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$3:java.lang.Integer execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:void visit(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.BTreeVisitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void checkpointUpdate(org.apache.activemq.store.kahadb.disk.page.Transaction,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex$MessageOrderIterator:void <init>(org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderCursor,org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void getDeleteList(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.ArrayList,org.apache.activemq.store.kahadb.disk.index.BTreeIndex,java.lang.Long)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempKahaDBStore$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerStoreImpl$MetaData:void loadScheduler(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Map)",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$MetaData:void loadLists(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Map)",
            "org.apache.activemq.store.kahadb.MessageDatabase$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:java.util.List getAllScheduledJobs(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void recoverIndex(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void removeAckByteSequence(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination,java.lang.String,java.lang.Long)",
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void process(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveScheduledJobCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:int removeJobsInMissingOrCorruptJounralFiles(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Set,java.util.Set)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void checkpointUpdate(org.apache.activemq.store.kahadb.disk.page.Transaction,boolean)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerKahaDBMetaData:void loadScheduler(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Map)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$5:java.lang.Integer execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void removeJournalRCForMissingFiles(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Set)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$7:org.apache.activemq.store.MessageStoreStatistics execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerImpl$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.util.Map$Entry getFirst(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:java.util.Map$Entry getNextToSchedule()",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerImpl:long getNextScheduleTime()",
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:long getNextScheduleTime()"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:boolean removeJobAtTime(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,long)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.MessageDatabase:long updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaAddMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void incrementJournalCount(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void decrementJournalCount(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void upadateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaAddMessageCommand,org.apache.activemq.util.ByteSequence)",
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void process(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveScheduledJobCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaUpdateMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:org.apache.activemq.store.kahadb.MessageDatabase$MessageKeys put(org.apache.activemq.store.kahadb.disk.page.Transaction,int,java.lang.Long,org.apache.activemq.store.kahadb.MessageDatabase$MessageKeys)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void process(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaAddScheduledJobCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void referenceRemovedLocation(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.scheduler.JobLocation)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void process(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRescheduleJobCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:void printStructure(org.apache.activemq.store.kahadb.disk.page.Transaction,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:boolean containsKey(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void process(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaAddScheduledJobCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void process(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRescheduleJobCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void getDeleteList(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.ArrayList,java.lang.Long)",
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination getExistingStoredDestination(org.apache.activemq.store.kahadb.data.KahaDestination,org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void removeInRange(org.apache.activemq.store.kahadb.disk.page.Transaction,long,long,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$3:java.lang.Integer execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerImpl$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:boolean isEmpty(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.MessageDatabase$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$2:java.lang.Boolean execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase:long updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaAddMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl$PListIteratorImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.plist.PListImpl$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void removeAckLocation(org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String,java.lang.Long)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void removeAckLocationsForSub(org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void recoverRetroactiveMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex:boolean containsKey(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex:java.lang.Object get(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode:java.lang.Object addFirst(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object addFirst(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object add(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode:void storeUpdate(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex:void unload(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex:void store(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.HashBin)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:void resize(org.apache.activemq.store.kahadb.disk.page.Transaction,int)",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:void clearBinAtPage(org.apache.activemq.store.kahadb.disk.page.Transaction,long)",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:void storeNode(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.ListNode,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.ListNode:void store(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.ListNode:void store(org.apache.activemq.store.kahadb.disk.page.Transaction,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void checkpointUpdate(org.apache.activemq.store.kahadb.disk.page.Transaction,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.AbstractKahaDBStore$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:void storeNode(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.BTreeNode,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void split(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void promoteValue(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,long)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$6:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$15:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$6:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$RemoveOperation:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase$13:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$2:org.apache.activemq.command.SubscriptionInfo execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$2:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:long updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaAddMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$11:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase$AddOperation:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination getExistingStoredDestination(org.apache.activemq.store.kahadb.data.KahaDestination,org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$3:java.lang.Integer execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$3:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$4:org.apache.activemq.store.kahadb.disk.journal.Location execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$4:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$2:java.lang.Boolean execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$2:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaUpdateMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$12:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$7:org.apache.activemq.store.MessageStoreStatistics execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$7:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$6:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.springframework.jmx.access.MBeanClientInterceptor:java.lang.Object doInvoke(org.aopalliance.intercept.MethodInvocation)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.access.MBeanClientInterceptor:java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation)",
            "org.springframework.jmx.access.MBeanClientInterceptor:java.lang.Object handleConnectFailure(org.aopalliance.intercept.MethodInvocation,java.lang.Exception)"
        ]
    },
    "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor:boolean determineRequiredStatus(java.lang.annotation.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor:java.lang.reflect.Constructor[] determineCandidateConstructors(java.lang.Class,java.lang.String)",
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor:org.springframework.beans.factory.annotation.InjectionMetadata buildAutowiringMetadata(java.lang.Class)"
        ]
    },
    "org.springframework.beans.annotation.AnnotationBeanUtils:void copyPropertiesToBean(java.lang.annotation.Annotation,java.lang.Object,org.springframework.util.StringValueResolver,java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.annotation.AnnotationBeanUtils:void copyPropertiesToBean(java.lang.annotation.Annotation,java.lang.Object,java.lang.String[])",
            "org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource:org.springframework.jmx.export.metadata.ManagedResource getManagedResource(java.lang.Class)"
        ]
    },
    "org.springframework.core.io.VfsUtils:java.lang.String doGetPath(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.core.io.support.VfsPatternUtils:java.lang.String getPath(java.lang.Object)"
        ]
    },
    "org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver:java.lang.ClassLoader getThrowawayClassLoader()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.weaving.DefaultContextLoadTimeWeaver:java.lang.ClassLoader getThrowawayClassLoader()"
        ]
    },
    "org.springframework.core.io.support.PathMatchingResourcePatternResolver:org.springframework.core.io.Resource[] findPathMatchingResources(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.core.io.support.PathMatchingResourcePatternResolver:org.springframework.core.io.Resource[] getResources(java.lang.String)"
        ]
    },
    "org.springframework.context.weaving.DefaultContextLoadTimeWeaver:void addTransformer(java.lang.instrument.ClassFileTransformer)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.weaving.AspectJWeavingEnabler:void enableAspectJWeaving(org.springframework.instrument.classloading.LoadTimeWeaver,java.lang.ClassLoader)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl$PListIteratorImpl:boolean hasNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl$9:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object get(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void addAckLocation(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.Long,java.lang.String)",
            "org.apache.activemq.store.kahadb.MessageDatabase:long getStoredMessageCount(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void removeAckLocation(org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String,java.lang.Long)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void addAckLocationForNewMessage(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.Long)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void addAckLocation(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.Long,java.lang.String)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void removeAckLocation(org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String,java.lang.Long)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void addAckLocationForRetroactiveSub(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void addAckLocationForNewMessage(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.Long)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:boolean containsKey(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode$ListIterator:void moveToRequestedStart(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListNode$ListIterator:void <init>(org.apache.activemq.store.kahadb.disk.index.ListNode,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.ListNode,long)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void addAckLocationForRetroactiveSub(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl$7:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void removeAckLocationsForSub(org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl$PListIteratorImpl:void <init>(org.apache.activemq.store.kahadb.plist.PListImpl)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListImpl:org.apache.activemq.store.PList$PListIterator iterator()"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl$6:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void addAckLocation(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.Long,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void addAckLocationForNewMessage(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.Long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:long updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaAddMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl$8:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$1:org.apache.activemq.util.ByteSequence execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$1:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$6:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$4:java.lang.Long execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$4:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void upadateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaAddMessageCommand,org.apache.activemq.util.ByteSequence)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void access$000(org.apache.activemq.store.kahadb.TempMessageDatabase,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaAddMessageCommand,org.apache.activemq.util.ByteSequence)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$2:org.apache.activemq.command.SubscriptionInfo execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$2:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$5:java.lang.Integer execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$5:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$3:java.lang.Integer execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$3:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void access$100(org.apache.activemq.store.kahadb.TempMessageDatabase,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void access$300(org.apache.activemq.store.kahadb.TempMessageDatabase,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MetadataMarshaller:void writePayload(org.apache.activemq.store.kahadb.MessageDatabase$Metadata,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$MetadataMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$LocationSizeMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender:void access$000(org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender,org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender$WriteBatch:void <init>(org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender,org.apache.activemq.store.kahadb.disk.journal.DataFile,int,org.apache.activemq.store.kahadb.disk.journal.Journal$WriteCommand)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.util.SequenceSet$Marshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListNode$NodeMarshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.ListNode,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.PageFile:void storeFreeList()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.PageFile:void unload()"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.HashBin$Marshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void store(org.apache.activemq.store.kahadb.disk.page.Page,org.apache.activemq.store.kahadb.disk.util.Marshaller,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$HashSetStringMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.PageFile:org.apache.activemq.store.kahadb.disk.page.Page allocate(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:org.apache.activemq.store.kahadb.disk.page.Page allocate(int)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex$Metadata$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.HashIndex$Metadata,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.HashIndex$Metadata$Marshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.journal.DataFileAppender$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$MetaDataMarshaller:void writePayload(org.apache.activemq.store.kahadb.scheduler.JobSchedulerKahaDBMetaData,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$MetaDataMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase$ByteSequenceMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.util.LocationMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListNode$NodeMarshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.ListNode,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobLocationsMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.util.IntegerMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender:boolean access$100(org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender,org.apache.activemq.store.kahadb.disk.journal.Journal$WriteCommand,org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender$WriteBatch:void append(org.apache.activemq.store.kahadb.disk.journal.Journal$WriteCommand)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerImpl$ValueMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerKahaDBMetaData$IntegerListMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$LastAckMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void store(org.apache.activemq.store.kahadb.disk.page.Page,org.apache.activemq.store.kahadb.disk.util.Marshaller,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestinationMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerKahaDBMetaData$JobSchedulerMarshaller:void writePayload(org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerKahaDBMetaData$JobSchedulerMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.util.StringMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.index.ListNode$NodeMarshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.ListNode,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase$MessageKeysMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerStoreImpl$JobSchedulerMarshaller:void writePayload(org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerImpl,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerStoreImpl$JobSchedulerMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageKeysMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.util.LongMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl$MetaDataMarshaller:void writePayload(org.apache.activemq.store.kahadb.plist.PListStoreImpl$MetaData,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$MetaDataMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode$NodeMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void store(org.apache.activemq.store.kahadb.disk.page.Page,org.apache.activemq.store.kahadb.disk.util.Marshaller,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerStoreImpl$MetaDataMarshaller:void writePayload(org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerStoreImpl$MetaData,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerStoreImpl$MetaDataMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl$PListMarshaller:void writePayload(org.apache.activemq.store.kahadb.plist.PListImpl,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$PListMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode$BTreeIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempKahaDBStore$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$MetaData:void loadLists(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Map)",
            "org.apache.activemq.store.kahadb.MessageDatabase$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex$MessageOrderIterator:java.util.Map$Entry next()",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void getDeleteList(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.ArrayList,org.apache.activemq.store.kahadb.disk.index.BTreeIndex,java.lang.Long)",
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void process(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveScheduledJobCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void checkpointUpdate(org.apache.activemq.store.kahadb.disk.page.Transaction,boolean)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$5:java.lang.Integer execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$3:java.lang.Integer execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void removeJournalRCForMissingFiles(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Set)",
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerImpl$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerImpl$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerStoreImpl$MetaData:void loadScheduler(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Map)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void removeInRange(org.apache.activemq.store.kahadb.disk.page.Transaction,long,long,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:java.util.List getAllScheduledJobs(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void recoverIndex(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void removeAckByteSequence(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination,java.lang.String,java.lang.Long)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:int removeJobsInMissingOrCorruptJounralFiles(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Set,java.util.Set)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerKahaDBMetaData:void loadScheduler(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Map)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$7:org.apache.activemq.store.MessageStoreStatistics execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void process(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveScheduledJobCommand,org.apache.activemq.store.kahadb.disk.journal.Location)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$8$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void removeJournalRCForMissingFiles(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void recoverIndex(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex$MessageOrderIterator:boolean hasNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerImpl$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerImpl$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void removeInRange(org.apache.activemq.store.kahadb.disk.page.Transaction,long,long,org.apache.activemq.store.kahadb.disk.journal.Location)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void removeAll(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void process(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveScheduledJobsCommand,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:java.util.List getAllScheduledJobs(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:int removeJobsInMissingOrCorruptJounralFiles(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Set,java.util.Set)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void recoverIndex(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void recoverIndex(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void access$1200(org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl,org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void removeAckByteSequence(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination,java.lang.String,java.lang.Long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:int removeJobsInMissingOrCorruptJounralFiles(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Set,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void recoverIndex(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:boolean contains(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:boolean contains(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:boolean containsKey(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.lang.Object get(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.lang.Object get(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.lang.Object get(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void addLast(java.util.TreeSet,org.apache.activemq.store.kahadb.disk.index.BTreeIndex,org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void configureLast(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:boolean removeJobAtTime(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:int removeJobsInMissingOrCorruptJounralFiles(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Set,java.util.Set)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void recoverIndex(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void decrementJournalCount(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.journal.Location)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void process(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveScheduledJobCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void removeInRange(org.apache.activemq.store.kahadb.disk.page.Transaction,long,long,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:boolean removeJobAtTime(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,long)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void process(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRescheduleJobCommand,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:org.apache.activemq.store.kahadb.MessageDatabase$MessageKeys remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void removeAckLocation(org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String,java.lang.Long)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void removeAckLocationsForSub(org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void process(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaAddScheduledJobCommand,org.apache.activemq.store.kahadb.disk.journal.Location)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$8$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void process(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRescheduleJobCommand,org.apache.activemq.store.kahadb.disk.journal.Location)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$8$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void removeAckLocation(org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String,java.lang.Long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:org.apache.activemq.store.kahadb.MessageDatabase$MessageKeys get(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:int recoverRolledBackAcks(org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,org.apache.activemq.store.kahadb.disk.page.Transaction,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase:long updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaAddMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.KahaDBStore$4:org.apache.activemq.store.kahadb.disk.journal.Location execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void incrementJournalCount(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.journal.Location)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void process(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaAddScheduledJobCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void process(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRescheduleJobCommand,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$LastAck getLastAck(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$3:java.lang.Integer execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void referenceRemovedLocation(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.scheduler.JobLocation)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void process(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveScheduledJobCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void removeInRange(org.apache.activemq.store.kahadb.disk.page.Transaction,long,long,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex$MessageOrderIterator:void <init>(org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderCursor,org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderCursor)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void getDeleteList(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.ArrayList,org.apache.activemq.store.kahadb.disk.index.BTreeIndex,java.lang.Long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void getDeleteList(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.ArrayList,java.lang.Long)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:java.util.Map$Entry getNextToSchedule()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void mainLoop()"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerImpl:long getNextScheduleTime()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:long getNextScheduleTime()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:org.apache.activemq.store.kahadb.MessageDatabase$MessageKeys put(org.apache.activemq.store.kahadb.disk.page.Transaction,int,java.lang.Long,org.apache.activemq.store.kahadb.MessageDatabase$MessageKeys)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaUpdateMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase:long updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaAddMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void getDeleteList(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.ArrayList,java.lang.Long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void removeAckLocation(org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String,java.lang.Long)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void removeAckLocationsForSub(org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode:void store(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListNode:void access$500(org.apache.activemq.store.kahadb.disk.index.ListNode,org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.AbstractKahaDBStore$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void split(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void promoteValue(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,long)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void promoteValue(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void split(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$RemoveOperation:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$13:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$2:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction$CallableClosure)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$11:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$AddOperation:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$3:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction$CallableClosure)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$4:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction$CallableClosure)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$2:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction$CallableClosure)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$12:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$7:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction$CallableClosure)"
        ]
    },
    "org.springframework.jmx.access.MBeanClientInterceptor:java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.jmx.access.MBeanClientInterceptor:java.lang.Object handleConnectFailure(org.aopalliance.intercept.MethodInvocation,java.lang.Exception)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.access.MBeanClientInterceptor:java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation)"
        ]
    },
    "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor:java.lang.reflect.Constructor[] determineCandidateConstructors(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor:org.springframework.beans.factory.annotation.InjectionMetadata buildAutowiringMetadata(java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor:org.springframework.beans.factory.annotation.InjectionMetadata findAutowiringMetadata(java.lang.String,java.lang.Class)"
        ]
    },
    "org.springframework.beans.annotation.AnnotationBeanUtils:void copyPropertiesToBean(java.lang.annotation.Annotation,java.lang.Object,java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource:org.springframework.jmx.export.metadata.ManagedOperation getManagedOperation(java.lang.reflect.Method)",
            "org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource:org.springframework.jmx.export.metadata.ManagedOperationParameter[] getManagedOperationParameters(java.lang.reflect.Method)",
            "org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource:org.springframework.jmx.export.metadata.ManagedNotification[] getManagedNotifications(java.lang.Class)",
            "org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource:org.springframework.jmx.export.metadata.ManagedMetric getManagedMetric(java.lang.reflect.Method)",
            "org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource:org.springframework.jmx.export.metadata.ManagedAttribute getManagedAttribute(java.lang.reflect.Method)"
        ]
    },
    "org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource:org.springframework.jmx.export.metadata.ManagedResource getManagedResource(java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:boolean includeBean(java.lang.Class,java.lang.String)",
            "org.springframework.jmx.export.naming.MetadataNamingStrategy:javax.management.ObjectName getObjectName(java.lang.Object,java.lang.String)",
            "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:java.lang.String getDescription(java.lang.Object,java.lang.String)",
            "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:void populateMBeanDescriptor(javax.management.Descriptor,java.lang.Object,java.lang.String)"
        ]
    },
    "org.springframework.core.io.support.VfsPatternUtils:java.lang.String getPath(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.core.io.support.PathMatchingResourcePatternResolver$VfsResourceMatchingDelegate:java.util.Set findMatchingResources(org.springframework.core.io.Resource,java.lang.String,org.springframework.util.PathMatcher)",
            "org.springframework.core.io.support.PathMatchingResourcePatternResolver$PatternVirtualFileVisitor:void visit(java.lang.Object)"
        ]
    },
    "org.springframework.context.weaving.DefaultContextLoadTimeWeaver:java.lang.ClassLoader getThrowawayClassLoader()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.core.io.support.PathMatchingResourcePatternResolver:org.springframework.core.io.Resource[] getResources(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider:java.util.Set findCandidateComponents(java.lang.String)",
            "org.springframework.core.io.support.ResourceArrayPropertyEditor:void setAsText(java.lang.String)",
            "org.springframework.beans.factory.support.AbstractBeanDefinitionReader:int loadBeanDefinitions(java.lang.String,java.util.Set)",
            "org.springframework.beans.factory.access.SingletonBeanFactoryLocator:org.springframework.beans.factory.BeanFactory createDefinition(java.lang.String,java.lang.String)",
            "org.springframework.core.io.support.PathMatchingResourcePatternResolver:org.springframework.core.io.Resource[] findPathMatchingResources(java.lang.String)",
            "org.springframework.context.support.AbstractApplicationContext:org.springframework.core.io.Resource[] getResources(java.lang.String)",
            "org.springframework.core.io.support.ResourceArrayPropertyEditor:void setValue(java.lang.Object)"
        ]
    },
    "org.springframework.context.weaving.AspectJWeavingEnabler:void enableAspectJWeaving(org.springframework.instrument.classloading.LoadTimeWeaver,java.lang.ClassLoader)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.annotation.LoadTimeWeavingConfiguration:org.springframework.instrument.classloading.LoadTimeWeaver loadTimeWeaver()",
            "org.springframework.context.weaving.AspectJWeavingEnabler:void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:long getStoredMessageCount(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$3:java.lang.Integer execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode$ListIterator:void <init>(org.apache.activemq.store.kahadb.disk.index.ListNode,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.ListNode,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListNode$ListIterator:void <init>(org.apache.activemq.store.kahadb.disk.index.ListNode,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.ListNode,long,org.apache.activemq.store.kahadb.disk.index.ListNode$1)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl:org.apache.activemq.store.PList$PListIterator iterator()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$1:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction$CallableClosure)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$4:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction$CallableClosure)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void access$000(org.apache.activemq.store.kahadb.TempMessageDatabase,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaAddMessageCommand,org.apache.activemq.util.ByteSequence)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase$AddOpperation:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$2:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction$CallableClosure)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$5:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction$CallableClosure)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$3:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction$CallableClosure)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void access$100(org.apache.activemq.store.kahadb.TempMessageDatabase,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase$RemoveOpperation:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void access$300(org.apache.activemq.store.kahadb.TempMessageDatabase,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MetadataMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void store(org.apache.activemq.store.kahadb.disk.page.Page,org.apache.activemq.store.kahadb.disk.util.Marshaller,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender$WriteBatch:void <init>(org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender,org.apache.activemq.store.kahadb.disk.journal.DataFile,int,org.apache.activemq.store.kahadb.disk.journal.Journal$WriteCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender:org.apache.activemq.store.kahadb.disk.journal.DataFileAppender$WriteBatch newWriteBatch(org.apache.activemq.store.kahadb.disk.journal.Journal$WriteCommand,org.apache.activemq.store.kahadb.disk.journal.DataFile)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.PageFile:void unload()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void load()",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void unload()",
            "org.apache.activemq.store.kahadb.MessageDatabase:void open()",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void close()",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void load()",
            "org.apache.activemq.store.kahadb.MessageDatabase:void close()",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerStoreImpl:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void upgradeFromLegacy()"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction:org.apache.activemq.store.kahadb.disk.page.Page allocate(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.page.Transaction:org.apache.activemq.store.kahadb.disk.page.Page allocate()",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:void resize(org.apache.activemq.store.kahadb.disk.page.Transaction,int)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex$Metadata$Marshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void store(org.apache.activemq.store.kahadb.disk.page.Page,org.apache.activemq.store.kahadb.disk.util.Marshaller,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$MetaDataMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void store(org.apache.activemq.store.kahadb.disk.page.Page,org.apache.activemq.store.kahadb.disk.util.Marshaller,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender$WriteBatch:void append(org.apache.activemq.store.kahadb.disk.journal.Journal$WriteCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.journal.DataFileAppender:org.apache.activemq.store.kahadb.disk.journal.DataFileAppender$WriteBatch enqueue(org.apache.activemq.store.kahadb.disk.journal.Journal$WriteCommand)",
            "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender$WriteBatch:void <init>(org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender,org.apache.activemq.store.kahadb.disk.journal.DataFile,int,org.apache.activemq.store.kahadb.disk.journal.Journal$WriteCommand)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerKahaDBMetaData$JobSchedulerMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerStoreImpl$JobSchedulerMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl$MetaDataMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void store(org.apache.activemq.store.kahadb.disk.page.Page,org.apache.activemq.store.kahadb.disk.util.Marshaller,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerStoreImpl$MetaDataMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void store(org.apache.activemq.store.kahadb.disk.page.Page,org.apache.activemq.store.kahadb.disk.util.Marshaller,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl$PListMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex$MessageOrderIterator:java.util.Map$Entry next()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex$MessageOrderIterator:java.lang.Object next()"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$8$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void removeAll(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void process(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveScheduledJobsCommand,org.apache.activemq.store.kahadb.disk.journal.Location)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$8$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void access$1200(org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl,org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$9:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void configureLast(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$8$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$8$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderCursor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode:void access$500(org.apache.activemq.store.kahadb.disk.index.ListNode,org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListNode$ListIterator:void remove()"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction$CallableClosure)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:boolean isEmpty()",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore:void recoverMessageStoreStatistics()",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void recoverMessageStoreStatistics()",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore:void setBatch(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadb.KahaDBStore:org.apache.activemq.store.kahadb.disk.journal.Location findMessageLocation(java.lang.String,org.apache.activemq.store.kahadb.data.KahaDestination)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)"
        ]
    },
    "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor:org.springframework.beans.factory.annotation.InjectionMetadata findAutowiringMetadata(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor:void processInjection(java.lang.Object)",
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor:void postProcessMergedBeanDefinition(org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Class,java.lang.String)",
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor:org.springframework.beans.PropertyValues postProcessPropertyValues(org.springframework.beans.PropertyValues,java.beans.PropertyDescriptor[],java.lang.Object,java.lang.String)"
        ]
    },
    "org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource:org.springframework.jmx.export.metadata.ManagedOperation getManagedOperation(java.lang.reflect.Method)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:java.lang.String getOperationDescription(java.lang.reflect.Method,java.lang.String)",
            "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:void populateOperationDescriptor(javax.management.Descriptor,java.lang.reflect.Method,java.lang.String)",
            "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:boolean hasManagedOperation(java.lang.reflect.Method)"
        ]
    },
    "org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource:org.springframework.jmx.export.metadata.ManagedOperationParameter[] getManagedOperationParameters(java.lang.reflect.Method)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:javax.management.MBeanParameterInfo[] getOperationParameters(java.lang.reflect.Method,java.lang.String)"
        ]
    },
    "org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource:org.springframework.jmx.export.metadata.ManagedNotification[] getManagedNotifications(java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:javax.management.modelmbean.ModelMBeanNotificationInfo[] getNotificationInfo(java.lang.Object,java.lang.String)"
        ]
    },
    "org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource:org.springframework.jmx.export.metadata.ManagedMetric getManagedMetric(java.lang.reflect.Method)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:java.lang.String getOperationDescription(java.lang.reflect.Method,java.lang.String)",
            "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:void populateAttributeDescriptor(javax.management.Descriptor,java.lang.reflect.Method,java.lang.reflect.Method,java.lang.String)",
            "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:boolean hasManagedMetric(java.lang.reflect.Method)",
            "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:java.lang.String getAttributeDescription(java.beans.PropertyDescriptor,java.lang.String)"
        ]
    },
    "org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource:org.springframework.jmx.export.metadata.ManagedAttribute getManagedAttribute(java.lang.reflect.Method)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:java.lang.String getOperationDescription(java.lang.reflect.Method,java.lang.String)",
            "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:void populateAttributeDescriptor(javax.management.Descriptor,java.lang.reflect.Method,java.lang.reflect.Method,java.lang.String)",
            "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:boolean hasManagedAttribute(java.lang.reflect.Method)",
            "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:java.lang.String getAttributeDescription(java.beans.PropertyDescriptor,java.lang.String)"
        ]
    },
    "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:boolean includeBean(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.MBeanExporter$1:boolean include(java.lang.Class,java.lang.String)"
        ]
    },
    "org.springframework.jmx.export.naming.MetadataNamingStrategy:javax.management.ObjectName getObjectName(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.MBeanExporter:javax.management.ObjectName getObjectName(java.lang.Object,java.lang.String)"
        ]
    },
    "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:java.lang.String getDescription(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler:javax.management.modelmbean.ModelMBeanInfo getMBeanInfo(java.lang.Object,java.lang.String)"
        ]
    },
    "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:void populateMBeanDescriptor(javax.management.Descriptor,java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler:javax.management.modelmbean.ModelMBeanInfo getMBeanInfo(java.lang.Object,java.lang.String)"
        ]
    },
    "org.springframework.core.io.support.PathMatchingResourcePatternResolver$VfsResourceMatchingDelegate:java.util.Set findMatchingResources(org.springframework.core.io.Resource,java.lang.String,org.springframework.util.PathMatcher)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.core.io.support.PathMatchingResourcePatternResolver:org.springframework.core.io.Resource[] findPathMatchingResources(java.lang.String)"
        ]
    },
    "org.springframework.core.io.support.PathMatchingResourcePatternResolver$PatternVirtualFileVisitor:void visit(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.core.io.support.PathMatchingResourcePatternResolver$PatternVirtualFileVisitor:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])"
        ]
    },
    "org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider:java.util.Set findCandidateComponents(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.annotation.ClassPathBeanDefinitionScanner:java.util.Set doScan(java.lang.String[])"
        ]
    },
    "org.springframework.core.io.support.ResourceArrayPropertyEditor:void setAsText(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.beans.factory.support.AbstractBeanDefinitionReader:int loadBeanDefinitions(java.lang.String,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader:void importBeanDefinitionResource(org.w3c.dom.Element)",
            "org.springframework.beans.factory.support.AbstractBeanDefinitionReader:int loadBeanDefinitions(java.lang.String)"
        ]
    },
    "org.springframework.beans.factory.access.SingletonBeanFactoryLocator:org.springframework.beans.factory.BeanFactory createDefinition(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.access.SingletonBeanFactoryLocator:org.springframework.beans.factory.access.BeanFactoryReference useBeanFactory(java.lang.String)"
        ]
    },
    "org.springframework.context.support.AbstractApplicationContext:org.springframework.core.io.Resource[] getResources(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider:java.util.Set findCandidateComponents(java.lang.String)",
            "org.springframework.core.io.support.ResourceArrayPropertyEditor:void setAsText(java.lang.String)",
            "org.springframework.beans.factory.support.AbstractBeanDefinitionReader:int loadBeanDefinitions(java.lang.String,java.util.Set)",
            "org.springframework.context.support.GenericApplicationContext:org.springframework.core.io.Resource[] getResources(java.lang.String)",
            "org.springframework.core.io.support.ResourceArrayPropertyEditor:void setValue(java.lang.Object)"
        ]
    },
    "org.springframework.core.io.support.ResourceArrayPropertyEditor:void setValue(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.core.io.support.ResourceArrayPropertyEditor:void setAsText(java.lang.String)"
        ]
    },
    "org.springframework.context.annotation.LoadTimeWeavingConfiguration:org.springframework.instrument.classloading.LoadTimeWeaver loadTimeWeaver()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.context.weaving.AspectJWeavingEnabler:void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode$ListIterator:void <init>(org.apache.activemq.store.kahadb.disk.index.ListNode,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.ListNode,long,org.apache.activemq.store.kahadb.disk.index.ListNode$1)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListNode:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction,long)",
            "org.apache.activemq.store.kahadb.disk.index.ListNode:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase$AddOpperation:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase$RemoveOpperation:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender:org.apache.activemq.store.kahadb.disk.journal.DataFileAppender$WriteBatch newWriteBatch(org.apache.activemq.store.kahadb.disk.journal.Journal$WriteCommand,org.apache.activemq.store.kahadb.disk.journal.DataFile)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.journal.DataFileAppender:org.apache.activemq.store.kahadb.disk.journal.DataFileAppender$WriteBatch enqueue(org.apache.activemq.store.kahadb.disk.journal.Journal$WriteCommand)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void unload()"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerStoreImpl:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void stop()"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction:org.apache.activemq.store.kahadb.disk.page.Page allocate()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$MetaData:void createIndexes(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:org.apache.activemq.store.kahadb.disk.index.BTreeNode createNode(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.BTreeNode)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void createIndexes(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerStoreImpl$MetaData:void createIndexes(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:org.apache.activemq.store.kahadb.disk.index.ListNode createNode(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerStoreImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.page.Transaction$1:void onWrite()",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerKahaDBMetaData:void initialize(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void allocate(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerImpl:void createIndexes(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.journal.DataFileAppender:org.apache.activemq.store.kahadb.disk.journal.DataFileAppender$WriteBatch enqueue(org.apache.activemq.store.kahadb.disk.journal.Journal$WriteCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.journal.DataFileAppender:org.apache.activemq.store.kahadb.disk.journal.Location storeItem(org.apache.activemq.util.ByteSequence,byte,boolean)",
            "org.apache.activemq.store.kahadb.disk.journal.DataFileAppender:org.apache.activemq.store.kahadb.disk.journal.Location storeItem(org.apache.activemq.util.ByteSequence,byte,java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex$MessageOrderIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$8$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$9:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:boolean isEmpty()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyMessageStore:boolean isEmpty()",
            "org.apache.activemq.store.ProxyTopicMessageStore:boolean isEmpty()"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore:void recoverMessageStoreStatistics()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void recoverMessageStoreStatistics()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.AbstractMessageStore:void start()"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore:void setBatch(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBStore:org.apache.activemq.store.kahadb.disk.journal.Location findMessageLocation(java.lang.String,org.apache.activemq.store.kahadb.data.KahaDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore:org.apache.activemq.store.kahadb.disk.journal.Location access$300(org.apache.activemq.store.kahadb.KahaDBStore,java.lang.String,org.apache.activemq.store.kahadb.data.KahaDestination)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)"
        ]
    },
    "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor:void processInjection(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.ejb.interceptor.SpringBeanAutowiringInterceptor:void doAutowireBean(java.lang.Object)"
        ]
    },
    "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor:void postProcessMergedBeanDefinition(org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor:org.springframework.beans.PropertyValues postProcessPropertyValues(org.springframework.beans.PropertyValues,java.beans.PropertyDescriptor[],java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:java.lang.String getOperationDescription(java.lang.reflect.Method,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler:javax.management.modelmbean.ModelMBeanOperationInfo createModelMBeanOperationInfo(java.lang.reflect.Method,java.lang.String,java.lang.String)"
        ]
    },
    "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:void populateOperationDescriptor(javax.management.Descriptor,java.lang.reflect.Method,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler:javax.management.modelmbean.ModelMBeanOperationInfo[] getOperationInfo(java.lang.Object,java.lang.String)"
        ]
    },
    "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:boolean hasManagedOperation(java.lang.reflect.Method)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:boolean includeOperation(java.lang.reflect.Method,java.lang.String)"
        ]
    },
    "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:javax.management.MBeanParameterInfo[] getOperationParameters(java.lang.reflect.Method,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler:javax.management.modelmbean.ModelMBeanOperationInfo createModelMBeanOperationInfo(java.lang.reflect.Method,java.lang.String,java.lang.String)"
        ]
    },
    "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:javax.management.modelmbean.ModelMBeanNotificationInfo[] getNotificationInfo(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler:javax.management.modelmbean.ModelMBeanInfo getMBeanInfo(java.lang.Object,java.lang.String)"
        ]
    },
    "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:void populateAttributeDescriptor(javax.management.Descriptor,java.lang.reflect.Method,java.lang.reflect.Method,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler:javax.management.modelmbean.ModelMBeanAttributeInfo[] getAttributeInfo(java.lang.Object,java.lang.String)"
        ]
    },
    "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:boolean hasManagedMetric(java.lang.reflect.Method)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:void populateAttributeDescriptor(javax.management.Descriptor,java.lang.reflect.Method,java.lang.reflect.Method,java.lang.String)",
            "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:boolean includeReadAttribute(java.lang.reflect.Method,java.lang.String)"
        ]
    },
    "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:java.lang.String getAttributeDescription(java.beans.PropertyDescriptor,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler:javax.management.modelmbean.ModelMBeanAttributeInfo[] getAttributeInfo(java.lang.Object,java.lang.String)"
        ]
    },
    "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:boolean hasManagedAttribute(java.lang.reflect.Method)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:boolean includeWriteAttribute(java.lang.reflect.Method,java.lang.String)",
            "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:boolean includeReadAttribute(java.lang.reflect.Method,java.lang.String)",
            "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:boolean includeOperation(java.lang.reflect.Method,java.lang.String)"
        ]
    },
    "org.springframework.jmx.export.MBeanExporter$1:boolean include(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.MBeanExporter:void autodetect(org.springframework.jmx.export.MBeanExporter$AutodetectCallback)"
        ]
    },
    "org.springframework.jmx.export.MBeanExporter:javax.management.ObjectName getObjectName(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.MBeanExporter:javax.management.ObjectName registerManagedResource(java.lang.Object)",
            "org.springframework.jmx.export.MBeanExporter:javax.management.ObjectName registerLazyInit(java.lang.String,java.lang.String)",
            "org.springframework.jmx.export.MBeanExporter:javax.management.ObjectName registerBeanInstance(java.lang.Object,java.lang.String)"
        ]
    },
    "org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler:javax.management.modelmbean.ModelMBeanInfo getMBeanInfo(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.MBeanExporter:javax.management.modelmbean.ModelMBeanInfo getMBeanInfo(java.lang.Object,java.lang.String)"
        ]
    },
    "org.springframework.core.io.support.PathMatchingResourcePatternResolver$PatternVirtualFileVisitor:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.context.annotation.ClassPathBeanDefinitionScanner:java.util.Set doScan(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.annotation.ClassPathBeanDefinitionScanner:int scan(java.lang.String[])",
            "org.springframework.context.annotation.ComponentScanAnnotationParser:java.util.Set parse(org.springframework.core.annotation.AnnotationAttributes,java.lang.String)",
            "org.springframework.context.annotation.ComponentScanBeanDefinitionParser:org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)"
        ]
    },
    "org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader:void importBeanDefinitionResource(org.w3c.dom.Element)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader:void parseDefaultElement(org.w3c.dom.Element,org.springframework.beans.factory.xml.BeanDefinitionParserDelegate)"
        ]
    },
    "org.springframework.beans.factory.support.AbstractBeanDefinitionReader:int loadBeanDefinitions(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.xbean.spring.context.v2.XBeanBeanDefinitionDocumentReader:void importBeanDefinitionResource(org.w3c.dom.Element)",
            "org.springframework.beans.factory.support.AbstractBeanDefinitionReader:int loadBeanDefinitions(java.lang.String[])"
        ]
    },
    "org.springframework.beans.factory.access.SingletonBeanFactoryLocator:org.springframework.beans.factory.access.BeanFactoryReference useBeanFactory(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.ejb.interceptor.SpringBeanAutowiringInterceptor:org.springframework.beans.factory.access.BeanFactoryReference getBeanFactoryReference(java.lang.Object)"
        ]
    },
    "org.springframework.context.support.GenericApplicationContext:org.springframework.core.io.Resource[] getResources(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider:java.util.Set findCandidateComponents(java.lang.String)",
            "org.springframework.core.io.support.ResourceArrayPropertyEditor:void setAsText(java.lang.String)",
            "org.springframework.beans.factory.support.AbstractBeanDefinitionReader:int loadBeanDefinitions(java.lang.String,java.util.Set)",
            "org.springframework.core.io.support.ResourceArrayPropertyEditor:void setValue(java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction,long)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void unload()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void stop()"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl$MetaData:void createIndexes(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:org.apache.activemq.store.kahadb.disk.index.BTreeNode createNode(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.BTreeNode)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void split(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void createIndexes(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerStoreImpl$MetaData:void createIndexes(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerStoreImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerKahaDBMetaData:void initialize(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void allocate(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerImpl:void createIndexes(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.journal.DataFileAppender:org.apache.activemq.store.kahadb.disk.journal.Location storeItem(org.apache.activemq.util.ByteSequence,byte,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.journal.Journal:org.apache.activemq.store.kahadb.disk.journal.Location write(org.apache.activemq.util.ByteSequence,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.journal.DataFileAppender:org.apache.activemq.store.kahadb.disk.journal.Location storeItem(org.apache.activemq.util.ByteSequence,byte,java.lang.Runnable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.journal.Journal:org.apache.activemq.store.kahadb.disk.journal.Location write(org.apache.activemq.util.ByteSequence,java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.store.ProxyMessageStore:boolean isEmpty()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:boolean isStoreEmpty()"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:boolean isEmpty()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:boolean isStoreEmpty()",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:boolean isStoreEmpty()"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void replayAcknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)"
        ]
    },
    "org.apache.activemq.store.AbstractMessageStore:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:void start()",
            "org.apache.activemq.store.ProxyMessageStore:void start()",
            "org.apache.activemq.broker.region.Topic:void initialize()",
            "org.apache.activemq.store.ProxyTopicMessageStore:void start()",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void start()",
            "org.apache.activemq.broker.region.Queue:void initialize()"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore:org.apache.activemq.store.kahadb.disk.journal.Location access$300(org.apache.activemq.store.kahadb.KahaDBStore,java.lang.String,org.apache.activemq.store.kahadb.data.KahaDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:int getStoreSize()"
        ]
    },
    "org.springframework.ejb.interceptor.SpringBeanAutowiringInterceptor:void doAutowireBean(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.ejb.interceptor.SpringBeanAutowiringInterceptor:void autowireBean(javax.interceptor.InvocationContext)"
        ]
    },
    "org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler:javax.management.modelmbean.ModelMBeanOperationInfo createModelMBeanOperationInfo(java.lang.reflect.Method,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler:javax.management.modelmbean.ModelMBeanOperationInfo[] getOperationInfo(java.lang.Object,java.lang.String)"
        ]
    },
    "org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler:javax.management.modelmbean.ModelMBeanOperationInfo[] getOperationInfo(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler:javax.management.modelmbean.ModelMBeanInfo getMBeanInfo(java.lang.Object,java.lang.String)"
        ]
    },
    "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:boolean includeOperation(java.lang.reflect.Method,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler:javax.management.modelmbean.ModelMBeanOperationInfo[] getOperationInfo(java.lang.Object,java.lang.String)"
        ]
    },
    "org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler:javax.management.modelmbean.ModelMBeanAttributeInfo[] getAttributeInfo(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler:javax.management.modelmbean.ModelMBeanInfo getMBeanInfo(java.lang.Object,java.lang.String)"
        ]
    },
    "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:boolean includeReadAttribute(java.lang.reflect.Method,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler:javax.management.modelmbean.ModelMBeanAttributeInfo[] getAttributeInfo(java.lang.Object,java.lang.String)",
            "org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler:javax.management.modelmbean.ModelMBeanOperationInfo[] getOperationInfo(java.lang.Object,java.lang.String)"
        ]
    },
    "org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler:boolean includeWriteAttribute(java.lang.reflect.Method,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler:javax.management.modelmbean.ModelMBeanAttributeInfo[] getAttributeInfo(java.lang.Object,java.lang.String)",
            "org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler:javax.management.modelmbean.ModelMBeanOperationInfo[] getOperationInfo(java.lang.Object,java.lang.String)"
        ]
    },
    "org.springframework.jmx.export.MBeanExporter:void autodetect(org.springframework.jmx.export.MBeanExporter$AutodetectCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.MBeanExporter:void autodetectMBeans()",
            "org.springframework.jmx.export.MBeanExporter:void autodetectBeans(org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler)"
        ]
    },
    "org.springframework.jmx.export.MBeanExporter:javax.management.ObjectName registerManagedResource(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.jmx.export.MBeanExporter:javax.management.ObjectName registerLazyInit(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.MBeanExporter:javax.management.ObjectName registerBeanNameOrInstance(java.lang.Object,java.lang.String)"
        ]
    },
    "org.springframework.jmx.export.MBeanExporter:javax.management.ObjectName registerBeanInstance(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.MBeanExporter:javax.management.ObjectName registerBeanNameOrInstance(java.lang.Object,java.lang.String)"
        ]
    },
    "org.springframework.jmx.export.MBeanExporter:javax.management.modelmbean.ModelMBeanInfo getMBeanInfo(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.MBeanExporter:javax.management.modelmbean.ModelMBean createAndConfigureMBean(java.lang.Object,java.lang.String)"
        ]
    },
    "org.springframework.context.annotation.ClassPathBeanDefinitionScanner:int scan(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.annotation.AnnotationConfigApplicationContext:void scan(java.lang.String[])"
        ]
    },
    "org.springframework.context.annotation.ComponentScanAnnotationParser:java.util.Set parse(org.springframework.core.annotation.AnnotationAttributes,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.annotation.ConfigurationClassParser:org.springframework.core.type.AnnotationMetadata doProcessConfigurationClass(org.springframework.context.annotation.ConfigurationClass,org.springframework.core.type.AnnotationMetadata)"
        ]
    },
    "org.springframework.context.annotation.ComponentScanBeanDefinitionParser:org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader:void parseDefaultElement(org.w3c.dom.Element,org.springframework.beans.factory.xml.BeanDefinitionParserDelegate)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader:void parseBeanDefinitions(org.w3c.dom.Element,org.springframework.beans.factory.xml.BeanDefinitionParserDelegate)"
        ]
    },
    "org.apache.xbean.spring.context.v2.XBeanBeanDefinitionDocumentReader:void importBeanDefinitionResource(org.w3c.dom.Element)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader:void parseDefaultElement(org.w3c.dom.Element,org.springframework.beans.factory.xml.BeanDefinitionParserDelegate)",
            "org.apache.xbean.spring.context.v2.XBeanBeanDefinitionDocumentReader:void parseDefaultElement(org.w3c.dom.Element,org.springframework.beans.factory.xml.BeanDefinitionParserDelegate)"
        ]
    },
    "org.springframework.beans.factory.support.AbstractBeanDefinitionReader:int loadBeanDefinitions(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.AbstractXmlApplicationContext:void loadBeanDefinitions(org.springframework.beans.factory.xml.XmlBeanDefinitionReader)",
            "org.springframework.context.support.GenericXmlApplicationContext:void load(java.lang.String[])"
        ]
    },
    "org.springframework.ejb.interceptor.SpringBeanAutowiringInterceptor:org.springframework.beans.factory.access.BeanFactoryReference getBeanFactoryReference(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.ejb.interceptor.SpringBeanAutowiringInterceptor:org.springframework.beans.factory.BeanFactory getBeanFactory(java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.journal.Journal:org.apache.activemq.store.kahadb.disk.journal.Location write(org.apache.activemq.util.ByteSequence,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand)",
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand,boolean,org.apache.activemq.store.kahadb.MessageDatabase$IndexAware,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerStoreImpl:org.apache.activemq.store.kahadb.disk.journal.Location write(org.apache.activemq.util.ByteSequence,boolean)",
            "org.apache.activemq.store.kahadb.AbstractKahaDBStore:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand,boolean,java.lang.Runnable,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl:org.apache.activemq.store.kahadb.disk.journal.Location write(org.apache.activemq.util.ByteSequence,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.journal.Journal:org.apache.activemq.store.kahadb.disk.journal.Location write(org.apache.activemq.util.ByteSequence,java.lang.Runnable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand,boolean,org.apache.activemq.store.kahadb.MessageDatabase$IndexAware,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.disk.journal.Location checkpointSubscriptionCommand(org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand)",
            "org.apache.activemq.store.kahadb.AbstractKahaDBStore:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand,boolean,java.lang.Runnable,java.lang.Runnable,java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:boolean isStoreEmpty()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:boolean isStoreEmpty()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.journal.JournalMessageStore:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyMessageStore:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:void start()",
            "org.apache.activemq.broker.region.Topic:void initialize()",
            "org.apache.activemq.broker.region.Queue:void initialize()"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void initialize()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:void start()",
            "org.apache.activemq.broker.region.Topic:void initialize()",
            "org.apache.activemq.broker.region.Queue:void initialize()"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyMessageStore:void start()",
            "org.apache.activemq.store.ProxyTopicMessageStore:void start()"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.ProxyMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:int getStoreSize()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void resetSize()"
        ]
    },
    "org.springframework.ejb.interceptor.SpringBeanAutowiringInterceptor:void autowireBean(javax.interceptor.InvocationContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.jmx.export.MBeanExporter:void autodetectMBeans()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.MBeanExporter:void registerBeans()"
        ]
    },
    "org.springframework.jmx.export.MBeanExporter:void autodetectBeans(org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.MBeanExporter:void registerBeans()"
        ]
    },
    "org.springframework.jmx.export.MBeanExporter:javax.management.ObjectName registerBeanNameOrInstance(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.MBeanExporter:void registerBeans()"
        ]
    },
    "org.springframework.jmx.export.MBeanExporter:javax.management.modelmbean.ModelMBean createAndConfigureMBean(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.MBeanExporter:void registerManagedResource(java.lang.Object,javax.management.ObjectName)",
            "org.springframework.jmx.export.MBeanExporter:javax.management.ObjectName registerLazyInit(java.lang.String,java.lang.String)",
            "org.springframework.jmx.export.MBeanExporter:javax.management.ObjectName registerBeanInstance(java.lang.Object,java.lang.String)"
        ]
    },
    "org.springframework.context.annotation.AnnotationConfigApplicationContext:void scan(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.annotation.AnnotationConfigApplicationContext:void <init>(java.lang.String[])"
        ]
    },
    "org.springframework.context.annotation.ConfigurationClassParser:org.springframework.core.type.AnnotationMetadata doProcessConfigurationClass(org.springframework.context.annotation.ConfigurationClass,org.springframework.core.type.AnnotationMetadata)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.annotation.ConfigurationClassParser:void processConfigurationClass(org.springframework.context.annotation.ConfigurationClass)"
        ]
    },
    "org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader:void parseBeanDefinitions(org.w3c.dom.Element,org.springframework.beans.factory.xml.BeanDefinitionParserDelegate)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.xbean.spring.context.v2.XBeanBeanDefinitionDocumentReader:void parseBeanDefinitions(org.w3c.dom.Element,org.springframework.beans.factory.xml.BeanDefinitionParserDelegate)",
            "org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader:void doRegisterBeanDefinitions(org.w3c.dom.Element)"
        ]
    },
    "org.apache.xbean.spring.context.v2.XBeanBeanDefinitionDocumentReader:void parseDefaultElement(org.w3c.dom.Element,org.springframework.beans.factory.xml.BeanDefinitionParserDelegate)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.xbean.spring.context.v2.XBeanBeanDefinitionDocumentReader:void parseBeanDefinitions(org.w3c.dom.Element,org.springframework.beans.factory.xml.BeanDefinitionParserDelegate)"
        ]
    },
    "org.springframework.context.support.AbstractXmlApplicationContext:void loadBeanDefinitions(org.springframework.beans.factory.xml.XmlBeanDefinitionReader)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.xbean.spring.context.FileSystemXmlApplicationContext:void loadBeanDefinitions(org.springframework.beans.factory.support.DefaultListableBeanFactory)",
            "org.springframework.context.support.AbstractXmlApplicationContext:void loadBeanDefinitions(org.springframework.beans.factory.support.DefaultListableBeanFactory)",
            "org.apache.xbean.spring.context.ClassPathXmlApplicationContext:void loadBeanDefinitions(org.springframework.beans.factory.support.DefaultListableBeanFactory)"
        ]
    },
    "org.springframework.context.support.GenericXmlApplicationContext:void load(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.GenericXmlApplicationContext:void <init>(java.lang.String[])"
        ]
    },
    "org.springframework.ejb.interceptor.SpringBeanAutowiringInterceptor:org.springframework.beans.factory.BeanFactory getBeanFactory(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.ejb.interceptor.SpringBeanAutowiringInterceptor:void doAutowireBean(java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void persistCompletion(org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void persistOutcome(org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$Tx,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void start()"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.legacy.LegacyJobSchedulerStoreImpl:org.apache.activemq.store.kahadb.disk.journal.Location write(org.apache.activemq.util.ByteSequence,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl:org.apache.activemq.store.kahadb.disk.journal.Location write(org.apache.activemq.util.ByteSequence,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListImpl:java.lang.Object addFirst(java.lang.String,org.apache.activemq.util.ByteSequence)",
            "org.apache.activemq.store.kahadb.plist.PListImpl:java.lang.Object addLast(java.lang.String,org.apache.activemq.util.ByteSequence)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.disk.journal.Location checkpointSubscriptionCommand(org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void checkpointUpdate(org.apache.activemq.store.kahadb.disk.page.Transaction,boolean)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:void replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayRemoveMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.Topic:org.apache.activemq.command.Message loadMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:boolean recoverMessageReference(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.journal.JournalMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message loadMessage(org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.ProxyMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:void replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayRemoveMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:boolean recoverMessageReference(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.journal.JournalMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message loadMessage(org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void resetSize()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void start()",
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void fillBatch()",
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void rebase()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void <init>(org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.Topic,java.lang.String,java.lang.String)"
        ]
    },
    "org.springframework.jmx.export.MBeanExporter:void registerBeans()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.MBeanExporter:void afterPropertiesSet()"
        ]
    },
    "org.springframework.jmx.export.MBeanExporter:void registerManagedResource(java.lang.Object,javax.management.ObjectName)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.MBeanExporter:javax.management.ObjectName registerManagedResource(java.lang.Object)"
        ]
    },
    "org.springframework.context.annotation.AnnotationConfigApplicationContext:void <init>(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.context.annotation.ConfigurationClassParser:void processConfigurationClass(org.springframework.context.annotation.ConfigurationClass)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.annotation.ConfigurationClassParser:void parse(java.lang.Class,java.lang.String)",
            "org.springframework.context.annotation.ConfigurationClassParser:void processMemberClasses(org.springframework.core.type.AnnotationMetadata)",
            "org.springframework.context.annotation.ConfigurationClassParser:void processImport(org.springframework.context.annotation.ConfigurationClass,org.springframework.core.type.AnnotationMetadata,java.util.Collection,boolean)",
            "org.springframework.context.annotation.ConfigurationClassParser:void parse(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.xbean.spring.context.v2.XBeanBeanDefinitionDocumentReader:void parseBeanDefinitions(org.w3c.dom.Element,org.springframework.beans.factory.xml.BeanDefinitionParserDelegate)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader:void doRegisterBeanDefinitions(org.w3c.dom.Element)"
        ]
    },
    "org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader:void doRegisterBeanDefinitions(org.w3c.dom.Element)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader:void parseDefaultElement(org.w3c.dom.Element,org.springframework.beans.factory.xml.BeanDefinitionParserDelegate)",
            "org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader:void registerBeanDefinitions(org.w3c.dom.Document,org.springframework.beans.factory.xml.XmlReaderContext)"
        ]
    },
    "org.apache.xbean.spring.context.FileSystemXmlApplicationContext:void loadBeanDefinitions(org.springframework.beans.factory.support.DefaultListableBeanFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.AbstractRefreshableApplicationContext:void refreshBeanFactory()"
        ]
    },
    "org.springframework.context.support.AbstractXmlApplicationContext:void loadBeanDefinitions(org.springframework.beans.factory.support.DefaultListableBeanFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.AbstractRefreshableApplicationContext:void refreshBeanFactory()"
        ]
    },
    "org.apache.xbean.spring.context.ClassPathXmlApplicationContext:void loadBeanDefinitions(org.springframework.beans.factory.support.DefaultListableBeanFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.AbstractRefreshableApplicationContext:void refreshBeanFactory()"
        ]
    },
    "org.springframework.context.support.GenericXmlApplicationContext:void <init>(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void persistCompletion(org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void persistOutcome(org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$Tx,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Topic:org.apache.activemq.command.Message loadMessage(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:boolean recoverMessageReference(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCMessageStore$4:boolean recoverMessageReference(java.lang.String)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message loadMessage(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.QueueMessageReference getMatchingMessage(org.apache.activemq.command.MessageDispatchNotification)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void rebase()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void rebase()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void <init>(org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.Topic,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.springframework.jmx.export.MBeanExporter:void afterPropertiesSet()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$6:java.lang.Object run()",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:void invokeInitMethods(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)"
        ]
    },
    "org.springframework.context.annotation.ConfigurationClassParser:void parse(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.annotation.ConfigurationClassPostProcessor:void processConfigBeanDefinitions(org.springframework.beans.factory.support.BeanDefinitionRegistry)"
        ]
    },
    "org.springframework.context.annotation.ConfigurationClassParser:void processMemberClasses(org.springframework.core.type.AnnotationMetadata)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.annotation.ConfigurationClassParser:org.springframework.core.type.AnnotationMetadata doProcessConfigurationClass(org.springframework.context.annotation.ConfigurationClass,org.springframework.core.type.AnnotationMetadata)"
        ]
    },
    "org.springframework.context.annotation.ConfigurationClassParser:void processImport(org.springframework.context.annotation.ConfigurationClass,org.springframework.core.type.AnnotationMetadata,java.util.Collection,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.annotation.ConfigurationClassParser:void processImport(org.springframework.context.annotation.ConfigurationClass,org.springframework.core.type.AnnotationMetadata,java.util.Collection,boolean)",
            "org.springframework.context.annotation.ConfigurationClassParser:org.springframework.core.type.AnnotationMetadata doProcessConfigurationClass(org.springframework.context.annotation.ConfigurationClass,org.springframework.core.type.AnnotationMetadata)"
        ]
    },
    "org.springframework.context.annotation.ConfigurationClassParser:void parse(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.annotation.ConfigurationClassPostProcessor:void processConfigBeanDefinitions(org.springframework.beans.factory.support.BeanDefinitionRegistry)",
            "org.springframework.context.annotation.ConfigurationClassParser:org.springframework.core.type.AnnotationMetadata doProcessConfigurationClass(org.springframework.context.annotation.ConfigurationClass,org.springframework.core.type.AnnotationMetadata)"
        ]
    },
    "org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader:void registerBeanDefinitions(org.w3c.dom.Document,org.springframework.beans.factory.xml.XmlReaderContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.context.support.AbstractRefreshableApplicationContext:void refreshBeanFactory()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.AbstractApplicationContext:org.springframework.beans.factory.config.ConfigurableListableBeanFactory obtainFreshBeanFactory()"
        ]
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.JDBCMessageStore$4:boolean recoverMessageReference(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverNextMessages(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,long[],long,int,boolean,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)"
        ]
    },
    "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$6:java.lang.Object run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:void invokeInitMethods(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)"
        ]
    },
    "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:void invokeInitMethods(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:java.lang.Object initializeBean(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)"
        ]
    },
    "org.springframework.context.annotation.ConfigurationClassPostProcessor:void processConfigBeanDefinitions(org.springframework.beans.factory.support.BeanDefinitionRegistry)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.annotation.ConfigurationClassPostProcessor:void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)",
            "org.springframework.context.annotation.ConfigurationClassPostProcessor:void postProcessBeanDefinitionRegistry(org.springframework.beans.factory.support.BeanDefinitionRegistry)"
        ]
    },
    "org.springframework.context.support.AbstractApplicationContext:org.springframework.beans.factory.config.ConfigurableListableBeanFactory obtainFreshBeanFactory()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.AbstractApplicationContext:void refresh()"
        ]
    },
    "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:java.lang.Object initializeBean(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:java.lang.Object configureBean(java.lang.Object,java.lang.String)",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:java.lang.Object doCreateBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:java.lang.Object initializeBean(java.lang.Object,java.lang.String)"
        ]
    },
    "org.springframework.context.annotation.ConfigurationClassPostProcessor:void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.context.annotation.ConfigurationClassPostProcessor:void postProcessBeanDefinitionRegistry(org.springframework.beans.factory.support.BeanDefinitionRegistry)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.context.support.AbstractApplicationContext:void refresh()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.ClassPathXmlApplicationContext:void <init>(java.lang.String[],java.lang.Class,org.springframework.context.ApplicationContext)",
            "org.springframework.context.support.GenericXmlApplicationContext:void <init>(java.lang.Class,java.lang.String[])",
            "org.springframework.context.annotation.AnnotationConfigApplicationContext:void <init>(java.lang.Class[])",
            "org.springframework.context.support.AbstractRefreshableConfigApplicationContext:void afterPropertiesSet()",
            "org.springframework.context.support.FileSystemXmlApplicationContext:void <init>(java.lang.String[],boolean,org.springframework.context.ApplicationContext)",
            "org.apache.xbean.spring.context.ClassPathXmlApplicationContext:void <init>(java.lang.String[],boolean,org.springframework.context.ApplicationContext,java.util.List)",
            "org.apache.xbean.spring.context.ResourceXmlApplicationContext:void <init>(org.springframework.core.io.Resource,java.util.List)",
            "org.springframework.context.support.ClassPathXmlApplicationContext:void <init>(java.lang.String[],boolean,org.springframework.context.ApplicationContext)",
            "org.springframework.context.annotation.AnnotationConfigApplicationContext:void <init>(java.lang.String[])",
            "org.apache.xbean.spring.context.ResourceXmlApplicationContext:void <init>(org.springframework.core.io.Resource,java.util.List,org.springframework.context.ApplicationContext,java.util.List,boolean)",
            "org.apache.xbean.spring.context.FileSystemXmlApplicationContext:void <init>(java.lang.String[],boolean,org.springframework.context.ApplicationContext,java.util.List)",
            "org.springframework.context.support.GenericXmlApplicationContext:void <init>(java.lang.String[])",
            "org.springframework.context.support.GenericXmlApplicationContext:void <init>(org.springframework.core.io.Resource[])",
            "org.springframework.context.access.ContextSingletonBeanFactoryLocator:void initializeDefinition(org.springframework.beans.factory.BeanFactory)"
        ]
    },
    "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:java.lang.Object configureBean(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:java.lang.Object doCreateBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:java.lang.Object createBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])"
        ]
    },
    "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:java.lang.Object initializeBean(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.context.support.ClassPathXmlApplicationContext:void <init>(java.lang.String[],java.lang.Class,org.springframework.context.ApplicationContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.ClassPathXmlApplicationContext:void <init>(java.lang.String[],java.lang.Class)"
        ]
    },
    "org.springframework.context.support.GenericXmlApplicationContext:void <init>(java.lang.Class,java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.context.annotation.AnnotationConfigApplicationContext:void <init>(java.lang.Class[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.context.support.AbstractRefreshableConfigApplicationContext:void afterPropertiesSet()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.context.support.FileSystemXmlApplicationContext:void <init>(java.lang.String[],boolean,org.springframework.context.ApplicationContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.FileSystemXmlApplicationContext:void <init>(java.lang.String[])",
            "org.apache.xbean.spring.context.FileSystemXmlApplicationContext:void <init>(java.lang.String[],boolean,org.springframework.context.ApplicationContext,java.util.List)",
            "org.springframework.context.support.FileSystemXmlApplicationContext:void <init>(java.lang.String[],boolean)",
            "org.springframework.context.support.FileSystemXmlApplicationContext:void <init>(java.lang.String)",
            "org.springframework.context.support.FileSystemXmlApplicationContext:void <init>(java.lang.String[],org.springframework.context.ApplicationContext)"
        ]
    },
    "org.apache.xbean.spring.context.ClassPathXmlApplicationContext:void <init>(java.lang.String[],boolean,org.springframework.context.ApplicationContext,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.xbean.spring.context.ClassPathXmlApplicationContext:void <init>(java.lang.String[],boolean,java.util.List)",
            "org.apache.xbean.spring.context.ClassPathXmlApplicationContext:void <init>(java.lang.String[],boolean,org.springframework.context.ApplicationContext)",
            "org.apache.xbean.spring.context.ClassPathXmlApplicationContext:void <init>(java.lang.String)",
            "org.apache.xbean.spring.context.ClassPathXmlApplicationContext:void <init>(java.lang.String,java.util.List)",
            "org.apache.xbean.spring.context.ClassPathXmlApplicationContext:void <init>(java.lang.String[],org.springframework.context.ApplicationContext,java.util.List)",
            "org.apache.xbean.spring.context.ClassPathXmlApplicationContext:void <init>(java.lang.String[],org.springframework.context.ApplicationContext)",
            "org.apache.xbean.spring.context.ClassPathXmlApplicationContext:void <init>(java.lang.String[],boolean)",
            "org.apache.xbean.spring.context.ClassPathXmlApplicationContext:void <init>(java.lang.String[],java.util.List)",
            "org.apache.xbean.spring.context.ClassPathXmlApplicationContext:void <init>(java.lang.String[])"
        ]
    },
    "org.apache.xbean.spring.context.ResourceXmlApplicationContext:void <init>(org.springframework.core.io.Resource,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.xbean.spring.context.ResourceXmlApplicationContext:void <init>(org.springframework.core.io.Resource)"
        ]
    },
    "org.springframework.context.support.ClassPathXmlApplicationContext:void <init>(java.lang.String[],boolean,org.springframework.context.ApplicationContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.ClassPathXmlApplicationContext:void <init>(java.lang.String[],org.springframework.context.ApplicationContext)",
            "org.springframework.context.support.ClassPathXmlApplicationContext:void <init>(java.lang.String[],boolean)",
            "org.apache.xbean.spring.context.ClassPathXmlApplicationContext:void <init>(java.lang.String[],boolean,org.springframework.context.ApplicationContext,java.util.List)",
            "org.springframework.context.support.ClassPathXmlApplicationContext:void <init>(java.lang.String)",
            "org.springframework.context.support.ClassPathXmlApplicationContext:void <init>(java.lang.String[])"
        ]
    },
    "org.apache.xbean.spring.context.ResourceXmlApplicationContext:void <init>(org.springframework.core.io.Resource,java.util.List,org.springframework.context.ApplicationContext,java.util.List,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.xbean.spring.context.ResourceXmlApplicationContext:void <init>(org.springframework.core.io.Resource,java.util.List,org.springframework.context.ApplicationContext,java.util.List)"
        ]
    },
    "org.apache.xbean.spring.context.FileSystemXmlApplicationContext:void <init>(java.lang.String[],boolean,org.springframework.context.ApplicationContext,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.xbean.spring.context.FileSystemXmlApplicationContext:void <init>(java.lang.String[],boolean,java.util.List)",
            "org.apache.xbean.spring.context.FileSystemXmlApplicationContext:void <init>(java.lang.String[],org.springframework.context.ApplicationContext)",
            "org.apache.xbean.spring.context.FileSystemXmlApplicationContext:void <init>(java.lang.String[],boolean,org.springframework.context.ApplicationContext)",
            "org.apache.xbean.spring.context.FileSystemXmlApplicationContext:void <init>(java.lang.String[],boolean)",
            "org.apache.xbean.spring.context.FileSystemXmlApplicationContext:void <init>(java.lang.String)",
            "org.apache.xbean.spring.context.FileSystemXmlApplicationContext:void <init>(java.lang.String[],java.util.List)",
            "org.apache.xbean.spring.context.FileSystemXmlApplicationContext:void <init>(java.lang.String[])",
            "org.apache.xbean.spring.context.FileSystemXmlApplicationContext:void <init>(java.lang.String[],org.springframework.context.ApplicationContext,java.util.List)",
            "org.apache.xbean.spring.context.FileSystemXmlApplicationContext:void <init>(java.lang.String,java.util.List)"
        ]
    },
    "org.springframework.context.support.GenericXmlApplicationContext:void <init>(org.springframework.core.io.Resource[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.context.access.ContextSingletonBeanFactoryLocator:void initializeDefinition(org.springframework.beans.factory.BeanFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.access.SingletonBeanFactoryLocator:org.springframework.beans.factory.access.BeanFactoryReference useBeanFactory(java.lang.String)"
        ]
    },
    "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:java.lang.Object createBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.AbstractBeanFactory$2:java.lang.Object getObject()",
            "org.springframework.beans.factory.support.BeanDefinitionValueResolver:java.lang.Object resolveInnerBean(java.lang.Object,java.lang.String,org.springframework.beans.factory.config.BeanDefinition)",
            "org.springframework.beans.factory.support.AbstractBeanFactory:java.lang.Object doGetBean(java.lang.String,java.lang.Class,java.lang.Object[],boolean)",
            "org.springframework.beans.factory.support.AbstractBeanFactory$1:java.lang.Object getObject()",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:java.lang.Object createBean(java.lang.Class,int,boolean)",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:java.lang.Object createBean(java.lang.Class)"
        ]
    },
    "org.springframework.context.support.ClassPathXmlApplicationContext:void <init>(java.lang.String[],java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.ClassPathXmlApplicationContext:void <init>(java.lang.String,java.lang.Class)"
        ]
    },
    "org.springframework.context.support.FileSystemXmlApplicationContext:void <init>(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.context.support.FileSystemXmlApplicationContext:void <init>(java.lang.String[],boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.context.support.FileSystemXmlApplicationContext:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.context.support.FileSystemXmlApplicationContext:void <init>(java.lang.String[],org.springframework.context.ApplicationContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.xbean.spring.context.ClassPathXmlApplicationContext:void <init>(java.lang.String[],boolean,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.xbean.spring.context.ClassPathXmlApplicationContext:void <init>(java.lang.String[],boolean,org.springframework.context.ApplicationContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.xbean.spring.context.ClassPathXmlApplicationContext:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.xbean.spring.context.ClassPathXmlApplicationContext:void <init>(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.xbean.spring.context.ClassPathXmlApplicationContext:void <init>(java.lang.String[],org.springframework.context.ApplicationContext,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.xbean.spring.context.ClassPathXmlApplicationContext:void <init>(java.lang.String[],org.springframework.context.ApplicationContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.xbean.spring.context.ClassPathXmlApplicationContext:void <init>(java.lang.String[],boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.xbean.spring.context.ClassPathXmlApplicationContext:void <init>(java.lang.String[],java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.xbean.spring.context.ClassPathXmlApplicationContext:void <init>(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.xbean.spring.context.ResourceXmlApplicationContext:void <init>(org.springframework.core.io.Resource)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.xbean.XBeanBrokerFactory$1:void <init>(org.apache.activemq.xbean.XBeanBrokerFactory,org.springframework.core.io.Resource)"
        ]
    },
    "org.springframework.context.support.ClassPathXmlApplicationContext:void <init>(java.lang.String[],org.springframework.context.ApplicationContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.context.support.ClassPathXmlApplicationContext:void <init>(java.lang.String[],boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.access.ContextSingletonBeanFactoryLocator:org.springframework.beans.factory.BeanFactory createDefinition(java.lang.String,java.lang.String)"
        ]
    },
    "org.springframework.context.support.ClassPathXmlApplicationContext:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.context.support.ClassPathXmlApplicationContext:void <init>(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.access.ContextJndiBeanFactoryLocator:org.springframework.context.ApplicationContext createApplicationContext(java.lang.String[])"
        ]
    },
    "org.apache.xbean.spring.context.ResourceXmlApplicationContext:void <init>(org.springframework.core.io.Resource,java.util.List,org.springframework.context.ApplicationContext,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.xbean.spring.context.ResourceXmlApplicationContext:void <init>(org.springframework.core.io.Resource,java.util.List,org.springframework.context.ApplicationContext)"
        ]
    },
    "org.apache.xbean.spring.context.FileSystemXmlApplicationContext:void <init>(java.lang.String[],boolean,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.xbean.spring.context.FileSystemXmlApplicationContext:void <init>(java.lang.String[],org.springframework.context.ApplicationContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.xbean.spring.context.FileSystemXmlApplicationContext:void <init>(java.lang.String[],boolean,org.springframework.context.ApplicationContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.xbean.spring.context.FileSystemXmlApplicationContext:void <init>(java.lang.String[],boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.xbean.spring.context.FileSystemXmlApplicationContext:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.xbean.spring.context.FileSystemXmlApplicationContext:void <init>(java.lang.String[],java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.xbean.spring.context.FileSystemXmlApplicationContext:void <init>(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.xbean.spring.context.FileSystemXmlApplicationContext:void <init>(java.lang.String[],org.springframework.context.ApplicationContext,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.xbean.spring.context.FileSystemXmlApplicationContext:void <init>(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.beans.factory.support.AbstractBeanFactory$2:java.lang.Object getObject()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.beans.factory.support.BeanDefinitionValueResolver:java.lang.Object resolveInnerBean(java.lang.Object,java.lang.String,org.springframework.beans.factory.config.BeanDefinition)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.BeanDefinitionValueResolver:java.lang.Object resolveValueIfNecessary(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.springframework.beans.factory.support.AbstractBeanFactory:java.lang.Object doGetBean(java.lang.String,java.lang.Class,java.lang.Object[],boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.AbstractBeanFactory:java.lang.Object getBean(java.lang.String)",
            "org.springframework.beans.factory.support.AbstractBeanFactory:java.lang.Object getBean(java.lang.String,java.lang.Object[])",
            "org.springframework.beans.factory.support.AbstractBeanFactory:java.lang.Class getTypeForFactoryBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition)",
            "org.springframework.beans.factory.support.AbstractBeanFactory:java.lang.Object getBean(java.lang.String,java.lang.Class,java.lang.Object[])",
            "org.springframework.beans.factory.support.AbstractBeanFactory:java.lang.Object getBean(java.lang.String,java.lang.Class)"
        ]
    },
    "org.springframework.beans.factory.support.AbstractBeanFactory$1:java.lang.Object getObject()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.DefaultSingletonBeanRegistry:java.lang.Object getSingleton(java.lang.String,org.springframework.beans.factory.ObjectFactory)"
        ]
    },
    "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:java.lang.Object createBean(java.lang.Class,int,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:java.lang.Object createBean(java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.context.support.ClassPathXmlApplicationContext:void <init>(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.xbean.XBeanBrokerFactory$1:void <init>(org.apache.activemq.xbean.XBeanBrokerFactory,org.springframework.core.io.Resource)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.xbean.XBeanBrokerFactory:org.springframework.context.ApplicationContext createApplicationContext(java.lang.String)"
        ]
    },
    "org.springframework.context.access.ContextSingletonBeanFactoryLocator:org.springframework.beans.factory.BeanFactory createDefinition(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.access.SingletonBeanFactoryLocator:org.springframework.beans.factory.access.BeanFactoryReference useBeanFactory(java.lang.String)"
        ]
    },
    "org.springframework.context.access.ContextJndiBeanFactoryLocator:org.springframework.context.ApplicationContext createApplicationContext(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.access.ContextJndiBeanFactoryLocator:org.springframework.beans.factory.access.BeanFactoryReference createBeanFactory(java.lang.String[])"
        ]
    },
    "org.apache.xbean.spring.context.ResourceXmlApplicationContext:void <init>(org.springframework.core.io.Resource,java.util.List,org.springframework.context.ApplicationContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.xbean.spring.context.ResourceXmlApplicationContext:void <init>(org.springframework.core.io.Resource,org.springframework.context.ApplicationContext)"
        ]
    },
    "org.springframework.beans.factory.support.BeanDefinitionValueResolver:java.lang.Object resolveValueIfNecessary(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.BeanDefinitionValueResolver:java.lang.Object resolveManagedArray(java.lang.Object,java.util.List,java.lang.Class)",
            "org.springframework.beans.factory.support.BeanDefinitionValueResolver:java.util.Map resolveManagedMap(java.lang.Object,java.util.Map)",
            "org.springframework.beans.factory.support.BeanDefinitionValueResolver:java.util.List resolveManagedList(java.lang.Object,java.util.List)",
            "org.springframework.beans.factory.support.BeanDefinitionValueResolver:java.util.Set resolveManagedSet(java.lang.Object,java.util.Set)",
            "org.springframework.beans.factory.support.ConstructorResolver:java.lang.Object[] resolvePreparedArguments(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.BeanWrapper,java.lang.reflect.Member,java.lang.Object[])",
            "org.springframework.beans.factory.support.ConstructorResolver:int resolveConstructorArguments(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.BeanWrapper,org.springframework.beans.factory.config.ConstructorArgumentValues,org.springframework.beans.factory.config.ConstructorArgumentValues)",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:void applyPropertyValues(java.lang.String,org.springframework.beans.factory.config.BeanDefinition,org.springframework.beans.BeanWrapper,org.springframework.beans.PropertyValues)"
        ]
    },
    "org.springframework.beans.factory.support.AbstractBeanFactory:java.lang.Object getBean(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$CglibSubclassCreator$ReplaceOverrideMethodInterceptor:java.lang.Object intercept(java.lang.Object,java.lang.reflect.Method,java.lang.Object[],org.springframework.cglib.proxy.MethodProxy)",
            "org.springframework.context.expression.BeanFactoryResolver:java.lang.Object resolve(org.springframework.expression.EvaluationContext,java.lang.String)",
            "org.springframework.beans.factory.support.BeanDefinitionValueResolver:java.lang.Object resolveInnerBean(java.lang.Object,java.lang.String,org.springframework.beans.factory.config.BeanDefinition)",
            "org.springframework.jmx.export.MBeanExporter:javax.management.ObjectName registerBeanNameOrInstance(java.lang.Object,java.lang.String)",
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor:java.lang.Object resolvedCachedArgument(java.lang.String,java.lang.Object)",
            "org.springframework.beans.factory.support.BeanDefinitionValueResolver:java.lang.Object resolveReference(java.lang.Object,org.springframework.beans.factory.config.RuntimeBeanReference)",
            "org.springframework.beans.factory.config.BeanExpressionContext:java.lang.Object getObject(java.lang.String)",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:void autowireByName(java.lang.String,org.springframework.beans.factory.support.AbstractBeanDefinition,org.springframework.beans.BeanWrapper,org.springframework.beans.MutablePropertyValues)",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory:java.util.Map findAutowireCandidates(java.lang.String,java.lang.Class,org.springframework.beans.factory.config.DependencyDescriptor)",
            "org.springframework.scripting.support.ScriptFactoryPostProcessor:java.lang.Object postProcessBeforeInstantiation(java.lang.Class,java.lang.String)",
            "org.springframework.context.support.AbstractApplicationContext:java.lang.Object getBean(java.lang.String)",
            "org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$CglibSubclassCreator$LookupOverrideMethodInterceptor:java.lang.Object intercept(java.lang.Object,java.lang.reflect.Method,java.lang.Object[],org.springframework.cglib.proxy.MethodProxy)",
            "org.apache.xbean.spring.jndi.SpringInitialContextFactory:javax.naming.Context getInitialContext(java.util.Hashtable)",
            "org.springframework.beans.factory.support.AbstractBeanFactory:java.lang.Object doGetBean(java.lang.String,java.lang.Class,java.lang.Object[],boolean)",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory:void preInstantiateSingletons()",
            "org.springframework.beans.factory.support.AbstractBeanFactory:boolean isSingleton(java.lang.String)",
            "org.springframework.scripting.support.ScriptFactoryPostProcessor:java.lang.Class predictBeanType(java.lang.Class,java.lang.String)",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory:java.util.Map getBeansWithAnnotation(java.lang.Class)",
            "org.springframework.beans.factory.support.AbstractBeanFactory:boolean isPrototype(java.lang.String)",
            "org.springframework.jmx.export.MBeanExporter:void autodetect(org.springframework.jmx.export.MBeanExporter$AutodetectCallback)",
            "org.springframework.beans.factory.support.ConstructorResolver:org.springframework.beans.BeanWrapper instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])"
        ]
    },
    "org.springframework.beans.factory.support.AbstractBeanFactory:java.lang.Object getBean(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.AbstractBeanFactory:java.lang.Object doGetBean(java.lang.String,java.lang.Class,java.lang.Object[],boolean)"
        ]
    },
    "org.springframework.beans.factory.support.AbstractBeanFactory:java.lang.Class getTypeForFactoryBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.AbstractBeanFactory:boolean isTypeMatch(java.lang.String,java.lang.Class)",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:java.lang.Class getTypeForFactoryBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition)",
            "org.springframework.beans.factory.support.AbstractBeanFactory:java.lang.Class getType(java.lang.String)"
        ]
    },
    "org.springframework.beans.factory.support.AbstractBeanFactory:java.lang.Object getBean(java.lang.String,java.lang.Class,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.beans.factory.support.AbstractBeanFactory:java.lang.Object getBean(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.AbstractApplicationContext:void initApplicationEventMulticaster()",
            "org.springframework.context.support.AbstractApplicationContext:void initLifecycleProcessor()",
            "org.springframework.context.support.DefaultLifecycleProcessor:java.util.Map getLifecycleBeans()",
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor:java.lang.Object autowireResource(org.springframework.beans.factory.BeanFactory,org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$LookupElement,java.lang.String)",
            "org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerRetriever:java.util.Collection getApplicationListeners()",
            "org.springframework.context.support.AbstractApplicationContext:void initMessageSource()",
            "org.springframework.context.event.AbstractApplicationEventMulticaster:java.util.Collection getApplicationListeners(org.springframework.context.ApplicationEvent)",
            "org.springframework.scripting.support.ScriptFactoryPostProcessor:java.lang.Object postProcessBeforeInstantiation(java.lang.Class,java.lang.String)",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory:java.util.Map getBeansOfType(java.lang.Class,boolean,boolean)",
            "org.springframework.context.annotation.ConfigurationClassPostProcessor$ImportAwareBeanPostProcessor:java.lang.Object postProcessBeforeInitialization(java.lang.Object,java.lang.String)",
            "org.springframework.context.support.AbstractApplicationContext:void finishBeanFactoryInitialization(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)",
            "org.springframework.context.support.AbstractApplicationContext:void invokeBeanFactoryPostProcessors(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory:java.lang.Object getBean(java.lang.Class)",
            "org.springframework.beans.factory.access.SingletonBeanFactoryLocator:org.springframework.beans.factory.access.BeanFactoryReference useBeanFactory(java.lang.String)",
            "org.springframework.beans.factory.support.AbstractBeanFactory:java.lang.Object doGetBean(java.lang.String,java.lang.Class,java.lang.Object[],boolean)",
            "org.springframework.context.support.AbstractApplicationContext:java.lang.Object getBean(java.lang.String,java.lang.Class)",
            "org.springframework.scripting.support.ScriptFactoryPostProcessor:java.lang.Class predictBeanType(java.lang.Class,java.lang.String)",
            "org.springframework.scripting.support.ScriptFactoryPostProcessor:void prepareScriptBeans(org.springframework.beans.factory.config.BeanDefinition,java.lang.String,java.lang.String)",
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$EjbRefElement:java.lang.Object getResourceToInject(java.lang.Object,java.lang.String)",
            "org.springframework.context.weaving.LoadTimeWeaverAwareProcessor:java.lang.Object postProcessBeforeInitialization(java.lang.Object,java.lang.String)",
            "org.springframework.context.support.AbstractApplicationContext:void registerBeanPostProcessors(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)"
        ]
    },
    "org.springframework.beans.factory.support.DefaultSingletonBeanRegistry:java.lang.Object getSingleton(java.lang.String,org.springframework.beans.factory.ObjectFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.AbstractBeanFactory:java.lang.Object doGetBean(java.lang.String,java.lang.Class,java.lang.Object[],boolean)"
        ]
    },
    "org.apache.activemq.xbean.XBeanBrokerFactory:org.springframework.context.ApplicationContext createApplicationContext(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.xbean.XBeanBrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.net.URI)"
        ]
    },
    "org.springframework.context.access.ContextJndiBeanFactoryLocator:org.springframework.beans.factory.access.BeanFactoryReference createBeanFactory(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.access.ContextJndiBeanFactoryLocator:org.springframework.beans.factory.access.BeanFactoryReference useBeanFactory(java.lang.String)"
        ]
    },
    "org.apache.xbean.spring.context.ResourceXmlApplicationContext:void <init>(org.springframework.core.io.Resource,org.springframework.context.ApplicationContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.xbean.BrokerFactoryBean:void afterPropertiesSet()"
        ]
    },
    "org.springframework.beans.factory.support.BeanDefinitionValueResolver:java.lang.Object resolveManagedArray(java.lang.Object,java.util.List,java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.BeanDefinitionValueResolver:java.lang.Object resolveValueIfNecessary(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.springframework.beans.factory.support.BeanDefinitionValueResolver:java.util.Map resolveManagedMap(java.lang.Object,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.BeanDefinitionValueResolver:java.lang.Object resolveValueIfNecessary(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.springframework.beans.factory.support.BeanDefinitionValueResolver:java.util.List resolveManagedList(java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.BeanDefinitionValueResolver:java.lang.Object resolveValueIfNecessary(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.springframework.beans.factory.support.BeanDefinitionValueResolver:java.util.Set resolveManagedSet(java.lang.Object,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.BeanDefinitionValueResolver:java.lang.Object resolveValueIfNecessary(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.springframework.beans.factory.support.ConstructorResolver:java.lang.Object[] resolvePreparedArguments(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.BeanWrapper,java.lang.reflect.Member,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.ConstructorResolver:org.springframework.beans.BeanWrapper autowireConstructor(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.reflect.Constructor[],java.lang.Object[])",
            "org.springframework.beans.factory.support.ConstructorResolver:org.springframework.beans.BeanWrapper instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])"
        ]
    },
    "org.springframework.beans.factory.support.ConstructorResolver:int resolveConstructorArguments(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.BeanWrapper,org.springframework.beans.factory.config.ConstructorArgumentValues,org.springframework.beans.factory.config.ConstructorArgumentValues)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.ConstructorResolver:org.springframework.beans.BeanWrapper autowireConstructor(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.reflect.Constructor[],java.lang.Object[])",
            "org.springframework.beans.factory.support.ConstructorResolver:org.springframework.beans.BeanWrapper instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])"
        ]
    },
    "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:void applyPropertyValues(java.lang.String,org.springframework.beans.factory.config.BeanDefinition,org.springframework.beans.BeanWrapper,org.springframework.beans.PropertyValues)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:void populateBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.BeanWrapper)",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:void applyBeanPropertyValues(java.lang.Object,java.lang.String)"
        ]
    },
    "org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$CglibSubclassCreator$ReplaceOverrideMethodInterceptor:java.lang.Object intercept(java.lang.Object,java.lang.reflect.Method,java.lang.Object[],org.springframework.cglib.proxy.MethodProxy)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.context.expression.BeanFactoryResolver:java.lang.Object resolve(org.springframework.expression.EvaluationContext,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.expression.spel.ast.BeanReference:org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)"
        ]
    },
    "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor:java.lang.Object resolvedCachedArgument(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor:java.lang.Object access$000(org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor,java.lang.String,java.lang.Object)"
        ]
    },
    "org.springframework.beans.factory.support.BeanDefinitionValueResolver:java.lang.Object resolveReference(java.lang.Object,org.springframework.beans.factory.config.RuntimeBeanReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.BeanDefinitionValueResolver:java.lang.Object resolveValueIfNecessary(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.springframework.beans.factory.config.BeanExpressionContext:java.lang.Object getObject(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:void autowireByName(java.lang.String,org.springframework.beans.factory.support.AbstractBeanDefinition,org.springframework.beans.BeanWrapper,org.springframework.beans.MutablePropertyValues)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:void populateBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.BeanWrapper)"
        ]
    },
    "org.springframework.beans.factory.support.DefaultListableBeanFactory:java.util.Map findAutowireCandidates(java.lang.String,java.lang.Class,org.springframework.beans.factory.config.DependencyDescriptor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.DefaultListableBeanFactory:java.lang.Object doResolveDependency(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.Class,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)"
        ]
    },
    "org.springframework.scripting.support.ScriptFactoryPostProcessor:java.lang.Object postProcessBeforeInstantiation(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.context.support.AbstractApplicationContext:java.lang.Object getBean(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.xbean.XBeanBrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.net.URI)",
            "org.apache.activemq.xbean.BrokerFactoryBean:void afterPropertiesSet()",
            "org.apache.activemq.spring.SpringBrokerContext:java.lang.Object getBean(java.lang.String)",
            "org.springframework.context.support.AbstractApplicationContext:void finishBeanFactoryInitialization(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)"
        ]
    },
    "org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy$CglibSubclassCreator$LookupOverrideMethodInterceptor:java.lang.Object intercept(java.lang.Object,java.lang.reflect.Method,java.lang.Object[],org.springframework.cglib.proxy.MethodProxy)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.xbean.spring.jndi.SpringInitialContextFactory:javax.naming.Context getInitialContext(java.util.Hashtable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.beans.factory.support.DefaultListableBeanFactory:void preInstantiateSingletons()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.AbstractApplicationContext:void finishBeanFactoryInitialization(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)",
            "org.springframework.beans.factory.access.SingletonBeanFactoryLocator:void initializeDefinition(org.springframework.beans.factory.BeanFactory)"
        ]
    },
    "org.springframework.beans.factory.support.AbstractBeanFactory:boolean isSingleton(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.AbstractBeanFactory:boolean isSingleton(java.lang.String)",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory:java.lang.String[] doGetBeanNamesForType(java.lang.Class,boolean,boolean)"
        ]
    },
    "org.springframework.scripting.support.ScriptFactoryPostProcessor:java.lang.Class predictBeanType(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.beans.factory.support.DefaultListableBeanFactory:java.util.Map getBeansWithAnnotation(java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.beans.factory.support.AbstractBeanFactory:boolean isPrototype(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.AbstractBeanFactory:boolean isPrototype(java.lang.String)"
        ]
    },
    "org.springframework.beans.factory.support.ConstructorResolver:org.springframework.beans.BeanWrapper instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:org.springframework.beans.BeanWrapper instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])"
        ]
    },
    "org.springframework.beans.factory.support.AbstractBeanFactory:boolean isTypeMatch(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.AbstractBeanFactory:boolean isTypeMatch(java.lang.String,java.lang.Class)",
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredMethodElement:void inject(java.lang.Object,java.lang.String,org.springframework.beans.PropertyValues)",
            "org.springframework.context.support.AbstractApplicationContext:boolean isTypeMatch(java.lang.String,java.lang.Class)",
            "org.springframework.context.support.AbstractApplicationContext:void finishBeanFactoryInitialization(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory:java.lang.String[] doGetBeanNamesForType(java.lang.Class,boolean,boolean)",
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement:void inject(java.lang.Object,java.lang.String,org.springframework.beans.PropertyValues)"
        ]
    },
    "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:java.lang.Class getTypeForFactoryBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.AbstractBeanFactory:boolean isTypeMatch(java.lang.String,java.lang.Class)",
            "org.springframework.beans.factory.support.AbstractBeanFactory:java.lang.Class getType(java.lang.String)"
        ]
    },
    "org.springframework.beans.factory.support.AbstractBeanFactory:java.lang.Class getType(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.DefaultListableBeanFactory:java.lang.annotation.Annotation findAnnotationOnBean(java.lang.String,java.lang.Class)",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory:boolean isAutowireCandidate(java.lang.String,org.springframework.beans.factory.config.DependencyDescriptor)",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:java.lang.Class getTypeForFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Class[])",
            "org.springframework.context.support.DefaultLifecycleProcessor:java.util.Map getLifecycleBeans()",
            "org.springframework.jmx.export.MBeanExporter:javax.management.ObjectName registerLazyInit(java.lang.String,java.lang.String)",
            "org.springframework.beans.factory.support.AbstractBeanFactory:java.lang.Class getType(java.lang.String)",
            "org.springframework.beans.factory.support.ConstructorResolver:void resolveFactoryMethodIfPossible(org.springframework.beans.factory.support.RootBeanDefinition)",
            "org.springframework.jmx.export.MBeanExporter:void autodetect(org.springframework.jmx.export.MBeanExporter$AutodetectCallback)",
            "org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver:boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)"
        ]
    },
    "org.springframework.context.support.AbstractApplicationContext:void initApplicationEventMulticaster()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.AbstractApplicationContext:void refresh()"
        ]
    },
    "org.springframework.context.support.AbstractApplicationContext:void initLifecycleProcessor()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.AbstractApplicationContext:void finishRefresh()"
        ]
    },
    "org.springframework.context.support.DefaultLifecycleProcessor:java.util.Map getLifecycleBeans()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.DefaultLifecycleProcessor:void startBeans(boolean)",
            "org.springframework.context.support.DefaultLifecycleProcessor:void stopBeans()"
        ]
    },
    "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor:java.lang.Object autowireResource(org.springframework.beans.factory.BeanFactory,org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$LookupElement,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor:java.lang.Object getResource(org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$LookupElement,java.lang.String)"
        ]
    },
    "org.springframework.context.event.AbstractApplicationEventMulticaster$ListenerRetriever:java.util.Collection getApplicationListeners()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.event.AbstractApplicationEventMulticaster:java.util.Collection getApplicationListeners()"
        ]
    },
    "org.springframework.context.support.AbstractApplicationContext:void initMessageSource()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.AbstractApplicationContext:void refresh()"
        ]
    },
    "org.springframework.context.event.AbstractApplicationEventMulticaster:java.util.Collection getApplicationListeners(org.springframework.context.ApplicationEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.event.SimpleApplicationEventMulticaster:void multicastEvent(org.springframework.context.ApplicationEvent)"
        ]
    },
    "org.springframework.beans.factory.support.DefaultListableBeanFactory:java.util.Map getBeansOfType(java.lang.Class,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.jmx.export.MBeanExporter:javax.management.ObjectName registerBeanNameOrInstance(java.lang.Object,java.lang.String)",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory:java.util.Map getBeansOfType(java.lang.Class)",
            "org.springframework.context.support.AbstractApplicationContext:void invokeBeanFactoryPostProcessors(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)"
        ]
    },
    "org.springframework.context.annotation.ConfigurationClassPostProcessor$ImportAwareBeanPostProcessor:java.lang.Object postProcessBeforeInitialization(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.context.support.AbstractApplicationContext:void finishBeanFactoryInitialization(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.AbstractApplicationContext:void refresh()"
        ]
    },
    "org.springframework.context.support.AbstractApplicationContext:void invokeBeanFactoryPostProcessors(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.AbstractApplicationContext:void refresh()"
        ]
    },
    "org.springframework.beans.factory.support.DefaultListableBeanFactory:java.lang.Object getBean(java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.DefaultListableBeanFactory:java.lang.Object getBean(java.lang.Class)",
            "org.springframework.beans.factory.access.SingletonBeanFactoryLocator:org.springframework.beans.factory.access.BeanFactoryReference useBeanFactory(java.lang.String)",
            "org.springframework.context.support.AbstractApplicationContext:java.lang.Object getBean(java.lang.Class)"
        ]
    },
    "org.springframework.context.support.AbstractApplicationContext:java.lang.Object getBean(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.access.SingletonBeanFactoryLocator:org.springframework.beans.factory.access.BeanFactoryReference useBeanFactory(java.lang.String)",
            "org.springframework.context.support.AbstractApplicationContext:void invokeBeanFactoryPostProcessors(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)"
        ]
    },
    "org.springframework.scripting.support.ScriptFactoryPostProcessor:void prepareScriptBeans(org.springframework.beans.factory.config.BeanDefinition,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.scripting.support.ScriptFactoryPostProcessor:java.lang.Class predictBeanType(java.lang.Class,java.lang.String)",
            "org.springframework.scripting.support.ScriptFactoryPostProcessor:java.lang.Object postProcessBeforeInstantiation(java.lang.Class,java.lang.String)"
        ]
    },
    "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$EjbRefElement:java.lang.Object getResourceToInject(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.context.weaving.LoadTimeWeaverAwareProcessor:java.lang.Object postProcessBeforeInitialization(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.context.support.AbstractApplicationContext:void registerBeanPostProcessors(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.AbstractApplicationContext:void refresh()"
        ]
    },
    "org.apache.activemq.xbean.XBeanBrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.context.access.ContextJndiBeanFactoryLocator:org.springframework.beans.factory.access.BeanFactoryReference useBeanFactory(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.ejb.support.AbstractEnterpriseBean:void loadBeanFactory()"
        ]
    },
    "org.apache.activemq.xbean.BrokerFactoryBean:void afterPropertiesSet()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.http.HttpSpringEmbeddedTunnelServlet:org.apache.activemq.broker.BrokerService createBroker()",
            "org.apache.activemq.xbean.PooledBrokerFactoryBean:void afterPropertiesSet()"
        ]
    },
    "org.springframework.beans.factory.support.ConstructorResolver:org.springframework.beans.BeanWrapper autowireConstructor(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.reflect.Constructor[],java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:org.springframework.beans.BeanWrapper autowireConstructor(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.reflect.Constructor[],java.lang.Object[])"
        ]
    },
    "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:void populateBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.BeanWrapper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:java.lang.Object autowire(java.lang.Class,int,boolean)",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:java.lang.Object configureBean(java.lang.Object,java.lang.String)",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:void autowireBean(java.lang.Object)",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:java.lang.Object doCreateBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:void autowireBeanProperties(java.lang.Object,int,boolean)"
        ]
    },
    "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:void applyBeanPropertyValues(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.expression.spel.ast.BeanReference:org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor:java.lang.Object access$000(org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredMethodElement:java.lang.Object[] resolveCachedArguments(java.lang.String)",
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement:void inject(java.lang.Object,java.lang.String,org.springframework.beans.PropertyValues)"
        ]
    },
    "org.springframework.beans.factory.support.DefaultListableBeanFactory:java.lang.Object doResolveDependency(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.Class,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.DefaultListableBeanFactory:java.lang.Object resolveDependency(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectFactory:java.lang.Object getObject()"
        ]
    },
    "org.apache.activemq.spring.SpringBrokerContext:java.lang.Object getBean(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.beans.factory.access.SingletonBeanFactoryLocator:void initializeDefinition(org.springframework.beans.factory.BeanFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.access.SingletonBeanFactoryLocator:org.springframework.beans.factory.access.BeanFactoryReference useBeanFactory(java.lang.String)"
        ]
    },
    "org.springframework.beans.factory.support.DefaultListableBeanFactory:java.lang.String[] doGetBeanNamesForType(java.lang.Class,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.DefaultListableBeanFactory:java.lang.String[] getBeanNamesForType(java.lang.Class,boolean,boolean)"
        ]
    },
    "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:org.springframework.beans.BeanWrapper instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:org.springframework.beans.BeanWrapper createBeanInstance(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])"
        ]
    },
    "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredMethodElement:void inject(java.lang.Object,java.lang.String,org.springframework.beans.PropertyValues)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.context.support.AbstractApplicationContext:boolean isTypeMatch(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.AbstractApplicationContext:void registerBeanPostProcessors(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)",
            "org.springframework.context.support.AbstractApplicationContext:void invokeBeanFactoryPostProcessors(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)"
        ]
    },
    "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement:void inject(java.lang.Object,java.lang.String,org.springframework.beans.PropertyValues)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.beans.factory.support.DefaultListableBeanFactory:java.lang.annotation.Annotation findAnnotationOnBean(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.DefaultListableBeanFactory:java.util.Map getBeansWithAnnotation(java.lang.Class)"
        ]
    },
    "org.springframework.beans.factory.support.DefaultListableBeanFactory:boolean isAutowireCandidate(java.lang.String,org.springframework.beans.factory.config.DependencyDescriptor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.DefaultListableBeanFactory:boolean isAutowireCandidate(java.lang.String,org.springframework.beans.factory.config.DependencyDescriptor)",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory:java.util.Map findAutowireCandidates(java.lang.String,java.lang.Class,org.springframework.beans.factory.config.DependencyDescriptor)"
        ]
    },
    "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:java.lang.Class getTypeForFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Class[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:java.lang.Class predictBeanType(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Class[])"
        ]
    },
    "org.springframework.beans.factory.support.ConstructorResolver:void resolveFactoryMethodIfPossible(org.springframework.beans.factory.support.RootBeanDefinition)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.DefaultListableBeanFactory:boolean isAutowireCandidate(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.factory.config.DependencyDescriptor)"
        ]
    },
    "org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver:boolean checkQualifier(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation,org.springframework.beans.TypeConverter)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver:boolean checkQualifiers(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation[])"
        ]
    },
    "org.springframework.context.support.AbstractApplicationContext:void finishRefresh()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.AbstractApplicationContext:void refresh()"
        ]
    },
    "org.springframework.context.support.DefaultLifecycleProcessor:void startBeans(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.DefaultLifecycleProcessor:void onRefresh()",
            "org.springframework.context.support.DefaultLifecycleProcessor:void start()"
        ]
    },
    "org.springframework.context.support.DefaultLifecycleProcessor:void stopBeans()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.DefaultLifecycleProcessor:void stop()",
            "org.springframework.context.support.DefaultLifecycleProcessor:void onClose()"
        ]
    },
    "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor:java.lang.Object getResource(org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$LookupElement,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$ResourceElement:java.lang.Object getResourceToInject(java.lang.Object,java.lang.String)",
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$EjbRefElement:java.lang.Object getResourceToInject(java.lang.Object,java.lang.String)",
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$WebServiceRefElement:java.lang.Object getResourceToInject(java.lang.Object,java.lang.String)"
        ]
    },
    "org.springframework.context.event.AbstractApplicationEventMulticaster:java.util.Collection getApplicationListeners()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.context.event.SimpleApplicationEventMulticaster:void multicastEvent(org.springframework.context.ApplicationEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.AbstractApplicationContext:void publishEvent(org.springframework.context.ApplicationEvent)"
        ]
    },
    "org.springframework.beans.factory.support.DefaultListableBeanFactory:java.util.Map getBeansOfType(java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.BeanFactoryUtils:java.util.Map beansOfTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)",
            "org.springframework.context.support.AbstractApplicationContext:java.util.Map getBeansOfType(java.lang.Class)"
        ]
    },
    "org.springframework.context.support.AbstractApplicationContext:java.lang.Object getBean(java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.access.SingletonBeanFactoryLocator:org.springframework.beans.factory.access.BeanFactoryReference useBeanFactory(java.lang.String)"
        ]
    },
    "org.springframework.ejb.support.AbstractEnterpriseBean:void loadBeanFactory()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.ejb.support.AbstractStatefulSessionBean:void loadBeanFactory()",
            "org.springframework.ejb.support.AbstractStatelessSessionBean:void ejbCreate()",
            "org.springframework.ejb.support.AbstractMessageDrivenBean:void ejbCreate()"
        ]
    },
    "org.apache.activemq.transport.http.HttpSpringEmbeddedTunnelServlet:org.apache.activemq.broker.BrokerService createBroker()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.xbean.PooledBrokerFactoryBean:void afterPropertiesSet()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:org.springframework.beans.BeanWrapper autowireConstructor(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.reflect.Constructor[],java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:java.lang.Object autowire(java.lang.Class,int,boolean)",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:org.springframework.beans.BeanWrapper createBeanInstance(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])"
        ]
    },
    "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:java.lang.Object autowire(java.lang.Class,int,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:void autowireBean(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:void autowireBeanProperties(java.lang.Object,int,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredMethodElement:java.lang.Object[] resolveCachedArguments(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredMethodElement:void inject(java.lang.Object,java.lang.String,org.springframework.beans.PropertyValues)"
        ]
    },
    "org.springframework.beans.factory.support.DefaultListableBeanFactory:java.lang.Object resolveDependency(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.ConstructorResolver:java.lang.Object resolveAutowiredArgument(org.springframework.core.MethodParameter,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)",
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor:java.lang.Object resolvedCachedArgument(java.lang.String,java.lang.Object)",
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredMethodElement:void inject(java.lang.Object,java.lang.String,org.springframework.beans.PropertyValues)",
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor:java.lang.Object autowireResource(org.springframework.beans.factory.BeanFactory,org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$LookupElement,java.lang.String)",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:void autowireByType(java.lang.String,org.springframework.beans.factory.support.AbstractBeanDefinition,org.springframework.beans.BeanWrapper,org.springframework.beans.MutablePropertyValues)",
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement:void inject(java.lang.Object,java.lang.String,org.springframework.beans.PropertyValues)"
        ]
    },
    "org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectFactory:java.lang.Object getObject()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyProvider:java.lang.Object get()"
        ]
    },
    "org.springframework.beans.factory.support.DefaultListableBeanFactory:java.lang.String[] getBeanNamesForType(java.lang.Class,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.BeanFactoryUtils:java.lang.String[] beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,boolean,boolean)",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory:java.lang.String[] getBeanNamesForType(java.lang.Class)",
            "org.springframework.context.support.DefaultLifecycleProcessor:java.util.Map getLifecycleBeans()",
            "org.springframework.context.support.AbstractApplicationContext:java.lang.String[] getBeanNamesForType(java.lang.Class,boolean,boolean)",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory:java.util.Map getBeansOfType(java.lang.Class,boolean,boolean)",
            "org.springframework.context.support.AbstractApplicationContext:void finishBeanFactoryInitialization(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)",
            "org.springframework.context.support.AbstractApplicationContext:void registerBeanPostProcessors(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)",
            "org.springframework.context.support.AbstractApplicationContext:void invokeBeanFactoryPostProcessors(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)"
        ]
    },
    "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:org.springframework.beans.BeanWrapper createBeanInstance(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:org.springframework.beans.factory.FactoryBean getNonSingletonFactoryBeanForTypeCheck(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition)",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:java.lang.Object doCreateBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:org.springframework.beans.factory.FactoryBean getSingletonFactoryBeanForTypeCheck(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition)"
        ]
    },
    "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:java.lang.Class predictBeanType(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Class[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.AbstractBeanFactory:boolean isTypeMatch(java.lang.String,java.lang.Class)",
            "org.springframework.beans.factory.support.AbstractBeanFactory:boolean isFactoryBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition)",
            "org.springframework.beans.factory.support.AbstractBeanFactory:java.lang.Class getType(java.lang.String)"
        ]
    },
    "org.springframework.beans.factory.support.DefaultListableBeanFactory:boolean isAutowireCandidate(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.factory.config.DependencyDescriptor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.DefaultListableBeanFactory:boolean isAutowireCandidate(java.lang.String,org.springframework.beans.factory.config.DependencyDescriptor)"
        ]
    },
    "org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver:boolean checkQualifiers(org.springframework.beans.factory.config.BeanDefinitionHolder,java.lang.annotation.Annotation[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver:boolean isAutowireCandidate(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.config.DependencyDescriptor)"
        ]
    },
    "org.springframework.context.support.DefaultLifecycleProcessor:void onRefresh()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.AbstractApplicationContext:void finishRefresh()"
        ]
    },
    "org.springframework.context.support.DefaultLifecycleProcessor:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.AbstractApplicationContext:void start()"
        ]
    },
    "org.springframework.context.support.DefaultLifecycleProcessor:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.AbstractApplicationContext:void stop()"
        ]
    },
    "org.springframework.context.support.DefaultLifecycleProcessor:void onClose()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.AbstractApplicationContext:void doClose()"
        ]
    },
    "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$ResourceElement:java.lang.Object getResourceToInject(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$WebServiceRefElement:java.lang.Object getResourceToInject(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.context.support.AbstractApplicationContext:void publishEvent(org.springframework.context.ApplicationEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.AbstractApplicationContext:void stop()",
            "org.springframework.context.support.AbstractApplicationContext:void doClose()",
            "org.springframework.context.support.AbstractApplicationContext:void finishRefresh()",
            "org.springframework.context.support.AbstractApplicationContext:void start()"
        ]
    },
    "org.springframework.beans.factory.BeanFactoryUtils:java.util.Map beansOfTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.BeanFactoryUtils:java.lang.Object beanOfTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)",
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor:java.util.Map findAutowireCandidates(java.lang.Class)",
            "org.springframework.beans.factory.BeanFactoryUtils:java.util.Map beansOfTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)",
            "org.springframework.beans.factory.annotation.BeanFactoryAnnotationUtils:java.lang.Object qualifiedBeanOfType(org.springframework.beans.factory.config.ConfigurableListableBeanFactory,java.lang.Class,java.lang.String)"
        ]
    },
    "org.springframework.context.support.AbstractApplicationContext:java.util.Map getBeansOfType(java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.spring.SpringBrokerContext:java.util.Map getBeansOfType(java.lang.Class)"
        ]
    },
    "org.springframework.ejb.support.AbstractStatefulSessionBean:void loadBeanFactory()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.ejb.support.AbstractStatelessSessionBean:void ejbCreate()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.ejb.support.AbstractMessageDrivenBean:void ejbCreate()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.beans.factory.support.ConstructorResolver:java.lang.Object resolveAutowiredArgument(org.springframework.core.MethodParameter,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.ConstructorResolver:java.lang.Object[] resolvePreparedArguments(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.BeanWrapper,java.lang.reflect.Member,java.lang.Object[])",
            "org.springframework.beans.factory.support.ConstructorResolver:org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder createArgumentArray(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.factory.config.ConstructorArgumentValues,org.springframework.beans.BeanWrapper,java.lang.Class[],java.lang.String[],java.lang.Object,boolean)"
        ]
    },
    "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:void autowireByType(java.lang.String,org.springframework.beans.factory.support.AbstractBeanDefinition,org.springframework.beans.BeanWrapper,org.springframework.beans.MutablePropertyValues)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:void populateBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.BeanWrapper)"
        ]
    },
    "org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyProvider:java.lang.Object get()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.beans.factory.BeanFactoryUtils:java.lang.String[] beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.BeanFactoryUtils:java.lang.String[] beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,boolean,boolean)",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory:java.util.Map findAutowireCandidates(java.lang.String,java.lang.Class,org.springframework.beans.factory.config.DependencyDescriptor)"
        ]
    },
    "org.springframework.beans.factory.support.DefaultListableBeanFactory:java.lang.String[] getBeanNamesForType(java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.DefaultListableBeanFactory:java.lang.Object getBean(java.lang.Class)",
            "org.springframework.context.support.AbstractApplicationContext:java.lang.String[] getBeanNamesForType(java.lang.Class)"
        ]
    },
    "org.springframework.context.support.AbstractApplicationContext:java.lang.String[] getBeanNamesForType(java.lang.Class,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.AbstractApplicationContext:void registerListeners()"
        ]
    },
    "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:org.springframework.beans.factory.FactoryBean getNonSingletonFactoryBeanForTypeCheck(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:java.lang.Class getTypeForFactoryBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition)"
        ]
    },
    "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:org.springframework.beans.factory.FactoryBean getSingletonFactoryBeanForTypeCheck(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:java.lang.Class getTypeForFactoryBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition)"
        ]
    },
    "org.springframework.beans.factory.support.AbstractBeanFactory:boolean isFactoryBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.AbstractBeanFactory:boolean isFactoryBean(java.lang.String)",
            "org.springframework.beans.factory.support.AbstractBeanFactory:boolean isSingleton(java.lang.String)",
            "org.springframework.beans.factory.support.AbstractBeanFactory:boolean isPrototype(java.lang.String)",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory:java.lang.String[] doGetBeanNamesForType(java.lang.Class,boolean,boolean)"
        ]
    },
    "org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver:boolean isAutowireCandidate(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.config.DependencyDescriptor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.DefaultListableBeanFactory:boolean isAutowireCandidate(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.factory.config.DependencyDescriptor)"
        ]
    },
    "org.springframework.context.support.AbstractApplicationContext:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.context.support.AbstractApplicationContext:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.context.support.AbstractApplicationContext:void doClose()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.AbstractApplicationContext$1:void run()",
            "org.springframework.context.support.AbstractApplicationContext:void close()"
        ]
    },
    "org.springframework.beans.factory.BeanFactoryUtils:java.lang.Object beanOfTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor:java.util.Map findAutowireCandidates(java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.beans.factory.annotation.BeanFactoryAnnotationUtils:java.lang.Object qualifiedBeanOfType(org.springframework.beans.factory.config.ConfigurableListableBeanFactory,java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.annotation.BeanFactoryAnnotationUtils:java.lang.Object qualifiedBeanOfType(org.springframework.beans.factory.BeanFactory,java.lang.Class,java.lang.String)"
        ]
    },
    "org.apache.activemq.spring.SpringBrokerContext:java.util.Map getBeansOfType(java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.beans.factory.support.ConstructorResolver:org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder createArgumentArray(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.factory.config.ConstructorArgumentValues,org.springframework.beans.BeanWrapper,java.lang.Class[],java.lang.String[],java.lang.Object,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.ConstructorResolver:org.springframework.beans.BeanWrapper autowireConstructor(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.reflect.Constructor[],java.lang.Object[])",
            "org.springframework.beans.factory.support.ConstructorResolver:org.springframework.beans.BeanWrapper instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])"
        ]
    },
    "org.springframework.context.support.AbstractApplicationContext:java.lang.String[] getBeanNamesForType(java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.xbean.XBeanBrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.net.URI)",
            "org.apache.activemq.xbean.BrokerFactoryBean:void afterPropertiesSet()"
        ]
    },
    "org.springframework.context.support.AbstractApplicationContext:void registerListeners()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.AbstractApplicationContext:void refresh()"
        ]
    },
    "org.springframework.beans.factory.support.AbstractBeanFactory:boolean isFactoryBean(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.AbstractBeanFactory:boolean isFactoryBean(java.lang.String)",
            "org.springframework.beans.factory.support.AbstractBeanFactory:boolean containsLocalBean(java.lang.String)",
            "org.springframework.beans.factory.support.AbstractBeanFactory:boolean containsBean(java.lang.String)",
            "org.springframework.context.support.DefaultLifecycleProcessor:java.util.Map getLifecycleBeans()",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory:void preInstantiateSingletons()",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory:boolean requiresEagerInitForType(java.lang.String)",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory:java.lang.String[] doGetBeanNamesForType(java.lang.Class,boolean,boolean)"
        ]
    },
    "org.springframework.context.support.AbstractApplicationContext$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.context.support.AbstractApplicationContext:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.xbean.BrokerFactoryBean:void destroy()",
            "org.springframework.context.access.ContextSingletonBeanFactoryLocator:void destroyDefinition(org.springframework.beans.factory.BeanFactory,java.lang.String)",
            "org.springframework.context.access.ContextBeanFactoryReference:void release()",
            "org.springframework.context.support.AbstractApplicationContext:void destroy()"
        ]
    },
    "org.springframework.beans.factory.annotation.BeanFactoryAnnotationUtils:java.lang.Object qualifiedBeanOfType(org.springframework.beans.factory.BeanFactory,java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.beans.factory.support.AbstractBeanFactory:boolean containsLocalBean(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.AbstractApplicationContext:void initApplicationEventMulticaster()",
            "org.springframework.context.support.AbstractApplicationContext:void initLifecycleProcessor()",
            "org.springframework.context.support.AbstractApplicationContext:void prepareBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)",
            "org.springframework.beans.factory.BeanFactoryUtils:java.lang.String[] beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,boolean,boolean)",
            "org.springframework.beans.factory.support.AbstractBeanFactory:boolean isBeanNameInUse(java.lang.String)",
            "org.springframework.beans.factory.BeanFactoryUtils:java.util.Map beansOfTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)",
            "org.springframework.context.support.AbstractApplicationContext:void initMessageSource()"
        ]
    },
    "org.springframework.beans.factory.support.AbstractBeanFactory:boolean containsBean(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.AbstractBeanFactory:boolean containsBean(java.lang.String)",
            "org.springframework.beans.factory.support.BeanDefinitionValueResolver:java.lang.Object resolveValueIfNecessary(java.lang.Object,java.lang.Object)",
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor:java.lang.Object autowireResource(org.springframework.beans.factory.BeanFactory,org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$LookupElement,java.lang.String)",
            "org.springframework.beans.factory.config.BeanExpressionContext:java.lang.Object getObject(java.lang.String)",
            "org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory:void autowireByName(java.lang.String,org.springframework.beans.factory.support.AbstractBeanDefinition,org.springframework.beans.BeanWrapper,org.springframework.beans.MutablePropertyValues)",
            "org.springframework.context.support.AbstractApplicationContext:void finishBeanFactoryInitialization(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)",
            "org.springframework.context.support.AbstractApplicationContext:boolean containsBean(java.lang.String)",
            "org.springframework.context.support.AbstractApplicationContext:void prepareBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)",
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor:void registerDependentBeans(java.lang.String,java.util.Set)",
            "org.springframework.beans.factory.config.BeanExpressionContext:boolean containsObject(java.lang.String)",
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredMethodElement:void inject(java.lang.Object,java.lang.String,org.springframework.beans.PropertyValues)",
            "org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$EjbRefElement:java.lang.Object getResourceToInject(java.lang.Object,java.lang.String)",
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement:void inject(java.lang.Object,java.lang.String,org.springframework.beans.PropertyValues)",
            "org.springframework.beans.factory.support.DefaultListableBeanFactory:java.lang.Object doResolveDependency(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.Class,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)"
        ]
    },
    "org.springframework.beans.factory.support.DefaultListableBeanFactory:boolean requiresEagerInitForType(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.DefaultListableBeanFactory:java.lang.String[] doGetBeanNamesForType(java.lang.Class,boolean,boolean)"
        ]
    },
    "org.apache.activemq.xbean.BrokerFactoryBean:void destroy()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.context.access.ContextSingletonBeanFactoryLocator:void destroyDefinition(org.springframework.beans.factory.BeanFactory,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.access.SingletonBeanFactoryLocator$CountingBeanFactoryReference:void release()"
        ]
    },
    "org.springframework.context.access.ContextBeanFactoryReference:void release()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.ejb.support.AbstractEnterpriseBean$BeanFactoryReferenceReleaseListener:void released()",
            "org.springframework.ejb.support.AbstractEnterpriseBean:void unloadBeanFactory()"
        ]
    },
    "org.springframework.context.support.AbstractApplicationContext:void destroy()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.context.support.AbstractApplicationContext:void prepareBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.AbstractApplicationContext:void refresh()"
        ]
    },
    "org.springframework.beans.factory.support.AbstractBeanFactory:boolean isBeanNameInUse(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.BeanDefinitionValueResolver:java.lang.String adaptInnerBeanName(java.lang.String)",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:org.springframework.beans.factory.config.BeanDefinitionHolder parseBeanDefinitionElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)",
            "org.springframework.context.support.GenericApplicationContext:boolean isBeanNameInUse(java.lang.String)"
        ]
    },
    "org.springframework.context.support.AbstractApplicationContext:boolean containsBean(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.context.support.AbstractApplicationContext$ApplicationListenerDetector:java.lang.Object postProcessAfterInitialization(java.lang.Object,java.lang.String)"
        ]
    },
    "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor:void registerDependentBeans(java.lang.String,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor:void access$200(org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor,java.lang.String,java.util.Set)"
        ]
    },
    "org.springframework.beans.factory.config.BeanExpressionContext:boolean containsObject(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.beans.factory.access.SingletonBeanFactoryLocator$CountingBeanFactoryReference:void release()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.ejb.support.AbstractEnterpriseBean$BeanFactoryReferenceReleaseListener:void released()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.ejb.support.AbstractEnterpriseBean:void unloadBeanFactory()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.ejb.support.AbstractStatefulSessionBean:void unloadBeanFactory()",
            "org.springframework.ejb.support.AbstractEnterpriseBean:void ejbRemove()"
        ]
    },
    "org.springframework.beans.factory.support.BeanDefinitionValueResolver:java.lang.String adaptInnerBeanName(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.support.BeanDefinitionValueResolver:java.lang.Object resolveInnerBean(java.lang.Object,java.lang.String,org.springframework.beans.factory.config.BeanDefinition)"
        ]
    },
    "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:org.springframework.beans.factory.config.BeanDefinitionHolder parseBeanDefinitionElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.xbean.spring.context.v2c.XBeanNamespaceHandler:org.springframework.beans.factory.config.BeanDefinitionHolder parseBeanFromExtensionElement(org.w3c.dom.Element,org.apache.xbean.spring.context.impl.MappingMetaData,java.lang.String)",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:java.lang.Object parsePropertySubElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition,java.lang.String)",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:org.springframework.beans.factory.config.BeanDefinitionHolder parseBeanDefinitionElement(org.w3c.dom.Element)",
            "org.apache.xbean.spring.context.v2c.XBeanNamespaceHandler:java.lang.Object parseChildExtensionBean(org.w3c.dom.Element)",
            "org.apache.xbean.spring.context.v2c.XBeanNamespaceHandler:java.lang.Object parseCustomMapElement(org.apache.xbean.spring.context.impl.MappingMetaData,org.w3c.dom.Element,java.lang.String)"
        ]
    },
    "org.springframework.context.support.GenericApplicationContext:boolean isBeanNameInUse(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:org.springframework.beans.factory.config.BeanDefinitionHolder parseBeanDefinitionElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)"
        ]
    },
    "org.springframework.context.support.AbstractApplicationContext$ApplicationListenerDetector:java.lang.Object postProcessAfterInitialization(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor:void access$200(org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor,java.lang.String,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredMethodElement:void inject(java.lang.Object,java.lang.String,org.springframework.beans.PropertyValues)",
            "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement:void inject(java.lang.Object,java.lang.String,org.springframework.beans.PropertyValues)"
        ]
    },
    "org.springframework.ejb.support.AbstractStatefulSessionBean:void unloadBeanFactory()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.ejb.support.AbstractEnterpriseBean:void ejbRemove()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.xbean.spring.context.v2c.XBeanNamespaceHandler:org.springframework.beans.factory.config.BeanDefinitionHolder parseBeanFromExtensionElement(org.w3c.dom.Element,org.apache.xbean.spring.context.impl.MappingMetaData,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.xbean.spring.context.v2c.XBeanNamespaceHandler:org.springframework.beans.factory.config.BeanDefinitionHolder parseBeanFromExtensionElement(org.w3c.dom.Element)",
            "org.apache.xbean.spring.context.v2c.XBeanNamespaceHandler:org.springframework.beans.factory.config.BeanDefinitionHolder parseBeanFromExtensionElement(org.w3c.dom.Element,java.lang.String,java.lang.String)"
        ]
    },
    "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:java.lang.Object parsePropertySubElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:java.lang.Object parseKeyElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition,java.lang.String)",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:java.util.Map parseMapElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)",
            "org.apache.xbean.spring.context.v2c.XBeanBeanDefinitionParserDelegate:java.lang.Object parsePropertySubElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition,java.lang.String)",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:java.lang.Object parsePropertySubElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:void parseCollectionElements(org.w3c.dom.NodeList,java.util.Collection,org.springframework.beans.factory.config.BeanDefinition,java.lang.String)"
        ]
    },
    "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:org.springframework.beans.factory.config.BeanDefinitionHolder parseBeanDefinitionElement(org.w3c.dom.Element)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader:void processBeanDefinition(org.w3c.dom.Element,org.springframework.beans.factory.xml.BeanDefinitionParserDelegate)",
            "org.apache.xbean.spring.context.v2.XBeanBeanDefinitionDocumentReader:void processBeanDefinition(org.w3c.dom.Element,org.springframework.beans.factory.xml.BeanDefinitionParserDelegate)"
        ]
    },
    "org.apache.xbean.spring.context.v2c.XBeanNamespaceHandler:java.lang.Object parseChildExtensionBean(org.w3c.dom.Element)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.xbean.spring.context.v2c.XBeanNamespaceHandler:void addNestedPropertyElements(org.springframework.beans.factory.config.BeanDefinitionHolder,org.apache.xbean.spring.context.impl.MappingMetaData,java.lang.String,org.w3c.dom.Element)",
            "org.apache.xbean.spring.context.v2c.XBeanNamespaceHandler:java.lang.Object parseNestedPropertyViaIntrospection(org.apache.xbean.spring.context.impl.MappingMetaData,org.w3c.dom.Element,java.lang.String,java.lang.Class)"
        ]
    },
    "org.apache.xbean.spring.context.v2c.XBeanNamespaceHandler:java.lang.Object parseCustomMapElement(org.apache.xbean.spring.context.impl.MappingMetaData,org.w3c.dom.Element,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.xbean.spring.context.v2c.XBeanNamespaceHandler:java.lang.Object parseNestedPropertyViaIntrospection(org.apache.xbean.spring.context.impl.MappingMetaData,org.w3c.dom.Element,java.lang.String,java.lang.Class)"
        ]
    },
    "org.apache.xbean.spring.context.v2c.XBeanNamespaceHandler:org.springframework.beans.factory.config.BeanDefinitionHolder parseBeanFromExtensionElement(org.w3c.dom.Element)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.xbean.spring.context.v2c.XBeanNamespaceHandler:org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)",
            "org.apache.xbean.spring.context.v2c.XBeanNamespaceHandler:java.lang.Object parseCustomMapElement(org.apache.xbean.spring.context.impl.MappingMetaData,org.w3c.dom.Element,java.lang.String)"
        ]
    },
    "org.apache.xbean.spring.context.v2c.XBeanNamespaceHandler:org.springframework.beans.factory.config.BeanDefinitionHolder parseBeanFromExtensionElement(org.w3c.dom.Element,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.xbean.spring.context.v2c.XBeanNamespaceHandler:void addNestedPropertyElements(org.springframework.beans.factory.config.BeanDefinitionHolder,org.apache.xbean.spring.context.impl.MappingMetaData,java.lang.String,org.w3c.dom.Element)"
        ]
    },
    "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:java.lang.Object parseKeyElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:java.util.Map parseMapElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)"
        ]
    },
    "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:java.util.Map parseMapElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.xml.UtilNamespaceHandler$MapBeanDefinitionParser:void doParse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext,org.springframework.beans.factory.support.BeanDefinitionBuilder)",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:java.lang.Object parsePropertySubElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition,java.lang.String)"
        ]
    },
    "org.apache.xbean.spring.context.v2c.XBeanBeanDefinitionParserDelegate:java.lang.Object parsePropertySubElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:java.lang.Object parseKeyElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition,java.lang.String)",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:java.util.Map parseMapElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:java.lang.Object parsePropertySubElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:void parseCollectionElements(org.w3c.dom.NodeList,java.util.Collection,org.springframework.beans.factory.config.BeanDefinition,java.lang.String)"
        ]
    },
    "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:java.lang.Object parsePropertySubElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:java.lang.Object parsePropertyValue(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition,java.lang.String)",
            "org.apache.xbean.spring.context.v2c.XBeanNamespaceHandler:java.lang.Object parseChildExtensionBean(org.w3c.dom.Element)",
            "org.apache.xbean.spring.context.v2c.XBeanNamespaceHandler:java.lang.Object parseCustomMapElement(org.apache.xbean.spring.context.impl.MappingMetaData,org.w3c.dom.Element,java.lang.String)"
        ]
    },
    "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:void parseCollectionElements(org.w3c.dom.NodeList,java.util.Collection,org.springframework.beans.factory.config.BeanDefinition,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:java.lang.Object parseArrayElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:java.util.List parseListElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:java.util.Set parseSetElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)"
        ]
    },
    "org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader:void processBeanDefinition(org.w3c.dom.Element,org.springframework.beans.factory.xml.BeanDefinitionParserDelegate)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader:void parseDefaultElement(org.w3c.dom.Element,org.springframework.beans.factory.xml.BeanDefinitionParserDelegate)"
        ]
    },
    "org.apache.xbean.spring.context.v2.XBeanBeanDefinitionDocumentReader:void processBeanDefinition(org.w3c.dom.Element,org.springframework.beans.factory.xml.BeanDefinitionParserDelegate)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader:void parseDefaultElement(org.w3c.dom.Element,org.springframework.beans.factory.xml.BeanDefinitionParserDelegate)",
            "org.apache.xbean.spring.context.v2.XBeanBeanDefinitionDocumentReader:void parseDefaultElement(org.w3c.dom.Element,org.springframework.beans.factory.xml.BeanDefinitionParserDelegate)"
        ]
    },
    "org.apache.xbean.spring.context.v2c.XBeanNamespaceHandler:void addNestedPropertyElements(org.springframework.beans.factory.config.BeanDefinitionHolder,org.apache.xbean.spring.context.impl.MappingMetaData,java.lang.String,org.w3c.dom.Element)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.xbean.spring.context.v2c.XBeanNamespaceHandler:org.springframework.beans.factory.config.BeanDefinitionHolder parseBeanFromExtensionElement(org.w3c.dom.Element,org.apache.xbean.spring.context.impl.MappingMetaData,java.lang.String)"
        ]
    },
    "org.apache.xbean.spring.context.v2c.XBeanNamespaceHandler:java.lang.Object parseNestedPropertyViaIntrospection(org.apache.xbean.spring.context.impl.MappingMetaData,org.w3c.dom.Element,java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.xbean.spring.context.v2c.XBeanNamespaceHandler:java.lang.Object tryParseNestedPropertyViaIntrospection(org.apache.xbean.spring.context.impl.MappingMetaData,java.lang.String,org.w3c.dom.Element)"
        ]
    },
    "org.apache.xbean.spring.context.v2c.XBeanNamespaceHandler:org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.beans.factory.xml.UtilNamespaceHandler$MapBeanDefinitionParser:void doParse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext,org.springframework.beans.factory.support.BeanDefinitionBuilder)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:java.lang.Object parsePropertyValue(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:void parsePropertyElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:void parseConstructorArgElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)"
        ]
    },
    "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:java.lang.Object parseArrayElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:java.lang.Object parsePropertySubElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition,java.lang.String)"
        ]
    },
    "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:java.util.List parseListElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:java.lang.Object parsePropertySubElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition,java.lang.String)",
            "org.apache.xbean.spring.context.v2c.XBeanNamespaceHandler:java.lang.Object parseListElement(org.w3c.dom.Element,java.lang.String)",
            "org.springframework.beans.factory.xml.UtilNamespaceHandler$ListBeanDefinitionParser:void doParse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext,org.springframework.beans.factory.support.BeanDefinitionBuilder)"
        ]
    },
    "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:java.util.Set parseSetElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.xml.UtilNamespaceHandler$SetBeanDefinitionParser:void doParse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext,org.springframework.beans.factory.support.BeanDefinitionBuilder)",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:java.lang.Object parsePropertySubElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition,java.lang.String)"
        ]
    },
    "org.apache.xbean.spring.context.v2c.XBeanNamespaceHandler:java.lang.Object tryParseNestedPropertyViaIntrospection(org.apache.xbean.spring.context.impl.MappingMetaData,java.lang.String,org.w3c.dom.Element)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.xbean.spring.context.v2c.XBeanNamespaceHandler:void addNestedPropertyElements(org.springframework.beans.factory.config.BeanDefinitionHolder,org.apache.xbean.spring.context.impl.MappingMetaData,java.lang.String,org.w3c.dom.Element)"
        ]
    },
    "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:void parsePropertyElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:void parsePropertyElements(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)"
        ]
    },
    "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:void parseConstructorArgElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:void parseConstructorArgElements(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)"
        ]
    },
    "org.apache.xbean.spring.context.v2c.XBeanNamespaceHandler:java.lang.Object parseListElement(org.w3c.dom.Element,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.xbean.spring.context.v2c.XBeanNamespaceHandler:void addNestedPropertyElements(org.springframework.beans.factory.config.BeanDefinitionHolder,org.apache.xbean.spring.context.impl.MappingMetaData,java.lang.String,org.w3c.dom.Element)",
            "org.apache.xbean.spring.context.v2c.XBeanNamespaceHandler:java.lang.Object parseNestedPropertyViaIntrospection(org.apache.xbean.spring.context.impl.MappingMetaData,org.w3c.dom.Element,java.lang.String,java.lang.Class)"
        ]
    },
    "org.springframework.beans.factory.xml.UtilNamespaceHandler$ListBeanDefinitionParser:void doParse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext,org.springframework.beans.factory.support.BeanDefinitionBuilder)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.beans.factory.xml.UtilNamespaceHandler$SetBeanDefinitionParser:void doParse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext,org.springframework.beans.factory.support.BeanDefinitionBuilder)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:void parsePropertyElements(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.scripting.config.ScriptBeanDefinitionParser:org.springframework.beans.factory.support.AbstractBeanDefinition parseInternal(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)",
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:org.springframework.beans.factory.support.AbstractBeanDefinition parseBeanDefinitionElement(org.w3c.dom.Element,java.lang.String,org.springframework.beans.factory.config.BeanDefinition)"
        ]
    },
    "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:void parseConstructorArgElements(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:org.springframework.beans.factory.support.AbstractBeanDefinition parseBeanDefinitionElement(org.w3c.dom.Element,java.lang.String,org.springframework.beans.factory.config.BeanDefinition)"
        ]
    },
    "org.springframework.scripting.config.ScriptBeanDefinitionParser:org.springframework.beans.factory.support.AbstractBeanDefinition parseInternal(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:org.springframework.beans.factory.support.AbstractBeanDefinition parseBeanDefinitionElement(org.w3c.dom.Element,java.lang.String,org.springframework.beans.factory.config.BeanDefinition)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:org.springframework.beans.factory.config.BeanDefinitionHolder parseBeanDefinitionElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)",
            "org.apache.xbean.spring.context.v2c.XBeanBeanDefinitionParserDelegate:org.springframework.beans.factory.support.AbstractBeanDefinition parseBeanDefinitionElement(org.w3c.dom.Element,java.lang.String,org.springframework.beans.factory.config.BeanDefinition)"
        ]
    },
    "org.apache.xbean.spring.context.v2c.XBeanBeanDefinitionParserDelegate:org.springframework.beans.factory.support.AbstractBeanDefinition parseBeanDefinitionElement(org.w3c.dom.Element,java.lang.String,org.springframework.beans.factory.config.BeanDefinition)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.springframework.beans.factory.xml.BeanDefinitionParserDelegate:org.springframework.beans.factory.config.BeanDefinitionHolder parseBeanDefinitionElement(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)"
        ]
    }
}