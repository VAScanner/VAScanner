{
    "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])": {
        "isVulRoot": true,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": [
            "com.google.crypto.tink.mac.MacFactory$1:void verifyMac(byte[],byte[])",
            "com.google.crypto.tink.signature.PublicKeyVerifyFactory$1:void verify(byte[],byte[])",
            "com.google.crypto.tink.hybrid.HybridDecryptFactory$1:byte[] decrypt(byte[],byte[])",
            "com.google.crypto.tink.aead.AeadFactory$1:byte[] decrypt(byte[],byte[])",
            "com.google.crypto.tink.daead.DeterministicAeadFactory$1:byte[] decryptDeterministically(byte[],byte[])",
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(com.google.crypto.tink.proto.Keyset$Key)",
            "com.google.crypto.tink.PrimitiveSet:java.util.List getRawPrimitives()"
        ]
    },
    "com.google.crypto.tink.mac.MacFactory$1:void verifyMac(byte[],byte[])": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": []
    },
    "com.google.crypto.tink.signature.PublicKeyVerifyFactory$1:void verify(byte[],byte[])": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": []
    },
    "com.google.crypto.tink.hybrid.HybridDecryptFactory$1:byte[] decrypt(byte[],byte[])": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": []
    },
    "com.google.crypto.tink.aead.AeadFactory$1:byte[] decrypt(byte[],byte[])": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": []
    },
    "com.google.crypto.tink.daead.DeterministicAeadFactory$1:byte[] decryptDeterministically(byte[],byte[])": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": []
    },
    "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(com.google.crypto.tink.proto.Keyset$Key)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": []
    },
    "com.google.crypto.tink.PrimitiveSet:java.util.List getRawPrimitives()": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": [
            "com.google.crypto.tink.streamingaead.ReadableByteChannelDecrypter:int read(java.nio.ByteBuffer)",
            "com.google.crypto.tink.mac.MacFactory$1:void verifyMac(byte[],byte[])",
            "com.google.crypto.tink.signature.PublicKeyVerifyFactory$1:void verify(byte[],byte[])",
            "com.google.crypto.tink.hybrid.HybridDecryptFactory$1:byte[] decrypt(byte[],byte[])",
            "com.google.crypto.tink.aead.AeadFactory$1:byte[] decrypt(byte[],byte[])",
            "com.google.crypto.tink.streamingaead.InputStreamDecrypter:int read(byte[],int,int)",
            "com.google.crypto.tink.streamingaead.SeekableByteChannelDecrypter:int read(java.nio.ByteBuffer)",
            "com.google.crypto.tink.daead.DeterministicAeadFactory$1:byte[] decryptDeterministically(byte[],byte[])"
        ]
    },
    "com.google.crypto.tink.streamingaead.ReadableByteChannelDecrypter:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": []
    },
    "com.google.crypto.tink.streamingaead.InputStreamDecrypter:int read(byte[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": [
            "com.google.crypto.tink.streamingaead.InputStreamDecrypter:int read(byte[])"
        ]
    },
    "com.google.crypto.tink.streamingaead.SeekableByteChannelDecrypter:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": []
    },
    "com.google.crypto.tink.streamingaead.InputStreamDecrypter:int read(byte[])": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": [
            "com.google.crypto.tink.streamingaead.InputStreamDecrypter:int read()"
        ]
    },
    "com.google.crypto.tink.streamingaead.InputStreamDecrypter:int read()": {
        "isVulRoot": false,
        "srcRoot": [
            "com.google.crypto.tink.PrimitiveSet:java.util.List getPrimitive(byte[])"
        ],
        "vulCaller": []
    }
}