{
    "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.DataHolder)": {
        "isVulRoot": true,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.DataHolder)"
        ],
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(com.thoughtworks.xstream.io.HierarchicalStreamReader)"
        ]
    },
    "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(com.thoughtworks.xstream.io.HierarchicalStreamReader)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.DataHolder)"
        ],
        "vulCaller": [
            "com.thoughtworks.xstream.XStreamer:java.lang.Object fromXML(com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.io.Reader,com.thoughtworks.xstream.security.TypePermission[])",
            "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(java.io.Reader)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(java.io.InputStream)"
        ]
    },
    "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)": {
        "isVulRoot": true,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader)",
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.net.URL,java.lang.Object)",
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.Reader)",
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.InputStream)",
            "com.thoughtworks.xstream.XStream$4:java.lang.Object readFromStream()",
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.InputStream,java.lang.Object)",
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.Reader,java.lang.Object)",
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.File,java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.converters.collections.CollectionConverter:void addCurrentElementToCollection(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Collection,java.util.Collection)": {
        "isVulRoot": true,
        "srcRoot": [
            "com.thoughtworks.xstream.converters.collections.CollectionConverter:void addCurrentElementToCollection(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Collection,java.util.Collection)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void putCurrentEntryIntoMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map,java.util.Map)"
        ],
        "vulCaller": [
            "com.thoughtworks.xstream.converters.collections.CollectionConverter:void populateCollection(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Collection,java.util.Collection)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.collections.CollectionConverter:void populateCollection(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Collection,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.converters.collections.CollectionConverter:void addCurrentElementToCollection(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Collection,java.util.Collection)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void putCurrentEntryIntoMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map,java.util.Map)"
        ],
        "vulCaller": [
            "com.thoughtworks.xstream.converters.collections.CollectionConverter:void populateCollection(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Collection)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.converters.collections.CollectionConverter:void addCurrentElementToCollection(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Collection,java.util.Collection)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void putCurrentEntryIntoMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map,java.util.Map)"
        ],
        "vulCaller": []
    },
    "com.thoughtworks.xstream.converters.extended.NamedMapConverter:void populateMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map,java.util.Map)": {
        "isVulRoot": true,
        "srcRoot": [
            "com.thoughtworks.xstream.converters.extended.NamedMapConverter:void populateMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map,java.util.Map)"
        ],
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)": {
        "isVulRoot": true,
        "srcRoot": [
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": [
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convertAnother(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convertAnother(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": [
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convertAnother(java.lang.Object,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": [
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convertAnother(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.collections.MapConverter:void putCurrentEntryIntoMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map,java.util.Map)": {
        "isVulRoot": true,
        "srcRoot": [
            "com.thoughtworks.xstream.converters.collections.MapConverter:void putCurrentEntryIntoMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map,java.util.Map)",
            "com.thoughtworks.xstream.converters.collections.CollectionConverter:void addCurrentElementToCollection(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Collection,java.util.Collection)"
        ],
        "vulCaller": [
            "com.thoughtworks.xstream.converters.collections.MapConverter:void populateMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map,java.util.Map)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void populateTreeMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.TreeMap,java.util.Comparator)"
        ]
    },
    "com.thoughtworks.xstream.converters.collections.MapConverter:void populateMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.converters.collections.MapConverter:void putCurrentEntryIntoMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map,java.util.Map)",
            "com.thoughtworks.xstream.converters.collections.CollectionConverter:void addCurrentElementToCollection(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Collection,java.util.Collection)"
        ],
        "vulCaller": [
            "com.thoughtworks.xstream.converters.collections.MapConverter:void populateMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void populateTreeMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.TreeMap,java.util.Comparator)"
        ]
    },
    "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void populateTreeMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.TreeMap,java.util.Comparator)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.converters.collections.MapConverter:void putCurrentEntryIntoMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map,java.util.Map)",
            "com.thoughtworks.xstream.converters.collections.CollectionConverter:void addCurrentElementToCollection(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Collection,java.util.Collection)"
        ],
        "vulCaller": [
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.XStreamer:java.lang.Object fromXML(com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.io.Reader,com.thoughtworks.xstream.security.TypePermission[])": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.DataHolder)"
        ],
        "vulCaller": [
            "com.thoughtworks.xstream.XStreamer:java.lang.Object fromXML(com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.lang.String,com.thoughtworks.xstream.security.TypePermission[])",
            "com.thoughtworks.xstream.XStreamer:java.lang.Object fromXML(java.io.Reader,com.thoughtworks.xstream.security.TypePermission[])",
            "com.thoughtworks.xstream.XStreamer:java.lang.Object fromXML(com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.io.Reader)"
        ]
    },
    "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.DataHolder)"
        ],
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(java.io.InputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.DataHolder)"
        ],
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.net.URL,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.net.URL)"
        ]
    },
    "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.lang.String)",
            "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy:java.lang.Object readFile(java.io.File)"
        ]
    },
    "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.InputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStream$4:java.lang.Object readFromStream()": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int readUnsignedByte()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:java.lang.String readUTF()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:float readFloat()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:java.lang.Object readObjectOverride()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:byte readByte()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:long readLong()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:boolean readBoolean()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:short readShort()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int readUnsignedShort()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:void readFully(byte[],int,int)",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int readInt()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int read(byte[],int,int)",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:double readDouble()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:char readChar()"
        ]
    },
    "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.InputStream,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.Reader,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.lang.String,java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.File,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.File)"
        ]
    },
    "com.thoughtworks.xstream.converters.collections.CollectionConverter:void populateCollection(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.converters.collections.CollectionConverter:void addCurrentElementToCollection(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Collection,java.util.Collection)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void putCurrentEntryIntoMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map,java.util.Map)"
        ],
        "vulCaller": [
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter$1:void populateMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map,java.util.Map)",
            "com.thoughtworks.xstream.converters.collections.CollectionConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convertAnother(java.lang.Object,java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": [
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object start(com.thoughtworks.xstream.converters.DataHolder)"
        ]
    },
    "com.thoughtworks.xstream.converters.collections.MapConverter:void populateMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.converters.collections.MapConverter:void putCurrentEntryIntoMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map,java.util.Map)",
            "com.thoughtworks.xstream.converters.collections.CollectionConverter:void addCurrentElementToCollection(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Collection,java.util.Collection)"
        ],
        "vulCaller": [
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.collections.TreeMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.converters.collections.MapConverter:void putCurrentEntryIntoMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map,java.util.Map)",
            "com.thoughtworks.xstream.converters.collections.CollectionConverter:void addCurrentElementToCollection(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Collection,java.util.Collection)"
        ],
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStreamer:java.lang.Object fromXML(com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.lang.String,com.thoughtworks.xstream.security.TypePermission[])": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.DataHolder)"
        ],
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStreamer:java.lang.Object fromXML(java.io.Reader,com.thoughtworks.xstream.security.TypePermission[])": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.DataHolder)"
        ],
        "vulCaller": [
            "com.thoughtworks.xstream.XStreamer:java.lang.Object fromXML(java.lang.String,com.thoughtworks.xstream.security.TypePermission[])"
        ]
    },
    "com.thoughtworks.xstream.XStreamer:java.lang.Object fromXML(com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.DataHolder)"
        ],
        "vulCaller": [
            "com.thoughtworks.xstream.XStreamer:java.lang.Object fromXML(com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.lang.String)",
            "com.thoughtworks.xstream.XStreamer:java.lang.Object fromXML(java.io.Reader)"
        ]
    },
    "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.net.URL)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": []
    },
    "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy:java.lang.Object readFile(java.io.File)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": [
            "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy:java.lang.Object remove(java.lang.Object)",
            "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy:java.lang.Object get(java.lang.Object)",
            "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy:java.lang.Object access$500(com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy,java.io.File)"
        ]
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int readUnsignedByte()": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int read()"
        ]
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:java.lang.String readUTF()": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:float readFloat()": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:java.lang.Object readObjectOverride()": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:byte readByte()": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:long readLong()": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:boolean readBoolean()": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:short readShort()": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int readUnsignedShort()": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:void readFully(byte[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:void readFully(byte[])"
        ]
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int readInt()": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int read(byte[])"
        ]
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:double readDouble()": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:char readChar()": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.File)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": []
    },
    "com.thoughtworks.xstream.converters.collections.TreeSetConverter$1:void populateMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.converters.collections.CollectionConverter:void addCurrentElementToCollection(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Collection,java.util.Collection)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void putCurrentEntryIntoMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map,java.util.Map)"
        ],
        "vulCaller": [
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void populateTreeMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.TreeMap,java.util.Comparator)"
        ]
    },
    "com.thoughtworks.xstream.converters.collections.CollectionConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.converters.collections.CollectionConverter:void addCurrentElementToCollection(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Collection,java.util.Collection)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void putCurrentEntryIntoMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map,java.util.Map)"
        ],
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object start(com.thoughtworks.xstream.converters.DataHolder)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": [
            "com.thoughtworks.xstream.core.AbstractTreeMarshallingStrategy:java.lang.Object unmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.DataHolder,com.thoughtworks.xstream.converters.ConverterLookup,com.thoughtworks.xstream.mapper.Mapper)"
        ]
    },
    "com.thoughtworks.xstream.converters.enums.EnumMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.converters.collections.MapConverter:void putCurrentEntryIntoMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map,java.util.Map)",
            "com.thoughtworks.xstream.converters.collections.CollectionConverter:void addCurrentElementToCollection(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Collection,java.util.Collection)"
        ],
        "vulCaller": []
    },
    "com.thoughtworks.xstream.converters.collections.MapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.converters.collections.MapConverter:void putCurrentEntryIntoMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map,java.util.Map)",
            "com.thoughtworks.xstream.converters.collections.CollectionConverter:void addCurrentElementToCollection(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Collection,java.util.Collection)"
        ],
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStreamer:java.lang.Object fromXML(java.lang.String,com.thoughtworks.xstream.security.TypePermission[])": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.DataHolder)"
        ],
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStreamer:java.lang.Object fromXML(com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.DataHolder)"
        ],
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStreamer:java.lang.Object fromXML(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.DataHolder)"
        ],
        "vulCaller": [
            "com.thoughtworks.xstream.XStreamer:java.lang.Object fromXML(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy:java.lang.Object remove(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": []
    },
    "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": [
            "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy:java.lang.Object put(java.lang.Object,java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy:java.lang.Object access$500(com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy,java.io.File)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": [
            "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$XmlMapEntriesIterator$1:java.lang.Object getValue()"
        ]
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int read()": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:void readFully(byte[])": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int read(byte[])": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.AbstractTreeMarshallingStrategy:java.lang.Object unmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.DataHolder,com.thoughtworks.xstream.converters.ConverterLookup,com.thoughtworks.xstream.mapper.Mapper)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)"
        ]
    },
    "com.thoughtworks.xstream.XStreamer:java.lang.Object fromXML(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.DataHolder)"
        ],
        "vulCaller": []
    },
    "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy:java.lang.Object put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": [
            "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$XmlMapEntriesIterator$1:java.lang.Object setValue(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$XmlMapEntriesIterator$1:java.lang.Object getValue()": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": [
            "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$XmlMapEntriesIterator$1:boolean equals(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$XmlMapEntriesIterator$1:java.lang.Object setValue(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": []
    },
    "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$XmlMapEntriesIterator$1:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ],
        "vulCaller": []
    }
}