{
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)": {
        "isVulRoot": true,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection$1:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection$1:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void onControlCommand(org.apache.activemq.command.ControlCommand)": {
        "isVulRoot": true,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:void onControlCommand(org.apache.activemq.command.ControlCommand)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$2:org.apache.activemq.command.Response processControlCommand(org.apache.activemq.command.ControlCommand)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection$2:org.apache.activemq.command.Response processControlCommand(org.apache.activemq.command.ControlCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:void onControlCommand(org.apache.activemq.command.ControlCommand)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)": {
        "isVulRoot": true,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void send(org.apache.activemq.ActiveMQMessageProducer,org.apache.activemq.command.ActiveMQDestination,javax.jms.Message,int,int,long,org.apache.activemq.usage.MemoryUsage,int)",
            "org.apache.activemq.ActiveMQSession:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.TransactionContext:void rollback()",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.ActiveMQTempDestination createTempDestination(boolean)",
            "org.apache.activemq.ActiveMQConnection:void destroyDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.ActiveMQConnection:void deleteTempDestination(org.apache.activemq.command.ActiveMQTempDestination)",
            "org.apache.activemq.ActiveMQInputStream:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,boolean,java.lang.String,int)",
            "org.apache.activemq.ActiveMQConnection:void unsubscribe(java.lang.String)",
            "org.apache.activemq.ActiveMQConnection:void send(org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQMessage,org.apache.activemq.command.MessageId,int,int,long,boolean)",
            "org.apache.activemq.ActiveMQInputStream:void close()",
            "org.apache.activemq.AdvisoryConsumer:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.ActiveMQConnection:void ensureConnectionInfoSent()",
            "org.apache.activemq.TransactionContext:org.apache.activemq.command.Response syncSendPacketWithInterruptionHandling(org.apache.activemq.command.Command)",
            "org.apache.activemq.TransactionContext:javax.transaction.xa.Xid[] recover(int)",
            "org.apache.activemq.ActiveMQConnection:void cleanup()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void send(org.apache.activemq.ActiveMQMessageProducer,org.apache.activemq.command.ActiveMQDestination,javax.jms.Message,int,int,long,org.apache.activemq.usage.MemoryUsage,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageProducer:void send(javax.jms.Destination,javax.jms.Message,int,int,long)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void sendAck(org.apache.activemq.command.MessageAck,boolean)",
            "org.apache.activemq.ActiveMQMessageConsumer:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean,javax.jms.MessageListener)"
        ]
    },
    "org.apache.activemq.TransactionContext:void rollback()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void rollback()",
            "org.apache.activemq.TransactionContext:void commit()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.ActiveMQTempDestination createTempDestination(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.TemporaryQueue createTemporaryQueue()",
            "org.apache.activemq.ActiveMQSession:javax.jms.TemporaryTopic createTemporaryTopic()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void destroyDestination(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:void deleteTempDestination(org.apache.activemq.command.ActiveMQTempDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQTempDestination:void delete()"
        ]
    },
    "org.apache.activemq.ActiveMQInputStream:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,boolean,java.lang.String,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:java.io.InputStream doCreateInputStream(javax.jms.Destination,java.lang.String,boolean,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void unsubscribe(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void unsubscribe(java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void send(org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQMessage,org.apache.activemq.command.MessageId,int,int,long,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQOutputStream:void send(org.apache.activemq.command.ActiveMQMessage,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQInputStream:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.AdvisoryConsumer:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void ensureConnectionInfoSent()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void ensureConnectionInfoSent()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void begin()",
            "org.apache.activemq.ActiveMQConnection:java.io.InputStream doCreateInputStream(javax.jms.Destination,java.lang.String,boolean,java.lang.String)",
            "org.apache.activemq.ActiveMQConnection:java.io.OutputStream createOutputStream(javax.jms.Destination,java.util.Map,int,int,long)",
            "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createDurableConnectionConsumer(javax.jms.Topic,java.lang.String,java.lang.String,javax.jms.ServerSessionPool,int,boolean)",
            "org.apache.activemq.ActiveMQConnection:void start()",
            "org.apache.activemq.TransactionContext:void commit(javax.transaction.xa.Xid,boolean)",
            "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Destination,java.lang.String,javax.jms.ServerSessionPool,int,boolean)",
            "org.apache.activemq.ActiveMQConnection:void destroyDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.ActiveMQXAConnection:javax.jms.Session createSession(boolean,int)",
            "org.apache.activemq.ActiveMQConnection:java.lang.String getInitializedClientID()",
            "org.apache.activemq.TransactionContext:void setXid(javax.transaction.xa.Xid)",
            "org.apache.activemq.ActiveMQConnection:void setClientID(java.lang.String)",
            "org.apache.activemq.ActiveMQConnection:javax.jms.Session createSession(boolean,int)",
            "org.apache.activemq.TransactionContext:javax.transaction.xa.Xid[] recover(int)",
            "org.apache.activemq.TransactionContext:void rollback(javax.transaction.xa.Xid)"
        ]
    },
    "org.apache.activemq.TransactionContext:org.apache.activemq.command.Response syncSendPacketWithInterruptionHandling(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.TransactionContext:int prepare(javax.transaction.xa.Xid)",
            "org.apache.activemq.TransactionContext:void setXid(javax.transaction.xa.Xid)",
            "org.apache.activemq.TransactionContext:void commit(javax.transaction.xa.Xid,boolean)",
            "org.apache.activemq.TransactionContext:void forget(javax.transaction.xa.Xid)",
            "org.apache.activemq.TransactionContext:void commit()",
            "org.apache.activemq.TransactionContext:void rollback(javax.transaction.xa.Xid)"
        ]
    },
    "org.apache.activemq.TransactionContext:javax.transaction.xa.Xid[] recover(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:void cleanup()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$5:void run()"
        ]
    },
    "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransport:void dispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransport:void dispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransport:void dispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.udp.ResponseRedirectInterceptor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void sendToActiveMQ(org.apache.activemq.command.Command,org.apache.activemq.transport.stomp.ResponseHandler)",
            "org.apache.activemq.transport.stomp.StompSubscription:void onMessageDispatch(org.apache.activemq.command.MessageDispatch)"
        ]
    },
    "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransport:void dispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransport:void dispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransport:void dispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransport:void dispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageProducer:void send(javax.jms.Destination,javax.jms.Message,int,int,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageProducerSupport:void send(javax.jms.Message)",
            "org.apache.activemq.ActiveMQMessageProducerSupport:void send(javax.jms.Destination,javax.jms.Message)",
            "org.apache.activemq.ActiveMQQueueSender:void send(javax.jms.Queue,javax.jms.Message,int,int,long)",
            "org.apache.activemq.ActiveMQTopicPublisher:void publish(javax.jms.Topic,javax.jms.Message,int,int,long)",
            "org.apache.activemq.ActiveMQMessageProducerSupport:void send(javax.jms.Message,int,int,long)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void sendAck(org.apache.activemq.command.MessageAck,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void sendAck(org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.ActiveMQMessageConsumer:void rollback()",
            "org.apache.activemq.ActiveMQMessageConsumer$4:void run()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean,javax.jms.MessageListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean,javax.jms.MessageListener)",
            "org.apache.activemq.ActiveMQQueueReceiver:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,int,int,boolean)",
            "org.apache.activemq.ActiveMQTopicSubscriber:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean)",
            "org.apache.activemq.ActiveMQQueueBrowser$1:void <init>(org.apache.activemq.ActiveMQQueueBrowser,org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean,javax.jms.MessageListener)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void rollback()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void dispose()",
            "org.apache.activemq.ActiveMQQueueSession:void rollback()",
            "org.apache.activemq.ActiveMQTopicSession:void rollback()"
        ]
    },
    "org.apache.activemq.TransactionContext:void commit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void commit()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.TemporaryQueue createTemporaryQueue()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.TemporaryQueue createTemporaryQueue()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.TemporaryTopic createTemporaryTopic()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TemporaryTopic createTemporaryTopic()"
        ]
    },
    "org.apache.activemq.command.ActiveMQTempDestination:void delete()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:java.io.InputStream doCreateInputStream(javax.jms.Destination,java.lang.String,boolean,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:java.io.InputStream createDurableInputStream(javax.jms.Topic,java.lang.String,java.lang.String,boolean)",
            "org.apache.activemq.ActiveMQConnection:java.io.InputStream createInputStream(javax.jms.Destination,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void unsubscribe(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:void unsubscribe(java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQOutputStream:void send(org.apache.activemq.command.ActiveMQMessage,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQOutputStream:void flushBuffer()",
            "org.apache.activemq.ActiveMQOutputStream:void close()"
        ]
    },
    "org.apache.activemq.TransactionContext:void begin()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void doStartTransaction()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:java.io.OutputStream createOutputStream(javax.jms.Destination,java.util.Map,int,int,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:java.io.OutputStream createOutputStream(javax.jms.Destination)",
            "org.apache.activemq.ActiveMQConnection:java.io.OutputStream createNonPersistentOutputStream(javax.jms.Destination)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createDurableConnectionConsumer(javax.jms.Topic,java.lang.String,java.lang.String,javax.jms.ServerSessionPool,int,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createDurableConnectionConsumer(javax.jms.Topic,java.lang.String,java.lang.String,javax.jms.ServerSessionPool,int)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.util.CommandAgent:javax.jms.Connection getConnection()"
        ]
    },
    "org.apache.activemq.TransactionContext:void commit(javax.transaction.xa.Xid,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Destination,java.lang.String,javax.jms.ServerSessionPool,int,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Topic,java.lang.String,javax.jms.ServerSessionPool,int)",
            "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Queue,java.lang.String,javax.jms.ServerSessionPool,int)",
            "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Destination,java.lang.String,javax.jms.ServerSessionPool,int)"
        ]
    },
    "org.apache.activemq.ActiveMQXAConnection:javax.jms.Session createSession(boolean,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQXAConnection:javax.jms.XATopicSession createXATopicSession()",
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.util.CommandAgent:void start()",
            "org.apache.activemq.ActiveMQXAConnection:javax.jms.XASession createXASession()",
            "org.apache.activemq.ActiveMQXAConnection:javax.jms.XAQueueSession createXAQueueSession()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:java.lang.String getInitializedClientID()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.TransactionContext:void setXid(javax.transaction.xa.Xid)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void start(javax.transaction.xa.Xid,int)",
            "org.apache.activemq.TransactionContext:void end(javax.transaction.xa.Xid,int)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void setClientID(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.Session createSession(boolean,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.util.CommandAgent:void start()",
            "org.apache.activemq.ActiveMQConnection:javax.jms.TopicSession createTopicSession(boolean,int)",
            "org.apache.activemq.advisory.DestinationSource:void start()",
            "org.apache.activemq.ActiveMQConnection:javax.jms.QueueSession createQueueSession(boolean,int)"
        ]
    },
    "org.apache.activemq.TransactionContext:void rollback(javax.transaction.xa.Xid)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.TransactionContext:int prepare(javax.transaction.xa.Xid)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.TransactionContext:void forget(javax.transaction.xa.Xid)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection$5:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.vm.VMTransport:void dispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void start()"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransport:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransportServer$1:void stop()",
            "org.apache.activemq.transport.InactivityMonitor:void stop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.transport.vm.VMTransport:void start()"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransport:boolean iterate()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.reliable.ReliableTransport:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransport:void dispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.udp.UdpTransportServer$2:void start()",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransport:void doRun()",
            "org.apache.activemq.transport.tcp.SslTransport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.udp.UdpTransport:void run()",
            "org.apache.activemq.transport.nio.NIOTransport:void serviceRead()",
            "org.apache.activemq.transport.stomp.StompNIOTransport:void processCommand()"
        ]
    },
    "org.apache.activemq.transport.udp.ResponseRedirectInterceptor:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransport:void dispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void sendToActiveMQ(org.apache.activemq.command.Command,org.apache.activemq.transport.stomp.ResponseHandler)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompSubscribe(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter$2:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompBegin(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompConnect(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompUnsubscribe(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompAbort(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:org.apache.activemq.command.ActiveMQDestination createTempQueue(java.lang.String)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompSend(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompDisconnect(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommit(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:org.apache.activemq.command.ActiveMQDestination createTempTopic(java.lang.String)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompAck(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompSubscription:void onMessageDispatch(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQMessageProducerSupport:void send(javax.jms.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.activemq.ActiveMQTopicPublisher:void publish(javax.jms.Message)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageProducerSupport:void send(javax.jms.Destination,javax.jms.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicPublisher:void publish(javax.jms.Topic,javax.jms.Message)",
            "org.apache.activemq.broker.util.CommandMessageListener:void onMessage(javax.jms.Message)",
            "org.apache.activemq.ActiveMQQueueSender:void send(javax.jms.Queue,javax.jms.Message)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSender:void send(javax.jms.Queue,javax.jms.Message,int,int,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQTopicPublisher:void publish(javax.jms.Topic,javax.jms.Message,int,int,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQMessageProducerSupport:void send(javax.jms.Message,int,int,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicPublisher:void publish(javax.jms.Message,int,int,long)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void sendAck(org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:void acknowledge()",
            "org.apache.activemq.ActiveMQMessageConsumer:void acknowledge(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:void afterMessageIsConsumed(org.apache.activemq.command.MessageDispatch,boolean)",
            "org.apache.activemq.ActiveMQMessageConsumer:void ackLater(org.apache.activemq.command.MessageDispatch,byte)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void rollback()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer$5:void afterRollback()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer$4:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean,javax.jms.MessageListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,javax.jms.MessageListener)",
            "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueReceiver:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,int,int,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSubscriber:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic,java.lang.String,boolean)",
            "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueBrowser$1:void <init>(org.apache.activemq.ActiveMQQueueBrowser,org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean,javax.jms.MessageListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueBrowser:org.apache.activemq.ActiveMQMessageConsumer createConsumer()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void dispose()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void doClose()"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:void rollback()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQTopicSession:void rollback()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:void commit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueBrowser:void destroyConsumer()",
            "org.apache.activemq.ActiveMQTopicSession:void commit()",
            "org.apache.activemq.ActiveMQQueueSession:void commit()"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.TemporaryQueue createTemporaryQueue()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.TemporaryTopic createTemporaryTopic()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:java.io.InputStream createDurableInputStream(javax.jms.Topic,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:java.io.InputStream createDurableInputStream(javax.jms.Topic,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:java.io.InputStream createInputStream(javax.jms.Destination,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:java.io.InputStream createInputStream(javax.jms.Destination,java.lang.String)",
            "org.apache.activemq.ActiveMQConnection:java.io.InputStream createDurableInputStream(javax.jms.Topic,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:void unsubscribe(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQOutputStream:void flushBuffer()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQOutputStream:void write(int)",
            "org.apache.activemq.ActiveMQOutputStream:void close()",
            "org.apache.activemq.ActiveMQOutputStream:void write(byte[],int,int)",
            "org.apache.activemq.ActiveMQOutputStream:void flush()"
        ]
    },
    "org.apache.activemq.ActiveMQOutputStream:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:void doStartTransaction()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void send(org.apache.activemq.ActiveMQMessageProducer,org.apache.activemq.command.ActiveMQDestination,javax.jms.Message,int,int,long,org.apache.activemq.usage.MemoryUsage,int)",
            "org.apache.activemq.ActiveMQSession:void run()",
            "org.apache.activemq.ActiveMQMessageConsumer:void acknowledge()",
            "org.apache.activemq.ActiveMQMessageConsumer:void ackLater(org.apache.activemq.command.MessageDispatch,byte)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:java.io.OutputStream createOutputStream(javax.jms.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:java.io.OutputStream createNonPersistentOutputStream(javax.jms.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createDurableConnectionConsumer(javax.jms.Topic,java.lang.String,java.lang.String,javax.jms.ServerSessionPool,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.CommandAgent:javax.jms.Connection getConnection()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.util.CommandAgent:void start()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Topic,java.lang.String,javax.jms.ServerSessionPool,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Queue,java.lang.String,javax.jms.ServerSessionPool,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Destination,java.lang.String,javax.jms.ServerSessionPool,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQXAConnection:javax.jms.XATopicSession createXATopicSession()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.util.CommandAgent:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQXAConnection:javax.jms.XASession createXASession()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQXAConnection:javax.jms.XAQueueSession createXAQueueSession()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.TransactionContext:void start(javax.transaction.xa.Xid,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.TransactionContext:void end(javax.transaction.xa.Xid,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.TopicSession createTopicSession(boolean,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.advisory.DestinationSource:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.advisory.DestinationSource getDestinationSource()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.QueueSession createQueueSession(boolean,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.InactivityMonitor:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransport:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.InactivityMonitor:void start()"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransportServer$1:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.InactivityMonitor:void stop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.transport.vm.VMTransport:void start()"
        ]
    },
    "org.apache.activemq.transport.InactivityMonitor:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.InactivityMonitor:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.WriteTimeoutFilter:void stop()",
            "org.apache.activemq.transport.ResponseCorrelator:void stop()",
            "org.apache.activemq.transport.InactivityMonitor:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.proxy.ProxyConnector$2:void stop()",
            "org.apache.activemq.transport.mock.MockTransport:void stop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.transport.WireFormatNegotiator:void stop()",
            "org.apache.activemq.transport.CommandJoiner:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.thread.PooledTaskRunner:void runTask()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.PooledTaskRunner$1:void run()"
        ]
    },
    "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.DedicatedTaskRunner$1:void run()"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.state.ConnectionStateTracker:void connectionInterruptProcessingComplete(org.apache.activemq.transport.Transport,org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.InactivityMonitor:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.udp.UdpTransportServer$2:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.InactivityMonitor:void start()"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.tcp.TcpTransport:void doRun()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransport:void run()"
        ]
    },
    "org.apache.activemq.transport.tcp.SslTransport:void doConsume(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.udp.UdpTransport:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.nio.NIOTransport:void serviceRead()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOTransport:void access$000(org.apache.activemq.transport.nio.NIOTransport)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompNIOTransport:void processCommand()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.StompNIOTransport:void serviceRead()"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompSubscribe(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter$2:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompBegin(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompConnect(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompUnsubscribe(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompAbort(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:org.apache.activemq.command.ActiveMQDestination createTempQueue(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.LegacyFrameTranslator:org.apache.activemq.command.ActiveMQDestination convertDestination(org.apache.activemq.transport.stomp.ProtocolConverter,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompSend(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompDisconnect(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommit(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:org.apache.activemq.command.ActiveMQDestination createTempTopic(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.LegacyFrameTranslator:org.apache.activemq.command.ActiveMQDestination convertDestination(org.apache.activemq.transport.stomp.ProtocolConverter,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompAck(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicPublisher:void publish(javax.jms.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQTopicPublisher:void publish(javax.jms.Topic,javax.jms.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.CommandMessageListener:void onMessage(javax.jms.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueSender:void send(javax.jms.Queue,javax.jms.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQTopicPublisher:void publish(javax.jms.Message,int,int,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueBrowser$1:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:boolean iterate()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void acknowledge()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer$5:void beforeEnd()",
            "org.apache.activemq.ActiveMQMessageConsumer:void dispose()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void acknowledge(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer$2:void execute()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void afterMessageIsConsumed(org.apache.activemq.command.MessageDispatch,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive()",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receiveNoWait()",
            "org.apache.activemq.ActiveMQMessageConsumer:org.apache.activemq.command.MessageDispatch dequeue(long)",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive(long)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void ackLater(org.apache.activemq.command.MessageDispatch,byte)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:void beforeMessageIsConsumed(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:void afterMessageIsConsumed(org.apache.activemq.command.MessageDispatch,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer$5:void afterRollback()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,javax.jms.MessageListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,javax.jms.MessageListener)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)",
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue,java.lang.String)",
            "org.apache.activemq.ActiveMQSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic)",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String)",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueBrowser:org.apache.activemq.ActiveMQMessageConsumer createConsumer()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueBrowser:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,boolean)",
            "org.apache.activemq.ActiveMQQueueBrowser:java.util.Enumeration getEnumeration()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void doClose()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void access$000(org.apache.activemq.ActiveMQSession)",
            "org.apache.activemq.ActiveMQSession:void close()"
        ]
    },
    "org.apache.activemq.ActiveMQQueueBrowser:void destroyConsumer()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueBrowser:java.lang.Object nextElement()",
            "org.apache.activemq.ActiveMQQueueBrowser:void close()",
            "org.apache.activemq.ActiveMQQueueBrowser:boolean hasMoreElements()"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:void commit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueSession:void commit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:java.io.InputStream createDurableInputStream(javax.jms.Topic,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:java.io.InputStream createInputStream(javax.jms.Destination,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:java.io.InputStream createInputStream(javax.jms.Destination)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:java.io.InputStream createDurableInputStream(javax.jms.Topic,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQOutputStream:void write(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQOutputStream:void flush()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:void run()",
            "org.apache.activemq.ActiveMQQueueSession:void run()"
        ]
    },
    "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:org.apache.activemq.advisory.DestinationSource getDestinationSource()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.InactivityMonitor:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat()"
        ]
    },
    "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.ResponseCorrelator:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.ResponseCorrelator:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.reliable.ReliableTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.reliable.ReliableTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.MutexTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)"
        ]
    },
    "org.apache.activemq.transport.InactivityMonitor:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.InactivityMonitor$3:void run()",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.InactivityMonitor:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.broker.ft.MasterBroker:void sendAsyncToSlave(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.InactivityMonitor:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$5:void run()",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.InactivityMonitor:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.broker.ft.MasterBroker:void sendAsyncToSlave(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.InactivityMonitor:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.broker.ft.MasterBroker:void sendAsyncToSlave(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.proxy.ProxyConnection$1:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.InactivityMonitor:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ThreadNameFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WriteTimeoutFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.mock.MockTransport:void oneway(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter$1:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.stomp.StompSubscription:void onMessageDispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.udp.UdpTransportServer$2:void start()",
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.proxy.ProxyConnection:void start()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()",
            "org.apache.activemq.transport.WriteTimeoutFilter:void start()",
            "org.apache.activemq.transport.WireFormatNegotiator:void start()",
            "org.apache.activemq.transport.mock.MockTransport:void start()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.transport.InactivityMonitor:void start()",
            "org.apache.activemq.transport.reliable.ReliableTransport:void start()",
            "org.apache.activemq.broker.TransportConnection:void start()"
        ]
    },
    "org.apache.activemq.transport.InactivityMonitor:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.InactivityMonitor:void start()",
            "org.apache.activemq.broker.TransportConnection:void start()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void doStop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection$3:void run()",
            "org.apache.activemq.broker.TransportConnection:void serviceTransportException(java.io.IOException)",
            "org.apache.activemq.broker.jmx.ManagedTransportConnection:void doStop()"
        ]
    },
    "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridge:void serviceLocalBrokerInfo(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterConnector:void serviceLocalException(java.lang.Throwable)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void remove(boolean,java.net.URI[])",
            "org.apache.activemq.broker.ft.MasterConnector:void shutDown()",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.ActiveMQConnection:void close()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$6:void run()",
            "org.apache.activemq.broker.TransportConnector$1$1:void run()",
            "org.apache.activemq.network.CompositeDemandForwardingBridge:void serviceRemoteBrokerInfo(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DiscoveryNetworkConnector:void onServiceAdd(org.apache.activemq.command.DiscoveryEvent)",
            "org.apache.activemq.transport.vm.VMTransportFactory:void stopped(java.lang.String)",
            "org.apache.activemq.network.DemandForwardingBridge:void serviceRemoteBrokerInfo(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.fanout.FanoutTransport:boolean doConnect()",
            "org.apache.activemq.transport.failover.FailoverTransport:void handleTransportFailure(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void run()",
            "org.apache.activemq.ActiveMQConnection$5:void run()",
            "org.apache.activemq.network.ForwardingBridge:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.ForwardingBridge:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DiscoveryNetworkConnector:void onServiceRemove(org.apache.activemq.command.DiscoveryEvent)",
            "org.apache.activemq.broker.TransportConnector$1:void onAccept(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.vm.VMTransportFactory:boolean validateBroker(java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.WriteTimeoutFilter:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.InactivityMonitor:void stop()",
            "org.apache.activemq.transport.TransportFilter:void stop()"
        ]
    },
    "org.apache.activemq.transport.ResponseCorrelator:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.InactivityMonitor:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnector$2:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.InactivityMonitor:void stop()",
            "org.apache.activemq.transport.TransportFilter:void stop()"
        ]
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.InactivityMonitor:void stop()",
            "org.apache.activemq.transport.TransportFilter:void stop()"
        ]
    },
    "org.apache.activemq.transport.CommandJoiner:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.InactivityMonitor:void stop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStop(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.thread.PooledTaskRunner$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.thread.DedicatedTaskRunner$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.state.ConnectionStateTracker:void connectionInterruptProcessingComplete(org.apache.activemq.transport.Transport,org.apache.activemq.command.ConnectionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void connectionInterruptProcessingComplete(org.apache.activemq.command.ConnectionId)"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpTransport:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.nio.NIOTransport:void access$000(org.apache.activemq.transport.nio.NIOTransport)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOTransport$1:void onSelect(org.apache.activemq.transport.nio.SelectorSelection)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompNIOTransport:void serviceRead()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.StompNIOTransport:void access$000(org.apache.activemq.transport.stomp.StompNIOTransport)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.StompTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.stomp.LegacyFrameTranslator:org.apache.activemq.command.ActiveMQDestination convertDestination(org.apache.activemq.transport.stomp.ProtocolConverter,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompSubscribe(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompUnsubscribe(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.FrameTranslator$Helper:void copyStandardHeadersFromFrameToMessage(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.transport.stomp.StompFrame,org.apache.activemq.command.ActiveMQMessage,org.apache.activemq.transport.stomp.FrameTranslator)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueBrowser$1:void dispatch(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQMessageConsumer:boolean iterate()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQMessageConsumer$5:void beforeEnd()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void dispose()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void doClose()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer$2:void execute()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQMessage:void acknowledge()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive(long)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receiveNoWait()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueBrowser:java.lang.Object nextElement()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:org.apache.activemq.command.MessageDispatch dequeue(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive()",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receiveNoWait()",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive(long)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void beforeMessageIsConsumed(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive()",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receiveNoWait()",
            "org.apache.activemq.ActiveMQMessageConsumer:org.apache.activemq.command.MessageDispatch dequeue(long)",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive(long)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,javax.jms.MessageListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)",
            "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueBrowser:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.QueueBrowser createBrowser(javax.jms.Queue,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueBrowser:java.util.Enumeration getEnumeration()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:void access$000(org.apache.activemq.ActiveMQSession)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession$1:void afterCommit()",
            "org.apache.activemq.ActiveMQSession$1:void afterRollback()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:void close()",
            "org.apache.activemq.advisory.DestinationSource:void stop()",
            "org.apache.activemq.ActiveMQTopicSession:void close()",
            "org.apache.activemq.broker.util.CommandAgent:void stop()"
        ]
    },
    "org.apache.activemq.ActiveMQQueueBrowser:java.lang.Object nextElement()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueBrowser:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueBrowser:boolean hasMoreElements()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:java.io.InputStream createInputStream(javax.jms.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQTopicSession:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueSession:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.WireFormatNegotiator:void start()"
        ]
    },
    "org.apache.activemq.transport.ResponseCorrelator:java.lang.Object request(java.lang.Object,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object,int)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport$1:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.ResponseCorrelator:java.lang.Object request(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.broker.ft.MasterBroker:void sendSyncToSlave(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.TransportLogger:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportLogger:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)"
        ]
    },
    "org.apache.activemq.transport.reliable.ReliableTransport:java.lang.Object request(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.reliable.ReliableTransport:java.lang.Object request(java.lang.Object,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object,int)"
        ]
    },
    "org.apache.activemq.transport.MutexTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportLogger:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportLogger:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:boolean iterate()"
        ]
    },
    "org.apache.activemq.transport.InactivityMonitor$3:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.ft.MasterBroker:void sendAsyncToSlave(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.ft.MasterBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.ft.MasterBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.ft.MasterBroker:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.ft.MasterBroker:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.ft.MasterBroker:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.ft.MasterBroker:void removeSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.ft.MasterBroker:void addSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.ft.MasterBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.ft.MasterBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.ft.MasterBroker:void sendToSlave(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.ft.MasterBroker:void sendToSlave(org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.ft.MasterBroker:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.ft.MasterBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.ft.MasterBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void duplexStart(org.apache.activemq.broker.TransportConnection,org.apache.activemq.command.BrokerInfo,org.apache.activemq.command.BrokerInfo)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$5:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()"
        ]
    },
    "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.reliable.DefaultReplayStrategy:boolean onDroppedPackets(org.apache.activemq.transport.reliable.ReliableTransport,int,int,int)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void onMissingResponse(org.apache.activemq.command.Command,org.apache.activemq.transport.FutureResponse)"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnection$1:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.InactivityMonitor:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.ThreadNameFilter:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.InactivityMonitor:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.WriteTimeoutFilter:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.InactivityMonitor:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.InactivityMonitor:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter$1:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter$2$1:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void handleException(java.lang.Throwable,org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnection:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.proxy.ProxyConnector$1:void onAccept(org.apache.activemq.transport.Transport)"
        ]
    },
    "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.WriteTimeoutFilter:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.InactivityMonitor:void start()"
        ]
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.InactivityMonitor:void start()"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.InactivityMonitor:void start()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void duplexStart(org.apache.activemq.broker.TransportConnection,org.apache.activemq.command.BrokerInfo,org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.network.DiscoveryNetworkConnector:void onServiceAdd(org.apache.activemq.command.DiscoveryEvent)",
            "org.apache.activemq.broker.jmx.NetworkBridgeView:void start()",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStart()"
        ]
    },
    "org.apache.activemq.transport.reliable.ReliableTransport:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.InactivityMonitor:void start()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ConnectionView:void start()",
            "org.apache.activemq.broker.TransportConnector$1$1:void run()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection$3:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnection:void serviceTransportException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void serviceException(java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection$1:void onException(java.io.IOException)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTransportConnection:void doStop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection$3:void run()",
            "org.apache.activemq.broker.TransportConnection:void serviceTransportException(java.io.IOException)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridge:void serviceLocalBrokerInfo(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.broker.ft.MasterConnector:void serviceLocalException(java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.ft.MasterConnector$2$1:void onException(java.io.IOException)",
            "org.apache.activemq.broker.ft.MasterConnector$1:void onException(java.io.IOException)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:void remove(boolean,java.net.URI[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.discovery.DiscoveryTransport:void onServiceRemove(org.apache.activemq.command.DiscoveryEvent)"
        ]
    },
    "org.apache.activemq.broker.ft.MasterConnector:void shutDown()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.ft.MasterConnector:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterConnector:void serviceRemoteException(java.io.IOException)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedTransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.command.ConnectionInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.util.CommandAgent:void stop()",
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$6:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnector$1$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.CompositeDemandForwardingBridge:void serviceRemoteBrokerInfo(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.network.DiscoveryNetworkConnector:void onServiceAdd(org.apache.activemq.command.DiscoveryEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.vm.VMTransportFactory:void stopped(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.transport.vm.VMTransportFactory:void stopped(org.apache.activemq.transport.vm.VMTransportServer)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridge:void serviceRemoteBrokerInfo(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:boolean doConnect()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.fanout.FanoutTransport:boolean access$800(org.apache.activemq.transport.fanout.FanoutTransport)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void handleTransportFailure(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.ForwardingBridge:void serviceLocalCommand(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.network.ForwardingBridge$1:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.network.ForwardingBridge:void serviceRemoteCommand(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.network.ForwardingBridge$2:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.network.DiscoveryNetworkConnector:void onServiceRemove(org.apache.activemq.command.DiscoveryEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnector$1:void onAccept(org.apache.activemq.transport.Transport)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void handleSocket(java.net.Socket)",
            "org.apache.activemq.transport.udp.UdpTransportServer:org.apache.activemq.transport.Transport configureTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.vm.VMTransportServer:org.apache.activemq.transport.vm.VMTransport connect()"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransportFactory:boolean validateBroker(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.broker.ft.MasterConnector:void stop()",
            "org.apache.activemq.network.ForwardingBridge:void stop()",
            "org.apache.activemq.transport.discovery.DiscoveryTransport:void stop()",
            "org.apache.activemq.proxy.ProxyConnector:void stop()",
            "org.apache.activemq.broker.ft.MasterConnector:void stopBeforeConnected()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void stop()",
            "org.apache.activemq.broker.BrokerService:void stopAllConnectors(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.broker.region.RegionBroker:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.proxy.ProxyConnection:void stop()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()",
            "org.apache.activemq.broker.TransportConnector:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stopServices(java.util.List)"
        ]
    },
    "org.apache.activemq.transport.udp.UdpTransportServer:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void connectionInterruptProcessingComplete(org.apache.activemq.command.ConnectionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.nio.NIOTransport$1:void onSelect(org.apache.activemq.transport.nio.SelectorSelection)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorSelection:void onSelect()"
        ]
    },
    "org.apache.activemq.transport.stomp.StompNIOTransport:void access$000(org.apache.activemq.transport.stomp.StompNIOTransport)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.StompNIOTransport$1:void onSelect(org.apache.activemq.transport.nio.SelectorSelection)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompTransportFilter:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransport:void dispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.stomp.FrameTranslator$Helper:void copyStandardHeadersFromFrameToMessage(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.transport.stomp.StompFrame,org.apache.activemq.command.ActiveMQMessage,org.apache.activemq.transport.stomp.FrameTranslator)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.JmsFrameTranslator:org.apache.activemq.command.ActiveMQMessage convertFrame(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.LegacyFrameTranslator:org.apache.activemq.command.ActiveMQMessage convertFrame(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void doClose()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer$3:void afterCommit()",
            "org.apache.activemq.ActiveMQMessageConsumer:void close()",
            "org.apache.activemq.ActiveMQMessageConsumer$3:void afterRollback()"
        ]
    },
    "org.apache.activemq.command.ActiveMQMessage:void acknowledge()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)",
            "org.apache.activemq.broker.util.CommandAgent:void start()",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)",
            "org.apache.activemq.advisory.DestinationSource:void start()"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.QueueBrowser createBrowser(javax.jms.Queue,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueBrowser createBrowser(javax.jms.Queue,java.lang.String)",
            "org.apache.activemq.ActiveMQSession:javax.jms.QueueBrowser createBrowser(javax.jms.Queue)"
        ]
    },
    "org.apache.activemq.ActiveMQSession$1:void afterCommit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession$1:void afterRollback()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueSession:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.advisory.DestinationSource:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void close()"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.CommandAgent:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.util.CommandAgent:void onException(javax.jms.JMSException)"
        ]
    },
    "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object,int)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.TransportLogger:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object,int)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$1:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.broker.ft.MasterBroker:void sendSyncToSlave(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.ft.MasterBroker:void sendSyncToSlave(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.ft.MasterBroker:void preProcessDispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.broker.ft.MasterBroker:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.broker.ft.MasterBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.ft.MasterBroker:void sendToSlave(org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.ft.MasterBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.ft.MasterBroker:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.ft.MasterBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.ft.MasterBroker:void sendToSlave(org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.broker.ft.MasterBroker:void sendSyncToSlave(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportLogger:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchSync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:boolean iterate()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:boolean iterate()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()"
        ]
    },
    "org.apache.activemq.broker.ft.MasterBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.ft.MasterBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.ft.MasterBroker:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.ft.MasterBroker:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.ft.MasterBroker:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.ft.MasterBroker:void removeSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.ft.MasterBroker:void addSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.ft.MasterBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.ft.MasterBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.ft.MasterBroker:void sendToSlave(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.ft.MasterBroker:void sendToSlave(org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.ft.MasterBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.ft.MasterBroker:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.ft.MasterBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.ft.MasterBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$2:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void duplexStart(org.apache.activemq.broker.TransportConnection,org.apache.activemq.command.BrokerInfo,org.apache.activemq.command.BrokerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBrokerInfo(org.apache.activemq.command.BrokerInfo)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.reliable.DefaultReplayStrategy:boolean onDroppedPackets(org.apache.activemq.transport.reliable.ReliableTransport,int,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.reliable.ReliableTransport:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.reliable.ReliableTransport:void onMissingResponse(org.apache.activemq.command.Command,org.apache.activemq.transport.FutureResponse)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.reliable.ReliableTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.reliable.ReliableTransport:java.lang.Object request(java.lang.Object,int)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter$2$1:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void handleException(java.lang.Throwable,org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter$2:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.stomp.ProtocolConverter$1:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.stomp.ProtocolConverter$2$1:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onActiveMQCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnector$1:void onAccept(org.apache.activemq.transport.Transport)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.NetworkBridgeView:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.MulticastNetworkConnector:void handleStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.network.NetworkConnector$1:void doStart()"
        ]
    },
    "org.apache.activemq.broker.jmx.ConnectionView:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnection:void serviceException(java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void pullTimeout(long)",
            "org.apache.activemq.broker.TransportConnection$2:void run()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection$1:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.InactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.ft.MasterConnector$2$1:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.ft.MasterConnector$1:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.discovery.DiscoveryTransport:void onServiceRemove(org.apache.activemq.command.DiscoveryEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.ft.MasterConnector:void serviceRemoteCommand(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.ft.MasterConnector$2:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.ft.MasterConnector:void serviceRemoteException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.ft.MasterConnector:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterConnector$2:void onException(java.io.IOException)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.command.ConnectionInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.command.ConnectionInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.Connection createConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.TopicConnection createTopicConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection()",
            "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAQueueConnection createXAQueueConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XATopicConnection createXATopicConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.QueueConnection createQueueConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAConnection createXAConnection(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void start()",
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void stopBroker()",
            "org.apache.activemq.broker.TransportConnection:void serviceTransportException(java.io.IOException)",
            "org.apache.activemq.broker.BrokerService:void stopGracefully(java.lang.String,java.lang.String,long,long)",
            "org.apache.activemq.util.DefaultIOExceptionHandler$1:void run()",
            "org.apache.activemq.xbean.XBeanBrokerService:void destroy()",
            "org.apache.activemq.broker.BrokerService:void masterFailed()",
            "org.apache.activemq.broker.BrokerService:void containerShutdown()",
            "org.apache.activemq.broker.jmx.BrokerView:void stop()"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransportFactory:void stopped(org.apache.activemq.transport.vm.VMTransportServer)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransportServer:void stop()"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:boolean access$800(org.apache.activemq.transport.fanout.FanoutTransport)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.fanout.FanoutTransport$1:boolean iterate()"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.InactivityMonitor:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.network.ForwardingBridge$1:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.ForwardingBridge$2:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.tcp.TcpTransportServer:void handleSocket(java.net.Socket)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransportServer$1:void run()",
            "org.apache.activemq.transport.tcp.TcpTransportServer:void run()"
        ]
    },
    "org.apache.activemq.transport.udp.UdpTransportServer:org.apache.activemq.transport.Transport configureTransport(org.apache.activemq.transport.Transport)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.udp.UdpTransportServer:void processInboundConnection(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransportServer:org.apache.activemq.transport.vm.VMTransport connect()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.peer.PeerTransportFactory$1:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)",
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.broker.ft.MasterConnector:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.broker.jmx.FTConnectorView:void stop()"
        ]
    },
    "org.apache.activemq.network.ForwardingBridge:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.discovery.DiscoveryTransport:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.InactivityMonitor:void stop()",
            "org.apache.activemq.transport.TransportFilter:void stop()"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnector:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ProxyConnectorView:void stop()"
        ]
    },
    "org.apache.activemq.broker.ft.MasterConnector:void stopBeforeConnected()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.InactivityMonitor:void stop()",
            "org.apache.activemq.transport.TransportFilter:void stop()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void stopAllConnectors(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void stop()"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void stop()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void doStop(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnection:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.proxy.ProxyConnection:void onFailure(java.io.IOException)",
            "org.apache.activemq.proxy.ProxyConnection$1:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.NetworkBridgeView:void stop()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.broker.TransportConnector:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ConnectorView:void stop()"
        ]
    },
    "org.apache.activemq.util.ServiceStopper:void stopServices(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.nio.SelectorSelection:void onSelect()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorWorker$1:void run()"
        ]
    },
    "org.apache.activemq.transport.stomp.StompNIOTransport$1:void onSelect(org.apache.activemq.transport.nio.SelectorSelection)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorSelection:void onSelect()"
        ]
    },
    "org.apache.activemq.transport.stomp.JmsFrameTranslator:org.apache.activemq.command.ActiveMQMessage convertFrame(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.stomp.LegacyFrameTranslator:org.apache.activemq.command.ActiveMQMessage convertFrame(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.JmsFrameTranslator:org.apache.activemq.command.ActiveMQMessage convertFrame(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:org.apache.activemq.command.ActiveMQMessage convertMessage(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer$3:void afterCommit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueBrowser:void destroyConsumer()",
            "org.apache.activemq.broker.util.CommandAgent:void stop()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer$3:void afterRollback()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueBrowser createBrowser(javax.jms.Queue,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.QueueBrowser createBrowser(javax.jms.Queue)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueBrowser createBrowser(javax.jms.Queue)"
        ]
    },
    "org.apache.activemq.broker.util.CommandAgent:void onException(javax.jms.JMSException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$4:void run()"
        ]
    },
    "org.apache.activemq.transport.TransportLogger:java.lang.Object request(java.lang.Object,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object,int)"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object,int)"
        ]
    },
    "org.apache.activemq.broker.ft.MasterBroker:void preProcessDispatch(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.ft.MasterBroker:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.ft.MasterBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.ft.MasterBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.ft.MasterBroker:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.ft.MasterBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.TransportLogger:java.lang.Object request(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void dispatchSync(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void dispatch(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.TransportConnection$1:void onCommand(java.lang.Object)",
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void serviceException(java.lang.Throwable)",
            "org.apache.activemq.broker.region.PrefetchSubscription:boolean dispatch(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.ft.MasterBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBrokerInfo(org.apache.activemq.command.BrokerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.command.BrokerInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onActiveMQCommand(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.StompTransportFilter:void oneway(java.lang.Object)"
        ]
    },
    "org.apache.activemq.network.NetworkConnector$1:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void start()"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void pullTimeout(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription$1:void run()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection$2:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.InactivityMonitor:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransport:void dispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.InactivityMonitor$3:void run()",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.InactivityMonitor$4:void run()",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransport:void dispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransport:void dispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.stomp.ProtocolConverter$2:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onException(java.io.IOException)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.stomp.ProtocolConverter$2$1:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onException(java.io.IOException)"
        ]
    },
    "org.apache.activemq.broker.ft.MasterConnector$2:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.ft.MasterConnector$2:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.Connection createConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.util.CommandAgent:javax.jms.Connection createConnection()",
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.TopicConnection createTopicConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAQueueConnection createXAQueueConnection()",
            "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XATopicConnection createXATopicConnection()",
            "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.Connection createConnection()",
            "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.TopicConnection createTopicConnection()",
            "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.QueueConnection createQueueConnection()",
            "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAConnection createXAConnection()"
        ]
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAQueueConnection createXAQueueConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XATopicConnection createXATopicConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.QueueConnection createQueueConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAConnection createXAConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void start(boolean)",
            "org.apache.activemq.xbean.XBeanBrokerService:void afterPropertiesSet()",
            "org.apache.activemq.broker.BrokerService:void autoStart()",
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)",
            "org.apache.activemq.broker.jmx.BrokerView:void start()"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void stopBroker()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void databaseLockKeepAlive()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void stopGracefully(java.lang.String,java.lang.String,long,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:void stopGracefully(java.lang.String,java.lang.String,long,long)"
        ]
    },
    "org.apache.activemq.util.DefaultIOExceptionHandler$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.xbean.XBeanBrokerService:void destroy()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:void masterFailed()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.ft.MasterConnector:void shutDown()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void containerShutdown()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService$4:void run()"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.vm.VMTransportServer:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.vm.VMTransportServer$1:void stop()"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport$1:boolean iterate()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpTransportServer$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.tcp.TcpTransportServer:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.udp.UdpTransportServer:void processInboundConnection(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.udp.UdpTransportServer$1:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.peer.PeerTransportFactory$1:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.peer.PeerTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)",
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.peer.PeerTransportFactory$1:org.apache.activemq.transport.Transport doConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.broker.jmx.FTConnectorView:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ProxyConnectorView:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.RegionBroker:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void stop()",
            "org.apache.activemq.broker.TransactionBroker:void stop()",
            "org.apache.activemq.broker.BrokerFilter:void stop()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void stop()"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnection:void onFailure(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.proxy.ProxyConnection$1:void onCommand(java.lang.Object)",
            "org.apache.activemq.proxy.ProxyConnection$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.proxy.ProxyConnection$2:void onException(java.io.IOException)",
            "org.apache.activemq.proxy.ProxyConnection$1:void onException(java.io.IOException)"
        ]
    },
    "org.apache.activemq.broker.jmx.NetworkBridgeView:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.MulticastNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.network.NetworkConnector$1:void doStop(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.broker.jmx.ConnectorView:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.nio.SelectorWorker$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:org.apache.activemq.command.ActiveMQMessage convertMessage(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompSend(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueBrowser createBrowser(javax.jms.Queue)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection$4:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TopicSubscription:void dispatch(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void dispatch(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.Topic$3:void run()",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void updateConsumerPrefetch(int)",
            "org.apache.activemq.broker.TransportConnection:void serviceException(java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection:void updateClient(org.apache.activemq.command.ConnectionControl)",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransportConnection:void start()",
            "org.apache.activemq.broker.region.PrefetchSubscription:boolean dispatch(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.Queue$6:void run()",
            "org.apache.activemq.broker.region.TopicSubscription:void updateConsumerPrefetch(int)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:boolean dispatch(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchPending()"
        ]
    },
    "org.apache.activemq.command.BrokerInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompTransportFilter:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.InactivityMonitor:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.util.ServiceSupport:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.broker.TransportConnector:void start()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void start()",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void start()",
            "org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter:void start()",
            "org.apache.activemq.network.NetworkConnector:void start()",
            "org.apache.activemq.broker.scheduler.JobSchedulerStore:org.apache.activemq.broker.scheduler.JobScheduler getJobScheduler(java.lang.String)",
            "org.apache.activemq.transport.InactivityMonitor:void start()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.store.kahadb.plist.PListStore getTempDataStore()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.thread.Scheduler getScheduler()",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:org.apache.activemq.broker.scheduler.JobSchedulerStore getStore()",
            "org.apache.activemq.ActiveMQConnection:void <init>(org.apache.activemq.transport.Transport,org.apache.activemq.util.IdGenerator,org.apache.activemq.management.JMSStatsImpl)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.SchedulerTimerTask:void run()"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport$2:boolean iterate()"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.InactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.StompNIOTransport:void serviceRead()",
            "org.apache.activemq.transport.udp.UdpTransport:void run()",
            "org.apache.activemq.transport.nio.NIOTransport:void serviceRead()",
            "org.apache.activemq.transport.tcp.TcpTransport:void run()",
            "org.apache.activemq.transport.stomp.StompNIOTransport$1:void onError(org.apache.activemq.transport.nio.SelectorSelection,java.lang.Throwable)",
            "org.apache.activemq.transport.nio.NIOTransport$1:void onError(org.apache.activemq.transport.nio.SelectorSelection,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.transport.InactivityMonitor$4:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransport:void dispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void negociate(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.ResponseCorrelator:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransport:void dispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void replayCommands(org.apache.activemq.command.ReplayCommand)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.util.CommandAgent:javax.jms.Connection createConnection()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.util.CommandAgent:javax.jms.Connection getConnection()"
        ]
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAQueueConnection createXAQueueConnection()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XATopicConnection createXATopicConnection()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.Connection createConnection()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.ActiveMQConnection makeConnection(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.ActiveMQConnection makeConnection()",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.ActiveMQConnection makeConnection(java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.TopicConnection createTopicConnection()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.QueueConnection createQueueConnection()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAConnection createXAConnection()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:void start(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.xbean.XBeanBrokerService:void afterPropertiesSet()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:void autoStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void databaseLockKeepAlive()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter$3:void run()"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:void stopGracefully(java.lang.String,java.lang.String,long,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService$4:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.udp.UdpTransportServer$1:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.peer.PeerTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.peer.PeerTransportFactory$1:org.apache.activemq.transport.Transport doConnect(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.peer.PeerTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransactionBroker:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void stop()",
            "org.apache.activemq.broker.TransactionBroker:void stop()",
            "org.apache.activemq.broker.BrokerFilter:void stop()"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.plugin.StatisticsBroker:void stop()",
            "org.apache.activemq.broker.BrokerBroadcaster:void stop()",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void stop()",
            "org.apache.activemq.broker.TransactionBroker:void stop()",
            "org.apache.activemq.broker.BrokerFilter:void stop()"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnection$2:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnection$2:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.InactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnection$1:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.NetworkConnector$1:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void stop()"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:void access$100(org.apache.activemq.broker.region.TopicSubscription)",
            "org.apache.activemq.broker.region.TopicSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.region.Topic$3:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void updateConsumerPrefetch(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnection:void updateClient(org.apache.activemq.command.ConnectionControl)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue$6:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TopicSubscription:void updateConsumerPrefetch(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchPending()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void pullTimeout(long)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void onDispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void onUsageChanged(org.apache.activemq.usage.Usage,int,int)",
            "org.apache.activemq.broker.region.PrefetchSubscription:org.apache.activemq.command.Response pullMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.TransportConnector:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector startTransportConnector(org.apache.activemq.broker.TransportConnector)",
            "org.apache.activemq.broker.jmx.BrokerView:java.lang.String addConnector(java.lang.String)",
            "org.apache.activemq.broker.jmx.ConnectorView:void start()",
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.async.AsyncDataManager:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.impl.DataManager getDataManager(java.lang.String)",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void start()"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void start()"
        ]
    },
    "org.apache.activemq.network.NetworkConnector:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.network.LdapNetworkConnector:void addConnector(javax.naming.directory.SearchResult)",
            "org.apache.activemq.broker.jmx.BrokerView:java.lang.String addNetworkConnector(java.lang.String)",
            "org.apache.activemq.broker.jmx.NetworkConnectorView:void start()"
        ]
    },
    "org.apache.activemq.broker.scheduler.JobSchedulerStore:org.apache.activemq.broker.scheduler.JobScheduler getJobScheduler(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.scheduler.SchedulerBroker:org.apache.activemq.broker.scheduler.JobScheduler getInternalScheduler()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.store.kahadb.plist.PListStore getTempDataStore()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.store.kahadb.plist.PListStore getTempDataStore()",
            "org.apache.activemq.xbean.XBeanBrokerService:void ensureSystemUsageHasStore()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.usage.SystemUsage getSystemUsage()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.thread.Scheduler getScheduler()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createRegionBroker(org.apache.activemq.broker.region.DestinationInterceptor)"
        ]
    },
    "org.apache.activemq.broker.scheduler.SchedulerBroker:org.apache.activemq.broker.scheduler.JobSchedulerStore getStore()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.scheduler.SchedulerBroker:org.apache.activemq.broker.scheduler.JobScheduler getInternalScheduler()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void <init>(org.apache.activemq.transport.Transport,org.apache.activemq.util.IdGenerator,org.apache.activemq.management.JMSStatsImpl)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(org.apache.activemq.transport.Transport,org.apache.activemq.management.JMSStatsImpl)",
            "org.apache.activemq.ActiveMQXAConnection:void <init>(org.apache.activemq.transport.Transport,org.apache.activemq.util.IdGenerator,org.apache.activemq.management.JMSStatsImpl)"
        ]
    },
    "org.apache.activemq.thread.SchedulerTimerTask:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.failover.FailoverTransport$2:boolean iterate()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()"
        ]
    },
    "org.apache.activemq.transport.stomp.StompNIOTransport$1:void onError(org.apache.activemq.transport.nio.SelectorSelection,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorSelection:void onError(java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.transport.nio.NIOTransport$1:void onError(org.apache.activemq.transport.nio.SelectorSelection,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorSelection:void onError(java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void negociate(org.apache.activemq.command.WireFormatInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.reliable.ReliableTransport:void replayCommands(org.apache.activemq.command.ReplayCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.reliable.ReliableTransport:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:org.apache.activemq.ActiveMQConnection makeConnection(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:org.apache.activemq.ActiveMQConnection makeConnection()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:org.apache.activemq.ActiveMQConnection makeConnection(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter$3:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.peer.PeerTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.plugin.StatisticsBroker:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.scheduler.SchedulerBroker:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void stop()",
            "org.apache.activemq.broker.TransactionBroker:void stop()",
            "org.apache.activemq.broker.BrokerFilter:void stop()"
        ]
    },
    "org.apache.activemq.util.ServiceSupport:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.network.NetworkConnector:void stop()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void stop()",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void close()",
            "org.apache.activemq.transport.InactivityMonitor:void stop()",
            "org.apache.activemq.transport.tcp.TcpTransport:void stop()",
            "org.apache.activemq.transport.udp.UdpTransport:void run()",
            "org.apache.activemq.ActiveMQConnection:void close()",
            "org.apache.activemq.broker.scheduler.JobSchedulerImpl:void mainLoop()",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void stop()",
            "org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.broker.scheduler.JobSchedulerImpl:void run()"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void access$100(org.apache.activemq.broker.region.TopicSubscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription$1:void afterCommit()"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Queue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void pullTimeout(long)",
            "org.apache.activemq.broker.region.PrefetchSubscription:org.apache.activemq.command.Response pullMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.region.QueueBrowserSubscription:void checkDone()",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void onDispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.PrefetchSubscription$3:void run()",
            "org.apache.activemq.broker.region.PrefetchSubscription:boolean dispatch(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void onUsageChanged(org.apache.activemq.usage.Usage,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:org.apache.activemq.command.Response pullMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector startTransportConnector(org.apache.activemq.broker.TransportConnector)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:java.lang.String addConnector(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ConnectorView:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.impl.DataManager getDataManager(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.MapContainer getMapContainer(java.lang.Object,java.lang.String,boolean)",
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.ListContainer getListContainer(java.lang.Object,java.lang.String,boolean)",
            "org.apache.activemq.kaha.impl.KahaStore:void initialize()",
            "org.apache.activemq.kaha.impl.KahaStore:void generateInterestInMapDataFiles()",
            "org.apache.activemq.kaha.impl.KahaStore:void generateInterestInListDataFiles()"
        ]
    },
    "org.apache.activemq.store.amq.AMQPersistenceAdapter:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.LdapNetworkConnector:void addConnector(javax.naming.directory.SearchResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.network.LdapNetworkConnector:void objectAdded(javax.naming.event.NamingEvent)",
            "org.apache.activemq.network.LdapNetworkConnector:void start()",
            "org.apache.activemq.network.LdapNetworkConnector:void objectChanged(javax.naming.event.NamingEvent)"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:java.lang.String addNetworkConnector(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.NetworkConnectorView:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.scheduler.SchedulerBroker:org.apache.activemq.broker.scheduler.JobScheduler getInternalScheduler()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.scheduler.JobSchedulerFacade:long getNextScheduleTime()",
            "org.apache.activemq.broker.scheduler.JobSchedulerFacade:void removeAllJobs(long,long)",
            "org.apache.activemq.broker.scheduler.JobSchedulerFacade:void schedule(java.lang.String,org.apache.kahadb.util.ByteSequence,java.lang.String)",
            "org.apache.activemq.broker.scheduler.JobSchedulerFacade:void removeListener(org.apache.activemq.broker.scheduler.JobListener)",
            "org.apache.activemq.broker.scheduler.JobSchedulerFacade:void schedule(java.lang.String,org.apache.kahadb.util.ByteSequence,long)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void start()",
            "org.apache.activemq.broker.scheduler.JobSchedulerFacade:void remove(long)",
            "org.apache.activemq.broker.scheduler.JobSchedulerFacade:java.util.List getAllJobs()",
            "org.apache.activemq.broker.scheduler.JobSchedulerFacade:java.util.List getAllJobs(long,long)",
            "org.apache.activemq.broker.scheduler.JobSchedulerFacade:void removeAllJobs()",
            "org.apache.activemq.broker.scheduler.JobSchedulerFacade:java.lang.String getName()",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.scheduler.JobSchedulerFacade:java.util.List getNextScheduleJobs()",
            "org.apache.activemq.broker.scheduler.JobSchedulerFacade:void schedule(java.lang.String,org.apache.kahadb.util.ByteSequence,java.lang.String,long,long,int)",
            "org.apache.activemq.broker.scheduler.JobSchedulerFacade:void addListener(org.apache.activemq.broker.scheduler.JobListener)",
            "org.apache.activemq.broker.scheduler.JobSchedulerFacade:void remove(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.store.kahadb.plist.PListStore getTempDataStore()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.store.kahadb.plist.PListStore getTempDataStore()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void <init>(org.apache.activemq.broker.Broker,java.lang.String,boolean)",
            "org.apache.activemq.broker.region.TopicSubscription:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.usage.SystemUsage)"
        ]
    },
    "org.apache.activemq.xbean.XBeanBrokerService:void ensureSystemUsageHasStore()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.xbean.XBeanBrokerService:void afterPropertiesSet()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.usage.SystemUsage getSystemUsage()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:void setMemoryLimit(long)",
            "org.apache.activemq.broker.jmx.BrokerView:void setStoreLimit(long)",
            "org.apache.activemq.broker.jmx.BrokerView:long getStoreLimit()",
            "org.apache.activemq.broker.jmx.BrokerView:void setTempLimit(long)",
            "org.apache.activemq.xbean.XBeanBrokerService:void ensureSystemUsageHasStore()",
            "org.apache.activemq.broker.region.TempQueue:void initialize()",
            "org.apache.activemq.plugin.StatisticsBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.usage.SystemUsage getProducerSystemUsage()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.usage.SystemUsage getConsumerSystemUsage()",
            "org.apache.activemq.broker.jmx.BrokerView:int getMemoryPercentUsage()",
            "org.apache.activemq.broker.jmx.BrokerView:int getTempPercentUsage()",
            "org.apache.activemq.broker.region.Queue:void initialize()",
            "org.apache.activemq.broker.jmx.BrokerView:int getStorePercentUsage()",
            "org.apache.activemq.broker.jmx.BrokerView:long getTempLimit()",
            "org.apache.activemq.broker.jmx.BrokerView:long getMemoryLimit()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createRegionBroker(org.apache.activemq.broker.region.DestinationInterceptor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createRegionBroker()"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(org.apache.activemq.transport.Transport,org.apache.activemq.management.JMSStatsImpl)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQXAConnection:void <init>(org.apache.activemq.transport.Transport,org.apache.activemq.util.IdGenerator,org.apache.activemq.management.JMSStatsImpl)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQXAConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(org.apache.activemq.transport.Transport,org.apache.activemq.management.JMSStatsImpl)"
        ]
    },
    "org.apache.activemq.transport.nio.SelectorSelection:void onError(java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorWorker$1:void run()"
        ]
    },
    "org.apache.activemq.network.NetworkConnector:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.NetworkConnectorView:void stop()"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.async.AsyncDataManager:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void stop()",
            "org.apache.activemq.kaha.impl.async.DataManagerFacade:void close()",
            "org.apache.activemq.kaha.impl.async.JournalFacade:void close()"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpTransport:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.InactivityMonitor:void stop()",
            "org.apache.activemq.transport.TransportFilter:void stop()"
        ]
    },
    "org.apache.activemq.broker.scheduler.JobSchedulerImpl:void mainLoop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.scheduler.JobSchedulerImpl:void run()"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.broker.scheduler.JobSchedulerImpl:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TopicSubscription$1:void afterCommit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Topic:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.TempTopic:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.TempQueue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.region.QueueBrowserSubscription:void checkDone()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.QueueBrowserSubscription:void decrementQueueRef()",
            "org.apache.activemq.broker.region.QueueBrowserSubscription:void destinationsAdded()"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic$2:boolean recoverMessage(org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.PrefetchSubscription$3:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void startAllConnectors()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void start()",
            "org.apache.activemq.broker.BrokerService:void masterFailed()"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.MapContainer getMapContainer(java.lang.Object,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.MapContainer getMapContainer(java.lang.Object,java.lang.String)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:org.apache.activemq.kaha.MapContainer getMapReferenceContainer(java.lang.Object,java.lang.String)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void start()"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.ListContainer getListContainer(java.lang.Object,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.ListContainer getListContainer(java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:void initialize()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:void clear()",
            "org.apache.activemq.kaha.impl.KahaStore:void deleteMapContainer(org.apache.activemq.kaha.ContainerId)",
            "org.apache.activemq.kaha.impl.KahaStore:boolean doesListContainerExist(java.lang.Object,java.lang.String)",
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.MapContainer getMapContainer(java.lang.Object,java.lang.String,boolean)",
            "org.apache.activemq.kaha.impl.KahaStore:java.util.Set getMapContainerIds()",
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.ListContainer getListContainer(java.lang.Object,java.lang.String,boolean)",
            "org.apache.activemq.kaha.impl.KahaStore:void deleteListContainer(org.apache.activemq.kaha.ContainerId)",
            "org.apache.activemq.kaha.impl.KahaStore:java.util.Set getListContainerIds()",
            "org.apache.activemq.kaha.impl.KahaStore:boolean doesMapContainerExist(java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:void generateInterestInMapDataFiles()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:void initialize()"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:void generateInterestInListDataFiles()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:void initialize()"
        ]
    },
    "org.apache.activemq.network.LdapNetworkConnector:void objectAdded(javax.naming.event.NamingEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.LdapNetworkConnector:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.LdapNetworkConnector:void objectChanged(javax.naming.event.NamingEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.scheduler.JobSchedulerFacade:long getNextScheduleTime()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.JobSchedulerView:java.lang.String getNextScheduleTime()"
        ]
    },
    "org.apache.activemq.broker.scheduler.JobSchedulerFacade:void removeAllJobs(long,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.JobSchedulerView:void removeAllJobs(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.scheduler.JobSchedulerFacade:void schedule(java.lang.String,org.apache.kahadb.util.ByteSequence,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.scheduler.JobSchedulerFacade:void removeListener(org.apache.activemq.broker.scheduler.JobListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.scheduler.JobSchedulerFacade:void schedule(java.lang.String,org.apache.kahadb.util.ByteSequence,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.scheduler.SchedulerBroker:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void start()",
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.broker.BrokerBroadcaster:void start()"
        ]
    },
    "org.apache.activemq.broker.scheduler.JobSchedulerFacade:void remove(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.scheduler.JobSchedulerFacade:java.util.List getAllJobs()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.JobSchedulerView:javax.management.openmbean.TabularData getAllJobs()"
        ]
    },
    "org.apache.activemq.broker.scheduler.JobSchedulerFacade:java.util.List getAllJobs(long,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.JobSchedulerView:javax.management.openmbean.TabularData getAllJobs(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.scheduler.JobSchedulerFacade:void removeAllJobs()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.JobSchedulerView:void removeAllJobs()"
        ]
    },
    "org.apache.activemq.broker.scheduler.JobSchedulerFacade:java.lang.String getName()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.scheduler.SchedulerBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void doResend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.scheduler.JobSchedulerFacade:java.util.List getNextScheduleJobs()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.JobSchedulerView:javax.management.openmbean.TabularData getNextScheduleJobs()"
        ]
    },
    "org.apache.activemq.broker.scheduler.JobSchedulerFacade:void schedule(java.lang.String,org.apache.kahadb.util.ByteSequence,java.lang.String,long,long,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.scheduler.JobSchedulerFacade:void addListener(org.apache.activemq.broker.scheduler.JobListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.scheduler.JobSchedulerFacade:void remove(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.JobSchedulerView:void removeJob(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.store.kahadb.plist.PListStore getTempDataStore()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.store.kahadb.plist.PListStore getTempDataStore()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void <init>(org.apache.activemq.broker.Broker,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.FilePendingSubscriberMessageStoragePolicy:org.apache.activemq.broker.region.cursors.PendingMessageCursor getSubscriberPendingMessageCursor(org.apache.activemq.broker.Broker,java.lang.String,int,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void start()",
            "org.apache.activemq.broker.region.policy.FilePendingDurableSubscriberMessageStoragePolicy:org.apache.activemq.broker.region.cursors.PendingMessageCursor getSubscriberPendingMessageCursor(org.apache.activemq.broker.Broker,java.lang.String,java.lang.String,int,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void <init>(org.apache.activemq.broker.Broker,java.lang.String,java.lang.String,int,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.policy.FilePendingQueueMessageStoragePolicy:org.apache.activemq.broker.region.cursors.PendingMessageCursor getQueuePendingMessageCursor(org.apache.activemq.broker.Broker,org.apache.activemq.broker.region.Queue)",
            "org.apache.activemq.broker.region.TopicSubscription:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.usage.SystemUsage)"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.usage.SystemUsage)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TempTopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:void setMemoryLimit(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:void setStoreLimit(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:long getStoreLimit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:void setTempLimit(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TempQueue:void initialize()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)",
            "org.apache.activemq.broker.region.TempQueueRegion:org.apache.activemq.broker.region.Destination doCreateDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.plugin.StatisticsBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.usage.SystemUsage getProducerSystemUsage()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void start()",
            "org.apache.activemq.broker.region.BaseDestination:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.store.MessageStore,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.usage.SystemUsage getConsumerSystemUsage()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createRegionBroker(org.apache.activemq.broker.region.DestinationInterceptor)"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:int getMemoryPercentUsage()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:int getTempPercentUsage()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:void initialize()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:int getStorePercentUsage()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:long getTempLimit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:long getMemoryLimit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createRegionBroker()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createBroker()"
        ]
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(org.apache.activemq.transport.Transport,org.apache.activemq.management.JMSStatsImpl)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.jmx.NetworkConnectorView:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.amq.AMQPersistenceAdapter:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.async.DataManagerFacade:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.async.JournalFacade:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.AbstractRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.broker.region.TempTopic:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TempQueue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.region.QueueBrowserSubscription:void decrementQueueRef()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue$BrowserDispatch:void done()"
        ]
    },
    "org.apache.activemq.broker.region.QueueBrowserSubscription:void destinationsAdded()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.Topic$2:boolean recoverMessage(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaMessageStore:boolean recoverMessage(org.apache.activemq.store.MessageRecoveryListener,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$4:void execute(org.apache.kahadb.page.Transaction)",
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore$1:boolean recoverMessage(long,byte[])"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.MapContainer getMapContainer(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:void clear()",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:org.apache.activemq.kaha.MapContainer addSubscriberMessageContainer(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:org.apache.activemq.kaha.MapContainer getSubsMapContainer(java.lang.Object,java.lang.String)",
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:org.apache.activemq.kaha.MapContainer getMapContainer(java.lang.Object,java.lang.String)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void start()",
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:org.apache.activemq.store.TransactionStore createTransactionStore()",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:org.apache.activemq.kaha.MapContainer addSubscriberMessageContainer(java.lang.Object)",
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.MapContainer getMapContainer(java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:org.apache.activemq.kaha.MapContainer getMapReferenceContainer(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:org.apache.activemq.store.ReferenceStore createQueueReferenceStore(org.apache.activemq.command.ActiveMQQueue)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:org.apache.activemq.store.TopicReferenceStore createTopicReferenceStore(org.apache.activemq.command.ActiveMQTopic)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void start()"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.ListContainer getListContainer(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:void clear()",
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:org.apache.activemq.store.TopicMessageStore createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:org.apache.activemq.store.TopicReferenceStore createTopicReferenceStore(org.apache.activemq.command.ActiveMQTopic)",
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:org.apache.activemq.kaha.ListContainer getListContainer(java.lang.Object,java.lang.String)",
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.ListContainer getListContainer(java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:void clear()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:boolean delete()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void deleteAllMessages()",
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:void deleteAllMessages()"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:void deleteMapContainer(org.apache.activemq.kaha.ContainerId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:void deleteMapContainer(java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:boolean doesListContainerExist(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:boolean doesListContainerExist(java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:java.util.Set getMapContainerIds()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void start()",
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:java.util.Set getDestinations()"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:void deleteListContainer(org.apache.activemq.kaha.ContainerId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:void deleteListContainer(java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:java.util.Set getListContainerIds()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.KahaStore:boolean doesMapContainerExist(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:boolean doesMapContainerExist(java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.jmx.JobSchedulerView:java.lang.String getNextScheduleTime()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.JobSchedulerView:void removeAllJobs(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void start()",
            "org.apache.activemq.plugin.StatisticsBroker:void start()",
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void start()",
            "org.apache.activemq.broker.BrokerBroadcaster:void start()"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void start()",
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.broker.BrokerBroadcaster:void start()"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.JobSchedulerView:javax.management.openmbean.TabularData getAllJobs()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.JobSchedulerView:javax.management.openmbean.TabularData getAllJobs(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.JobSchedulerView:void removeAllJobs()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.BaseDestination:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void messageSent(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:void dispatch(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void fireConsumerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.advisory.AdvisoryBroker:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.usage.Usage)",
            "org.apache.activemq.advisory.AdvisoryBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.advisory.AdvisoryBroker:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.advisory.AdvisoryBroker:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireProducerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void nowMasterBroker()"
        ]
    },
    "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.plugin.StatisticsBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.UserIDBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.security.AuthorizationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void doResend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.plugin.StatisticsBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.BaseDestination:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void scheduledJob(java.lang.String,org.apache.kahadb.util.ByteSequence)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker$1:void recover(org.apache.activemq.command.XATransactionId,org.apache.activemq.command.Message[],org.apache.activemq.command.MessageAck[])",
            "org.apache.activemq.broker.region.BaseDestination:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void doResend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.util.BrokerSupport:void doResend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.util.BrokerSupport:void resendNoCopy(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.util.BrokerSupport:void resend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.JobSchedulerView:javax.management.openmbean.TabularData getNextScheduleJobs()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.JobSchedulerView:void removeJob(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.policy.FilePendingSubscriberMessageStoragePolicy:org.apache.activemq.broker.region.cursors.PendingMessageCursor getSubscriberPendingMessageCursor(org.apache.activemq.broker.Broker,java.lang.String,int,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void start()"
        ]
    },
    "org.apache.activemq.broker.region.policy.FilePendingDurableSubscriberMessageStoragePolicy:org.apache.activemq.broker.region.cursors.PendingMessageCursor getSubscriberPendingMessageCursor(org.apache.activemq.broker.Broker,java.lang.String,java.lang.String,int,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void <init>(org.apache.activemq.broker.Broker,java.lang.String,java.lang.String,int,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo,boolean)",
            "org.apache.activemq.broker.region.policy.StorePendingDurableSubscriberMessageStoragePolicy:org.apache.activemq.broker.region.cursors.PendingMessageCursor getSubscriberPendingMessageCursor(org.apache.activemq.broker.Broker,java.lang.String,java.lang.String,int,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.policy.FilePendingQueueMessageStoragePolicy:org.apache.activemq.broker.region.cursors.PendingMessageCursor getQueuePendingMessageCursor(org.apache.activemq.broker.Broker,org.apache.activemq.broker.region.Queue)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.jmx.ManagedTopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.TempTopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.TempTopicRegion:org.apache.activemq.broker.region.Destination doCreateDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.TempQueueRegion:org.apache.activemq.broker.region.Destination doCreateDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractTempRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.BaseDestination:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.store.MessageStore,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.TopicMessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)",
            "org.apache.activemq.broker.region.Queue:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.MessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createBroker()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker getBroker()"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination lookup(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.broker.region.Queue$BrowserDispatch:void done()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaMessageStore:boolean recoverMessage(org.apache.activemq.store.MessageRecoveryListener,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$4:void execute(org.apache.kahadb.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.JDBCTopicMessageStore$1:boolean recoverMessage(long,byte[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverSubscription(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:org.apache.activemq.kaha.MapContainer addSubscriberMessageContainer(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void <init>(org.apache.activemq.kaha.Store,org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter,org.apache.activemq.kaha.MapContainer,org.apache.activemq.kaha.ListContainer,org.apache.activemq.kaha.MapContainer,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:org.apache.activemq.kaha.MapContainer getSubsMapContainer(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:org.apache.activemq.store.TopicMessageStore createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:org.apache.activemq.store.TopicReferenceStore createTopicReferenceStore(org.apache.activemq.command.ActiveMQTopic)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:org.apache.activemq.kaha.MapContainer getMapContainer(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:org.apache.activemq.store.MessageStore createQueueMessageStore(org.apache.activemq.command.ActiveMQQueue)",
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:org.apache.activemq.store.TopicMessageStore createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:org.apache.activemq.store.TransactionStore createTransactionStore()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:org.apache.activemq.kaha.MapContainer addSubscriberMessageContainer(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void <init>(org.apache.activemq.kaha.Store,org.apache.activemq.kaha.MapContainer,org.apache.activemq.kaha.ListContainer,org.apache.activemq.kaha.MapContainer,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.MapContainer getMapContainer(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:org.apache.activemq.store.ReferenceStore createQueueReferenceStore(org.apache.activemq.command.ActiveMQQueue)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:org.apache.activemq.store.MessageStore createQueueMessageStore(org.apache.activemq.command.ActiveMQQueue)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:org.apache.activemq.store.TopicReferenceStore createTopicReferenceStore(org.apache.activemq.command.ActiveMQTopic)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:org.apache.activemq.store.TopicMessageStore createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void recoverSubscription(org.apache.activemq.command.SubscriptionInfo)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void recoverState()"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:org.apache.activemq.store.TopicMessageStore createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:org.apache.activemq.kaha.ListContainer getListContainer(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.ListContainer getListContainer(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void start()"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:boolean delete()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void deleteAllMessages()",
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:void deleteAllMessages()",
            "org.apache.activemq.kaha.StoreFactory:boolean delete(java.io.File)",
            "org.apache.activemq.kaha.StoreFactory:boolean delete(java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void deleteAllMessages()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void start()"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:void deleteAllMessages()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void deleteAllMessages()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void clearMessages()"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:void deleteMapContainer(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void removeSubscriberMessageContainer(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void removeReferenceStore(org.apache.activemq.store.kahadaptor.KahaReferenceStore)",
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:void removeQueueMessageStore(org.apache.activemq.command.ActiveMQQueue)",
            "org.apache.activemq.kaha.impl.KahaStore:void deleteMapContainer(java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:boolean doesListContainerExist(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:java.util.Set getDestinations()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:java.util.Set getDestinations()"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:void deleteListContainer(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void removeSubscriberMessageContainer(java.lang.Object)",
            "org.apache.activemq.kaha.impl.KahaStore:void deleteListContainer(java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:boolean doesMapContainerExist(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.plugin.StatisticsBroker:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:void messageSent(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue$7:void afterCommit()",
            "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void dispatch(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic$4:void afterCommit()",
            "org.apache.activemq.broker.region.Topic:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireConsumerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void fireConsumerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command)",
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.usage.Usage)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.usage.Usage)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireProducerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireProducerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void nowMasterBroker()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void nowMasterBroker()"
        ]
    },
    "org.apache.activemq.broker.UserIDBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.security.AuthorizationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.scheduler.SchedulerBroker:void scheduledJob(java.lang.String,org.apache.kahadb.util.ByteSequence)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransactionBroker$1:void recover(org.apache.activemq.command.XATransactionId,org.apache.activemq.command.Message[],org.apache.activemq.command.MessageAck[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.memory.MemoryTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)"
        ]
    },
    "org.apache.activemq.util.BrokerSupport:void resendNoCopy(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.util.BrokerSupport:void resend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:boolean moveMessageTo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.Queue:int copyMatchingMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.policy.StorePendingDurableSubscriberMessageStoragePolicy:org.apache.activemq.broker.region.cursors.PendingMessageCursor getSubscriberPendingMessageCursor(org.apache.activemq.broker.Broker,java.lang.String,java.lang.String,int,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ManagedTopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.jmx.ManagedTopicRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.jmx.ManagedQueueRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.TempTopicRegion:org.apache.activemq.broker.region.Destination doCreateDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractTempRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractTempRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.TopicMessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TempTopic:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.TopicMessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)",
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.MessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TempQueue:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.MessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)",
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker getBroker()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startDestinations()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.region.Destination getDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.TransportConnector:void start()",
            "org.apache.activemq.broker.BrokerService:void removeDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void start()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void start()",
            "org.apache.activemq.network.LdapNetworkConnector:void addConnector(javax.naming.directory.SearchResult)",
            "org.apache.activemq.broker.jmx.BrokerView:void gc()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.BrokerService:void start()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.ConnectionContext getAdminConnectionContext()",
            "org.apache.activemq.broker.ft.MasterConnector:void startBridge()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.jmx.BrokerView getAdminView()",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.Broker getRoot()",
            "org.apache.activemq.broker.region.Queue:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.MessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)",
            "org.apache.activemq.broker.region.BaseDestination:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.store.MessageStore,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)",
            "org.apache.activemq.advisory.AdvisoryBroker:void nowMasterBroker()"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination lookup(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.RegionBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.region.RegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination lookup(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)",
            "org.apache.activemq.broker.region.AbstractRegion:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverSubscription(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void <init>(org.apache.activemq.kaha.Store,org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter,org.apache.activemq.kaha.MapContainer,org.apache.activemq.kaha.ListContainer,org.apache.activemq.kaha.MapContainer,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:org.apache.activemq.store.TopicReferenceStore createTopicReferenceStore(org.apache.activemq.command.ActiveMQTopic)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void recoverSubscription(org.apache.activemq.command.SubscriptionInfo)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void recoverState()",
            "org.apache.activemq.store.amq.AMQTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:org.apache.activemq.store.MessageStore createQueueMessageStore(org.apache.activemq.command.ActiveMQQueue)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void <init>(org.apache.activemq.kaha.Store,org.apache.activemq.kaha.MapContainer,org.apache.activemq.kaha.ListContainer,org.apache.activemq.kaha.MapContainer,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:org.apache.activemq.store.TopicMessageStore createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)"
        ]
    },
    "org.apache.activemq.store.amq.AMQPersistenceAdapter:org.apache.activemq.store.MessageStore createQueueMessageStore(org.apache.activemq.command.ActiveMQQueue)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:org.apache.activemq.store.MessageStore createMessageStore(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.store.amq.AMQPersistenceAdapter:org.apache.activemq.store.TopicMessageStore createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:org.apache.activemq.store.MessageStore createMessageStore(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void recoverSubscription(org.apache.activemq.command.SubscriptionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void recover()"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void recoverState()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.kaha.StoreFactory:boolean delete(java.io.File)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void deleteAllMessages()",
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:void deleteAllMessages()"
        ]
    },
    "org.apache.activemq.kaha.StoreFactory:boolean delete(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void clearMessages()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void recover()"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void removeSubscriberMessageContainer(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void deleteSubscription(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void removeReferenceStore(org.apache.activemq.store.kahadaptor.KahaReferenceStore)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void dispose(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:void removeQueueMessageStore(org.apache.activemq.command.ActiveMQQueue)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void removeQueueMessageStore(org.apache.activemq.command.ActiveMQQueue)"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:void deleteMapContainer(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.amq.AMQPersistenceAdapter:java.util.Set getDestinations()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void removeSubscriberMessageContainer(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:void deleteListContainer(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue$7:void afterCommit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue$6:void run()"
        ]
    },
    "org.apache.activemq.broker.region.Topic$4:void afterCommit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Topic:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic$3:void run()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireConsumerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.usage.Usage)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.usage.Usage)",
            "org.apache.activemq.broker.BrokerFilter:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.usage.Usage)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.BrokerFilter:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.BrokerFilter:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.BrokerFilter:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.advisory.AdvisoryBroker:void sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireProducerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void nowMasterBroker()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void nowMasterBroker()",
            "org.apache.activemq.advisory.AdvisoryBroker:void nowMasterBroker()"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker:void start()"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker:void start()"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.plugin.DiscardingDLQBroker:void sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:boolean moveMessageTo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.jmx.QueueView:boolean retryMessage(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:int copyMatchingMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:int copyMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.region.Queue:boolean copyMessageTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTopicRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedQueueRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.broker.region.TempTopic:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.TopicMessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TempQueue:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.MessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)",
            "org.apache.activemq.broker.region.TempQueueRegion:org.apache.activemq.broker.region.Destination doCreateDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void startDestinations()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void start()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.region.Destination getDestination(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.MirroredQueue:org.apache.activemq.broker.region.Destination getMirrorDestination(org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void removeDestination(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.MirroredQueue:void remove(org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void start()"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:void gc()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.ConnectionContext getAdminConnectionContext()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startDestinations()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.region.Destination getDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerService:void removeDestination(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.ft.MasterConnector:void startBridge()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.ft.MasterConnector:void start()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.jmx.BrokerView getAdminView()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.AbstractRegion:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void start()"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.Broker getRoot()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void sendToDLQ(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:void discard(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.RegionBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.Broker getRoot()",
            "org.apache.activemq.broker.region.RegionBroker:void purgeInactiveDestinations()",
            "org.apache.activemq.broker.region.RegionBroker:void sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void discard(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void doResend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination lookup(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.security.AuthorizationBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.RegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.security.AuthorizationBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.cluster.ConnectionSplitBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:javax.management.ObjectName createDurableSubscriber(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void doFillBatch()"
        ]
    },
    "org.apache.activemq.store.ProxyMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void doFillBatch()"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void doFillBatch()",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.store.journal.JournalMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.broker.region.Queue:void initialize()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:java.util.List getSubscriberMessages(org.apache.activemq.broker.jmx.SubscriptionView)"
        ]
    },
    "org.apache.activemq.store.ProxyMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.broker.region.Queue:void initialize()"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.amq.AMQTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)"
        ]
    },
    "org.apache.activemq.store.amq.AMQPersistenceAdapter:org.apache.activemq.store.MessageStore createMessageStore(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQTxOperation:boolean replay(org.apache.activemq.store.amq.AMQPersistenceAdapter,org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void recover()"
        ]
    },
    "org.apache.activemq.store.amq.AMQPersistenceAdapter:void recover()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void start()"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void deleteSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void dispose(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void dispose(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.amq.AMQMessageStore:void dispose(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.amq.AMQPersistenceAdapter:void removeQueueMessageStore(org.apache.activemq.command.ActiveMQQueue)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.plugin.DiscardingDLQBroker:void sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination lookup(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.RegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.CompositeDestinationBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.advisory.AdvisoryBroker:void sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.plugin.DiscardingDLQBroker:void sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.plugin.DiscardingDLQBroker:void sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.region.Queue:boolean moveMessageTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:boolean retryMessage(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:int copyMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:int copyMatchingMessagesTo(java.lang.String,java.lang.String,int)",
            "org.apache.activemq.broker.region.Queue:int copyMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:boolean copyMessageTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:boolean copyMessageTo(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.MirroredQueue:org.apache.activemq.broker.region.Destination getMirrorDestination(org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.MirroredQueue:org.apache.activemq.broker.region.Destination intercept(org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.MirroredQueue:void remove(org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.ft.MasterConnector:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.FTConnectorView:void start()"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void start()",
            "org.apache.activemq.broker.BrokerFilter:void start()",
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.broker.BrokerBroadcaster:void start()"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void sendToDLQ(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void discard(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.BrokerFilter:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.Broker getRoot()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.Broker getRoot()"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void purgeInactiveDestinations()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker$1:void run()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void discard(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:boolean tryAddMessageLast(org.apache.activemq.broker.region.MessageReference,long)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void expireOldMessages()"
        ]
    },
    "org.apache.activemq.security.AuthorizationBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.security.AuthorizationBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.view.DestinationDotFileInterceptor:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.security.AuthorizationBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.security.AuthorizationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.RegionBroker:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)"
        ]
    },
    "org.apache.activemq.security.AuthorizationBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.cluster.ConnectionSplitBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:javax.management.ObjectName createDurableSubscriber(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.journal.JournalMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void doFillBatch()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void fillBatch()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void doFillBatch()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Topic:org.apache.activemq.command.Message[] browse()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:java.util.List getSubscriberMessages(org.apache.activemq.broker.jmx.SubscriptionView)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.TabularData browseAsTable(org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.CompositeData[] browse(org.apache.activemq.broker.jmx.SubscriptionView)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.amq.AMQTxOperation:boolean replay(org.apache.activemq.store.amq.AMQPersistenceAdapter,org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.amq.AMQTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void dispose(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQMessageStore:void dispose(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.amq.AMQMessageStore:void dispose(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.region.Topic:void deleteSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.util.SubscriptionKey)",
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.cluster.ConnectionSplitBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.cluster.ConnectionSplitBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.BrokerFilter:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.security.JaasCertificateAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.security.JaasAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.security.SimpleAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.security.JaasDualAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.advisory.AdvisoryBroker:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.security.JaasAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.security.JaasDualAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.security.SimpleAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.security.JaasCertificateAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.security.AuthorizationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.CompositeDestinationBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.CompositeDestinationBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.jmx.QueueView:int moveMatchingMessagesTo(java.lang.String,java.lang.String,int)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:boolean moveMessageTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:boolean moveMessageTo(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:int copyMatchingMessagesTo(java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:int copyMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:int copyMatchingMessagesTo(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:boolean copyMessageTo(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.virtual.MirroredQueue:org.apache.activemq.broker.region.Destination intercept(org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.FTConnectorView:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void start()",
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.broker.BrokerBroadcaster:void start()"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.SchedulerTimerTask:void run()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:boolean tryAddMessageLast(org.apache.activemq.broker.region.MessageReference,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void expireOldMessages()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void onUsageChanged(org.apache.activemq.usage.Usage,int,int)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:boolean tryAddMessageLast(org.apache.activemq.broker.region.MessageReference,long)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.security.AuthorizationBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.security.AuthorizationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void fillBatch()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:boolean hasNext()",
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void reset()"
        ]
    },
    "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages()"
        ]
    },
    "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse()"
        ]
    },
    "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.TabularData browseAsTable(org.apache.activemq.broker.jmx.SubscriptionView)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:javax.management.openmbean.TabularData browseAsTable()",
            "org.apache.activemq.broker.jmx.DurableSubscriptionView:javax.management.openmbean.TabularData browseAsTable()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.CompositeData[] browse(org.apache.activemq.broker.jmx.SubscriptionView)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DurableSubscriptionView:javax.management.openmbean.CompositeData[] browse()",
            "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:javax.management.openmbean.CompositeData[] browse()"
        ]
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Topic:void deleteSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.util.SubscriptionKey)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.cluster.ConnectionSplitBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.security.JaasCertificateAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.security.JaasDualAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.security.JaasAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.security.JaasDualAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.security.SimpleAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.security.JaasDualAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.security.JaasAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.security.JaasDualAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.security.JaasDualAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.security.SimpleAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.security.JaasCertificateAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.security.JaasDualAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.security.AuthorizationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:int moveMatchingMessagesTo(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:int moveMatchingMessagesTo(java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.QueueView:boolean moveMessageTo(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.QueueView:int copyMatchingMessagesTo(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void addRecoveredMessage(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void onUsageChanged(org.apache.activemq.usage.Usage,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:boolean hasNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:boolean hasNext()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void reset()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void reset()"
        ]
    },
    "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:javax.management.openmbean.TabularData browseAsTable()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.DurableSubscriptionView:javax.management.openmbean.TabularData browseAsTable()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.DurableSubscriptionView:javax.management.openmbean.CompositeData[] browse()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:javax.management.openmbean.CompositeData[] browse()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.QueueView:int moveMatchingMessagesTo(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void sendMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue$5:boolean recoverMessage(org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void addRecoveredMessage(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void doAddRecoveredMessage(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:boolean hasNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message getMessage(java.lang.String)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.QueueMessageReference getMatchingMessage(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.Queue:void doBrowse(java.util.List,int)",
            "org.apache.activemq.broker.region.Queue:java.util.List doPageIn(boolean)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void reset()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message getMessage(java.lang.String)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.QueueMessageReference getMatchingMessage(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.Queue:void doBrowse(java.util.List,int)",
            "org.apache.activemq.broker.region.Queue:java.util.List doPageIn(boolean)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void sendMessage(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue$7:void afterCommit()",
            "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.Queue$5:boolean recoverMessage(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaMessageStore:boolean recoverMessage(org.apache.activemq.store.MessageRecoveryListener,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.JDBCMessageStore$1:boolean recoverMessage(long,byte[])",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$4:void execute(org.apache.kahadb.page.Transaction)"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void doAddRecoveredMessage(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message getMessage(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:javax.management.openmbean.CompositeData getMessage(java.lang.String)",
            "org.apache.activemq.broker.jmx.QueueView:boolean retryMessage(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.QueueMessageReference getMatchingMessage(org.apache.activemq.command.MessageDispatchNotification)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void doBrowse(java.util.List,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void expireMessages()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message[] browse()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:java.util.List doPageIn(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(org.apache.activemq.broker.region.MessageReferenceFilter,int)",
            "org.apache.activemq.broker.region.Queue:void purge()",
            "org.apache.activemq.broker.region.Queue:void pageInMessages(boolean)",
            "org.apache.activemq.broker.region.Queue:int copyMatchingMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.region.Queue:void start()"
        ]
    },
    "org.apache.activemq.store.memory.MemoryMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.broker.region.Queue:void initialize()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:java.util.List getSubscriberMessages(org.apache.activemq.broker.jmx.SubscriptionView)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCMessageStore$1:boolean recoverMessage(long,byte[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecover(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$4:void execute(org.apache.kahadb.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.QueueView:javax.management.openmbean.CompositeData getMessage(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:void expireMessages()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void access$100(org.apache.activemq.broker.region.Queue)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message[] browse()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(org.apache.activemq.broker.region.MessageReferenceFilter,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:boolean removeMessage(java.lang.String)",
            "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(java.lang.String,int)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void purge()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TempQueue:void dispose(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.broker.jmx.QueueView:void purge()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void pageInMessages(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void doBrowse(java.util.List,int)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecover(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void access$100(org.apache.activemq.broker.region.Queue)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue$2:void run()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:boolean removeMessage(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:boolean removeMessage(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(java.lang.String,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(java.lang.String)",
            "org.apache.activemq.broker.jmx.QueueView:int removeMatchingMessages(java.lang.String,int)"
        ]
    },
    "org.apache.activemq.broker.region.TempQueue:void dispose(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.QueueView:void purge()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:boolean iterate()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()",
            "org.apache.activemq.broker.region.Queue:void wakeup()"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.broker.region.Queue$2:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.QueueView:boolean removeMessage(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:int removeMatchingMessages(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:int removeMatchingMessages(java.lang.String,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:void wakeup()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,long)",
            "org.apache.activemq.broker.region.Queue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Queue:void messageSent(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue$11:void afterCommit()"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:int removeMatchingMessages(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue$11:void afterCommit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)"
        ],
        "vulCaller": []
    }
}