{
    "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": true,
        "srcRoot": [
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": true,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpServerConnection:org.xnio.conduits.StreamSinkConduit getSinkConduit(io.undertow.server.HttpServerExchange,org.xnio.conduits.StreamSinkConduit)"
        ]
    },
    "io.undertow.server.protocol.http.HttpServerConnection:org.xnio.conduits.StreamSinkConduit getSinkConduit(io.undertow.server.HttpServerExchange,org.xnio.conduits.StreamSinkConduit)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:org.xnio.channels.StreamSinkChannel getResponseChannel()",
            "io.undertow.server.HttpServerExchange$WrapperStreamSinkConduitFactory:org.xnio.conduits.StreamSinkConduit create()"
        ]
    },
    "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": true,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:void performFlush(io.undertow.server.HttpServerExchange,io.undertow.server.protocol.http.HttpServerConnection)",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit$1:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.server.protocol.http.HttpServerConnection:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:void exchangeComplete(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:void performFlush(io.undertow.server.HttpServerExchange,io.undertow.server.protocol.http.HttpServerConnection)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:void exchangeComplete(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit$1:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.protocol.http.HttpServerConnection:void exchangeComplete(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:void exchangeComplete(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpServerConnection:void exchangeComplete(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()": {
        "isVulRoot": true,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void terminateRequest()",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange terminateResponse()",
            "io.undertow.server.HttpServerExchange:void closeAndFlushResponse()",
            "io.undertow.server.HttpServerExchange:void access$100(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.HttpServerExchange:void terminateRequest()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.Connectors:void terminateRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange terminateResponse()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.Connectors:void terminateResponse(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.HttpServerExchange:void closeAndFlushResponse()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange endExchange()",
            "io.undertow.server.HttpServerExchange:void access$000(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.HttpServerExchange:void access$100(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$5:void handleException(java.nio.channels.Channel,java.io.IOException)",
            "io.undertow.server.HttpServerExchange$3:void handleException(org.xnio.channels.StreamSourceChannel,java.io.IOException)"
        ]
    },
    "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()": {
        "isVulRoot": true,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.form.MultiPartParserDefinition$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.MetricsHandler$2:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.session.SessionAttachmentHandler$UpdateLastAccessTimeListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.RequestLimit$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.SSLHeaderHandler$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.RequestDumplingHandler$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler$AccessLogCompletionListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.proxy.ProxyHandler$2:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.Connectors$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool$2:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.JDBCLogHandler$JDBCLogCompletionListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.GracefulShutdownHandler$GracefulShutdownListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.error.FileErrorPageHandler$2$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)"
        ]
    },
    "io.undertow.server.handlers.form.MultiPartParserDefinition$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.handlers.MetricsHandler$2:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.session.SessionAttachmentHandler$UpdateLastAccessTimeListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.handlers.RequestLimit$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.handlers.SSLHeaderHandler$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.handlers.RequestDumplingHandler$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.handlers.accesslog.AccessLogHandler$AccessLogCompletionListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$2:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.Connectors$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool$2:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.handlers.JDBCLogHandler$JDBCLogCompletionListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.handlers.GracefulShutdownHandler$GracefulShutdownListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.handlers.error.FileErrorPageHandler$2$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.HttpServerExchange:org.xnio.channels.StreamSinkChannel getResponseChannel()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpContinue:io.undertow.server.protocol.http.HttpContinue$ContinueResponseSender createResponseSender(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.DirectoryUtils:void renderDirectoryListing(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.resource.Resource)",
            "io.undertow.io.AsyncSenderImpl$TransferTask:boolean run(boolean)",
            "io.undertow.server.HttpServerExchange:void closeAndFlushResponse()",
            "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.error.FileErrorPageHandler$2:void run()",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.UndertowOutputStream:void close()",
            "io.undertow.io.UndertowOutputStream:void writeBufferBlocking(boolean)",
            "io.undertow.io.UndertowOutputStream:void transferFrom(java.nio.channels.FileChannel)",
            "io.undertow.io.UndertowOutputStream:void flush()",
            "io.undertow.io.UndertowOutputStream:void write(java.nio.ByteBuffer[])",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.io.UndertowOutputStream:void write(byte[],int,int)"
        ]
    },
    "io.undertow.server.HttpServerExchange$WrapperStreamSinkConduitFactory:org.xnio.conduits.StreamSinkConduit create()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$WrapperStreamSinkConduitFactory:org.xnio.conduits.Conduit create()",
            "io.undertow.server.HttpServerExchange:org.xnio.channels.StreamSinkChannel getResponseChannel()"
        ]
    },
    "io.undertow.server.Connectors:void terminateRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:void setupRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpTransferEncoding:boolean handleRequestEncoding(io.undertow.server.HttpServerExchange,java.lang.String,java.lang.String,io.undertow.server.protocol.http.HttpServerConnection,io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit,boolean)",
            "io.undertow.server.protocol.http.HttpServerConnection:io.undertow.server.HttpServerExchange sendOutOfBandResponse(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.ajp.AjpReadListener:org.xnio.conduits.StreamSourceConduit createSourceConduit(org.xnio.conduits.StreamSourceConduit,io.undertow.server.protocol.ajp.AjpServerResponseConduit,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.ajp.AjpReadListener$3:void handleEvent(io.undertow.server.protocol.ajp.AjpServerRequestConduit)",
            "io.undertow.server.protocol.http.HttpTransferEncoding$2:void handleEvent(io.undertow.conduits.ChunkedStreamSourceConduit)",
            "io.undertow.server.protocol.http.HttpTransferEncoding$1:void handleEvent(io.undertow.conduits.FixedLengthStreamSourceConduit)"
        ]
    },
    "io.undertow.server.Connectors:void terminateResponse(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpReadListener$1:void handleEvent(io.undertow.server.protocol.ajp.AjpServerResponseConduit)",
            "io.undertow.server.protocol.http.HttpTransferEncoding$3:void handleEvent(org.xnio.conduits.StreamSinkConduit)",
            "io.undertow.server.protocol.http.ServerFixedLengthStreamSinkConduit:void channelFinished()"
        ]
    },
    "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange endExchange()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.resource.DirectoryUtils:void renderDirectoryListing(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.resource.Resource)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.ResponseCache$DereferenceCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler$ResponseCallback:void failed(java.io.IOException)",
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:void close()",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.impl.FormAuthenticationMechanism$1:boolean handleDefaultResponse(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.http.HttpContinue:void rejectExchange(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction:void run()",
            "io.undertow.server.handlers.cache.ResponseCache$DereferenceCallback:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.proxy.ProxyHandler$IoExceptionHandler:void handleException(java.nio.channels.Channel,java.io.IOException)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.DirectoryUtils:boolean sendRequestedBlobs(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RedirectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void run()",
            "io.undertow.io.DefaultIoCallback$1:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.AbstractServerConnection$CloseSetter:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.server.handlers.resource.ResourceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyClientHandler:void failed(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler:void serveResource(io.undertow.server.HttpServerExchange,boolean)",
            "io.undertow.server.handlers.error.FileErrorPageHandler$2:void run()",
            "io.undertow.io.DefaultIoCallback:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void run()",
            "io.undertow.server.handlers.proxy.ProxyHandler$1:void run()",
            "io.undertow.io.DefaultIoCallback$1:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1:void failed(java.io.IOException)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler$1:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.ResponseCache:boolean tryServeResponse(boolean)",
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:void endExchange()",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.impl.FormAuthenticationMechanism:io.undertow.security.api.AuthenticationMechanism$AuthenticationMechanismOutcome runFormAuth(io.undertow.server.HttpServerExchange,io.undertow.security.api.SecurityContext)"
        ]
    },
    "io.undertow.server.HttpServerExchange:void access$000(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$2:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.server.HttpServerExchange$5:void handleException(java.nio.channels.Channel,java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.HttpServerExchange$3:void handleException(org.xnio.channels.StreamSourceChannel,java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$3:void handleException(java.nio.channels.Channel,java.io.IOException)"
        ]
    },
    "io.undertow.server.protocol.http.HttpContinue:io.undertow.server.protocol.http.HttpContinue$ContinueResponseSender createResponseSender(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:void awaitReadable()",
            "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:long transferTo(long,long,java.nio.channels.FileChannel)"
        ]
    },
    "io.undertow.server.handlers.resource.DirectoryUtils:void renderDirectoryListing(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.resource.Resource)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.resource.ResourceHandler$1:void run()"
        ]
    },
    "io.undertow.io.AsyncSenderImpl$TransferTask:boolean run(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()",
            "io.undertow.io.AsyncSenderImpl$TransferTask:void run()"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.io.DefaultIoCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.io.AsyncSenderImpl:void close()"
        ]
    },
    "io.undertow.server.handlers.error.FileErrorPageHandler$2:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpContinue:void sendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer)",
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:org.xnio.IoFuture sendData(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.io.UndertowOutputStream:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.io.UndertowOutputStream:void updateWritten(long)",
            "io.undertow.io.BlockingSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.server.protocol.http.HttpContinue:void sendContinueResponseBlocking(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.io.UndertowOutputStream:void writeBufferBlocking(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.io.UndertowOutputStream:void close()",
            "io.undertow.io.UndertowOutputStream:void transferFrom(java.nio.channels.FileChannel)",
            "io.undertow.io.UndertowOutputStream:void flush()",
            "io.undertow.io.UndertowOutputStream:void write(byte[],int,int)"
        ]
    },
    "io.undertow.io.UndertowOutputStream:void transferFrom(java.nio.channels.FileChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void performTransfer(java.nio.channels.FileChannel,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.io.UndertowOutputStream:void flush()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.io.UndertowOutputStream:void updateWritten(long)"
        ]
    },
    "io.undertow.io.UndertowOutputStream:void write(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.io.UndertowOutputStream:void write(java.nio.ByteBuffer)",
            "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer[],io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCache:boolean tryServeResponse(boolean)",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer[])",
            "io.undertow.io.AsyncSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.CachedResource:void serve(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.io.UndertowOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.io.UndertowOutputStream:void write(int)",
            "io.undertow.io.BlockingSenderImpl:void performTransfer(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.io.UndertowOutputStream:void write(byte[])",
            "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer[],io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.HttpServerExchange$WrapperStreamSinkConduitFactory:org.xnio.conduits.Conduit create()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.encoding.AllowedContentEncodings:org.xnio.conduits.StreamSinkConduit wrap(io.undertow.util.ConduitFactory,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler$JvmRouteWrapper:org.xnio.conduits.StreamSinkConduit wrap(io.undertow.util.ConduitFactory,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler$1:org.xnio.conduits.StreamSinkConduit wrap(io.undertow.util.ConduitFactory,io.undertow.server.HttpServerExchange)",
            "io.undertow.security.impl.SingleSignOnAuthenticationMechanism$ResponseListener:org.xnio.conduits.StreamSinkConduit wrap(io.undertow.util.ConduitFactory,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.protocol.http.HttpTransferEncoding:void setupRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpReadListener:void handleEventWithNoRunningRequest(org.xnio.conduits.ConduitStreamSourceChannel)"
        ]
    },
    "io.undertow.server.protocol.http.HttpTransferEncoding:boolean handleRequestEncoding(io.undertow.server.HttpServerExchange,java.lang.String,java.lang.String,io.undertow.server.protocol.http.HttpServerConnection,io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:void setupRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.protocol.http.HttpServerConnection:io.undertow.server.HttpServerExchange sendOutOfBandResponse(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpContinue:io.undertow.server.protocol.http.HttpContinue$ContinueResponseSender createResponseSender(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpContinue:void sendContinueResponseBlocking(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener:org.xnio.conduits.StreamSourceConduit createSourceConduit(org.xnio.conduits.StreamSourceConduit,io.undertow.server.protocol.ajp.AjpServerResponseConduit,io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener$3:void handleEvent(io.undertow.server.protocol.ajp.AjpServerRequestConduit)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpReadListener$3:void handleEvent(org.xnio.conduits.Conduit)"
        ]
    },
    "io.undertow.server.protocol.http.HttpTransferEncoding$2:void handleEvent(io.undertow.conduits.ChunkedStreamSourceConduit)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpTransferEncoding$2:void handleEvent(org.xnio.conduits.Conduit)"
        ]
    },
    "io.undertow.server.protocol.http.HttpTransferEncoding$1:void handleEvent(io.undertow.conduits.FixedLengthStreamSourceConduit)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpTransferEncoding$1:void handleEvent(org.xnio.conduits.Conduit)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener$1:void handleEvent(io.undertow.server.protocol.ajp.AjpServerResponseConduit)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpReadListener$1:void handleEvent(org.xnio.conduits.Conduit)"
        ]
    },
    "io.undertow.server.protocol.http.HttpTransferEncoding$3:void handleEvent(org.xnio.conduits.StreamSinkConduit)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpTransferEncoding$3:void handleEvent(org.xnio.conduits.Conduit)"
        ]
    },
    "io.undertow.server.protocol.http.ServerFixedLengthStreamSinkConduit:void channelFinished()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.cache.ResponseCache$DereferenceCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()",
            "io.undertow.io.BlockingSenderImpl:void invokeOnComplete(io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ResponseCallback:void failed(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.security.impl.FormAuthenticationMechanism$1:boolean handleDefaultResponse(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange endExchange()"
        ]
    },
    "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void handleEvent(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.http.HttpContinue:void rejectExchange(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCache$DereferenceCallback:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void invokeOnException(io.undertow.io.IoCallback,java.io.IOException)",
            "io.undertow.io.BlockingSenderImpl:void performTransfer(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer[],io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$IoExceptionHandler:void handleException(java.nio.channels.Channel,java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.RequestLimit$2:void run()",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.HttpServerExchange$1:void run()",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void run()",
            "io.undertow.server.protocol.http.HttpReadListener:void handleEventWithNoRunningRequest(org.xnio.conduits.ConduitStreamSourceChannel)"
        ]
    },
    "io.undertow.server.handlers.resource.DirectoryUtils:boolean sendRequestedBlobs(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.resource.ResourceHandler:void serveResource(io.undertow.server.HttpServerExchange,boolean)"
        ]
    },
    "io.undertow.server.handlers.RedirectHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "io.undertow.io.DefaultIoCallback$1:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnException(io.undertow.io.IoCallback,java.io.IOException)"
        ]
    },
    "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.AbstractServerConnection$CloseSetter:void handleEvent(org.xnio.StreamConnection)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.AbstractServerConnection$CloseSetter:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.handlers.resource.ResourceHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ProxyClientHandler:void failed(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.resource.ResourceHandler:void serveResource(io.undertow.server.HttpServerExchange,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.resource.ResourceHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.io.DefaultIoCallback:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void invokeOnException(io.undertow.io.IoCallback,java.io.IOException)",
            "io.undertow.io.BlockingSenderImpl:void performTransfer(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.resource.ResourceHandler$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.io.DefaultIoCallback$1:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl$2:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void invokeOnComplete(io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1:void failed(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.HttpContinueAcceptingHandler$1:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.protocol.http.HttpContinue$3:void handleException(java.nio.channels.Channel,java.io.IOException)"
        ]
    },
    "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.cache.ResponseCache:boolean tryServeResponse(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCache:boolean tryServeResponse()"
        ]
    },
    "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:void endExchange()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.security.impl.FormAuthenticationMechanism:io.undertow.security.api.AuthenticationMechanism$AuthenticationMechanismOutcome runFormAuth(io.undertow.server.HttpServerExchange,io.undertow.security.api.SecurityContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.security.impl.FormAuthenticationMechanism:io.undertow.security.api.AuthenticationMechanism$AuthenticationMechanismOutcome authenticate(io.undertow.server.HttpServerExchange,io.undertow.security.api.SecurityContext)"
        ]
    },
    "io.undertow.server.HttpServerExchange$2:void handleEvent(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$2:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.HttpServerExchange$3:void handleException(java.nio.channels.Channel,java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:void awaitReadable()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:long read(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:long transferTo(long,long,java.nio.channels.FileChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void access$100(io.undertow.io.AsyncSenderImpl)",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl$TransferTask:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void transferFrom(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "io.undertow.io.DefaultIoCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()",
            "io.undertow.io.BlockingSenderImpl:void invokeOnComplete(io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void close(io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.cache.ResponseCachingSender:void close()"
        ]
    },
    "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.protocol.http.HttpContinue:void sendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1$1:void handleContinue(io.undertow.client.ClientExchange)"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer)",
            "io.undertow.server.handlers.resource.DirectoryUtils:boolean sendRequestedBlobs(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:org.xnio.IoFuture sendData(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.io.UndertowOutputStream:void updateWritten(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.io.UndertowOutputStream:void transferFrom(java.nio.channels.FileChannel)",
            "io.undertow.io.UndertowOutputStream:void write(java.nio.ByteBuffer[])",
            "io.undertow.io.UndertowOutputStream:void write(byte[],int,int)"
        ]
    },
    "io.undertow.io.BlockingSenderImpl:void close(io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.io.DefaultIoCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)"
        ]
    },
    "io.undertow.server.protocol.http.HttpContinue:void sendContinueResponseBlocking(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.io.BlockingSenderImpl:void performTransfer(java.nio.channels.FileChannel,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void transferFrom(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void invokeOnComplete(io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.io.UndertowOutputStream:void write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer[],io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer[])"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void send(java.lang.String,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void send(java.lang.String,java.nio.charset.Charset)",
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.resource.CachedResource:void serve(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.resource.ResourceHandler$1:void run()"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.io.UndertowOutputStream:void write(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.websockets.spi.BlockingWebSocketHttpServerExchange:org.xnio.IoFuture sendData(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.io.UndertowOutputStream:void write(byte[])": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.encoding.AllowedContentEncodings:org.xnio.conduits.StreamSinkConduit wrap(io.undertow.util.ConduitFactory,io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.encoding.AllowedContentEncodings:org.xnio.conduits.Conduit wrap(io.undertow.util.ConduitFactory,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.JvmRouteHandler$JvmRouteWrapper:org.xnio.conduits.StreamSinkConduit wrap(io.undertow.util.ConduitFactory,io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.JvmRouteHandler$JvmRouteWrapper:org.xnio.conduits.Conduit wrap(io.undertow.util.ConduitFactory,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.cache.CacheHandler$1:org.xnio.conduits.StreamSinkConduit wrap(io.undertow.util.ConduitFactory,io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.cache.CacheHandler$1:org.xnio.conduits.Conduit wrap(io.undertow.util.ConduitFactory,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.security.impl.SingleSignOnAuthenticationMechanism$ResponseListener:org.xnio.conduits.StreamSinkConduit wrap(io.undertow.util.ConduitFactory,io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.security.impl.SingleSignOnAuthenticationMechanism$ResponseListener:org.xnio.conduits.Conduit wrap(io.undertow.util.ConduitFactory,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.protocol.http.HttpReadListener:void handleEventWithNoRunningRequest(org.xnio.conduits.ConduitStreamSourceChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpReadListener:void handleEvent(org.xnio.conduits.ConduitStreamSourceChannel)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpOpenListener:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleCPing()",
            "io.undertow.server.protocol.ajp.AjpReadListener$2:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener$3:void handleEvent(org.xnio.conduits.Conduit)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int doRead(java.nio.ByteBuffer,long)"
        ]
    },
    "io.undertow.server.protocol.http.HttpTransferEncoding$2:void handleEvent(org.xnio.conduits.Conduit)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.conduits.ChunkedStreamSourceConduit:void updateRemainingAllowed(int)",
            "io.undertow.conduits.ChunkReader:long readChunk(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.server.protocol.http.HttpTransferEncoding$1:void handleEvent(org.xnio.conduits.Conduit)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void invokeFinishListener()",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void checkMaxSize(long)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener$1:void handleEvent(org.xnio.conduits.Conduit)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void finished()"
        ]
    },
    "io.undertow.server.protocol.http.HttpTransferEncoding$3:void handleEvent(org.xnio.conduits.Conduit)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.conduits.FinishableStreamSinkConduit:void truncateWrites()",
            "io.undertow.conduits.ChunkedStreamSinkConduit:void invokeFinishListener()",
            "io.undertow.conduits.PreChunkedStreamSinkConduit:void invokeFinishListener()",
            "io.undertow.conduits.HeadStreamSinkConduit:void exitFlush(int,boolean)",
            "io.undertow.conduits.FinishableStreamSinkConduit:boolean flush()"
        ]
    },
    "io.undertow.io.BlockingSenderImpl:void invokeOnComplete(io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void transferFrom(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.io.AsyncSenderImpl:void invokeOnException(io.undertow.io.IoCallback,java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void access$300(io.undertow.io.AsyncSenderImpl,io.undertow.io.IoCallback,java.io.IOException)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()",
            "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.RequestLimit$2:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.HttpServerExchange$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "io.undertow.server.AbstractServerConnection$CloseSetter:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String)"
        ]
    },
    "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void invokeOnException(io.undertow.io.IoCallback,java.io.IOException)",
            "io.undertow.io.BlockingSenderImpl:void performTransfer(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer[],io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,java.nio.charset.Charset)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl$2:void handleEvent(org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl$2:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.http.HttpContinue$3:void handleException(java.nio.channels.Channel,java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.cache.ResponseCache:boolean tryServeResponse()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.security.impl.FormAuthenticationMechanism:io.undertow.security.api.AuthenticationMechanism$AuthenticationMechanismOutcome authenticate(io.undertow.server.HttpServerExchange,io.undertow.security.api.SecurityContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.HttpServerExchange$2:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.io.AsyncSenderImpl:void access$100(io.undertow.io.AsyncSenderImpl)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl$TransferTask:boolean run(boolean)",
            "io.undertow.io.AsyncSenderImpl$1:void handleEvent(org.xnio.channels.StreamSinkChannel)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void transferFrom(java.nio.channels.FileChannel,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void transferFrom(java.nio.channels.FileChannel,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()",
            "io.undertow.io.BlockingSenderImpl:void invokeOnComplete(io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCachingSender:void close(io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.cache.ResponseCachingSender:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,java.lang.Runnable)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyClientHandler:void completed(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyConnection)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.lang.Runnable)",
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,io.undertow.server.HttpHandler)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1$1:void handleContinue(io.undertow.client.ClientExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.io.BlockingSenderImpl:void transferFrom(java.nio.channels.FileChannel,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void transferFrom(java.nio.channels.FileChannel,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.io.BlockingSenderImpl:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void send(java.nio.ByteBuffer[])",
            "io.undertow.server.handlers.cache.ResponseCache:boolean tryServeResponse(boolean)",
            "io.undertow.server.handlers.resource.CachedResource:void serve(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void invokeOnComplete(io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.io.AsyncSenderImpl:void send(java.lang.String,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void send(java.lang.String)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void send(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String,java.nio.charset.Charset)"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.websockets.spi.BlockingWebSocketHttpServerExchange:org.xnio.IoFuture sendData(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.encoding.AllowedContentEncodings:org.xnio.conduits.Conduit wrap(io.undertow.util.ConduitFactory,io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$WrapperStreamSinkConduitFactory:org.xnio.conduits.StreamSinkConduit create()"
        ]
    },
    "io.undertow.server.JvmRouteHandler$JvmRouteWrapper:org.xnio.conduits.Conduit wrap(io.undertow.util.ConduitFactory,io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$WrapperStreamSinkConduitFactory:org.xnio.conduits.StreamSinkConduit create()"
        ]
    },
    "io.undertow.server.handlers.cache.CacheHandler$1:org.xnio.conduits.Conduit wrap(io.undertow.util.ConduitFactory,io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$WrapperStreamSinkConduitFactory:org.xnio.conduits.StreamSinkConduit create()"
        ]
    },
    "io.undertow.security.impl.SingleSignOnAuthenticationMechanism$ResponseListener:org.xnio.conduits.Conduit wrap(io.undertow.util.ConduitFactory,io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$WrapperStreamSinkConduitFactory:org.xnio.conduits.StreamSinkConduit create()"
        ]
    },
    "io.undertow.server.protocol.http.HttpReadListener:void handleEvent(org.xnio.conduits.ConduitStreamSourceChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpReadListener:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.server.protocol.http.HttpReadListener:void run()",
            "io.undertow.server.protocol.http.HttpOpenListener:void handleEvent(org.xnio.StreamConnection)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpOpenListener:void handleEvent(org.xnio.StreamConnection)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpOpenListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener:void handleCPing()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener$2:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpReadListener$2:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int doRead(java.nio.ByteBuffer,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int read(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.conduits.ChunkedStreamSourceConduit:void updateRemainingAllowed(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.conduits.ChunkedStreamSourceConduit:int read(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.conduits.ChunkReader:long readChunk(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.conduits.ChunkedStreamSourceConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.PreChunkedStreamSinkConduit:int doWrite(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:void invokeFinishListener()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void exitRead(long)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,long,java.nio.channels.FileChannel)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void exitShutdownReads(long)"
        ]
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:void checkMaxSize(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,long,java.nio.channels.FileChannel)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void finished()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.conduits.AbstractFramedStreamSinkConduit:boolean flush()"
        ]
    },
    "io.undertow.conduits.FinishableStreamSinkConduit:void truncateWrites()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.conduits.ChunkedStreamSinkConduit:void invokeFinishListener()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.conduits.ChunkedStreamSinkConduit:boolean flush()"
        ]
    },
    "io.undertow.conduits.PreChunkedStreamSinkConduit:void invokeFinishListener()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.conduits.PreChunkedStreamSinkConduit:boolean flush()"
        ]
    },
    "io.undertow.conduits.HeadStreamSinkConduit:void exitFlush(int,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.conduits.HeadStreamSinkConduit:boolean flush()"
        ]
    },
    "io.undertow.conduits.FinishableStreamSinkConduit:boolean flush()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.io.BlockingSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void send(java.nio.ByteBuffer)",
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:org.xnio.IoFuture sendData(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void access$300(io.undertow.io.AsyncSenderImpl,io.undertow.io.IoCallback,java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl$TransferTask:boolean run(boolean)",
            "io.undertow.io.AsyncSenderImpl$3:void handleException(org.xnio.channels.StreamSinkChannel,java.io.IOException)",
            "io.undertow.io.AsyncSenderImpl$1:void handleEvent(org.xnio.channels.StreamSinkChannel)"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.io.BlockingSenderImpl:void send(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler$1:boolean handleDefaultResponse(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String,java.nio.charset.Charset)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl$2:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.io.AsyncSenderImpl$1:void handleEvent(org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl$1:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCachingSender:void transferFrom(java.nio.channels.FileChannel,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ProxyClientHandler:void completed(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyConnection)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyClientHandler:void completed(io.undertow.server.HttpServerExchange,java.lang.Object)"
        ]
    },
    "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.RequestLimit:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.server.HttpHandler)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.lang.Runnable)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void transferFrom(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl$TransferTask:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.handlers.resource.FileResource:void serve(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.resource.FileResource$1ServerTask:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void serveFile(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler:void serveResource(io.undertow.server.HttpServerExchange,boolean)",
            "io.undertow.server.handlers.resource.URLResource:void serve(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)"
        ]
    },
    "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(java.util.concurrent.Executor,io.undertow.server.HttpHandler)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(io.undertow.server.HttpHandler)"
        ]
    },
    "io.undertow.io.BlockingSenderImpl:void send(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer[])"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void send(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler$1:boolean handleDefaultResponse(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.protocol.http.HttpReadListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.protocol.http.HttpReadListener:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "io.undertow.server.protocol.http.HttpOpenListener:void handleEvent(org.xnio.StreamConnection)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpOpenListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpOpenListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.protocol.ajp.AjpReadListener$2:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:long read(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.conduits.ChunkedStreamSourceConduit:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.conduits.ChunkedStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.conduits.PreChunkedStreamSinkConduit:int doWrite(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.conduits.PreChunkedStreamSinkConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.conduits.PreChunkedStreamSinkConduit:int writeFinal(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long read(java.nio.ByteBuffer[])"
        ]
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:void exitRead(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,long,java.nio.channels.FileChannel)"
        ]
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,long,java.nio.channels.FileChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:void exitShutdownReads(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void terminateReads()"
        ]
    },
    "io.undertow.conduits.AbstractFramedStreamSinkConduit:boolean flush()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit$AjpServerWriteReadyHandler:void writeReady()",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:int write(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.conduits.ChunkedStreamSinkConduit:boolean flush()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.conduits.PreChunkedStreamSinkConduit:boolean flush()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.conduits.HeadStreamSinkConduit:boolean flush()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.io.BlockingSenderImpl:void send(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer)",
            "io.undertow.server.handlers.resource.DirectoryUtils:boolean sendRequestedBlobs(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl$3:void handleException(org.xnio.channels.StreamSinkChannel,java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl$3:void handleException(java.nio.channels.Channel,java.io.IOException)"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.error.SimpleErrorPageHandler$1:boolean handleDefaultResponse(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange endExchange()"
        ]
    },
    "io.undertow.io.AsyncSenderImpl$1:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ProxyClientHandler:void completed(io.undertow.server.HttpServerExchange,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.io.AsyncSenderImpl$TransferTask:void handleEvent(org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl$TransferTask:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.handlers.resource.FileResource:void serve(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.resource.FileResource$1ServerTask:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.error.FileErrorPageHandler:void serveFile(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.error.FileErrorPageHandler:void access$100(io.undertow.server.handlers.error.FileErrorPageHandler,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.resource.URLResource:void serve(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.resource.URLResource$1ServerTask:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange dispatch(io.undertow.server.HttpHandler)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler$1:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)"
        ]
    },
    "io.undertow.server.protocol.http.HttpOpenListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.protocol.ajp.AjpServerRequestConduit:long read(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.conduits.ChunkedStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.conduits.PreChunkedStreamSinkConduit:int write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.conduits.PreChunkedStreamSinkConduit:long write(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.conduits.PreChunkedStreamSinkConduit:int writeFinal(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:long read(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:void terminateReads()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.protocol.ajp.AjpServerResponseConduit$AjpServerWriteReadyHandler:void writeReady()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.protocol.ajp.AjpServerResponseConduit:int write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:long write(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl$3:void handleException(java.nio.channels.Channel,java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.io.AsyncSenderImpl$TransferTask:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.error.FileErrorPageHandler:void access$100(io.undertow.server.handlers.error.FileErrorPageHandler,io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.handlers.error.FileErrorPageHandler$1:boolean handleDefaultResponse(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.handlers.HttpContinueAcceptingHandler$1:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.protocol.http.HttpContinue$2:void handleEvent(org.xnio.channels.StreamSinkChannel)"
        ]
    },
    "io.undertow.conduits.PreChunkedStreamSinkConduit:long write(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.protocol.ajp.AjpServerResponseConduit:long write(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:long write(java.nio.ByteBuffer[])"
        ]
    },
    "io.undertow.server.handlers.error.FileErrorPageHandler$1:boolean handleDefaultResponse(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:io.undertow.server.HttpServerExchange endExchange()"
        ]
    },
    "io.undertow.server.protocol.http.HttpContinue$2:void handleEvent(org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpContinue$2:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpServerResponseConduit:long write(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()",
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.protocol.http.HttpContinue$2:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:org.xnio.conduits.StreamSinkConduit createSinkConduit(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ],
        "vulCaller": []
    }
}