{
    "io.undertow.protocols.http2.Http2Channel:void lastDataRead()": {
        "isVulRoot": true,
        "srcRoot": [
            "io.undertow.protocols.http2.Http2Channel:void lastDataRead()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel receive()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel receive()"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel receive()": {
        "isVulRoot": true,
        "srcRoot": [
            "io.undertow.protocols.http2.Http2Channel:void lastDataRead()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel receive()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel$2:void handleEvent(io.undertow.server.protocol.framed.AbstractFramedChannel)",
            "io.undertow.websockets.core.AbstractReceiveListener:void handleEvent(io.undertow.websockets.core.WebSocketChannel)",
            "io.undertow.server.protocol.spdy.SpdyReceiveListener:void handleEvent(io.undertow.protocols.spdy.SpdyChannel)",
            "io.undertow.client.spdy.SpdyClientConnection$SpdyReceiveListener:void handleEvent(io.undertow.protocols.spdy.SpdyChannel)",
            "io.undertow.client.ajp.AjpClientConnection$ClientReceiveListener:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)",
            "io.undertow.server.protocol.http2.Http2ReceiveListener:void handleEvent(io.undertow.protocols.http2.Http2Channel)",
            "io.undertow.client.http2.Http2ClientConnection$Http2ReceiveListener:void handleEvent(io.undertow.protocols.http2.Http2Channel)"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedChannel$2:void handleEvent(io.undertow.server.protocol.framed.AbstractFramedChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.protocols.http2.Http2Channel:void lastDataRead()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel receive()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel$2:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.websockets.core.AbstractReceiveListener:void handleEvent(io.undertow.websockets.core.WebSocketChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.protocols.http2.Http2Channel:void lastDataRead()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel receive()"
        ],
        "vulCaller": [
            "io.undertow.websockets.core.AbstractReceiveListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.spdy.SpdyReceiveListener:void handleEvent(io.undertow.protocols.spdy.SpdyChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.protocols.http2.Http2Channel:void lastDataRead()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel receive()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.spdy.SpdyReceiveListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.client.spdy.SpdyClientConnection$SpdyReceiveListener:void handleEvent(io.undertow.protocols.spdy.SpdyChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.protocols.http2.Http2Channel:void lastDataRead()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel receive()"
        ],
        "vulCaller": [
            "io.undertow.client.spdy.SpdyClientConnection$SpdyReceiveListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.client.ajp.AjpClientConnection$ClientReceiveListener:void handleEvent(io.undertow.protocols.ajp.AjpClientChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.protocols.http2.Http2Channel:void lastDataRead()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel receive()"
        ],
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$ClientReceiveListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.http2.Http2ReceiveListener:void handleEvent(io.undertow.protocols.http2.Http2Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.protocols.http2.Http2Channel:void lastDataRead()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel receive()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.http2.Http2ReceiveListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.client.http2.Http2ClientConnection$Http2ReceiveListener:void handleEvent(io.undertow.protocols.http2.Http2Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.protocols.http2.Http2Channel:void lastDataRead()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel receive()"
        ],
        "vulCaller": [
            "io.undertow.client.http2.Http2ClientConnection$Http2ReceiveListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedChannel:void close()": {
        "isVulRoot": true,
        "srcRoot": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void close()"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.spdy.SpdyServerConnection:void close()",
            "io.undertow.client.ajp.AjpClientConnection:void close()",
            "io.undertow.server.protocol.http2.Http2ServerConnection:void close()"
        ]
    },
    "io.undertow.server.protocol.spdy.SpdyServerConnection:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void close()"
        ],
        "vulCaller": []
    },
    "io.undertow.client.ajp.AjpClientConnection:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void close()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.protocol.http2.Http2ServerConnection:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel:void close()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.protocol.framed.AbstractFramedChannel$2:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.protocols.http2.Http2Channel:void lastDataRead()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel receive()"
        ],
        "vulCaller": []
    },
    "io.undertow.websockets.core.AbstractReceiveListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.protocols.http2.Http2Channel:void lastDataRead()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel receive()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.protocol.spdy.SpdyReceiveListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.protocols.http2.Http2Channel:void lastDataRead()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel receive()"
        ],
        "vulCaller": []
    },
    "io.undertow.client.spdy.SpdyClientConnection$SpdyReceiveListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.protocols.http2.Http2Channel:void lastDataRead()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel receive()"
        ],
        "vulCaller": []
    },
    "io.undertow.client.ajp.AjpClientConnection$ClientReceiveListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.protocols.http2.Http2Channel:void lastDataRead()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel receive()"
        ],
        "vulCaller": []
    },
    "io.undertow.server.protocol.http2.Http2ReceiveListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.protocols.http2.Http2Channel:void lastDataRead()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel receive()"
        ],
        "vulCaller": []
    },
    "io.undertow.client.http2.Http2ClientConnection$Http2ReceiveListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.protocols.http2.Http2Channel:void lastDataRead()",
            "io.undertow.server.protocol.framed.AbstractFramedChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel receive()"
        ],
        "vulCaller": []
    }
}