{
    "com.opensymphony.xwork2.config.providers.XWorkConfigurationProvider:void register(com.opensymphony.xwork2.inject.ContainerBuilder,com.opensymphony.xwork2.util.location.LocatableProperties)": {
        "isVulRoot": true,
        "srcRoot": [
            "com.opensymphony.xwork2.config.providers.XWorkConfigurationProvider:void register(com.opensymphony.xwork2.inject.ContainerBuilder,com.opensymphony.xwork2.util.location.LocatableProperties)",
            "com.opensymphony.xwork2.config.impl.DefaultConfiguration:com.opensymphony.xwork2.inject.Container createBootstrapContainer(java.util.List)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.config.impl.MockConfiguration:void selfRegister()"
        ]
    },
    "com.opensymphony.xwork2.config.impl.MockConfiguration:void selfRegister()": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.config.providers.XWorkConfigurationProvider:void register(com.opensymphony.xwork2.inject.ContainerBuilder,com.opensymphony.xwork2.util.location.LocatableProperties)",
            "com.opensymphony.xwork2.config.impl.DefaultConfiguration:com.opensymphony.xwork2.inject.Container createBootstrapContainer(java.util.List)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.TestNGXWorkTestCase:void setUp()"
        ]
    },
    "com.opensymphony.xwork2.config.impl.DefaultConfiguration:com.opensymphony.xwork2.inject.Container createBootstrapContainer(java.util.List)": {
        "isVulRoot": true,
        "srcRoot": [
            "com.opensymphony.xwork2.config.impl.DefaultConfiguration:com.opensymphony.xwork2.inject.Container createBootstrapContainer(java.util.List)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.config.impl.DefaultConfiguration:java.util.List reloadContainer(java.util.List)"
        ]
    },
    "com.opensymphony.xwork2.config.impl.DefaultConfiguration:java.util.List reloadContainer(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.config.impl.DefaultConfiguration:com.opensymphony.xwork2.inject.Container createBootstrapContainer(java.util.List)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.config.impl.DefaultConfiguration:void reload(java.util.List)",
            "com.opensymphony.xwork2.config.ConfigurationManager:void reloadProviders(java.util.List)",
            "com.opensymphony.xwork2.config.ConfigurationManager:void reload()",
            "com.opensymphony.xwork2.config.ConfigurationManager:com.opensymphony.xwork2.config.Configuration getConfiguration()"
        ]
    },
    "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)": {
        "isVulRoot": true,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.util.Map getBeanMap(java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)"
        ]
    },
    "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)": {
        "isVulRoot": true,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.ognl.OgnlValueStack:java.lang.Object getValueUsingOgnl(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlReflectionProvider:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)"
        ]
    },
    "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)": {
        "isVulRoot": true,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.ognl.OgnlReflectionProvider:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map)"
        ]
    },
    "com.opensymphony.xwork2.ognl.OgnlUtil:java.util.Map getBeanMap(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.ognl.OgnlReflectionProvider:java.util.Map getBeanMap(java.lang.Object)"
        ]
    },
    "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)": {
        "isVulRoot": true,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlValueStack:void trySetValue(java.lang.String,java.lang.Object,boolean,java.util.Map,boolean)"
        ]
    },
    "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)": {
        "isVulRoot": true,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.ognl.OgnlValueStack:java.lang.Object getValue(java.lang.String,java.lang.Class)"
        ]
    },
    "com.opensymphony.xwork2.ognl.OgnlValueStack:java.lang.Object getValue(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.ognl.OgnlValueStack:java.lang.Object tryFindValue(java.lang.String,java.lang.Class)"
        ]
    },
    "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.ognl.accessor.XWorkListPropertyAccessor:void setProperty(java.util.Map,java.lang.Object,java.lang.Object,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void internalSetProperty(java.lang.String,java.lang.Object,java.lang.Object,java.util.Map,boolean)"
        ]
    },
    "com.opensymphony.xwork2.ognl.OgnlValueStack:void trySetValue(java.lang.String,java.lang.Object,boolean,java.util.Map,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.ognl.OgnlValueStack:void setValue(java.lang.String,java.lang.Object,boolean,boolean)"
        ]
    },
    "com.opensymphony.xwork2.ognl.OgnlReflectionProvider:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": []
    },
    "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": []
    },
    "com.opensymphony.xwork2.ognl.OgnlValueStack:java.lang.Object getValueUsingOgnl(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.ognl.OgnlValueStack:java.lang.Object tryFindValue(java.lang.String)"
        ]
    },
    "com.opensymphony.xwork2.ognl.OgnlReflectionProvider:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": []
    },
    "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)": {
        "isVulRoot": true,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)"
        ]
    },
    "com.opensymphony.xwork2.TestNGXWorkTestCase:void setUp()": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.config.providers.XWorkConfigurationProvider:void register(com.opensymphony.xwork2.inject.ContainerBuilder,com.opensymphony.xwork2.util.location.LocatableProperties)",
            "com.opensymphony.xwork2.config.impl.DefaultConfiguration:com.opensymphony.xwork2.inject.Container createBootstrapContainer(java.util.List)"
        ],
        "vulCaller": []
    },
    "com.opensymphony.xwork2.config.impl.DefaultConfiguration:void reload(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.config.impl.DefaultConfiguration:com.opensymphony.xwork2.inject.Container createBootstrapContainer(java.util.List)"
        ],
        "vulCaller": []
    },
    "com.opensymphony.xwork2.config.ConfigurationManager:void reloadProviders(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.config.impl.DefaultConfiguration:com.opensymphony.xwork2.inject.Container createBootstrapContainer(java.util.List)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.config.ConfigurationManager:void conditionalReload(com.opensymphony.xwork2.inject.Container)"
        ]
    },
    "com.opensymphony.xwork2.config.ConfigurationManager:void reload()": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.config.impl.DefaultConfiguration:com.opensymphony.xwork2.inject.Container createBootstrapContainer(java.util.List)"
        ],
        "vulCaller": []
    },
    "com.opensymphony.xwork2.config.ConfigurationManager:com.opensymphony.xwork2.config.Configuration getConfiguration()": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.config.impl.DefaultConfiguration:com.opensymphony.xwork2.inject.Container createBootstrapContainer(java.util.List)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.XWorkJUnit4TestCase:void setUp()",
            "com.opensymphony.xwork2.TestNGXWorkTestCase:void loadConfigurationProviders(com.opensymphony.xwork2.config.ConfigurationProvider[])",
            "com.opensymphony.xwork2.XWorkTestCase:void loadConfigurationProviders(com.opensymphony.xwork2.config.ConfigurationProvider[])",
            "com.opensymphony.xwork2.XWorkTestCase:void setUp()",
            "com.opensymphony.xwork2.util.XWorkTestCaseHelper:com.opensymphony.xwork2.config.ConfigurationManager loadConfigurationProviders(com.opensymphony.xwork2.config.ConfigurationManager,com.opensymphony.xwork2.config.ConfigurationProvider[])",
            "com.opensymphony.xwork2.XWorkJUnit4TestCase:void loadConfigurationProviders(com.opensymphony.xwork2.config.ConfigurationProvider[])",
            "com.opensymphony.xwork2.config.ConfigurationManager:void reload()",
            "com.opensymphony.xwork2.util.XWorkTestCaseHelper:com.opensymphony.xwork2.config.ConfigurationManager setUp()",
            "com.opensymphony.xwork2.XWork:void executeAction(java.lang.String,java.lang.String,java.lang.String,java.util.Map)"
        ]
    },
    "com.opensymphony.xwork2.ognl.OgnlReflectionProvider:java.util.Map getBeanMap(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": []
    },
    "com.opensymphony.xwork2.ognl.OgnlValueStack:java.lang.Object tryFindValue(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.ognl.OgnlValueStack:java.lang.Object tryFindValueWhenExpressionIsNotNull(java.lang.String,java.lang.Class)"
        ]
    },
    "com.opensymphony.xwork2.ognl.accessor.XWorkListPropertyAccessor:void setProperty(java.util.Map,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": []
    },
    "com.opensymphony.xwork2.ognl.OgnlUtil:void internalSetProperty(java.lang.String,java.lang.Object,java.lang.Object,java.util.Map,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setProperty(java.lang.String,java.lang.Object,java.lang.Object,java.util.Map,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setProperties(java.util.Map,java.lang.Object,java.util.Map,boolean)"
        ]
    },
    "com.opensymphony.xwork2.ognl.OgnlValueStack:void setValue(java.lang.String,java.lang.Object,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.ognl.OgnlValueStack:void setParameter(java.lang.String,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlValueStack:void setValue(java.lang.String,java.lang.Object,boolean)"
        ]
    },
    "com.opensymphony.xwork2.ognl.OgnlValueStack:java.lang.Object tryFindValue(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.ognl.OgnlValueStack:java.lang.Object tryFindValueWhenExpressionIsNotNull(java.lang.String)"
        ]
    },
    "com.opensymphony.xwork2.config.ConfigurationManager:void conditionalReload(com.opensymphony.xwork2.inject.Container)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.config.impl.DefaultConfiguration:com.opensymphony.xwork2.inject.Container createBootstrapContainer(java.util.List)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.config.ConfigurationManager:com.opensymphony.xwork2.config.Configuration getConfiguration()"
        ]
    },
    "com.opensymphony.xwork2.XWorkJUnit4TestCase:void setUp()": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.config.impl.DefaultConfiguration:com.opensymphony.xwork2.inject.Container createBootstrapContainer(java.util.List)"
        ],
        "vulCaller": []
    },
    "com.opensymphony.xwork2.TestNGXWorkTestCase:void loadConfigurationProviders(com.opensymphony.xwork2.config.ConfigurationProvider[])": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.config.impl.DefaultConfiguration:com.opensymphony.xwork2.inject.Container createBootstrapContainer(java.util.List)"
        ],
        "vulCaller": []
    },
    "com.opensymphony.xwork2.XWorkTestCase:void loadConfigurationProviders(com.opensymphony.xwork2.config.ConfigurationProvider[])": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.config.impl.DefaultConfiguration:com.opensymphony.xwork2.inject.Container createBootstrapContainer(java.util.List)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.XWorkTestCase:void loadButAdd(java.lang.Class,java.lang.String,java.lang.Object)"
        ]
    },
    "com.opensymphony.xwork2.XWorkTestCase:void setUp()": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.config.impl.DefaultConfiguration:com.opensymphony.xwork2.inject.Container createBootstrapContainer(java.util.List)"
        ],
        "vulCaller": []
    },
    "com.opensymphony.xwork2.util.XWorkTestCaseHelper:com.opensymphony.xwork2.config.ConfigurationManager loadConfigurationProviders(com.opensymphony.xwork2.config.ConfigurationManager,com.opensymphony.xwork2.config.ConfigurationProvider[])": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.config.impl.DefaultConfiguration:com.opensymphony.xwork2.inject.Container createBootstrapContainer(java.util.List)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.TestNGXWorkTestCase:void loadConfigurationProviders(com.opensymphony.xwork2.config.ConfigurationProvider[])",
            "com.opensymphony.xwork2.XWorkTestCase:void loadConfigurationProviders(com.opensymphony.xwork2.config.ConfigurationProvider[])",
            "com.opensymphony.xwork2.XWorkJUnit4TestCase:void loadConfigurationProviders(com.opensymphony.xwork2.config.ConfigurationProvider[])"
        ]
    },
    "com.opensymphony.xwork2.XWorkJUnit4TestCase:void loadConfigurationProviders(com.opensymphony.xwork2.config.ConfigurationProvider[])": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.config.impl.DefaultConfiguration:com.opensymphony.xwork2.inject.Container createBootstrapContainer(java.util.List)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.XWorkJUnit4TestCase:void loadButAdd(java.lang.Class,java.lang.String,java.lang.Object)"
        ]
    },
    "com.opensymphony.xwork2.util.XWorkTestCaseHelper:com.opensymphony.xwork2.config.ConfigurationManager setUp()": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.config.impl.DefaultConfiguration:com.opensymphony.xwork2.inject.Container createBootstrapContainer(java.util.List)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.XWorkJUnit4TestCase:void setUp()",
            "com.opensymphony.xwork2.TestNGXWorkTestCase:void setUp()",
            "com.opensymphony.xwork2.XWorkTestCase:void setUp()"
        ]
    },
    "com.opensymphony.xwork2.XWork:void executeAction(java.lang.String,java.lang.String,java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.config.impl.DefaultConfiguration:com.opensymphony.xwork2.inject.Container createBootstrapContainer(java.util.List)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.XWork:void executeAction(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "com.opensymphony.xwork2.ognl.OgnlValueStack:java.lang.Object tryFindValueWhenExpressionIsNotNull(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.ognl.OgnlValueStack:java.lang.Object findValue(java.lang.String,java.lang.Class,boolean)"
        ]
    },
    "com.opensymphony.xwork2.ognl.OgnlUtil:void setProperty(java.lang.String,java.lang.Object,java.lang.Object,java.util.Map,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setProperty(java.lang.String,java.lang.Object,java.lang.Object,java.util.Map)",
            "com.opensymphony.xwork2.ognl.OgnlReflectionProvider:void setProperty(java.lang.String,java.lang.Object,java.lang.Object,java.util.Map,boolean)"
        ]
    },
    "com.opensymphony.xwork2.ognl.OgnlUtil:void setProperties(java.util.Map,java.lang.Object,java.util.Map,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setProperties(java.util.Map,java.lang.Object,java.util.Map)",
            "com.opensymphony.xwork2.ognl.OgnlReflectionProvider:void setProperties(java.util.Map,java.lang.Object,java.util.Map,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setProperties(java.util.Map,java.lang.Object,boolean)"
        ]
    },
    "com.opensymphony.xwork2.ognl.OgnlValueStack:void setParameter(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": []
    },
    "com.opensymphony.xwork2.ognl.OgnlValueStack:void setValue(java.lang.String,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.ognl.OgnlValueStack:void setValue(java.lang.String,java.lang.Object)"
        ]
    },
    "com.opensymphony.xwork2.ognl.OgnlValueStack:java.lang.Object tryFindValueWhenExpressionIsNotNull(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.ognl.OgnlValueStack:java.lang.Object findValue(java.lang.String,boolean)"
        ]
    },
    "com.opensymphony.xwork2.XWorkTestCase:void loadButAdd(java.lang.Class,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.config.impl.DefaultConfiguration:com.opensymphony.xwork2.inject.Container createBootstrapContainer(java.util.List)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.XWorkTestCase:void loadButAdd(java.lang.Class,java.lang.Object)"
        ]
    },
    "com.opensymphony.xwork2.XWorkJUnit4TestCase:void loadButAdd(java.lang.Class,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.config.impl.DefaultConfiguration:com.opensymphony.xwork2.inject.Container createBootstrapContainer(java.util.List)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.XWorkJUnit4TestCase:void loadButAdd(java.lang.Class,java.lang.Object)"
        ]
    },
    "com.opensymphony.xwork2.XWork:void executeAction(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.config.impl.DefaultConfiguration:com.opensymphony.xwork2.inject.Container createBootstrapContainer(java.util.List)"
        ],
        "vulCaller": []
    },
    "com.opensymphony.xwork2.ognl.OgnlValueStack:java.lang.Object findValue(java.lang.String,java.lang.Class,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.ognl.OgnlValueStack:java.lang.Object findValue(java.lang.String,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlValueStack:java.lang.String findString(java.lang.String,boolean)"
        ]
    },
    "com.opensymphony.xwork2.ognl.OgnlUtil:void setProperty(java.lang.String,java.lang.Object,java.lang.Object,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.ognl.OgnlReflectionProvider:void setProperty(java.lang.String,java.lang.Object,java.lang.Object,java.util.Map)"
        ]
    },
    "com.opensymphony.xwork2.ognl.OgnlReflectionProvider:void setProperty(java.lang.String,java.lang.Object,java.lang.Object,java.util.Map,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": []
    },
    "com.opensymphony.xwork2.ognl.OgnlUtil:void setProperties(java.util.Map,java.lang.Object,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.ognl.OgnlReflectionProvider:void setProperties(java.util.Map,java.lang.Object,java.util.Map)"
        ]
    },
    "com.opensymphony.xwork2.ognl.OgnlReflectionProvider:void setProperties(java.util.Map,java.lang.Object,java.util.Map,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": []
    },
    "com.opensymphony.xwork2.ognl.OgnlUtil:void setProperties(java.util.Map,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setProperties(java.util.Map,java.lang.Object)"
        ]
    },
    "com.opensymphony.xwork2.ognl.OgnlValueStack:void setValue(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": []
    },
    "com.opensymphony.xwork2.ognl.OgnlValueStack:java.lang.Object findValue(java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.ognl.OgnlValueStack:java.lang.Object findValue(java.lang.String)"
        ]
    },
    "com.opensymphony.xwork2.XWorkTestCase:void loadButAdd(java.lang.Class,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.config.impl.DefaultConfiguration:com.opensymphony.xwork2.inject.Container createBootstrapContainer(java.util.List)"
        ],
        "vulCaller": []
    },
    "com.opensymphony.xwork2.XWorkJUnit4TestCase:void loadButAdd(java.lang.Class,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.config.impl.DefaultConfiguration:com.opensymphony.xwork2.inject.Container createBootstrapContainer(java.util.List)"
        ],
        "vulCaller": []
    },
    "com.opensymphony.xwork2.ognl.OgnlValueStack:java.lang.Object findValue(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.ognl.OgnlValueStack:java.lang.Object tryFindValue(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlValueStack:java.lang.String findString(java.lang.String)"
        ]
    },
    "com.opensymphony.xwork2.ognl.OgnlValueStack:java.lang.String findString(java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": []
    },
    "com.opensymphony.xwork2.ognl.OgnlReflectionProvider:void setProperty(java.lang.String,java.lang.Object,java.lang.Object,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": []
    },
    "com.opensymphony.xwork2.ognl.OgnlReflectionProvider:void setProperties(java.util.Map,java.lang.Object,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": []
    },
    "com.opensymphony.xwork2.ognl.OgnlUtil:void setProperties(java.util.Map,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": [
            "com.opensymphony.xwork2.ognl.OgnlReflectionProvider:void setProperties(java.util.Map,java.lang.Object)"
        ]
    },
    "com.opensymphony.xwork2.ognl.OgnlValueStack:java.lang.Object findValue(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": []
    },
    "com.opensymphony.xwork2.ognl.OgnlValueStack:java.lang.String findString(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": []
    },
    "com.opensymphony.xwork2.ognl.OgnlReflectionProvider:void setProperties(java.util.Map,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object compile(java.lang.String)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void setValue(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object,boolean)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:void copy(java.lang.Object,java.lang.Object,java.util.Map,java.util.Collection,java.util.Collection)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:java.lang.Object getValue(java.lang.String,java.util.Map,java.lang.Object)",
            "com.opensymphony.xwork2.ognl.OgnlUtil:boolean isEvalExpression(java.lang.Object,java.util.Map)"
        ],
        "vulCaller": []
    }
}