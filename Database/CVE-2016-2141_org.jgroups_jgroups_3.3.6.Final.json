{
    "org.jgroups.demos.KeyStoreGenerator:void main(java.lang.String[])": {
        "isVulRoot": true,
        "srcRoot": [
            "org.jgroups.demos.KeyStoreGenerator:void main(java.lang.String[])"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)": {
        "isVulRoot": true,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.NAKACK2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FlowControl:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD_ALL:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.UNICAST3:int removeAndDeliver(java.util.concurrent.atomic.AtomicBoolean,org.jgroups.util.Table,org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:void removeAndPassUp(org.jgroups.util.Table,org.jgroups.Address,boolean,java.lang.String)",
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.MERGE2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.stack.Protocol:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.RSVP:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.BARRIER:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.TRACE:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FRAG2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.STABLE:void up(org.jgroups.util.MessageBatch)"
        ]
    },
    "org.jgroups.protocols.pbcast.NAKACK2:void up(org.jgroups.util.MessageBatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.NAKACK2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FlowControl:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD_ALL:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.UNICAST3:int removeAndDeliver(java.util.concurrent.atomic.AtomicBoolean,org.jgroups.util.Table,org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:void removeAndPassUp(org.jgroups.util.Table,org.jgroups.Address,boolean,java.lang.String)",
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.MERGE2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.stack.Protocol:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.RSVP:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.BARRIER:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.TRACE:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FRAG2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.STABLE:void up(org.jgroups.util.MessageBatch)"
        ]
    },
    "org.jgroups.protocols.FlowControl:void up(org.jgroups.util.MessageBatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.NAKACK2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FlowControl:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD_ALL:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.UNICAST3:int removeAndDeliver(java.util.concurrent.atomic.AtomicBoolean,org.jgroups.util.Table,org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:void removeAndPassUp(org.jgroups.util.Table,org.jgroups.Address,boolean,java.lang.String)",
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.MERGE2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.stack.Protocol:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.RSVP:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.BARRIER:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.TRACE:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FRAG2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.STABLE:void up(org.jgroups.util.MessageBatch)"
        ]
    },
    "org.jgroups.protocols.FD_ALL:void up(org.jgroups.util.MessageBatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.NAKACK2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FlowControl:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD_ALL:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.UNICAST3:int removeAndDeliver(java.util.concurrent.atomic.AtomicBoolean,org.jgroups.util.Table,org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:void removeAndPassUp(org.jgroups.util.Table,org.jgroups.Address,boolean,java.lang.String)",
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.MERGE2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.stack.Protocol:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.RSVP:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.BARRIER:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.TRACE:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FRAG2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.STABLE:void up(org.jgroups.util.MessageBatch)"
        ]
    },
    "org.jgroups.protocols.UNICAST3:int removeAndDeliver(java.util.concurrent.atomic.AtomicBoolean,org.jgroups.util.Table,org.jgroups.Address)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.UNICAST3:void handleDataReceived(org.jgroups.Address,long,short,boolean,org.jgroups.Message,org.jgroups.Event)",
            "org.jgroups.protocols.UNICAST3:void handleBatchReceived(org.jgroups.protocols.UNICAST3$ReceiverEntry,org.jgroups.Address,java.util.List,boolean)"
        ]
    },
    "org.jgroups.protocols.DISCARD:void up(org.jgroups.util.MessageBatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.NAKACK2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FlowControl:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD_ALL:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.UNICAST3:int removeAndDeliver(java.util.concurrent.atomic.AtomicBoolean,org.jgroups.util.Table,org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:void removeAndPassUp(org.jgroups.util.Table,org.jgroups.Address,boolean,java.lang.String)",
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.MERGE2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.stack.Protocol:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.RSVP:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.BARRIER:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.TRACE:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FRAG2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.STABLE:void up(org.jgroups.util.MessageBatch)"
        ]
    },
    "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.NAKACK2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FlowControl:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD_ALL:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.UNICAST3:int removeAndDeliver(java.util.concurrent.atomic.AtomicBoolean,org.jgroups.util.Table,org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:void removeAndPassUp(org.jgroups.util.Table,org.jgroups.Address,boolean,java.lang.String)",
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.MERGE2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.stack.Protocol:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.RSVP:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.BARRIER:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.TRACE:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FRAG2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.STABLE:void up(org.jgroups.util.MessageBatch)"
        ]
    },
    "org.jgroups.protocols.FD:void up(org.jgroups.util.MessageBatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.NAKACK2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FlowControl:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD_ALL:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.UNICAST3:int removeAndDeliver(java.util.concurrent.atomic.AtomicBoolean,org.jgroups.util.Table,org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:void removeAndPassUp(org.jgroups.util.Table,org.jgroups.Address,boolean,java.lang.String)",
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.MERGE2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.stack.Protocol:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.RSVP:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.BARRIER:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.TRACE:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FRAG2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.STABLE:void up(org.jgroups.util.MessageBatch)"
        ]
    },
    "org.jgroups.protocols.pbcast.NAKACK2:void removeAndPassUp(org.jgroups.util.Table,org.jgroups.Address,boolean,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessages(org.jgroups.Address,java.util.List,boolean,java.lang.String)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessage(org.jgroups.Message,org.jgroups.protocols.pbcast.NakAckHeader2)"
        ]
    },
    "org.jgroups.protocols.MERGE2:void up(org.jgroups.util.MessageBatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.NAKACK2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FlowControl:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD_ALL:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.UNICAST3:int removeAndDeliver(java.util.concurrent.atomic.AtomicBoolean,org.jgroups.util.Table,org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:void removeAndPassUp(org.jgroups.util.Table,org.jgroups.Address,boolean,java.lang.String)",
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.MERGE2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.stack.Protocol:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.RSVP:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.BARRIER:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.TRACE:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FRAG2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.STABLE:void up(org.jgroups.util.MessageBatch)"
        ]
    },
    "org.jgroups.stack.Protocol:void up(org.jgroups.util.MessageBatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.NAKACK2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FlowControl:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD_ALL:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.UNICAST3:int removeAndDeliver(java.util.concurrent.atomic.AtomicBoolean,org.jgroups.util.Table,org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:void removeAndPassUp(org.jgroups.util.Table,org.jgroups.Address,boolean,java.lang.String)",
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.MERGE2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.stack.Protocol:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.RSVP:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.BARRIER:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.TRACE:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FRAG2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.STABLE:void up(org.jgroups.util.MessageBatch)"
        ]
    },
    "org.jgroups.protocols.RSVP:void up(org.jgroups.util.MessageBatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.NAKACK2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FlowControl:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD_ALL:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.UNICAST3:int removeAndDeliver(java.util.concurrent.atomic.AtomicBoolean,org.jgroups.util.Table,org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:void removeAndPassUp(org.jgroups.util.Table,org.jgroups.Address,boolean,java.lang.String)",
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.MERGE2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.stack.Protocol:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.RSVP:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.BARRIER:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.TRACE:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FRAG2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.STABLE:void up(org.jgroups.util.MessageBatch)"
        ]
    },
    "org.jgroups.protocols.BARRIER:void up(org.jgroups.util.MessageBatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.NAKACK2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FlowControl:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD_ALL:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.UNICAST3:int removeAndDeliver(java.util.concurrent.atomic.AtomicBoolean,org.jgroups.util.Table,org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:void removeAndPassUp(org.jgroups.util.Table,org.jgroups.Address,boolean,java.lang.String)",
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.MERGE2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.stack.Protocol:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.RSVP:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.BARRIER:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.TRACE:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FRAG2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.STABLE:void up(org.jgroups.util.MessageBatch)"
        ]
    },
    "org.jgroups.protocols.TRACE:void up(org.jgroups.util.MessageBatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.NAKACK2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FlowControl:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD_ALL:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.UNICAST3:int removeAndDeliver(java.util.concurrent.atomic.AtomicBoolean,org.jgroups.util.Table,org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:void removeAndPassUp(org.jgroups.util.Table,org.jgroups.Address,boolean,java.lang.String)",
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.MERGE2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.stack.Protocol:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.RSVP:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.BARRIER:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.TRACE:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FRAG2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.STABLE:void up(org.jgroups.util.MessageBatch)"
        ]
    },
    "org.jgroups.protocols.FRAG2:void up(org.jgroups.util.MessageBatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.NAKACK2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FlowControl:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD_ALL:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.UNICAST3:int removeAndDeliver(java.util.concurrent.atomic.AtomicBoolean,org.jgroups.util.Table,org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:void removeAndPassUp(org.jgroups.util.Table,org.jgroups.Address,boolean,java.lang.String)",
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.MERGE2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.stack.Protocol:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.RSVP:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.BARRIER:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.TRACE:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FRAG2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.STABLE:void up(org.jgroups.util.MessageBatch)"
        ]
    },
    "org.jgroups.protocols.pbcast.STABLE:void up(org.jgroups.util.MessageBatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.NAKACK2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FlowControl:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD_ALL:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.UNICAST3:int removeAndDeliver(java.util.concurrent.atomic.AtomicBoolean,org.jgroups.util.Table,org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:void removeAndPassUp(org.jgroups.util.Table,org.jgroups.Address,boolean,java.lang.String)",
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.MERGE2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.stack.Protocol:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.RSVP:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.BARRIER:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.TRACE:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FRAG2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.STABLE:void up(org.jgroups.util.MessageBatch)"
        ]
    },
    "org.jgroups.protocols.UNICAST3:void handleDataReceived(org.jgroups.Address,long,short,boolean,org.jgroups.Message,org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.UNICAST3:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.UNICAST3:void handleBatchReceived(org.jgroups.protocols.UNICAST3$ReceiverEntry,org.jgroups.Address,java.util.List,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ]
    },
    "org.jgroups.protocols.pbcast.NAKACK2:void handleMessages(org.jgroups.Address,java.util.List,boolean,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.NAKACK2:void up(org.jgroups.util.MessageBatch)"
        ]
    },
    "org.jgroups.protocols.pbcast.NAKACK2:void handleMessage(org.jgroups.Message,org.jgroups.protocols.pbcast.NakAckHeader2)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.UNICAST3:java.lang.Object up(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.MERGE2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.DISCARD:org.jgroups.Address localAddress()",
            "org.jgroups.protocols.FlowControl:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.stack.Protocol:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.BARRIER:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD$1:void run()",
            "org.jgroups.protocols.TP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.MERGE2:boolean isMergeRunning()",
            "org.jgroups.protocols.TP:void fetchLocalAddresses()",
            "org.jgroups.protocols.FRAG2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessage(org.jgroups.Message,org.jgroups.protocols.pbcast.NakAckHeader2)",
            "org.jgroups.protocols.Discovery:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.UNICAST3:void handleDataReceived(org.jgroups.Address,long,short,boolean,org.jgroups.Message,org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:boolean _startFlush(org.jgroups.View,int,boolean,long,long)",
            "org.jgroups.protocols.DISCARD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.TRACE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:void _findAndNotify()",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.Discovery:boolean isMergeRunning()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void stopFlush()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessages(org.jgroups.Address,java.util.List,boolean,java.lang.String)",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.RSVP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.TP:void passMessageUp(org.jgroups.Message,java.lang.String,boolean,boolean,boolean)",
            "org.jgroups.protocols.UNICAST3:void handleBatchReceived(org.jgroups.protocols.UNICAST3$ReceiverEntry,org.jgroups.Address,java.util.List,boolean)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspectWithICMP(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.UNICAST3:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object up(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.MERGE2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2$1:void run()",
            "org.jgroups.protocols.DISCARD:org.jgroups.Address localAddress()",
            "org.jgroups.protocols.FlowControl:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.stack.Protocol:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.BARRIER:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD$1:void run()",
            "org.jgroups.protocols.TP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.MERGE2:boolean isMergeRunning()",
            "org.jgroups.protocols.TP:void fetchLocalAddresses()",
            "org.jgroups.protocols.FRAG2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessage(org.jgroups.Message,org.jgroups.protocols.pbcast.NakAckHeader2)",
            "org.jgroups.protocols.Discovery:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.UNICAST3:void handleDataReceived(org.jgroups.Address,long,short,boolean,org.jgroups.Message,org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:boolean _startFlush(org.jgroups.View,int,boolean,long,long)",
            "org.jgroups.protocols.DISCARD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.TRACE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:void _findAndNotify()",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleXmitRsp(org.jgroups.Message,org.jgroups.protocols.pbcast.NakAckHeader2)",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.Discovery:boolean isMergeRunning()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void stopFlush()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessages(org.jgroups.Address,java.util.List,boolean,java.lang.String)",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.RSVP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.TP:void passMessageUp(org.jgroups.Message,java.lang.String,boolean,boolean,boolean)",
            "org.jgroups.protocols.UNICAST3:void handleBatchReceived(org.jgroups.protocols.UNICAST3$ReceiverEntry,org.jgroups.Address,java.util.List,boolean)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspectWithICMP(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.UNICAST3:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.MERGE2:java.lang.Object up(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.MERGE2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.DISCARD:org.jgroups.Address localAddress()",
            "org.jgroups.protocols.FlowControl:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.stack.Protocol:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.BARRIER:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD$1:void run()",
            "org.jgroups.protocols.TP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.MERGE2:boolean isMergeRunning()",
            "org.jgroups.protocols.TP:void fetchLocalAddresses()",
            "org.jgroups.protocols.FRAG2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessage(org.jgroups.Message,org.jgroups.protocols.pbcast.NakAckHeader2)",
            "org.jgroups.protocols.Discovery:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.UNICAST3:void handleDataReceived(org.jgroups.Address,long,short,boolean,org.jgroups.Message,org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:boolean _startFlush(org.jgroups.View,int,boolean,long,long)",
            "org.jgroups.protocols.DISCARD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.TRACE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:void _findAndNotify()",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.Discovery:boolean isMergeRunning()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void stopFlush()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessages(org.jgroups.Address,java.util.List,boolean,java.lang.String)",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.RSVP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.TP:void passMessageUp(org.jgroups.Message,java.lang.String,boolean,boolean,boolean)",
            "org.jgroups.protocols.UNICAST3:void handleBatchReceived(org.jgroups.protocols.UNICAST3$ReceiverEntry,org.jgroups.Address,java.util.List,boolean)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspectWithICMP(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.UNICAST3:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.DISCARD:org.jgroups.Address localAddress()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.DISCARD:void startGui()",
            "org.jgroups.protocols.DISCARD$DiscardDialog:void init()",
            "org.jgroups.protocols.DISCARD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.DISCARD:boolean shouldDropUpMessage(org.jgroups.Message,org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD:void loopback(org.jgroups.Message)"
        ]
    },
    "org.jgroups.protocols.FlowControl:java.lang.Object up(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.MERGE2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.DISCARD:org.jgroups.Address localAddress()",
            "org.jgroups.protocols.FlowControl:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.stack.Protocol:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.BARRIER:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD$1:void run()",
            "org.jgroups.protocols.TP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.MERGE2:boolean isMergeRunning()",
            "org.jgroups.protocols.TP:void fetchLocalAddresses()",
            "org.jgroups.protocols.FRAG2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessage(org.jgroups.Message,org.jgroups.protocols.pbcast.NakAckHeader2)",
            "org.jgroups.protocols.Discovery:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.UNICAST3:void handleDataReceived(org.jgroups.Address,long,short,boolean,org.jgroups.Message,org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:boolean _startFlush(org.jgroups.View,int,boolean,long,long)",
            "org.jgroups.protocols.DISCARD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.TRACE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:void _findAndNotify()",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.Discovery:boolean isMergeRunning()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void stopFlush()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessages(org.jgroups.Address,java.util.List,boolean,java.lang.String)",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.RSVP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.TP:void passMessageUp(org.jgroups.Message,java.lang.String,boolean,boolean,boolean)",
            "org.jgroups.protocols.UNICAST3:void handleBatchReceived(org.jgroups.protocols.UNICAST3$ReceiverEntry,org.jgroups.Address,java.util.List,boolean)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspectWithICMP(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.UNICAST3:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.stack.Protocol:java.lang.Object up(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.MERGE2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.DISCARD:org.jgroups.Address localAddress()",
            "org.jgroups.protocols.FlowControl:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.stack.Protocol:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.BARRIER:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD$1:void run()",
            "org.jgroups.protocols.TP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.TP$ProtocolAdapter:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.util.ForwardQueue:void receive(long,org.jgroups.Message)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.MERGE2:boolean isMergeRunning()",
            "org.jgroups.protocols.TP:void fetchLocalAddresses()",
            "org.jgroups.protocols.FRAG2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessage(org.jgroups.Message,org.jgroups.protocols.pbcast.NakAckHeader2)",
            "org.jgroups.protocols.Discovery:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.UNICAST3:void handleDataReceived(org.jgroups.Address,long,short,boolean,org.jgroups.Message,org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:boolean _startFlush(org.jgroups.View,int,boolean,long,long)",
            "org.jgroups.protocols.DISCARD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.TRACE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:void _findAndNotify()",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.Discovery:boolean isMergeRunning()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void stopFlush()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessages(org.jgroups.Address,java.util.List,boolean,java.lang.String)",
            "org.jgroups.stack.Protocol:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.RSVP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.TP:void passMessageUp(org.jgroups.Message,java.lang.String,boolean,boolean,boolean)",
            "org.jgroups.protocols.UNICAST3:void handleBatchReceived(org.jgroups.protocols.UNICAST3$ReceiverEntry,org.jgroups.Address,java.util.List,boolean)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspectWithICMP(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.UNICAST3:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.BARRIER:java.lang.Object up(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.MERGE2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.DISCARD:org.jgroups.Address localAddress()",
            "org.jgroups.protocols.FlowControl:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.stack.Protocol:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.BARRIER:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD$1:void run()",
            "org.jgroups.protocols.TP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.MERGE2:boolean isMergeRunning()",
            "org.jgroups.protocols.TP:void fetchLocalAddresses()",
            "org.jgroups.protocols.FRAG2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessage(org.jgroups.Message,org.jgroups.protocols.pbcast.NakAckHeader2)",
            "org.jgroups.protocols.Discovery:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.UNICAST3:void handleDataReceived(org.jgroups.Address,long,short,boolean,org.jgroups.Message,org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:boolean _startFlush(org.jgroups.View,int,boolean,long,long)",
            "org.jgroups.protocols.DISCARD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.TRACE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:void _findAndNotify()",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.Discovery:boolean isMergeRunning()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void stopFlush()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessages(org.jgroups.Address,java.util.List,boolean,java.lang.String)",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.RSVP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.TP:void passMessageUp(org.jgroups.Message,java.lang.String,boolean,boolean,boolean)",
            "org.jgroups.protocols.UNICAST3:void handleBatchReceived(org.jgroups.protocols.UNICAST3$ReceiverEntry,org.jgroups.Address,java.util.List,boolean)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspectWithICMP(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.UNICAST3:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.FD_ALL:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object down(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.DISCARD$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.TP:java.lang.Object up(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.MERGE2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.DISCARD:org.jgroups.Address localAddress()",
            "org.jgroups.protocols.FlowControl:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.stack.Protocol:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.BARRIER:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.TP:void sendToSingleMember(org.jgroups.Address,byte[],int,int)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD$1:void run()",
            "org.jgroups.protocols.TP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.MERGE2:boolean isMergeRunning()",
            "org.jgroups.protocols.TP:void fetchLocalAddresses()",
            "org.jgroups.protocols.FRAG2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.TP:void sendToAllPhysicalAddresses(byte[],int,int)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessage(org.jgroups.Message,org.jgroups.protocols.pbcast.NakAckHeader2)",
            "org.jgroups.protocols.Discovery:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.UNICAST3:void handleDataReceived(org.jgroups.Address,long,short,boolean,org.jgroups.Message,org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:boolean _startFlush(org.jgroups.View,int,boolean,long,long)",
            "org.jgroups.protocols.DISCARD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.TRACE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:void _findAndNotify()",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.Discovery:boolean isMergeRunning()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.TUNNEL$StubReceiver:void fireSuspectEvent(org.jgroups.Address)",
            "org.jgroups.protocols.TP:void init()",
            "org.jgroups.protocols.pbcast.GMS:void stopFlush()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessages(org.jgroups.Address,java.util.List,boolean,java.lang.String)",
            "org.jgroups.stack.Protocol:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.RSVP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.TP:void passMessageUp(org.jgroups.Message,java.lang.String,boolean,boolean,boolean)",
            "org.jgroups.protocols.UNICAST3:void handleBatchReceived(org.jgroups.protocols.UNICAST3$ReceiverEntry,org.jgroups.Address,java.util.List,boolean)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspectWithICMP(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.UNICAST3:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.FD_ALL:java.lang.Object up(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.MERGE2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.DISCARD:org.jgroups.Address localAddress()",
            "org.jgroups.protocols.FlowControl:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.stack.Protocol:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.BARRIER:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD$1:void run()",
            "org.jgroups.protocols.TP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.MERGE2:boolean isMergeRunning()",
            "org.jgroups.protocols.TP:void fetchLocalAddresses()",
            "org.jgroups.protocols.FRAG2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessage(org.jgroups.Message,org.jgroups.protocols.pbcast.NakAckHeader2)",
            "org.jgroups.protocols.Discovery:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.UNICAST3:void handleDataReceived(org.jgroups.Address,long,short,boolean,org.jgroups.Message,org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:boolean _startFlush(org.jgroups.View,int,boolean,long,long)",
            "org.jgroups.protocols.DISCARD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.TRACE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:void _findAndNotify()",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.Discovery:boolean isMergeRunning()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void stopFlush()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessages(org.jgroups.Address,java.util.List,boolean,java.lang.String)",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.RSVP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.TP:void passMessageUp(org.jgroups.Message,java.lang.String,boolean,boolean,boolean)",
            "org.jgroups.protocols.UNICAST3:void handleBatchReceived(org.jgroups.protocols.UNICAST3$ReceiverEntry,org.jgroups.Address,java.util.List,boolean)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspectWithICMP(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.UNICAST3:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.MERGE2:boolean isMergeRunning()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:void findAndNotify()"
        ]
    },
    "org.jgroups.protocols.TP:void fetchLocalAddresses()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.TP:void clearLogicalAddressCache()",
            "org.jgroups.protocols.TP:java.lang.Object handleDownEvent(org.jgroups.Event)",
            "org.jgroups.protocols.TP:void start()",
            "org.jgroups.protocols.TP:void removeLogicalAddressFromCache(org.jgroups.Address)",
            "org.jgroups.protocols.TP:void evictLogicalAddressCache(boolean)"
        ]
    },
    "org.jgroups.protocols.FRAG2:java.lang.Object up(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.MERGE2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.DISCARD:org.jgroups.Address localAddress()",
            "org.jgroups.protocols.FlowControl:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.stack.Protocol:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.BARRIER:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD$1:void run()",
            "org.jgroups.protocols.TP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.MERGE2:boolean isMergeRunning()",
            "org.jgroups.protocols.TP:void fetchLocalAddresses()",
            "org.jgroups.protocols.FRAG2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessage(org.jgroups.Message,org.jgroups.protocols.pbcast.NakAckHeader2)",
            "org.jgroups.protocols.Discovery:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.UNICAST3:void handleDataReceived(org.jgroups.Address,long,short,boolean,org.jgroups.Message,org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:boolean _startFlush(org.jgroups.View,int,boolean,long,long)",
            "org.jgroups.protocols.DISCARD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.TRACE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:void _findAndNotify()",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.Discovery:boolean isMergeRunning()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void stopFlush()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessages(org.jgroups.Address,java.util.List,boolean,java.lang.String)",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.RSVP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.TP:void passMessageUp(org.jgroups.Message,java.lang.String,boolean,boolean,boolean)",
            "org.jgroups.protocols.UNICAST3:void handleBatchReceived(org.jgroups.protocols.UNICAST3$ReceiverEntry,org.jgroups.Address,java.util.List,boolean)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspectWithICMP(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.UNICAST3:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void joinInternal(org.jgroups.Address,boolean,boolean)"
        ]
    },
    "org.jgroups.protocols.Discovery:java.lang.Object up(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.MERGE2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.BPING:void run()",
            "org.jgroups.protocols.DISCARD:org.jgroups.Address localAddress()",
            "org.jgroups.protocols.FlowControl:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.MPING:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.stack.Protocol:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.BARRIER:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD$1:void run()",
            "org.jgroups.protocols.TP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.MERGE2:boolean isMergeRunning()",
            "org.jgroups.protocols.TP:void fetchLocalAddresses()",
            "org.jgroups.protocols.FRAG2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessage(org.jgroups.Message,org.jgroups.protocols.pbcast.NakAckHeader2)",
            "org.jgroups.protocols.Discovery:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.UNICAST3:void handleDataReceived(org.jgroups.Address,long,short,boolean,org.jgroups.Message,org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:boolean _startFlush(org.jgroups.View,int,boolean,long,long)",
            "org.jgroups.protocols.DISCARD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.TRACE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:void _findAndNotify()",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.Discovery:boolean isMergeRunning()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void stopFlush()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessages(org.jgroups.Address,java.util.List,boolean,java.lang.String)",
            "org.jgroups.stack.Protocol:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.RSVP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.TP:void passMessageUp(org.jgroups.Message,java.lang.String,boolean,boolean,boolean)",
            "org.jgroups.protocols.UNICAST3:void handleBatchReceived(org.jgroups.protocols.UNICAST3$ReceiverEntry,org.jgroups.Address,java.util.List,boolean)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspectWithICMP(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.UNICAST3:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object up(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.MERGE2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.DISCARD:org.jgroups.Address localAddress()",
            "org.jgroups.protocols.FlowControl:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.stack.Protocol:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.BARRIER:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD$1:void run()",
            "org.jgroups.protocols.TP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.MERGE2:boolean isMergeRunning()",
            "org.jgroups.protocols.pbcast.FLUSH:void sendBlockUpToChannel()",
            "org.jgroups.protocols.TP:void fetchLocalAddresses()",
            "org.jgroups.protocols.FRAG2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessage(org.jgroups.Message,org.jgroups.protocols.pbcast.NakAckHeader2)",
            "org.jgroups.protocols.Discovery:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.UNICAST3:void handleDataReceived(org.jgroups.Address,long,short,boolean,org.jgroups.Message,org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:boolean _startFlush(org.jgroups.View,int,boolean,long,long)",
            "org.jgroups.protocols.DISCARD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.TRACE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:void _findAndNotify()",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.Discovery:boolean isMergeRunning()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void stopFlush()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessages(org.jgroups.Address,java.util.List,boolean,java.lang.String)",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.pbcast.FLUSH:void sendUnBlockUpToChannel()",
            "org.jgroups.protocols.RSVP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.TP:void passMessageUp(org.jgroups.Message,java.lang.String,boolean,boolean,boolean)",
            "org.jgroups.protocols.UNICAST3:void handleBatchReceived(org.jgroups.protocols.UNICAST3$ReceiverEntry,org.jgroups.Address,java.util.List,boolean)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspectWithICMP(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.UNICAST3:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.MERGE2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.DISCARD:org.jgroups.Address localAddress()",
            "org.jgroups.protocols.FlowControl:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void suspect(java.lang.String)",
            "org.jgroups.stack.Protocol:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.BARRIER:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD$1:void run()",
            "org.jgroups.protocols.TP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.MERGE2:boolean isMergeRunning()",
            "org.jgroups.protocols.TP:void fetchLocalAddresses()",
            "org.jgroups.protocols.FRAG2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessage(org.jgroups.Message,org.jgroups.protocols.pbcast.NakAckHeader2)",
            "org.jgroups.protocols.Discovery:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.UNICAST3:void handleDataReceived(org.jgroups.Address,long,short,boolean,org.jgroups.Message,org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:boolean _startFlush(org.jgroups.View,int,boolean,long,long)",
            "org.jgroups.protocols.DISCARD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.TRACE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:void _findAndNotify()",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.Discovery:boolean isMergeRunning()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void stopFlush()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessages(org.jgroups.Address,java.util.List,boolean,java.lang.String)",
            "org.jgroups.stack.Protocol:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.RSVP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.TP:void passMessageUp(org.jgroups.Message,java.lang.String,boolean,boolean,boolean)",
            "org.jgroups.protocols.UNICAST3:void handleBatchReceived(org.jgroups.protocols.UNICAST3$ReceiverEntry,org.jgroups.Address,java.util.List,boolean)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspectWithICMP(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.UNICAST3:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.pbcast.GMS:boolean _startFlush(org.jgroups.View,int,boolean,long,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.GMS:boolean startFlush(org.jgroups.View,int,long,long)",
            "org.jgroups.protocols.pbcast.GMS:boolean startFlush(org.jgroups.View)"
        ]
    },
    "org.jgroups.protocols.DISCARD:java.lang.Object up(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.MERGE2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.DISCARD:org.jgroups.Address localAddress()",
            "org.jgroups.protocols.FlowControl:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.stack.Protocol:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.BARRIER:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD$1:void run()",
            "org.jgroups.protocols.TP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.MERGE2:boolean isMergeRunning()",
            "org.jgroups.protocols.TP:void fetchLocalAddresses()",
            "org.jgroups.protocols.FRAG2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessage(org.jgroups.Message,org.jgroups.protocols.pbcast.NakAckHeader2)",
            "org.jgroups.protocols.Discovery:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.UNICAST3:void handleDataReceived(org.jgroups.Address,long,short,boolean,org.jgroups.Message,org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:boolean _startFlush(org.jgroups.View,int,boolean,long,long)",
            "org.jgroups.protocols.DISCARD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.TRACE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:void _findAndNotify()",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.Discovery:boolean isMergeRunning()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void stopFlush()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessages(org.jgroups.Address,java.util.List,boolean,java.lang.String)",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.RSVP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.TP:void passMessageUp(org.jgroups.Message,java.lang.String,boolean,boolean,boolean)",
            "org.jgroups.protocols.UNICAST3:void handleBatchReceived(org.jgroups.protocols.UNICAST3$ReceiverEntry,org.jgroups.Address,java.util.List,boolean)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspectWithICMP(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.UNICAST3:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.TRACE:java.lang.Object up(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.MERGE2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.DISCARD:org.jgroups.Address localAddress()",
            "org.jgroups.protocols.FlowControl:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.stack.Protocol:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.BARRIER:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD$1:void run()",
            "org.jgroups.protocols.TP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.MERGE2:boolean isMergeRunning()",
            "org.jgroups.protocols.TP:void fetchLocalAddresses()",
            "org.jgroups.protocols.FRAG2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessage(org.jgroups.Message,org.jgroups.protocols.pbcast.NakAckHeader2)",
            "org.jgroups.protocols.Discovery:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.UNICAST3:void handleDataReceived(org.jgroups.Address,long,short,boolean,org.jgroups.Message,org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:boolean _startFlush(org.jgroups.View,int,boolean,long,long)",
            "org.jgroups.protocols.DISCARD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.TRACE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:void _findAndNotify()",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.Discovery:boolean isMergeRunning()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void stopFlush()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessages(org.jgroups.Address,java.util.List,boolean,java.lang.String)",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.RSVP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.TP:void passMessageUp(org.jgroups.Message,java.lang.String,boolean,boolean,boolean)",
            "org.jgroups.protocols.UNICAST3:void handleBatchReceived(org.jgroups.protocols.UNICAST3$ReceiverEntry,org.jgroups.Address,java.util.List,boolean)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspectWithICMP(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.UNICAST3:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.pbcast.STABLE:java.lang.Object up(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.MERGE2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.DISCARD:org.jgroups.Address localAddress()",
            "org.jgroups.protocols.FlowControl:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.stack.Protocol:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.BARRIER:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD$1:void run()",
            "org.jgroups.protocols.TP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.MERGE2:boolean isMergeRunning()",
            "org.jgroups.protocols.TP:void fetchLocalAddresses()",
            "org.jgroups.protocols.FRAG2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessage(org.jgroups.Message,org.jgroups.protocols.pbcast.NakAckHeader2)",
            "org.jgroups.protocols.Discovery:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.UNICAST3:void handleDataReceived(org.jgroups.Address,long,short,boolean,org.jgroups.Message,org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:boolean _startFlush(org.jgroups.View,int,boolean,long,long)",
            "org.jgroups.protocols.DISCARD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.TRACE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:void _findAndNotify()",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.Discovery:boolean isMergeRunning()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void stopFlush()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessages(org.jgroups.Address,java.util.List,boolean,java.lang.String)",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.RSVP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.TP:void passMessageUp(org.jgroups.Message,java.lang.String,boolean,boolean,boolean)",
            "org.jgroups.protocols.UNICAST3:void handleBatchReceived(org.jgroups.protocols.UNICAST3$ReceiverEntry,org.jgroups.Address,java.util.List,boolean)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspectWithICMP(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.UNICAST3:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.FD_ALL$TimeoutChecker:void run()"
        ]
    },
    "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.ParticipantGmsImpl:void handleJoinResponse(org.jgroups.protocols.pbcast.JoinRsp)",
            "org.jgroups.protocols.pbcast.ParticipantGmsImpl:void handleViewChange(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void handleViewChange(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View)"
        ]
    },
    "org.jgroups.protocols.MERGE2$FindSubgroupsTask:void _findAndNotify()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:void findAndNotify()"
        ]
    },
    "org.jgroups.protocols.pbcast.FLUSH:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.Discovery:boolean isMergeRunning()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.Discovery:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.MERGE2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.DISCARD:org.jgroups.Address localAddress()",
            "org.jgroups.protocols.FlowControl:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.stack.Protocol:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.BARRIER:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD$1:void run()",
            "org.jgroups.protocols.TP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.MERGE2:boolean isMergeRunning()",
            "org.jgroups.protocols.TP:void fetchLocalAddresses()",
            "org.jgroups.protocols.FRAG2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessage(org.jgroups.Message,org.jgroups.protocols.pbcast.NakAckHeader2)",
            "org.jgroups.protocols.Discovery:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.UNICAST3:void handleDataReceived(org.jgroups.Address,long,short,boolean,org.jgroups.Message,org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:boolean _startFlush(org.jgroups.View,int,boolean,long,long)",
            "org.jgroups.protocols.DISCARD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.TRACE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:void _findAndNotify()",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.Discovery:boolean isMergeRunning()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void stopFlush()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessages(org.jgroups.Address,java.util.List,boolean,java.lang.String)",
            "org.jgroups.stack.Protocol:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.RSVP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.TP:void passMessageUp(org.jgroups.Message,java.lang.String,boolean,boolean,boolean)",
            "org.jgroups.protocols.UNICAST3:void handleBatchReceived(org.jgroups.protocols.UNICAST3$ReceiverEntry,org.jgroups.Address,java.util.List,boolean)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspectWithICMP(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.UNICAST3:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.pbcast.GMS:void stopFlush()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.Merger$MergeTask:void run()",
            "org.jgroups.protocols.pbcast.Merger:void handleMergeCancelled(org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void handleMembershipChange(java.util.Collection)"
        ]
    },
    "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.MERGE2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.DISCARD:org.jgroups.Address localAddress()",
            "org.jgroups.protocols.FlowControl:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.stack.Protocol:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.BARRIER:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD$1:void run()",
            "org.jgroups.protocols.TP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.MERGE2:boolean isMergeRunning()",
            "org.jgroups.protocols.TP:void fetchLocalAddresses()",
            "org.jgroups.protocols.FRAG2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessage(org.jgroups.Message,org.jgroups.protocols.pbcast.NakAckHeader2)",
            "org.jgroups.protocols.Discovery:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.UNICAST3:void handleDataReceived(org.jgroups.Address,long,short,boolean,org.jgroups.Message,org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:boolean _startFlush(org.jgroups.View,int,boolean,long,long)",
            "org.jgroups.protocols.DISCARD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.TRACE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:void _findAndNotify()",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.Discovery:boolean isMergeRunning()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void stopFlush()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessages(org.jgroups.Address,java.util.List,boolean,java.lang.String)",
            "org.jgroups.stack.Protocol:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.RSVP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.TP:void passMessageUp(org.jgroups.Message,java.lang.String,boolean,boolean,boolean)",
            "org.jgroups.protocols.UNICAST3:void handleBatchReceived(org.jgroups.protocols.UNICAST3$ReceiverEntry,org.jgroups.Address,java.util.List,boolean)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspectWithICMP(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.UNICAST3:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.MERGE2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.DISCARD:org.jgroups.Address localAddress()",
            "org.jgroups.protocols.FlowControl:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.stack.Protocol:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.BARRIER:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD$1:void run()",
            "org.jgroups.protocols.TP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.MERGE2:boolean isMergeRunning()",
            "org.jgroups.protocols.TP:void fetchLocalAddresses()",
            "org.jgroups.protocols.FRAG2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessage(org.jgroups.Message,org.jgroups.protocols.pbcast.NakAckHeader2)",
            "org.jgroups.protocols.Discovery:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.UNICAST3:void handleDataReceived(org.jgroups.Address,long,short,boolean,org.jgroups.Message,org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:boolean _startFlush(org.jgroups.View,int,boolean,long,long)",
            "org.jgroups.protocols.DISCARD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.TRACE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:void _findAndNotify()",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.Discovery:boolean isMergeRunning()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void stopFlush()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessages(org.jgroups.Address,java.util.List,boolean,java.lang.String)",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.RSVP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.TP:void passMessageUp(org.jgroups.Message,java.lang.String,boolean,boolean,boolean)",
            "org.jgroups.protocols.UNICAST3:void handleBatchReceived(org.jgroups.protocols.UNICAST3$ReceiverEntry,org.jgroups.Address,java.util.List,boolean)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspectWithICMP(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.UNICAST3:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.RSVP:java.lang.Object up(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.MERGE2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.DISCARD:org.jgroups.Address localAddress()",
            "org.jgroups.protocols.FlowControl:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.stack.Protocol:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.BARRIER:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD$1:void run()",
            "org.jgroups.protocols.TP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.MERGE2:boolean isMergeRunning()",
            "org.jgroups.protocols.TP:void fetchLocalAddresses()",
            "org.jgroups.protocols.FRAG2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessage(org.jgroups.Message,org.jgroups.protocols.pbcast.NakAckHeader2)",
            "org.jgroups.protocols.Discovery:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.UNICAST3:void handleDataReceived(org.jgroups.Address,long,short,boolean,org.jgroups.Message,org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:boolean _startFlush(org.jgroups.View,int,boolean,long,long)",
            "org.jgroups.protocols.DISCARD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.TRACE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:void _findAndNotify()",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.Discovery:boolean isMergeRunning()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void stopFlush()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessages(org.jgroups.Address,java.util.List,boolean,java.lang.String)",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.RSVP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.TP:void passMessageUp(org.jgroups.Message,java.lang.String,boolean,boolean,boolean)",
            "org.jgroups.protocols.UNICAST3:void handleBatchReceived(org.jgroups.protocols.UNICAST3$ReceiverEntry,org.jgroups.Address,java.util.List,boolean)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspectWithICMP(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.UNICAST3:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.Merger:void handleMergeView(org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void handleMembershipChange(java.util.Collection)"
        ]
    },
    "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.TP:void passMessageUp(org.jgroups.Message,java.lang.String,boolean,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.TP$BatchHandler:void run()",
            "org.jgroups.protocols.TP$4:void run()",
            "org.jgroups.protocols.TP$MyHandler:void run()"
        ]
    },
    "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspectWithICMP(org.jgroups.Address)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void joinInternal(org.jgroups.Address,boolean,boolean)"
        ]
    },
    "org.jgroups.protocols.pbcast.NAKACK2$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.DirectExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jgroups.protocols.pbcast.NAKACK2:void handleXmitRsp(org.jgroups.Message,org.jgroups.protocols.pbcast.NakAckHeader2)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.DISCARD:void startGui()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.DISCARD$DiscardDialog:void init()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.DISCARD:void start()",
            "org.jgroups.protocols.DISCARD:void startGui()"
        ]
    },
    "org.jgroups.protocols.DISCARD:java.lang.Object down(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.FD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onResume(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void handleFlushReconcile(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.FlowControl:void sendCreditRequest(org.jgroups.Address,java.lang.Long)",
            "org.jgroups.protocols.pbcast.ParticipantGmsImpl:void sendLeaveMessage(org.jgroups.Address,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE:void handleStabilityMessage(org.jgroups.util.Digest,org.jgroups.Address)",
            "org.jgroups.protocols.Discovery:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeCancelledMessage(java.util.Collection,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void joinInternal(org.jgroups.Address,boolean,boolean)",
            "org.jgroups.stack.ProtocolStack:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void mergeDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:java.util.List findAllViews()",
            "org.jgroups.protocols.pbcast.GmsImpl:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspend(java.util.List)",
            "org.jgroups.protocols.UNICAST3:void sendRequestForFirstSeqno(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery$2:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK$BroadcastTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void handleMembershipChange(java.util.Collection)",
            "org.jgroups.protocols.pbcast.GMS:void sendJoinResponse(org.jgroups.protocols.pbcast.JoinRsp,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.GMS:void sendViewAck(org.jgroups.Address)",
            "org.jgroups.stack.Protocol:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onStartFlush(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.Merger$MergeTask:boolean getMergeDataFromSubgroupCoordinators(java.util.Map,org.jgroups.util.MergeId,long)",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.pbcast.STABLE:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void fixDigests()",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.pbcast.FLUSH:void onFlushCompleted(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.Merger:void handleMergeView(org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeView(java.util.Collection,org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object handleConnect(org.jgroups.Event,boolean)",
            "org.jgroups.protocols.FD$BroadcastTask:void run()",
            "org.jgroups.protocols.UNICAST3:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery:void sendMcastDiscoveryRequest(org.jgroups.Message)",
            "org.jgroups.protocols.UNICAST3:void handleResendingOfFirstMessage(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE$1:void run()",
            "org.jgroups.protocols.pbcast.Merger:org.jgroups.util.Digest fetchDigestsFromAllMembersInSubPartition(java.util.List,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void sendLeaveResponses(java.util.Collection)",
            "org.jgroups.protocols.FD_SOCK:void sendIHaveSockMessage(org.jgroups.Address,org.jgroups.Address,org.jgroups.stack.IpAddress)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:java.util.List findInitialMembers(org.jgroups.util.Promise)",
            "org.jgroups.protocols.Discovery$1:void run()",
            "org.jgroups.protocols.DISCARD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void cancelMerge(org.jgroups.util.MergeId)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL$HeartbeatSender:void run()",
            "org.jgroups.protocols.FlowControl:void sendCredit(org.jgroups.Address,long)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeResponse(org.jgroups.Address,org.jgroups.View,org.jgroups.util.Digest,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.GMS:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.pbcast.NAKACK2:void send(org.jgroups.Event,org.jgroups.Message)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryRequest(java.lang.String,org.jgroups.util.Promise,org.jgroups.ViewId)",
            "org.jgroups.protocols.RSVP$Entry$1:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void handleStartFlush(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.MERGE2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.UNICAST3:void handleXmitRequest(org.jgroups.Address,org.jgroups.util.SeqnoList)",
            "org.jgroups.protocols.MFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void sendJoinMessage(org.jgroups.Address,org.jgroups.Address,boolean,boolean)",
            "org.jgroups.protocols.pbcast.FLUSH:void rejectFlush(java.util.Collection,long)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryResponse(org.jgroups.Address,java.util.List,boolean,boolean,java.lang.String,org.jgroups.Address)",
            "org.jgroups.protocols.FRAG2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:void sendResponse(org.jgroups.Address,short)",
            "org.jgroups.protocols.FlowControl:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void retransmit(org.jgroups.util.SeqnoList,org.jgroups.Address,boolean)",
            "org.jgroups.protocols.UNICAST3:void sendAck(org.jgroups.Address,long,short)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void setDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.STABLE$StabilitySendTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:boolean setMergeId(org.jgroups.util.MergeId,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.NAKACK2:void sendXmitRsp(org.jgroups.Address,org.jgroups.Message)",
            "org.jgroups.protocols.FRAG2:void fragment(org.jgroups.Message)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.UFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.FD:void sendHeartbeatResponse(org.jgroups.Address)",
            "org.jgroups.protocols.TRACE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.BARRIER:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD$Monitor:void run()"
        ]
    },
    "org.jgroups.protocols.DISCARD:boolean shouldDropUpMessage(org.jgroups.Message,org.jgroups.Address)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.DISCARD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.DISCARD:void up(org.jgroups.util.MessageBatch)"
        ]
    },
    "org.jgroups.protocols.DISCARD:void loopback(org.jgroups.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.DISCARD:java.lang.Object down(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.TP$ProtocolAdapter:java.lang.Object up(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.util.ForwardQueue:void receive(long,org.jgroups.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.FORWARD_TO_COORD:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.FD_ALL:java.lang.Object down(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.FD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onResume(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void handleFlushReconcile(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.FlowControl:void sendCreditRequest(org.jgroups.Address,java.lang.Long)",
            "org.jgroups.protocols.pbcast.ParticipantGmsImpl:void sendLeaveMessage(org.jgroups.Address,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE:void handleStabilityMessage(org.jgroups.util.Digest,org.jgroups.Address)",
            "org.jgroups.protocols.Discovery:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeCancelledMessage(java.util.Collection,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void joinInternal(org.jgroups.Address,boolean,boolean)",
            "org.jgroups.stack.ProtocolStack:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void mergeDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:java.util.List findAllViews()",
            "org.jgroups.protocols.pbcast.GmsImpl:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspend(java.util.List)",
            "org.jgroups.protocols.UNICAST3:void sendRequestForFirstSeqno(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery$2:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK$BroadcastTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void handleMembershipChange(java.util.Collection)",
            "org.jgroups.protocols.pbcast.GMS:void sendJoinResponse(org.jgroups.protocols.pbcast.JoinRsp,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.GMS:void sendViewAck(org.jgroups.Address)",
            "org.jgroups.stack.Protocol:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onStartFlush(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.Merger$MergeTask:boolean getMergeDataFromSubgroupCoordinators(java.util.Map,org.jgroups.util.MergeId,long)",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.pbcast.STABLE:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void fixDigests()",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.pbcast.FLUSH:void onFlushCompleted(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.Merger:void handleMergeView(org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeView(java.util.Collection,org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object handleConnect(org.jgroups.Event,boolean)",
            "org.jgroups.protocols.FD$BroadcastTask:void run()",
            "org.jgroups.protocols.UNICAST3:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery:void sendMcastDiscoveryRequest(org.jgroups.Message)",
            "org.jgroups.protocols.UNICAST3:void handleResendingOfFirstMessage(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE$1:void run()",
            "org.jgroups.protocols.pbcast.Merger:org.jgroups.util.Digest fetchDigestsFromAllMembersInSubPartition(java.util.List,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void sendLeaveResponses(java.util.Collection)",
            "org.jgroups.protocols.FD_SOCK:void sendIHaveSockMessage(org.jgroups.Address,org.jgroups.Address,org.jgroups.stack.IpAddress)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:java.util.List findInitialMembers(org.jgroups.util.Promise)",
            "org.jgroups.protocols.Discovery$1:void run()",
            "org.jgroups.protocols.DISCARD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void cancelMerge(org.jgroups.util.MergeId)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL$HeartbeatSender:void run()",
            "org.jgroups.protocols.FlowControl:void sendCredit(org.jgroups.Address,long)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeResponse(org.jgroups.Address,org.jgroups.View,org.jgroups.util.Digest,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.GMS:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.pbcast.NAKACK2:void send(org.jgroups.Event,org.jgroups.Message)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryRequest(java.lang.String,org.jgroups.util.Promise,org.jgroups.ViewId)",
            "org.jgroups.protocols.RSVP$Entry$1:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void handleStartFlush(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.MERGE2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.UNICAST3:void handleXmitRequest(org.jgroups.Address,org.jgroups.util.SeqnoList)",
            "org.jgroups.protocols.MFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void sendJoinMessage(org.jgroups.Address,org.jgroups.Address,boolean,boolean)",
            "org.jgroups.protocols.pbcast.FLUSH:void rejectFlush(java.util.Collection,long)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryResponse(org.jgroups.Address,java.util.List,boolean,boolean,java.lang.String,org.jgroups.Address)",
            "org.jgroups.protocols.FRAG2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:void sendResponse(org.jgroups.Address,short)",
            "org.jgroups.protocols.FlowControl:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void retransmit(org.jgroups.util.SeqnoList,org.jgroups.Address,boolean)",
            "org.jgroups.protocols.UNICAST3:void sendAck(org.jgroups.Address,long,short)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void setDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.STABLE$StabilitySendTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:boolean setMergeId(org.jgroups.util.MergeId,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.NAKACK2:void sendXmitRsp(org.jgroups.Address,org.jgroups.Message)",
            "org.jgroups.protocols.FRAG2:void fragment(org.jgroups.Message)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.UFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.FD:void sendHeartbeatResponse(org.jgroups.Address)",
            "org.jgroups.protocols.TRACE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.BARRIER:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD$Monitor:void run()"
        ]
    },
    "org.jgroups.protocols.TP:void sendToSingleMember(org.jgroups.Address,byte[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.TP:void doSend(org.jgroups.util.Buffer,org.jgroups.Address,boolean)"
        ]
    },
    "org.jgroups.protocols.TP:void sendToAllPhysicalAddresses(byte[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.UDP:void sendMulticast(byte[],int,int)",
            "org.jgroups.protocols.BasicTCP:void sendMulticast(byte[],int,int)"
        ]
    },
    "org.jgroups.protocols.TUNNEL$StubReceiver:void fireSuspectEvent(org.jgroups.Address)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.TUNNEL$StubReceiver:void access$200(org.jgroups.protocols.TUNNEL$StubReceiver,org.jgroups.Address)"
        ]
    },
    "org.jgroups.protocols.TP:void init()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.BasicTCP:void init()",
            "org.jgroups.protocols.TUNNEL:void init()"
        ]
    },
    "org.jgroups.protocols.MERGE2$FindSubgroupsTask:void findAndNotify()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask$1:void run()",
            "org.jgroups.protocols.MERGE2$1:void run()",
            "org.jgroups.protocols.MERGE2$2:void run()",
            "org.jgroups.protocols.MERGE2:void sendMergeSolicitation()"
        ]
    },
    "org.jgroups.protocols.TP:void clearLogicalAddressCache()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.UUIDCacheClearTest:void clearCache(org.jgroups.JChannel[])"
        ]
    },
    "org.jgroups.protocols.TP:java.lang.Object handleDownEvent(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.TP:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.BasicTCP:java.lang.Object handleDownEvent(org.jgroups.Event)",
            "org.jgroups.protocols.TUNNEL:java.lang.Object handleDownEvent(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.TP:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.UDP:void start()",
            "org.jgroups.protocols.TCP_NIO:void start()",
            "org.jgroups.protocols.TCP:void start()"
        ]
    },
    "org.jgroups.protocols.TP:void removeLogicalAddressFromCache(org.jgroups.Address)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.TP:java.lang.Object handleDownEvent(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.TP:void evictLogicalAddressCache(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.TP:void evictLogicalAddressCache()"
        ]
    },
    "org.jgroups.protocols.pbcast.ClientGmsImpl:void joinInternal(org.jgroups.Address,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void joinWithStateTransfer(org.jgroups.Address,boolean)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void join(org.jgroups.Address,boolean)"
        ]
    },
    "org.jgroups.protocols.BPING:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.MPING:java.lang.Object up(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.MPING:void run()"
        ]
    },
    "org.jgroups.protocols.pbcast.FLUSH:void sendBlockUpToChannel()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.FLUSH:void onStartFlush(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object handleConnect(org.jgroups.Event,boolean)"
        ]
    },
    "org.jgroups.protocols.pbcast.FLUSH:void sendUnBlockUpToChannel()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.FLUSH:void onStopFlush()"
        ]
    },
    "org.jgroups.protocols.pbcast.GMS:void suspect(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.pbcast.GMS:boolean startFlush(org.jgroups.View,int,long,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.pbcast.GMS:boolean startFlush(org.jgroups.View)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void handleMembershipChange(java.util.Collection)",
            "org.jgroups.protocols.pbcast.Merger:void _handleMergeRequest(org.jgroups.Address,org.jgroups.util.MergeId,java.util.Collection)"
        ]
    },
    "org.jgroups.protocols.FD_ALL$TimeoutChecker:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.TimeScheduler2$RecurringTask:void run()",
            "org.jgroups.util.HashedTimingWheel$RecurringTask:void run()",
            "org.jgroups.util.TimeScheduler3$Task:void run()",
            "org.jgroups.util.DefaultTimeScheduler$RobustRunnable:void run()"
        ]
    },
    "org.jgroups.protocols.pbcast.ParticipantGmsImpl:void handleJoinResponse(org.jgroups.protocols.pbcast.JoinRsp)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.pbcast.ParticipantGmsImpl:void handleViewChange(org.jgroups.View,org.jgroups.util.Digest)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.pbcast.CoordGmsImpl:void handleViewChange(org.jgroups.View,org.jgroups.util.Digest)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.Util:void shutdown(org.jgroups.Channel)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)"
        ]
    },
    "org.jgroups.protocols.pbcast.Merger$MergeTask:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.pbcast.Merger:void handleMergeCancelled(org.jgroups.util.MergeId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void handleMergeCancelled(org.jgroups.util.MergeId)"
        ]
    },
    "org.jgroups.protocols.pbcast.CoordGmsImpl:void handleMembershipChange(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void suspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.GMS$ViewHandler:void process(java.util.List)"
        ]
    },
    "org.jgroups.protocols.pbcast.Merger:void handleMergeView(org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.ServerGmsImpl:void handleMergeView(org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)"
        ]
    },
    "org.jgroups.protocols.TP$BatchHandler:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.DirectExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jgroups.protocols.TP$4:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.DirectExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jgroups.protocols.TP$MyHandler:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.DirectExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.jgroups.util.DirectExecutor:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.TP:void receive(org.jgroups.Address,byte[],int,int)",
            "org.jgroups.protocols.pbcast.NAKACK2:void flushBecomeServerQueue()",
            "org.jgroups.protocols.TP:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.DAISYCHAIN:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK:void flushBecomeServerQueue()"
        ]
    },
    "org.jgroups.protocols.DISCARD:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.FD:java.lang.Object down(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.FD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onResume(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void handleFlushReconcile(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.FlowControl:void sendCreditRequest(org.jgroups.Address,java.lang.Long)",
            "org.jgroups.protocols.pbcast.ParticipantGmsImpl:void sendLeaveMessage(org.jgroups.Address,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE:void handleStabilityMessage(org.jgroups.util.Digest,org.jgroups.Address)",
            "org.jgroups.protocols.Discovery:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeCancelledMessage(java.util.Collection,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void joinInternal(org.jgroups.Address,boolean,boolean)",
            "org.jgroups.stack.ProtocolStack:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void mergeDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:java.util.List findAllViews()",
            "org.jgroups.protocols.pbcast.GmsImpl:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspend(java.util.List)",
            "org.jgroups.protocols.UNICAST3:void sendRequestForFirstSeqno(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery$2:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK$BroadcastTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void handleMembershipChange(java.util.Collection)",
            "org.jgroups.protocols.pbcast.GMS:void sendJoinResponse(org.jgroups.protocols.pbcast.JoinRsp,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.GMS:void sendViewAck(org.jgroups.Address)",
            "org.jgroups.stack.Protocol:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onStartFlush(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.Merger$MergeTask:boolean getMergeDataFromSubgroupCoordinators(java.util.Map,org.jgroups.util.MergeId,long)",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.pbcast.STABLE:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void fixDigests()",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.pbcast.FLUSH:void onFlushCompleted(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.Merger:void handleMergeView(org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeView(java.util.Collection,org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object handleConnect(org.jgroups.Event,boolean)",
            "org.jgroups.protocols.FD$BroadcastTask:void run()",
            "org.jgroups.protocols.UNICAST3:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery:void sendMcastDiscoveryRequest(org.jgroups.Message)",
            "org.jgroups.protocols.UNICAST3:void handleResendingOfFirstMessage(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE$1:void run()",
            "org.jgroups.protocols.pbcast.Merger:org.jgroups.util.Digest fetchDigestsFromAllMembersInSubPartition(java.util.List,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void sendLeaveResponses(java.util.Collection)",
            "org.jgroups.protocols.FD_SOCK:void sendIHaveSockMessage(org.jgroups.Address,org.jgroups.Address,org.jgroups.stack.IpAddress)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:java.util.List findInitialMembers(org.jgroups.util.Promise)",
            "org.jgroups.protocols.Discovery$1:void run()",
            "org.jgroups.protocols.DISCARD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void cancelMerge(org.jgroups.util.MergeId)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL$HeartbeatSender:void run()",
            "org.jgroups.protocols.FlowControl:void sendCredit(org.jgroups.Address,long)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeResponse(org.jgroups.Address,org.jgroups.View,org.jgroups.util.Digest,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.GMS:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.pbcast.NAKACK2:void send(org.jgroups.Event,org.jgroups.Message)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryRequest(java.lang.String,org.jgroups.util.Promise,org.jgroups.ViewId)",
            "org.jgroups.protocols.RSVP$Entry$1:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void handleStartFlush(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.MERGE2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.UNICAST3:void handleXmitRequest(org.jgroups.Address,org.jgroups.util.SeqnoList)",
            "org.jgroups.protocols.MFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void sendJoinMessage(org.jgroups.Address,org.jgroups.Address,boolean,boolean)",
            "org.jgroups.protocols.pbcast.FLUSH:void rejectFlush(java.util.Collection,long)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryResponse(org.jgroups.Address,java.util.List,boolean,boolean,java.lang.String,org.jgroups.Address)",
            "org.jgroups.protocols.FRAG2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:void sendResponse(org.jgroups.Address,short)",
            "org.jgroups.protocols.FlowControl:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void retransmit(org.jgroups.util.SeqnoList,org.jgroups.Address,boolean)",
            "org.jgroups.protocols.UNICAST3:void sendAck(org.jgroups.Address,long,short)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void setDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.STABLE$StabilitySendTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:boolean setMergeId(org.jgroups.util.MergeId,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.NAKACK2:void sendXmitRsp(org.jgroups.Address,org.jgroups.Message)",
            "org.jgroups.protocols.FRAG2:void fragment(org.jgroups.Message)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.UFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.FD:void sendHeartbeatResponse(org.jgroups.Address)",
            "org.jgroups.protocols.TRACE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.BARRIER:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD$Monitor:void run()"
        ]
    },
    "org.jgroups.protocols.pbcast.FLUSH:void onResume(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.pbcast.FLUSH:void handleFlushReconcile(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.FlowControl:void sendCreditRequest(org.jgroups.Address,java.lang.Long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.UFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.MFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)"
        ]
    },
    "org.jgroups.protocols.pbcast.ParticipantGmsImpl:void sendLeaveMessage(org.jgroups.Address,org.jgroups.Address)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.ParticipantGmsImpl:void leave(org.jgroups.Address)"
        ]
    },
    "org.jgroups.protocols.pbcast.STABLE:void handleStabilityMessage(org.jgroups.util.Digest,org.jgroups.Address)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.STABLE:void handleUpEvent(org.jgroups.protocols.pbcast.STABLE$StableHeader,org.jgroups.Address)"
        ]
    },
    "org.jgroups.protocols.Discovery:java.lang.Object down(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.FLUSH:void handleFlushReconcile(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.FlowControl:void sendCreditRequest(org.jgroups.Address,java.lang.Long)",
            "org.jgroups.protocols.pbcast.ParticipantGmsImpl:void sendLeaveMessage(org.jgroups.Address,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void joinInternal(org.jgroups.Address,boolean,boolean)",
            "org.jgroups.protocols.pbcast.GMS:void mergeDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.GmsImpl:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspend(java.util.List)",
            "org.jgroups.protocols.UNICAST3:void sendRequestForFirstSeqno(org.jgroups.Address)",
            "org.jgroups.protocols.Discovery$2:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspect(org.jgroups.Address)",
            "org.jgroups.protocols.TCPPING:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.FD_SOCK$BroadcastTask:void run()",
            "org.jgroups.protocols.Discovery:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void handleMembershipChange(java.util.Collection)",
            "org.jgroups.protocols.pbcast.GMS:void sendJoinResponse(org.jgroups.protocols.pbcast.JoinRsp,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.stack.Protocol:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onStartFlush(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void fixDigests()",
            "org.jgroups.protocols.pbcast.Merger:void handleMergeView(org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeView(java.util.Collection,org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object handleConnect(org.jgroups.Event,boolean)",
            "org.jgroups.protocols.Discovery:void sendMcastDiscoveryRequest(org.jgroups.Message)",
            "org.jgroups.protocols.UNICAST3:void handleResendingOfFirstMessage(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK:void sendIHaveSockMessage(org.jgroups.Address,org.jgroups.Address,org.jgroups.stack.IpAddress)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeResponse(org.jgroups.Address,org.jgroups.View,org.jgroups.util.Digest,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.GMS:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.Discovery:void sendDiscoveryRequest(java.lang.String,org.jgroups.util.Promise,org.jgroups.ViewId)",
            "org.jgroups.protocols.pbcast.FLUSH:void handleStartFlush(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.UNICAST3:void handleXmitRequest(org.jgroups.Address,org.jgroups.util.SeqnoList)",
            "org.jgroups.protocols.MFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.UNICAST3:void sendAck(org.jgroups.Address,long,short)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.STABLE$StabilitySendTask:void run()",
            "org.jgroups.protocols.FILE_PING:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:boolean setMergeId(org.jgroups.util.MergeId,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.NAKACK2:void sendXmitRsp(org.jgroups.Address,org.jgroups.Message)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.FD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onResume(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.STABLE:void handleStabilityMessage(org.jgroups.util.Digest,org.jgroups.Address)",
            "org.jgroups.protocols.Discovery:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeCancelledMessage(java.util.Collection,org.jgroups.util.MergeId)",
            "org.jgroups.stack.ProtocolStack:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:java.util.List findAllViews()",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.GMS:void sendViewAck(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.Merger$MergeTask:boolean getMergeDataFromSubgroupCoordinators(java.util.Map,org.jgroups.util.MergeId,long)",
            "org.jgroups.protocols.pbcast.STABLE:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.pbcast.FLUSH:void onFlushCompleted(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.FD$BroadcastTask:void run()",
            "org.jgroups.protocols.UNICAST3:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.STABLE$1:void run()",
            "org.jgroups.protocols.pbcast.Merger:org.jgroups.util.Digest fetchDigestsFromAllMembersInSubPartition(java.util.List,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void sendLeaveResponses(java.util.Collection)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:java.util.List findInitialMembers(org.jgroups.util.Promise)",
            "org.jgroups.protocols.Discovery$1:void run()",
            "org.jgroups.stack.RouterStubManager$1:void run()",
            "org.jgroups.protocols.DISCARD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void cancelMerge(org.jgroups.util.MergeId)",
            "org.jgroups.protocols.FD_ALL$HeartbeatSender:void run()",
            "org.jgroups.protocols.FlowControl:void sendCredit(org.jgroups.Address,long)",
            "org.jgroups.protocols.pbcast.NAKACK2:void send(org.jgroups.Event,org.jgroups.Message)",
            "org.jgroups.protocols.RSVP$Entry$1:void run()",
            "org.jgroups.protocols.MERGE2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.TCPGOSSIP:java.util.Collection fetchClusterMembers(java.lang.String)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void sendJoinMessage(org.jgroups.Address,org.jgroups.Address,boolean,boolean)",
            "org.jgroups.protocols.pbcast.FLUSH:void rejectFlush(java.util.Collection,long)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryResponse(org.jgroups.Address,java.util.List,boolean,boolean,java.lang.String,org.jgroups.Address)",
            "org.jgroups.protocols.FRAG2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:void sendResponse(org.jgroups.Address,short)",
            "org.jgroups.protocols.FlowControl:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void retransmit(org.jgroups.util.SeqnoList,org.jgroups.Address,boolean)",
            "org.jgroups.protocols.pbcast.GMS:void setDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.FRAG2:void fragment(org.jgroups.Message)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.UFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.FD:void sendHeartbeatResponse(org.jgroups.Address)",
            "org.jgroups.protocols.TRACE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.BARRIER:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD$Monitor:void run()"
        ]
    },
    "org.jgroups.protocols.pbcast.Merger:void sendMergeCancelledMessage(java.util.Collection,org.jgroups.util.MergeId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.Merger:void access$200(org.jgroups.protocols.pbcast.Merger,java.util.Collection,org.jgroups.util.MergeId)"
        ]
    },
    "org.jgroups.stack.ProtocolStack:java.lang.Object down(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.JChannel:java.lang.Object down(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.pbcast.GMS:void mergeDigest(org.jgroups.util.Digest)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)"
        ]
    },
    "org.jgroups.protocols.MERGE2$FindSubgroupsTask:java.util.List findAllViews()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:void _findAndNotify()"
        ]
    },
    "org.jgroups.protocols.pbcast.GmsImpl:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.pbcast.FLUSH:void onSuspend(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void startFlush(java.util.List)"
        ]
    },
    "org.jgroups.protocols.UNICAST3:void sendRequestForFirstSeqno(org.jgroups.Address)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.UNICAST3:org.jgroups.protocols.UNICAST3$ReceiverEntry getReceiverEntry(org.jgroups.Address,long,boolean,short)"
        ]
    },
    "org.jgroups.protocols.pbcast.GMS:java.lang.Object down(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.FD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onResume(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void handleFlushReconcile(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.FlowControl:void sendCreditRequest(org.jgroups.Address,java.lang.Long)",
            "org.jgroups.protocols.pbcast.ParticipantGmsImpl:void sendLeaveMessage(org.jgroups.Address,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE:void handleStabilityMessage(org.jgroups.util.Digest,org.jgroups.Address)",
            "org.jgroups.protocols.Discovery:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeCancelledMessage(java.util.Collection,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void joinInternal(org.jgroups.Address,boolean,boolean)",
            "org.jgroups.stack.ProtocolStack:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void mergeDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:java.util.List findAllViews()",
            "org.jgroups.protocols.pbcast.GmsImpl:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspend(java.util.List)",
            "org.jgroups.protocols.UNICAST3:void sendRequestForFirstSeqno(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery$2:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK$BroadcastTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void handleMembershipChange(java.util.Collection)",
            "org.jgroups.protocols.pbcast.GMS:void sendJoinResponse(org.jgroups.protocols.pbcast.JoinRsp,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.GMS:void sendViewAck(org.jgroups.Address)",
            "org.jgroups.stack.Protocol:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onStartFlush(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.Merger$MergeTask:boolean getMergeDataFromSubgroupCoordinators(java.util.Map,org.jgroups.util.MergeId,long)",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.pbcast.STABLE:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void fixDigests()",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.pbcast.FLUSH:void onFlushCompleted(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.Merger:void handleMergeView(org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeView(java.util.Collection,org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object handleConnect(org.jgroups.Event,boolean)",
            "org.jgroups.protocols.FD$BroadcastTask:void run()",
            "org.jgroups.protocols.UNICAST3:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery:void sendMcastDiscoveryRequest(org.jgroups.Message)",
            "org.jgroups.protocols.UNICAST3:void handleResendingOfFirstMessage(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE$1:void run()",
            "org.jgroups.protocols.pbcast.Merger:org.jgroups.util.Digest fetchDigestsFromAllMembersInSubPartition(java.util.List,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void sendLeaveResponses(java.util.Collection)",
            "org.jgroups.protocols.FD_SOCK:void sendIHaveSockMessage(org.jgroups.Address,org.jgroups.Address,org.jgroups.stack.IpAddress)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:java.util.List findInitialMembers(org.jgroups.util.Promise)",
            "org.jgroups.protocols.Discovery$1:void run()",
            "org.jgroups.protocols.DISCARD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void cancelMerge(org.jgroups.util.MergeId)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL$HeartbeatSender:void run()",
            "org.jgroups.protocols.FlowControl:void sendCredit(org.jgroups.Address,long)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeResponse(org.jgroups.Address,org.jgroups.View,org.jgroups.util.Digest,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.GMS:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.pbcast.NAKACK2:void send(org.jgroups.Event,org.jgroups.Message)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryRequest(java.lang.String,org.jgroups.util.Promise,org.jgroups.ViewId)",
            "org.jgroups.protocols.RSVP$Entry$1:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void handleStartFlush(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.MERGE2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.UNICAST3:void handleXmitRequest(org.jgroups.Address,org.jgroups.util.SeqnoList)",
            "org.jgroups.protocols.MFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void sendJoinMessage(org.jgroups.Address,org.jgroups.Address,boolean,boolean)",
            "org.jgroups.protocols.pbcast.FLUSH:void rejectFlush(java.util.Collection,long)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryResponse(org.jgroups.Address,java.util.List,boolean,boolean,java.lang.String,org.jgroups.Address)",
            "org.jgroups.protocols.FRAG2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:void sendResponse(org.jgroups.Address,short)",
            "org.jgroups.protocols.FlowControl:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void retransmit(org.jgroups.util.SeqnoList,org.jgroups.Address,boolean)",
            "org.jgroups.protocols.UNICAST3:void sendAck(org.jgroups.Address,long,short)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void setDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.STABLE$StabilitySendTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:boolean setMergeId(org.jgroups.util.MergeId,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.NAKACK2:void sendXmitRsp(org.jgroups.Address,org.jgroups.Message)",
            "org.jgroups.protocols.FRAG2:void fragment(org.jgroups.Message)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.UFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.FD:void sendHeartbeatResponse(org.jgroups.Address)",
            "org.jgroups.protocols.TRACE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.BARRIER:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD$Monitor:void run()"
        ]
    },
    "org.jgroups.protocols.Discovery$2:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.TimeScheduler2$MyTask:void run()",
            "org.jgroups.util.HashedTimingWheel$MyTask:void run()",
            "org.jgroups.util.TimeScheduler3$Task:void run()"
        ]
    },
    "org.jgroups.protocols.pbcast.FLUSH:void onSuspect(org.jgroups.Address)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.FD_SOCK$BroadcastTask:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.TimeScheduler2$RecurringTask:void run()",
            "org.jgroups.util.HashedTimingWheel$RecurringTask:void run()",
            "org.jgroups.util.TimeScheduler3$Task:void run()",
            "org.jgroups.util.DefaultTimeScheduler$RobustRunnable:void run()"
        ]
    },
    "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object down(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.FD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onResume(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void handleFlushReconcile(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.FlowControl:void sendCreditRequest(org.jgroups.Address,java.lang.Long)",
            "org.jgroups.protocols.pbcast.ParticipantGmsImpl:void sendLeaveMessage(org.jgroups.Address,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE:void handleStabilityMessage(org.jgroups.util.Digest,org.jgroups.Address)",
            "org.jgroups.protocols.Discovery:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeCancelledMessage(java.util.Collection,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void joinInternal(org.jgroups.Address,boolean,boolean)",
            "org.jgroups.stack.ProtocolStack:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void mergeDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:java.util.List findAllViews()",
            "org.jgroups.protocols.pbcast.GmsImpl:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspend(java.util.List)",
            "org.jgroups.protocols.UNICAST3:void sendRequestForFirstSeqno(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery$2:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK$BroadcastTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void handleMembershipChange(java.util.Collection)",
            "org.jgroups.protocols.pbcast.GMS:void sendJoinResponse(org.jgroups.protocols.pbcast.JoinRsp,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.GMS:void sendViewAck(org.jgroups.Address)",
            "org.jgroups.stack.Protocol:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onStartFlush(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.Merger$MergeTask:boolean getMergeDataFromSubgroupCoordinators(java.util.Map,org.jgroups.util.MergeId,long)",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.pbcast.STABLE:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void fixDigests()",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.pbcast.FLUSH:void onFlushCompleted(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.Merger:void handleMergeView(org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeView(java.util.Collection,org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object handleConnect(org.jgroups.Event,boolean)",
            "org.jgroups.protocols.FD$BroadcastTask:void run()",
            "org.jgroups.protocols.UNICAST3:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery:void sendMcastDiscoveryRequest(org.jgroups.Message)",
            "org.jgroups.protocols.UNICAST3:void handleResendingOfFirstMessage(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE$1:void run()",
            "org.jgroups.protocols.pbcast.Merger:org.jgroups.util.Digest fetchDigestsFromAllMembersInSubPartition(java.util.List,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void sendLeaveResponses(java.util.Collection)",
            "org.jgroups.protocols.FD_SOCK:void sendIHaveSockMessage(org.jgroups.Address,org.jgroups.Address,org.jgroups.stack.IpAddress)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:java.util.List findInitialMembers(org.jgroups.util.Promise)",
            "org.jgroups.protocols.Discovery$1:void run()",
            "org.jgroups.protocols.DISCARD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void cancelMerge(org.jgroups.util.MergeId)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL$HeartbeatSender:void run()",
            "org.jgroups.protocols.FlowControl:void sendCredit(org.jgroups.Address,long)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeResponse(org.jgroups.Address,org.jgroups.View,org.jgroups.util.Digest,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.GMS:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.pbcast.NAKACK2:void send(org.jgroups.Event,org.jgroups.Message)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryRequest(java.lang.String,org.jgroups.util.Promise,org.jgroups.ViewId)",
            "org.jgroups.protocols.RSVP$Entry$1:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void handleStartFlush(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.MERGE2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.UNICAST3:void handleXmitRequest(org.jgroups.Address,org.jgroups.util.SeqnoList)",
            "org.jgroups.protocols.MFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void sendJoinMessage(org.jgroups.Address,org.jgroups.Address,boolean,boolean)",
            "org.jgroups.protocols.pbcast.FLUSH:void rejectFlush(java.util.Collection,long)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryResponse(org.jgroups.Address,java.util.List,boolean,boolean,java.lang.String,org.jgroups.Address)",
            "org.jgroups.protocols.FRAG2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:void sendResponse(org.jgroups.Address,short)",
            "org.jgroups.protocols.FlowControl:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void retransmit(org.jgroups.util.SeqnoList,org.jgroups.Address,boolean)",
            "org.jgroups.protocols.UNICAST3:void sendAck(org.jgroups.Address,long,short)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void setDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.STABLE$StabilitySendTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:boolean setMergeId(org.jgroups.util.MergeId,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.NAKACK2:void sendXmitRsp(org.jgroups.Address,org.jgroups.Message)",
            "org.jgroups.protocols.FRAG2:void fragment(org.jgroups.Message)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.UFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.FD:void sendHeartbeatResponse(org.jgroups.Address)",
            "org.jgroups.protocols.TRACE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.BARRIER:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD$Monitor:void run()"
        ]
    },
    "org.jgroups.protocols.pbcast.GMS:void sendJoinResponse(org.jgroups.protocols.pbcast.JoinRsp,org.jgroups.Address)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void handleMembershipChange(java.util.Collection)"
        ]
    },
    "org.jgroups.protocols.pbcast.GMS:void sendViewAck(org.jgroups.Address)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.stack.Protocol:java.lang.Object down(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.FLUSH:void handleFlushReconcile(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.FlowControl:void sendCreditRequest(org.jgroups.Address,java.lang.Long)",
            "org.jgroups.protocols.pbcast.ParticipantGmsImpl:void sendLeaveMessage(org.jgroups.Address,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void joinInternal(org.jgroups.Address,boolean,boolean)",
            "org.jgroups.protocols.pbcast.GMS:void mergeDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.GmsImpl:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspend(java.util.List)",
            "org.jgroups.protocols.UNICAST3:void sendRequestForFirstSeqno(org.jgroups.Address)",
            "org.jgroups.util.ForwardQueue:void flushMessagesInForwardTable(org.jgroups.Address)",
            "org.jgroups.protocols.Discovery$2:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK$BroadcastTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void handleMembershipChange(java.util.Collection)",
            "org.jgroups.protocols.pbcast.GMS:void sendJoinResponse(org.jgroups.protocols.pbcast.JoinRsp,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.stack.Protocol:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.TP$ProtocolAdapter:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onStartFlush(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void fixDigests()",
            "org.jgroups.protocols.pbcast.Merger:void handleMergeView(org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeView(java.util.Collection,org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object handleConnect(org.jgroups.Event,boolean)",
            "org.jgroups.protocols.Discovery:void sendMcastDiscoveryRequest(org.jgroups.Message)",
            "org.jgroups.protocols.UNICAST3:void handleResendingOfFirstMessage(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK:void sendIHaveSockMessage(org.jgroups.Address,org.jgroups.Address,org.jgroups.stack.IpAddress)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeResponse(org.jgroups.Address,org.jgroups.View,org.jgroups.util.Digest,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.GMS:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.Discovery:void sendDiscoveryRequest(java.lang.String,org.jgroups.util.Promise,org.jgroups.ViewId)",
            "org.jgroups.blocks.RequestCorrelator:void sendResponse(org.jgroups.Message,long,boolean)",
            "org.jgroups.protocols.pbcast.FLUSH:void handleStartFlush(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.UNICAST3:void handleXmitRequest(org.jgroups.Address,org.jgroups.util.SeqnoList)",
            "org.jgroups.protocols.MFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.UNICAST3:void sendAck(org.jgroups.Address,long,short)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.STABLE$StabilitySendTask:void run()",
            "org.jgroups.blocks.RequestCorrelator:void sendUnicastRequest(long,org.jgroups.Address,org.jgroups.Message,org.jgroups.blocks.RspCollector)",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:boolean setMergeId(org.jgroups.util.MergeId,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.NAKACK2:void sendXmitRsp(org.jgroups.Address,org.jgroups.Message)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.FD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onResume(org.jgroups.Event)",
            "org.jgroups.util.ForwardQueue:void send(long,org.jgroups.Message)",
            "org.jgroups.protocols.pbcast.STABLE:void handleStabilityMessage(org.jgroups.util.Digest,org.jgroups.Address)",
            "org.jgroups.protocols.Discovery:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeCancelledMessage(java.util.Collection,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.DISCARD_PAYLOAD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.stack.ProtocolStack:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:java.util.List findAllViews()",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.tests.helpers.SequencerFailoverTestHelper$1:void run()",
            "org.jgroups.protocols.pbcast.GMS:void sendViewAck(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.Merger$MergeTask:boolean getMergeDataFromSubgroupCoordinators(java.util.Map,org.jgroups.util.MergeId,long)",
            "org.jgroups.protocols.pbcast.STABLE:org.jgroups.util.Digest getDigest()",
            "org.jgroups.blocks.RequestCorrelator:void sendRequest(long,java.util.Collection,org.jgroups.Message,org.jgroups.blocks.RspCollector,org.jgroups.blocks.RequestOptions)",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.pbcast.FLUSH:void onFlushCompleted(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.FD$BroadcastTask:void run()",
            "org.jgroups.protocols.UNICAST3:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.STABLE$1:void run()",
            "org.jgroups.protocols.pbcast.Merger:org.jgroups.util.Digest fetchDigestsFromAllMembersInSubPartition(java.util.List,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void sendLeaveResponses(java.util.Collection)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:java.util.List findInitialMembers(org.jgroups.util.Promise)",
            "org.jgroups.protocols.Discovery$1:void run()",
            "org.jgroups.stack.RouterStubManager$1:void run()",
            "org.jgroups.protocols.DISCARD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void cancelMerge(org.jgroups.util.MergeId)",
            "org.jgroups.protocols.FD_ALL$HeartbeatSender:void run()",
            "org.jgroups.protocols.FlowControl:void sendCredit(org.jgroups.Address,long)",
            "org.jgroups.protocols.pbcast.NAKACK2:void send(org.jgroups.Event,org.jgroups.Message)",
            "org.jgroups.protocols.RSVP$Entry$1:void run()",
            "org.jgroups.protocols.MERGE2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void sendJoinMessage(org.jgroups.Address,org.jgroups.Address,boolean,boolean)",
            "org.jgroups.protocols.pbcast.FLUSH:void rejectFlush(java.util.Collection,long)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryResponse(org.jgroups.Address,java.util.List,boolean,boolean,java.lang.String,org.jgroups.Address)",
            "org.jgroups.protocols.FRAG2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:void sendResponse(org.jgroups.Address,short)",
            "org.jgroups.protocols.FlowControl:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void retransmit(org.jgroups.util.SeqnoList,org.jgroups.Address,boolean)",
            "org.jgroups.protocols.pbcast.GMS:void setDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.FRAG2:void fragment(org.jgroups.Message)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.UFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.FD:void sendHeartbeatResponse(org.jgroups.Address)",
            "org.jgroups.protocols.TRACE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.BARRIER:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD$Monitor:void run()"
        ]
    },
    "org.jgroups.protocols.pbcast.FLUSH:void onStartFlush(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.FLUSH:void handleStartFlush(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)"
        ]
    },
    "org.jgroups.protocols.pbcast.Merger$MergeTask:boolean getMergeDataFromSubgroupCoordinators(java.util.Map,org.jgroups.util.MergeId,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.Merger$MergeTask:void _run(org.jgroups.util.MergeId,java.util.Collection)"
        ]
    },
    "org.jgroups.protocols.pbcast.STABLE:org.jgroups.util.Digest getDigest()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.STABLE:void runMessageGarbageCollection()",
            "org.jgroups.protocols.pbcast.STABLE$StableTask:void run()",
            "org.jgroups.protocols.pbcast.STABLE:void handleRegularMessage(org.jgroups.Message)",
            "org.jgroups.protocols.pbcast.STABLE:void resetDigest()",
            "org.jgroups.protocols.pbcast.STABLE:void up(org.jgroups.util.MessageBatch)"
        ]
    },
    "org.jgroups.protocols.pbcast.Merger:void fixDigests()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void fixDigests()"
        ]
    },
    "org.jgroups.protocols.pbcast.FLUSH:void onFlushCompleted(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.pbcast.Merger:void sendMergeView(java.util.Collection,org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.Merger:void access$500(org.jgroups.protocols.pbcast.Merger,java.util.Collection,org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)"
        ]
    },
    "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspect(org.jgroups.Address)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object handleConnect(org.jgroups.Event,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object down(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.FD$BroadcastTask:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.TimeScheduler2$RecurringTask:void run()",
            "org.jgroups.util.HashedTimingWheel$RecurringTask:void run()",
            "org.jgroups.util.TimeScheduler3$Task:void run()",
            "org.jgroups.util.DefaultTimeScheduler$RobustRunnable:void run()"
        ]
    },
    "org.jgroups.protocols.UNICAST3:java.lang.Object down(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.FD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onResume(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void handleFlushReconcile(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.FlowControl:void sendCreditRequest(org.jgroups.Address,java.lang.Long)",
            "org.jgroups.protocols.pbcast.ParticipantGmsImpl:void sendLeaveMessage(org.jgroups.Address,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE:void handleStabilityMessage(org.jgroups.util.Digest,org.jgroups.Address)",
            "org.jgroups.protocols.Discovery:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeCancelledMessage(java.util.Collection,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void joinInternal(org.jgroups.Address,boolean,boolean)",
            "org.jgroups.stack.ProtocolStack:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void mergeDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:java.util.List findAllViews()",
            "org.jgroups.protocols.pbcast.GmsImpl:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspend(java.util.List)",
            "org.jgroups.protocols.UNICAST3:void sendRequestForFirstSeqno(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery$2:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK$BroadcastTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void handleMembershipChange(java.util.Collection)",
            "org.jgroups.protocols.pbcast.GMS:void sendJoinResponse(org.jgroups.protocols.pbcast.JoinRsp,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.GMS:void sendViewAck(org.jgroups.Address)",
            "org.jgroups.stack.Protocol:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onStartFlush(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.Merger$MergeTask:boolean getMergeDataFromSubgroupCoordinators(java.util.Map,org.jgroups.util.MergeId,long)",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.pbcast.STABLE:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void fixDigests()",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.pbcast.FLUSH:void onFlushCompleted(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.Merger:void handleMergeView(org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeView(java.util.Collection,org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object handleConnect(org.jgroups.Event,boolean)",
            "org.jgroups.protocols.FD$BroadcastTask:void run()",
            "org.jgroups.protocols.UNICAST3:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery:void sendMcastDiscoveryRequest(org.jgroups.Message)",
            "org.jgroups.protocols.UNICAST3:void handleResendingOfFirstMessage(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE$1:void run()",
            "org.jgroups.protocols.pbcast.Merger:org.jgroups.util.Digest fetchDigestsFromAllMembersInSubPartition(java.util.List,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void sendLeaveResponses(java.util.Collection)",
            "org.jgroups.protocols.FD_SOCK:void sendIHaveSockMessage(org.jgroups.Address,org.jgroups.Address,org.jgroups.stack.IpAddress)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:java.util.List findInitialMembers(org.jgroups.util.Promise)",
            "org.jgroups.protocols.Discovery$1:void run()",
            "org.jgroups.protocols.DISCARD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void cancelMerge(org.jgroups.util.MergeId)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL$HeartbeatSender:void run()",
            "org.jgroups.protocols.FlowControl:void sendCredit(org.jgroups.Address,long)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeResponse(org.jgroups.Address,org.jgroups.View,org.jgroups.util.Digest,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.GMS:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.pbcast.NAKACK2:void send(org.jgroups.Event,org.jgroups.Message)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryRequest(java.lang.String,org.jgroups.util.Promise,org.jgroups.ViewId)",
            "org.jgroups.protocols.RSVP$Entry$1:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void handleStartFlush(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.MERGE2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.UNICAST3:void handleXmitRequest(org.jgroups.Address,org.jgroups.util.SeqnoList)",
            "org.jgroups.protocols.MFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void sendJoinMessage(org.jgroups.Address,org.jgroups.Address,boolean,boolean)",
            "org.jgroups.protocols.pbcast.FLUSH:void rejectFlush(java.util.Collection,long)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryResponse(org.jgroups.Address,java.util.List,boolean,boolean,java.lang.String,org.jgroups.Address)",
            "org.jgroups.protocols.FRAG2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:void sendResponse(org.jgroups.Address,short)",
            "org.jgroups.protocols.FlowControl:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void retransmit(org.jgroups.util.SeqnoList,org.jgroups.Address,boolean)",
            "org.jgroups.protocols.UNICAST3:void sendAck(org.jgroups.Address,long,short)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void setDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.STABLE$StabilitySendTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:boolean setMergeId(org.jgroups.util.MergeId,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.NAKACK2:void sendXmitRsp(org.jgroups.Address,org.jgroups.Message)",
            "org.jgroups.protocols.FRAG2:void fragment(org.jgroups.Message)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.UFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.FD:void sendHeartbeatResponse(org.jgroups.Address)",
            "org.jgroups.protocols.TRACE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.BARRIER:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD$Monitor:void run()"
        ]
    },
    "org.jgroups.protocols.Discovery:void sendMcastDiscoveryRequest(org.jgroups.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.Discovery:void sendDiscoveryRequest(java.lang.String,org.jgroups.util.Promise,org.jgroups.ViewId)"
        ]
    },
    "org.jgroups.protocols.UNICAST3:void handleResendingOfFirstMessage(org.jgroups.Address)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.UNICAST3:void handleUpEvent(org.jgroups.Address,org.jgroups.Message,org.jgroups.protocols.UNICAST3$Header)"
        ]
    },
    "org.jgroups.protocols.FD_SOCK:java.lang.Object down(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.FD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onResume(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void handleFlushReconcile(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.FlowControl:void sendCreditRequest(org.jgroups.Address,java.lang.Long)",
            "org.jgroups.protocols.pbcast.ParticipantGmsImpl:void sendLeaveMessage(org.jgroups.Address,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE:void handleStabilityMessage(org.jgroups.util.Digest,org.jgroups.Address)",
            "org.jgroups.protocols.Discovery:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeCancelledMessage(java.util.Collection,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void joinInternal(org.jgroups.Address,boolean,boolean)",
            "org.jgroups.stack.ProtocolStack:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void mergeDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:java.util.List findAllViews()",
            "org.jgroups.protocols.pbcast.GmsImpl:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspend(java.util.List)",
            "org.jgroups.protocols.UNICAST3:void sendRequestForFirstSeqno(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery$2:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK$BroadcastTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void handleMembershipChange(java.util.Collection)",
            "org.jgroups.protocols.pbcast.GMS:void sendJoinResponse(org.jgroups.protocols.pbcast.JoinRsp,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.GMS:void sendViewAck(org.jgroups.Address)",
            "org.jgroups.stack.Protocol:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onStartFlush(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.Merger$MergeTask:boolean getMergeDataFromSubgroupCoordinators(java.util.Map,org.jgroups.util.MergeId,long)",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.pbcast.STABLE:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void fixDigests()",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.pbcast.FLUSH:void onFlushCompleted(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.Merger:void handleMergeView(org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeView(java.util.Collection,org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object handleConnect(org.jgroups.Event,boolean)",
            "org.jgroups.protocols.FD$BroadcastTask:void run()",
            "org.jgroups.protocols.UNICAST3:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery:void sendMcastDiscoveryRequest(org.jgroups.Message)",
            "org.jgroups.protocols.UNICAST3:void handleResendingOfFirstMessage(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE$1:void run()",
            "org.jgroups.protocols.pbcast.Merger:org.jgroups.util.Digest fetchDigestsFromAllMembersInSubPartition(java.util.List,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void sendLeaveResponses(java.util.Collection)",
            "org.jgroups.protocols.FD_SOCK:void sendIHaveSockMessage(org.jgroups.Address,org.jgroups.Address,org.jgroups.stack.IpAddress)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:java.util.List findInitialMembers(org.jgroups.util.Promise)",
            "org.jgroups.protocols.Discovery$1:void run()",
            "org.jgroups.protocols.DISCARD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void cancelMerge(org.jgroups.util.MergeId)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL$HeartbeatSender:void run()",
            "org.jgroups.protocols.FlowControl:void sendCredit(org.jgroups.Address,long)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeResponse(org.jgroups.Address,org.jgroups.View,org.jgroups.util.Digest,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.GMS:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.pbcast.NAKACK2:void send(org.jgroups.Event,org.jgroups.Message)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryRequest(java.lang.String,org.jgroups.util.Promise,org.jgroups.ViewId)",
            "org.jgroups.protocols.RSVP$Entry$1:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void handleStartFlush(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.MERGE2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.UNICAST3:void handleXmitRequest(org.jgroups.Address,org.jgroups.util.SeqnoList)",
            "org.jgroups.protocols.MFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void sendJoinMessage(org.jgroups.Address,org.jgroups.Address,boolean,boolean)",
            "org.jgroups.protocols.pbcast.FLUSH:void rejectFlush(java.util.Collection,long)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryResponse(org.jgroups.Address,java.util.List,boolean,boolean,java.lang.String,org.jgroups.Address)",
            "org.jgroups.protocols.FRAG2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:void sendResponse(org.jgroups.Address,short)",
            "org.jgroups.protocols.FlowControl:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void retransmit(org.jgroups.util.SeqnoList,org.jgroups.Address,boolean)",
            "org.jgroups.protocols.UNICAST3:void sendAck(org.jgroups.Address,long,short)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void setDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.STABLE$StabilitySendTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:boolean setMergeId(org.jgroups.util.MergeId,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.NAKACK2:void sendXmitRsp(org.jgroups.Address,org.jgroups.Message)",
            "org.jgroups.protocols.FRAG2:void fragment(org.jgroups.Message)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.UFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.FD:void sendHeartbeatResponse(org.jgroups.Address)",
            "org.jgroups.protocols.TRACE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.BARRIER:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD$Monitor:void run()"
        ]
    },
    "org.jgroups.protocols.pbcast.Merger:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.Merger:void handleMergeRequest(org.jgroups.Address,org.jgroups.util.MergeId,java.util.Collection)"
        ]
    },
    "org.jgroups.protocols.pbcast.STABLE$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.TimeScheduler2$MyTask:void run()",
            "org.jgroups.util.HashedTimingWheel$MyTask:void run()",
            "org.jgroups.util.TimeScheduler3$Task:void run()"
        ]
    },
    "org.jgroups.protocols.pbcast.Merger:org.jgroups.util.Digest fetchDigestsFromAllMembersInSubPartition(java.util.List,org.jgroups.util.MergeId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.Merger:void fixDigests()",
            "org.jgroups.protocols.pbcast.Merger:void _handleMergeRequest(org.jgroups.Address,org.jgroups.util.MergeId,java.util.Collection)"
        ]
    },
    "org.jgroups.protocols.pbcast.CoordGmsImpl:void sendLeaveResponses(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void handleMembershipChange(java.util.Collection)"
        ]
    },
    "org.jgroups.protocols.FD_SOCK:void sendIHaveSockMessage(org.jgroups.Address,org.jgroups.Address,org.jgroups.stack.IpAddress)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.FD_SOCK:void run()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.pbcast.ClientGmsImpl:java.util.List findInitialMembers(org.jgroups.util.Promise)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void joinInternal(org.jgroups.Address,boolean,boolean)"
        ]
    },
    "org.jgroups.protocols.Discovery$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.TimeScheduler2$MyTask:void run()",
            "org.jgroups.util.HashedTimingWheel$MyTask:void run()",
            "org.jgroups.util.TimeScheduler3$Task:void run()"
        ]
    },
    "org.jgroups.protocols.pbcast.Merger:void cancelMerge(org.jgroups.util.MergeId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.Merger:void handleMergeRequest(org.jgroups.Address,org.jgroups.util.MergeId,java.util.Collection)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void init()",
            "org.jgroups.protocols.pbcast.Merger$MergeTask:void run()",
            "org.jgroups.protocols.pbcast.Merger:void handleMergeView(org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.Merger:void forceCancelMerge()",
            "org.jgroups.protocols.pbcast.Merger:void handleMergeCancelled(org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.Merger$MergeKiller:void run()"
        ]
    },
    "org.jgroups.protocols.FD_ALL$HeartbeatSender:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.TimeScheduler2$RecurringTask:void run()",
            "org.jgroups.util.HashedTimingWheel$RecurringTask:void run()",
            "org.jgroups.util.TimeScheduler3$Task:void run()",
            "org.jgroups.util.DefaultTimeScheduler$RobustRunnable:void run()"
        ]
    },
    "org.jgroups.protocols.FlowControl:void sendCredit(org.jgroups.Address,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.FlowControl:void handleCreditRequest(java.util.Map,org.jgroups.Address,long)",
            "org.jgroups.protocols.FlowControl:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FlowControl:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.pbcast.Merger:void sendMergeResponse(org.jgroups.Address,org.jgroups.View,org.jgroups.util.Digest,org.jgroups.util.MergeId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.Merger:void _handleMergeRequest(org.jgroups.Address,org.jgroups.util.MergeId,java.util.Collection)"
        ]
    },
    "org.jgroups.protocols.pbcast.GMS:org.jgroups.util.Digest getDigest()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.GMS:org.jgroups.util.Tuple getViewAndDigest()",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void handleMembershipChange(java.util.Collection)"
        ]
    },
    "org.jgroups.protocols.pbcast.NAKACK2:void send(org.jgroups.Event,org.jgroups.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object down(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.Discovery:void sendDiscoveryRequest(java.lang.String,org.jgroups.util.Promise,org.jgroups.ViewId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.Discovery:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery:java.util.List findMembers(org.jgroups.util.Promise,int,boolean,org.jgroups.ViewId)"
        ]
    },
    "org.jgroups.protocols.RSVP$Entry$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.TimeScheduler2$RecurringTask:void run()",
            "org.jgroups.util.HashedTimingWheel$RecurringTask:void run()",
            "org.jgroups.util.TimeScheduler3$Task:void run()",
            "org.jgroups.util.DefaultTimeScheduler$RobustRunnable:void run()"
        ]
    },
    "org.jgroups.protocols.pbcast.FLUSH:void handleStartFlush(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.MERGE2:java.lang.Object down(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.FD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onResume(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void handleFlushReconcile(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.FlowControl:void sendCreditRequest(org.jgroups.Address,java.lang.Long)",
            "org.jgroups.protocols.pbcast.ParticipantGmsImpl:void sendLeaveMessage(org.jgroups.Address,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE:void handleStabilityMessage(org.jgroups.util.Digest,org.jgroups.Address)",
            "org.jgroups.protocols.Discovery:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeCancelledMessage(java.util.Collection,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void joinInternal(org.jgroups.Address,boolean,boolean)",
            "org.jgroups.stack.ProtocolStack:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void mergeDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:java.util.List findAllViews()",
            "org.jgroups.protocols.pbcast.GmsImpl:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspend(java.util.List)",
            "org.jgroups.protocols.UNICAST3:void sendRequestForFirstSeqno(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery$2:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK$BroadcastTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void handleMembershipChange(java.util.Collection)",
            "org.jgroups.protocols.pbcast.GMS:void sendJoinResponse(org.jgroups.protocols.pbcast.JoinRsp,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.GMS:void sendViewAck(org.jgroups.Address)",
            "org.jgroups.stack.Protocol:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onStartFlush(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.Merger$MergeTask:boolean getMergeDataFromSubgroupCoordinators(java.util.Map,org.jgroups.util.MergeId,long)",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.pbcast.STABLE:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void fixDigests()",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.pbcast.FLUSH:void onFlushCompleted(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.Merger:void handleMergeView(org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeView(java.util.Collection,org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object handleConnect(org.jgroups.Event,boolean)",
            "org.jgroups.protocols.FD$BroadcastTask:void run()",
            "org.jgroups.protocols.UNICAST3:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery:void sendMcastDiscoveryRequest(org.jgroups.Message)",
            "org.jgroups.protocols.UNICAST3:void handleResendingOfFirstMessage(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE$1:void run()",
            "org.jgroups.protocols.pbcast.Merger:org.jgroups.util.Digest fetchDigestsFromAllMembersInSubPartition(java.util.List,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void sendLeaveResponses(java.util.Collection)",
            "org.jgroups.protocols.FD_SOCK:void sendIHaveSockMessage(org.jgroups.Address,org.jgroups.Address,org.jgroups.stack.IpAddress)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:java.util.List findInitialMembers(org.jgroups.util.Promise)",
            "org.jgroups.protocols.Discovery$1:void run()",
            "org.jgroups.protocols.DISCARD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void cancelMerge(org.jgroups.util.MergeId)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL$HeartbeatSender:void run()",
            "org.jgroups.protocols.FlowControl:void sendCredit(org.jgroups.Address,long)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeResponse(org.jgroups.Address,org.jgroups.View,org.jgroups.util.Digest,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.GMS:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.pbcast.NAKACK2:void send(org.jgroups.Event,org.jgroups.Message)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryRequest(java.lang.String,org.jgroups.util.Promise,org.jgroups.ViewId)",
            "org.jgroups.protocols.RSVP$Entry$1:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void handleStartFlush(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.MERGE2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.UNICAST3:void handleXmitRequest(org.jgroups.Address,org.jgroups.util.SeqnoList)",
            "org.jgroups.protocols.MFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void sendJoinMessage(org.jgroups.Address,org.jgroups.Address,boolean,boolean)",
            "org.jgroups.protocols.pbcast.FLUSH:void rejectFlush(java.util.Collection,long)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryResponse(org.jgroups.Address,java.util.List,boolean,boolean,java.lang.String,org.jgroups.Address)",
            "org.jgroups.protocols.FRAG2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:void sendResponse(org.jgroups.Address,short)",
            "org.jgroups.protocols.FlowControl:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void retransmit(org.jgroups.util.SeqnoList,org.jgroups.Address,boolean)",
            "org.jgroups.protocols.UNICAST3:void sendAck(org.jgroups.Address,long,short)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void setDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.STABLE$StabilitySendTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:boolean setMergeId(org.jgroups.util.MergeId,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.NAKACK2:void sendXmitRsp(org.jgroups.Address,org.jgroups.Message)",
            "org.jgroups.protocols.FRAG2:void fragment(org.jgroups.Message)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.UFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.FD:void sendHeartbeatResponse(org.jgroups.Address)",
            "org.jgroups.protocols.TRACE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.BARRIER:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD$Monitor:void run()"
        ]
    },
    "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object down(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.FD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onResume(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void handleFlushReconcile(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.FlowControl:void sendCreditRequest(org.jgroups.Address,java.lang.Long)",
            "org.jgroups.protocols.pbcast.ParticipantGmsImpl:void sendLeaveMessage(org.jgroups.Address,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE:void handleStabilityMessage(org.jgroups.util.Digest,org.jgroups.Address)",
            "org.jgroups.protocols.Discovery:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeCancelledMessage(java.util.Collection,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void joinInternal(org.jgroups.Address,boolean,boolean)",
            "org.jgroups.stack.ProtocolStack:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void mergeDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:java.util.List findAllViews()",
            "org.jgroups.protocols.pbcast.GmsImpl:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspend(java.util.List)",
            "org.jgroups.protocols.UNICAST3:void sendRequestForFirstSeqno(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery$2:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK$BroadcastTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void handleMembershipChange(java.util.Collection)",
            "org.jgroups.protocols.pbcast.GMS:void sendJoinResponse(org.jgroups.protocols.pbcast.JoinRsp,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.GMS:void sendViewAck(org.jgroups.Address)",
            "org.jgroups.stack.Protocol:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onStartFlush(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.Merger$MergeTask:boolean getMergeDataFromSubgroupCoordinators(java.util.Map,org.jgroups.util.MergeId,long)",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.pbcast.STABLE:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void stopFlush()",
            "org.jgroups.protocols.pbcast.Merger:void fixDigests()",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.pbcast.FLUSH:void onFlushCompleted(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.Merger:void handleMergeView(org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeView(java.util.Collection,org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object handleConnect(org.jgroups.Event,boolean)",
            "org.jgroups.protocols.FD$BroadcastTask:void run()",
            "org.jgroups.protocols.UNICAST3:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery:void sendMcastDiscoveryRequest(org.jgroups.Message)",
            "org.jgroups.protocols.UNICAST3:void handleResendingOfFirstMessage(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE$1:void run()",
            "org.jgroups.protocols.pbcast.Merger:org.jgroups.util.Digest fetchDigestsFromAllMembersInSubPartition(java.util.List,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void sendLeaveResponses(java.util.Collection)",
            "org.jgroups.protocols.FD_SOCK:void sendIHaveSockMessage(org.jgroups.Address,org.jgroups.Address,org.jgroups.stack.IpAddress)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:java.util.List findInitialMembers(org.jgroups.util.Promise)",
            "org.jgroups.protocols.Discovery$1:void run()",
            "org.jgroups.protocols.DISCARD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void cancelMerge(org.jgroups.util.MergeId)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL$HeartbeatSender:void run()",
            "org.jgroups.protocols.FlowControl:void sendCredit(org.jgroups.Address,long)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeResponse(org.jgroups.Address,org.jgroups.View,org.jgroups.util.Digest,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.GMS:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.pbcast.NAKACK2:void send(org.jgroups.Event,org.jgroups.Message)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryRequest(java.lang.String,org.jgroups.util.Promise,org.jgroups.ViewId)",
            "org.jgroups.protocols.RSVP$Entry$1:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void handleStartFlush(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.MERGE2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.UNICAST3:void handleXmitRequest(org.jgroups.Address,org.jgroups.util.SeqnoList)",
            "org.jgroups.protocols.MFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void sendJoinMessage(org.jgroups.Address,org.jgroups.Address,boolean,boolean)",
            "org.jgroups.protocols.pbcast.FLUSH:void rejectFlush(java.util.Collection,long)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryResponse(org.jgroups.Address,java.util.List,boolean,boolean,java.lang.String,org.jgroups.Address)",
            "org.jgroups.protocols.FRAG2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:void sendResponse(org.jgroups.Address,short)",
            "org.jgroups.protocols.FlowControl:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void retransmit(org.jgroups.util.SeqnoList,org.jgroups.Address,boolean)",
            "org.jgroups.protocols.UNICAST3:void sendAck(org.jgroups.Address,long,short)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void setDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.STABLE$StabilitySendTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:boolean setMergeId(org.jgroups.util.MergeId,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.NAKACK2:void sendXmitRsp(org.jgroups.Address,org.jgroups.Message)",
            "org.jgroups.protocols.FRAG2:void fragment(org.jgroups.Message)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.UFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.FD:void sendHeartbeatResponse(org.jgroups.Address)",
            "org.jgroups.protocols.TRACE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.BARRIER:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD$Monitor:void run()"
        ]
    },
    "org.jgroups.protocols.UNICAST3:void handleXmitRequest(org.jgroups.Address,org.jgroups.util.SeqnoList)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.UNICAST3:void handleUpEvent(org.jgroups.Address,org.jgroups.Message,org.jgroups.protocols.UNICAST3$Header)"
        ]
    },
    "org.jgroups.protocols.MFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.FlowControl:java.lang.Object down(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.pbcast.ClientGmsImpl:void sendJoinMessage(org.jgroups.Address,org.jgroups.Address,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void joinInternal(org.jgroups.Address,boolean,boolean)"
        ]
    },
    "org.jgroups.protocols.pbcast.FLUSH:void rejectFlush(java.util.Collection,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.FLUSH:void access$100(org.jgroups.protocols.pbcast.FLUSH,java.util.Collection,long)",
            "org.jgroups.protocols.pbcast.FLUSH:void startFlush(java.util.List)"
        ]
    },
    "org.jgroups.protocols.Discovery:void sendDiscoveryResponse(org.jgroups.Address,java.util.List,boolean,boolean,java.lang.String,org.jgroups.Address)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.Discovery:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.FRAG2:java.lang.Object down(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.FD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onResume(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void handleFlushReconcile(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.FlowControl:void sendCreditRequest(org.jgroups.Address,java.lang.Long)",
            "org.jgroups.protocols.pbcast.ParticipantGmsImpl:void sendLeaveMessage(org.jgroups.Address,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE:void handleStabilityMessage(org.jgroups.util.Digest,org.jgroups.Address)",
            "org.jgroups.protocols.Discovery:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeCancelledMessage(java.util.Collection,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void joinInternal(org.jgroups.Address,boolean,boolean)",
            "org.jgroups.stack.ProtocolStack:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void mergeDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:java.util.List findAllViews()",
            "org.jgroups.protocols.pbcast.GmsImpl:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspend(java.util.List)",
            "org.jgroups.protocols.UNICAST3:void sendRequestForFirstSeqno(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery$2:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK$BroadcastTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void handleMembershipChange(java.util.Collection)",
            "org.jgroups.protocols.pbcast.GMS:void sendJoinResponse(org.jgroups.protocols.pbcast.JoinRsp,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.GMS:void sendViewAck(org.jgroups.Address)",
            "org.jgroups.stack.Protocol:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onStartFlush(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.Merger$MergeTask:boolean getMergeDataFromSubgroupCoordinators(java.util.Map,org.jgroups.util.MergeId,long)",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.pbcast.STABLE:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void fixDigests()",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.pbcast.FLUSH:void onFlushCompleted(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.Merger:void handleMergeView(org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeView(java.util.Collection,org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object handleConnect(org.jgroups.Event,boolean)",
            "org.jgroups.protocols.FD$BroadcastTask:void run()",
            "org.jgroups.protocols.UNICAST3:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery:void sendMcastDiscoveryRequest(org.jgroups.Message)",
            "org.jgroups.protocols.UNICAST3:void handleResendingOfFirstMessage(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE$1:void run()",
            "org.jgroups.protocols.pbcast.Merger:org.jgroups.util.Digest fetchDigestsFromAllMembersInSubPartition(java.util.List,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void sendLeaveResponses(java.util.Collection)",
            "org.jgroups.protocols.FD_SOCK:void sendIHaveSockMessage(org.jgroups.Address,org.jgroups.Address,org.jgroups.stack.IpAddress)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:java.util.List findInitialMembers(org.jgroups.util.Promise)",
            "org.jgroups.protocols.Discovery$1:void run()",
            "org.jgroups.protocols.DISCARD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void cancelMerge(org.jgroups.util.MergeId)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL$HeartbeatSender:void run()",
            "org.jgroups.protocols.FlowControl:void sendCredit(org.jgroups.Address,long)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeResponse(org.jgroups.Address,org.jgroups.View,org.jgroups.util.Digest,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.GMS:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.pbcast.NAKACK2:void send(org.jgroups.Event,org.jgroups.Message)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryRequest(java.lang.String,org.jgroups.util.Promise,org.jgroups.ViewId)",
            "org.jgroups.protocols.RSVP$Entry$1:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void handleStartFlush(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.MERGE2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.UNICAST3:void handleXmitRequest(org.jgroups.Address,org.jgroups.util.SeqnoList)",
            "org.jgroups.protocols.MFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void sendJoinMessage(org.jgroups.Address,org.jgroups.Address,boolean,boolean)",
            "org.jgroups.protocols.pbcast.FLUSH:void rejectFlush(java.util.Collection,long)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryResponse(org.jgroups.Address,java.util.List,boolean,boolean,java.lang.String,org.jgroups.Address)",
            "org.jgroups.protocols.FRAG2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:void sendResponse(org.jgroups.Address,short)",
            "org.jgroups.protocols.FlowControl:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void retransmit(org.jgroups.util.SeqnoList,org.jgroups.Address,boolean)",
            "org.jgroups.protocols.UNICAST3:void sendAck(org.jgroups.Address,long,short)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void setDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.STABLE$StabilitySendTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:boolean setMergeId(org.jgroups.util.MergeId,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.NAKACK2:void sendXmitRsp(org.jgroups.Address,org.jgroups.Message)",
            "org.jgroups.protocols.FRAG2:void fragment(org.jgroups.Message)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.UFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.FD:void sendHeartbeatResponse(org.jgroups.Address)",
            "org.jgroups.protocols.TRACE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.BARRIER:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD$Monitor:void run()"
        ]
    },
    "org.jgroups.protocols.RSVP:void sendResponse(org.jgroups.Address,short)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.RSVP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:void up(org.jgroups.util.MessageBatch)"
        ]
    },
    "org.jgroups.protocols.FlowControl:java.lang.Object down(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.FD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onResume(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void handleFlushReconcile(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.FlowControl:void sendCreditRequest(org.jgroups.Address,java.lang.Long)",
            "org.jgroups.protocols.pbcast.ParticipantGmsImpl:void sendLeaveMessage(org.jgroups.Address,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE:void handleStabilityMessage(org.jgroups.util.Digest,org.jgroups.Address)",
            "org.jgroups.protocols.Discovery:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeCancelledMessage(java.util.Collection,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void joinInternal(org.jgroups.Address,boolean,boolean)",
            "org.jgroups.stack.ProtocolStack:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void mergeDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:java.util.List findAllViews()",
            "org.jgroups.protocols.pbcast.GmsImpl:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspend(java.util.List)",
            "org.jgroups.protocols.UNICAST3:void sendRequestForFirstSeqno(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery$2:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK$BroadcastTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void handleMembershipChange(java.util.Collection)",
            "org.jgroups.protocols.pbcast.GMS:void sendJoinResponse(org.jgroups.protocols.pbcast.JoinRsp,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.GMS:void sendViewAck(org.jgroups.Address)",
            "org.jgroups.stack.Protocol:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onStartFlush(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.Merger$MergeTask:boolean getMergeDataFromSubgroupCoordinators(java.util.Map,org.jgroups.util.MergeId,long)",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.pbcast.STABLE:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void fixDigests()",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.pbcast.FLUSH:void onFlushCompleted(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.Merger:void handleMergeView(org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeView(java.util.Collection,org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object handleConnect(org.jgroups.Event,boolean)",
            "org.jgroups.protocols.FD$BroadcastTask:void run()",
            "org.jgroups.protocols.UNICAST3:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery:void sendMcastDiscoveryRequest(org.jgroups.Message)",
            "org.jgroups.protocols.UNICAST3:void handleResendingOfFirstMessage(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE$1:void run()",
            "org.jgroups.protocols.pbcast.Merger:org.jgroups.util.Digest fetchDigestsFromAllMembersInSubPartition(java.util.List,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void sendLeaveResponses(java.util.Collection)",
            "org.jgroups.protocols.FD_SOCK:void sendIHaveSockMessage(org.jgroups.Address,org.jgroups.Address,org.jgroups.stack.IpAddress)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:java.util.List findInitialMembers(org.jgroups.util.Promise)",
            "org.jgroups.protocols.Discovery$1:void run()",
            "org.jgroups.protocols.DISCARD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void cancelMerge(org.jgroups.util.MergeId)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL$HeartbeatSender:void run()",
            "org.jgroups.protocols.FlowControl:void sendCredit(org.jgroups.Address,long)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeResponse(org.jgroups.Address,org.jgroups.View,org.jgroups.util.Digest,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.GMS:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.pbcast.NAKACK2:void send(org.jgroups.Event,org.jgroups.Message)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryRequest(java.lang.String,org.jgroups.util.Promise,org.jgroups.ViewId)",
            "org.jgroups.protocols.RSVP$Entry$1:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void handleStartFlush(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.MERGE2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.UNICAST3:void handleXmitRequest(org.jgroups.Address,org.jgroups.util.SeqnoList)",
            "org.jgroups.protocols.MFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void sendJoinMessage(org.jgroups.Address,org.jgroups.Address,boolean,boolean)",
            "org.jgroups.protocols.pbcast.FLUSH:void rejectFlush(java.util.Collection,long)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryResponse(org.jgroups.Address,java.util.List,boolean,boolean,java.lang.String,org.jgroups.Address)",
            "org.jgroups.protocols.FRAG2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:void sendResponse(org.jgroups.Address,short)",
            "org.jgroups.protocols.FlowControl:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void retransmit(org.jgroups.util.SeqnoList,org.jgroups.Address,boolean)",
            "org.jgroups.protocols.UNICAST3:void sendAck(org.jgroups.Address,long,short)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void setDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.STABLE$StabilitySendTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:boolean setMergeId(org.jgroups.util.MergeId,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.NAKACK2:void sendXmitRsp(org.jgroups.Address,org.jgroups.Message)",
            "org.jgroups.protocols.FRAG2:void fragment(org.jgroups.Message)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.UFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.FD:void sendHeartbeatResponse(org.jgroups.Address)",
            "org.jgroups.protocols.TRACE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.BARRIER:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD$Monitor:void run()"
        ]
    },
    "org.jgroups.protocols.pbcast.NAKACK2:void retransmit(org.jgroups.util.SeqnoList,org.jgroups.Address,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.NAKACK2:void triggerXmit()",
            "org.jgroups.protocols.pbcast.NAKACK2:void retransmit(long,long,org.jgroups.Address,boolean)"
        ]
    },
    "org.jgroups.protocols.UNICAST3:void sendAck(org.jgroups.Address,long,short)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.UNICAST3:void handleDataReceived(org.jgroups.Address,long,short,boolean,org.jgroups.Message,org.jgroups.Event)",
            "org.jgroups.protocols.UNICAST3:void triggerXmit()",
            "org.jgroups.protocols.UNICAST3:void handleBatchReceived(org.jgroups.protocols.UNICAST3$ReceiverEntry,org.jgroups.Address,java.util.List,boolean)"
        ]
    },
    "org.jgroups.protocols.pbcast.STABLE:java.lang.Object down(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.FD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onResume(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void handleFlushReconcile(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.FlowControl:void sendCreditRequest(org.jgroups.Address,java.lang.Long)",
            "org.jgroups.protocols.pbcast.ParticipantGmsImpl:void sendLeaveMessage(org.jgroups.Address,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE:void handleStabilityMessage(org.jgroups.util.Digest,org.jgroups.Address)",
            "org.jgroups.protocols.Discovery:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeCancelledMessage(java.util.Collection,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void joinInternal(org.jgroups.Address,boolean,boolean)",
            "org.jgroups.stack.ProtocolStack:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void mergeDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:java.util.List findAllViews()",
            "org.jgroups.protocols.pbcast.GmsImpl:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspend(java.util.List)",
            "org.jgroups.protocols.UNICAST3:void sendRequestForFirstSeqno(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery$2:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK$BroadcastTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void handleMembershipChange(java.util.Collection)",
            "org.jgroups.protocols.pbcast.GMS:void sendJoinResponse(org.jgroups.protocols.pbcast.JoinRsp,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.GMS:void sendViewAck(org.jgroups.Address)",
            "org.jgroups.stack.Protocol:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onStartFlush(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.Merger$MergeTask:boolean getMergeDataFromSubgroupCoordinators(java.util.Map,org.jgroups.util.MergeId,long)",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.pbcast.STABLE:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void fixDigests()",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.pbcast.FLUSH:void onFlushCompleted(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.Merger:void handleMergeView(org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeView(java.util.Collection,org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object handleConnect(org.jgroups.Event,boolean)",
            "org.jgroups.protocols.FD$BroadcastTask:void run()",
            "org.jgroups.protocols.UNICAST3:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery:void sendMcastDiscoveryRequest(org.jgroups.Message)",
            "org.jgroups.protocols.UNICAST3:void handleResendingOfFirstMessage(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE$1:void run()",
            "org.jgroups.protocols.pbcast.Merger:org.jgroups.util.Digest fetchDigestsFromAllMembersInSubPartition(java.util.List,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void sendLeaveResponses(java.util.Collection)",
            "org.jgroups.protocols.FD_SOCK:void sendIHaveSockMessage(org.jgroups.Address,org.jgroups.Address,org.jgroups.stack.IpAddress)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:java.util.List findInitialMembers(org.jgroups.util.Promise)",
            "org.jgroups.protocols.Discovery$1:void run()",
            "org.jgroups.protocols.DISCARD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void cancelMerge(org.jgroups.util.MergeId)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL$HeartbeatSender:void run()",
            "org.jgroups.protocols.FlowControl:void sendCredit(org.jgroups.Address,long)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeResponse(org.jgroups.Address,org.jgroups.View,org.jgroups.util.Digest,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.GMS:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.pbcast.NAKACK2:void send(org.jgroups.Event,org.jgroups.Message)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryRequest(java.lang.String,org.jgroups.util.Promise,org.jgroups.ViewId)",
            "org.jgroups.protocols.RSVP$Entry$1:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void handleStartFlush(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.MERGE2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.UNICAST3:void handleXmitRequest(org.jgroups.Address,org.jgroups.util.SeqnoList)",
            "org.jgroups.protocols.MFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void sendJoinMessage(org.jgroups.Address,org.jgroups.Address,boolean,boolean)",
            "org.jgroups.protocols.pbcast.FLUSH:void rejectFlush(java.util.Collection,long)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryResponse(org.jgroups.Address,java.util.List,boolean,boolean,java.lang.String,org.jgroups.Address)",
            "org.jgroups.protocols.FRAG2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:void sendResponse(org.jgroups.Address,short)",
            "org.jgroups.protocols.FlowControl:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void retransmit(org.jgroups.util.SeqnoList,org.jgroups.Address,boolean)",
            "org.jgroups.protocols.UNICAST3:void sendAck(org.jgroups.Address,long,short)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void setDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.STABLE$StabilitySendTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:boolean setMergeId(org.jgroups.util.MergeId,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.NAKACK2:void sendXmitRsp(org.jgroups.Address,org.jgroups.Message)",
            "org.jgroups.protocols.FRAG2:void fragment(org.jgroups.Message)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.UFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.FD:void sendHeartbeatResponse(org.jgroups.Address)",
            "org.jgroups.protocols.TRACE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.BARRIER:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD$Monitor:void run()"
        ]
    },
    "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object down(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.FD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onResume(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void handleFlushReconcile(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.FlowControl:void sendCreditRequest(org.jgroups.Address,java.lang.Long)",
            "org.jgroups.protocols.pbcast.ParticipantGmsImpl:void sendLeaveMessage(org.jgroups.Address,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE:void handleStabilityMessage(org.jgroups.util.Digest,org.jgroups.Address)",
            "org.jgroups.protocols.Discovery:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeCancelledMessage(java.util.Collection,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void joinInternal(org.jgroups.Address,boolean,boolean)",
            "org.jgroups.stack.ProtocolStack:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void mergeDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:java.util.List findAllViews()",
            "org.jgroups.protocols.pbcast.GmsImpl:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspend(java.util.List)",
            "org.jgroups.protocols.UNICAST3:void sendRequestForFirstSeqno(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery$2:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK$BroadcastTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void handleMembershipChange(java.util.Collection)",
            "org.jgroups.protocols.pbcast.GMS:void sendJoinResponse(org.jgroups.protocols.pbcast.JoinRsp,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.GMS:void sendViewAck(org.jgroups.Address)",
            "org.jgroups.stack.Protocol:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onStartFlush(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.Merger$MergeTask:boolean getMergeDataFromSubgroupCoordinators(java.util.Map,org.jgroups.util.MergeId,long)",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.pbcast.STABLE:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void fixDigests()",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.pbcast.FLUSH:void onFlushCompleted(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.Merger:void handleMergeView(org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeView(java.util.Collection,org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object handleConnect(org.jgroups.Event,boolean)",
            "org.jgroups.protocols.FD$BroadcastTask:void run()",
            "org.jgroups.protocols.UNICAST3:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery:void sendMcastDiscoveryRequest(org.jgroups.Message)",
            "org.jgroups.protocols.UNICAST3:void handleResendingOfFirstMessage(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE$1:void run()",
            "org.jgroups.protocols.pbcast.Merger:org.jgroups.util.Digest fetchDigestsFromAllMembersInSubPartition(java.util.List,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void sendLeaveResponses(java.util.Collection)",
            "org.jgroups.protocols.FD_SOCK:void sendIHaveSockMessage(org.jgroups.Address,org.jgroups.Address,org.jgroups.stack.IpAddress)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:java.util.List findInitialMembers(org.jgroups.util.Promise)",
            "org.jgroups.protocols.Discovery$1:void run()",
            "org.jgroups.protocols.DISCARD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void cancelMerge(org.jgroups.util.MergeId)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL$HeartbeatSender:void run()",
            "org.jgroups.protocols.FlowControl:void sendCredit(org.jgroups.Address,long)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeResponse(org.jgroups.Address,org.jgroups.View,org.jgroups.util.Digest,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.GMS:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.pbcast.NAKACK2:void send(org.jgroups.Event,org.jgroups.Message)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryRequest(java.lang.String,org.jgroups.util.Promise,org.jgroups.ViewId)",
            "org.jgroups.protocols.RSVP$Entry$1:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void handleStartFlush(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.MERGE2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.UNICAST3:void handleXmitRequest(org.jgroups.Address,org.jgroups.util.SeqnoList)",
            "org.jgroups.protocols.MFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void sendJoinMessage(org.jgroups.Address,org.jgroups.Address,boolean,boolean)",
            "org.jgroups.protocols.pbcast.FLUSH:void rejectFlush(java.util.Collection,long)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryResponse(org.jgroups.Address,java.util.List,boolean,boolean,java.lang.String,org.jgroups.Address)",
            "org.jgroups.protocols.FRAG2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:void sendResponse(org.jgroups.Address,short)",
            "org.jgroups.protocols.FlowControl:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void retransmit(org.jgroups.util.SeqnoList,org.jgroups.Address,boolean)",
            "org.jgroups.protocols.UNICAST3:void sendAck(org.jgroups.Address,long,short)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void setDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.STABLE$StabilitySendTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:boolean setMergeId(org.jgroups.util.MergeId,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.NAKACK2:void sendXmitRsp(org.jgroups.Address,org.jgroups.Message)",
            "org.jgroups.protocols.FRAG2:void fragment(org.jgroups.Message)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.UFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.FD:void sendHeartbeatResponse(org.jgroups.Address)",
            "org.jgroups.protocols.TRACE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.BARRIER:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD$Monitor:void run()"
        ]
    },
    "org.jgroups.protocols.pbcast.GMS:void setDigest(org.jgroups.util.Digest)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)"
        ]
    },
    "org.jgroups.protocols.pbcast.STABLE$StabilitySendTask:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.TimeScheduler2$MyTask:void run()",
            "org.jgroups.util.HashedTimingWheel$MyTask:void run()",
            "org.jgroups.util.TimeScheduler3$Task:void run()"
        ]
    },
    "org.jgroups.protocols.pbcast.Merger:boolean setMergeId(org.jgroups.util.MergeId,org.jgroups.util.MergeId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.Merger$MergeTask:void _run(org.jgroups.util.MergeId,java.util.Collection)",
            "org.jgroups.protocols.pbcast.Merger:void cancelMerge(org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void _handleMergeRequest(org.jgroups.Address,org.jgroups.util.MergeId,java.util.Collection)"
        ]
    },
    "org.jgroups.protocols.pbcast.NAKACK2:void sendXmitRsp(org.jgroups.Address,org.jgroups.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.NAKACK2:void handleXmitReq(org.jgroups.Address,org.jgroups.util.SeqnoList,org.jgroups.Address)"
        ]
    },
    "org.jgroups.protocols.FRAG2:void fragment(org.jgroups.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.FRAG2:java.lang.Object down(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.RSVP:java.lang.Object down(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.FD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onResume(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void handleFlushReconcile(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.FlowControl:void sendCreditRequest(org.jgroups.Address,java.lang.Long)",
            "org.jgroups.protocols.pbcast.ParticipantGmsImpl:void sendLeaveMessage(org.jgroups.Address,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE:void handleStabilityMessage(org.jgroups.util.Digest,org.jgroups.Address)",
            "org.jgroups.protocols.Discovery:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeCancelledMessage(java.util.Collection,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void joinInternal(org.jgroups.Address,boolean,boolean)",
            "org.jgroups.stack.ProtocolStack:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void mergeDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:java.util.List findAllViews()",
            "org.jgroups.protocols.pbcast.GmsImpl:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspend(java.util.List)",
            "org.jgroups.protocols.UNICAST3:void sendRequestForFirstSeqno(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery$2:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK$BroadcastTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void handleMembershipChange(java.util.Collection)",
            "org.jgroups.protocols.pbcast.GMS:void sendJoinResponse(org.jgroups.protocols.pbcast.JoinRsp,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.GMS:void sendViewAck(org.jgroups.Address)",
            "org.jgroups.stack.Protocol:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onStartFlush(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.Merger$MergeTask:boolean getMergeDataFromSubgroupCoordinators(java.util.Map,org.jgroups.util.MergeId,long)",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.pbcast.STABLE:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void fixDigests()",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.pbcast.FLUSH:void onFlushCompleted(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.Merger:void handleMergeView(org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeView(java.util.Collection,org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object handleConnect(org.jgroups.Event,boolean)",
            "org.jgroups.protocols.FD$BroadcastTask:void run()",
            "org.jgroups.protocols.UNICAST3:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery:void sendMcastDiscoveryRequest(org.jgroups.Message)",
            "org.jgroups.protocols.UNICAST3:void handleResendingOfFirstMessage(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE$1:void run()",
            "org.jgroups.protocols.pbcast.Merger:org.jgroups.util.Digest fetchDigestsFromAllMembersInSubPartition(java.util.List,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void sendLeaveResponses(java.util.Collection)",
            "org.jgroups.protocols.FD_SOCK:void sendIHaveSockMessage(org.jgroups.Address,org.jgroups.Address,org.jgroups.stack.IpAddress)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:java.util.List findInitialMembers(org.jgroups.util.Promise)",
            "org.jgroups.protocols.Discovery$1:void run()",
            "org.jgroups.protocols.DISCARD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void cancelMerge(org.jgroups.util.MergeId)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL$HeartbeatSender:void run()",
            "org.jgroups.protocols.FlowControl:void sendCredit(org.jgroups.Address,long)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeResponse(org.jgroups.Address,org.jgroups.View,org.jgroups.util.Digest,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.GMS:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.pbcast.NAKACK2:void send(org.jgroups.Event,org.jgroups.Message)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryRequest(java.lang.String,org.jgroups.util.Promise,org.jgroups.ViewId)",
            "org.jgroups.protocols.RSVP$Entry$1:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void handleStartFlush(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.MERGE2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.UNICAST3:void handleXmitRequest(org.jgroups.Address,org.jgroups.util.SeqnoList)",
            "org.jgroups.protocols.MFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void sendJoinMessage(org.jgroups.Address,org.jgroups.Address,boolean,boolean)",
            "org.jgroups.protocols.pbcast.FLUSH:void rejectFlush(java.util.Collection,long)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryResponse(org.jgroups.Address,java.util.List,boolean,boolean,java.lang.String,org.jgroups.Address)",
            "org.jgroups.protocols.FRAG2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:void sendResponse(org.jgroups.Address,short)",
            "org.jgroups.protocols.FlowControl:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void retransmit(org.jgroups.util.SeqnoList,org.jgroups.Address,boolean)",
            "org.jgroups.protocols.UNICAST3:void sendAck(org.jgroups.Address,long,short)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void setDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.STABLE$StabilitySendTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:boolean setMergeId(org.jgroups.util.MergeId,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.NAKACK2:void sendXmitRsp(org.jgroups.Address,org.jgroups.Message)",
            "org.jgroups.protocols.FRAG2:void fragment(org.jgroups.Message)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.UFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.FD:void sendHeartbeatResponse(org.jgroups.Address)",
            "org.jgroups.protocols.TRACE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.BARRIER:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD$Monitor:void run()"
        ]
    },
    "org.jgroups.protocols.UFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.FlowControl:java.lang.Object down(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.FD:void sendHeartbeatResponse(org.jgroups.Address)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.TRACE:java.lang.Object down(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.FD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onResume(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void handleFlushReconcile(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.FlowControl:void sendCreditRequest(org.jgroups.Address,java.lang.Long)",
            "org.jgroups.protocols.pbcast.ParticipantGmsImpl:void sendLeaveMessage(org.jgroups.Address,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE:void handleStabilityMessage(org.jgroups.util.Digest,org.jgroups.Address)",
            "org.jgroups.protocols.Discovery:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeCancelledMessage(java.util.Collection,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void joinInternal(org.jgroups.Address,boolean,boolean)",
            "org.jgroups.stack.ProtocolStack:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void mergeDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:java.util.List findAllViews()",
            "org.jgroups.protocols.pbcast.GmsImpl:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspend(java.util.List)",
            "org.jgroups.protocols.UNICAST3:void sendRequestForFirstSeqno(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery$2:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK$BroadcastTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void handleMembershipChange(java.util.Collection)",
            "org.jgroups.protocols.pbcast.GMS:void sendJoinResponse(org.jgroups.protocols.pbcast.JoinRsp,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.GMS:void sendViewAck(org.jgroups.Address)",
            "org.jgroups.stack.Protocol:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onStartFlush(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.Merger$MergeTask:boolean getMergeDataFromSubgroupCoordinators(java.util.Map,org.jgroups.util.MergeId,long)",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.pbcast.STABLE:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void fixDigests()",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.pbcast.FLUSH:void onFlushCompleted(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.Merger:void handleMergeView(org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeView(java.util.Collection,org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object handleConnect(org.jgroups.Event,boolean)",
            "org.jgroups.protocols.FD$BroadcastTask:void run()",
            "org.jgroups.protocols.UNICAST3:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery:void sendMcastDiscoveryRequest(org.jgroups.Message)",
            "org.jgroups.protocols.UNICAST3:void handleResendingOfFirstMessage(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE$1:void run()",
            "org.jgroups.protocols.pbcast.Merger:org.jgroups.util.Digest fetchDigestsFromAllMembersInSubPartition(java.util.List,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void sendLeaveResponses(java.util.Collection)",
            "org.jgroups.protocols.FD_SOCK:void sendIHaveSockMessage(org.jgroups.Address,org.jgroups.Address,org.jgroups.stack.IpAddress)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:java.util.List findInitialMembers(org.jgroups.util.Promise)",
            "org.jgroups.protocols.Discovery$1:void run()",
            "org.jgroups.protocols.DISCARD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void cancelMerge(org.jgroups.util.MergeId)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL$HeartbeatSender:void run()",
            "org.jgroups.protocols.FlowControl:void sendCredit(org.jgroups.Address,long)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeResponse(org.jgroups.Address,org.jgroups.View,org.jgroups.util.Digest,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.GMS:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.pbcast.NAKACK2:void send(org.jgroups.Event,org.jgroups.Message)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryRequest(java.lang.String,org.jgroups.util.Promise,org.jgroups.ViewId)",
            "org.jgroups.protocols.RSVP$Entry$1:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void handleStartFlush(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.MERGE2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.UNICAST3:void handleXmitRequest(org.jgroups.Address,org.jgroups.util.SeqnoList)",
            "org.jgroups.protocols.MFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void sendJoinMessage(org.jgroups.Address,org.jgroups.Address,boolean,boolean)",
            "org.jgroups.protocols.pbcast.FLUSH:void rejectFlush(java.util.Collection,long)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryResponse(org.jgroups.Address,java.util.List,boolean,boolean,java.lang.String,org.jgroups.Address)",
            "org.jgroups.protocols.FRAG2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:void sendResponse(org.jgroups.Address,short)",
            "org.jgroups.protocols.FlowControl:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void retransmit(org.jgroups.util.SeqnoList,org.jgroups.Address,boolean)",
            "org.jgroups.protocols.UNICAST3:void sendAck(org.jgroups.Address,long,short)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void setDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.STABLE$StabilitySendTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:boolean setMergeId(org.jgroups.util.MergeId,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.NAKACK2:void sendXmitRsp(org.jgroups.Address,org.jgroups.Message)",
            "org.jgroups.protocols.FRAG2:void fragment(org.jgroups.Message)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.UFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.FD:void sendHeartbeatResponse(org.jgroups.Address)",
            "org.jgroups.protocols.TRACE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.BARRIER:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD$Monitor:void run()"
        ]
    },
    "org.jgroups.protocols.BARRIER:java.lang.Object down(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.FD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onResume(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void handleFlushReconcile(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.FlowControl:void sendCreditRequest(org.jgroups.Address,java.lang.Long)",
            "org.jgroups.protocols.pbcast.ParticipantGmsImpl:void sendLeaveMessage(org.jgroups.Address,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE:void handleStabilityMessage(org.jgroups.util.Digest,org.jgroups.Address)",
            "org.jgroups.protocols.Discovery:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeCancelledMessage(java.util.Collection,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void joinInternal(org.jgroups.Address,boolean,boolean)",
            "org.jgroups.stack.ProtocolStack:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void mergeDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:java.util.List findAllViews()",
            "org.jgroups.protocols.pbcast.GmsImpl:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspend(java.util.List)",
            "org.jgroups.protocols.UNICAST3:void sendRequestForFirstSeqno(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery$2:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK$BroadcastTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void handleMembershipChange(java.util.Collection)",
            "org.jgroups.protocols.pbcast.GMS:void sendJoinResponse(org.jgroups.protocols.pbcast.JoinRsp,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.GMS:void sendViewAck(org.jgroups.Address)",
            "org.jgroups.stack.Protocol:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onStartFlush(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.Merger$MergeTask:boolean getMergeDataFromSubgroupCoordinators(java.util.Map,org.jgroups.util.MergeId,long)",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.pbcast.STABLE:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void fixDigests()",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.pbcast.FLUSH:void onFlushCompleted(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.Merger:void handleMergeView(org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeView(java.util.Collection,org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object handleConnect(org.jgroups.Event,boolean)",
            "org.jgroups.protocols.FD$BroadcastTask:void run()",
            "org.jgroups.protocols.UNICAST3:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery:void sendMcastDiscoveryRequest(org.jgroups.Message)",
            "org.jgroups.protocols.UNICAST3:void handleResendingOfFirstMessage(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE$1:void run()",
            "org.jgroups.protocols.pbcast.Merger:org.jgroups.util.Digest fetchDigestsFromAllMembersInSubPartition(java.util.List,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void sendLeaveResponses(java.util.Collection)",
            "org.jgroups.protocols.FD_SOCK:void sendIHaveSockMessage(org.jgroups.Address,org.jgroups.Address,org.jgroups.stack.IpAddress)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:java.util.List findInitialMembers(org.jgroups.util.Promise)",
            "org.jgroups.protocols.Discovery$1:void run()",
            "org.jgroups.protocols.DISCARD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void cancelMerge(org.jgroups.util.MergeId)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL$HeartbeatSender:void run()",
            "org.jgroups.protocols.FlowControl:void sendCredit(org.jgroups.Address,long)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeResponse(org.jgroups.Address,org.jgroups.View,org.jgroups.util.Digest,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.GMS:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.pbcast.NAKACK2:void send(org.jgroups.Event,org.jgroups.Message)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryRequest(java.lang.String,org.jgroups.util.Promise,org.jgroups.ViewId)",
            "org.jgroups.protocols.RSVP$Entry$1:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void handleStartFlush(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.MERGE2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.UNICAST3:void handleXmitRequest(org.jgroups.Address,org.jgroups.util.SeqnoList)",
            "org.jgroups.protocols.MFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void sendJoinMessage(org.jgroups.Address,org.jgroups.Address,boolean,boolean)",
            "org.jgroups.protocols.pbcast.FLUSH:void rejectFlush(java.util.Collection,long)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryResponse(org.jgroups.Address,java.util.List,boolean,boolean,java.lang.String,org.jgroups.Address)",
            "org.jgroups.protocols.FRAG2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:void sendResponse(org.jgroups.Address,short)",
            "org.jgroups.protocols.FlowControl:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void retransmit(org.jgroups.util.SeqnoList,org.jgroups.Address,boolean)",
            "org.jgroups.protocols.UNICAST3:void sendAck(org.jgroups.Address,long,short)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void setDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.STABLE$StabilitySendTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:boolean setMergeId(org.jgroups.util.MergeId,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.NAKACK2:void sendXmitRsp(org.jgroups.Address,org.jgroups.Message)",
            "org.jgroups.protocols.FRAG2:void fragment(org.jgroups.Message)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.UFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.FD:void sendHeartbeatResponse(org.jgroups.Address)",
            "org.jgroups.protocols.TRACE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.BARRIER:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD$Monitor:void run()"
        ]
    },
    "org.jgroups.protocols.FD$Monitor:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.TimeScheduler2$RecurringTask:void run()",
            "org.jgroups.util.HashedTimingWheel$RecurringTask:void run()",
            "org.jgroups.util.TimeScheduler3$Task:void run()",
            "org.jgroups.util.DefaultTimeScheduler$RobustRunnable:void run()"
        ]
    },
    "org.jgroups.protocols.FORWARD_TO_COORD:java.lang.Object up(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.TP:void doSend(org.jgroups.util.Buffer,org.jgroups.Address,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.TP$DefaultBundler:void sendBundledMessages(java.util.Map)",
            "org.jgroups.protocols.TP$TransferQueueBundler:void sendBundledMessages(java.util.Map)",
            "org.jgroups.protocols.TP:void send(org.jgroups.Message,org.jgroups.Address,boolean)"
        ]
    },
    "org.jgroups.protocols.UDP:void sendMulticast(byte[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.TP:void doSend(org.jgroups.util.Buffer,org.jgroups.Address,boolean)"
        ]
    },
    "org.jgroups.protocols.BasicTCP:void sendMulticast(byte[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.TP:void doSend(org.jgroups.util.Buffer,org.jgroups.Address,boolean)"
        ]
    },
    "org.jgroups.protocols.TUNNEL$StubReceiver:void access$200(org.jgroups.protocols.TUNNEL$StubReceiver,org.jgroups.Address)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.TUNNEL$StubReceiver$1:void run()"
        ]
    },
    "org.jgroups.protocols.BasicTCP:void init()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.TUNNEL:void init()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.MERGE2$FindSubgroupsTask$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.DefaultTimeScheduler$TaskWrapper:void run()",
            "org.jgroups.util.TimeScheduler2$RecurringTask:void run()",
            "org.jgroups.util.HashedTimingWheel$RecurringTask:void run()",
            "org.jgroups.util.TimeScheduler3$Task:void run()"
        ]
    },
    "org.jgroups.protocols.MERGE2$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.TimeScheduler2$MyTask:void run()",
            "org.jgroups.util.HashedTimingWheel$MyTask:void run()",
            "org.jgroups.util.TimeScheduler3$Task:void run()"
        ]
    },
    "org.jgroups.protocols.MERGE2$2:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.TimeScheduler2$MyTask:void run()",
            "org.jgroups.util.HashedTimingWheel$MyTask:void run()",
            "org.jgroups.util.TimeScheduler3$Task:void run()"
        ]
    },
    "org.jgroups.protocols.MERGE2:void sendMergeSolicitation()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.UUIDCacheClearTest:void clearCache(org.jgroups.JChannel[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.UUIDCacheClearTest:void testCacheClear()"
        ]
    },
    "org.jgroups.protocols.TP:java.lang.Object down(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.FLUSH:void handleFlushReconcile(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.FlowControl:void sendCreditRequest(org.jgroups.Address,java.lang.Long)",
            "org.jgroups.protocols.pbcast.ParticipantGmsImpl:void sendLeaveMessage(org.jgroups.Address,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void joinInternal(org.jgroups.Address,boolean,boolean)",
            "org.jgroups.protocols.pbcast.GMS:void mergeDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.GmsImpl:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspend(java.util.List)",
            "org.jgroups.protocols.UNICAST3:void sendRequestForFirstSeqno(org.jgroups.Address)",
            "org.jgroups.protocols.Discovery$2:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK$BroadcastTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void handleMembershipChange(java.util.Collection)",
            "org.jgroups.protocols.pbcast.GMS:void sendJoinResponse(org.jgroups.protocols.pbcast.JoinRsp,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.stack.Protocol:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onStartFlush(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void fixDigests()",
            "org.jgroups.protocols.pbcast.Merger:void handleMergeView(org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeView(java.util.Collection,org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object handleConnect(org.jgroups.Event,boolean)",
            "org.jgroups.protocols.Discovery:void sendMcastDiscoveryRequest(org.jgroups.Message)",
            "org.jgroups.protocols.UNICAST3:void handleResendingOfFirstMessage(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK:void sendIHaveSockMessage(org.jgroups.Address,org.jgroups.Address,org.jgroups.stack.IpAddress)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeResponse(org.jgroups.Address,org.jgroups.View,org.jgroups.util.Digest,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.GMS:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.Discovery:void sendDiscoveryRequest(java.lang.String,org.jgroups.util.Promise,org.jgroups.ViewId)",
            "org.jgroups.protocols.pbcast.FLUSH:void handleStartFlush(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.UNICAST3:void handleXmitRequest(org.jgroups.Address,org.jgroups.util.SeqnoList)",
            "org.jgroups.protocols.MFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.UNICAST3:void sendAck(org.jgroups.Address,long,short)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.STABLE$StabilitySendTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:boolean setMergeId(org.jgroups.util.MergeId,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.NAKACK2:void sendXmitRsp(org.jgroups.Address,org.jgroups.Message)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.SHARED_LOOPBACK:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.FD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onResume(org.jgroups.Event)",
            "org.jgroups.protocols.TUNNEL:java.lang.Object handleDownEvent(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.STABLE:void handleStabilityMessage(org.jgroups.util.Digest,org.jgroups.Address)",
            "org.jgroups.protocols.Discovery:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeCancelledMessage(java.util.Collection,org.jgroups.util.MergeId)",
            "org.jgroups.stack.ProtocolStack:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:java.util.List findAllViews()",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.GMS:void sendViewAck(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.Merger$MergeTask:boolean getMergeDataFromSubgroupCoordinators(java.util.Map,org.jgroups.util.MergeId,long)",
            "org.jgroups.protocols.pbcast.STABLE:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.pbcast.FLUSH:void onFlushCompleted(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.FD$BroadcastTask:void run()",
            "org.jgroups.protocols.UNICAST3:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.STABLE$1:void run()",
            "org.jgroups.protocols.pbcast.Merger:org.jgroups.util.Digest fetchDigestsFromAllMembersInSubPartition(java.util.List,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void sendLeaveResponses(java.util.Collection)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:java.util.List findInitialMembers(org.jgroups.util.Promise)",
            "org.jgroups.protocols.Discovery$1:void run()",
            "org.jgroups.stack.RouterStubManager$1:void run()",
            "org.jgroups.protocols.DISCARD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void cancelMerge(org.jgroups.util.MergeId)",
            "org.jgroups.protocols.FD_ALL$HeartbeatSender:void run()",
            "org.jgroups.protocols.FlowControl:void sendCredit(org.jgroups.Address,long)",
            "org.jgroups.protocols.pbcast.NAKACK2:void send(org.jgroups.Event,org.jgroups.Message)",
            "org.jgroups.protocols.RSVP$Entry$1:void run()",
            "org.jgroups.protocols.MERGE2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void sendJoinMessage(org.jgroups.Address,org.jgroups.Address,boolean,boolean)",
            "org.jgroups.protocols.pbcast.FLUSH:void rejectFlush(java.util.Collection,long)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryResponse(org.jgroups.Address,java.util.List,boolean,boolean,java.lang.String,org.jgroups.Address)",
            "org.jgroups.protocols.FRAG2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:void sendResponse(org.jgroups.Address,short)",
            "org.jgroups.protocols.FlowControl:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void retransmit(org.jgroups.util.SeqnoList,org.jgroups.Address,boolean)",
            "org.jgroups.protocols.pbcast.GMS:void setDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.FRAG2:void fragment(org.jgroups.Message)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.UFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.FD:void sendHeartbeatResponse(org.jgroups.Address)",
            "org.jgroups.protocols.TRACE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.BARRIER:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD$Monitor:void run()"
        ]
    },
    "org.jgroups.protocols.BasicTCP:java.lang.Object handleDownEvent(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.TUNNEL:java.lang.Object handleDownEvent(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.TP:java.lang.Object down(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.UDP:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.TCP_NIO:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.TCP:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.TP:void evictLogicalAddressCache()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.TP$2:void run()"
        ]
    },
    "org.jgroups.protocols.pbcast.ClientGmsImpl:void joinWithStateTransfer(org.jgroups.Address,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object down(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.pbcast.ClientGmsImpl:void join(org.jgroups.Address,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object down(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.MPING:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.pbcast.FLUSH:void onStopFlush()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.pbcast.Merger:void _handleMergeRequest(org.jgroups.Address,org.jgroups.util.MergeId,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.Merger:void handleMergeRequest(org.jgroups.Address,org.jgroups.util.MergeId,java.util.Collection)"
        ]
    },
    "org.jgroups.util.TimeScheduler2$RecurringTask:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.TimeScheduler2$MyTask:void run()"
        ]
    },
    "org.jgroups.util.HashedTimingWheel$RecurringTask:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.HashedTimingWheel$MyTask:void run()"
        ]
    },
    "org.jgroups.util.TimeScheduler3$Task:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.TimeScheduler3$RecurringTask:void run()"
        ]
    },
    "org.jgroups.util.DefaultTimeScheduler$RobustRunnable:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.util.Util:void shutdown(org.jgroups.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.byteman.ForwardToCoordFailoverTest:void testSendingDuringViewChange()"
        ]
    },
    "org.jgroups.protocols.pbcast.CoordGmsImpl:void handleMergeCancelled(org.jgroups.util.MergeId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.pbcast.CoordGmsImpl:void suspect(org.jgroups.Address)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.pbcast.GMS$ViewHandler:void process(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.GMS$ViewHandler:void run()"
        ]
    },
    "org.jgroups.protocols.pbcast.ServerGmsImpl:void handleMergeView(org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.TP:void receive(org.jgroups.Address,byte[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.UDP$PacketReceiver:void run()",
            "org.jgroups.protocols.TUNNEL$StubReceiver:void run()",
            "org.jgroups.protocols.BasicTCP:void receive(org.jgroups.Address,byte[],int,int)"
        ]
    },
    "org.jgroups.protocols.pbcast.NAKACK2:void flushBecomeServerQueue()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object down(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.DAISYCHAIN:java.lang.Object down(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.pbcast.NAKACK:void flushBecomeServerQueue()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.NAKACK:java.lang.Object down(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.pbcast.ParticipantGmsImpl:void leave(org.jgroups.Address)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ParticipantGmsImpl:void leave(org.jgroups.Address)"
        ]
    },
    "org.jgroups.protocols.pbcast.STABLE:void handleUpEvent(org.jgroups.protocols.pbcast.STABLE$StableHeader,org.jgroups.Address)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.STABLE:void up(org.jgroups.util.MessageBatch)"
        ]
    },
    "org.jgroups.protocols.TCPPING:java.lang.Object down(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.Discovery:void sendDiscoveryRequest(java.lang.String,org.jgroups.util.Promise,org.jgroups.ViewId)"
        ]
    },
    "org.jgroups.protocols.FILE_PING:java.lang.Object down(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.FILE_PING$WriterTask:void run()",
            "org.jgroups.protocols.Discovery:void sendDiscoveryRequest(java.lang.String,org.jgroups.util.Promise,org.jgroups.ViewId)",
            "org.jgroups.protocols.FILE_PING:java.util.Collection fetchClusterMembers(java.lang.String)"
        ]
    },
    "org.jgroups.stack.RouterStubManager$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.TimeScheduler2$RecurringTask:void run()",
            "org.jgroups.util.HashedTimingWheel$RecurringTask:void run()",
            "org.jgroups.util.TimeScheduler3$Task:void run()",
            "org.jgroups.util.DefaultTimeScheduler$RobustRunnable:void run()"
        ]
    },
    "org.jgroups.protocols.TCPGOSSIP:java.util.Collection fetchClusterMembers(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.Discovery:void sendDiscoveryRequest(java.lang.String,org.jgroups.util.Promise,org.jgroups.ViewId)"
        ]
    },
    "org.jgroups.protocols.pbcast.Merger:void access$200(org.jgroups.protocols.pbcast.Merger,java.util.Collection,org.jgroups.util.MergeId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.Merger$MergeTask:void run()"
        ]
    },
    "org.jgroups.JChannel:java.lang.Object down(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.byteman.ForwardToCoordFailoverTest:void testSendingDuringViewChange()",
            "org.jgroups.JChannel:void _connect(org.jgroups.Event)",
            "org.jgroups.JChannel:void startFlush(boolean)",
            "org.jgroups.JChannel:void init()",
            "org.jgroups.blocks.locking.LockService$LockImpl:void lockInterruptibly()",
            "org.jgroups.JChannel:void stopFlush()",
            "org.jgroups.blocks.locking.LockService$LockImpl:boolean tryLock(long,java.util.concurrent.TimeUnit)",
            "org.jgroups.blocks.locking.LockService$ConditionImpl:void signal()",
            "org.jgroups.blocks.locking.LockService:void unlockAll()",
            "org.jgroups.JChannel:void send(org.jgroups.Message)",
            "org.jgroups.JChannel:void stopFlush(java.util.List)",
            "org.jgroups.blocks.executor.ExecutionRunner$1:void run()",
            "org.jgroups.tests.UUIDCacheClearTest:void clearCache(org.jgroups.JChannel[])",
            "org.jgroups.blocks.locking.LockService$ConditionImpl:long awaitNanos(long)",
            "org.jgroups.blocks.locking.LockService$ConditionImpl:void awaitUninterruptibly()",
            "org.jgroups.JChannel:void startFlush(java.util.List,boolean)",
            "org.jgroups.blocks.locking.LockService$ConditionImpl:void await()",
            "org.jgroups.blocks.executor.ExecutionService:java.util.List _realShutdown(boolean)",
            "org.jgroups.JChannel:void getState(org.jgroups.Address,long,java.util.concurrent.Callable)",
            "org.jgroups.JChannel$MyProbeHandler:java.util.Map handleProbe(java.lang.String[])",
            "org.jgroups.blocks.locking.LockService$LockImpl:boolean tryLock()",
            "org.jgroups.blocks.executor.ExecutionService:void execute(java.lang.Runnable)",
            "org.jgroups.blocks.MessageDispatcher$ProtocolAdapter:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.blocks.locking.LockService$LockImpl:void unlock()",
            "org.jgroups.JChannel:void disconnect()",
            "org.jgroups.JChannel:void setAddress()",
            "org.jgroups.blocks.locking.LockService$ConditionImpl:void signalAll()",
            "org.jgroups.blocks.executor.ExecutionService$DistributedFuture:boolean cancel(boolean)",
            "org.jgroups.blocks.locking.LockService$LockImpl:void lock()"
        ]
    },
    "org.jgroups.protocols.pbcast.FLUSH:void startFlush(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.FLUSH:void startFlush(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.UNICAST3:org.jgroups.protocols.UNICAST3$ReceiverEntry getReceiverEntry(org.jgroups.Address,long,boolean,short)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.UNICAST3:void handleDataReceived(org.jgroups.Address,long,short,boolean,org.jgroups.Message,org.jgroups.Event)"
        ]
    },
    "org.jgroups.util.TimeScheduler2$MyTask:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.TimeScheduler2$Entry:void execute()"
        ]
    },
    "org.jgroups.util.HashedTimingWheel$MyTask:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.util.ForwardQueue:void flushMessagesInForwardTable(org.jgroups.Address)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.ForwardQueue:void doFlush(org.jgroups.Address)"
        ]
    },
    "org.jgroups.protocols.TP$ProtocolAdapter:java.lang.Object down(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.RequestCorrelator:void sendResponse(org.jgroups.Message,long,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.RequestCorrelator$ResponseImpl:void send(org.jgroups.Message,boolean)",
            "org.jgroups.blocks.RequestCorrelator:void sendReply(org.jgroups.Message,long,java.lang.Object,boolean)"
        ]
    },
    "org.jgroups.blocks.RequestCorrelator:void sendUnicastRequest(long,org.jgroups.Address,org.jgroups.Message,org.jgroups.blocks.RspCollector)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.mux.MuxRequestCorrelator:void sendUnicastRequest(long,org.jgroups.Address,org.jgroups.Message,org.jgroups.blocks.RspCollector)",
            "org.jgroups.blocks.UnicastRequest:void sendRequest()"
        ]
    },
    "org.jgroups.util.ForwardQueue:void send(long,org.jgroups.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.FORWARD_TO_COORD:java.lang.Object down(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.DISCARD_PAYLOAD:java.lang.Object down(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.helpers.SequencerFailoverTestHelper$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.RequestCorrelator:void sendRequest(long,java.util.Collection,org.jgroups.Message,org.jgroups.blocks.RspCollector,org.jgroups.blocks.RequestOptions)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.RequestCorrelator:void sendRequest(long,java.util.List,org.jgroups.Message,org.jgroups.blocks.RspCollector)",
            "org.jgroups.blocks.GroupRequest:void sendRequest(java.util.Collection,long)",
            "org.jgroups.blocks.mux.MuxRequestCorrelator:void sendRequest(long,java.util.Collection,org.jgroups.Message,org.jgroups.blocks.RspCollector,org.jgroups.blocks.RequestOptions)"
        ]
    },
    "org.jgroups.protocols.pbcast.Merger$MergeTask:void _run(org.jgroups.util.MergeId,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.Merger$MergeTask:void run()"
        ]
    },
    "org.jgroups.protocols.pbcast.STABLE:void runMessageGarbageCollection()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.STABLE:void gc()"
        ]
    },
    "org.jgroups.protocols.pbcast.STABLE$StableTask:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.DefaultTimeScheduler$TaskWrapper:void run()",
            "org.jgroups.util.TimeScheduler2$RecurringTask:void run()",
            "org.jgroups.util.HashedTimingWheel$RecurringTask:void run()",
            "org.jgroups.util.TimeScheduler3$Task:void run()"
        ]
    },
    "org.jgroups.protocols.pbcast.STABLE:void handleRegularMessage(org.jgroups.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.pbcast.STABLE:void resetDigest()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.STABLE:void handleViewChange(org.jgroups.View)",
            "org.jgroups.protocols.pbcast.STABLE:boolean updateLocalDigest(org.jgroups.util.Digest,org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE:void handleStabilityMessage(org.jgroups.util.Digest,org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE:void resume()"
        ]
    },
    "org.jgroups.protocols.pbcast.CoordGmsImpl:void fixDigests()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.GMS:void fixDigests()"
        ]
    },
    "org.jgroups.protocols.pbcast.Merger:void access$500(org.jgroups.protocols.pbcast.Merger,java.util.Collection,org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.Merger$MergeTask:void _run(org.jgroups.util.MergeId,java.util.Collection)"
        ]
    },
    "org.jgroups.protocols.UNICAST3:void handleUpEvent(org.jgroups.Address,org.jgroups.Message,org.jgroups.protocols.UNICAST3$Header)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.UNICAST3:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.pbcast.Merger:void handleMergeRequest(org.jgroups.Address,org.jgroups.util.MergeId,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.ServerGmsImpl:void handleMergeRequest(org.jgroups.Address,org.jgroups.util.MergeId,java.util.Collection)"
        ]
    },
    "org.jgroups.protocols.FD_SOCK:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.pbcast.CoordGmsImpl:void init()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.GMS:void becomeCoordinator()",
            "org.jgroups.protocols.pbcast.GMS:void init()"
        ]
    },
    "org.jgroups.protocols.pbcast.Merger:void forceCancelMerge()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.GMS:void cancelMerge()"
        ]
    },
    "org.jgroups.protocols.pbcast.Merger$MergeKiller:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.TimeScheduler2$MyTask:void run()",
            "org.jgroups.util.HashedTimingWheel$MyTask:void run()",
            "org.jgroups.util.TimeScheduler3$Task:void run()"
        ]
    },
    "org.jgroups.protocols.FlowControl:void handleCreditRequest(java.util.Map,org.jgroups.Address,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.FlowControl:void handleUpEvent(org.jgroups.Message,org.jgroups.protocols.FcHeader)"
        ]
    },
    "org.jgroups.protocols.pbcast.GMS:org.jgroups.util.Tuple getViewAndDigest()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void handleMembershipChange(java.util.Collection)"
        ]
    },
    "org.jgroups.protocols.Discovery:java.util.List findMembers(org.jgroups.util.Promise,int,boolean,org.jgroups.ViewId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.Discovery:java.util.List findInitialMembers(org.jgroups.util.Promise)",
            "org.jgroups.protocols.Discovery:java.util.List findAllViews(org.jgroups.util.Promise)"
        ]
    },
    "org.jgroups.protocols.pbcast.FLUSH:void stopFlush()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.pbcast.FLUSH:void access$100(org.jgroups.protocols.pbcast.FLUSH,java.util.Collection,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.FLUSH$1:void run()",
            "org.jgroups.protocols.pbcast.FLUSH$2:void run()"
        ]
    },
    "org.jgroups.protocols.pbcast.NAKACK2:void triggerXmit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.NAKACK2$RetransmitTask:void run()"
        ]
    },
    "org.jgroups.protocols.pbcast.NAKACK2:void retransmit(long,long,org.jgroups.Address,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.NAKACK2:void rebroadcastMessages()",
            "org.jgroups.protocols.pbcast.NAKACK2:void retransmit(long,long,org.jgroups.Address)"
        ]
    },
    "org.jgroups.protocols.UNICAST3:void triggerXmit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.UNICAST3$RetransmitTask:void run()"
        ]
    },
    "org.jgroups.protocols.pbcast.NAKACK2:void handleXmitReq(org.jgroups.Address,org.jgroups.util.SeqnoList,org.jgroups.Address)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.NAKACK2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.TP$DefaultBundler:void sendBundledMessages(java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.TP$DefaultBundler:void access$1400(org.jgroups.protocols.TP$DefaultBundler,java.util.Map)",
            "org.jgroups.protocols.TP$DefaultBundler:void send(org.jgroups.Message)"
        ]
    },
    "org.jgroups.protocols.TP$TransferQueueBundler:void sendBundledMessages(java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.TP$TransferQueueBundler:void sendMessages()"
        ]
    },
    "org.jgroups.protocols.TP:void send(org.jgroups.Message,org.jgroups.Address,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.TP:java.lang.Object down(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.TUNNEL$StubReceiver$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.util.DefaultTimeScheduler$TaskWrapper:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.UUIDCacheClearTest:void testCacheClear()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.SHARED_LOOPBACK:java.lang.Object down(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.FD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onResume(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void handleFlushReconcile(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.FlowControl:void sendCreditRequest(org.jgroups.Address,java.lang.Long)",
            "org.jgroups.protocols.pbcast.ParticipantGmsImpl:void sendLeaveMessage(org.jgroups.Address,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE:void handleStabilityMessage(org.jgroups.util.Digest,org.jgroups.Address)",
            "org.jgroups.protocols.Discovery:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeCancelledMessage(java.util.Collection,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void joinInternal(org.jgroups.Address,boolean,boolean)",
            "org.jgroups.stack.ProtocolStack:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void mergeDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:java.util.List findAllViews()",
            "org.jgroups.protocols.pbcast.GmsImpl:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspend(java.util.List)",
            "org.jgroups.protocols.UNICAST3:void sendRequestForFirstSeqno(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery$2:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void onSuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK$BroadcastTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void handleMembershipChange(java.util.Collection)",
            "org.jgroups.protocols.pbcast.GMS:void sendJoinResponse(org.jgroups.protocols.pbcast.JoinRsp,org.jgroups.Address)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.GMS:void sendViewAck(org.jgroups.Address)",
            "org.jgroups.stack.Protocol:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void onStartFlush(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.Merger$MergeTask:boolean getMergeDataFromSubgroupCoordinators(java.util.Map,org.jgroups.util.MergeId,long)",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.pbcast.STABLE:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void fixDigests()",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.pbcast.FLUSH:void onFlushCompleted(org.jgroups.Address,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.pbcast.Merger:void handleMergeView(org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeView(java.util.Collection,org.jgroups.protocols.pbcast.MergeData,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspect(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object handleConnect(org.jgroups.Event,boolean)",
            "org.jgroups.protocols.FD$BroadcastTask:void run()",
            "org.jgroups.protocols.UNICAST3:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery:void sendMcastDiscoveryRequest(org.jgroups.Message)",
            "org.jgroups.protocols.UNICAST3:void handleResendingOfFirstMessage(org.jgroups.Address)",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeRejectedResponse(org.jgroups.Address,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.STABLE$1:void run()",
            "org.jgroups.protocols.pbcast.Merger:org.jgroups.util.Digest fetchDigestsFromAllMembersInSubPartition(java.util.List,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.CoordGmsImpl:void sendLeaveResponses(java.util.Collection)",
            "org.jgroups.protocols.FD_SOCK:void sendIHaveSockMessage(org.jgroups.Address,org.jgroups.Address,org.jgroups.stack.IpAddress)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:java.util.List findInitialMembers(org.jgroups.util.Promise)",
            "org.jgroups.protocols.Discovery$1:void run()",
            "org.jgroups.protocols.DISCARD:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:void cancelMerge(org.jgroups.util.MergeId)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL$HeartbeatSender:void run()",
            "org.jgroups.protocols.FlowControl:void sendCredit(org.jgroups.Address,long)",
            "org.jgroups.protocols.pbcast.Merger:void sendMergeResponse(org.jgroups.Address,org.jgroups.View,org.jgroups.util.Digest,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.GMS:org.jgroups.util.Digest getDigest()",
            "org.jgroups.protocols.pbcast.NAKACK2:void send(org.jgroups.Event,org.jgroups.Message)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryRequest(java.lang.String,org.jgroups.util.Promise,org.jgroups.ViewId)",
            "org.jgroups.protocols.RSVP$Entry$1:void run()",
            "org.jgroups.protocols.pbcast.FLUSH:void handleStartFlush(org.jgroups.Message,org.jgroups.protocols.pbcast.FLUSH$FlushHeader)",
            "org.jgroups.protocols.MERGE2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.UNICAST3:void handleXmitRequest(org.jgroups.Address,org.jgroups.util.SeqnoList)",
            "org.jgroups.protocols.MFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void sendJoinMessage(org.jgroups.Address,org.jgroups.Address,boolean,boolean)",
            "org.jgroups.protocols.pbcast.FLUSH:void rejectFlush(java.util.Collection,long)",
            "org.jgroups.protocols.Discovery:void sendDiscoveryResponse(org.jgroups.Address,java.util.List,boolean,boolean,java.lang.String,org.jgroups.Address)",
            "org.jgroups.protocols.FRAG2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:void sendResponse(org.jgroups.Address,short)",
            "org.jgroups.protocols.FlowControl:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void retransmit(org.jgroups.util.SeqnoList,org.jgroups.Address,boolean)",
            "org.jgroups.protocols.UNICAST3:void sendAck(org.jgroups.Address,long,short)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void setDigest(org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.STABLE$StabilitySendTask:void run()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.Merger:boolean setMergeId(org.jgroups.util.MergeId,org.jgroups.util.MergeId)",
            "org.jgroups.protocols.pbcast.NAKACK2:void sendXmitRsp(org.jgroups.Address,org.jgroups.Message)",
            "org.jgroups.protocols.FRAG2:void fragment(org.jgroups.Message)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.RSVP:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.UFC:java.lang.Object handleDownMessage(org.jgroups.Event,org.jgroups.Message,org.jgroups.Address,int)",
            "org.jgroups.protocols.FD:void sendHeartbeatResponse(org.jgroups.Address)",
            "org.jgroups.protocols.TRACE:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.BARRIER:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.FD$Monitor:void run()"
        ]
    },
    "org.jgroups.protocols.TP$2:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.TimeScheduler2$RecurringTask:void run()",
            "org.jgroups.util.HashedTimingWheel$RecurringTask:void run()",
            "org.jgroups.util.TimeScheduler3$Task:void run()",
            "org.jgroups.util.DefaultTimeScheduler$RobustRunnable:void run()"
        ]
    },
    "org.jgroups.util.TimeScheduler3$RecurringTask:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.byteman.ForwardToCoordFailoverTest:void testSendingDuringViewChange()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.pbcast.GMS$ViewHandler:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.UDP$PacketReceiver:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.TUNNEL$StubReceiver:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.BasicTCP:void receive(org.jgroups.Address,byte[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.TCPConnectionMap:void receive(org.jgroups.Address,byte[],int,int)",
            "org.jgroups.blocks.TCPConnectionMap$TCPConnection$Receiver:void run()",
            "org.jgroups.blocks.BasicConnectionTable:void receive(org.jgroups.Address,byte[],int,int)"
        ]
    },
    "org.jgroups.protocols.pbcast.NAKACK:java.lang.Object down(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.FILE_PING$WriterTask:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.TimeScheduler2$RecurringTask:void run()",
            "org.jgroups.util.HashedTimingWheel$RecurringTask:void run()",
            "org.jgroups.util.TimeScheduler3$Task:void run()",
            "org.jgroups.util.DefaultTimeScheduler$RobustRunnable:void run()"
        ]
    },
    "org.jgroups.protocols.FILE_PING:java.util.Collection fetchClusterMembers(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.Discovery:void sendDiscoveryRequest(java.lang.String,org.jgroups.util.Promise,org.jgroups.ViewId)"
        ]
    },
    "org.jgroups.JChannel:void _connect(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.JChannel:void connect(java.lang.String,org.jgroups.Address,long,boolean)",
            "org.jgroups.JChannel:void connect(java.lang.String,boolean)"
        ]
    },
    "org.jgroups.JChannel:void startFlush(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.Util:boolean startFlush(org.jgroups.Channel,int,long,long)"
        ]
    },
    "org.jgroups.JChannel:void init()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.JChannel:void _connect(org.jgroups.Event)",
            "org.jgroups.JChannel:void disconnect()",
            "org.jgroups.JChannel:void _close(boolean)"
        ]
    },
    "org.jgroups.blocks.locking.LockService$LockImpl:void lockInterruptibly()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.JChannel:void stopFlush()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.JChannel:void getState(org.jgroups.Address,long,java.util.concurrent.Callable)",
            "org.jgroups.JChannel:void connect(java.lang.String,org.jgroups.Address,long,boolean)",
            "org.jgroups.JChannel:void startFlush(boolean)"
        ]
    },
    "org.jgroups.blocks.locking.LockService$LockImpl:boolean tryLock(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.RpcLockingTest:void testCoordReceiveFirst()",
            "org.jgroups.tests.byteman.LockServiceConcurrencyTest:void testConcurrentClientLocks()",
            "org.jgroups.demos.LockServiceDemo:void loop()"
        ]
    },
    "org.jgroups.blocks.locking.LockService$ConditionImpl:void signal()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.locking.LockService:void unlockAll()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.LockServiceDemo:void loop()",
            "org.jgroups.tests.byteman.LockServiceConcurrencyTest:void destroy()"
        ]
    },
    "org.jgroups.JChannel:void send(org.jgroups.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.applets.DrawApplet:void mouseDragged(java.awt.event.MouseEvent)",
            "org.jgroups.protocols.RELAY$RemoteViewFetcher:void run()",
            "org.jgroups.demos.RelayDemo$1:void receive(org.jgroups.Message)",
            "org.jgroups.protocols.RELAY$2:void run()",
            "org.jgroups.blocks.ReplicatedTree:void put(java.lang.String,java.util.HashMap)",
            "org.jgroups.demos.applets.DrawApplet:void sendClearPanelMsg()",
            "org.jgroups.demos.Chat:void eventLoop()",
            "org.jgroups.tests.byteman.ForwardToCoordFailoverTest$MySender:void run()",
            "org.jgroups.protocols.relay.Relayer$Bridge:void flushQueue(short,org.jgroups.protocols.relay.Relayer$Route)",
            "org.jgroups.demos.TotalOrder$2:void actionPerformed(java.awt.event.ActionEvent)",
            "org.jgroups.tests.RSVPTest:void testSynchronousUnicastSend()",
            "org.jgroups.protocols.RELAY:void sendViewToRemote(org.jgroups.protocols.RELAY$ViewData,boolean)",
            "org.jgroups.tests.DiscardTest:void _testLosslessReception(boolean)",
            "org.jgroups.blocks.ReplicatedTree:void remove(java.lang.String,java.lang.String)",
            "org.jgroups.protocols.RELAY:void forward(byte[],int,int)",
            "org.jgroups.demos.TotalOrder$SenderThread:void run()",
            "org.jgroups.tests.FifoOrderTest$Sender:void run()",
            "org.jgroups.blocks.ReplicatedTree:void put(java.lang.String,java.lang.String,java.lang.Object)",
            "org.jgroups.blocks.ReplicatedTree:void remove(java.lang.String)",
            "org.jgroups.tests.RSVPTest:void testSynchronousMulticastSend()",
            "org.jgroups.tests.byteman.BecomeServerTest:void sendMessage(org.jgroups.JChannel,java.lang.String)",
            "org.jgroups.demos.Draw:void sendToAll(byte[])",
            "org.jgroups.JChannel:void send(org.jgroups.Address,byte[],int,int)",
            "org.jgroups.tests.RSVPTest:void testCancellationByClosingChannel()",
            "org.jgroups.JChannel:void send(org.jgroups.Address,byte[])",
            "org.jgroups.JChannel:void send(org.jgroups.Address,java.lang.Object)",
            "org.jgroups.tests.TestToaOrder:void sendMessages()",
            "org.jgroups.demos.Draw:void sendClearPanelMsg()",
            "org.jgroups.demos.Draw$DrawPanel:void mouseDragged(java.awt.event.MouseEvent)",
            "org.jgroups.protocols.relay.Relayer$Route:void send(short,org.jgroups.Address,org.jgroups.Address,org.jgroups.Message)"
        ]
    },
    "org.jgroups.JChannel:void stopFlush(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.JChannel:void startFlush(java.util.List,boolean)"
        ]
    },
    "org.jgroups.blocks.executor.ExecutionRunner$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.locking.LockService$ConditionImpl:long awaitNanos(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.locking.LockService$ConditionImpl:boolean await(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.jgroups.blocks.locking.LockService$ConditionImpl:void awaitUninterruptibly()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.JChannel:void startFlush(java.util.List,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.locking.LockService$ConditionImpl:void await()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.executor.ExecutionService:java.util.List _realShutdown(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.executor.ExecutionService:void shutdown()",
            "org.jgroups.blocks.executor.ExecutionService:java.util.List shutdownNow()"
        ]
    },
    "org.jgroups.JChannel:void getState(org.jgroups.Address,long,java.util.concurrent.Callable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.JChannel:void getState(org.jgroups.Address,long,boolean)"
        ]
    },
    "org.jgroups.JChannel$MyProbeHandler:java.util.Map handleProbe(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.locking.LockService$LockImpl:boolean tryLock()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.RpcLockingTest$1:java.lang.Object handle(org.jgroups.Message)",
            "org.jgroups.blocks.RpcLockingTest:void testCoordReceiveFirst()",
            "org.jgroups.blocks.RpcLockingTest:void testCoordSendFirst()",
            "org.jgroups.blocks.RpcLockingTest$2:java.lang.Object handle(org.jgroups.Message)",
            "org.jgroups.demos.LockServiceDemo:void loop()"
        ]
    },
    "org.jgroups.blocks.executor.ExecutionService:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.MessageDispatcher$ProtocolAdapter:java.lang.Object down(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.RequestCorrelator:void sendRequest(long,java.util.Collection,org.jgroups.Message,org.jgroups.blocks.RspCollector,org.jgroups.blocks.RequestOptions)",
            "org.jgroups.blocks.RequestCorrelator:void sendResponse(org.jgroups.Message,long,boolean)",
            "org.jgroups.blocks.RequestCorrelator:void sendUnicastRequest(long,org.jgroups.Address,org.jgroups.Message,org.jgroups.blocks.RspCollector)"
        ]
    },
    "org.jgroups.blocks.locking.LockService$LockImpl:void unlock()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.RpcLockingTest:void testCoordReceiveFirst()",
            "org.jgroups.blocks.RpcLockingTest:void testCoordSendFirst()",
            "org.jgroups.demos.LockServiceDemo:void loop()"
        ]
    },
    "org.jgroups.JChannel:void disconnect()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.TotalOrder$5:void actionPerformed(java.awt.event.ActionEvent)",
            "org.jgroups.JChannel:void _close(boolean)"
        ]
    },
    "org.jgroups.JChannel:void setAddress()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.JChannel:boolean _preConnect(java.lang.String)"
        ]
    },
    "org.jgroups.blocks.locking.LockService$ConditionImpl:void signalAll()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.executor.ExecutionService$DistributedFuture:boolean cancel(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.locking.LockService$LockImpl:void lock()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.LockServiceDemo:void loop()"
        ]
    },
    "org.jgroups.protocols.pbcast.FLUSH:void startFlush(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.FLUSH:void startFlush()",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.util.TimeScheduler2$Entry:void execute()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.TimeScheduler2$1:void run()"
        ]
    },
    "org.jgroups.util.ForwardQueue:void doFlush(org.jgroups.Address)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.ForwardQueue$Flusher:void run()"
        ]
    },
    "org.jgroups.blocks.RequestCorrelator$ResponseImpl:void send(org.jgroups.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.RequestCorrelator:void sendReply(org.jgroups.Message,long,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.RequestCorrelator$ResponseImpl:void send(java.lang.Object,boolean)",
            "org.jgroups.blocks.RequestCorrelator:void handleRequest(org.jgroups.Message,org.jgroups.blocks.RequestCorrelator$Header)"
        ]
    },
    "org.jgroups.blocks.mux.MuxRequestCorrelator:void sendUnicastRequest(long,org.jgroups.Address,org.jgroups.Message,org.jgroups.blocks.RspCollector)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.UnicastRequest:void sendRequest()"
        ]
    },
    "org.jgroups.blocks.UnicastRequest:void sendRequest()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.Request:boolean execute()"
        ]
    },
    "org.jgroups.protocols.FORWARD_TO_COORD:java.lang.Object down(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.RequestCorrelator:void sendRequest(long,java.util.List,org.jgroups.Message,org.jgroups.blocks.RspCollector)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.GroupRequest:void sendRequest(java.util.Collection,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.GroupRequest:void sendRequest()"
        ]
    },
    "org.jgroups.blocks.mux.MuxRequestCorrelator:void sendRequest(long,java.util.Collection,org.jgroups.Message,org.jgroups.blocks.RspCollector,org.jgroups.blocks.RequestOptions)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.GroupRequest:void sendRequest(java.util.Collection,long)"
        ]
    },
    "org.jgroups.protocols.pbcast.STABLE:void gc()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.pbcast.STABLE:void handleViewChange(org.jgroups.View)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object down(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.pbcast.STABLE:boolean updateLocalDigest(org.jgroups.util.Digest,org.jgroups.Address)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.STABLE:void handleStableMessage(org.jgroups.util.Digest,org.jgroups.Address)"
        ]
    },
    "org.jgroups.protocols.pbcast.STABLE:void resume()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.STABLE$ResumeTask:void run()",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object down(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.pbcast.GMS:void fixDigests()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.GMS:java.util.Map handleProbe(java.lang.String[])"
        ]
    },
    "org.jgroups.protocols.pbcast.ServerGmsImpl:void handleMergeRequest(org.jgroups.Address,org.jgroups.util.MergeId,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.pbcast.GMS:void becomeCoordinator()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.ParticipantGmsImpl:void leave(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.ParticipantGmsImpl:void handleMembershipChange(java.util.Collection)"
        ]
    },
    "org.jgroups.protocols.pbcast.GMS:void init()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.pbcast.GMS:void cancelMerge()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.FlowControl:void handleUpEvent(org.jgroups.Message,org.jgroups.protocols.FcHeader)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.FlowControl:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FlowControl:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.Discovery:java.util.List findInitialMembers(org.jgroups.util.Promise)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.Discovery:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.Discovery:java.lang.String findInitialMembersAsString()"
        ]
    },
    "org.jgroups.protocols.Discovery:java.util.List findAllViews(org.jgroups.util.Promise)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.Discovery:java.lang.String findAllViewsAsString()",
            "org.jgroups.protocols.Discovery:java.lang.Object down(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.pbcast.FLUSH$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.pbcast.FLUSH$2:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.pbcast.NAKACK2$RetransmitTask:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.TimeScheduler2$RecurringTask:void run()",
            "org.jgroups.util.HashedTimingWheel$RecurringTask:void run()",
            "org.jgroups.util.TimeScheduler3$Task:void run()",
            "org.jgroups.util.DefaultTimeScheduler$RobustRunnable:void run()"
        ]
    },
    "org.jgroups.protocols.pbcast.NAKACK2:void rebroadcastMessages()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object down(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.pbcast.NAKACK2:void retransmit(long,long,org.jgroups.Address)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.NAKACK2:void stable(org.jgroups.util.Digest)"
        ]
    },
    "org.jgroups.protocols.UNICAST3$RetransmitTask:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.TimeScheduler2$RecurringTask:void run()",
            "org.jgroups.util.HashedTimingWheel$RecurringTask:void run()",
            "org.jgroups.util.TimeScheduler3$Task:void run()",
            "org.jgroups.util.DefaultTimeScheduler$RobustRunnable:void run()"
        ]
    },
    "org.jgroups.protocols.TP$DefaultBundler:void access$1400(org.jgroups.protocols.TP$DefaultBundler,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.TP$DefaultBundler$BundlingTimer:void run()"
        ]
    },
    "org.jgroups.protocols.TP$DefaultBundler:void send(org.jgroups.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.TP:void send(org.jgroups.Message,org.jgroups.Address,boolean)"
        ]
    },
    "org.jgroups.protocols.TP$TransferQueueBundler:void sendMessages()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.TP$TransferQueueBundler:void run()"
        ]
    },
    "org.jgroups.blocks.TCPConnectionMap:void receive(org.jgroups.Address,byte[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.TCPConnectionMap:void send(org.jgroups.Address,byte[],int,int)"
        ]
    },
    "org.jgroups.blocks.TCPConnectionMap$TCPConnection$Receiver:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.BasicConnectionTable:void receive(org.jgroups.Address,byte[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.BasicConnectionTable:void send(org.jgroups.Address,byte[],int,int)",
            "org.jgroups.blocks.BasicConnectionTable$Connection:void run()",
            "org.jgroups.blocks.ConnectionTableNIO$ExecuteTask:void run()"
        ]
    },
    "org.jgroups.JChannel:void connect(java.lang.String,org.jgroups.Address,long,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.JChannel:void connect(java.lang.String,org.jgroups.Address,long)"
        ]
    },
    "org.jgroups.JChannel:void connect(java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.JChannel:void connect(java.lang.String)"
        ]
    },
    "org.jgroups.util.Util:boolean startFlush(org.jgroups.Channel,int,long,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.Util:boolean startFlush(org.jgroups.Channel)"
        ]
    },
    "org.jgroups.JChannel:void _close(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.JChannel:void close()"
        ]
    },
    "org.jgroups.blocks.RpcLockingTest:void testCoordReceiveFirst()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.byteman.LockServiceConcurrencyTest:void testConcurrentClientLocks()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.LockServiceDemo:void loop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.LockServiceDemo:void start()"
        ]
    },
    "org.jgroups.tests.byteman.LockServiceConcurrencyTest:void destroy()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.applets.DrawApplet:void mouseDragged(java.awt.event.MouseEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.RELAY$RemoteViewFetcher:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.TimeScheduler2$RecurringTask:void run()",
            "org.jgroups.util.HashedTimingWheel$RecurringTask:void run()",
            "org.jgroups.util.TimeScheduler3$Task:void run()",
            "org.jgroups.util.DefaultTimeScheduler$RobustRunnable:void run()"
        ]
    },
    "org.jgroups.demos.RelayDemo$1:void receive(org.jgroups.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.JChannel:java.lang.Object invokeCallback(int,java.lang.Object)",
            "org.jgroups.JChannel:void up(org.jgroups.util.MessageBatch)"
        ]
    },
    "org.jgroups.protocols.RELAY$2:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.TimeScheduler2$MyTask:void run()",
            "org.jgroups.util.HashedTimingWheel$MyTask:void run()",
            "org.jgroups.util.TimeScheduler3$Task:void run()"
        ]
    },
    "org.jgroups.blocks.ReplicatedTree:void put(java.lang.String,java.util.HashMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.ReplicatedTree:void main(java.lang.String[])"
        ]
    },
    "org.jgroups.demos.applets.DrawApplet:void sendClearPanelMsg()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.applets.DrawApplet:void actionPerformed(java.awt.event.ActionEvent)"
        ]
    },
    "org.jgroups.demos.Chat:void eventLoop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.Chat:void start(java.lang.String,java.lang.String)"
        ]
    },
    "org.jgroups.tests.byteman.ForwardToCoordFailoverTest$MySender:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.relay.Relayer$Bridge:void flushQueue(short,org.jgroups.protocols.relay.Relayer$Route)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.relay.Relayer$Bridge$2:void run()"
        ]
    },
    "org.jgroups.demos.TotalOrder$2:void actionPerformed(java.awt.event.ActionEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.RSVPTest:void testSynchronousUnicastSend()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.RELAY:void sendViewToRemote(org.jgroups.protocols.RELAY$ViewData,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.RELAY$Receiver:void receive(org.jgroups.Message)",
            "org.jgroups.protocols.RELAY:void handleView(org.jgroups.View)"
        ]
    },
    "org.jgroups.tests.DiscardTest:void _testLosslessReception(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.DiscardTest:void testFastProperties()",
            "org.jgroups.tests.DiscardTest:void testDiscardProperties()"
        ]
    },
    "org.jgroups.blocks.ReplicatedTree:void remove(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.RELAY:void forward(byte[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.RELAY:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.RELAY:void forwardToCoord(org.jgroups.Message)",
            "org.jgroups.protocols.RELAY:java.lang.Object handleUpEvent(org.jgroups.Message,org.jgroups.protocols.RELAY$RelayHeader)",
            "org.jgroups.protocols.RELAY:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.demos.TotalOrder$SenderThread:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.FifoOrderTest$Sender:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.ReplicatedTree:void put(java.lang.String,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.ReplicatedTree:void main(java.lang.String[])"
        ]
    },
    "org.jgroups.blocks.ReplicatedTree:void remove(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.ReplicatedTree:void main(java.lang.String[])"
        ]
    },
    "org.jgroups.tests.RSVPTest:void testSynchronousMulticastSend()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.byteman.BecomeServerTest:void sendMessage(org.jgroups.JChannel,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.byteman.BecomeServerTest$2:void run()"
        ]
    },
    "org.jgroups.demos.Draw:void sendToAll(byte[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.Draw:void sendClearPanelMsg()",
            "org.jgroups.demos.Draw:void access$200(org.jgroups.demos.Draw,byte[])"
        ]
    },
    "org.jgroups.JChannel:void send(org.jgroups.Address,byte[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.RSVPTest:void testCancellationByClosingChannel()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.JChannel:void send(org.jgroups.Address,byte[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.JChannel:void send(org.jgroups.Address,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.ProgrammaticChat:void main(java.lang.String[])",
            "org.jgroups.demos.RelayDemo:void main(java.lang.String[])",
            "org.jgroups.tests.UUIDCacheClearTest:void testCacheClear()",
            "org.jgroups.tests.TransportThreadPoolTest:void testThreadPoolReplacement()",
            "org.jgroups.tests.TestToaOrder:void awaitUntilAllFinishes()",
            "org.jgroups.tests.byteman.BecomeServerTest$3:void receive(org.jgroups.Message)"
        ]
    },
    "org.jgroups.tests.TestToaOrder:void sendMessages()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.TestToaOrder:void startTest()"
        ]
    },
    "org.jgroups.demos.Draw:void sendClearPanelMsg()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.Draw:void actionPerformed(java.awt.event.ActionEvent)"
        ]
    },
    "org.jgroups.demos.Draw$DrawPanel:void mouseDragged(java.awt.event.MouseEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.relay.Relayer$Route:void send(short,org.jgroups.Address,org.jgroups.Address,org.jgroups.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.relay.RELAY2:void route(org.jgroups.protocols.relay.SiteAddress,org.jgroups.protocols.relay.SiteAddress,org.jgroups.Message)"
        ]
    },
    "org.jgroups.blocks.locking.LockService$ConditionImpl:boolean await(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.locking.LockService$ConditionImpl:boolean awaitUntil(java.util.Date)"
        ]
    },
    "org.jgroups.blocks.executor.ExecutionService:void shutdown()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.executor.ExecutionService:java.util.List shutdownNow()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.JChannel:void getState(org.jgroups.Address,long,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.JChannel:void getState(org.jgroups.Address,long)",
            "org.jgroups.JChannel:void connect(java.lang.String,org.jgroups.Address,long,boolean)"
        ]
    },
    "org.jgroups.blocks.RpcLockingTest$1:java.lang.Object handle(org.jgroups.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.MessageDispatcher:void handle(org.jgroups.Message,org.jgroups.blocks.Response)",
            "org.jgroups.blocks.MessageDispatcher:java.lang.Object handle(org.jgroups.Message)"
        ]
    },
    "org.jgroups.blocks.RpcLockingTest:void testCoordSendFirst()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.RpcLockingTest$2:java.lang.Object handle(org.jgroups.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.MessageDispatcher:void handle(org.jgroups.Message,org.jgroups.blocks.Response)",
            "org.jgroups.blocks.MessageDispatcher:java.lang.Object handle(org.jgroups.Message)"
        ]
    },
    "org.jgroups.demos.TotalOrder$5:void actionPerformed(java.awt.event.ActionEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.JChannel:boolean _preConnect(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.JChannel:void connect(java.lang.String,org.jgroups.Address,long,boolean)",
            "org.jgroups.JChannel:void connect(java.lang.String,boolean)"
        ]
    },
    "org.jgroups.protocols.pbcast.FLUSH:void startFlush()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.util.TimeScheduler2$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.util.ForwardQueue$Flusher:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.RequestCorrelator$ResponseImpl:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.MessageDispatcher:void handle(org.jgroups.Message,org.jgroups.blocks.Response)",
            "org.jgroups.blocks.RequestCorrelator:void handleRequest(org.jgroups.Message,org.jgroups.blocks.RequestCorrelator$Header)"
        ]
    },
    "org.jgroups.blocks.RequestCorrelator:void handleRequest(org.jgroups.Message,org.jgroups.blocks.RequestCorrelator$Header)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.RequestCorrelator:boolean receiveMessage(org.jgroups.Message)"
        ]
    },
    "org.jgroups.blocks.Request:boolean execute()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.MessageDispatcher:java.lang.Object sendMessage(org.jgroups.Message,org.jgroups.blocks.RequestOptions)",
            "org.jgroups.blocks.MessageDispatcher:org.jgroups.blocks.GroupRequest cast(java.util.Collection,org.jgroups.Message,org.jgroups.blocks.RequestOptions,boolean,org.jgroups.util.FutureListener)",
            "org.jgroups.blocks.MessageDispatcher:org.jgroups.util.NotifyingFuture sendMessageWithFuture(org.jgroups.Message,org.jgroups.blocks.RequestOptions,org.jgroups.util.FutureListener)"
        ]
    },
    "org.jgroups.blocks.GroupRequest:void sendRequest()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.Request:boolean execute()"
        ]
    },
    "org.jgroups.protocols.pbcast.STABLE:void handleStableMessage(org.jgroups.util.Digest,org.jgroups.Address)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.STABLE:void handleUpEvent(org.jgroups.protocols.pbcast.STABLE$StableHeader,org.jgroups.Address)"
        ]
    },
    "org.jgroups.protocols.pbcast.STABLE$ResumeTask:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.TimeScheduler2$MyTask:void run()",
            "org.jgroups.util.HashedTimingWheel$MyTask:void run()",
            "org.jgroups.util.TimeScheduler3$Task:void run()"
        ]
    },
    "org.jgroups.protocols.pbcast.GMS:java.util.Map handleProbe(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.pbcast.ParticipantGmsImpl:void handleMembershipChange(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.GMS$ViewHandler:void process(java.util.List)",
            "org.jgroups.protocols.pbcast.ParticipantGmsImpl:void suspect(org.jgroups.Address)"
        ]
    },
    "org.jgroups.protocols.Discovery:java.lang.String findInitialMembersAsString()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.Discovery:java.lang.String findAllViewsAsString()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.pbcast.NAKACK2:void stable(org.jgroups.util.Digest)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.TP$DefaultBundler$BundlingTimer:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.TimeScheduler2$MyTask:void run()",
            "org.jgroups.util.HashedTimingWheel$MyTask:void run()",
            "org.jgroups.util.TimeScheduler3$Task:void run()"
        ]
    },
    "org.jgroups.protocols.TP$TransferQueueBundler:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.TCPConnectionMap:void send(org.jgroups.Address,byte[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.TCP:void send(org.jgroups.Address,byte[],int,int)"
        ]
    },
    "org.jgroups.blocks.BasicConnectionTable:void send(org.jgroups.Address,byte[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.TCP_NIO:void send(org.jgroups.Address,byte[],int,int)"
        ]
    },
    "org.jgroups.blocks.BasicConnectionTable$Connection:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.ConnectionTableNIO$ExecuteTask:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.ConnectionTableNIO$1:void execute(java.lang.Runnable)"
        ]
    },
    "org.jgroups.JChannel:void connect(java.lang.String,org.jgroups.Address,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.Draw:void go()"
        ]
    },
    "org.jgroups.JChannel:void connect(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.MessageDispatcherUnitTest:void testNullMessageToAll()",
            "org.jgroups.tests.byteman.ForwardToCoordFailoverTest:org.jgroups.JChannel createChannel(java.lang.String,java.lang.String)",
            "org.jgroups.demos.CounterServiceDemo:void start(java.lang.String,java.lang.String)",
            "org.jgroups.blocks.ReplicatedTree:void <init>(java.lang.String,java.lang.String,long)",
            "org.jgroups.tests.UUIDCacheClearTest:void testCacheClear()",
            "org.jgroups.blocks.ReplCache:void start()",
            "org.jgroups.tests.DynamicDiscardTest:void testLeaveDuringSend()",
            "org.jgroups.tests.MessageDispatcherUnitTest:void testCastMessageWithNonNullDest()",
            "org.jgroups.demos.applets.DrawApplet:void init()",
            "org.jgroups.tests.byteman.BecomeServerTest:void testSendingOfMsgsOnUnconnectedChannel()",
            "org.jgroups.demos.ViewDemo:void start(java.lang.String)",
            "org.jgroups.demos.TotalOrder:void <init>(java.lang.String,long,int,int,java.lang.String,int)",
            "org.jgroups.blocks.PartitionedHashMap:void start()",
            "org.jgroups.protocols.RELAY:void createBridge()",
            "org.jgroups.protocols.relay.Relayer$Bridge:void start()",
            "org.jgroups.demos.RelayDemo:void main(java.lang.String[])",
            "org.jgroups.tests.perf.UPerf:void init(java.lang.String,java.lang.String,boolean)",
            "org.jgroups.tests.ReplicatedHashMapTest:void setUp()",
            "org.jgroups.tests.byteman.LockServiceConcurrencyTest:void init()",
            "org.jgroups.demos.QuoteClient:void <init>()",
            "org.jgroups.demos.ReplicatedHashMapDemo:void main(java.lang.String[])",
            "org.jgroups.blocks.RpcDispatcherSerializationTest:void setUp()",
            "org.jgroups.demos.LockServiceDemo:void start()",
            "org.jgroups.demos.RelayDemoRpc:void start(java.lang.String,java.lang.String)",
            "org.jgroups.demos.wb.Whiteboard:void init()",
            "org.jgroups.tests.ConcurrentCloseTest:void testConcurrentClose()",
            "org.jgroups.demos.ProgrammaticChat:void main(java.lang.String[])",
            "org.jgroups.tests.DiscardTest:void _testLosslessReception(boolean)",
            "org.jgroups.tests.RSVPTest:void setUp()",
            "org.jgroups.tests.LargeStateTransferTest:void _testStateTransfer(int,java.lang.String)",
            "org.jgroups.blocks.ReplicatedTree:void <init>(java.lang.String,java.lang.String,long,boolean)",
            "org.jgroups.blocks.RpcLockingTest:void setUp()",
            "org.jgroups.tests.TestToaOrder:void createJChannel()",
            "org.jgroups.tests.LargeState:void start(boolean,int,java.lang.String,boolean,boolean,long,java.lang.String)",
            "org.jgroups.demos.Topology:void start()",
            "org.jgroups.tests.StateTransferTest2:void createStateProviderAndRequesterChannels(java.lang.Class)",
            "org.jgroups.tests.MessageDispatcherRSVPTest:void setUp()",
            "org.jgroups.demos.Draw:void go()",
            "org.jgroups.tests.MessageDispatcherUnitTest:void setUp()",
            "org.jgroups.tests.MessageDispatcherUnitTest:void sendMessageToBothChannels(int)",
            "org.jgroups.demos.PubSub:void start(java.lang.String)",
            "org.jgroups.demos.ExecutionServiceDemo:void start()",
            "org.jgroups.demos.Chat:void start(java.lang.String,java.lang.String)",
            "org.jgroups.tests.TransportThreadPoolTest:void testThreadPoolReplacement()",
            "org.jgroups.tests.FifoOrderTest:void testFifoDelivery()",
            "org.jgroups.demos.QuoteServer:void start()"
        ]
    },
    "org.jgroups.util.Util:boolean startFlush(org.jgroups.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.JChannel$1:java.lang.Boolean call()"
        ]
    },
    "org.jgroups.JChannel:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.ReplCache:void stop()",
            "org.jgroups.tests.RSVPTest$1:void run()",
            "org.jgroups.blocks.PartitionedHashMap:void stop()",
            "org.jgroups.demos.TotalOrder$5:void actionPerformed(java.awt.event.ActionEvent)",
            "org.jgroups.demos.QuoteClient:void actionPerformed(java.awt.event.ActionEvent)",
            "org.jgroups.tests.perf.UPerf:void eventLoop()",
            "org.jgroups.demos.Topology:void windowClosing(java.awt.event.WindowEvent)",
            "org.jgroups.tests.ConcurrentCloseTest$Closer:void run()",
            "org.jgroups.demos.applets.DrawApplet:void destroy()",
            "org.jgroups.demos.Draw:void stop()",
            "org.jgroups.util.Util:void close(org.jgroups.Channel)",
            "org.jgroups.tests.MessageDispatcherUnitTest:void closeSecondChannel()",
            "org.jgroups.tests.TestToaOrder:void closeJChannel()",
            "org.jgroups.blocks.ReplicatedHashMap:void stop()",
            "org.jgroups.tests.MessageDispatcherRSVPTest:void sendMessageOnClosedChannel(org.jgroups.Message)",
            "org.jgroups.demos.Chat:void start(java.lang.String,java.lang.String)",
            "org.jgroups.demos.wb.Whiteboard:void destroy()",
            "org.jgroups.tests.MessageDispatcherUnitTest:void tearDown()",
            "org.jgroups.blocks.RpcDispatcherSerializationTest:void tearDown()"
        ]
    },
    "org.jgroups.demos.LockServiceDemo:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.LockServiceDemo:void main(java.lang.String[])"
        ]
    },
    "org.jgroups.JChannel:java.lang.Object invokeCallback(int,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.JChannel:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.JChannel:void up(org.jgroups.util.MessageBatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.stack.ProtocolStack:void up(org.jgroups.util.MessageBatch)"
        ]
    },
    "org.jgroups.blocks.ReplicatedTree:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.applets.DrawApplet:void actionPerformed(java.awt.event.ActionEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.Chat:void start(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.Chat:void main(java.lang.String[])"
        ]
    },
    "org.jgroups.protocols.relay.Relayer$Bridge$2:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.TimeScheduler2$MyTask:void run()",
            "org.jgroups.util.HashedTimingWheel$MyTask:void run()",
            "org.jgroups.util.TimeScheduler3$Task:void run()"
        ]
    },
    "org.jgroups.protocols.RELAY$Receiver:void receive(org.jgroups.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.JChannel:java.lang.Object invokeCallback(int,java.lang.Object)",
            "org.jgroups.JChannel:void up(org.jgroups.util.MessageBatch)"
        ]
    },
    "org.jgroups.protocols.RELAY:void handleView(org.jgroups.View)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.RELAY:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.RELAY:java.lang.Object down(org.jgroups.Event)"
        ]
    },
    "org.jgroups.tests.DiscardTest:void testFastProperties()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.DiscardTest:void testDiscardProperties()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.RELAY:void up(org.jgroups.util.MessageBatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.RELAY:void forwardToCoord(org.jgroups.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.RELAY:java.lang.Object down(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.RELAY:java.lang.Object handleUpEvent(org.jgroups.Message,org.jgroups.protocols.RELAY$RelayHeader)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.RELAY:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.RELAY:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.RELAY:java.lang.Object up(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.byteman.BecomeServerTest$2:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.Draw:void access$200(org.jgroups.demos.Draw,byte[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.Draw$DrawPanel:void mouseDragged(java.awt.event.MouseEvent)"
        ]
    },
    "org.jgroups.demos.ProgrammaticChat:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.RelayDemo:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.TransportThreadPoolTest:void testThreadPoolReplacement()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.TestToaOrder:void awaitUntilAllFinishes()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.TestToaOrder:void startTest()"
        ]
    },
    "org.jgroups.tests.byteman.BecomeServerTest$3:void receive(org.jgroups.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.JChannel:java.lang.Object invokeCallback(int,java.lang.Object)",
            "org.jgroups.JChannel:void up(org.jgroups.util.MessageBatch)"
        ]
    },
    "org.jgroups.tests.TestToaOrder:void startTest()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.TestToaOrder:void main(java.lang.String[])"
        ]
    },
    "org.jgroups.demos.Draw:void actionPerformed(java.awt.event.ActionEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.relay.RELAY2:void route(org.jgroups.protocols.relay.SiteAddress,org.jgroups.protocols.relay.SiteAddress,org.jgroups.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.relay.RELAY2:java.lang.Object down(org.jgroups.Event)",
            "org.jgroups.protocols.relay.RELAY2:void handleMessage(org.jgroups.protocols.relay.RELAY2$Relay2Header,org.jgroups.Message)"
        ]
    },
    "org.jgroups.blocks.locking.LockService$ConditionImpl:boolean awaitUntil(java.util.Date)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.JChannel:void getState(org.jgroups.Address,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.wb.Whiteboard:void init()",
            "org.jgroups.tests.StateTransferTest2:void testUnsuccessfulStateTransferFailureAtStateRequester(java.lang.Class)",
            "org.jgroups.blocks.ReplicatedTree:void fetchState(long)",
            "org.jgroups.demos.Draw:void viewAccepted(org.jgroups.View)",
            "org.jgroups.tests.LargeStateTransferTest:void _testStateTransfer(int,java.lang.String)",
            "org.jgroups.tests.StateTransferTest2:void testUnsuccessfulStateTransferFailureAtStateProvider(java.lang.Class)",
            "org.jgroups.blocks.ReplicatedTree:void start()",
            "org.jgroups.tests.LargeState:void start(boolean,int,java.lang.String,boolean,boolean,long,java.lang.String)",
            "org.jgroups.demos.TotalOrder:void <init>(java.lang.String,long,int,int,java.lang.String,int)",
            "org.jgroups.tests.StateTransferTest2:void testSuccessfulStateTransfer(java.lang.Class)",
            "org.jgroups.demos.TotalOrder$4:void actionPerformed(java.awt.event.ActionEvent)",
            "org.jgroups.blocks.ReplicatedHashMap:void start(long)",
            "org.jgroups.demos.QuoteServer:void start()"
        ]
    },
    "org.jgroups.blocks.MessageDispatcher:void handle(org.jgroups.Message,org.jgroups.blocks.Response)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.RequestCorrelator:void handleRequest(org.jgroups.Message,org.jgroups.blocks.RequestCorrelator$Header)"
        ]
    },
    "org.jgroups.blocks.MessageDispatcher:java.lang.Object handle(org.jgroups.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.MessageDispatcher:void handle(org.jgroups.Message,org.jgroups.blocks.Response)",
            "org.jgroups.blocks.RequestCorrelator:void handleRequest(org.jgroups.Message,org.jgroups.blocks.RequestCorrelator$Header)"
        ]
    },
    "org.jgroups.blocks.RequestCorrelator:boolean receiveMessage(org.jgroups.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.RequestCorrelator:boolean receive(org.jgroups.Event)"
        ]
    },
    "org.jgroups.blocks.MessageDispatcher:java.lang.Object sendMessage(org.jgroups.Message,org.jgroups.blocks.RequestOptions)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.RpcDispatcher:java.lang.Object callRemoteMethod(org.jgroups.Address,org.jgroups.blocks.MethodCall,org.jgroups.blocks.RequestOptions)",
            "org.jgroups.tests.MessageDispatcherRSVPTest:void testCancellationByClosing(boolean,java.lang.Thread)",
            "org.jgroups.tests.MessageDispatcherRSVPTest:void sendMessageOnClosedChannel(org.jgroups.Message)",
            "org.jgroups.blocks.RpcLockingTest:void testCoordReceiveFirst()",
            "org.jgroups.blocks.RpcLockingTest:void testCoordSendFirst()"
        ]
    },
    "org.jgroups.blocks.MessageDispatcher:org.jgroups.blocks.GroupRequest cast(java.util.Collection,org.jgroups.Message,org.jgroups.blocks.RequestOptions,boolean,org.jgroups.util.FutureListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.mux.MuxRpcDispatcher:org.jgroups.blocks.GroupRequest cast(java.util.Collection,org.jgroups.Message,org.jgroups.blocks.RequestOptions,boolean,org.jgroups.util.FutureListener)",
            "org.jgroups.blocks.MessageDispatcher:org.jgroups.blocks.GroupRequest cast(java.util.Collection,org.jgroups.Message,org.jgroups.blocks.RequestOptions,boolean)",
            "org.jgroups.blocks.mux.MuxMessageDispatcher:org.jgroups.blocks.GroupRequest cast(java.util.Collection,org.jgroups.Message,org.jgroups.blocks.RequestOptions,boolean,org.jgroups.util.FutureListener)",
            "org.jgroups.blocks.MessageDispatcher:org.jgroups.util.NotifyingFuture castMessageWithFuture(java.util.Collection,org.jgroups.Message,org.jgroups.blocks.RequestOptions,org.jgroups.util.FutureListener)"
        ]
    },
    "org.jgroups.blocks.MessageDispatcher:org.jgroups.util.NotifyingFuture sendMessageWithFuture(org.jgroups.Message,org.jgroups.blocks.RequestOptions,org.jgroups.util.FutureListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.MessageDispatcher:org.jgroups.util.NotifyingFuture sendMessageWithFuture(org.jgroups.Message,org.jgroups.blocks.RequestOptions)",
            "org.jgroups.blocks.RpcDispatcher:org.jgroups.util.NotifyingFuture callRemoteMethodWithFuture(org.jgroups.Address,org.jgroups.blocks.MethodCall,org.jgroups.blocks.RequestOptions,org.jgroups.util.FutureListener)"
        ]
    },
    "org.jgroups.protocols.pbcast.ParticipantGmsImpl:void suspect(org.jgroups.Address)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.TCP:void send(org.jgroups.Address,byte[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.BasicTCP:void sendUnicast(org.jgroups.PhysicalAddress,byte[],int,int)"
        ]
    },
    "org.jgroups.protocols.TCP_NIO:void send(org.jgroups.Address,byte[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.BasicTCP:void sendUnicast(org.jgroups.PhysicalAddress,byte[],int,int)"
        ]
    },
    "org.jgroups.blocks.ConnectionTableNIO$1:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.ConnectionTableNIO:void runRequest(org.jgroups.Address,java.nio.ByteBuffer)"
        ]
    },
    "org.jgroups.demos.Draw:void go()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.Draw:void main(java.lang.String[])"
        ]
    },
    "org.jgroups.tests.MessageDispatcherUnitTest:void testNullMessageToAll()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.byteman.ForwardToCoordFailoverTest:org.jgroups.JChannel createChannel(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.byteman.ForwardToCoordFailoverTest:void setUp()"
        ]
    },
    "org.jgroups.demos.CounterServiceDemo:void start(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.CounterServiceDemo:void main(java.lang.String[])"
        ]
    },
    "org.jgroups.blocks.ReplicatedTree:void <init>(java.lang.String,java.lang.String,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.ReplicatedTree:void main(java.lang.String[])"
        ]
    },
    "org.jgroups.blocks.ReplCache:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.ReplCacheDemo:void start(java.lang.String,java.lang.String,long,long,boolean,boolean,int,long,int,long)"
        ]
    },
    "org.jgroups.tests.DynamicDiscardTest:void testLeaveDuringSend()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.MessageDispatcherUnitTest:void testCastMessageWithNonNullDest()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.applets.DrawApplet:void init()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.byteman.BecomeServerTest:void testSendingOfMsgsOnUnconnectedChannel()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.ViewDemo:void start(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.ViewDemo:void main(java.lang.String[])"
        ]
    },
    "org.jgroups.demos.TotalOrder:void <init>(java.lang.String,long,int,int,java.lang.String,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.TotalOrder:void main(java.lang.String[])"
        ]
    },
    "org.jgroups.blocks.PartitionedHashMap:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.MemcachedServer:void start(java.lang.String,java.net.InetAddress,int,int,int,long,long,boolean,boolean,int,long,int,long)",
            "org.jgroups.demos.PartitionedHashMapDemo:void main(java.lang.String[])"
        ]
    },
    "org.jgroups.protocols.RELAY:void createBridge()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.RELAY:void handleView(org.jgroups.View)"
        ]
    },
    "org.jgroups.protocols.relay.Relayer$Bridge:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.perf.UPerf:void init(java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.perf.UPerf:void main(java.lang.String[])"
        ]
    },
    "org.jgroups.tests.ReplicatedHashMapTest:void setUp()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.byteman.LockServiceConcurrencyTest:void init()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.QuoteClient:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.QuoteClient:void main(java.lang.String[])"
        ]
    },
    "org.jgroups.demos.ReplicatedHashMapDemo:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.RpcDispatcherSerializationTest:void setUp()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.RelayDemoRpc:void start(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.RelayDemoRpc:void main(java.lang.String[])"
        ]
    },
    "org.jgroups.demos.wb.Whiteboard:void init()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.wb.ApplFrame:void <init>(java.lang.String,org.jgroups.demos.wb.Whiteboard)"
        ]
    },
    "org.jgroups.tests.ConcurrentCloseTest:void testConcurrentClose()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.RSVPTest:void setUp()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.LargeStateTransferTest:void _testStateTransfer(int,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.LargeStateTransferTest:void testStateTransfer2()",
            "org.jgroups.tests.LargeStateTransferTest:void testStateTransfer1()",
            "org.jgroups.tests.LargeStateTransferTest:void testStateTransfer4()",
            "org.jgroups.tests.LargeStateTransferTest:void testStateTransfer3()"
        ]
    },
    "org.jgroups.blocks.ReplicatedTree:void <init>(java.lang.String,java.lang.String,long,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.RpcLockingTest:void setUp()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.TestToaOrder:void createJChannel()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.TestToaOrder:void startTest()"
        ]
    },
    "org.jgroups.tests.LargeState:void start(boolean,int,java.lang.String,boolean,boolean,long,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.LargeState:void main(java.lang.String[])"
        ]
    },
    "org.jgroups.demos.Topology:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.Topology:void main(java.lang.String[])"
        ]
    },
    "org.jgroups.tests.StateTransferTest2:void createStateProviderAndRequesterChannels(java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.StateTransferTest2:void testSuccessfulStateTransfer(java.lang.Class)",
            "org.jgroups.tests.StateTransferTest2:void testUnsuccessfulStateTransferFailureAtStateRequester(java.lang.Class)",
            "org.jgroups.tests.StateTransferTest2:void testUnsuccessfulStateTransferFailureAtStateProvider(java.lang.Class)"
        ]
    },
    "org.jgroups.tests.MessageDispatcherRSVPTest:void setUp()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.MessageDispatcherUnitTest:void setUp()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.MessageDispatcherUnitTest:void sendMessageToBothChannels(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.MessageDispatcherUnitTest:void test20000ByteMessageToAll()",
            "org.jgroups.tests.MessageDispatcherUnitTest:void test2000ByteMessageToAll()",
            "org.jgroups.tests.MessageDispatcherUnitTest:void test200ByteMessageToAll()"
        ]
    },
    "org.jgroups.demos.PubSub:void start(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.PubSub:void main(java.lang.String[])"
        ]
    },
    "org.jgroups.demos.ExecutionServiceDemo:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.ExecutionServiceDemo:void main(java.lang.String[])"
        ]
    },
    "org.jgroups.tests.FifoOrderTest:void testFifoDelivery()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.QuoteServer:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.QuoteServer:void main(java.lang.String[])"
        ]
    },
    "org.jgroups.JChannel$1:java.lang.Boolean call()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.JChannel$1:java.lang.Object call()"
        ]
    },
    "org.jgroups.blocks.ReplCache:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.ReplCacheDemo$1:void run()",
            "org.jgroups.demos.ReplCacheDemo:void actionPerformed(java.awt.event.ActionEvent)"
        ]
    },
    "org.jgroups.tests.RSVPTest$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.PartitionedHashMap:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.MemcachedServer$1:void run()",
            "org.jgroups.demos.PartitionedHashMapDemo:void main(java.lang.String[])"
        ]
    },
    "org.jgroups.demos.QuoteClient:void actionPerformed(java.awt.event.ActionEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.perf.UPerf:void eventLoop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.perf.UPerf:void main(java.lang.String[])"
        ]
    },
    "org.jgroups.demos.Topology:void windowClosing(java.awt.event.WindowEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.ConcurrentCloseTest$Closer:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.applets.DrawApplet:void destroy()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.applets.DrawApplet:void actionPerformed(java.awt.event.ActionEvent)"
        ]
    },
    "org.jgroups.demos.Draw:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.Draw:void actionPerformed(java.awt.event.ActionEvent)"
        ]
    },
    "org.jgroups.util.Util:void close(org.jgroups.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.perf.UPerf:void stop()",
            "org.jgroups.tests.MessageDispatcherUnitTest:void testNullMessageToAll()",
            "org.jgroups.tests.ChannelTestBase$ChannelApplication:void cleanup()",
            "org.jgroups.demos.CounterServiceDemo:void start(java.lang.String,java.lang.String)",
            "org.jgroups.util.Util:void close(org.jgroups.Channel[])",
            "org.jgroups.protocols.RELAY:void stop()",
            "org.jgroups.tests.LargeState:void start(boolean,int,java.lang.String,boolean,boolean,long,java.lang.String)",
            "org.jgroups.protocols.RELAY:void handleView(org.jgroups.View)",
            "org.jgroups.blocks.ReplicatedTree:void stop()",
            "org.jgroups.tests.MessageDispatcherRSVPTest$Closer:void run()",
            "org.jgroups.tests.MessageDispatcherUnitTest:void sendMessageToBothChannels(int)",
            "org.jgroups.demos.PubSub:void start(java.lang.String)",
            "org.jgroups.demos.ExecutionServiceDemo:void start()",
            "org.jgroups.util.Util:void shutdown(org.jgroups.Channel)",
            "org.jgroups.demos.LockServiceDemo:void start()",
            "org.jgroups.protocols.relay.Relayer$Bridge:void stop()",
            "org.jgroups.tests.byteman.LockServiceConcurrencyTest:void destroy()",
            "org.jgroups.protocols.RELAY:java.lang.Object down(org.jgroups.Event)"
        ]
    },
    "org.jgroups.tests.MessageDispatcherUnitTest:void closeSecondChannel()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.TestToaOrder:void closeJChannel()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.TestToaOrder:void main(java.lang.String[])"
        ]
    },
    "org.jgroups.blocks.ReplicatedHashMap:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.ReplicatedHashMapTest:void tearDown()"
        ]
    },
    "org.jgroups.tests.MessageDispatcherRSVPTest:void sendMessageOnClosedChannel(org.jgroups.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.MessageDispatcherRSVPTest:void testSendingMessageOnClosedChannelRSVP()",
            "org.jgroups.tests.MessageDispatcherRSVPTest:void testSendingMessageOnClosedChannel()"
        ]
    },
    "org.jgroups.demos.wb.Whiteboard:void destroy()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.wb.Whiteboard:void actionPerformed(java.awt.event.ActionEvent)"
        ]
    },
    "org.jgroups.tests.MessageDispatcherUnitTest:void tearDown()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.RpcDispatcherSerializationTest:void tearDown()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.LockServiceDemo:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.JChannel:java.lang.Object up(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.stack.ProtocolStack:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.stack.ProtocolStack:void up(org.jgroups.util.MessageBatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.pbcast.NAKACK2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FlowControl:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD_ALL:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.UNICAST3:int removeAndDeliver(java.util.concurrent.atomic.AtomicBoolean,org.jgroups.util.Table,org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FD:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:void removeAndPassUp(org.jgroups.util.Table,org.jgroups.Address,boolean,java.lang.String)",
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.MERGE2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.stack.Protocol:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.RSVP:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.BARRIER:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.TRACE:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.FRAG2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.STABLE:void up(org.jgroups.util.MessageBatch)"
        ]
    },
    "org.jgroups.demos.Chat:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.RELAY:java.lang.Object down(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.TestToaOrder:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.relay.RELAY2:java.lang.Object down(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.relay.RELAY2:void handleMessage(org.jgroups.protocols.relay.RELAY2$Relay2Header,org.jgroups.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.relay.RELAY2:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.relay.RELAY2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.relay.RELAY2:void handleRelayMessage(org.jgroups.protocols.relay.RELAY2$Relay2Header,org.jgroups.Message)"
        ]
    },
    "org.jgroups.tests.StateTransferTest2:void testUnsuccessfulStateTransferFailureAtStateRequester(java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.ReplicatedTree:void fetchState(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.Draw:void viewAccepted(org.jgroups.View)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.JChannel:java.lang.Object invokeCallback(int,java.lang.Object)"
        ]
    },
    "org.jgroups.tests.StateTransferTest2:void testUnsuccessfulStateTransferFailureAtStateProvider(java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.ReplicatedTree:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.ReplicatedTree:void <init>(java.lang.String,java.lang.String,long)",
            "org.jgroups.blocks.ReplicatedTree:void <init>(java.lang.String,java.lang.String,long,boolean)",
            "org.jgroups.blocks.ReplicatedTree:void <init>(org.jgroups.JChannel)"
        ]
    },
    "org.jgroups.tests.StateTransferTest2:void testSuccessfulStateTransfer(java.lang.Class)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.TotalOrder$4:void actionPerformed(java.awt.event.ActionEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.ReplicatedHashMap:void start(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.ReplicatedHashMapTest:void setUp()",
            "org.jgroups.demos.ReplicatedHashMapDemo:void start(org.jgroups.JChannel)"
        ]
    },
    "org.jgroups.blocks.RequestCorrelator:boolean receive(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.MessageDispatcher$ProtocolAdapter:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.blocks.RpcDispatcher:java.lang.Object callRemoteMethod(org.jgroups.Address,org.jgroups.blocks.MethodCall,org.jgroups.blocks.RequestOptions)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.PartitionedHashMap:void sendPut(org.jgroups.Address,java.lang.Object,java.lang.Object,long,boolean)",
            "org.jgroups.blocks.RpcDispatcher:java.lang.Object callRemoteMethod(org.jgroups.Address,java.lang.String,java.lang.Object[],java.lang.Class[],org.jgroups.blocks.RequestOptions)",
            "org.jgroups.blocks.PartitionedHashMap:java.lang.Object get(java.lang.Object)",
            "org.jgroups.tests.perf.UPerf:void init(java.lang.String,java.lang.String,boolean)",
            "org.jgroups.blocks.PartitionedHashMap:void remove(java.lang.Object)",
            "org.jgroups.tests.perf.UPerf$Invoker:void run()",
            "org.jgroups.blocks.ReplCache:void move(org.jgroups.Address,java.lang.Object,java.lang.Object,short,long,boolean)",
            "org.jgroups.demos.wb.SendDialog:void actionPerformed(java.awt.event.ActionEvent)",
            "org.jgroups.demos.RelayDemoRpc:void start(java.lang.String,java.lang.String)"
        ]
    },
    "org.jgroups.tests.MessageDispatcherRSVPTest:void testCancellationByClosing(boolean,java.lang.Thread)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.MessageDispatcherRSVPTest:void testCancellationByClosingChannelUnicast()",
            "org.jgroups.tests.MessageDispatcherRSVPTest:void testCancellationByClosingChannel()"
        ]
    },
    "org.jgroups.blocks.mux.MuxRpcDispatcher:org.jgroups.blocks.GroupRequest cast(java.util.Collection,org.jgroups.Message,org.jgroups.blocks.RequestOptions,boolean,org.jgroups.util.FutureListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.MessageDispatcher:org.jgroups.blocks.GroupRequest cast(java.util.Collection,org.jgroups.Message,org.jgroups.blocks.RequestOptions,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.MessageDispatcher:org.jgroups.util.RspList castMessage(java.util.Collection,org.jgroups.Message,org.jgroups.blocks.RequestOptions)"
        ]
    },
    "org.jgroups.blocks.mux.MuxMessageDispatcher:org.jgroups.blocks.GroupRequest cast(java.util.Collection,org.jgroups.Message,org.jgroups.blocks.RequestOptions,boolean,org.jgroups.util.FutureListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.MessageDispatcher:org.jgroups.util.NotifyingFuture castMessageWithFuture(java.util.Collection,org.jgroups.Message,org.jgroups.blocks.RequestOptions,org.jgroups.util.FutureListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.MessageDispatcher:org.jgroups.util.NotifyingFuture castMessageWithFuture(java.util.Collection,org.jgroups.Message,org.jgroups.blocks.RequestOptions)",
            "org.jgroups.blocks.RpcDispatcher:org.jgroups.util.NotifyingFuture callRemoteMethodsWithFuture(java.util.Collection,org.jgroups.blocks.MethodCall,org.jgroups.blocks.RequestOptions,org.jgroups.util.FutureListener)"
        ]
    },
    "org.jgroups.blocks.MessageDispatcher:org.jgroups.util.NotifyingFuture sendMessageWithFuture(org.jgroups.Message,org.jgroups.blocks.RequestOptions)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.RpcDispatcher:org.jgroups.util.NotifyingFuture callRemoteMethodWithFuture(org.jgroups.Address,org.jgroups.blocks.MethodCall,org.jgroups.blocks.RequestOptions,org.jgroups.util.FutureListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.RpcDispatcher:org.jgroups.util.NotifyingFuture callRemoteMethodWithFuture(org.jgroups.Address,org.jgroups.blocks.MethodCall,org.jgroups.blocks.RequestOptions)"
        ]
    },
    "org.jgroups.protocols.BasicTCP:void sendUnicast(org.jgroups.PhysicalAddress,byte[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.TP:void sendToAllPhysicalAddresses(byte[],int,int)",
            "org.jgroups.protocols.TP:void sendToSingleMember(org.jgroups.Address,byte[],int,int)"
        ]
    },
    "org.jgroups.blocks.ConnectionTableNIO:void runRequest(org.jgroups.Address,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.ConnectionTableNIO$ReadHandler:void readOnce(org.jgroups.blocks.ConnectionTableNIO$Connection)"
        ]
    },
    "org.jgroups.demos.Draw:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.byteman.ForwardToCoordFailoverTest:void setUp()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.CounterServiceDemo:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.ReplCacheDemo:void start(java.lang.String,java.lang.String,long,long,boolean,boolean,int,long,int,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.ReplCacheDemo:void main(java.lang.String[])"
        ]
    },
    "org.jgroups.demos.ViewDemo:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.TotalOrder:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.MemcachedServer:void start(java.lang.String,java.net.InetAddress,int,int,int,long,long,boolean,boolean,int,long,int,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.MemcachedServer:void main(java.lang.String[])"
        ]
    },
    "org.jgroups.demos.PartitionedHashMapDemo:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.perf.UPerf:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.QuoteClient:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.RelayDemoRpc:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.wb.ApplFrame:void <init>(java.lang.String,org.jgroups.demos.wb.Whiteboard)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.wb.Whiteboard:void main(java.lang.String[])"
        ]
    },
    "org.jgroups.tests.LargeStateTransferTest:void testStateTransfer2()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.LargeStateTransferTest:void testStateTransfer1()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.LargeStateTransferTest:void testStateTransfer4()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.LargeStateTransferTest:void testStateTransfer3()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.LargeState:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.Topology:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.MessageDispatcherUnitTest:void test20000ByteMessageToAll()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.MessageDispatcherUnitTest:void test2000ByteMessageToAll()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.MessageDispatcherUnitTest:void test200ByteMessageToAll()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.PubSub:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.ExecutionServiceDemo:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.QuoteServer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.JChannel$1:java.lang.Object call()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.JChannel:void getState(org.jgroups.Address,long,java.util.concurrent.Callable)"
        ]
    },
    "org.jgroups.demos.ReplCacheDemo$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.ReplCacheDemo:void actionPerformed(java.awt.event.ActionEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.MemcachedServer$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.perf.UPerf:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.perf.UPerf:void main(java.lang.String[])"
        ]
    },
    "org.jgroups.tests.ChannelTestBase$ChannelApplication:void cleanup()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.util.Util:void close(org.jgroups.Channel[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.StateTransferTest2:void testSuccessfulStateTransfer(java.lang.Class)",
            "org.jgroups.tests.byteman.ForwardToCoordFailoverTest:void tearDown()",
            "org.jgroups.tests.StateTransferTest2:void testUnsuccessfulStateTransferFailureAtStateRequester(java.lang.Class)",
            "org.jgroups.tests.ConcurrentCloseTest:void tearDown()",
            "org.jgroups.tests.UUIDCacheClearTest:void testCacheClear()",
            "org.jgroups.blocks.RpcLockingTest:void tearDown()",
            "org.jgroups.tests.byteman.BecomeServerTest:void cleanup()",
            "org.jgroups.tests.StateTransferTest2:void testUnsuccessfulStateTransferFailureAtStateProvider(java.lang.Class)",
            "org.jgroups.tests.TransportThreadPoolTest:void tearDown()",
            "org.jgroups.tests.FifoOrderTest:void tearDown()",
            "org.jgroups.tests.DiscardTest:void tearDown()",
            "org.jgroups.tests.LargeStateTransferTest:void tearDown()"
        ]
    },
    "org.jgroups.protocols.RELAY:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.ReplicatedTree:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.MessageDispatcherRSVPTest$Closer:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.relay.Relayer$Bridge:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.ReplicatedHashMapTest:void tearDown()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.MessageDispatcherRSVPTest:void testSendingMessageOnClosedChannelRSVP()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.MessageDispatcherRSVPTest:void testSendingMessageOnClosedChannel()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.wb.Whiteboard:void actionPerformed(java.awt.event.ActionEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.stack.ProtocolStack:java.lang.Object up(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.MERGE2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.DISCARD:org.jgroups.Address localAddress()",
            "org.jgroups.protocols.FlowControl:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.stack.Protocol:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.BARRIER:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:boolean unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.DISCARD$1:void run()",
            "org.jgroups.protocols.TP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:void up(org.jgroups.util.MessageBatch)",
            "org.jgroups.protocols.pbcast.NAKACK2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.MERGE2:boolean isMergeRunning()",
            "org.jgroups.protocols.TP:void fetchLocalAddresses()",
            "org.jgroups.protocols.FRAG2:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:boolean installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessage(org.jgroups.Message,org.jgroups.protocols.pbcast.NakAckHeader2)",
            "org.jgroups.protocols.Discovery:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.FLUSH:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.UNICAST3:void handleDataReceived(org.jgroups.Address,long,short,boolean,org.jgroups.Message,org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:boolean _startFlush(org.jgroups.View,int,boolean,long,long)",
            "org.jgroups.protocols.DISCARD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.TRACE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.STABLE:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD_ALL:void suspect(java.util.List)",
            "org.jgroups.protocols.pbcast.GMS:void installView(org.jgroups.View,org.jgroups.util.Digest)",
            "org.jgroups.protocols.MERGE2$FindSubgroupsTask:void _findAndNotify()",
            "org.jgroups.protocols.pbcast.FLUSH:void start()",
            "org.jgroups.protocols.Discovery:boolean isMergeRunning()",
            "org.jgroups.protocols.FD_SOCK:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void stopFlush()",
            "org.jgroups.protocols.VERIFY_SUSPECT:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.FD:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.NAKACK2:void handleMessages(org.jgroups.Address,java.util.List,boolean,java.lang.String)",
            "org.jgroups.protocols.FD_SOCK:void suspect(java.util.Set)",
            "org.jgroups.protocols.RSVP:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.protocols.pbcast.GMS:void castViewChange(org.jgroups.View,org.jgroups.util.Digest,org.jgroups.protocols.pbcast.JoinRsp,java.util.Collection)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void unsuspect(org.jgroups.Address)",
            "org.jgroups.protocols.TP:void passMessageUp(org.jgroups.Message,java.lang.String,boolean,boolean,boolean)",
            "org.jgroups.protocols.UNICAST3:void handleBatchReceived(org.jgroups.protocols.UNICAST3$ReceiverEntry,org.jgroups.Address,java.util.List,boolean)",
            "org.jgroups.protocols.VERIFY_SUSPECT:void verifySuspectWithICMP(org.jgroups.Address)",
            "org.jgroups.protocols.pbcast.ClientGmsImpl:void becomeSingletonMember(org.jgroups.Address)",
            "org.jgroups.protocols.UNICAST3:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.protocols.relay.RELAY2:void up(org.jgroups.util.MessageBatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.relay.RELAY2:java.lang.Object up(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.relay.RELAY2:void handleRelayMessage(org.jgroups.protocols.relay.RELAY2$Relay2Header,org.jgroups.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.protocols.relay.Relayer$Bridge:void receive(org.jgroups.Message)"
        ]
    },
    "org.jgroups.blocks.ReplicatedTree:void <init>(org.jgroups.JChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.ReplicatedHashMapDemo:void start(org.jgroups.JChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.ReplicatedHashMapDemo:void main(java.lang.String[])"
        ]
    },
    "org.jgroups.blocks.MessageDispatcher$ProtocolAdapter:java.lang.Object up(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.JChannel:java.lang.Object up(org.jgroups.Event)",
            "org.jgroups.JChannel:void setAddress()",
            "org.jgroups.JChannel:void up(org.jgroups.util.MessageBatch)"
        ]
    },
    "org.jgroups.blocks.PartitionedHashMap:void sendPut(org.jgroups.Address,java.lang.Object,java.lang.Object,long,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.PartitionedHashMap:void put(java.lang.Object,java.lang.Object,long)",
            "org.jgroups.blocks.PartitionedHashMap:void stop()"
        ]
    },
    "org.jgroups.blocks.RpcDispatcher:java.lang.Object callRemoteMethod(org.jgroups.Address,java.lang.String,java.lang.Object[],java.lang.Class[],org.jgroups.blocks.RequestOptions)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.PartitionedHashMap:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.PartitionedHashMapDemo:void main(java.lang.String[])",
            "org.jgroups.blocks.MemcachedConnector$RequestHandler:void run()"
        ]
    },
    "org.jgroups.blocks.PartitionedHashMap:void remove(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.PartitionedHashMapDemo:void main(java.lang.String[])",
            "org.jgroups.blocks.MemcachedConnector$RequestHandler:void run()"
        ]
    },
    "org.jgroups.tests.perf.UPerf$Invoker:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.ReplCache:void move(org.jgroups.Address,java.lang.Object,java.lang.Object,short,long,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.ReplCache:void stop()",
            "org.jgroups.blocks.ReplCache:void rebalance(java.util.List,java.util.List)"
        ]
    },
    "org.jgroups.demos.wb.SendDialog:void actionPerformed(java.awt.event.ActionEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.MessageDispatcherRSVPTest:void testCancellationByClosingChannelUnicast()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.MessageDispatcherRSVPTest:void testCancellationByClosingChannel()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.MessageDispatcher:org.jgroups.util.RspList castMessage(java.util.Collection,org.jgroups.Message,org.jgroups.blocks.RequestOptions)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.MessageDispatcherRSVPTest:void testCancellationByClosing(boolean,java.lang.Thread)",
            "org.jgroups.tests.MessageDispatcherUnitTest:void testNullMessageToAll()",
            "org.jgroups.tests.MessageDispatcherRSVPTest:void sendMessageOnClosedChannel(org.jgroups.Message)",
            "org.jgroups.tests.MessageDispatcherUnitTest:void testNullMessageToSelf()",
            "org.jgroups.tests.MessageDispatcherUnitTest:void sendMessageToBothChannels(int)",
            "org.jgroups.tests.DynamicDiscardTest:void testLeaveDuringSend()",
            "org.jgroups.tests.MessageDispatcherUnitTest:void testCastMessageWithNonNullDest()",
            "org.jgroups.blocks.RpcDispatcher:org.jgroups.util.RspList callRemoteMethods(java.util.Collection,org.jgroups.blocks.MethodCall,org.jgroups.blocks.RequestOptions)",
            "org.jgroups.tests.MessageDispatcherUnitTest:void sendMessage(int)"
        ]
    },
    "org.jgroups.blocks.MessageDispatcher:org.jgroups.util.NotifyingFuture castMessageWithFuture(java.util.Collection,org.jgroups.Message,org.jgroups.blocks.RequestOptions)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.RpcDispatcher:org.jgroups.util.NotifyingFuture callRemoteMethodsWithFuture(java.util.Collection,org.jgroups.blocks.MethodCall,org.jgroups.blocks.RequestOptions,org.jgroups.util.FutureListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.RpcDispatcher:org.jgroups.util.NotifyingFuture callRemoteMethodsWithFuture(java.util.Collection,org.jgroups.blocks.MethodCall,org.jgroups.blocks.RequestOptions)"
        ]
    },
    "org.jgroups.blocks.RpcDispatcher:org.jgroups.util.NotifyingFuture callRemoteMethodWithFuture(org.jgroups.Address,org.jgroups.blocks.MethodCall,org.jgroups.blocks.RequestOptions)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.ConnectionTableNIO$ReadHandler:void readOnce(org.jgroups.blocks.ConnectionTableNIO$Connection)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.ConnectionTableNIO$ReadHandler:void run()"
        ]
    },
    "org.jgroups.demos.ReplCacheDemo:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.MemcachedServer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.wb.Whiteboard:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.byteman.ForwardToCoordFailoverTest:void tearDown()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.ConcurrentCloseTest:void tearDown()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.RpcLockingTest:void tearDown()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.byteman.BecomeServerTest:void cleanup()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.TransportThreadPoolTest:void tearDown()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.FifoOrderTest:void tearDown()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.DiscardTest:void tearDown()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.LargeStateTransferTest:void tearDown()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.protocols.relay.Relayer$Bridge:void receive(org.jgroups.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.JChannel:java.lang.Object invokeCallback(int,java.lang.Object)",
            "org.jgroups.JChannel:void up(org.jgroups.util.MessageBatch)"
        ]
    },
    "org.jgroups.blocks.PartitionedHashMap:void put(java.lang.Object,java.lang.Object,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.PartitionedHashMap:void migrateData()",
            "org.jgroups.demos.PartitionedHashMapDemo:void main(java.lang.String[])",
            "org.jgroups.blocks.PartitionedHashMap:void put(java.lang.Object,java.lang.Object)",
            "org.jgroups.blocks.MemcachedConnector$RequestHandler:void run()"
        ]
    },
    "org.jgroups.blocks.MemcachedConnector$RequestHandler:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.ReplCache:void rebalance(java.util.List,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.ReplCache:void access$100(org.jgroups.blocks.ReplCache,java.util.List,java.util.List)"
        ]
    },
    "org.jgroups.tests.MessageDispatcherUnitTest:void testNullMessageToSelf()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.RpcDispatcher:org.jgroups.util.RspList callRemoteMethods(java.util.Collection,org.jgroups.blocks.MethodCall,org.jgroups.blocks.RequestOptions)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.ReplicatedHashMap:java.lang.Object replace(java.lang.Object,java.lang.Object)",
            "org.jgroups.blocks.ReplCache:java.lang.Object get(java.lang.Object)",
            "org.jgroups.blocks.ReplCache:void mcastPut(java.lang.Object,java.lang.Object,short,long,boolean)",
            "org.jgroups.tests.perf.UPerf:void eventLoop()",
            "org.jgroups.tests.perf.UPerf:void setSenderThreads()",
            "org.jgroups.blocks.ReplicatedHashMap:java.lang.Object remove(java.lang.Object)",
            "org.jgroups.tests.perf.UPerf:void startBenchmark()",
            "org.jgroups.blocks.ReplCache:void remove(java.lang.Object,boolean)",
            "org.jgroups.demos.wb.Whiteboard:void destroy()",
            "org.jgroups.blocks.RpcDispatcher:org.jgroups.util.RspList callRemoteMethods(java.util.Collection,java.lang.String,java.lang.Object[],java.lang.Class[],org.jgroups.blocks.RequestOptions)",
            "org.jgroups.demos.RelayDemoRpc:void start(java.lang.String,java.lang.String)",
            "org.jgroups.blocks.ReplicatedHashMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "org.jgroups.tests.perf.UPerf:void setMessageSize()",
            "org.jgroups.blocks.ReplCache:void mcastClear(java.util.Set,boolean)",
            "org.jgroups.blocks.ReplicatedHashMap:void clear()",
            "org.jgroups.tests.perf.UPerf:void setAnycastCount()",
            "org.jgroups.tests.perf.UPerf:void setNumMessages()",
            "org.jgroups.demos.wb.SendDialog:void actionPerformed(java.awt.event.ActionEvent)",
            "org.jgroups.blocks.ReplicatedHashMap:boolean remove(java.lang.Object,java.lang.Object)",
            "org.jgroups.blocks.ReplicatedHashMap:void putAll(java.util.Map)",
            "org.jgroups.demos.wb.GraphPanel:void mouseReleased(java.awt.event.MouseEvent)",
            "org.jgroups.tests.perf.UPerf$Invoker:void run()",
            "org.jgroups.blocks.ReplicatedHashMap:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.jgroups.demos.wb.GraphPanel:void start(java.lang.String)",
            "org.jgroups.blocks.ReplicatedHashMap:java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)",
            "org.jgroups.tests.perf.UPerf:void setReadPercentage()"
        ]
    },
    "org.jgroups.tests.MessageDispatcherUnitTest:void sendMessage(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.MessageDispatcherUnitTest:void test200ByteMessageToSelf()",
            "org.jgroups.tests.MessageDispatcherUnitTest:void test2000ByteMessageToSelf()",
            "org.jgroups.tests.MessageDispatcherUnitTest:void test20000ByteMessageToSelf()"
        ]
    },
    "org.jgroups.blocks.RpcDispatcher:org.jgroups.util.NotifyingFuture callRemoteMethodsWithFuture(java.util.Collection,org.jgroups.blocks.MethodCall,org.jgroups.blocks.RequestOptions)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.ConnectionTableNIO$ReadHandler:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.PartitionedHashMap:void migrateData()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.PartitionedHashMap:void viewAccepted(org.jgroups.View)"
        ]
    },
    "org.jgroups.blocks.PartitionedHashMap:void put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.ReplCache:void access$100(org.jgroups.blocks.ReplCache,java.util.List,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.ReplCache$3:void run()"
        ]
    },
    "org.jgroups.blocks.ReplicatedHashMap:java.lang.Object replace(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.ReplicatedHashMapTest:void testReplace()"
        ]
    },
    "org.jgroups.blocks.ReplCache:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.GridFile:long length()",
            "org.jgroups.blocks.GridFile:boolean isFile()",
            "org.jgroups.blocks.GridFile:void initMetadata()",
            "org.jgroups.blocks.GridFile:boolean isDirectory()",
            "org.jgroups.blocks.GridInputStream:byte[] fetchNextChunk()",
            "org.jgroups.blocks.GridFile:boolean exists(java.lang.String)",
            "org.jgroups.blocks.GridFile:boolean isFile(java.lang.String)",
            "org.jgroups.blocks.GridFile:void setLength(int)",
            "org.jgroups.blocks.GridFilesystem:void remove(java.lang.String,boolean)",
            "org.jgroups.blocks.GridFile:boolean exists()"
        ]
    },
    "org.jgroups.blocks.ReplCache:void mcastPut(java.lang.Object,java.lang.Object,short,long,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.ReplCache:void mcastEntries()",
            "org.jgroups.blocks.ReplCache:void rebalance(java.util.List,java.util.List)",
            "org.jgroups.blocks.ReplCache:void put(java.lang.Object,java.lang.Object,short,long,boolean)"
        ]
    },
    "org.jgroups.tests.perf.UPerf:void setSenderThreads()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.perf.UPerf:void eventLoop()"
        ]
    },
    "org.jgroups.blocks.ReplicatedHashMap:java.lang.Object remove(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.ReplicatedHashMapTest:void testRemove()",
            "org.jgroups.demos.ReplicatedHashMapDemo:void removeItem()"
        ]
    },
    "org.jgroups.tests.perf.UPerf:void startBenchmark()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.perf.UPerf:void eventLoop()"
        ]
    },
    "org.jgroups.blocks.ReplCache:void remove(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.ReplCache:void remove(java.lang.Object)",
            "org.jgroups.blocks.GridFile:boolean delete(boolean)",
            "org.jgroups.blocks.GridFilesystem:void remove(java.lang.String,boolean)"
        ]
    },
    "org.jgroups.blocks.RpcDispatcher:org.jgroups.util.RspList callRemoteMethods(java.util.Collection,java.lang.String,java.lang.Object[],java.lang.Class[],org.jgroups.blocks.RequestOptions)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.RpcDispatcherAnycastServerObject:void callRemote(boolean,boolean)",
            "org.jgroups.blocks.RpcDispatcherSerializationTest:void testMarshaller()",
            "org.jgroups.blocks.RpcDispatcherSerializationTest:void testTargetMethodNotFound()",
            "org.jgroups.demos.QuoteClient:void actionPerformed(java.awt.event.ActionEvent)",
            "org.jgroups.blocks.RpcDispatcherSerializationTest:void testNonSerializableArgument()"
        ]
    },
    "org.jgroups.blocks.ReplicatedHashMap:java.lang.Object put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.ReplicatedHashMapTest:void testIsEmpty()",
            "org.jgroups.tests.ReplicatedHashMapTest:void testClear()",
            "org.jgroups.tests.ReplicatedHashMapTest:void testReplace2()",
            "org.jgroups.tests.ReplicatedHashMapTest:void testPutAndGet()",
            "org.jgroups.tests.ReplicatedHashMapTest:void testEqualsEtc()",
            "org.jgroups.tests.ReplicatedHashMapTest:void testReplace()",
            "org.jgroups.tests.ReplicatedHashMapTest:void testSize()",
            "org.jgroups.tests.ReplicatedHashMapTest:void testRemove()",
            "org.jgroups.demos.ReplicatedHashMapDemo:void actionPerformed(java.awt.event.ActionEvent)",
            "org.jgroups.tests.ReplicatedHashMapTest:void testRemove2()",
            "org.jgroups.tests.ReplicatedHashMapTest:void testContainsKey()",
            "org.jgroups.tests.ReplicatedHashMapTest:void testContainsValue()"
        ]
    },
    "org.jgroups.tests.perf.UPerf:void setMessageSize()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.perf.UPerf:void eventLoop()"
        ]
    },
    "org.jgroups.blocks.ReplCache:void mcastClear(java.util.Set,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.ReplCache:void clear()"
        ]
    },
    "org.jgroups.blocks.ReplicatedHashMap:void clear()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.ReplicatedHashMapTest:void clean()",
            "org.jgroups.tests.ReplicatedHashMapTest:void testClear()"
        ]
    },
    "org.jgroups.tests.perf.UPerf:void setAnycastCount()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.perf.UPerf:void eventLoop()"
        ]
    },
    "org.jgroups.tests.perf.UPerf:void setNumMessages()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.perf.UPerf:void eventLoop()"
        ]
    },
    "org.jgroups.blocks.ReplicatedHashMap:boolean remove(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.ReplicatedHashMapTest:void testRemove2()"
        ]
    },
    "org.jgroups.blocks.ReplicatedHashMap:void putAll(java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.ReplicatedHashMapTest:void testValues()",
            "org.jgroups.tests.ReplicatedHashMapTest:void testKeySet()",
            "org.jgroups.tests.ReplicatedHashMapTest:void testPutAll()"
        ]
    },
    "org.jgroups.demos.wb.GraphPanel:void mouseReleased(java.awt.event.MouseEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.ReplicatedHashMap:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.ReplicatedHashMapTest:void testReplace2()"
        ]
    },
    "org.jgroups.demos.wb.GraphPanel:void start(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.wb.Whiteboard:void init()"
        ]
    },
    "org.jgroups.blocks.ReplicatedHashMap:java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.ReplicatedHashMapTest:void testPutIfAbsent()"
        ]
    },
    "org.jgroups.tests.perf.UPerf:void setReadPercentage()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.tests.perf.UPerf:void eventLoop()"
        ]
    },
    "org.jgroups.tests.MessageDispatcherUnitTest:void test200ByteMessageToSelf()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.MessageDispatcherUnitTest:void test2000ByteMessageToSelf()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.MessageDispatcherUnitTest:void test20000ByteMessageToSelf()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.PartitionedHashMap:void viewAccepted(org.jgroups.View)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.MessageDispatcher:java.lang.Object handleUpEvent(org.jgroups.Event)"
        ]
    },
    "org.jgroups.blocks.ReplCache$3:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.util.TimeScheduler2$MyTask:void run()",
            "org.jgroups.util.HashedTimingWheel$MyTask:void run()",
            "org.jgroups.util.TimeScheduler3$Task:void run()"
        ]
    },
    "org.jgroups.tests.ReplicatedHashMapTest:void testReplace()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.GridFile:long length()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.GridFile:boolean isFile()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.GridFile:boolean delete(boolean)"
        ]
    },
    "org.jgroups.blocks.GridFile:void initMetadata()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.GridFile:void <init>(java.lang.String,org.jgroups.blocks.ReplCache,int,org.jgroups.blocks.GridFilesystem)",
            "org.jgroups.blocks.GridFile:void <init>(java.lang.String,java.lang.String,org.jgroups.blocks.ReplCache,int,org.jgroups.blocks.GridFilesystem)",
            "org.jgroups.blocks.GridFile:void <init>(java.io.File,java.lang.String,org.jgroups.blocks.ReplCache,int,org.jgroups.blocks.GridFilesystem)"
        ]
    },
    "org.jgroups.blocks.GridFile:boolean isDirectory()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.GridFile:boolean delete(boolean)"
        ]
    },
    "org.jgroups.blocks.GridInputStream:byte[] fetchNextChunk()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.GridInputStream:int read(byte[],int,int)",
            "org.jgroups.blocks.GridInputStream:int read()"
        ]
    },
    "org.jgroups.blocks.GridFile:boolean exists(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.GridFile:boolean checkParentDirs(java.lang.String,boolean)"
        ]
    },
    "org.jgroups.blocks.GridFile:boolean isFile(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.GridFile:boolean checkParentDirs(java.lang.String,boolean)"
        ]
    },
    "org.jgroups.blocks.GridFile:void setLength(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.GridOutputStream:void flush()"
        ]
    },
    "org.jgroups.blocks.GridFilesystem:void remove(java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.GridFile:boolean delete(boolean)"
        ]
    },
    "org.jgroups.blocks.GridFile:boolean exists()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.GridFilesystem:java.io.InputStream getInput(java.lang.String)",
            "org.jgroups.blocks.GridFile:boolean createNewFile()",
            "org.jgroups.blocks.GridFile:boolean delete(boolean)"
        ]
    },
    "org.jgroups.blocks.ReplCache:void mcastEntries()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.ReplCacheDemo:void actionPerformed(java.awt.event.ActionEvent)"
        ]
    },
    "org.jgroups.blocks.ReplCache:void put(java.lang.Object,java.lang.Object,short,long,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.GridFile:boolean mkdirs()",
            "org.jgroups.blocks.GridFile:boolean mkdir()",
            "org.jgroups.blocks.GridFile:boolean createNewFile()",
            "org.jgroups.blocks.ReplCache:void put(java.lang.Object,java.lang.Object,short,long)",
            "org.jgroups.blocks.GridFile:void setLength(int)"
        ]
    },
    "org.jgroups.tests.ReplicatedHashMapTest:void testRemove()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.ReplicatedHashMapDemo:void removeItem()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.ReplicatedHashMapDemo:void actionPerformed(java.awt.event.ActionEvent)"
        ]
    },
    "org.jgroups.blocks.ReplCache:void remove(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.ReplCacheDemo:void actionPerformed(java.awt.event.ActionEvent)"
        ]
    },
    "org.jgroups.blocks.GridFile:boolean delete(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.GridFile:boolean delete()"
        ]
    },
    "org.jgroups.blocks.RpcDispatcherAnycastServerObject:void callRemote(boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.RpcDispatcherSerializationTest:void testMarshaller()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.RpcDispatcherSerializationTest:void testTargetMethodNotFound()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.RpcDispatcherSerializationTest:void testNonSerializableArgument()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.ReplicatedHashMapTest:void testIsEmpty()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.ReplicatedHashMapTest:void testClear()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.ReplicatedHashMapTest:void testReplace2()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.ReplicatedHashMapTest:void testPutAndGet()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.ReplicatedHashMapTest:void testEqualsEtc()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.ReplicatedHashMapTest:void testSize()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.ReplicatedHashMapDemo:void actionPerformed(java.awt.event.ActionEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.ReplicatedHashMapTest:void testRemove2()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.ReplicatedHashMapTest:void testContainsKey()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.ReplicatedHashMapTest:void testContainsValue()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.ReplCache:void clear()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.ReplCacheDemo:void clear()"
        ]
    },
    "org.jgroups.tests.ReplicatedHashMapTest:void clean()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.ReplicatedHashMapTest:void testValues()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.ReplicatedHashMapTest:void testKeySet()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.ReplicatedHashMapTest:void testPutAll()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.tests.ReplicatedHashMapTest:void testPutIfAbsent()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.MessageDispatcher:java.lang.Object handleUpEvent(org.jgroups.Event)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.MessageDispatcher$ProtocolAdapter:java.lang.Object up(org.jgroups.Event)"
        ]
    },
    "org.jgroups.blocks.GridFile:void <init>(java.lang.String,org.jgroups.blocks.ReplCache,int,org.jgroups.blocks.GridFilesystem)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.GridFilesystem:java.io.File getFile(java.lang.String,int)",
            "org.jgroups.blocks.GridFile:java.io.File[] _listFiles(java.lang.Object)"
        ]
    },
    "org.jgroups.blocks.GridFile:void <init>(java.lang.String,java.lang.String,org.jgroups.blocks.ReplCache,int,org.jgroups.blocks.GridFilesystem)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.GridFilesystem:java.io.File getFile(java.lang.String,java.lang.String,int)"
        ]
    },
    "org.jgroups.blocks.GridFile:void <init>(java.io.File,java.lang.String,org.jgroups.blocks.ReplCache,int,org.jgroups.blocks.GridFilesystem)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.GridFilesystem:java.io.File getFile(java.io.File,java.lang.String,int)"
        ]
    },
    "org.jgroups.blocks.GridInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.GridInputStream:int read(byte[])"
        ]
    },
    "org.jgroups.blocks.GridInputStream:int read()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.GridFile:boolean checkParentDirs(java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.GridFile:boolean mkdirs()",
            "org.jgroups.blocks.GridFile:boolean mkdir()",
            "org.jgroups.blocks.GridFile:boolean createNewFile()"
        ]
    },
    "org.jgroups.blocks.GridOutputStream:void flush()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.GridOutputStream:void write(byte[],int,int)",
            "org.jgroups.blocks.GridOutputStream:void close()",
            "org.jgroups.blocks.GridOutputStream:void write(int)"
        ]
    },
    "org.jgroups.blocks.GridFilesystem:java.io.InputStream getInput(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.GridFilesystem:java.io.InputStream getInput(java.io.File)"
        ]
    },
    "org.jgroups.blocks.GridFile:boolean createNewFile()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.GridFilesystem:java.io.OutputStream getOutput(org.jgroups.blocks.GridFile)",
            "org.jgroups.blocks.GridFilesystem:java.io.OutputStream getOutput(java.lang.String,boolean,short,int)"
        ]
    },
    "org.jgroups.blocks.GridFile:boolean mkdirs()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.GridFile:boolean mkdir()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.ReplCache:void put(java.lang.Object,java.lang.Object,short,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.GridFile:boolean checkParentDirs(java.lang.String,boolean)",
            "org.jgroups.blocks.ReplCache:void put(java.lang.Object,java.lang.Object)",
            "org.jgroups.blocks.GridOutputStream:void flush()",
            "org.jgroups.demos.ReplCacheDemo:void startPerfTest()",
            "org.jgroups.demos.ReplCacheDemo:void actionPerformed(java.awt.event.ActionEvent)"
        ]
    },
    "org.jgroups.blocks.GridFile:boolean delete()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.ReplCacheDemo:void clear()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.ReplCacheDemo:void actionPerformed(java.awt.event.ActionEvent)"
        ]
    },
    "org.jgroups.blocks.GridFilesystem:java.io.File getFile(java.lang.String,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.GridFilesystem:java.io.OutputStream getOutput(java.lang.String,boolean,short,int)",
            "org.jgroups.blocks.GridFilesystem:java.io.File getFile(java.lang.String)"
        ]
    },
    "org.jgroups.blocks.GridFile:java.io.File[] _listFiles(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.GridFile:java.io.File[] listFiles(java.io.FilenameFilter)",
            "org.jgroups.blocks.GridFile:java.io.File[] listFiles(java.io.FileFilter)"
        ]
    },
    "org.jgroups.blocks.GridFilesystem:java.io.File getFile(java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.GridFilesystem:java.io.File getFile(java.lang.String,java.lang.String)"
        ]
    },
    "org.jgroups.blocks.GridFilesystem:java.io.File getFile(java.io.File,java.lang.String,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.GridFilesystem:java.io.File getFile(java.io.File,java.lang.String)"
        ]
    },
    "org.jgroups.blocks.GridInputStream:int read(byte[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.GridOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.GridOutputStream:void write(byte[])"
        ]
    },
    "org.jgroups.blocks.GridOutputStream:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.GridOutputStream:void write(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.GridFilesystem:java.io.InputStream getInput(java.io.File)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.GridFilesystem:java.io.OutputStream getOutput(org.jgroups.blocks.GridFile)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.GridFilesystem:java.io.OutputStream getOutput(java.lang.String,boolean,short,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.GridFilesystem:java.io.OutputStream getOutput(java.lang.String,boolean)",
            "org.jgroups.blocks.GridFilesystem:java.io.OutputStream getOutput(java.lang.String)"
        ]
    },
    "org.jgroups.blocks.ReplCache:void put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.demos.ReplCacheDemo:void startPerfTest()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.demos.ReplCacheDemo:void actionPerformed(java.awt.event.ActionEvent)"
        ]
    },
    "org.jgroups.blocks.GridFilesystem:java.io.File getFile(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.GridFilesystem:java.io.InputStream getInput(java.lang.String)"
        ]
    },
    "org.jgroups.blocks.GridFile:java.io.File[] listFiles(java.io.FilenameFilter)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.GridFile:java.io.File[] listFiles()"
        ]
    },
    "org.jgroups.blocks.GridFile:java.io.File[] listFiles(java.io.FileFilter)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.GridFilesystem:java.io.File getFile(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.GridFilesystem:java.io.File getFile(java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.GridOutputStream:void write(byte[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.GridFilesystem:java.io.OutputStream getOutput(java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.GridFilesystem:java.io.OutputStream getOutput(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": []
    },
    "org.jgroups.blocks.GridFile:java.io.File[] listFiles()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.jgroups.protocols.UNICAST3:void up(org.jgroups.util.MessageBatch)"
        ],
        "vulCaller": [
            "org.jgroups.blocks.GridFile:boolean delete(boolean)"
        ]
    }
}