{
    "org.apache.activemq.transport.tcp.TcpTransportServer:void configureServerSocket(java.net.ServerSocket)": {
        "isVulRoot": true,
        "srcRoot": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void configureServerSocket(java.net.ServerSocket)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void bind()"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpTransportServer:void bind()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void configureServerSocket(java.net.ServerSocket)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.tcp.SslTransportServer:void bind()",
            "org.apache.activemq.transport.tcp.TcpTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()": {
        "isVulRoot": true,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTNIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()",
            "org.apache.activemq.transport.stomp.StompNIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.amqp.AmqpNioSslTransport:void initializeStreams()"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTNIOSSLTransport:void initializeStreams()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.tcp.TcpTransport:void connect()": {
        "isVulRoot": true,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTNIOTransport:void doStart()",
            "org.apache.activemq.transport.amqp.AmqpNioTransport:void doStart()",
            "org.apache.activemq.transport.nio.NIOTransport:void doStart()",
            "org.apache.activemq.transport.stomp.StompNIOTransport:void doStart()",
            "org.apache.activemq.transport.tcp.TcpTransport:void doStart()"
        ]
    },
    "org.apache.activemq.transport.stomp.StompNIOSSLTransport:void initializeStreams()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.amqp.AmqpNioSslTransport:void initializeStreams()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.mqtt.MQTTNIOTransport:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.amqp.AmqpNioTransport:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.nio.NIOTransport:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doStart()"
        ]
    },
    "org.apache.activemq.transport.stomp.StompNIOTransport:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.tcp.TcpTransport:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void start()"
        ]
    },
    "org.apache.activemq.transport.tcp.SslTransportServer:void bind()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void configureServerSocket(java.net.ServerSocket)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.tcp.SslTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void configureServerSocket(java.net.ServerSocket)"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.amqp.AmqpNioSslTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.net.URI)",
            "org.apache.activemq.transport.stomp.StompNIOSSLTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.net.URI)",
            "org.apache.activemq.transport.mqtt.MQTTNIOSSLTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.net.URI)",
            "org.apache.activemq.transport.nio.NIOSSLTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.nio.NIOSSLTransport:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.util.ServiceSupport:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void start()",
            "org.apache.activemq.broker.TransportConnector:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:org.apache.activemq.broker.scheduler.JobScheduler getJobScheduler(java.lang.String)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void start()",
            "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$start_master$1:void apply$mcV$sp()",
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$start_slave$1:void apply$mcV$sp()",
            "org.apache.activemq.network.NetworkConnector:void start()",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.thread.Scheduler getScheduler()",
            "org.apache.activemq.broker.LockableServiceSupport:void preStart()",
            "org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter:void doStart()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.broker.TransportConnection:void start()",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl:void intialize()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.thread.Scheduler getScheduler()"
        ]
    },
    "org.apache.activemq.transport.tcp.SslTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void configureServerSocket(java.net.ServerSocket)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.SslBrokerService:org.apache.activemq.transport.TransportServer createSslTransportServer(java.net.URI,javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpNioSslTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void configureServerSocket(java.net.ServerSocket)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.stomp.StompNIOSSLTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void configureServerSocket(java.net.ServerSocket)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.mqtt.MQTTNIOSSLTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void configureServerSocket(java.net.ServerSocket)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.nio.NIOSSLTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void configureServerSocket(java.net.ServerSocket)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnector:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector startTransportConnector(org.apache.activemq.broker.TransportConnector)",
            "org.apache.activemq.broker.jmx.BrokerView:java.lang.String addConnector(java.lang.String)",
            "org.apache.activemq.broker.jmx.ConnectorView:void start()",
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void start()",
            "org.apache.activemq.broker.TransportConnection:void start()"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:org.apache.activemq.broker.scheduler.JobScheduler getJobScheduler(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void start()",
            "org.apache.activemq.broker.TransportConnection:void start()"
        ]
    },
    "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$start_master$1:void apply$mcV$sp()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$start_master$1:void apply()"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.udp.UdpTransportServer$2:void start()",
            "org.apache.activemq.proxy.ProxyConnection:void start()",
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()",
            "org.apache.activemq.transport.WriteTimeoutFilter:void start()",
            "org.apache.activemq.transport.WireFormatNegotiator:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.transport.mock.MockTransport:void start()",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void start()",
            "org.apache.activemq.transport.reliable.ReliableTransport:void start()",
            "org.apache.activemq.broker.TransportConnection:void start()"
        ]
    },
    "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$start_slave$1:void apply$mcV$sp()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$start_slave$1:void apply()"
        ]
    },
    "org.apache.activemq.network.NetworkConnector:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.LdapNetworkConnector:void addConnector(javax.naming.directory.SearchResult)",
            "org.apache.activemq.broker.jmx.BrokerView:java.lang.String addNetworkConnector(java.lang.String)",
            "org.apache.activemq.broker.BrokerService$8:void run()",
            "org.apache.activemq.broker.jmx.NetworkConnectorView:void start()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:org.apache.activemq.thread.Scheduler getScheduler()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession$5:void afterRollback()",
            "org.apache.activemq.ActiveMQSession:void clearMessagesInProgress(java.util.concurrent.atomic.AtomicInteger)",
            "org.apache.activemq.ActiveMQMessageConsumer:void setOptimizedAckScheduledAckInterval(long)",
            "org.apache.activemq.ActiveMQSession:org.apache.activemq.thread.Scheduler getScheduler()",
            "org.apache.activemq.ActiveMQMessageConsumer:void dispose()"
        ]
    },
    "org.apache.activemq.broker.LockableServiceSupport:void preStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void start()"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void duplexStart(org.apache.activemq.broker.TransportConnection,org.apache.activemq.command.BrokerInfo,org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.network.DiscoveryNetworkConnector:void onServiceAdd(org.apache.activemq.command.DiscoveryEvent)",
            "org.apache.activemq.broker.jmx.NetworkBridgeView:void start()",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStart()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ConnectionView:void start()",
            "org.apache.activemq.broker.TransportConnector$1$1:void run()"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl:void intialize()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl:org.apache.activemq.store.kahadb.plist.PListImpl getPList(java.lang.String)",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl:void doStart()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.thread.Scheduler getScheduler()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createRegionBroker(org.apache.activemq.broker.region.DestinationInterceptor)",
            "org.apache.activemq.network.MBeanBridgeDestination:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.network.NetworkBridgeConfiguration,org.apache.activemq.network.NetworkBridge,org.apache.activemq.broker.jmx.NetworkBridgeView)",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl:void setBrokerService(org.apache.activemq.broker.BrokerService)"
        ]
    },
    "org.apache.activemq.broker.SslBrokerService:org.apache.activemq.transport.TransportServer createSslTransportServer(java.net.URI,javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void configureServerSocket(java.net.ServerSocket)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.SslBrokerService:org.apache.activemq.broker.TransportConnector addSslConnector(java.net.URI,javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector startTransportConnector(org.apache.activemq.broker.TransportConnector)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:java.lang.String addConnector(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ConnectorView:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.peer.PeerTransportFactory$1:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)",
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$start_master$1:void apply()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$start_master$1:java.lang.Object apply()"
        ]
    },
    "org.apache.activemq.transport.udp.UdpTransportServer$2:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void start()",
            "org.apache.activemq.broker.TransportConnection:void start()"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnection:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.proxy.ProxyConnector$1:void onAccept(org.apache.activemq.transport.Transport)"
        ]
    },
    "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.WriteTimeoutFilter:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void start()",
            "org.apache.activemq.broker.TransportConnection:void start()"
        ]
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void start()",
            "org.apache.activemq.broker.TransportConnection:void start()"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void start()",
            "org.apache.activemq.broker.TransportConnection:void start()"
        ]
    },
    "org.apache.activemq.transport.reliable.ReliableTransport:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void start()",
            "org.apache.activemq.broker.TransportConnection:void start()"
        ]
    },
    "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$start_slave$1:void apply()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$start_slave$1:java.lang.Object apply()"
        ]
    },
    "org.apache.activemq.network.LdapNetworkConnector:void addConnector(javax.naming.directory.SearchResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.LdapNetworkConnector:void objectAdded(javax.naming.event.NamingEvent)",
            "org.apache.activemq.network.LdapNetworkConnector:void start()",
            "org.apache.activemq.network.LdapNetworkConnector:void objectChanged(javax.naming.event.NamingEvent)"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:java.lang.String addNetworkConnector(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService$8:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.NetworkConnectorView:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession$5:void afterRollback()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:void clearMessagesInProgress(java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void setOptimizedAckScheduledAckInterval(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean,javax.jms.MessageListener)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:org.apache.activemq.thread.Scheduler getScheduler()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void rollback()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void dispose()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void doClose()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void duplexStart(org.apache.activemq.broker.TransportConnection,org.apache.activemq.command.BrokerInfo,org.apache.activemq.command.BrokerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBrokerInfo(org.apache.activemq.command.BrokerInfo)"
        ]
    },
    "org.apache.activemq.network.DiscoveryNetworkConnector:void onServiceAdd(org.apache.activemq.command.DiscoveryEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.NetworkBridgeView:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.MulticastNetworkConnector:void handleStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.NetworkConnector$1:void doStart()"
        ]
    },
    "org.apache.activemq.broker.jmx.ConnectionView:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnector$1$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl:org.apache.activemq.store.kahadb.plist.PListImpl getPList(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl:org.apache.activemq.store.PList getPList(java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createRegionBroker(org.apache.activemq.broker.region.DestinationInterceptor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createRegionBroker()"
        ]
    },
    "org.apache.activemq.network.MBeanBridgeDestination:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.network.NetworkBridgeConfiguration,org.apache.activemq.network.NetworkBridge,org.apache.activemq.broker.jmx.NetworkBridgeView)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.MBeanNetworkListener:void onStart(org.apache.activemq.network.NetworkBridge)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl:void setBrokerService(org.apache.activemq.broker.BrokerService)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.SslBrokerService:org.apache.activemq.broker.TransportConnector addSslConnector(java.net.URI,javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void configureServerSocket(java.net.ServerSocket)"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.SslBrokerService:org.apache.activemq.broker.TransportConnector addSslConnector(java.lang.String,javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void startAllConnectors()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void doStartBroker()",
            "org.apache.activemq.broker.BrokerService:void masterFailed()",
            "org.apache.activemq.util.DefaultIOExceptionHandler$1$1:void run()"
        ]
    },
    "org.apache.activemq.transport.peer.PeerTransportFactory$1:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.peer.PeerTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)",
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.peer.PeerTransportFactory$1:org.apache.activemq.transport.Transport doConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$start_master$1:java.lang.Object apply()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.proxy.ProxyConnector$1:void onAccept(org.apache.activemq.transport.Transport)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$start_slave$1:java.lang.Object apply()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.LdapNetworkConnector:void objectAdded(javax.naming.event.NamingEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.LdapNetworkConnector:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.LdapNetworkConnector:void objectChanged(javax.naming.event.NamingEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean,javax.jms.MessageListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean,javax.jms.MessageListener)",
            "org.apache.activemq.ActiveMQQueueReceiver:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,int,int,boolean)",
            "org.apache.activemq.ActiveMQTopicSubscriber:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean)",
            "org.apache.activemq.ActiveMQQueueBrowser$1:void <init>(org.apache.activemq.ActiveMQQueueBrowser,org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean,javax.jms.MessageListener)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void rollback()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer$5:void afterRollback()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void doClose()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer$3:void afterCommit()",
            "org.apache.activemq.ActiveMQMessageConsumer:void close()",
            "org.apache.activemq.ActiveMQMessageConsumer$3:void afterRollback()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBrokerInfo(org.apache.activemq.command.BrokerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.command.BrokerInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.network.NetworkConnector$1:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void start()"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl:org.apache.activemq.store.PList getPList(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createRegionBroker()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createBroker()"
        ]
    },
    "org.apache.activemq.network.MBeanNetworkListener:void onStart(org.apache.activemq.network.NetworkBridge)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()"
        ]
    },
    "org.apache.activemq.broker.SslBrokerService:org.apache.activemq.broker.TransportConnector addSslConnector(java.lang.String,javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void configureServerSocket(java.net.ServerSocket)"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:void doStartBroker()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void access$300(org.apache.activemq.broker.BrokerService)",
            "org.apache.activemq.broker.BrokerService:void startBroker(boolean)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void masterFailed()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.util.DefaultIOExceptionHandler$1$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.peer.PeerTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.peer.PeerTransportFactory$1:org.apache.activemq.transport.Transport doConnect(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.peer.PeerTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean,javax.jms.MessageListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,javax.jms.MessageListener)",
            "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueReceiver:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,int,int,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSubscriber:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic,java.lang.String,boolean)",
            "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueBrowser$1:void <init>(org.apache.activemq.ActiveMQQueueBrowser,org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean,javax.jms.MessageListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueBrowser:org.apache.activemq.ActiveMQMessageConsumer createConsumer()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueBrowser$1:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:boolean iterate()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer$5:void afterRollback()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQMessageConsumer$3:void afterCommit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledMessageConsumer:void close()",
            "org.apache.activemq.ActiveMQQueueBrowser:void destroyConsumer()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer$3:void afterRollback()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.command.BrokerInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createBroker()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker getBroker()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void doStartLocalAndRemoteBridges()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void access$300(org.apache.activemq.broker.BrokerService)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService$3:void run()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void startBroker(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void start()"
        ]
    },
    "org.apache.activemq.transport.peer.PeerTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,javax.jms.MessageListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,javax.jms.MessageListener)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)",
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)",
            "org.apache.activemq.jms.pool.PooledSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue,java.lang.String)",
            "org.apache.activemq.jms.pool.PooledSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue,java.lang.String)",
            "org.apache.activemq.ActiveMQSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic)",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic,java.lang.String,boolean)",
            "org.apache.activemq.jms.pool.PooledSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String)",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String,java.lang.String,boolean)",
            "org.apache.activemq.jms.pool.PooledSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueBrowser:org.apache.activemq.ActiveMQMessageConsumer createConsumer()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueBrowser:java.util.Enumeration getEnumeration()"
        ]
    },
    "org.apache.activemq.ActiveMQQueueBrowser$1:void dispatch(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQMessageConsumer:boolean iterate()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledMessageConsumer:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueBrowser:void destroyConsumer()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueBrowser:java.lang.Object nextElement()",
            "org.apache.activemq.ActiveMQQueueBrowser:void close()",
            "org.apache.activemq.ActiveMQQueueBrowser:boolean hasMoreElements()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection$1:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker getBroker()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startDestinations()",
            "org.apache.activemq.broker.jmx.DurableSubscriptionView:void destroy()",
            "org.apache.activemq.broker.TransportConnector:void start()",
            "org.apache.activemq.broker.BrokerService:void removeDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.network.LdapNetworkConnector:void addConnector(javax.naming.directory.SearchResult)",
            "org.apache.activemq.broker.jmx.BrokerView:void gc()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.ConnectionContext getAdminConnectionContext()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void fireFailedForwardAdvisory(org.apache.activemq.command.MessageDispatch,java.lang.Throwable)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.broker.view.MessageBrokerView:java.util.Set getDestinations()",
            "org.apache.activemq.broker.region.BaseDestination:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.store.MessageStore,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)",
            "org.apache.activemq.broker.view.MessageBrokerView:java.lang.String getBrokerId()",
            "org.apache.activemq.broker.jmx.BrokerView:void destroyDurableSubscriber(java.lang.String,java.lang.String)",
            "org.apache.activemq.advisory.AdvisoryBroker:void nowMasterBroker()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.region.Destination getDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)",
            "org.apache.activemq.broker.BrokerService:void doStartBroker()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()",
            "org.apache.activemq.advisory.AdvisoryBroker:void networkBridgeStarted(org.apache.activemq.command.BrokerInfo,boolean,java.lang.String)",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.jmx.BrokerView getAdminView()",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:org.apache.activemq.broker.inteceptor.MessageInterceptorFilter getFilter()",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.Broker getRoot()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()",
            "org.apache.activemq.advisory.AdvisoryBroker:void networkBridgeStopped(org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:void destroy()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void doStartLocalAndRemoteBridges()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void access$500(org.apache.activemq.network.DemandForwardingBridgeSupport)"
        ]
    },
    "org.apache.activemq.broker.BrokerService$3:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void start(boolean)",
            "org.apache.activemq.xbean.XBeanBrokerService:void afterPropertiesSet()",
            "org.apache.activemq.broker.BrokerService:void autoStart()",
            "org.apache.activemq.transport.http.HttpEmbeddedTunnelServlet:void init()",
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)",
            "org.apache.activemq.broker.jmx.BrokerView:void start()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,javax.jms.MessageListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)",
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)",
            "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue)",
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic)",
            "org.apache.activemq.jms.pool.PooledSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String)",
            "org.apache.activemq.jms.pool.PooledSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueBrowser:java.util.Enumeration getEnumeration()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.filter.AmqMessagesQueryFilter:java.util.List queryMessages(org.apache.activemq.command.ActiveMQQueue,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueBrowser:java.lang.Object nextElement()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueBrowser:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueBrowser:boolean hasMoreElements()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnection$1:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.state.ConnectionStateTracker:void connectionInterruptProcessingComplete(org.apache.activemq.transport.Transport,org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void startDestinations()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void doStartBroker()"
        ]
    },
    "org.apache.activemq.broker.jmx.DurableSubscriptionView:void destroy()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:void removeDestination(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.MirroredQueue:void remove(org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:void gc()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.ConnectionContext getAdminConnectionContext()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startDestinations()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.region.Destination getDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerService:void startVirtualConsumerDestinations()",
            "org.apache.activemq.broker.BrokerService:void removeDestination(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void fireFailedForwardAdvisory(org.apache.activemq.command.MessageDispatch,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalException(org.apache.activemq.command.MessageDispatch,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.broker.view.MessageBrokerView:java.util.Set getDestinations()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.view.MessageBrokerView:java.util.Set getTopics()",
            "org.apache.activemq.broker.view.MessageBrokerView:java.util.Set getTempTopics()",
            "org.apache.activemq.broker.view.MessageBrokerView:java.util.Set getQueues()",
            "org.apache.activemq.broker.view.MessageBrokerView:java.util.Set getTempQueues()"
        ]
    },
    "org.apache.activemq.broker.region.BaseDestination:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.store.MessageStore,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.TopicMessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)",
            "org.apache.activemq.broker.region.Queue:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.MessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)"
        ]
    },
    "org.apache.activemq.broker.view.MessageBrokerView:java.lang.String getBrokerId()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:void destroyDurableSubscriber(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void nowMasterBroker()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void nowMasterBroker()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.region.Destination getDestination(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.view.MessageBrokerView:org.apache.activemq.broker.view.BrokerDestinationView getDestinationView(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.virtual.MirroredQueue:org.apache.activemq.broker.region.Destination getMirrorDestination(org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void networkBridgeStarted(org.apache.activemq.command.BrokerInfo,boolean,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void networkBridgeStarted(org.apache.activemq.command.BrokerInfo,boolean,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.jmx.BrokerView getAdminView()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.AbstractRegion:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void start()"
        ]
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:org.apache.activemq.broker.inteceptor.MessageInterceptorFilter getFilter()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:void injectMessage(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:org.apache.activemq.broker.inteceptor.MessageInterceptor addMessageInterceptor(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:void removeMessageInterceptor(org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.inteceptor.MessageInterceptor)",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:org.apache.activemq.broker.inteceptor.MessageInterceptor addMessageInterceptor(org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.inteceptor.MessageInterceptor)",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:void removeMessageInterceptorForQueue(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:void removeMessageInterceptor(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:org.apache.activemq.broker.inteceptor.MessageInterceptor addMessageInterceptorForQueue(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:org.apache.activemq.broker.inteceptor.MessageInterceptor addMessageInterceptorForTopic(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:void removeMessageInterceptorForTopic(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.Broker getRoot()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void discard(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.Broker getRoot()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void sendToDLQ(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,java.lang.Throwable)",
            "org.apache.activemq.broker.region.RegionBroker:void purgeInactiveDestinations()",
            "org.apache.activemq.broker.region.RegionBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)",
            "org.apache.activemq.broker.region.RegionBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.NetworkBridgeView:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void networkBridgeStopped(org.apache.activemq.command.BrokerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void networkBridgeStopped(org.apache.activemq.command.BrokerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:void destroy()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void access$500(org.apache.activemq.network.DemandForwardingBridgeSupport)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport$5:void run()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void start(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.xbean.XBeanBrokerService:void afterPropertiesSet()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.xbean.XBeanBrokerService:void postConstruct()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void autoStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void postConstruct()"
        ]
    },
    "org.apache.activemq.transport.http.HttpEmbeddedTunnelServlet:void init()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)",
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)",
            "org.apache.activemq.advisory.DestinationSource:void start()"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.console.filter.AmqMessagesQueryFilter:java.util.List queryMessages(org.apache.activemq.command.ActiveMQQueue,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.filter.AmqMessagesQueryFilter:java.util.List query(java.util.List)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransport:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.vm.VMTransportServer$1:void stop()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onActiveMQCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void sendToActiveMQ(org.apache.activemq.command.Command,org.apache.activemq.transport.mqtt.ResponseHandler)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTPubComp(org.fusesource.mqtt.codec.PUBCOMP)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTPubAck(org.fusesource.mqtt.codec.PUBACK)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void sendToActiveMQ(org.apache.activemq.command.Command,org.apache.activemq.transport.stomp.ResponseHandler)",
            "org.apache.activemq.transport.stomp.StompSubscription:void onMessageDispatch(org.apache.activemq.command.MessageDispatch,java.lang.String)",
            "org.apache.activemq.transport.stomp.StompSubscription:void onStompCommit(org.apache.activemq.command.TransactionId)"
        ]
    },
    "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransport:void dispatch(org.apache.activemq.transport.vm.VMTransport,java.util.concurrent.BlockingQueue,java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void start()"
        ]
    },
    "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransport:boolean iterate()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.udp.ResponseRedirectInterceptor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransport:void doRun()",
            "org.apache.activemq.transport.tcp.SslTransport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTCodec:void processCommand()",
            "org.apache.activemq.transport.udp.UdpTransport:void run()",
            "org.apache.activemq.transport.http.HttpClientTransport:void run()",
            "org.apache.activemq.transport.amqp.AmqpNioTransport:void serviceRead()",
            "org.apache.activemq.transport.nio.NIOTransport:void serviceRead()",
            "org.apache.activemq.transport.stomp.StompCodec:void processCommand()",
            "org.apache.activemq.transport.ws.StompSocket:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.ws.MQTTSocket:void sendToActiveMQ(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:boolean iterate()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void duplexStart(org.apache.activemq.broker.TransportConnection,org.apache.activemq.command.BrokerInfo,org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$3:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport$1:void onCommand(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$2:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void doStartLocalAndRemoteBridges()"
        ]
    },
    "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void oneway(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter$2:void onResponse(org.apache.activemq.transport.mqtt.MQTTProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter$1$1:void onResponse(org.apache.activemq.transport.mqtt.MQTTProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter$1:void onResponse(org.apache.activemq.transport.mqtt.MQTTProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onActiveMQCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTCommand(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onSubscribe(org.fusesource.mqtt.codec.SUBSCRIBE)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter$3:void onResponse(org.apache.activemq.transport.mqtt.MQTTProtocolConverter,org.apache.activemq.command.Response)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.ResponseCorrelator:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.ResponseCorrelator:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.reliable.ReliableTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.reliable.ReliableTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.MutexTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)"
        ]
    },
    "org.apache.activemq.state.ConnectionStateTracker:void connectionInterruptProcessingComplete(org.apache.activemq.transport.Transport,org.apache.activemq.command.ConnectionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void connectionInterruptProcessingComplete(org.apache.activemq.command.ConnectionId)"
        ]
    },
    "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.proxy.ProxyConnection$1:void onCommand(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.WireFormatNegotiator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ThreadNameFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.transport.WriteTimeoutFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mock.MockTransport:void oneway(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter$2:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.stomp.ProtocolConverter$1:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onActiveMQCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.stomp.StompSubscription:void onMessageDispatch(org.apache.activemq.command.MessageDispatch,java.lang.String)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor:void access$500(org.apache.activemq.transport.AbstractInactivityMonitor,java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void oneway(java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.MirroredQueue:void remove(org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:void startVirtualConsumerDestinations()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startDestinations()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalException(org.apache.activemq.command.MessageDispatch,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport$11:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalException(java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.broker.view.MessageBrokerView:java.util.Set getTopics()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.camel.component.broker.BrokerComponent:java.util.List completeEndpointPath(org.apache.camel.ComponentConfiguration,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.view.MessageBrokerView:java.util.Set getTempTopics()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.MessageBrokerView:java.util.Set getQueues()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.camel.component.broker.BrokerComponent:java.util.List completeEndpointPath(org.apache.camel.ComponentConfiguration,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.view.MessageBrokerView:java.util.Set getTempQueues()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Topic:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.TopicMessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TempTopic:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.TopicMessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)",
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.MessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TempQueue:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.MessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)",
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void nowMasterBroker()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void nowMasterBroker()",
            "org.apache.activemq.advisory.AdvisoryBroker:void nowMasterBroker()"
        ]
    },
    "org.apache.activemq.broker.view.MessageBrokerView:org.apache.activemq.broker.view.BrokerDestinationView getDestinationView(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.view.MessageBrokerView:org.apache.activemq.broker.view.BrokerDestinationView getDestinationView(java.lang.String,byte)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.MirroredQueue:org.apache.activemq.broker.region.Destination getMirrorDestination(org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.MirroredQueue:org.apache.activemq.broker.region.Destination intercept(org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void networkBridgeStarted(org.apache.activemq.command.BrokerInfo,boolean,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void networkBridgeStarted(org.apache.activemq.command.BrokerInfo,boolean,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void start()",
            "org.apache.activemq.broker.BrokerFilter:void start()",
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.broker.BrokerBroadcaster:void start()"
        ]
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:void injectMessage(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.camel.component.broker.BrokerEndpoint:void inject(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:org.apache.activemq.broker.inteceptor.MessageInterceptor addMessageInterceptor(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:void removeMessageInterceptor(org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.inteceptor.MessageInterceptor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.camel.component.broker.BrokerEndpoint:void removeMessageInterceptor(org.apache.activemq.broker.inteceptor.MessageInterceptor)"
        ]
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:org.apache.activemq.broker.inteceptor.MessageInterceptor addMessageInterceptor(org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.inteceptor.MessageInterceptor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.camel.component.broker.BrokerEndpoint:void addMessageInterceptor(org.apache.activemq.broker.inteceptor.MessageInterceptor)"
        ]
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:void removeMessageInterceptorForQueue(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:void removeMessageInterceptor(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:org.apache.activemq.broker.inteceptor.MessageInterceptor addMessageInterceptorForQueue(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:org.apache.activemq.broker.inteceptor.MessageInterceptor addMessageInterceptorForTopic(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:void removeMessageInterceptorForTopic(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TopicSubscription:void discard(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.Broker getRoot()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.Broker getRoot()",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorFilter:void injectMessage(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void sendToDLQ(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void purgeInactiveDestinations()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker$1:void run()"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)",
            "org.apache.activemq.plugin.DiscardingDLQBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.BrokerFilter:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.jmx.NetworkBridgeView:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnection:void doStop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void serviceTransportException(java.io.IOException)",
            "org.apache.activemq.broker.TransportConnection$4:void run()"
        ]
    },
    "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$2:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.ActiveMQConnection$6:void run()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void remove(boolean,java.net.URI[])",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$6:void run()",
            "org.apache.activemq.ActiveMQConnection:void close()",
            "org.apache.activemq.broker.TransportConnector$1$1:void run()",
            "org.apache.activemq.network.DiscoveryNetworkConnector:void onServiceAdd(org.apache.activemq.command.DiscoveryEvent)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void collectBrokerInfos()",
            "org.apache.activemq.transport.vm.VMTransportFactory:void stopped(java.lang.String)",
            "org.apache.activemq.transport.failover.FailoverTransport:void disposeTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$9:void run()",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport:boolean doConnect()",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.ForwardingBridge:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.ForwardingBridge:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnector$1:void onAccept(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.vm.VMTransportFactory:boolean validateBroker(java.lang.String)"
        ]
    },
    "org.apache.activemq.network.MulticastNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.NetworkConnector$1:void doStop(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void networkBridgeStopped(org.apache.activemq.command.BrokerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void networkBridgeStopped(org.apache.activemq.command.BrokerInfo)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$5:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.xbean.XBeanBrokerService:void postConstruct()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:void postConstruct()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.advisory.DestinationSource:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.advisory.DestinationSource getDestinationSource()"
        ]
    },
    "org.apache.activemq.console.filter.AmqMessagesQueryFilter:java.util.List query(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.filter.MBeansAttributeQueryFilter:java.util.List query(java.util.List)",
            "org.apache.activemq.console.filter.RegExQueryFilter:java.util.List query(java.util.List)",
            "org.apache.activemq.console.filter.WildcardTransformFilter:java.util.List query(java.util.List)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.broker.region.RegionBroker:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.network.ForwardingBridge:void stop()",
            "org.apache.activemq.proxy.ProxyConnection:void stop()",
            "org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.discovery.DiscoveryTransport:void stop()",
            "org.apache.activemq.proxy.ProxyConnector:void stop()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()",
            "org.apache.activemq.broker.TransportConnector:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stopServices(java.util.List)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void stop()",
            "org.apache.activemq.broker.BrokerService:void stopAllConnectors(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransportServer$1:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.ResponseCorrelator:void stop()",
            "org.apache.activemq.transport.WriteTimeoutFilter:void stop()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void stop()",
            "org.apache.activemq.transport.mock.MockTransport:void stop()",
            "org.apache.activemq.transport.WireFormatNegotiator:void stop()",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.proxy.ProxyConnector$2:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.transport.CommandJoiner:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onActiveMQCommand(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.ws.MQTTSocket:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void oneway(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void sendToActiveMQ(org.apache.activemq.command.Command,org.apache.activemq.transport.mqtt.ResponseHandler)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter$1:void onResponse(org.apache.activemq.transport.mqtt.MQTTProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onTransportError()",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTDisconnect()",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTPublish(org.fusesource.mqtt.codec.PUBLISH)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onUnSubscribe(org.fusesource.hawtbuf.UTF8Buffer)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:org.fusesource.mqtt.client.QoS onSubscribe(org.fusesource.mqtt.codec.SUBSCRIBE,org.fusesource.mqtt.client.Topic)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTConnect(org.fusesource.mqtt.codec.CONNECT)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTPubComp(org.fusesource.mqtt.codec.PUBCOMP)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTCommand(org.fusesource.mqtt.codec.MQTTFrame)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTPubAck(org.fusesource.mqtt.codec.PUBACK)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTCommand(org.fusesource.mqtt.codec.MQTTFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void sendToActiveMQ(org.apache.activemq.command.Command,org.apache.activemq.transport.stomp.ResponseHandler)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompSubscribe(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:org.apache.activemq.command.ActiveMQDestination createTempDestination(java.lang.String,boolean)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompNack(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompSend(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompAck(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter$2:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompBegin(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompConnect(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompUnsubscribe(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompAbort(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter$3:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompDisconnect(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommit(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompSubscription:void onMessageDispatch(org.apache.activemq.command.MessageDispatch,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.StompQueueBrowserSubscription:void onMessageDispatch(org.apache.activemq.command.MessageDispatch,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompSubscription:void onStompCommit(org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.vm.VMTransport:void dispatch(org.apache.activemq.transport.vm.VMTransport,java.util.concurrent.BlockingQueue,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransport:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void start()",
            "org.apache.activemq.broker.TransportConnection:void start()"
        ]
    },
    "org.apache.activemq.transport.reliable.ReliableTransport:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.udp.UdpTransportServer$2:void start()",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.thread.PooledTaskRunner:void runTask()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.PooledTaskRunner$1:void run()"
        ]
    },
    "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.DedicatedTaskRunner$1:void run()"
        ]
    },
    "org.apache.activemq.transport.udp.ResponseRedirectInterceptor:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.tcp.TcpTransport:void doRun()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransport:void run()"
        ]
    },
    "org.apache.activemq.transport.tcp.SslTransport:void doConsume(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.StompSslTransportFactory$1$1:void doConsume(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTCodec:void processCommand()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTCodec:void parse(org.fusesource.hawtbuf.DataByteArrayInputStream,int)"
        ]
    },
    "org.apache.activemq.transport.udp.UdpTransport:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.http.HttpClientTransport:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.amqp.AmqpNioTransport:void serviceRead()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.amqp.AmqpNioTransport:void access$000(org.apache.activemq.transport.amqp.AmqpNioTransport)"
        ]
    },
    "org.apache.activemq.transport.nio.NIOTransport:void serviceRead()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOTransport$1:void onSelect(org.apache.activemq.transport.nio.SelectorSelection)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompCodec:void processCommand()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.StompCodec:void parse(java.io.ByteArrayInputStream,int)"
        ]
    },
    "org.apache.activemq.transport.ws.StompSocket:void sendToActiveMQ(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void sendToActiveMQ(org.apache.activemq.command.Command,org.apache.activemq.transport.stomp.ResponseHandler)",
            "org.apache.activemq.transport.stomp.StompSubscription:void onMessageDispatch(org.apache.activemq.command.MessageDispatch,java.lang.String)",
            "org.apache.activemq.transport.stomp.StompSubscription:void onStompCommit(org.apache.activemq.command.TransactionId)"
        ]
    },
    "org.apache.activemq.transport.nio.NIOSSLTransport:void doConsume(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.amqp.AmqpNioSslTransport:void processCommand(java.nio.ByteBuffer)",
            "org.apache.activemq.transport.mqtt.MQTTCodec:void processCommand()",
            "org.apache.activemq.transport.stomp.StompNIOSSLTransport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.nio.NIOSSLTransport:void processCommand(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.activemq.transport.ws.MQTTSocket:void sendToActiveMQ(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onActiveMQCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void sendToActiveMQ(org.apache.activemq.command.Command,org.apache.activemq.transport.mqtt.ResponseHandler)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTPubComp(org.fusesource.mqtt.codec.PUBCOMP)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTPubAck(org.fusesource.mqtt.codec.PUBACK)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchSync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:boolean iterate()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:boolean iterate()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$3:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.WireFormatNegotiator:void start()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$1:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$2:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.reliable.DefaultReplayStrategy:boolean onDroppedPackets(org.apache.activemq.transport.reliable.ReliableTransport,int,int,int)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void onMissingResponse(org.apache.activemq.command.Command,org.apache.activemq.transport.FutureResponse)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter$2:void onResponse(org.apache.activemq.transport.mqtt.MQTTProtocolConverter,org.apache.activemq.command.Response)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter$1$1:void onResponse(org.apache.activemq.transport.mqtt.MQTTProtocolConverter,org.apache.activemq.command.Response)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter$1:void onResponse(org.apache.activemq.transport.mqtt.MQTTProtocolConverter,org.apache.activemq.command.Response)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTCommand(org.fusesource.mqtt.codec.MQTTFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.ws.MQTTSocket:void onMessage(byte[],int,int)",
            "org.apache.activemq.transport.ws.MQTTSocket:void onClose(int,java.lang.String)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onSubscribe(org.fusesource.mqtt.codec.SUBSCRIBE)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTCommand(org.fusesource.mqtt.codec.MQTTFrame)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTPubRel(org.fusesource.mqtt.codec.PUBREL)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTPubRec(org.fusesource.mqtt.codec.PUBREC)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onUnSubscribe(org.fusesource.mqtt.codec.UNSUBSCRIBE)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter$3:void onResponse(org.apache.activemq.transport.mqtt.MQTTProtocolConverter,org.apache.activemq.command.Response)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.ResponseCorrelator:java.lang.Object request(java.lang.Object,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object,int)"
        ]
    },
    "org.apache.activemq.transport.ResponseCorrelator:java.lang.Object request(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.TransportLogger:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.TransportLogger:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)"
        ]
    },
    "org.apache.activemq.transport.reliable.ReliableTransport:java.lang.Object request(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.reliable.ReliableTransport:java.lang.Object request(java.lang.Object,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object,int)"
        ]
    },
    "org.apache.activemq.transport.MutexTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.TransportLogger:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.mock.MockTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportLogger:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void connectionInterruptProcessingComplete(org.apache.activemq.command.ConnectionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.proxy.ProxyConnection$1:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.ThreadNameFilter:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.WriteTimeoutFilter:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter$2:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter$1:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onActiveMQCommand(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.StompTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ws.StompSocket:void oneway(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.StompQueueBrowserSubscription:void onMessageDispatch(org.apache.activemq.command.MessageDispatch,java.lang.String)",
            "org.apache.activemq.transport.stomp.ProtocolConverter$3$1:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void handleException(java.lang.Throwable,org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void sendReceipt(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor:void access$500(org.apache.activemq.transport.AbstractInactivityMonitor,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor$3:void run()"
        ]
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$11:void onCompletion(org.apache.activemq.transport.FutureResponse)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.FutureResponse:void set(org.apache.activemq.command.Response)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalException(java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport$2:void onException(java.io.IOException)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$1:void onException(java.io.IOException)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void doStartLocalAndRemoteBridges()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void collectBrokerInfos()"
        ]
    },
    "org.apache.activemq.camel.component.broker.BrokerComponent:java.util.List completeEndpointPath(org.apache.camel.ComponentConfiguration,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TempTopic:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.TopicMessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractTempRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.TempQueue:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.MessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)"
        ]
    },
    "org.apache.activemq.broker.view.MessageBrokerView:org.apache.activemq.broker.view.BrokerDestinationView getDestinationView(java.lang.String,byte)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.view.MessageBrokerView:org.apache.activemq.broker.view.BrokerDestinationView getQueueDestinationView(java.lang.String)",
            "org.apache.activemq.broker.view.MessageBrokerView:org.apache.activemq.broker.view.BrokerDestinationView getTopicDestinationView(java.lang.String)",
            "org.apache.activemq.broker.view.MessageBrokerView:org.apache.activemq.broker.view.BrokerDestinationView getDestinationView(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.MirroredQueue:org.apache.activemq.broker.region.Destination intercept(org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void start()",
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.broker.BrokerBroadcaster:void start()"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void start()",
            "org.apache.activemq.plugin.StatisticsBroker:void start()",
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void start()",
            "org.apache.activemq.broker.BrokerBroadcaster:void start()"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void start()",
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.broker.BrokerBroadcaster:void start()"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.camel.component.broker.BrokerEndpoint:void inject(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.camel.component.broker.BrokerProducer:boolean processInOnly(org.apache.camel.Exchange,org.apache.camel.AsyncCallback)"
        ]
    },
    "org.apache.activemq.camel.component.broker.BrokerEndpoint:void removeMessageInterceptor(org.apache.activemq.broker.inteceptor.MessageInterceptor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.camel.component.broker.BrokerEndpoint:void addMessageInterceptor(org.apache.activemq.broker.inteceptor.MessageInterceptor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.camel.component.broker.BrokerEndpoint:void doStart()"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:org.apache.activemq.command.Response pullMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:void access$100(org.apache.activemq.broker.region.TopicSubscription)",
            "org.apache.activemq.broker.region.TopicSubscription:void setPrefetchSize(int)",
            "org.apache.activemq.broker.region.TopicSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorFilter:void injectMessage(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:void injectMessage(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.RegionBroker$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.SchedulerTimerTask:void run()"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)",
            "org.apache.activemq.plugin.DiscardingDLQBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)",
            "org.apache.activemq.advisory.AdvisoryBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.plugin.DiscardingDLQBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.advisory.AdvisoryBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void serviceTransportException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void serviceException(java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection$1:void onException(java.io.IOException)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection$4:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection$2:void onCompletion(org.apache.activemq.transport.FutureResponse)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection$6:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:void remove(boolean,java.net.URI[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.discovery.DiscoveryTransport:void onServiceRemove(org.apache.activemq.command.DiscoveryEvent)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$6:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.activemq.jms.pool.ConnectionPool:void close()",
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.console.filter.AmqMessagesQueryFilter:java.util.List queryMessages(org.apache.activemq.command.ActiveMQQueue,java.lang.String)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void collectBrokerInfos()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void access$400(org.apache.activemq.network.DemandForwardingBridgeSupport)"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransportFactory:void stopped(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.transport.vm.VMTransportFactory:void stopped(org.apache.activemq.transport.vm.VMTransportServer)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void disposeTransport(org.apache.activemq.transport.Transport)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void handleTransportFailure(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.transport.failover.FailoverTransport:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean buildBackups()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$9:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:boolean doConnect()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.fanout.FanoutTransport:boolean access$800(org.apache.activemq.transport.fanout.FanoutTransport)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:void syncSendPacket(org.apache.activemq.command.Command,org.apache.activemq.AsyncCallback)",
            "org.apache.activemq.TransactionContext:void rollback()",
            "org.apache.activemq.ActiveMQConnectionConsumer:void <init>(org.apache.activemq.ActiveMQConnection,javax.jms.ServerSessionPool,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.ActiveMQTempDestination createTempDestination(boolean)",
            "org.apache.activemq.ActiveMQConnection:void destroyDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.ActiveMQInputStream:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,boolean,java.lang.String,int,long)",
            "org.apache.activemq.ActiveMQConnection:void deleteTempDestination(org.apache.activemq.command.ActiveMQTempDestination)",
            "org.apache.activemq.ActiveMQConnection:void unsubscribe(java.lang.String)",
            "org.apache.activemq.ActiveMQConnection:void send(org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQMessage,org.apache.activemq.command.MessageId,int,int,long,boolean)",
            "org.apache.activemq.ActiveMQInputStream:void close()",
            "org.apache.activemq.AdvisoryConsumer:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.ActiveMQConnection:void ensureConnectionInfoSent()",
            "org.apache.activemq.TransactionContext:org.apache.activemq.command.Response syncSendPacketWithInterruptionHandling(org.apache.activemq.command.Command)",
            "org.apache.activemq.TransactionContext:javax.transaction.xa.Xid[] recover(int)",
            "org.apache.activemq.ActiveMQConnection:void cleanup()"
        ]
    },
    "org.apache.activemq.network.ForwardingBridge:void serviceLocalCommand(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.ForwardingBridge$1:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.network.ForwardingBridge:void serviceRemoteCommand(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.ForwardingBridge$2:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.TransportConnector$1:void onAccept(org.apache.activemq.transport.Transport)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void handleSocket(java.net.Socket)",
            "org.apache.activemq.transport.udp.UdpTransportServer:org.apache.activemq.transport.Transport configureTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.vm.VMTransportServer:org.apache.activemq.transport.vm.VMTransport connect()"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransportFactory:boolean validateBroker(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.network.NetworkConnector$1:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void stop()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:org.apache.activemq.advisory.DestinationSource getDestinationSource()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.pool.PooledConnection:org.apache.activemq.advisory.DestinationSource getDestinationSource()"
        ]
    },
    "org.apache.activemq.console.filter.MBeansAttributeQueryFilter:java.util.List query(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.filter.AbstractQueryFilter:java.util.List query(java.lang.String)",
            "org.apache.activemq.console.util.JmxMBeansUtil:java.util.List queryMBeans(javax.management.MBeanServerConnection,java.util.List,java.util.Set)"
        ]
    },
    "org.apache.activemq.console.filter.RegExQueryFilter:java.util.List query(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.filter.MBeansAttributeQueryFilter:java.util.List query(java.util.List)",
            "org.apache.activemq.console.filter.RegExQueryFilter:java.util.List query(java.util.List)",
            "org.apache.activemq.console.filter.WildcardTransformFilter:java.util.List query(java.util.List)"
        ]
    },
    "org.apache.activemq.console.filter.WildcardTransformFilter:java.util.List query(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.filter.AbstractQueryFilter:java.util.List query(java.lang.String)",
            "org.apache.activemq.console.command.BrowseCommand:void runTask(java.util.List)",
            "org.apache.activemq.console.util.AmqMessagesUtil:java.util.List getMessages(java.net.URI,javax.jms.Destination,java.util.List)",
            "org.apache.activemq.console.util.AmqMessagesUtil:java.util.List getMessages(javax.jms.ConnectionFactory,javax.jms.Destination,java.util.List)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.LockableServiceSupport:void stopBroker()",
            "org.apache.activemq.broker.BrokerService:void start()",
            "org.apache.activemq.console.command.StartCommand$1:void run()",
            "org.apache.activemq.broker.TransportConnection:void serviceTransportException(java.io.IOException)",
            "org.apache.activemq.broker.BrokerService:void stopGracefully(java.lang.String,java.lang.String,long,long)",
            "org.apache.activemq.util.DefaultIOExceptionHandler$2:void run()",
            "org.apache.activemq.broker.jmx.BrokerView:void restart()",
            "org.apache.activemq.broker.BrokerService:void masterFailed()",
            "org.apache.activemq.xbean.XBeanBrokerService:void stop()",
            "org.apache.activemq.broker.jmx.BrokerView:void stop()",
            "org.apache.activemq.broker.BrokerService:void containerShutdown()",
            "org.apache.activemq.broker.BrokerService:void preDestroy()"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void stop()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void doStop(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.network.ForwardingBridge:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnection:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.proxy.ProxyConnection$1:void onCommand(java.lang.Object)",
            "org.apache.activemq.proxy.ProxyConnection:void onFailure(java.io.IOException)",
            "org.apache.activemq.proxy.ProxyConnector$1:void onAccept(org.apache.activemq.transport.Transport)"
        ]
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.discovery.DiscoveryTransport:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnector:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ProxyConnectorView:void stop()"
        ]
    },
    "org.apache.activemq.broker.TransportConnector:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ConnectorView:void stop()"
        ]
    },
    "org.apache.activemq.util.ServiceStopper:void stopServices(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void stopAllConnectors(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.util.DefaultIOExceptionHandler$1:void run()"
        ]
    },
    "org.apache.activemq.transport.ResponseCorrelator:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.WriteTimeoutFilter:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void stopTransport()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void handleException(java.lang.Throwable,org.fusesource.mqtt.codec.MQTTFrame)"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnector$2:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.CommandJoiner:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStop(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.transport.ws.MQTTSocket:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onTransportError()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void handleException(java.io.IOException)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTDisconnect()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTCommand(org.fusesource.mqtt.codec.MQTTFrame)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTPublish(org.fusesource.mqtt.codec.PUBLISH)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTCommand(org.fusesource.mqtt.codec.MQTTFrame)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onUnSubscribe(org.fusesource.hawtbuf.UTF8Buffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onUnSubscribe(org.fusesource.mqtt.codec.UNSUBSCRIBE)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:org.fusesource.mqtt.client.QoS onSubscribe(org.fusesource.mqtt.codec.SUBSCRIBE,org.fusesource.mqtt.client.Topic)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onSubscribe(org.fusesource.mqtt.codec.SUBSCRIBE)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTConnect(org.fusesource.mqtt.codec.CONNECT)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTCommand(org.fusesource.mqtt.codec.MQTTFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompSubscribe(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:org.apache.activemq.command.ActiveMQDestination createTempDestination(java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.LegacyFrameTranslator:org.apache.activemq.command.ActiveMQDestination convertDestination(org.apache.activemq.transport.stomp.ProtocolConverter,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompNack(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompSend(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompAck(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompBegin(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompConnect(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompUnsubscribe(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompAbort(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter$3:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompDisconnect(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommit(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompQueueBrowserSubscription:void onMessageDispatch(org.apache.activemq.command.MessageDispatch,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)"
        ]
    },
    "org.apache.activemq.thread.PooledTaskRunner$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.thread.DedicatedTaskRunner$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.tcp.TcpTransport:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.stomp.StompSslTransportFactory$1$1:void doConsume(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.mqtt.MQTTCodec:void parse(org.fusesource.hawtbuf.DataByteArrayInputStream,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTNIOTransport:void serviceRead()",
            "org.apache.activemq.transport.mqtt.MQTTNIOSSLTransport:void processCommand(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpNioTransport:void access$000(org.apache.activemq.transport.amqp.AmqpNioTransport)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.amqp.AmqpNioTransport$1:void onSelect(org.apache.activemq.transport.nio.SelectorSelection)"
        ]
    },
    "org.apache.activemq.transport.nio.NIOTransport$1:void onSelect(org.apache.activemq.transport.nio.SelectorSelection)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorSelection:void onSelect()"
        ]
    },
    "org.apache.activemq.transport.stomp.StompCodec:void parse(java.io.ByteArrayInputStream,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.StompNIOTransport:void serviceRead()",
            "org.apache.activemq.transport.stomp.StompNIOSSLTransport:void processCommand(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpNioSslTransport:void processCommand(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void serviceRead()"
        ]
    },
    "org.apache.activemq.transport.stomp.StompNIOSSLTransport:void doConsume(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.StompCodec:void processCommand()"
        ]
    },
    "org.apache.activemq.transport.nio.NIOSSLTransport:void processCommand(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void serviceRead()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void dispatchSync(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void dispatch(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.TransportConnection$1:void onCommand(java.lang.Object)",
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void serviceException(java.lang.Throwable)",
            "org.apache.activemq.broker.region.PrefetchSubscription:boolean dispatch(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.transport.reliable.DefaultReplayStrategy:boolean onDroppedPackets(org.apache.activemq.transport.reliable.ReliableTransport,int,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.reliable.ReliableTransport:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.reliable.ReliableTransport:void onMissingResponse(org.apache.activemq.command.Command,org.apache.activemq.transport.FutureResponse)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.reliable.ReliableTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.reliable.ReliableTransport:java.lang.Object request(java.lang.Object,int)"
        ]
    },
    "org.apache.activemq.transport.ws.MQTTSocket:void onMessage(byte[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.ws.MQTTSocket:void onClose(int,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTPubRel(org.fusesource.mqtt.codec.PUBREL)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTCommand(org.fusesource.mqtt.codec.MQTTFrame)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTPubRec(org.fusesource.mqtt.codec.PUBREC)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTCommand(org.fusesource.mqtt.codec.MQTTFrame)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onUnSubscribe(org.fusesource.mqtt.codec.UNSUBSCRIBE)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTCommand(org.fusesource.mqtt.codec.MQTTFrame)"
        ]
    },
    "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object,int)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.TransportLogger:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object,int)"
        ]
    },
    "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.TransportLogger:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompTransportFilter:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.ws.StompSocket:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void ackAdvisory(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToMQTT(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter$3$1:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void handleException(java.lang.Throwable,org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter$3$1:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.stomp.ProtocolConverter$2:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.stomp.ProtocolConverter$1:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.stomp.ProtocolConverter$3:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onActiveMQCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void sendReceipt(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor$3:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.FutureResponse:void set(org.apache.activemq.command.Response)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$2:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$1:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.AbstractTempRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.jmx.ManagedTopicRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.jmx.ManagedQueueRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.view.MessageBrokerView:org.apache.activemq.broker.view.BrokerDestinationView getQueueDestinationView(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.MessageBrokerView:org.apache.activemq.broker.view.BrokerDestinationView getTopicDestinationView(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.MessageBrokerView:org.apache.activemq.broker.view.BrokerDestinationView getDestinationView(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.plugin.StatisticsBroker:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.scheduler.SchedulerBroker:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void start()",
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.broker.BrokerBroadcaster:void start()"
        ]
    },
    "org.apache.activemq.camel.component.broker.BrokerProducer:boolean processInOnly(org.apache.camel.Exchange,org.apache.camel.AsyncCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.camel.component.broker.BrokerProducer:boolean process(org.apache.camel.Exchange,org.apache.camel.AsyncCallback)"
        ]
    },
    "org.apache.activemq.camel.component.broker.BrokerEndpoint:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TopicSubscription:org.apache.activemq.command.Response pullMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TopicSubscription:void access$100(org.apache.activemq.broker.region.TopicSubscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription$1:void afterCommit()"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void setPrefetchSize(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.PolicyEntry:void configurePrefetch(org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.thread.SchedulerTimerTask:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.advisory.AdvisoryBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)",
            "org.apache.activemq.plugin.DiscardingDLQBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void serviceException(java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void pullTimeout(long)",
            "org.apache.activemq.broker.TransportConnection$2:void run()",
            "org.apache.activemq.broker.region.TopicSubscription:void pullTimeout()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection$1:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport:void propagateFailureToExceptionListener(java.lang.Exception)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.discovery.DiscoveryTransport:void onServiceRemove(org.apache.activemq.command.DiscoveryEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessageWithProperties(java.lang.String)"
        ]
    },
    "org.apache.activemq.jms.pool.ConnectionPool:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledConnectionFactory$1:void destroyObject(org.apache.activemq.jms.pool.ConnectionKey,org.apache.activemq.jms.pool.ConnectionPool)",
            "org.apache.activemq.jms.pool.ConnectionPool:boolean expiredCheck()"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.TopicConnection createTopicConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.Connection createConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection()",
            "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAQueueConnection createXAQueueConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XATopicConnection createXATopicConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.QueueConnection createQueueConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAConnection createXAConnection(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void access$400(org.apache.activemq.network.DemandForwardingBridgeSupport)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport$5:void run()"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransportFactory:void stopped(org.apache.activemq.transport.vm.VMTransportServer)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransportServer:void stop()"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void handleTransportFailure(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport$2:boolean iterate()"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:boolean buildBackups()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport$2:boolean iterate()",
            "org.apache.activemq.transport.failover.FailoverTransport:void updateURIs(boolean,java.net.URI[])"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:boolean access$800(org.apache.activemq.transport.fanout.FanoutTransport)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.fanout.FanoutTransport$1:boolean iterate()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void immediateIndividualTransactedAck(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageProducer:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ProducerId,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.ActiveMQSession:void sendAck(org.apache.activemq.command.MessageAck,boolean)",
            "org.apache.activemq.ActiveMQMessageConsumer:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean,javax.jms.MessageListener)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void syncSendPacket(org.apache.activemq.command.Command,org.apache.activemq.AsyncCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void send(org.apache.activemq.ActiveMQMessageProducer,org.apache.activemq.command.ActiveMQDestination,javax.jms.Message,int,int,long,org.apache.activemq.usage.MemoryUsage,int,org.apache.activemq.AsyncCallback)"
        ]
    },
    "org.apache.activemq.TransactionContext:void rollback()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void rollback()",
            "org.apache.activemq.TransactionContext:void commit()"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionConsumer:void <init>(org.apache.activemq.ActiveMQConnection,javax.jms.ServerSessionPool,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createDurableConnectionConsumer(javax.jms.Topic,java.lang.String,java.lang.String,javax.jms.ServerSessionPool,int,boolean)",
            "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Destination,java.lang.String,javax.jms.ServerSessionPool,int,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.ActiveMQTempDestination createTempDestination(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.TemporaryQueue createTemporaryQueue()",
            "org.apache.activemq.ActiveMQSession:javax.jms.TemporaryTopic createTemporaryTopic()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void destroyDestination(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQInputStream:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,boolean,java.lang.String,int,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:java.io.InputStream doCreateInputStream(javax.jms.Destination,java.lang.String,boolean,java.lang.String,long)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void deleteTempDestination(org.apache.activemq.command.ActiveMQTempDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQTempDestination:void delete()",
            "org.apache.activemq.ActiveMQConnection:void cleanUpTempDestinations()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void unsubscribe(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void unsubscribe(java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void send(org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQMessage,org.apache.activemq.command.MessageId,int,int,long,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQOutputStream:void send(org.apache.activemq.command.ActiveMQMessage,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQInputStream:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.AdvisoryConsumer:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void ensureConnectionInfoSent()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void ensureConnectionInfoSent()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void begin()",
            "org.apache.activemq.ActiveMQConnection:java.io.OutputStream createOutputStream(javax.jms.Destination,java.util.Map,int,int,long)",
            "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createDurableConnectionConsumer(javax.jms.Topic,java.lang.String,java.lang.String,javax.jms.ServerSessionPool,int,boolean)",
            "org.apache.activemq.ActiveMQConnection:void start()",
            "org.apache.activemq.TransactionContext:void commit(javax.transaction.xa.Xid,boolean)",
            "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Destination,java.lang.String,javax.jms.ServerSessionPool,int,boolean)",
            "org.apache.activemq.ActiveMQConnection:void destroyDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.ActiveMQXAConnection:javax.jms.Session createSession(boolean,int)",
            "org.apache.activemq.ActiveMQConnection:java.io.InputStream doCreateInputStream(javax.jms.Destination,java.lang.String,boolean,java.lang.String,long)",
            "org.apache.activemq.ActiveMQConnection:java.lang.String getInitializedClientID()",
            "org.apache.activemq.TransactionContext:void setXid(javax.transaction.xa.Xid)",
            "org.apache.activemq.ActiveMQConnection:void setClientID(java.lang.String)",
            "org.apache.activemq.ActiveMQConnection:javax.jms.Session createSession(boolean,int)",
            "org.apache.activemq.TransactionContext:javax.transaction.xa.Xid[] recover(int)",
            "org.apache.activemq.TransactionContext:void rollback(javax.transaction.xa.Xid)"
        ]
    },
    "org.apache.activemq.TransactionContext:org.apache.activemq.command.Response syncSendPacketWithInterruptionHandling(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.TransactionContext:int prepare(javax.transaction.xa.Xid)",
            "org.apache.activemq.TransactionContext:void setXid(javax.transaction.xa.Xid)",
            "org.apache.activemq.TransactionContext:void forget(javax.transaction.xa.Xid)",
            "org.apache.activemq.TransactionContext:void commit(javax.transaction.xa.Xid,boolean)",
            "org.apache.activemq.TransactionContext:void commit()",
            "org.apache.activemq.TransactionContext:void rollback(javax.transaction.xa.Xid)"
        ]
    },
    "org.apache.activemq.TransactionContext:javax.transaction.xa.Xid[] recover(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:void cleanup()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$6:void run()"
        ]
    },
    "org.apache.activemq.network.ForwardingBridge$1:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.ForwardingBridge$2:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.tcp.TcpTransportServer:void handleSocket(java.net.Socket)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransportServer$1:void run()",
            "org.apache.activemq.transport.tcp.TcpTransportServer:void run()"
        ]
    },
    "org.apache.activemq.transport.udp.UdpTransportServer:org.apache.activemq.transport.Transport configureTransport(org.apache.activemq.transport.Transport)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.udp.UdpTransportServer:void processInboundConnection(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransportServer:org.apache.activemq.transport.vm.VMTransport connect()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.util.ServiceSupport:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.NetworkConnector:void stop()",
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void stop()",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void run()",
            "org.apache.activemq.transport.http.HttpClientTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.ActiveMQConnection:void finalize()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void stopTransport()",
            "org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.udp.UdpTransport:void run()",
            "org.apache.activemq.transport.tcp.TcpTransport:void stop()",
            "org.apache.activemq.ActiveMQConnection:void close()",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void handleException(java.lang.Throwable,org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.broker.LockableServiceSupport:void postStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void mainLoop()",
            "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$stop_slave$1:void apply$mcV$sp()",
            "org.apache.activemq.leveldb.LevelDBClient$$anon$2:void run()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$stop_master$1:void apply$mcV$sp()",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl:void doStop(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.pool.PooledConnection:org.apache.activemq.advisory.DestinationSource getDestinationSource()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.console.filter.AbstractQueryFilter:java.util.List query(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.util.JmxMBeansUtil:java.util.List queryMBeans(javax.management.MBeanServerConnection,java.lang.String,java.util.Set)",
            "org.apache.activemq.console.util.JmxMBeansUtil:java.util.List x_queryMBeans(javax.management.MBeanServerConnection,java.util.List)",
            "org.apache.activemq.console.util.JmxMBeansUtil:java.util.List getAllBrokers(javax.management.MBeanServerConnection,java.util.Set)",
            "org.apache.activemq.console.util.JmxMBeansUtil:java.util.List getBrokersByName(javax.management.MBeanServerConnection,java.lang.String,java.util.Set)",
            "org.apache.activemq.console.util.JmxMBeansUtil:java.util.List getAllBrokers(javax.management.MBeanServerConnection)",
            "org.apache.activemq.console.util.AmqMessagesUtil:java.util.List getMessages(java.net.URI,javax.jms.Destination,java.lang.String)",
            "org.apache.activemq.console.util.JmxMBeansUtil:java.util.List getBrokersByName(javax.management.MBeanServerConnection,java.lang.String)",
            "org.apache.activemq.console.util.AmqMessagesUtil:java.util.List getMessages(javax.jms.ConnectionFactory,javax.jms.Destination,java.lang.String)",
            "org.apache.activemq.console.util.JmxMBeansUtil:java.util.List queryMBeans(javax.management.MBeanServerConnection,java.util.List,java.util.Set)",
            "org.apache.activemq.console.util.JmxMBeansUtil:java.util.List queryMBeans(javax.management.MBeanServerConnection,java.lang.String)"
        ]
    },
    "org.apache.activemq.console.util.JmxMBeansUtil:java.util.List queryMBeans(javax.management.MBeanServerConnection,java.util.List,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.command.QueryCommand:void runTask(java.util.List)"
        ]
    },
    "org.apache.activemq.console.command.BrowseCommand:void runTask(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.console.util.AmqMessagesUtil:java.util.List getMessages(java.net.URI,javax.jms.Destination,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.console.util.AmqMessagesUtil:java.util.List getMessages(javax.jms.ConnectionFactory,javax.jms.Destination,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.command.AmqBrowseCommand:void runTask(java.util.List)"
        ]
    },
    "org.apache.activemq.broker.LockableServiceSupport:void stopBroker()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.LockableServiceSupport:void keepLockAlive()"
        ]
    },
    "org.apache.activemq.console.command.StartCommand$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:void stopGracefully(java.lang.String,java.lang.String,long,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:void stopGracefully(java.lang.String,java.lang.String,long,long)"
        ]
    },
    "org.apache.activemq.util.DefaultIOExceptionHandler$2:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:void restart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.xbean.XBeanBrokerService:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void start()",
            "org.apache.activemq.broker.BrokerService:void stopGracefully(java.lang.String,java.lang.String,long,long)",
            "org.apache.activemq.xbean.XBeanBrokerService:void destroy()",
            "org.apache.activemq.util.DefaultIOExceptionHandler$2:void run()",
            "org.apache.activemq.broker.jmx.BrokerView:void restart()",
            "org.apache.activemq.broker.jmx.BrokerView:void stop()",
            "org.apache.activemq.broker.BrokerService:void containerShutdown()"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:void containerShutdown()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService$6:void run()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void preDestroy()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.RegionBroker:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void stop()",
            "org.apache.activemq.broker.TransactionBroker:void stop()",
            "org.apache.activemq.broker.BrokerFilter:void stop()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void stop()"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnection:void onFailure(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.proxy.ProxyConnection$1:void onCommand(java.lang.Object)",
            "org.apache.activemq.proxy.ProxyConnection$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.proxy.ProxyConnection$2:void onException(java.io.IOException)",
            "org.apache.activemq.proxy.ProxyConnection$1:void onException(java.io.IOException)"
        ]
    },
    "org.apache.activemq.broker.jmx.ProxyConnectorView:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ConnectorView:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.util.DefaultIOExceptionHandler$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void stopTransport()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTDisconnect()"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void handleException(java.lang.Throwable,org.fusesource.mqtt.codec.MQTTFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onActiveMQCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTCommand(org.fusesource.mqtt.codec.MQTTFrame)"
        ]
    },
    "org.apache.activemq.transport.udp.UdpTransportServer:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport:void propagateFailureToExceptionListener(java.lang.Exception)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor$2:void run()",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void handleException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.StompTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ws.StompSocket:void onClose(int,java.lang.String)",
            "org.apache.activemq.transport.ws.StompSocket:void onMessage(java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.stomp.LegacyFrameTranslator:org.apache.activemq.command.ActiveMQDestination convertDestination(org.apache.activemq.transport.stomp.ProtocolConverter,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompSubscribe(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompUnsubscribe(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.FrameTranslator$Helper:void copyStandardHeadersFromFrameToMessage(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.transport.stomp.StompFrame,org.apache.activemq.command.ActiveMQMessage,org.apache.activemq.transport.stomp.FrameTranslator)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTNIOTransport:void serviceRead()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTNIOTransport:void access$000(org.apache.activemq.transport.mqtt.MQTTNIOTransport)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTNIOSSLTransport:void processCommand(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void serviceRead()"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpNioTransport$1:void onSelect(org.apache.activemq.transport.nio.SelectorSelection)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorSelection:void onSelect()"
        ]
    },
    "org.apache.activemq.transport.nio.SelectorSelection:void onSelect()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorWorker$1:void run()"
        ]
    },
    "org.apache.activemq.transport.stomp.StompNIOTransport:void serviceRead()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.StompNIOTransport:void access$000(org.apache.activemq.transport.stomp.StompNIOTransport)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompNIOSSLTransport:void processCommand(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void serviceRead()"
        ]
    },
    "org.apache.activemq.transport.nio.NIOSSLTransport:void serviceRead()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTNIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.nio.NIOSSLTransport$1:void onSelect(org.apache.activemq.transport.nio.SelectorSelection)",
            "org.apache.activemq.transport.stomp.StompNIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.amqp.AmqpNioSslTransport:void initializeStreams()"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void dispatch(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:org.apache.activemq.command.Response pullMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.TopicSubscription:void pullTimeout()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void dispatch(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.Topic$3:void run()",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void updateConsumerPrefetch(int)",
            "org.apache.activemq.broker.TransportConnection:void serviceException(java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection:void updateClient(org.apache.activemq.command.ConnectionControl)",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue$4:void run()",
            "org.apache.activemq.broker.TransportConnection:void start()",
            "org.apache.activemq.broker.region.PrefetchSubscription:boolean dispatch(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:void updateConsumerPrefetch(int)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:boolean dispatch(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchPending()"
        ]
    },
    "org.apache.activemq.transport.TransportLogger:java.lang.Object request(java.lang.Object,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object,int)"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object,int)"
        ]
    },
    "org.apache.activemq.transport.TransportLogger:java.lang.Object request(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination lookup(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTopicRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedQueueRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.camel.component.broker.BrokerProducer:boolean process(org.apache.camel.Exchange,org.apache.camel.AsyncCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TopicSubscription$1:void afterCommit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.policy.PolicyEntry:void configurePrefetch(org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)",
            "org.apache.activemq.broker.region.policy.PolicyEntry:void configure(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.region.QueueBrowserSubscription)",
            "org.apache.activemq.broker.region.policy.PolicyEntry:void configure(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.region.TopicSubscription)",
            "org.apache.activemq.broker.region.policy.PolicyEntry:void configure(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.region.QueueSubscription)",
            "org.apache.activemq.broker.region.policy.PolicyEntry:void configure(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.region.DurableTopicSubscription)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void pullTimeout(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription$1:void run()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection$2:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TopicSubscription:void pullTimeout()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void access$200(org.apache.activemq.broker.region.TopicSubscription)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void propagateFailureToExceptionListener(java.lang.Exception)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void handleTransportFailure(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter$3$1:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter$1$1:void onResponse(org.apache.activemq.transport.mqtt.MQTTProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.stomp.StompNIOTransport:void serviceRead()",
            "org.apache.activemq.transport.udp.UdpTransport:void run()",
            "org.apache.activemq.transport.http.HttpClientTransport:void run()",
            "org.apache.activemq.transport.amqp.AmqpNioTransport:void serviceRead()",
            "org.apache.activemq.transport.nio.NIOTransport:void serviceRead()",
            "org.apache.activemq.transport.ws.MQTTSocket:void onMessage(byte[],int,int)",
            "org.apache.activemq.transport.tcp.TcpTransport:void run()",
            "org.apache.activemq.transport.nio.NIOSSLTransport:void serviceRead()",
            "org.apache.activemq.transport.ws.MQTTSocket:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.nio.NIOTransport$1:void onError(org.apache.activemq.transport.nio.SelectorSelection,java.lang.Throwable)",
            "org.apache.activemq.transport.amqp.AmqpNioTransport$1:void onError(org.apache.activemq.transport.nio.SelectorSelection,java.lang.Throwable)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter$1:void onResponse(org.apache.activemq.transport.mqtt.MQTTProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.mqtt.MQTTNIOTransport$1:void onError(org.apache.activemq.transport.nio.SelectorSelection,java.lang.Throwable)",
            "org.apache.activemq.transport.nio.NIOSSLTransport$1:void onError(org.apache.activemq.transport.nio.SelectorSelection,java.lang.Throwable)",
            "org.apache.activemq.transport.stomp.ProtocolConverter$3:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.stomp.StompNIOTransport$1:void onError(org.apache.activemq.transport.nio.SelectorSelection,java.lang.Throwable)",
            "org.apache.activemq.transport.mqtt.MQTTNIOTransport:void serviceRead()",
            "org.apache.activemq.transport.ws.StompSocket:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ws.StompSocket:void onMessage(java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport:void propagateFailureToExceptionListener(java.lang.Exception)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter$1$1:void onResponse(org.apache.activemq.transport.mqtt.MQTTProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport:void propagateFailureToExceptionListener(java.lang.Exception)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToActiveMQ(java.io.IOException)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void handleException(java.io.IOException)",
            "org.apache.activemq.transport.stomp.ProtocolConverter$3:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.ProtocolConverter$3$1:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommand(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter$1:void onResponse(org.apache.activemq.transport.mqtt.MQTTProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void handleException(java.io.IOException)",
            "org.apache.activemq.transport.ResponseCorrelator:void onException(java.io.IOException)"
        ]
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)",
            "org.apache.activemq.transport.AbstractInactivityMonitor$4:void run()",
            "org.apache.activemq.transport.failover.FailoverTransport:void propagateFailureToExceptionListener(java.lang.Exception)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.AbstractInactivityMonitor$3:void run()",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.InactivityMonitor:void processInboundWireFormatInfo(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessageWithProperties(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledConnectionFactory$1:void destroyObject(org.apache.activemq.jms.pool.ConnectionKey,org.apache.activemq.jms.pool.ConnectionPool)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledConnectionFactory$1:void destroyObject(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.activemq.jms.pool.ConnectionPool:boolean expiredCheck()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.ConnectionPool:void decrementReferenceCount()",
            "org.apache.activemq.jms.pool.PooledConnectionFactory$1:boolean validateObject(org.apache.activemq.jms.pool.ConnectionKey,org.apache.activemq.jms.pool.ConnectionPool)"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.TopicConnection createTopicConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.Connection createConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.activemq.console.command.AbstractAmqCommand:javax.jms.Connection createConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.jms.pool.PooledConnectionFactory:javax.jms.Connection createConnection(org.apache.activemq.jms.pool.ConnectionKey)"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAQueueConnection createXAQueueConnection()",
            "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XATopicConnection createXATopicConnection()",
            "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.Connection createConnection()",
            "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.TopicConnection createTopicConnection()",
            "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.QueueConnection createQueueConnection()",
            "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAConnection createXAConnection()"
        ]
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAQueueConnection createXAQueueConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XATopicConnection createXATopicConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.QueueConnection createQueueConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAConnection createXAConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledConnectionFactory$2:javax.jms.Connection createConnection(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransportServer:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.vm.VMTransportServer$1:void stop()"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport$2:boolean iterate()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void updateURIs(boolean,java.net.URI[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFilter:void updateURIs(boolean,java.net.URI[])",
            "org.apache.activemq.transport.failover.FailoverTransport:void processNewTransports(boolean,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport$1:boolean iterate()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void immediateIndividualTransactedAck(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:void beforeMessageIsConsumed(org.apache.activemq.command.MessageDispatch)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageProducer:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ProducerId,org.apache.activemq.command.ActiveMQDestination,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.MessageProducer createProducer(javax.jms.Destination)",
            "org.apache.activemq.ActiveMQQueueSender:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.ActiveMQTopicPublisher:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ActiveMQDestination,int)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void sendAck(org.apache.activemq.command.MessageAck,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void sendAck(org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.ActiveMQMessageConsumer:void rollback()",
            "org.apache.activemq.ActiveMQMessageConsumer$4:void run()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void send(org.apache.activemq.ActiveMQMessageProducer,org.apache.activemq.command.ActiveMQDestination,javax.jms.Message,int,int,long,org.apache.activemq.usage.MemoryUsage,int,org.apache.activemq.AsyncCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageProducer:void send(javax.jms.Destination,javax.jms.Message,int,int,long,org.apache.activemq.AsyncCallback)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void rollback()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void dispose()",
            "org.apache.activemq.jms.pool.PooledSession:void rollback()",
            "org.apache.activemq.jms.pool.PooledSession:void close()",
            "org.apache.activemq.ActiveMQQueueSession:void rollback()",
            "org.apache.activemq.ActiveMQTopicSession:void rollback()"
        ]
    },
    "org.apache.activemq.TransactionContext:void commit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void commit()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createDurableConnectionConsumer(javax.jms.Topic,java.lang.String,java.lang.String,javax.jms.ServerSessionPool,int,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createDurableConnectionConsumer(javax.jms.Topic,java.lang.String,java.lang.String,javax.jms.ServerSessionPool,int)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Destination,java.lang.String,javax.jms.ServerSessionPool,int,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Topic,java.lang.String,javax.jms.ServerSessionPool,int)",
            "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Queue,java.lang.String,javax.jms.ServerSessionPool,int)",
            "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Destination,java.lang.String,javax.jms.ServerSessionPool,int)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.TemporaryQueue createTemporaryQueue()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.TemporaryQueue createTemporaryQueue()",
            "org.apache.activemq.jms.pool.PooledSession:javax.jms.TemporaryQueue createTemporaryQueue()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.TemporaryTopic createTemporaryTopic()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TemporaryTopic createTemporaryTopic()",
            "org.apache.activemq.jms.pool.PooledSession:javax.jms.TemporaryTopic createTemporaryTopic()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:java.io.InputStream doCreateInputStream(javax.jms.Destination,java.lang.String,boolean,java.lang.String,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:java.io.InputStream createInputStream(javax.jms.Destination,java.lang.String,boolean,long)",
            "org.apache.activemq.ActiveMQConnection:java.io.InputStream createDurableInputStream(javax.jms.Topic,java.lang.String,java.lang.String,boolean,long)"
        ]
    },
    "org.apache.activemq.command.ActiveMQTempDestination:void delete()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:void cleanUpTempDestinations()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:void unsubscribe(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:void unsubscribe(java.lang.String)",
            "org.apache.activemq.jms.pool.PooledSession:void unsubscribe(java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQOutputStream:void send(org.apache.activemq.command.ActiveMQMessage,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQOutputStream:void flushBuffer()",
            "org.apache.activemq.ActiveMQOutputStream:void close()"
        ]
    },
    "org.apache.activemq.TransactionContext:void begin()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void doStartTransaction()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:java.io.OutputStream createOutputStream(javax.jms.Destination,java.util.Map,int,int,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:java.io.OutputStream createOutputStream(javax.jms.Destination)",
            "org.apache.activemq.ActiveMQConnection:java.io.OutputStream createNonPersistentOutputStream(javax.jms.Destination)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.ConnectionPool:void start()",
            "org.apache.activemq.console.command.AbstractAmqCommand:javax.jms.Connection createConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.console.filter.AmqMessagesQueryFilter:javax.jms.Connection createConnection()"
        ]
    },
    "org.apache.activemq.TransactionContext:void commit(javax.transaction.xa.Xid,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQXAConnection:javax.jms.Session createSession(boolean,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQXAConnection:javax.jms.XATopicSession createXATopicSession()",
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.activemq.jms.pool.ConnectionPool:javax.jms.Session makeSession(org.apache.activemq.jms.pool.SessionKey)",
            "org.apache.activemq.jms.pool.PooledConnection:javax.jms.Session createSession(org.apache.activemq.jms.pool.SessionKey)",
            "org.apache.activemq.ActiveMQXAConnection:javax.jms.XASession createXASession()",
            "org.apache.activemq.advisory.DestinationSource:void start()",
            "org.apache.activemq.ActiveMQXAConnection:javax.jms.XAQueueSession createXAQueueSession()",
            "org.apache.activemq.console.filter.AmqMessagesQueryFilter:java.util.List queryMessages(org.apache.activemq.command.ActiveMQQueue,java.lang.String)",
            "org.apache.activemq.pool.XaPooledConnectionFactory$1:javax.jms.Session makeSession(org.apache.activemq.jms.pool.SessionKey)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:java.lang.String getInitializedClientID()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.TransactionContext:void setXid(javax.transaction.xa.Xid)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void start(javax.transaction.xa.Xid,int)",
            "org.apache.activemq.TransactionContext:void end(javax.transaction.xa.Xid,int)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void setClientID(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledConnection:void setClientID(java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.Session createSession(boolean,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.activemq.jms.pool.ConnectionPool:javax.jms.Session makeSession(org.apache.activemq.jms.pool.SessionKey)",
            "org.apache.activemq.jms.pool.PooledConnection:javax.jms.Session createSession(org.apache.activemq.jms.pool.SessionKey)",
            "org.apache.activemq.ActiveMQConnection:javax.jms.TopicSession createTopicSession(boolean,int)",
            "org.apache.activemq.advisory.DestinationSource:void start()",
            "org.apache.activemq.ActiveMQConnection:javax.jms.QueueSession createQueueSession(boolean,int)",
            "org.apache.activemq.console.filter.AmqMessagesQueryFilter:java.util.List queryMessages(org.apache.activemq.command.ActiveMQQueue,java.lang.String)",
            "org.apache.activemq.pool.XaPooledConnectionFactory$1:javax.jms.Session makeSession(org.apache.activemq.jms.pool.SessionKey)"
        ]
    },
    "org.apache.activemq.TransactionContext:void rollback(javax.transaction.xa.Xid)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.TransactionContext:int prepare(javax.transaction.xa.Xid)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.TransactionContext:void forget(javax.transaction.xa.Xid)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.tcp.TcpTransportServer$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.tcp.TcpTransportServer:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.udp.UdpTransportServer:void processInboundConnection(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.udp.UdpTransportServer$1:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.network.NetworkConnector:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.NetworkConnectorView:void stop()"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.http.HttpClientTransport:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:void finalize()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.tcp.TcpTransport:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.broker.LockableServiceSupport:void postStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void stop()"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void mainLoop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void run()"
        ]
    },
    "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$stop_slave$1:void apply$mcV$sp()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$stop_slave$1:void apply()"
        ]
    },
    "org.apache.activemq.leveldb.LevelDBClient$$anon$2:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$stop_master$1:void apply$mcV$sp()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$stop_master$1:void apply()"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.console.util.JmxMBeansUtil:java.util.List queryMBeans(javax.management.MBeanServerConnection,java.lang.String,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.console.util.JmxMBeansUtil:java.util.List x_queryMBeans(javax.management.MBeanServerConnection,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.console.util.JmxMBeansUtil:java.util.List getAllBrokers(javax.management.MBeanServerConnection,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.console.util.JmxMBeansUtil:java.util.List getBrokersByName(javax.management.MBeanServerConnection,java.lang.String,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.console.util.JmxMBeansUtil:java.util.List getAllBrokers(javax.management.MBeanServerConnection)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.command.ListCommand:void runTask(java.util.List)",
            "org.apache.activemq.console.command.ShutdownCommand:void runTask(java.util.List)"
        ]
    },
    "org.apache.activemq.console.util.AmqMessagesUtil:java.util.List getMessages(java.net.URI,javax.jms.Destination,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.util.AmqMessagesUtil:java.util.List getAllMessages(java.net.URI,javax.jms.Destination)"
        ]
    },
    "org.apache.activemq.console.util.JmxMBeansUtil:java.util.List getBrokersByName(javax.management.MBeanServerConnection,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.command.ShutdownCommand:void runTask(java.util.List)"
        ]
    },
    "org.apache.activemq.console.util.AmqMessagesUtil:java.util.List getMessages(javax.jms.ConnectionFactory,javax.jms.Destination,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.console.util.JmxMBeansUtil:java.util.List queryMBeans(javax.management.MBeanServerConnection,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.command.DstatCommand:void displayQueueStats()",
            "org.apache.activemq.console.command.BrowseCommand:void runTask(java.util.List)",
            "org.apache.activemq.console.command.DstatCommand:void displayTopicStats()",
            "org.apache.activemq.console.command.PurgeCommand:void runTask(java.util.List)",
            "org.apache.activemq.console.command.DstatCommand:void displayAllDestinations()"
        ]
    },
    "org.apache.activemq.console.command.QueryCommand:void runTask(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.command.BstatCommand:void runTask(java.util.List)"
        ]
    },
    "org.apache.activemq.console.command.AmqBrowseCommand:void runTask(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.LockableServiceSupport:void keepLockAlive()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.LockableServiceSupport$1:void run()"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:void stopGracefully(java.lang.String,java.lang.String,long,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.xbean.XBeanBrokerService:void destroy()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.xbean.XBeanBrokerService:void preDestroy()"
        ]
    },
    "org.apache.activemq.broker.BrokerService$6:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransactionBroker:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void stop()",
            "org.apache.activemq.broker.TransactionBroker:void stop()",
            "org.apache.activemq.broker.BrokerFilter:void stop()"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.plugin.StatisticsBroker:void stop()",
            "org.apache.activemq.broker.BrokerBroadcaster:void stop()",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void stop()",
            "org.apache.activemq.broker.TransactionBroker:void stop()",
            "org.apache.activemq.broker.BrokerFilter:void stop()"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnection$2:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnection$2:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnection$1:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor$2:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.stomp.StompTransportFilter:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.ws.StompSocket:void onClose(int,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.ws.StompSocket:void onMessage(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.stomp.FrameTranslator$Helper:void copyStandardHeadersFromFrameToMessage(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.transport.stomp.StompFrame,org.apache.activemq.command.ActiveMQMessage,org.apache.activemq.transport.stomp.FrameTranslator)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.JmsFrameTranslator:org.apache.activemq.command.ActiveMQMessage convertFrame(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.LegacyFrameTranslator:org.apache.activemq.command.ActiveMQMessage convertFrame(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTNIOTransport:void access$000(org.apache.activemq.transport.mqtt.MQTTNIOTransport)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTNIOTransport$1:void onSelect(org.apache.activemq.transport.nio.SelectorSelection)"
        ]
    },
    "org.apache.activemq.transport.nio.SelectorWorker$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.stomp.StompNIOTransport:void access$000(org.apache.activemq.transport.stomp.StompNIOTransport)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.StompNIOTransport$1:void onSelect(org.apache.activemq.transport.nio.SelectorSelection)"
        ]
    },
    "org.apache.activemq.transport.nio.NIOSSLTransport$1:void onSelect(org.apache.activemq.transport.nio.SelectorSelection)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorSelection:void onSelect()"
        ]
    },
    "org.apache.activemq.broker.region.Topic$3:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedTransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.command.ConnectionInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void updateConsumerPrefetch(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.PolicyEntry:void configurePrefetch(org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void updateClient(org.apache.activemq.command.ConnectionControl)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue$4:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TopicSubscription:void updateConsumerPrefetch(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.PolicyEntry:void configurePrefetch(org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchPending()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription$2:void afterCommit()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void pullTimeout(long)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void onDispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void setPrefetchSize(int)",
            "org.apache.activemq.broker.region.PrefetchSubscription:org.apache.activemq.command.Response pullMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void dispatchPending()"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination lookup(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.RegionBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.region.RegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination lookup(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)",
            "org.apache.activemq.broker.region.AbstractRegion:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)"
        ]
    },
    "org.apache.activemq.broker.region.policy.PolicyEntry:void configure(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.region.QueueBrowserSubscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.QueueRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.policy.PolicyEntry:void configure(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.region.TopicSubscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TempTopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.policy.PolicyEntry:void configure(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.region.QueueSubscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.QueueRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.policy.PolicyEntry:void configure(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.region.DurableTopicSubscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.broker.region.RegionBroker)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.SchedulerTimerTask:void run()"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void access$200(org.apache.activemq.broker.region.TopicSubscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription$2:void run()"
        ]
    },
    "org.apache.activemq.transport.nio.NIOTransport$1:void onError(org.apache.activemq.transport.nio.SelectorSelection,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorSelection:void onError(java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpNioTransport$1:void onError(org.apache.activemq.transport.nio.SelectorSelection,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorSelection:void onError(java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTNIOTransport$1:void onError(org.apache.activemq.transport.nio.SelectorSelection,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorSelection:void onError(java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.transport.nio.NIOSSLTransport$1:void onError(org.apache.activemq.transport.nio.SelectorSelection,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorSelection:void onError(java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompNIOTransport$1:void onError(org.apache.activemq.transport.nio.SelectorSelection,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorSelection:void onError(java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToActiveMQ(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport:void propagateFailureToExceptionListener(java.lang.Exception)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void negociate(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpTransportFilter:void handleException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.ResponseCorrelator:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport:void propagateFailureToExceptionListener(java.lang.Exception)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void replayCommands(org.apache.activemq.command.ReplayCommand)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor$4:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.InactivityMonitor:void processInboundWireFormatInfo(org.apache.activemq.command.WireFormatInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledConnectionFactory$1:void destroyObject(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.ConnectionPool:void decrementReferenceCount()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.XaConnectionPool$Synchronization:void afterCompletion(int)",
            "org.apache.activemq.jms.pool.PooledConnection:void close()"
        ]
    },
    "org.apache.activemq.jms.pool.PooledConnectionFactory$1:boolean validateObject(org.apache.activemq.jms.pool.ConnectionKey,org.apache.activemq.jms.pool.ConnectionPool)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledConnectionFactory$1:boolean validateObject(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.activemq.console.command.AbstractAmqCommand:javax.jms.Connection createConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.command.AbstractAmqCommand:javax.jms.Connection createConnection()"
        ]
    },
    "org.apache.activemq.jms.pool.PooledConnectionFactory:javax.jms.Connection createConnection(org.apache.activemq.jms.pool.ConnectionKey)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledConnectionFactory$1:org.apache.activemq.jms.pool.ConnectionPool makeObject(org.apache.activemq.jms.pool.ConnectionKey)"
        ]
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAQueueConnection createXAQueueConnection()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XATopicConnection createXATopicConnection()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.Connection createConnection()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.command.AbstractAmqCommand:javax.jms.Connection createConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.ActiveMQConnection makeConnection(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.ActiveMQConnection makeConnection()",
            "org.apache.activemq.console.filter.AmqMessagesQueryFilter:javax.jms.Connection createConnection()",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.ActiveMQConnection makeConnection(java.lang.String)",
            "org.apache.activemq.jms.pool.PooledConnectionFactory:javax.jms.Connection createConnection(org.apache.activemq.jms.pool.ConnectionKey)"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.TopicConnection createTopicConnection()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.QueueConnection createQueueConnection()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAConnection createXAConnection()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledConnectionFactory$2:javax.jms.Connection createConnection()"
        ]
    },
    "org.apache.activemq.jms.pool.PooledConnectionFactory$2:javax.jms.Connection createConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledConnectionFactory:javax.jms.Connection createConnection(org.apache.activemq.jms.pool.ConnectionKey)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:void updateURIs(boolean,java.net.URI[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFilter:void updateURIs(boolean,java.net.URI[])",
            "org.apache.activemq.transport.mock.MockTransport:void updateURIs(boolean,java.net.URI[])"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void processNewTransports(boolean,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void doUpdateURIsFromDisk()",
            "org.apache.activemq.transport.failover.FailoverTransport:void handleConnectionControl(org.apache.activemq.command.ConnectionControl)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void beforeMessageIsConsumed(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive()",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receiveNoWait()",
            "org.apache.activemq.ActiveMQMessageConsumer:org.apache.activemq.command.MessageDispatch dequeue(long)",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive(long)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.MessageProducer createProducer(javax.jms.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledSession:javax.jms.MessageProducer getMessageProducer(javax.jms.Destination)",
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageProducer createProducer(javax.jms.Destination)",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageProducer createProducer(javax.jms.Destination)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSender:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ActiveMQDestination,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.QueueSender createSender(javax.jms.Queue)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicPublisher:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ActiveMQDestination,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.TopicPublisher createPublisher(javax.jms.Topic)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void sendAck(org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:void acknowledge()",
            "org.apache.activemq.ActiveMQMessageConsumer:void acknowledge(org.apache.activemq.command.MessageDispatch,byte)",
            "org.apache.activemq.ActiveMQMessageConsumer:void afterMessageIsConsumed(org.apache.activemq.command.MessageDispatch,boolean)",
            "org.apache.activemq.ActiveMQMessageConsumer:void ackLater(org.apache.activemq.command.MessageDispatch,byte)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer$4:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQMessageProducer:void send(javax.jms.Destination,javax.jms.Message,int,int,long,org.apache.activemq.AsyncCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageProducer:void send(javax.jms.Destination,javax.jms.Message,org.apache.activemq.AsyncCallback)",
            "org.apache.activemq.ActiveMQMessageProducer:void send(javax.jms.Destination,javax.jms.Message,int,int,long)",
            "org.apache.activemq.ActiveMQMessageProducer:void send(javax.jms.Message,int,int,long,org.apache.activemq.AsyncCallback)",
            "org.apache.activemq.ActiveMQMessageProducer:void send(javax.jms.Message,org.apache.activemq.AsyncCallback)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void dispose()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void doClose()"
        ]
    },
    "org.apache.activemq.jms.pool.PooledSession:void rollback()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledSession:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.XaConnectionPool$Synchronization:void afterCompletion(int)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:void rollback()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQTopicSession:void rollback()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:void commit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueBrowser:void destroyConsumer()",
            "org.apache.activemq.jms.pool.PooledSession:void commit()",
            "org.apache.activemq.ActiveMQTopicSession:void commit()",
            "org.apache.activemq.ActiveMQQueueSession:void commit()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createDurableConnectionConsumer(javax.jms.Topic,java.lang.String,java.lang.String,javax.jms.ServerSessionPool,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledConnection:javax.jms.ConnectionConsumer createDurableConnectionConsumer(javax.jms.Topic,java.lang.String,java.lang.String,javax.jms.ServerSessionPool,int)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Topic,java.lang.String,javax.jms.ServerSessionPool,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Queue,java.lang.String,javax.jms.ServerSessionPool,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Destination,java.lang.String,javax.jms.ServerSessionPool,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Topic,java.lang.String,javax.jms.ServerSessionPool,int)",
            "org.apache.activemq.jms.pool.PooledConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Queue,java.lang.String,javax.jms.ServerSessionPool,int)",
            "org.apache.activemq.jms.pool.PooledConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Destination,java.lang.String,javax.jms.ServerSessionPool,int)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.TemporaryQueue createTemporaryQueue()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledSession:javax.jms.TemporaryQueue createTemporaryQueue()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.TemporaryTopic createTemporaryTopic()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledSession:javax.jms.TemporaryTopic createTemporaryTopic()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:java.io.InputStream createInputStream(javax.jms.Destination,java.lang.String,boolean,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:java.io.InputStream createInputStream(javax.jms.Destination,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:java.io.InputStream createDurableInputStream(javax.jms.Topic,java.lang.String,java.lang.String,boolean,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:java.io.InputStream createDurableInputStream(javax.jms.Topic,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:void unsubscribe(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledSession:void unsubscribe(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQOutputStream:void flushBuffer()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQOutputStream:void write(int)",
            "org.apache.activemq.ActiveMQOutputStream:void close()",
            "org.apache.activemq.ActiveMQOutputStream:void write(byte[],int,int)",
            "org.apache.activemq.ActiveMQOutputStream:void flush()"
        ]
    },
    "org.apache.activemq.ActiveMQOutputStream:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:void doStartTransaction()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void send(org.apache.activemq.ActiveMQMessageProducer,org.apache.activemq.command.ActiveMQDestination,javax.jms.Message,int,int,long,org.apache.activemq.usage.MemoryUsage,int,org.apache.activemq.AsyncCallback)",
            "org.apache.activemq.ActiveMQSession:void run()",
            "org.apache.activemq.ActiveMQMessageConsumer:void acknowledge()",
            "org.apache.activemq.ActiveMQMessageConsumer:void registerSync()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:java.io.OutputStream createOutputStream(javax.jms.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:java.io.OutputStream createNonPersistentOutputStream(javax.jms.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.ConnectionPool:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledConnection:void start()"
        ]
    },
    "org.apache.activemq.console.filter.AmqMessagesQueryFilter:javax.jms.Connection createConnection()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.filter.AmqMessagesQueryFilter:java.util.List queryMessages(org.apache.activemq.command.ActiveMQQueue,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQXAConnection:javax.jms.XATopicSession createXATopicSession()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.ConnectionPool:javax.jms.Session makeSession(org.apache.activemq.jms.pool.SessionKey)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.ConnectionPool$1:org.apache.activemq.jms.pool.PooledSession makeObject(org.apache.activemq.jms.pool.SessionKey)"
        ]
    },
    "org.apache.activemq.jms.pool.PooledConnection:javax.jms.Session createSession(org.apache.activemq.jms.pool.SessionKey)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQXAConnection:javax.jms.XASession createXASession()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.XaConnectionPool:javax.jms.Session makeSession(org.apache.activemq.jms.pool.SessionKey)",
            "org.apache.activemq.pool.XaPooledConnectionFactory$1:javax.jms.Session makeSession(org.apache.activemq.jms.pool.SessionKey)"
        ]
    },
    "org.apache.activemq.ActiveMQXAConnection:javax.jms.XAQueueSession createXAQueueSession()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.pool.XaPooledConnectionFactory$1:javax.jms.Session makeSession(org.apache.activemq.jms.pool.SessionKey)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.ConnectionPool$1:org.apache.activemq.jms.pool.PooledSession makeObject(org.apache.activemq.jms.pool.SessionKey)"
        ]
    },
    "org.apache.activemq.TransactionContext:void start(javax.transaction.xa.Xid,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.TransactionContext:void end(javax.transaction.xa.Xid,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledConnection:void setClientID(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.TopicSession createTopicSession(boolean,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.QueueSession createQueueSession(boolean,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.udp.UdpTransportServer$1:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.jmx.NetworkConnectorView:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$stop_slave$1:void apply()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$stop_slave$1:java.lang.Object apply()"
        ]
    },
    "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$stop_master$1:void apply()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$stop_master$1:java.lang.Object apply()"
        ]
    },
    "org.apache.activemq.console.command.ListCommand:void runTask(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.console.command.ShutdownCommand:void runTask(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.command.AbstractCommand:void execute(java.util.List)"
        ]
    },
    "org.apache.activemq.console.util.AmqMessagesUtil:java.util.List getAllMessages(java.net.URI,javax.jms.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.console.command.DstatCommand:void displayQueueStats()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.command.DstatCommand:void runTask(java.util.List)"
        ]
    },
    "org.apache.activemq.console.command.DstatCommand:void displayTopicStats()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.command.DstatCommand:void runTask(java.util.List)"
        ]
    },
    "org.apache.activemq.console.command.PurgeCommand:void runTask(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.console.command.DstatCommand:void displayAllDestinations()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.command.DstatCommand:void runTask(java.util.List)"
        ]
    },
    "org.apache.activemq.console.command.BstatCommand:void runTask(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.LockableServiceSupport$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.xbean.XBeanBrokerService:void preDestroy()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.plugin.StatisticsBroker:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.scheduler.SchedulerBroker:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void stop()",
            "org.apache.activemq.broker.TransactionBroker:void stop()",
            "org.apache.activemq.broker.BrokerFilter:void stop()"
        ]
    },
    "org.apache.activemq.transport.stomp.JmsFrameTranslator:org.apache.activemq.command.ActiveMQMessage convertFrame(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:org.apache.activemq.command.ActiveMQMessage convertMessage(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.LegacyFrameTranslator:org.apache.activemq.command.ActiveMQMessage convertFrame(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.JmsFrameTranslator:org.apache.activemq.command.ActiveMQMessage convertFrame(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:org.apache.activemq.command.ActiveMQMessage convertMessage(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTNIOTransport$1:void onSelect(org.apache.activemq.transport.nio.SelectorSelection)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorSelection:void onSelect()"
        ]
    },
    "org.apache.activemq.transport.stomp.StompNIOTransport$1:void onSelect(org.apache.activemq.transport.nio.SelectorSelection)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorSelection:void onSelect()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.command.ConnectionInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.command.ConnectionInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription$2:void afterCommit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void pullTimeout(long)",
            "org.apache.activemq.broker.region.QueueBrowserSubscription:void checkDone()",
            "org.apache.activemq.broker.region.PrefetchSubscription:org.apache.activemq.command.Response pullMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void onDispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.PrefetchSubscription$3:void onSuccess()",
            "org.apache.activemq.broker.region.PrefetchSubscription:boolean dispatch(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void setPrefetchSize(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.PolicyEntry:void configurePrefetch(org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:org.apache.activemq.command.Response pullMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void dispatchPending()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void onDispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void setPrefetchSize(int)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void onUsageChanged(org.apache.activemq.usage.Usage,int,int)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.broker.region.RegionBroker)",
            "org.apache.activemq.broker.region.Topic:void clearPendingAndDispatch(org.apache.activemq.broker.region.DurableTopicSubscription)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void doResend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.BaseDestination:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.util.RedeliveryPlugin:void scheduleRedelivery(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,long,int)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination lookup(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void forceDestinationWakeupOnCompletion(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.transaction.Transaction,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.BaseCommand)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.security.AuthorizationBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.RegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)"
        ]
    },
    "org.apache.activemq.broker.region.QueueRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedQueueRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.jmx.ManagedTopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.TempTopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.broker.region.RegionBroker)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TopicSubscription$2:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.SchedulerTimerTask:void run()"
        ]
    },
    "org.apache.activemq.transport.nio.SelectorSelection:void onError(java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorWorker$1:void run()"
        ]
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void negociate(org.apache.activemq.command.WireFormatInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpTransportFilter:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.mqtt.MQTTTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.reliable.ReliableTransport:void replayCommands(org.apache.activemq.command.ReplayCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.reliable.ReliableTransport:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.jms.pool.XaConnectionPool$Synchronization:void afterCompletion(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledConnection:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledConnectionFactory$1:boolean validateObject(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.console.command.AbstractAmqCommand:javax.jms.Connection createConnection()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledConnectionFactory$1:org.apache.activemq.jms.pool.ConnectionPool makeObject(org.apache.activemq.jms.pool.ConnectionKey)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledConnectionFactory$1:java.lang.Object makeObject(java.lang.Object)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:org.apache.activemq.ActiveMQConnection makeConnection(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:org.apache.activemq.ActiveMQConnection makeConnection()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:org.apache.activemq.ActiveMQConnection makeConnection(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledConnectionFactory$2:javax.jms.Connection createConnection()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledConnectionFactory:javax.jms.Connection createConnection(org.apache.activemq.jms.pool.ConnectionKey)"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:void updateURIs(boolean,java.net.URI[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportFilter:void updateURIs(boolean,java.net.URI[])"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void doUpdateURIsFromDisk()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void handleConnectionControl(org.apache.activemq.command.ConnectionControl)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledMessageConsumer:javax.jms.Message receive()",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive(long)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receiveNoWait()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueBrowser:java.lang.Object nextElement()",
            "org.apache.activemq.jms.pool.PooledMessageConsumer:javax.jms.Message receiveNoWait()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:org.apache.activemq.command.MessageDispatch dequeue(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive()",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receiveNoWait()",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive(long)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledMessageConsumer:javax.jms.Message receive(long)"
        ]
    },
    "org.apache.activemq.jms.pool.PooledSession:javax.jms.MessageProducer getMessageProducer(javax.jms.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledSession:javax.jms.MessageProducer getMessageProducer()",
            "org.apache.activemq.jms.pool.PooledSession:javax.jms.MessageProducer createProducer(javax.jms.Destination)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageProducer createProducer(javax.jms.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageProducer createProducer(javax.jms.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.QueueSender createSender(javax.jms.Queue)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledSession:javax.jms.QueueSender getQueueSender(javax.jms.Queue)",
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueSender createSender(javax.jms.Queue)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.TopicPublisher createPublisher(javax.jms.Topic)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicPublisher createPublisher(javax.jms.Topic)",
            "org.apache.activemq.jms.pool.PooledSession:javax.jms.TopicPublisher getTopicPublisher(javax.jms.Topic)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void acknowledge()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer$5:void beforeEnd()",
            "org.apache.activemq.ActiveMQMessageConsumer:void dispose()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void acknowledge(org.apache.activemq.command.MessageDispatch,byte)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void acknowledge(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:void afterMessageIsConsumed(org.apache.activemq.command.MessageDispatch,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void afterMessageIsConsumed(org.apache.activemq.command.MessageDispatch,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive()",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receiveNoWait()",
            "org.apache.activemq.ActiveMQMessageConsumer:org.apache.activemq.command.MessageDispatch dequeue(long)",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive(long)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void ackLater(org.apache.activemq.command.MessageDispatch,byte)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void beforeMessageIsConsumed(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:void afterMessageIsConsumed(org.apache.activemq.command.MessageDispatch,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageProducer:void send(javax.jms.Destination,javax.jms.Message,org.apache.activemq.AsyncCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQMessageProducer:void send(javax.jms.Destination,javax.jms.Message,int,int,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageProducerSupport:void send(javax.jms.Message)",
            "org.apache.activemq.ActiveMQMessageProducerSupport:void send(javax.jms.Destination,javax.jms.Message)",
            "org.apache.activemq.ActiveMQQueueSender:void send(javax.jms.Queue,javax.jms.Message,int,int,long)",
            "org.apache.activemq.jms.pool.PooledProducer:void send(javax.jms.Destination,javax.jms.Message,int,int,long)",
            "org.apache.activemq.ActiveMQTopicPublisher:void publish(javax.jms.Topic,javax.jms.Message,int,int,long)",
            "org.apache.activemq.ActiveMQMessageProducerSupport:void send(javax.jms.Message,int,int,long)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageProducer:void send(javax.jms.Message,int,int,long,org.apache.activemq.AsyncCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQMessageProducer:void send(javax.jms.Message,org.apache.activemq.AsyncCallback)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:void doClose()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void access$000(org.apache.activemq.ActiveMQSession)",
            "org.apache.activemq.ActiveMQSession:void close()"
        ]
    },
    "org.apache.activemq.jms.pool.PooledSession:void commit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQTopicSession:void commit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueSession:void commit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledConnection:javax.jms.ConnectionConsumer createDurableConnectionConsumer(javax.jms.Topic,java.lang.String,java.lang.String,javax.jms.ServerSessionPool,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Topic,java.lang.String,javax.jms.ServerSessionPool,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Queue,java.lang.String,javax.jms.ServerSessionPool,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Destination,java.lang.String,javax.jms.ServerSessionPool,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:java.io.InputStream createInputStream(javax.jms.Destination,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:java.io.InputStream createInputStream(javax.jms.Destination,java.lang.String)",
            "org.apache.activemq.ActiveMQConnection:java.io.InputStream createDurableInputStream(javax.jms.Topic,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:java.io.InputStream createDurableInputStream(javax.jms.Topic,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:java.io.InputStream createDurableInputStream(javax.jms.Topic,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQOutputStream:void write(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQOutputStream:void flush()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:void run()",
            "org.apache.activemq.jms.pool.PooledSession:void run()",
            "org.apache.activemq.ActiveMQQueueSession:void run()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void registerSync()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void immediateIndividualTransactedAck(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:void ackLater(org.apache.activemq.command.MessageDispatch,byte)"
        ]
    },
    "org.apache.activemq.jms.pool.PooledConnection:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.ConnectionPool$1:org.apache.activemq.jms.pool.PooledSession makeObject(org.apache.activemq.jms.pool.SessionKey)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.ConnectionPool$1:java.lang.Object makeObject(java.lang.Object)"
        ]
    },
    "org.apache.activemq.jms.pool.XaConnectionPool:javax.jms.Session makeSession(org.apache.activemq.jms.pool.SessionKey)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.ConnectionPool$1:org.apache.activemq.jms.pool.PooledSession makeObject(org.apache.activemq.jms.pool.SessionKey)"
        ]
    },
    "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$stop_slave$1:java.lang.Object apply()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore$$anonfun$stop_master$1:java.lang.Object apply()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.console.command.AbstractCommand:void execute(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.command.ShellCommand:int main(java.lang.String[],java.io.InputStream,java.io.PrintStream)",
            "org.apache.activemq.console.ActiveMQLauncher:void start()",
            "org.apache.activemq.console.command.AbstractJmxCommand:void execute(java.util.List)"
        ]
    },
    "org.apache.activemq.console.command.DstatCommand:void runTask(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:org.apache.activemq.command.ActiveMQMessage convertMessage(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompSend(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.broker.region.QueueBrowserSubscription:void checkDone()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.QueueBrowserSubscription:void decrementQueueRef()",
            "org.apache.activemq.broker.region.QueueBrowserSubscription:void destinationsAdded()"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic$2:boolean recoverMessage(org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.PrefetchSubscription$3:void onSuccess()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Queue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.broker.region.RegionBroker)"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void onUsageChanged(org.apache.activemq.usage.Usage,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Topic:void clearPendingAndDispatch(org.apache.activemq.broker.region.DurableTopicSubscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void clearPendingMessages()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void doResend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.util.RedeliveryPlugin:void scheduleRedelivery(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,long,int)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.plugin.StatisticsBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendSubStats(org.apache.activemq.broker.ConnectionContext,javax.management.ObjectName[],org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.util.BrokerSupport:void doResend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.BrokerSupport:void resendNoCopy(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.util.BrokerSupport:void resend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.BaseDestination:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void dispatch(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:void messageSent(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.usage.Usage)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireConsumerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.advisory.AdvisoryBroker:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.advisory.AdvisoryBroker:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireProducerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.advisory.AdvisoryBroker:void networkBridgeStopped(org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void networkBridgeStarted(org.apache.activemq.command.BrokerInfo,boolean,java.lang.String)",
            "org.apache.activemq.advisory.AdvisoryBroker:void nowMasterBroker()"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void scheduledJob(java.lang.String,org.apache.activemq.util.ByteSequence)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.UserIDBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorFilter:void injectMessage(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.security.AuthorizationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void doResend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.plugin.StatisticsBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.BaseDestination:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.util.RedeliveryPlugin:void scheduleRedelivery(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,long,int)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void doResend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.util.RedeliveryPlugin:void scheduleRedelivery(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,long,int)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.util.RedeliveryPlugin:void scheduleRedelivery(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,long,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.util.RedeliveryPlugin:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransactionBroker:void forceDestinationWakeupOnCompletion(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.transaction.Transaction,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.BaseCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker:void access$000(org.apache.activemq.broker.TransactionBroker,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.transaction.Transaction,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.BaseCommand)"
        ]
    },
    "org.apache.activemq.security.AuthorizationBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.DestinationDotFileInterceptor:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination lookup(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.RegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.security.AuthorizationBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.security.AuthorizationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedQueueRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.jms.pool.PooledConnectionFactory$1:java.lang.Object makeObject(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledMessageConsumer:javax.jms.Message receive()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledMessageConsumer:javax.jms.Message receiveNoWait()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledMessageConsumer:javax.jms.Message receive(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledSession:javax.jms.MessageProducer getMessageProducer()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledSession:javax.jms.MessageProducer createProducer(javax.jms.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledSession:javax.jms.QueueSender getQueueSender(javax.jms.Queue)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledSession:javax.jms.QueueSender getQueueSender()",
            "org.apache.activemq.jms.pool.PooledSession:javax.jms.QueueSender createSender(javax.jms.Queue)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueSender createSender(javax.jms.Queue)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicPublisher createPublisher(javax.jms.Topic)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledSession:javax.jms.TopicPublisher getTopicPublisher(javax.jms.Topic)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledSession:javax.jms.TopicPublisher getTopicPublisher()",
            "org.apache.activemq.jms.pool.PooledSession:javax.jms.TopicPublisher createPublisher(javax.jms.Topic)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer$5:void beforeEnd()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void acknowledge(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer$2:void execute()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageProducerSupport:void send(javax.jms.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.activemq.camel.CamelTopicPublisher:void publish(javax.jms.Message)",
            "org.apache.activemq.ActiveMQTopicPublisher:void publish(javax.jms.Message)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageProducerSupport:void send(javax.jms.Destination,javax.jms.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.camel.CamelTopicPublisher:void publish(javax.jms.Topic,javax.jms.Message)",
            "org.apache.activemq.camel.CamelQueueSender:void send(javax.jms.Queue,javax.jms.Message)",
            "org.apache.activemq.ActiveMQTopicPublisher:void publish(javax.jms.Topic,javax.jms.Message)",
            "org.apache.activemq.ActiveMQQueueSender:void send(javax.jms.Queue,javax.jms.Message)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSender:void send(javax.jms.Queue,javax.jms.Message,int,int,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledQueueSender:void send(javax.jms.Queue,javax.jms.Message,int,int,long)"
        ]
    },
    "org.apache.activemq.jms.pool.PooledProducer:void send(javax.jms.Destination,javax.jms.Message,int,int,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledProducer:void send(javax.jms.Message,int,int,long)",
            "org.apache.activemq.jms.pool.PooledProducer:void send(javax.jms.Destination,javax.jms.Message)",
            "org.apache.activemq.jms.pool.PooledProducer:void send(javax.jms.Message)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicPublisher:void publish(javax.jms.Topic,javax.jms.Message,int,int,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledTopicPublisher:void publish(javax.jms.Topic,javax.jms.Message,int,int,long)",
            "org.apache.activemq.jms.pool.PooledTopicPublisher:void publish(javax.jms.Message,int,int,long)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageProducerSupport:void send(javax.jms.Message,int,int,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicPublisher:void publish(javax.jms.Message,int,int,long)",
            "org.apache.activemq.camel.CamelTopicPublisher:void publish(javax.jms.Message,int,int,long)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void access$000(org.apache.activemq.ActiveMQSession)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession$1:void afterCommit()",
            "org.apache.activemq.ActiveMQSession$1:void afterRollback()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:void close()",
            "org.apache.activemq.advisory.DestinationSource:void stop()",
            "org.apache.activemq.ActiveMQTopicSession:void close()",
            "org.apache.activemq.jms.pool.PooledSession:void close()",
            "org.apache.activemq.jms.pool.ConnectionPool$1:void destroyObject(org.apache.activemq.jms.pool.SessionKey,org.apache.activemq.jms.pool.PooledSession)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:java.io.InputStream createInputStream(javax.jms.Destination,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:java.io.InputStream createInputStream(javax.jms.Destination)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:java.io.InputStream createDurableInputStream(javax.jms.Topic,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:java.io.InputStream createDurableInputStream(javax.jms.Topic,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQTopicSession:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledSession:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueSession:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.ConnectionPool$1:java.lang.Object makeObject(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.console.command.ShellCommand:int main(java.lang.String[],java.io.InputStream,java.io.PrintStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.console.ActiveMQLauncher:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.console.command.AbstractJmxCommand:void execute(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.console.ActiveMQLauncher:void stop()"
        ]
    },
    "org.apache.activemq.broker.region.QueueBrowserSubscription:void decrementQueueRef()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue$BrowserDispatch:void done()"
        ]
    },
    "org.apache.activemq.broker.region.QueueBrowserSubscription:void destinationsAdded()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.Topic$2:boolean recoverMessage(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore$2:boolean recoverMessage(long,byte[])",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:int recoverRolledBackAcks(org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,org.apache.activemq.store.kahadb.disk.page.Transaction,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.TempTopic:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.TempQueue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void clearPendingMessages()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker$PreparedDestinationCompletion:void afterCommit()",
            "org.apache.activemq.broker.TransactionBroker$PreparedDestinationCompletion:void afterRollback()"
        ]
    },
    "org.apache.activemq.broker.scheduler.SchedulerBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void doResend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.util.RedeliveryPlugin:void scheduleRedelivery(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,long,int)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.plugin.StatisticsBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.plugin.StatisticsBroker:void sendSubStats(org.apache.activemq.broker.ConnectionContext,javax.management.ObjectName[],org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.plugin.StatisticsBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.util.BrokerSupport:void resendNoCopy(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.util.BrokerSupport:void resend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:boolean moveMessageTo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.QueueMessageReference,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.Queue:int copyMatchingMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void dispatch(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic$4:void afterCommit()",
            "org.apache.activemq.broker.region.Topic:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void messageSent(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue$SendSync:void processSent()"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.usage.Usage)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.usage.Usage)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireConsumerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void fireConsumerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command)",
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireProducerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireProducerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.broker.scheduler.SchedulerBroker:void scheduledJob(java.lang.String,org.apache.activemq.util.ByteSequence)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.UserIDBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.security.AuthorizationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.RedeliveryPlugin:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransactionBroker:void access$000(org.apache.activemq.broker.TransactionBroker,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.transaction.Transaction,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.BaseCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker$1:void recover(org.apache.activemq.command.XATransactionId,org.apache.activemq.command.Message[],org.apache.activemq.command.MessageAck[])"
        ]
    },
    "org.apache.activemq.security.AuthorizationBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.security.AuthorizationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.plugin.SubQueueSelectorCacheBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.cluster.ConnectionSplitBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.security.AuthorizationBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:javax.management.ObjectName createDurableSubscriber(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledSession:javax.jms.QueueSender getQueueSender()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledSession:javax.jms.QueueSender createSender(javax.jms.Queue)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledSession:javax.jms.TopicPublisher getTopicPublisher()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledSession:javax.jms.TopicPublisher createPublisher(javax.jms.Topic)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQMessageConsumer$2:void execute()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQMessage:void acknowledge()"
        ]
    },
    "org.apache.activemq.camel.CamelTopicPublisher:void publish(javax.jms.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQTopicPublisher:void publish(javax.jms.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.camel.CamelTopicPublisher:void publish(javax.jms.Topic,javax.jms.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.camel.CamelQueueSender:void send(javax.jms.Queue,javax.jms.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQTopicPublisher:void publish(javax.jms.Topic,javax.jms.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledTopicPublisher:void publish(javax.jms.Message)",
            "org.apache.activemq.jms.pool.PooledTopicPublisher:void publish(javax.jms.Topic,javax.jms.Message)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSender:void send(javax.jms.Queue,javax.jms.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledQueueSender:void send(javax.jms.Queue,javax.jms.Message)"
        ]
    },
    "org.apache.activemq.jms.pool.PooledQueueSender:void send(javax.jms.Queue,javax.jms.Message,int,int,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledProducer:void send(javax.jms.Message,int,int,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledProducer:void send(javax.jms.Destination,javax.jms.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledProducer:void send(javax.jms.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledTopicPublisher:void publish(javax.jms.Topic,javax.jms.Message,int,int,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledTopicPublisher:void publish(javax.jms.Message,int,int,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQTopicPublisher:void publish(javax.jms.Message,int,int,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.camel.CamelTopicPublisher:void publish(javax.jms.Message,int,int,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession$1:void afterCommit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession$1:void afterRollback()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueSession:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.advisory.DestinationSource:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void close()"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.ConnectionPool$1:void destroyObject(org.apache.activemq.jms.pool.SessionKey,org.apache.activemq.jms.pool.PooledSession)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.ConnectionPool$1:void destroyObject(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:java.io.InputStream createInputStream(javax.jms.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.console.ActiveMQLauncher:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue$BrowserDispatch:void done()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.JDBCTopicMessageStore$2:boolean recoverMessage(long,byte[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverSubscription(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:int recoverRolledBackAcks(org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,org.apache.activemq.store.kahadb.disk.page.Transaction,int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.region.TempTopic:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TempQueue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker$PreparedDestinationCompletion:void afterCommit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransactionBroker$PreparedDestinationCompletion:void afterRollback()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:boolean moveMessageTo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.QueueMessageReference,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.jmx.QueueView:boolean retryMessage(java.lang.String)",
            "org.apache.activemq.broker.region.Queue:int retryMessages(org.apache.activemq.broker.ConnectionContext,int)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:int copyMatchingMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:int copyMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.region.Queue:boolean copyMessageTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.Topic$4:void afterCommit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Topic:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic$3:void run()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue$4:void run()"
        ]
    },
    "org.apache.activemq.broker.region.Queue$SendSync:void processSent()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.usage.Usage)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.usage.Usage)",
            "org.apache.activemq.broker.BrokerFilter:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.usage.Usage)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireConsumerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.BrokerFilter:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.BrokerFilter:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.advisory.AdvisoryBroker:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireProducerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker$1:void recover(org.apache.activemq.command.XATransactionId,org.apache.activemq.command.Message[],org.apache.activemq.command.MessageAck[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.memory.MemoryTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)"
        ]
    },
    "org.apache.activemq.plugin.SubQueueSelectorCacheBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.cluster.ConnectionSplitBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.security.AuthorizationBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:javax.management.ObjectName createDurableSubscriber(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMessage:void acknowledge()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledTopicPublisher:void publish(javax.jms.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledTopicPublisher:void publish(javax.jms.Topic,javax.jms.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.PooledQueueSender:void send(javax.jms.Queue,javax.jms.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.jms.pool.ConnectionPool$1:void destroyObject(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverSubscription(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore:void incrementRedeliveryAndReWrite(java.lang.String,org.apache.activemq.store.kahadb.data.KahaDestination)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.data.KahaAddMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void schedule(java.lang.String,org.apache.activemq.util.ByteSequence,java.lang.String,long,long,int)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void processAdd(org.apache.activemq.store.kahadb.data.KahaAddMessageCommand,org.apache.activemq.command.TransactionId,org.apache.activemq.util.ByteSequence)",
            "org.apache.activemq.store.kahadb.plist.PListImpl:org.apache.activemq.store.PListEntry getFirst()",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadb.plist.PListImpl:java.lang.Object addFirst(java.lang.String,org.apache.activemq.util.ByteSequence)",
            "org.apache.activemq.store.kahadb.plist.PListImpl:boolean remove(long)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()",
            "org.apache.activemq.store.kahadb.MessageDatabase:void checkpointUpdate(boolean)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:java.util.List getAllJobs(long,long)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void removeAllJobs()",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void resetBatching()",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void process(org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void removeFromIndex(long,java.lang.String)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:java.util.List getNextScheduleJobs()",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl:boolean removePList(java.lang.String)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void processCommit(org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl:org.apache.activemq.store.kahadb.plist.PListImpl getPList(java.lang.String)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void schedule(java.lang.String,org.apache.activemq.util.ByteSequence,long)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void unload()",
            "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination readPayload(java.io.DataInput)",
            "org.apache.activemq.store.kahadb.plist.PListImpl:boolean remove(java.lang.String)",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl:void intialize()",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void storeJob(org.apache.activemq.store.kahadb.scheduler.JobLocation,long)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:boolean removeJobScheduler(java.lang.String)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void removeAllJobs(long,long)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void processRemove(org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void recover()",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void process(org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:java.util.List getAllJobs()",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void loadPageFile()",
            "org.apache.activemq.store.kahadb.plist.PListImpl:void destroy()",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.data.KahaCommitCommand,org.apache.activemq.store.kahadb.disk.journal.Location,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void remove(java.lang.String)",
            "org.apache.activemq.store.kahadb.plist.PListImpl:java.lang.Object addLast(java.lang.String,org.apache.activemq.util.ByteSequence)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore:java.util.Set getDestinations()",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void remove(long)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:org.apache.activemq.broker.scheduler.JobScheduler getJobScheduler(java.lang.String)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void doStart()",
            "org.apache.activemq.store.kahadb.plist.PListImpl:org.apache.activemq.store.PListEntry getLast()",
            "org.apache.activemq.store.kahadb.plist.PListImpl$PListIteratorImpl:void remove()",
            "org.apache.activemq.store.kahadb.plist.PListImpl:void claimFileLocations(java.util.Set)",
            "org.apache.activemq.store.kahadb.plist.PListImpl:org.apache.activemq.store.PListEntry get(long)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void schedule(java.lang.String,org.apache.activemq.util.ByteSequence,java.lang.String)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void remove(long,java.lang.String)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void setBatch(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadb.KahaDBStore:java.util.Set getDestinations()",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void remove(long,java.util.List)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void loadPageFile()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.region.Queue:boolean moveMessageTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:boolean retryMessage(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:int retryMessages(org.apache.activemq.broker.ConnectionContext,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:int retryMessages()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:int copyMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:int copyMatchingMessagesTo(java.lang.String,java.lang.String,int)",
            "org.apache.activemq.broker.region.Queue:int copyMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:boolean copyMessageTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:boolean copyMessageTo(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.security.AbstractAuthenticationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.CompositeDestinationBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore:void incrementRedeliveryAndReWrite(java.lang.String,org.apache.activemq.store.kahadb.data.KahaDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$16:void visit(org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.data.KahaAddMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$10:void visit(org.apache.activemq.store.kahadb.data.KahaAddMessageCommand)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void schedule(java.lang.String,org.apache.activemq.util.ByteSequence,java.lang.String,long,long,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void mainLoop()"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void processAdd(org.apache.activemq.store.kahadb.data.KahaAddMessageCommand,org.apache.activemq.command.TransactionId,org.apache.activemq.util.ByteSequence)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl:org.apache.activemq.store.PListEntry getFirst()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl:java.lang.Object addFirst(java.lang.String,org.apache.activemq.util.ByteSequence)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl:boolean remove(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand,org.apache.activemq.store.kahadb.disk.journal.Location)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$10:void visit(org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void <init>(org.apache.activemq.store.kahadb.KahaDBStore,org.apache.activemq.command.ActiveMQTopic)",
            "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void checkpointUpdate(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void checkpointCleanup(boolean)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void close()"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:java.util.List getAllJobs(long,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void removeAllJobs()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand,org.apache.activemq.store.kahadb.disk.journal.Location)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$10:void visit(org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void resetBatching()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyMessageStore:void resetBatching()",
            "org.apache.activemq.store.ProxyTopicMessageStore:void resetBatching()"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void process(org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void removeFromIndex(long,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void mainLoop()"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:java.util.List getNextScheduleJobs()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl:boolean removePList(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void processCommit(org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempKahaDBStore$1:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void schedule(java.lang.String,org.apache.activemq.util.ByteSequence,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void unload()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void doStop(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination readPayload(java.io.DataInput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller:java.lang.Object readPayload(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl:boolean remove(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListImpl:boolean remove(java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void storeJob(org.apache.activemq.store.kahadb.scheduler.JobLocation,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void mainLoop()"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:boolean removeJobScheduler(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void removeAllJobs(long,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void processRemove(org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void recover()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void open()"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void process(org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:void addSubscription(org.apache.activemq.command.SubscriptionInfo,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:java.util.List getAllJobs()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void loadPageFile()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void open()",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void load()"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl:void destroy()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.data.KahaCommitCommand,org.apache.activemq.store.kahadb.disk.journal.Location,java.lang.Runnable,java.lang.Runnable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$10:void visit(org.apache.activemq.store.kahadb.data.KahaCommitCommand)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void remove(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl:java.lang.Object addLast(java.lang.String,org.apache.activemq.util.ByteSequence)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore:java.util.Set getDestinations()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void remove(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl:org.apache.activemq.store.PListEntry getLast()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl$PListIteratorImpl:void remove()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl:void claimFileLocations(java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl:org.apache.activemq.store.PListEntry get(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void schedule(java.lang.String,org.apache.activemq.util.ByteSequence,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void remove(long,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void setBatch(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:void setBatch(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.ProxyMessageStore:void setBatch(org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore:java.util.Set getDestinations()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter:java.util.Set getDestinations()"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void remove(long,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void mainLoop()"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$10:void visit(org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void loadPageFile()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void open()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.jmx.QueueView:int moveMatchingMessagesTo(java.lang.String,java.lang.String,int)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:boolean moveMessageTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:boolean moveMessageTo(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:int retryMessages()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.QueueView:int copyMatchingMessagesTo(java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:int copyMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:int copyMatchingMessagesTo(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:boolean copyMessageTo(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.cluster.ConnectionSplitBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.cluster.ConnectionSplitBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.BrokerFilter:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.security.JaasCertificateAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.security.AbstractAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.security.JaasDualAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.security.AuthorizationBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.advisory.AdvisoryBroker:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.security.JaasAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.security.JaasDualAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.security.SimpleAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.security.JaasCertificateAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.security.AuthorizationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.security.AbstractAuthenticationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.security.JaasDualAuthenticationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.security.AbstractAuthenticationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.security.JaasDualAuthenticationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.broker.CompositeDestinationBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.CompositeDestinationBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$16:void visit(org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$10:void visit(org.apache.activemq.store.kahadb.data.KahaAddMessageCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.data.KahaAddMessageCommand:void visit(org.apache.activemq.store.kahadb.Visitor)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$10:void visit(org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand:void visit(org.apache.activemq.store.kahadb.Visitor)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void <init>(org.apache.activemq.store.kahadb.KahaDBStore,org.apache.activemq.command.ActiveMQTopic)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore:org.apache.activemq.store.TopicMessageStore createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.command.SubscriptionInfo[] getAllDurableSubscriptions(org.apache.activemq.command.ActiveMQTopic)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void checkpointCleanup(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$3:void run()",
            "org.apache.activemq.store.kahadb.KahaDBStore:void checkpoint(boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void unload()"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$10:void visit(org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand:void visit(org.apache.activemq.store.kahadb.Visitor)"
        ]
    },
    "org.apache.activemq.store.ProxyMessageStore:void resetBatching()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:void resetBatching()",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void resetBatch()"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void resetBatching()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:void resetBatching()",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void resetBatch()"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void doFillBatch()",
            "org.apache.activemq.broker.region.Queue:void initialize()"
        ]
    },
    "org.apache.activemq.store.ProxyMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void doFillBatch()",
            "org.apache.activemq.broker.region.Queue:void initialize()"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void doFillBatch()",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$1:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore:void doStop(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller:java.lang.Object readPayload(java.io.DataInput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:org.apache.activemq.store.kahadb.disk.index.BTreeNode readPayload(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl:boolean remove(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void resetBatch()",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void open()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void load()"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void doBrowse(java.util.List,int)",
            "org.apache.activemq.store.journal.JournalMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:java.util.List getSubscriberMessages(org.apache.activemq.broker.jmx.SubscriptionView)"
        ]
    },
    "org.apache.activemq.store.ProxyMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:void addSubscription(org.apache.activemq.command.SubscriptionInfo,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void open()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void load()"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void load()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempKahaDBStore:void load()",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void start()"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$10:void visit(org.apache.activemq.store.kahadb.data.KahaCommitCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.data.KahaCommitCommand:void visit(org.apache.activemq.store.kahadb.Visitor)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void setBatch(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void setBatch(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.journal.JournalMessageStore:void setBatch(org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.ProxyMessageStore:void setBatch(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void setBatch(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.journal.JournalMessageStore:void setBatch(org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter:java.util.Set getDestinations()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$10:void visit(org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand:void visit(org.apache.activemq.store.kahadb.Visitor)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:int moveMatchingMessagesTo(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:int moveMatchingMessagesTo(java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.QueueView:boolean moveMessageTo(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.QueueView:int copyMatchingMessagesTo(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.cluster.ConnectionSplitBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.security.JaasCertificateAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.security.JaasDualAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.security.AbstractAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.security.JaasDualAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.security.JaasDualAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.security.AuthorizationBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.security.JaasAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.security.JaasDualAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.security.JaasDualAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.security.SimpleAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.security.JaasCertificateAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.security.JaasDualAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.security.AuthorizationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.security.JaasDualAuthenticationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.store.kahadb.data.KahaAddMessageCommand:void visit(org.apache.activemq.store.kahadb.Visitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand:void visit(org.apache.activemq.store.kahadb.Visitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore:org.apache.activemq.store.TopicMessageStore createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter:org.apache.activemq.store.TopicMessageStore createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.command.SubscriptionInfo[] getAllDurableSubscriptions(org.apache.activemq.command.ActiveMQTopic)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void buildExistingSubscriptions()"
        ]
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$3:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBStore:void checkpoint(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter:void checkpoint(boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand:void visit(org.apache.activemq.store.kahadb.Visitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:void resetBatching()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void resetBatch()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void stop()",
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void start()",
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void fillBatch()"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void doFillBatch()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void fillBatch()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void initialize()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void doFillBatch()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBStore:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void stop()"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:org.apache.activemq.store.kahadb.disk.index.BTreeNode readPayload(java.io.DataInput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:java.lang.Object readPayload(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void resetBatch()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void start()"
        ]
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void load()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void doStart()"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void doBrowse(java.util.List,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.broker.region.Topic:void access$100(org.apache.activemq.broker.region.Topic,java.util.List,int)"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:java.util.List getSubscriberMessages(org.apache.activemq.broker.jmx.SubscriptionView)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.CompositeData[] browse(org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.TabularData browseAsTable(org.apache.activemq.broker.jmx.SubscriptionView)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore:void load()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.data.KahaCommitCommand:void visit(org.apache.activemq.store.kahadb.Visitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void setBatch(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:void setBatch(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand:void visit(org.apache.activemq.store.kahadb.Visitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:int moveMatchingMessagesTo(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,java.lang.Runnable,java.lang.Runnable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void incrementalRecover()",
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand,boolean,java.lang.Runnable,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void process(org.apache.activemq.store.kahadb.JournalCommand,org.apache.activemq.store.kahadb.disk.journal.Location,org.apache.activemq.store.kahadb.disk.journal.Location)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void recover()"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter:org.apache.activemq.store.TopicMessageStore createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void buildExistingSubscriptions()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void start()"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter:void checkpoint(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void stop()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void start()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void fillBatch()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:boolean hasNext()",
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void reset()"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:java.lang.Object readPayload(java.io.DataInput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void load(org.apache.activemq.store.kahadb.disk.page.Page,org.apache.activemq.store.kahadb.disk.util.Marshaller)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore:void doStart()"
        ]
    },
    "org.apache.activemq.broker.region.Topic:org.apache.activemq.command.Message[] browse()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void access$100(org.apache.activemq.broker.region.Topic,java.util.List,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic$6:void run()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.CompositeData[] browse(org.apache.activemq.broker.jmx.SubscriptionView)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DurableSubscriptionView:javax.management.openmbean.CompositeData[] browse()",
            "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:javax.management.openmbean.CompositeData[] browse()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.TabularData browseAsTable(org.apache.activemq.broker.jmx.SubscriptionView)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:javax.management.openmbean.TabularData browseAsTable()",
            "org.apache.activemq.broker.jmx.DurableSubscriptionView:javax.management.openmbean.TabularData browseAsTable()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void incrementalRecover()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand,boolean,java.lang.Runnable,java.lang.Runnable,java.lang.Runnable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand,java.lang.Runnable)",
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand,boolean,java.lang.Runnable,java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void stop()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void start()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:boolean hasNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:boolean hasNext()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void reset()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void reset()"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction:void load(org.apache.activemq.store.kahadb.disk.page.Page,org.apache.activemq.store.kahadb.disk.util.Marshaller)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:org.apache.activemq.store.kahadb.disk.page.Page load(long,org.apache.activemq.store.kahadb.disk.util.Marshaller)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void start()"
        ]
    },
    "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages()"
        ]
    },
    "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse()"
        ]
    },
    "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable()"
        ]
    },
    "org.apache.activemq.broker.region.Topic$6:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.DurableSubscriptionView:javax.management.openmbean.CompositeData[] browse()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:javax.management.openmbean.CompositeData[] browse()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:javax.management.openmbean.TabularData browseAsTable()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.DurableSubscriptionView:javax.management.openmbean.TabularData browseAsTable()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void sendMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue$BatchMessageRecoveryListener:boolean recoverMessage(org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand,java.lang.Runnable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.disk.journal.Location checkpointAckMessageFileMap()",
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.disk.journal.Location checkpointProducerAudit()"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand,boolean,java.lang.Runnable,java.lang.Runnable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void addSubscription(org.apache.activemq.command.SubscriptionInfo,boolean)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void recover()",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore:void prepare(org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void doAcknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore:void rollback(org.apache.activemq.command.TransactionId)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:boolean hasNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doPageInForDispatch(boolean,boolean)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.QueueMessageReference getMatchingMessage(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.QueueMessageReference getMessage(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void reset()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void clearPendingMessages()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doPageInForDispatch(boolean,boolean)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.QueueMessageReference getMatchingMessage(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void rebase()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.QueueMessageReference getMessage(java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction:org.apache.activemq.store.kahadb.disk.page.Page load(long,org.apache.activemq.store.kahadb.disk.util.Marshaller)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:org.apache.activemq.store.kahadb.disk.index.HashBin getBin(org.apache.activemq.store.kahadb.disk.page.Transaction,int,long)",
            "org.apache.activemq.store.kahadb.MessageDatabase$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void free(long,int)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:org.apache.activemq.store.kahadb.disk.index.ListNode createNode(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void free(long)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:org.apache.activemq.store.kahadb.disk.index.ListNode loadNode(org.apache.activemq.store.kahadb.disk.page.Transaction,long)",
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void free(org.apache.activemq.store.kahadb.disk.page.Page,int)",
            "org.apache.activemq.store.kahadb.disk.page.Transaction$3:void findNextPage()",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.page.Transaction$1:void onWrite()",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:void clearBinAtPage(org.apache.activemq.store.kahadb.disk.page.Transaction,long)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:org.apache.activemq.store.kahadb.disk.index.BTreeNode loadNode(org.apache.activemq.store.kahadb.disk.page.Transaction,long,org.apache.activemq.store.kahadb.disk.index.BTreeNode)",
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void free(org.apache.activemq.store.kahadb.disk.page.Page)"
        ]
    },
    "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:void sendMessage(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue$SendSync:void processSend()"
        ]
    },
    "org.apache.activemq.broker.region.Queue$BatchMessageRecoveryListener:boolean recoverMessage(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:int recoverRolledBackAcks(org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,org.apache.activemq.store.kahadb.disk.page.Transaction,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.JDBCMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.JDBCMessageStore$2:boolean recoverMessage(long,byte[])",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.disk.journal.Location checkpointAckMessageFileMap()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void checkpointUpdate(org.apache.activemq.store.kahadb.disk.page.Transaction,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.disk.journal.Location checkpointProducerAudit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void checkpointUpdate(org.apache.activemq.store.kahadb.disk.page.Transaction,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void addSubscription(org.apache.activemq.command.SubscriptionInfo,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:void addSubscription(org.apache.activemq.command.SubscriptionInfo,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$7:java.util.concurrent.Future run(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$4:void run(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void removeMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void removeMessage(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$6:java.util.concurrent.Future run(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.ProxyMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void load()"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore:void prepare(org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void doAcknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$StoreTopicTask:void run()",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.AbstractMessageStore:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.AbstractMessageStore:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.AbstractMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void addMessage(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void addMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.KahaDBStore$StoreTopicTask:void run()",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$3:void run(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.kahadb.KahaDBStore$StoreQueueTask:void run()",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$3:java.util.concurrent.Future run(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore:void rollback(org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doPageInForDispatch(boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void pageInMessages(boolean)",
            "org.apache.activemq.broker.region.Queue:void doPageIn(boolean,boolean)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.QueueMessageReference getMatchingMessage(org.apache.activemq.command.MessageDispatchNotification)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.QueueMessageReference getMessage(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:javax.management.openmbean.CompositeData getMessage(java.lang.String)",
            "org.apache.activemq.broker.jmx.QueueView:boolean retryMessage(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void clearPendingMessages()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker$PreparedDestinationCompletion:void afterCommit()",
            "org.apache.activemq.broker.TransactionBroker$PreparedDestinationCompletion:void afterRollback()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void rebase()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void clearPendingMessages()"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex:org.apache.activemq.store.kahadb.disk.index.HashBin getBin(org.apache.activemq.store.kahadb.disk.page.Transaction,int,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:org.apache.activemq.store.kahadb.disk.index.HashBin getBin(org.apache.activemq.store.kahadb.disk.page.Transaction,int)",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:org.apache.activemq.store.kahadb.disk.index.HashBin getBin(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,long,int)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction:void free(long,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:void resize(org.apache.activemq.store.kahadb.disk.page.Transaction,int)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:org.apache.activemq.store.kahadb.disk.index.ListNode createNode(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListNode:void split(org.apache.activemq.store.kahadb.disk.page.Transaction,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction:void free(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand)",
            "org.apache.activemq.store.kahadb.disk.index.ListNode:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.page.Transaction$1:void close()",
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void remove(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$MetaData:void loadLists(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Map)",
            "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:org.apache.activemq.store.kahadb.disk.index.ListNode loadNode(org.apache.activemq.store.kahadb.disk.page.Transaction,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.ListNode$ListNodeIterator:org.apache.activemq.store.kahadb.disk.index.ListNode next()",
            "org.apache.activemq.store.kahadb.disk.index.ListNode$ListIterator:org.apache.activemq.store.kahadb.disk.index.ListNode$KeyValueEntry getFromNextNode()",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:org.apache.activemq.store.kahadb.disk.index.ListNode getHead(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:org.apache.activemq.store.kahadb.disk.index.ListNode getTail(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction:void free(org.apache.activemq.store.kahadb.disk.page.Page,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void free(long,int)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction$3:void findNextPage()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction$3:org.apache.activemq.store.kahadb.disk.page.Page next()",
            "org.apache.activemq.store.kahadb.disk.page.Transaction$3:boolean hasNext()"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$MetaData:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$MetaData:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction$1:void onWrite()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void writeInt(int)",
            "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void writeBoolean(boolean)",
            "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void writeByte(int)",
            "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void writeUTF(java.lang.String)",
            "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void writeLong(long)",
            "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void writeShort(int)",
            "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void write(byte[],int,int)",
            "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void skip(int)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex:void clearBinAtPage(org.apache.activemq.store.kahadb.disk.page.Transaction,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:void resize(org.apache.activemq.store.kahadb.disk.page.Transaction,int)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:org.apache.activemq.store.kahadb.disk.index.BTreeNode loadNode(org.apache.activemq.store.kahadb.disk.page.Transaction,long,org.apache.activemq.store.kahadb.disk.index.BTreeNode)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$BTreeIterator:void findNextPage()",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:org.apache.activemq.store.kahadb.disk.index.BTreeNode getChild(org.apache.activemq.store.kahadb.disk.page.Transaction,int)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:org.apache.activemq.store.kahadb.disk.index.BTreeNode getRoot(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction:void free(org.apache.activemq.store.kahadb.disk.page.Page)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void free(long)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void free(org.apache.activemq.store.kahadb.disk.page.Page,int)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.page.Transaction$3:void remove()",
            "org.apache.activemq.store.kahadb.disk.index.ListNode$ListIterator:void remove()"
        ]
    },
    "org.apache.activemq.broker.region.Queue$SendSync:void processSend()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.JDBCMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCMessageStore$2:boolean recoverMessage(long,byte[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverNextMessages(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,long,long,int,boolean,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void doFillBatch()",
            "org.apache.activemq.broker.region.Queue:void initialize()"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void checkpointUpdate(org.apache.activemq.store.kahadb.disk.page.Transaction,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$17:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void addSubscription(org.apache.activemq.command.SubscriptionInfo,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void addSubscription(org.apache.activemq.command.SubscriptionInfo,boolean)",
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$7:java.util.concurrent.Future run(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$4:void run(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore:void removeMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.memory.MemoryTransactionStore$2:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$1:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$2:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$1:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$2:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$1:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void removeMessage(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$1:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$2:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void removeAsyncMessage(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.ProxyMessageStore:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$6:java.util.concurrent.Future run(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void dispose(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.journal.JournalMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void dispose(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.journal.JournalMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.region.Topic:void deleteSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.util.SubscriptionKey)",
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$StoreTopicTask:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.TopicMessageStore,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$8:java.util.concurrent.Future run(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void acknowledge(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.TopicMessageStore,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$5:void run(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore$5:void run(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore:void acknowledge(org.apache.activemq.store.TopicMessageStore,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void acknowledge(org.apache.activemq.store.TopicMessageStore,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.ProxyMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$1:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$1:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.AbstractMessageStore:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$4:java.util.concurrent.Future run(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.ProxyMessageStore:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.AbstractMessageStore:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$5:java.util.concurrent.Future run(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyMessageStore:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyTopicMessageStore:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.AbstractMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)",
            "org.apache.activemq.store.AbstractMessageStore:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)",
            "org.apache.activemq.store.ProxyMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)",
            "org.apache.activemq.store.AbstractMessageStore:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$2:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$2:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void addMessage(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$2:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$1:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$1:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$2:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$2:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$1:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$2:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$1:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$1:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$1:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore:void addMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.memory.MemoryTransactionStore$2:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$2:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$1:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$2:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$1:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$2:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$1:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$1:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$2:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$2:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$3:void run(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$StoreQueueTask:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$3:java.util.concurrent.Future run(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:void pageInMessages(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void doBrowse(java.util.List,int)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void doPageIn(boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void purge()",
            "org.apache.activemq.broker.region.Queue:void doPageIn(boolean)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.QueueView:javax.management.openmbean.CompositeData getMessage(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex:org.apache.activemq.store.kahadb.disk.index.HashBin getBin(org.apache.activemq.store.kahadb.disk.page.Transaction,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:int sizeOfBin(org.apache.activemq.store.kahadb.disk.page.Transaction,int)",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:void resize(org.apache.activemq.store.kahadb.disk.page.Transaction,int)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex:org.apache.activemq.store.kahadb.disk.index.HashBin getBin(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,long,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:void resize(org.apache.activemq.store.kahadb.disk.page.Transaction,int)",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:org.apache.activemq.store.kahadb.disk.index.HashBin getBin(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex:void resize(org.apache.activemq.store.kahadb.disk.page.Transaction,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode:void split(org.apache.activemq.store.kahadb.disk.page.Transaction,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListNode:void store(org.apache.activemq.store.kahadb.disk.page.Transaction,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void access$200(org.apache.activemq.store.kahadb.TempMessageDatabase,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction$1:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void store(org.apache.activemq.store.kahadb.disk.page.Page,org.apache.activemq.store.kahadb.disk.util.Marshaller,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand,org.apache.activemq.store.kahadb.disk.journal.Location)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$13:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void remove(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination getStoredDestination(org.apache.activemq.store.kahadb.data.KahaDestination,org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination access$100(org.apache.activemq.store.kahadb.MessageDatabase,org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl$MetaData:void loadLists(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode$ListNodeIterator:org.apache.activemq.store.kahadb.disk.index.ListNode next()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListNode$ListNodeIterator:java.lang.Object next()"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode$ListIterator:org.apache.activemq.store.kahadb.disk.index.ListNode$KeyValueEntry getFromNextNode()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListNode$ListIterator:boolean hasNext()",
            "org.apache.activemq.store.kahadb.disk.index.ListNode$ListIterator:void remove()"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:org.apache.activemq.store.kahadb.disk.index.ListNode getHead(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.util.Map$Entry getFirst(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:boolean isEmpty(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object addFirst(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction,long)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.util.Iterator listNodeIterator(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:org.apache.activemq.store.kahadb.disk.index.ListNode getTail(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object add(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.util.Map$Entry getLast(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction$3:org.apache.activemq.store.kahadb.disk.page.Page next()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction$3:java.lang.Object next()"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction$3:boolean hasNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.PageFile:void load()"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl$MetaData:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase:org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination getStoredDestination(org.apache.activemq.store.kahadb.data.KahaDestination,org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$MetaData:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$MetaData:void loadScheduler(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Map)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void writeInt(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$Metadata:void write(java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender:void initBuffer(org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream)",
            "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void writeFloat(float)",
            "org.apache.activemq.store.kahadb.disk.util.SequenceSet$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.util.SequenceSet,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$ValueMarshaller:void writePayload(java.util.List,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.index.HashBin$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.HashBin,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.page.Page:void write(java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.MessageDatabase$HashSetStringMarshaller:void writePayload(java.util.HashSet,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex$Metadata:void write(java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.journal.DataFileAppender:void processQueue()",
            "org.apache.activemq.store.kahadb.TempMessageDatabase$ByteSequenceMarshaller:void writePayload(org.apache.activemq.util.ByteSequence,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.util.LocationMarshaller:void writePayload(org.apache.activemq.store.kahadb.disk.journal.Location,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.util.IntegerMarshaller:void writePayload(java.lang.Integer,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender:boolean appendToBuffer(org.apache.activemq.store.kahadb.disk.journal.Journal$WriteCommand,org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream)",
            "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender:void processQueue()"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void writeBoolean(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$Metadata:void write(java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller:void writePayload(org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestinationMarshaller:void writePayload(org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.util.SequenceSet$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.util.SequenceSet,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void writeByte(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.journal.DataFileAppender:void processQueue()",
            "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender:boolean appendToBuffer(org.apache.activemq.store.kahadb.disk.journal.Journal$WriteCommand,org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream)",
            "org.apache.activemq.store.kahadb.MessageDatabase$LastAckMarshaller:void writePayload(org.apache.activemq.store.kahadb.MessageDatabase$LastAck,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.page.Page:void write(java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void writeUTF(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void write(java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.util.StringMarshaller:void writePayload(java.lang.String,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase$MessageKeysMarshaller:void writePayload(org.apache.activemq.store.kahadb.TempMessageDatabase$MessageRecord,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageKeysMarshaller:void writePayload(org.apache.activemq.store.kahadb.MessageDatabase$MessageKeys,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void writeLong(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$Metadata:void write(java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller:void writePayload(org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender:void initBuffer(org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestinationMarshaller:void writePayload(org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.util.SequenceSet$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.util.SequenceSet,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void writeDouble(double)",
            "org.apache.activemq.store.kahadb.disk.page.Page:void write(java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void write(java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex$Metadata:void write(java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.journal.DataFileAppender:void processQueue()",
            "org.apache.activemq.store.kahadb.disk.util.LongMarshaller:void writePayload(java.lang.Long,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$MetaData:void write(java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.index.ListNode$NodeMarshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.ListNode,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$MetaData:void write(java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.MessageDatabase$LastAckMarshaller:void writePayload(org.apache.activemq.store.kahadb.MessageDatabase$LastAck,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender:void processQueue()",
            "org.apache.activemq.store.kahadb.plist.PListImpl:void write(java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void writeShort(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void writeUTF(java.lang.String)",
            "org.apache.activemq.store.kahadb.disk.index.ListNode$NodeMarshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.ListNode,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.journal.DataFileAppender:void processQueue()",
            "org.apache.activemq.store.kahadb.TempMessageDatabase$ByteSequenceMarshaller:void writePayload(org.apache.activemq.util.ByteSequence,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender:boolean appendToBuffer(org.apache.activemq.store.kahadb.disk.journal.Journal$WriteCommand,org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void skip(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.journal.DataFileAppender:void processQueue()",
            "org.apache.activemq.store.kahadb.disk.page.Transaction:java.io.OutputStream openOutputStream(org.apache.activemq.store.kahadb.disk.page.Page,boolean)",
            "org.apache.activemq.store.kahadb.disk.page.Transaction$1:void onWrite()",
            "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender:void processQueue()"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode$BTreeIterator:void findNextPage()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$BTreeIterator:java.util.Map$Entry next()",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$BTreeIterator:boolean hasNext()"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:org.apache.activemq.store.kahadb.disk.index.BTreeNode getChild(org.apache.activemq.store.kahadb.disk.page.Transaction,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.util.Map$Entry getFirst(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:int getMaxLeafDepth(org.apache.activemq.store.kahadb.disk.page.Transaction,int)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.util.Map$Entry getLast(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void visit(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.BTreeVisitor)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void printStructure(org.apache.activemq.store.kahadb.disk.page.Transaction,java.io.PrintWriter,java.lang.String)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:org.apache.activemq.store.kahadb.disk.index.BTreeNode getRightLeaf(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:org.apache.activemq.store.kahadb.disk.index.BTreeNode getFirstLeafNode(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:org.apache.activemq.store.kahadb.disk.index.BTreeNode getLeafNode(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:org.apache.activemq.store.kahadb.disk.index.BTreeNode getLeftPeer(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.BTreeNode)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:org.apache.activemq.store.kahadb.disk.index.BTreeNode getLeftLeaf(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:int getMinLeafDepth(org.apache.activemq.store.kahadb.disk.page.Transaction,int)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:org.apache.activemq.store.kahadb.disk.index.BTreeNode getRoot(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:void printStructure(org.apache.activemq.store.kahadb.disk.page.Transaction,java.io.OutputStream)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.util.Map$Entry getLast(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:int getMaxLeafDepth(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:int getMinLeafDepth(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.lang.Object get(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:void visit(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.BTreeVisitor)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.util.Map$Entry getFirst(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:void printStructure(org.apache.activemq.store.kahadb.disk.page.Transaction,java.io.PrintWriter)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:boolean containsKey(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:boolean isEmpty(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction$3:void remove()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode$ListIterator:void remove()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListImpl$PListIteratorImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.plist.PListImpl$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverNextMessages(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,long,long,int,boolean,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$17:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:void addSubscription(org.apache.activemq.command.SubscriptionInfo,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$2:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:void replayRemoveMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doPageInForDispatch(boolean,boolean)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$1:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:void replayRemoveMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doPageInForDispatch(boolean,boolean)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$2:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$1:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$2:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$1:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$1:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$2:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$2:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$1:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void removeAsyncMessage(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$1:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$2:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyMessageStore:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.BaseDestination:void dispose(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TempQueue:void dispose(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Topic:void deleteSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.util.SubscriptionKey)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.TopicMessageStore,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$2:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$8:java.util.concurrent.Future run(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void acknowledge(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.TopicMessageStore,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$2:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$5:void run(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore$5:void run(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore:void acknowledge(org.apache.activemq.store.TopicMessageStore,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.memory.MemoryTransactionStore$2:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore:void acknowledge(org.apache.activemq.store.TopicMessageStore,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.memory.MemoryTransactionStore$2:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$1:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$1:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$4:java.util.concurrent.Future run(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.ProxyMessageStore:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$4:java.util.concurrent.Future run(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyMessageStore:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$5:java.util.concurrent.Future run(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$5:java.util.concurrent.Future run(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyTopicMessageStore:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.ProxyMessageStore:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.AbstractMessageStore:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)",
            "org.apache.activemq.broker.region.Topic:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.ProxyMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.AbstractMessageStore:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)",
            "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyMessageStore:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$2:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$2:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$2:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$1:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$1:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$2:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$2:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$1:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$2:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$1:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$1:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$1:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$2:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$2:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$1:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$2:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:void replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$1:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$2:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$1:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:void replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$1:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$2:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$2:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:void doBrowse(java.util.List,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void expireMessages()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message[] browse()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:boolean iterate()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()",
            "org.apache.activemq.broker.region.Queue:void wakeup()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void purge()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TempQueue:void dispose(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.broker.jmx.QueueView:void purge()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void doPageIn(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(org.apache.activemq.broker.region.MessageReferenceFilter,int)",
            "org.apache.activemq.broker.region.Queue:int copyMatchingMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.region.Queue:int retryMessages(org.apache.activemq.broker.ConnectionContext,int)",
            "org.apache.activemq.broker.region.Queue:void start()"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex:int sizeOfBin(org.apache.activemq.store.kahadb.disk.page.Transaction,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex:org.apache.activemq.store.kahadb.disk.index.HashBin getBin(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:boolean containsKey(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:java.lang.Object get(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode:void store(org.apache.activemq.store.kahadb.disk.page.Transaction,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListNode:void split(org.apache.activemq.store.kahadb.disk.page.Transaction,boolean)",
            "org.apache.activemq.store.kahadb.disk.index.ListNode:java.lang.Object addFirst(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.ListNode:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.ListNode:void storeUpdate(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void access$200(org.apache.activemq.store.kahadb.TempMessageDatabase,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.plist.PListImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction:void store(org.apache.activemq.store.kahadb.disk.page.Page,org.apache.activemq.store.kahadb.disk.util.Marshaller,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:void unload(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void checkpointUpdate(org.apache.activemq.store.kahadb.disk.page.Transaction,boolean)",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:void store(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.HashBin)",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:void storeNode(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.ListNode,boolean)",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:void resize(org.apache.activemq.store.kahadb.disk.page.Transaction,int)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:void storeNode(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.BTreeNode,boolean)",
            "org.apache.activemq.store.kahadb.MessageDatabase$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$13:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination getStoredDestination(org.apache.activemq.store.kahadb.data.KahaDestination,org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$6:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$2:org.apache.activemq.command.SubscriptionInfo execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination getExistingStoredDestination(org.apache.activemq.store.kahadb.data.KahaDestination,org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$3:java.lang.Integer execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$6:boolean isEmptyTopic(java.util.Map$Entry,org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$2:java.lang.Boolean execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$1:java.lang.Integer execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void upadateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaAddMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$5:org.apache.activemq.store.kahadb.disk.journal.Location execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$6:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination access$100(org.apache.activemq.store.kahadb.MessageDatabase,org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode$ListNodeIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode$ListIterator:boolean hasNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListImpl$PListIteratorImpl:boolean hasNext()",
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.plist.PListImpl$9:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object get(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:boolean containsKey(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.ListNode$ListIterator:void moveToRequestedStart(long)",
            "org.apache.activemq.store.kahadb.plist.PListImpl$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void addAckLocationForRetroactiveSub(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.util.Map$Entry getFirst(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListImpl$7:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:boolean isEmpty(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void removeAckLocationsForSub(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object addFirst(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListImpl$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.plist.PListImpl$9:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object get(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:boolean containsKey(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.plist.PListImpl$PListIteratorImpl:void <init>(org.apache.activemq.store.kahadb.plist.PListImpl)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void addAckLocationForRetroactiveSub(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListImpl$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.plist.PListImpl$6:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.util.Iterator listNodeIterator(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object add(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void addAckLocation(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.Long,java.lang.String)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.plist.PListImpl$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void addAckLocationForNewMessage(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.Long)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.util.Map$Entry getLast(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListImpl$8:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction$3:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.PageFile:void load()"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.PageFile:void load()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void doStart()",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void loadPageFile()",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl:void intialize()",
            "org.apache.activemq.store.kahadb.MessageDatabase:void loadPageFile()"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination getStoredDestination(org.apache.activemq.store.kahadb.data.KahaDestination,org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$1:org.apache.activemq.util.ByteSequence execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$6:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$2:java.lang.Integer execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void upadateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaAddMessageCommand,org.apache.activemq.util.ByteSequence)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$2:org.apache.activemq.command.SubscriptionInfo execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$5:java.lang.Long execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$3:java.lang.Integer execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$MetaData:void loadScheduler(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$Metadata:void write(java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$MetadataMarshaller:void writePayload(org.apache.activemq.store.kahadb.MessageDatabase$Metadata,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender:void initBuffer(org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender:void access$000(org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender,org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void writeFloat(float)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.util.SequenceSet$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.util.SequenceSet,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.util.SequenceSet$Marshaller:void writePayload(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.page.PageFile:void storeFreeList()"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$ValueMarshaller:void writePayload(java.util.List,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$ValueMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.HashBin$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.HashBin,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.HashBin$Marshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Page:void write(java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.PageFile:org.apache.activemq.store.kahadb.disk.page.Page allocate(int)",
            "org.apache.activemq.store.kahadb.disk.page.Transaction$1:void onWrite()",
            "org.apache.activemq.store.kahadb.disk.page.Transaction$1:void close()",
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void free(org.apache.activemq.store.kahadb.disk.page.Page)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$HashSetStringMarshaller:void writePayload(java.util.HashSet,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$HashSetStringMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex$Metadata:void write(java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.HashIndex$Metadata$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.HashIndex$Metadata,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.journal.DataFileAppender:void processQueue()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.journal.DataFileAppender$1:void run()"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase$ByteSequenceMarshaller:void writePayload(org.apache.activemq.util.ByteSequence,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase$ByteSequenceMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase$MessageKeysMarshaller:void writePayload(org.apache.activemq.store.kahadb.TempMessageDatabase$MessageRecord,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.util.LocationMarshaller:void writePayload(org.apache.activemq.store.kahadb.disk.journal.Location,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$Metadata:void write(java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.util.LocationMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageKeysMarshaller:void writePayload(org.apache.activemq.store.kahadb.MessageDatabase$MessageKeys,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.util.IntegerMarshaller:void writePayload(java.lang.Integer,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.util.IntegerMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender:boolean appendToBuffer(org.apache.activemq.store.kahadb.disk.journal.Journal$WriteCommand,org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender:boolean access$100(org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender,org.apache.activemq.store.kahadb.disk.journal.Journal$WriteCommand,org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender:void processQueue()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.journal.DataFileAppender$1:void run()"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller:void writePayload(org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestinationMarshaller:void writePayload(org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestinationMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$LastAckMarshaller:void writePayload(org.apache.activemq.store.kahadb.MessageDatabase$LastAck,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$LastAckMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void write(java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$JobSchedulerMarshaller:void writePayload(org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.util.StringMarshaller:void writePayload(java.lang.String,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.util.StringMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase$MessageKeysMarshaller:void writePayload(org.apache.activemq.store.kahadb.TempMessageDatabase$MessageRecord,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase$MessageKeysMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageKeysMarshaller:void writePayload(org.apache.activemq.store.kahadb.MessageDatabase$MessageKeys,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageKeysMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream:void writeDouble(double)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.util.LongMarshaller:void writePayload(java.lang.Long,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.util.LongMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl$MetaData:void write(java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$MetaDataMarshaller:void writePayload(org.apache.activemq.store.kahadb.plist.PListStoreImpl$MetaData,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode$NodeMarshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.ListNode,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListNode$NodeMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$MetaData:void write(java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$MetaDataMarshaller:void writePayload(org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$MetaData,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl:void write(java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$PListMarshaller:void writePayload(org.apache.activemq.store.kahadb.plist.PListImpl,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction:java.io.OutputStream openOutputStream(org.apache.activemq.store.kahadb.disk.page.Page,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void store(org.apache.activemq.store.kahadb.disk.page.Page,org.apache.activemq.store.kahadb.disk.util.Marshaller,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void remove(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode$BTreeIterator:java.util.Map$Entry next()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$BTreeIterator:java.lang.Object next()"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode$BTreeIterator:boolean hasNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempKahaDBStore$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$MetaData:void loadLists(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Map)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void destroy(org.apache.activemq.store.kahadb.disk.page.Transaction,long,long)",
            "org.apache.activemq.store.kahadb.MessageDatabase$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$MetaData:void loadScheduler(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Map)",
            "org.apache.activemq.store.kahadb.KahaDBStore$6:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$11:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$2:java.lang.Integer execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$10:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void removeAckByteSequence(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination,java.lang.String,java.lang.Long)",
            "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$1:java.lang.Integer execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void destroy(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$3:java.lang.Integer execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex$MessageOrderIterator:boolean hasNext()"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.util.Map$Entry getFirst(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.util.Map$Entry getFirst(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:int getMaxLeafDepth(org.apache.activemq.store.kahadb.disk.page.Transaction,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:int getMaxLeafDepth(org.apache.activemq.store.kahadb.disk.page.Transaction,int)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:int getMaxLeafDepth(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.util.Map$Entry getLast(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.util.Map$Entry getLast(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void visit(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.BTreeVisitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:void visit(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.BTreeVisitor)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void visit(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.BTreeVisitor)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void printStructure(org.apache.activemq.store.kahadb.disk.page.Transaction,java.io.PrintWriter,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void printStructure(org.apache.activemq.store.kahadb.disk.page.Transaction,java.io.PrintWriter,java.lang.String)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:void printStructure(org.apache.activemq.store.kahadb.disk.page.Transaction,java.io.OutputStream)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:void printStructure(org.apache.activemq.store.kahadb.disk.page.Transaction,java.io.PrintWriter)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:org.apache.activemq.store.kahadb.disk.index.BTreeNode getRightLeaf(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:org.apache.activemq.store.kahadb.disk.index.BTreeNode getFirstLeafNode(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:org.apache.activemq.store.kahadb.disk.index.BTreeNode getLeafNode(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:boolean contains(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.lang.Object get(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:org.apache.activemq.store.kahadb.disk.index.BTreeNode getLeftPeer(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.BTreeNode)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:org.apache.activemq.store.kahadb.disk.index.BTreeNode getLeftLeaf(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:int getMinLeafDepth(org.apache.activemq.store.kahadb.disk.page.Transaction,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:int getMinLeafDepth(org.apache.activemq.store.kahadb.disk.page.Transaction,int)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:int getMinLeafDepth(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:void printStructure(org.apache.activemq.store.kahadb.disk.page.Transaction,java.io.OutputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.util.Map$Entry getLast(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase:org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void configureLast(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:int getMaxLeafDepth(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:int getMinLeafDepth(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void destroy(org.apache.activemq.store.kahadb.disk.page.Transaction,long,long)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void decrementJournalCount(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:java.util.List removeFromIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,long,java.util.List)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void removeAckLocation(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String,java.lang.Long)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void removeAckByteSequence(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination,java.lang.String,java.lang.Long)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:org.apache.activemq.store.kahadb.MessageDatabase$MessageKeys remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Long)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:org.apache.activemq.store.kahadb.scheduler.JobLocation removeFromIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,long,java.lang.String)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void removeAckLocationsForSub(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void remove(org.apache.activemq.store.kahadb.disk.page.Transaction,long)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void destroy(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void upadateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaAddMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void storeJob(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.scheduler.JobLocation,long)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveDestinationCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.lang.Object get(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:int recoverRolledBackAcks(org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,org.apache.activemq.store.kahadb.disk.page.Transaction,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$1:org.apache.activemq.util.ByteSequence execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:org.apache.activemq.store.kahadb.MessageDatabase$MessageKeys get(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Long)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$2:org.apache.activemq.command.SubscriptionInfo execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void incrementJournalCount(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void decrementJournalCount(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.KahaDBStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$LastAck getLastAck(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String)",
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$2:org.apache.activemq.command.SubscriptionInfo execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$5:java.lang.Long execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$3:java.lang.Integer execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand)",
            "org.apache.activemq.store.kahadb.KahaDBStore$5:org.apache.activemq.store.kahadb.disk.journal.Location execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$6:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:void visit(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.BTreeVisitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempKahaDBStore$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$MetaData:void loadLists(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Map)",
            "org.apache.activemq.store.kahadb.MessageDatabase$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$MetaData:void loadScheduler(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Map)",
            "org.apache.activemq.store.kahadb.KahaDBStore$6:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$2:java.lang.Integer execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$10:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void removeAckByteSequence(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination,java.lang.String,java.lang.Long)",
            "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$1:java.lang.Integer execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void destroy(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.util.Map$Entry getFirst(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:java.util.Map$Entry getNextToSchedule()",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$9:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:long getNextScheduleTime()"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void incrementJournalCount(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void decrementJournalCount(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:java.util.List removeFromIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,long,java.util.List)",
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void upadateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaAddMessageCommand,org.apache.activemq.util.ByteSequence)",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:org.apache.activemq.store.kahadb.scheduler.JobLocation removeFromIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,long,java.lang.String)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:org.apache.activemq.store.kahadb.MessageDatabase$MessageKeys put(org.apache.activemq.store.kahadb.disk.page.Transaction,int,java.lang.Long,org.apache.activemq.store.kahadb.MessageDatabase$MessageKeys)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void upadateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaAddMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void storeJob(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.scheduler.JobLocation,long)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:void printStructure(org.apache.activemq.store.kahadb.disk.page.Transaction,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:boolean containsKey(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void setBatch(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Long)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void getDeleteList(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.ArrayList,java.lang.Long)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void storeJob(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.scheduler.JobLocation,long)",
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination getExistingStoredDestination(org.apache.activemq.store.kahadb.data.KahaDestination,org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex$MessageOrderIterator:void <init>(org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderCursor)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void destroy(org.apache.activemq.store.kahadb.disk.page.Transaction,long,long)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$11:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void getDeleteList(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.ArrayList,org.apache.activemq.store.kahadb.disk.index.BTreeIndex,java.lang.Long)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$3:java.lang.Integer execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:boolean isEmpty(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.KahaDBStore$6:boolean isEmptyTopic(java.util.Map$Entry,org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$2:java.lang.Boolean execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void upadateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaAddMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl$PListIteratorImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void removeAckLocation(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String,java.lang.Long)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.plist.PListImpl$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void removeAckLocationsForSub(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:void replayRemoveMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void recover()"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.TransactionTemplate:void run(org.apache.activemq.util.Callback)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void duplicateFromStore(org.apache.activemq.command.Message,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Queue:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.QueueMessageReference,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$2:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$1:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$1:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$2:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TempQueue:void dispose(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBTransactionStore$2:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$2:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$2:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalTopicMessageStore$2:void execute()",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void replayAcknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.broker.region.Topic:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.ProxyMessageStore:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.journal.JournalMessageStore:void replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void recover()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void expireMessages()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void access$100(org.apache.activemq.broker.region.Queue)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message[] browse()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void wakeup()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue$8:void afterCommit()",
            "org.apache.activemq.broker.region.Queue$8:void afterRollback()",
            "org.apache.activemq.broker.region.Queue:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,long)",
            "org.apache.activemq.broker.region.Queue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Queue:void messageSent(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:void purge()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(org.apache.activemq.broker.region.MessageReferenceFilter,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:boolean removeMessage(java.lang.String)",
            "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(java.lang.String,int)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex:boolean containsKey(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex:java.lang.Object get(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode:java.lang.Object addFirst(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object addFirst(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object add(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode:void storeUpdate(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex:void unload(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex:void store(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.HashBin)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:void resize(org.apache.activemq.store.kahadb.disk.page.Transaction,int)",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:void clearBinAtPage(org.apache.activemq.store.kahadb.disk.page.Transaction,long)",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:void storeNode(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.ListNode,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListNode:void store(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.ListNode:void store(org.apache.activemq.store.kahadb.disk.page.Transaction,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:void storeNode(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.BTreeNode,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void split(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void promoteValue(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,long)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand,org.apache.activemq.store.kahadb.disk.journal.Location)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$14:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$6:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$12:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase$RemoveOpperation:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$2:org.apache.activemq.command.SubscriptionInfo execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$2:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination getExistingStoredDestination(org.apache.activemq.store.kahadb.data.KahaDestination,org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$3:java.lang.Integer execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$3:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$6:boolean isEmptyTopic(java.util.Map$Entry,org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$6:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$2:java.lang.Boolean execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$2:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$1:java.lang.Integer execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$1:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void upadateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaAddMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$AddOpperation:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase$11:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$5:org.apache.activemq.store.kahadb.disk.journal.Location execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$5:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$6:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl$PListIteratorImpl:boolean hasNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl$9:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object get(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void removeAckLocation(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String,java.lang.Long)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void addAckLocation(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.Long,java.lang.String)",
            "org.apache.activemq.store.kahadb.MessageDatabase:long getStoredMessageCount(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void addAckLocationForNewMessage(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.Long)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:boolean containsKey(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void removeAckLocation(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String,java.lang.Long)",
            "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void addAckLocation(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.Long,java.lang.String)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void addAckLocationForRetroactiveSub(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void addAckLocationForNewMessage(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.Long)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode$ListIterator:void moveToRequestedStart(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListNode$ListIterator:void <init>(org.apache.activemq.store.kahadb.disk.index.ListNode,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.ListNode,long)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void addAckLocationForRetroactiveSub(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl$7:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void removeAckLocationsForSub(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl$PListIteratorImpl:void <init>(org.apache.activemq.store.kahadb.plist.PListImpl)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListImpl:org.apache.activemq.store.PList$PListIterator iterator()"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl$6:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void addAckLocation(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.Long,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void addAckLocationForNewMessage(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.Long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void upadateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaAddMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl$8:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$1:org.apache.activemq.util.ByteSequence execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$1:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$6:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$2:java.lang.Integer execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$2:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void upadateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaAddMessageCommand,org.apache.activemq.util.ByteSequence)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void access$000(org.apache.activemq.store.kahadb.TempMessageDatabase,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaAddMessageCommand,org.apache.activemq.util.ByteSequence)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$2:org.apache.activemq.command.SubscriptionInfo execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$2:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$5:java.lang.Long execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$5:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$3:java.lang.Integer execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$3:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void access$100(org.apache.activemq.store.kahadb.TempMessageDatabase,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void access$300(org.apache.activemq.store.kahadb.TempMessageDatabase,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MetadataMarshaller:void writePayload(org.apache.activemq.store.kahadb.MessageDatabase$Metadata,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$MetadataMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender:void access$000(org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender,org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender$WriteBatch:void <init>(org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender,org.apache.activemq.store.kahadb.disk.journal.DataFile,int,org.apache.activemq.store.kahadb.disk.journal.Journal$WriteCommand)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.util.SequenceSet$Marshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListNode$NodeMarshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.ListNode,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.PageFile:void storeFreeList()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.PageFile:void unload()"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$ValueMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.HashBin$Marshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void store(org.apache.activemq.store.kahadb.disk.page.Page,org.apache.activemq.store.kahadb.disk.util.Marshaller,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.PageFile:org.apache.activemq.store.kahadb.disk.page.Page allocate(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:org.apache.activemq.store.kahadb.disk.page.Page allocate(int)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$HashSetStringMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex$Metadata$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.HashIndex$Metadata,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.HashIndex$Metadata$Marshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.journal.DataFileAppender$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase$ByteSequenceMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.util.LocationMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.index.ListNode$NodeMarshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.ListNode,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.util.IntegerMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender:boolean access$100(org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender,org.apache.activemq.store.kahadb.disk.journal.Journal$WriteCommand,org.apache.activemq.store.kahadb.disk.util.DataByteArrayOutputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender$WriteBatch:void append(org.apache.activemq.store.kahadb.disk.journal.Journal$WriteCommand)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void store(org.apache.activemq.store.kahadb.disk.page.Page,org.apache.activemq.store.kahadb.disk.util.Marshaller,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestinationMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$LastAckMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$JobSchedulerMarshaller:void writePayload(org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$JobSchedulerMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.util.StringMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)",
            "org.apache.activemq.store.kahadb.disk.index.ListNode$NodeMarshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.ListNode,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase$MessageKeysMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageKeysMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.util.LongMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl$MetaDataMarshaller:void writePayload(org.apache.activemq.store.kahadb.plist.PListStoreImpl$MetaData,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$MetaDataMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode$NodeMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void store(org.apache.activemq.store.kahadb.disk.page.Page,org.apache.activemq.store.kahadb.disk.util.Marshaller,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$MetaDataMarshaller:void writePayload(org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$MetaData,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$MetaDataMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl$PListMarshaller:void writePayload(org.apache.activemq.store.kahadb.plist.PListImpl,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$PListMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode$BTreeIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempKahaDBStore$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$MetaData:void loadLists(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Map)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void destroy(org.apache.activemq.store.kahadb.disk.page.Transaction,long,long)",
            "org.apache.activemq.store.kahadb.MessageDatabase$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex$MessageOrderIterator:java.util.Map$Entry next()",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$11:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$2:java.lang.Integer execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void getDeleteList(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.ArrayList,org.apache.activemq.store.kahadb.disk.index.BTreeIndex,java.lang.Long)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$10:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$3:java.lang.Integer execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$MetaData:void loadScheduler(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.Map)",
            "org.apache.activemq.store.kahadb.KahaDBStore$6:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void removeAckByteSequence(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination,java.lang.String,java.lang.Long)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$1:java.lang.Integer execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void destroy(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void destroy(org.apache.activemq.store.kahadb.disk.page.Transaction,long,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$13:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$6:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$11:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$10:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void removeAckByteSequence(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination,java.lang.String,java.lang.Long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$8:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void destroy(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$12:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex$MessageOrderIterator:boolean hasNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:boolean contains(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:boolean contains(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:boolean containsKey(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.lang.Object get(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:java.lang.Object get(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.lang.Object get(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void configureLast(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void decrementJournalCount(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.journal.Location)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void remove(org.apache.activemq.store.kahadb.disk.page.Transaction,long,java.util.List)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void destroy(org.apache.activemq.store.kahadb.disk.page.Transaction,long,long)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void remove(org.apache.activemq.store.kahadb.disk.page.Transaction,long)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void destroy(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void remove(org.apache.activemq.store.kahadb.disk.page.Transaction,long,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:java.util.List removeFromIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,long,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void remove(org.apache.activemq.store.kahadb.disk.page.Transaction,long,java.util.List)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:void removeAckLocation(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String,java.lang.Long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:org.apache.activemq.store.kahadb.MessageDatabase$MessageKeys remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void removeAckLocation(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String,java.lang.Long)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void removeAckLocationsForSub(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:org.apache.activemq.store.kahadb.scheduler.JobLocation removeFromIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,long,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void remove(org.apache.activemq.store.kahadb.disk.page.Transaction,long,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void remove(org.apache.activemq.store.kahadb.disk.page.Transaction,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void storeJob(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.scheduler.JobLocation,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void schedule(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,org.apache.activemq.util.ByteSequence,java.lang.String,long,long,int)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$14:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:org.apache.activemq.store.kahadb.MessageDatabase$MessageKeys get(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:int recoverRolledBackAcks(org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,org.apache.activemq.store.kahadb.disk.page.Transaction,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void updateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.KahaDBStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$5:org.apache.activemq.store.kahadb.disk.journal.Location execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void incrementJournalCount(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.journal.Location)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void schedule(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,org.apache.activemq.util.ByteSequence,java.lang.String,long,long,int)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$LastAck getLastAck(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$3:java.lang.Integer execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:java.util.Map$Entry getNextToSchedule()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void mainLoop()"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$9:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:long getNextScheduleTime()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:org.apache.activemq.store.kahadb.MessageDatabase$MessageKeys put(org.apache.activemq.store.kahadb.disk.page.Transaction,int,java.lang.Long,org.apache.activemq.store.kahadb.MessageDatabase$MessageKeys)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void upadateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaAddMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.store.kahadb.KahaDBStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void setBatch(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void setBatch(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$LastAck)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$6:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void getDeleteList(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.ArrayList,java.lang.Long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void removeAckLocation(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String,java.lang.Long)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void removeAckLocationsForSub(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex$MessageOrderIterator:void <init>(org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderCursor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderCursor)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void getDeleteList(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.ArrayList,org.apache.activemq.store.kahadb.disk.index.BTreeIndex,java.lang.Long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void getDeleteList(org.apache.activemq.store.kahadb.disk.page.Transaction,java.util.ArrayList,java.lang.Long)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter:void recover()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void start()"
        ]
    },
    "org.apache.activemq.util.TransactionTemplate:void run(org.apache.activemq.util.Callback)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:org.apache.activeio.journal.RecordLocation checkpoint(org.apache.activemq.util.Callback)"
        ]
    },
    "org.apache.activemq.broker.region.BaseDestination:void duplicateFromStore(org.apache.activemq.command.Message,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void dealWithDuplicates()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.QueueMessageReference,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.QueueMessageReference)"
        ]
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore$2:void execute()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()"
        ]
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:void replayAcknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void recover()"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void duplicateFromStore(org.apache.activemq.command.Message,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Topic:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void access$100(org.apache.activemq.broker.region.Queue)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue$2:void run()"
        ]
    },
    "org.apache.activemq.broker.region.Queue$8:void afterCommit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue$8:void afterRollback()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:boolean removeMessage(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:boolean removeMessage(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(java.lang.String,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(java.lang.String)",
            "org.apache.activemq.broker.jmx.QueueView:int removeMatchingMessages(java.lang.String,int)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode:void store(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListNode:void access$500(org.apache.activemq.store.kahadb.disk.index.ListNode,org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void split(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void promoteValue(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,long)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void promoteValue(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void split(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$14:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$12:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$RemoveOpperation:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$2:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction$CallableClosure)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$3:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction$CallableClosure)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$2:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction$CallableClosure)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$1:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction$CallableClosure)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$AddOpperation:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$11:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$5:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction$CallableClosure)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:long getStoredMessageCount(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$3:java.lang.Integer execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode$ListIterator:void <init>(org.apache.activemq.store.kahadb.disk.index.ListNode,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.ListNode,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListNode$ListIterator:void <init>(org.apache.activemq.store.kahadb.disk.index.ListNode,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.ListNode,long,org.apache.activemq.store.kahadb.disk.index.ListNode$1)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListImpl:org.apache.activemq.store.PList$PListIterator iterator()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$1:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction$CallableClosure)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$2:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction$CallableClosure)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void access$000(org.apache.activemq.store.kahadb.TempMessageDatabase,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaAddMessageCommand,org.apache.activemq.util.ByteSequence)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase$AddOpperation:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$2:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction$CallableClosure)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore$5:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction$CallableClosure)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore$3:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction$CallableClosure)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void access$100(org.apache.activemq.store.kahadb.TempMessageDatabase,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase$RemoveOpperation:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void access$300(org.apache.activemq.store.kahadb.TempMessageDatabase,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MetadataMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void store(org.apache.activemq.store.kahadb.disk.page.Page,org.apache.activemq.store.kahadb.disk.util.Marshaller,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender$WriteBatch:void <init>(org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender,org.apache.activemq.store.kahadb.disk.journal.DataFile,int,org.apache.activemq.store.kahadb.disk.journal.Journal$WriteCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender:org.apache.activemq.store.kahadb.disk.journal.DataFileAppender$WriteBatch newWriteBatch(org.apache.activemq.store.kahadb.disk.journal.Journal$WriteCommand,org.apache.activemq.store.kahadb.disk.journal.DataFile)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.PageFile:void unload()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void load()",
            "org.apache.activemq.store.kahadb.MessageDatabase:void open()",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void close()",
            "org.apache.activemq.store.kahadb.MessageDatabase:void close()",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void doStop(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction:org.apache.activemq.store.kahadb.disk.page.Page allocate(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:void load(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.page.Transaction:org.apache.activemq.store.kahadb.disk.page.Page allocate()",
            "org.apache.activemq.store.kahadb.disk.index.HashIndex:void resize(org.apache.activemq.store.kahadb.disk.page.Transaction,int)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.HashIndex$Metadata$Marshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void store(org.apache.activemq.store.kahadb.disk.page.Page,org.apache.activemq.store.kahadb.disk.util.Marshaller,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender$WriteBatch:void append(org.apache.activemq.store.kahadb.disk.journal.Journal$WriteCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.journal.DataFileAppender:org.apache.activemq.store.kahadb.disk.journal.DataFileAppender$WriteBatch enqueue(org.apache.activemq.store.kahadb.disk.journal.Journal$WriteCommand)",
            "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender$WriteBatch:void <init>(org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender,org.apache.activemq.store.kahadb.disk.journal.DataFile,int,org.apache.activemq.store.kahadb.disk.journal.Journal$WriteCommand)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$JobSchedulerMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl$MetaDataMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void store(org.apache.activemq.store.kahadb.disk.page.Page,org.apache.activemq.store.kahadb.disk.util.Marshaller,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$MetaDataMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void store(org.apache.activemq.store.kahadb.disk.page.Page,org.apache.activemq.store.kahadb.disk.util.Marshaller,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl$PListMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode$Marshaller:void writePayload(org.apache.activemq.store.kahadb.disk.index.BTreeNode,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex$MessageOrderIterator:java.util.Map$Entry next()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex$MessageOrderIterator:java.lang.Object next()"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$13:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$8:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$12:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void remove(org.apache.activemq.store.kahadb.disk.page.Transaction,long,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void access$000(org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl,org.apache.activemq.store.kahadb.disk.page.Transaction,long,java.util.List)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void remove(org.apache.activemq.store.kahadb.disk.page.Transaction,long,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$6:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void schedule(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,org.apache.activemq.util.ByteSequence,java.lang.String,long,long,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$14:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void setBatch(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$LastAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderCursor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:org.apache.activeio.journal.RecordLocation checkpoint(org.apache.activemq.util.Callback)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:org.apache.activeio.journal.RecordLocation checkpoint()",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:org.apache.activeio.journal.RecordLocation checkpoint()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void dealWithDuplicates()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void doFillBatch()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.QueueMessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.Queue:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.QueueMessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void doBrowse(java.util.List,int)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void discardExpiredMessage(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchPending()"
        ]
    },
    "org.apache.activemq.broker.region.Queue$2:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.QueueView:boolean removeMessage(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:int removeMatchingMessages(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:int removeMatchingMessages(java.lang.String,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode:void access$500(org.apache.activemq.store.kahadb.disk.index.ListNode,org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListNode$ListIterator:void remove()"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction:java.lang.Object execute(org.apache.activemq.store.kahadb.disk.page.Transaction$CallableClosure)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:boolean isEmpty()",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore:int getMessageCount()",
            "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore:void setBatch(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadb.KahaDBStore:org.apache.activemq.store.kahadb.disk.journal.Location findMessageLocation(java.lang.String,org.apache.activemq.store.kahadb.data.KahaDestination)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:int getMessageCount()",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode$ListIterator:void <init>(org.apache.activemq.store.kahadb.disk.index.ListNode,org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.ListNode,long,org.apache.activemq.store.kahadb.disk.index.ListNode$1)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListNode:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction,long)",
            "org.apache.activemq.store.kahadb.disk.index.ListNode:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase$AddOpperation:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase$RemoveOpperation:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.journal.CallerBufferingDataFileAppender:org.apache.activemq.store.kahadb.disk.journal.DataFileAppender$WriteBatch newWriteBatch(org.apache.activemq.store.kahadb.disk.journal.Journal$WriteCommand,org.apache.activemq.store.kahadb.disk.journal.DataFile)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.journal.DataFileAppender:org.apache.activemq.store.kahadb.disk.journal.DataFileAppender$WriteBatch enqueue(org.apache.activemq.store.kahadb.disk.journal.Journal$WriteCommand)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void unload()"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void stop()"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.page.Transaction:org.apache.activemq.store.kahadb.disk.page.Page allocate()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$MetaData:void createIndexes(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:org.apache.activemq.store.kahadb.disk.index.BTreeNode createNode(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.BTreeNode)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void createIndexes(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.TempMessageDatabase:org.apache.activemq.store.kahadb.TempMessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:org.apache.activemq.store.kahadb.disk.index.ListNode createNode(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.MessageDatabase$StoredDestinationMarshaller$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$MetaData:void createIndexes(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.page.Transaction$1:void onWrite()",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void allocate(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.journal.DataFileAppender:org.apache.activemq.store.kahadb.disk.journal.DataFileAppender$WriteBatch enqueue(org.apache.activemq.store.kahadb.disk.journal.Journal$WriteCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.journal.DataFileAppender:org.apache.activemq.store.kahadb.disk.journal.Location storeItem(org.apache.activemq.util.ByteSequence,byte,boolean)",
            "org.apache.activemq.store.kahadb.disk.journal.DataFileAppender:org.apache.activemq.store.kahadb.disk.journal.Location storeItem(org.apache.activemq.util.ByteSequence,byte,java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex$MessageOrderIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void access$000(org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl,org.apache.activemq.store.kahadb.disk.page.Transaction,long,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$7:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$6:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$2:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:org.apache.activeio.journal.RecordLocation checkpoint()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter$4:org.apache.activeio.journal.RecordLocation call()"
        ]
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:org.apache.activeio.journal.RecordLocation checkpoint()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter$5:org.apache.activeio.journal.RecordLocation call()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void discardExpiredMessage(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchPending()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.QueueMessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(org.apache.activemq.broker.region.MessageReferenceFilter,int)",
            "org.apache.activemq.broker.region.Queue:void purge()",
            "org.apache.activemq.broker.region.Queue:boolean moveMessageTo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.QueueMessageReference,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void discardExpiredMessage(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:boolean tryAddMessageLast(org.apache.activemq.broker.region.MessageReference,long)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void expireOldMessages()"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:int removeMatchingMessages(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:boolean isEmpty()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyMessageStore:boolean isEmpty()",
            "org.apache.activemq.store.ProxyTopicMessageStore:boolean isEmpty()"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore:int getMessageCount()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.TempKahaDBStore$KahaDBMessageStore:void setBatch(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBStore:org.apache.activemq.store.kahadb.disk.journal.Location findMessageLocation(java.lang.String,org.apache.activemq.store.kahadb.data.KahaDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore:void incrementRedeliveryAndReWrite(java.lang.String,org.apache.activemq.store.kahadb.data.KahaDestination)",
            "org.apache.activemq.store.kahadb.KahaDBStore:org.apache.activemq.store.kahadb.disk.journal.Location access$100(org.apache.activemq.store.kahadb.KahaDBStore,java.lang.String,org.apache.activemq.store.kahadb.data.KahaDestination)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:int getMessageCount()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyMessageStore:int getMessageCount()",
            "org.apache.activemq.store.ProxyTopicMessageStore:int getMessageCount()"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction,long)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.ListNode:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object put(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.util.Iterator iterator(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.kahadb.disk.index.ListIndex:java.lang.Object remove(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void unload()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.TempMessageDatabase:void stop()"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl$MetaData:void createIndexes(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.index.BTreeIndex:org.apache.activemq.store.kahadb.disk.index.BTreeNode createNode(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.disk.index.BTreeNode)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.index.BTreeNode:void split(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void createIndexes(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$1:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$MetaData:void createIndexes(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl$3:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void allocate(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination loadStoredDestination(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,boolean)",
            "org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex:void clear(org.apache.activemq.store.kahadb.disk.page.Transaction)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.journal.DataFileAppender:org.apache.activemq.store.kahadb.disk.journal.Location storeItem(org.apache.activemq.util.ByteSequence,byte,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.journal.Journal:org.apache.activemq.store.kahadb.disk.journal.Location write(org.apache.activemq.util.ByteSequence,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.journal.DataFileAppender:org.apache.activemq.store.kahadb.disk.journal.Location storeItem(org.apache.activemq.util.ByteSequence,byte,java.lang.Runnable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.journal.Journal:org.apache.activemq.store.kahadb.disk.journal.Location write(org.apache.activemq.util.ByteSequence,java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl$7:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.disk.page.Transaction:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction$Closure)"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter$4:org.apache.activeio.journal.RecordLocation call()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter$4:java.lang.Object call()"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter$5:org.apache.activeio.journal.RecordLocation call()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter$5:java.lang.Object call()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doPageInForDispatch(boolean,boolean)",
            "org.apache.activemq.broker.region.Queue$BatchMessageRecoveryListener:void processExpired()",
            "org.apache.activemq.broker.region.Queue:void doBrowse(java.util.List,int)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:boolean tryAddMessageLast(org.apache.activemq.broker.region.MessageReference,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void expireOldMessages()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void onUsageChanged(org.apache.activemq.usage.Usage,int,int)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:boolean tryAddMessageLast(org.apache.activemq.broker.region.MessageReference,long)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.store.ProxyMessageStore:boolean isEmpty()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:boolean isStoreEmpty()"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:boolean isEmpty()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:boolean isStoreEmpty()",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:boolean isStoreEmpty()"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void replayAcknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)"
        ]
    },
    "org.apache.activemq.store.kahadb.KahaDBStore:org.apache.activemq.store.kahadb.disk.journal.Location access$100(org.apache.activemq.store.kahadb.KahaDBStore,java.lang.String,org.apache.activemq.store.kahadb.data.KahaDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.ProxyMessageStore:int getMessageCount()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:int getMessageCount()",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:int getStoreSize()",
            "org.apache.activemq.broker.region.Queue:void initialize()"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:int getMessageCount()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:int getMessageCount()",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:int getStoreSize()",
            "org.apache.activemq.broker.region.Queue:void initialize()"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:int getStoreSize()"
        ]
    },
    "org.apache.activemq.store.kahadb.TempMessageDatabase:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.disk.journal.Journal:org.apache.activemq.store.kahadb.disk.journal.Location write(org.apache.activemq.util.ByteSequence,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand)",
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:org.apache.activemq.store.kahadb.disk.journal.Location write(org.apache.activemq.util.ByteSequence,boolean)",
            "org.apache.activemq.store.kahadb.KahaDBStore:void incrementRedeliveryAndReWrite(java.lang.String,org.apache.activemq.store.kahadb.data.KahaDestination)",
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand,boolean,java.lang.Runnable,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.kahadb.plist.PListStoreImpl:org.apache.activemq.store.kahadb.disk.journal.Location write(org.apache.activemq.util.ByteSequence,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadb.disk.journal.Journal:org.apache.activemq.store.kahadb.disk.journal.Location write(org.apache.activemq.util.ByteSequence,java.lang.Runnable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.disk.journal.Location checkpointSubscriptionCommand(org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand)",
            "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand,boolean,java.lang.Runnable,java.lang.Runnable,java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter$4:java.lang.Object call()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter$5:java.lang.Object call()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue$BatchMessageRecoveryListener:void processExpired()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void initialize()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void addRecoveredMessage(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void onUsageChanged(org.apache.activemq.usage.Usage,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:boolean isStoreEmpty()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:boolean isStoreEmpty()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.ProxyMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:int getMessageCount()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:int getStoreSize()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:int size()",
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void resetSize()"
        ]
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:int getStoreSize()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void resetSize()"
        ]
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:org.apache.activemq.store.kahadb.disk.journal.Location store(org.apache.activemq.store.kahadb.JournalCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void persistCompletion(org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void persistOutcome(org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$Tx,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void start()"
        ]
    },
    "org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl:org.apache.activemq.store.kahadb.disk.journal.Location write(org.apache.activemq.util.ByteSequence,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.scheduler.JobSchedulerImpl:void schedule(org.apache.activemq.store.kahadb.disk.page.Transaction,java.lang.String,org.apache.activemq.util.ByteSequence,java.lang.String,long,long,int)"
        ]
    },
    "org.apache.activemq.store.kahadb.plist.PListStoreImpl:org.apache.activemq.store.kahadb.disk.journal.Location write(org.apache.activemq.util.ByteSequence,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.plist.PListImpl:java.lang.Object addFirst(java.lang.String,org.apache.activemq.util.ByteSequence)",
            "org.apache.activemq.store.kahadb.plist.PListImpl:java.lang.Object addLast(java.lang.String,org.apache.activemq.util.ByteSequence)"
        ]
    },
    "org.apache.activemq.store.kahadb.MessageDatabase:org.apache.activemq.store.kahadb.disk.journal.Location checkpointSubscriptionCommand(org.apache.activemq.store.kahadb.data.KahaSubscriptionCommand)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MessageDatabase:void checkpointUpdate(org.apache.activemq.store.kahadb.disk.page.Transaction,boolean)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void addRecoveredMessage(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void doAddRecoveredMessage(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:void replayRemoveMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:org.apache.activemq.command.Message loadMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:boolean recoverMessageReference(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.journal.JournalMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message loadMessage(org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.ProxyMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:void replayRemoveMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:boolean recoverMessageReference(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.journal.JournalMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message loadMessage(org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:int size()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:int size()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void gc()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void start()",
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void reset()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void reset()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void resetSize()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void start()",
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void fillBatch()",
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void rebase()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void <init>(org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.Topic,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void persistCompletion(org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void persistOutcome(org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore$Tx,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void doAddRecoveredMessage(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractSubscription:boolean addRecoveredMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:org.apache.activemq.command.Message loadMessage(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:boolean recoverMessageReference(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCMessageStore$2:boolean recoverMessageReference(java.lang.String)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message loadMessage(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.QueueMessageReference getMatchingMessage(org.apache.activemq.command.MessageDispatchNotification)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:int size()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:java.lang.String toString()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doPageInForDispatch(boolean,boolean)",
            "org.apache.activemq.broker.jmx.QueueView:int cursorSize()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void gc()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void clearPendingMessages()",
            "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:void stop()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void rebase()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void rebase()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void <init>(org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.Topic,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.AbstractSubscription:boolean addRecoveredMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.LastImageSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCMessageStore$2:boolean recoverMessageReference(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverNextMessages(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,long,long,int,boolean,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.slf4j.helpers.MessageFormatter:void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:int cursorSize()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:void destroy()",
            "org.apache.activemq.broker.region.Queue:void stop()",
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void stop()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void stop()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void stop()",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void stop()"
        ]
    },
    "org.apache.activemq.broker.region.policy.LastImageSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void recoverRetroactiveMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Topic:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.slf4j.helpers.MessageFormatter:void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.slf4j.helpers.MessageFormatter:void deeplyAppendParameter(java.lang.StringBuffer,java.lang.Object,java.util.Map)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:void destroy()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.VMPendingMessageCursor:void destroy()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void destroy()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void recoverRetroactiveMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.slf4j.helpers.MessageFormatter:void deeplyAppendParameter(java.lang.StringBuffer,java.lang.Object,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.slf4j.helpers.MessageFormatter:org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])",
            "org.slf4j.helpers.MessageFormatter:void objectArrayAppend(java.lang.StringBuffer,java.lang.Object[],java.util.Map)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.VMPendingMessageCursor:void destroy()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void stop()",
            "org.apache.activemq.broker.region.TopicSubscription:void destroy()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void destroy()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void stop()",
            "org.apache.activemq.broker.region.TopicSubscription:void destroy()"
        ]
    },
    "org.slf4j.helpers.MessageFormatter:org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.slf4j.helpers.MessageFormatter:org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object)",
            "org.slf4j.impl.Log4jLoggerAdapter:void info(java.lang.String,java.lang.Object[])",
            "org.slf4j.impl.Log4jLoggerAdapter:void debug(java.lang.String,java.lang.Object[])",
            "org.slf4j.impl.Log4jLoggerAdapter:void warn(java.lang.String,java.lang.Object[])",
            "org.slf4j.impl.Log4jLoggerAdapter:void trace(java.lang.String,java.lang.Object[])",
            "org.slf4j.helpers.MessageFormatter:org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)",
            "org.slf4j.impl.Log4jLoggerAdapter:void error(java.lang.String,java.lang.Object[])"
        ]
    },
    "org.slf4j.helpers.MessageFormatter:void objectArrayAppend(java.lang.StringBuffer,java.lang.Object[],java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.slf4j.helpers.MessageFormatter:void deeplyAppendParameter(java.lang.StringBuffer,java.lang.Object,java.util.Map)"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void destroy()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.slf4j.helpers.MessageFormatter:org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.slf4j.impl.Log4jLoggerAdapter:void error(java.lang.String,java.lang.Object)",
            "org.slf4j.impl.Log4jLoggerAdapter:void info(java.lang.String,java.lang.Object)",
            "org.slf4j.impl.Log4jLoggerAdapter:void trace(java.lang.String,java.lang.Object)",
            "org.slf4j.impl.Log4jLoggerAdapter:void warn(java.lang.String,java.lang.Object)",
            "org.slf4j.impl.Log4jLoggerAdapter:void debug(java.lang.String,java.lang.Object)"
        ]
    },
    "org.slf4j.impl.Log4jLoggerAdapter:void info(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:int recoverRolledBackAcks(org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,org.apache.activemq.store.kahadb.disk.page.Transaction,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.broker.region.TempQueue:void dispose(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.util.ThreadPoolUtils:void doShutdown(java.util.concurrent.ExecutorService,long)",
            "org.apache.activemq.usage.Usage:void start()",
            "org.apache.activemq.plugin.DiscardingDLQBrokerPlugin:org.apache.activemq.broker.Broker installPlugin(org.apache.activemq.broker.Broker)",
            "org.apache.activemq.broker.BrokerService:void doStartBroker()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalException(org.apache.activemq.command.MessageDispatch,java.lang.Throwable)",
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.Queue$BatchMessageRecoveryListener:boolean recoverMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerService:void stopGracefully(java.lang.String,java.lang.String,long,long)",
            "org.apache.activemq.broker.region.BaseDestination:void waitForSpace(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.usage.Usage,int,java.lang.String)"
        ]
    },
    "org.slf4j.impl.Log4jLoggerAdapter:void debug(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.AbstractRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.util.TimeStampingBrokerPlugin:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.util.ThreadPoolUtils:void doShutdown(java.util.concurrent.ExecutorService,long)",
            "org.apache.activemq.network.ConduitBridge:void removeDemandSubscription(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.network.LdapNetworkConnector:void objectRenamed(javax.naming.event.NamingEvent)",
            "org.apache.activemq.broker.region.Queue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.network.LdapNetworkConnector:void removeConnector(javax.naming.directory.SearchResult)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:boolean canDuplexDispatch(org.apache.activemq.command.Message)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteConsumerAdvisory(org.apache.activemq.command.DataStructure)",
            "org.apache.activemq.broker.ProducerBrokerExchange:boolean canDispatch(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.RegionBroker:void removeBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:boolean hasLowerPriority(org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void scheduledJob(java.lang.String,org.apache.activemq.util.ByteSequence)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:org.apache.activemq.network.DemandSubscription doCreateDemandSubscription(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.Queue:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,long)",
            "org.apache.activemq.network.ConduitBridge:boolean addToAlreadyInterestedConsumers(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.AbstractRegion:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)",
            "org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter:org.apache.activemq.store.PersistenceAdapter getMatchingPersistenceAdapter(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doPageInForDispatch(boolean,boolean)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void removeDemandSubscription(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.broker.region.policy.PriorityNetworkDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.Queue:void messageSent(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.RegionBroker:void addBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)"
        ]
    },
    "org.slf4j.impl.Log4jLoggerAdapter:void warn(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.network.LdapNetworkConnector:void addConnector(javax.naming.directory.SearchResult)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteException(java.lang.Throwable)",
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:boolean recoverMessage(org.apache.activemq.command.Message,boolean)",
            "org.apache.activemq.network.DiscoveryNetworkConnector:void onServiceAdd(org.apache.activemq.command.DiscoveryEvent)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void upadateIndex(org.apache.activemq.store.kahadb.disk.page.Transaction,org.apache.activemq.store.kahadb.data.KahaAddMessageCommand,org.apache.activemq.store.kahadb.disk.journal.Location)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()"
        ]
    },
    "org.slf4j.impl.Log4jLoggerAdapter:void trace(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy:void abortSubscription(java.util.Map,boolean)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.network.ConditionalNetworkBridgeFilterFactory$ConditionalNetworkBridgeFilter:boolean hasNoLocalConsumers(org.apache.activemq.command.Message,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void removeSubscription(org.apache.activemq.network.DemandSubscription)",
            "org.apache.activemq.util.ClassLoadingAwareObjectInputStream:java.lang.Class load(java.lang.String,java.lang.ClassLoader[])",
            "org.apache.activemq.broker.region.PrefetchSubscription:void onDispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.util.ThreadPoolUtils:java.util.List shutdownNow(java.util.concurrent.ExecutorService)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void collectBrokerInfos()",
            "org.apache.activemq.broker.region.policy.AbortSlowAckConsumerStrategy:void abortAllQualifiedSlowConsumers()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:boolean recoverMessage(org.apache.activemq.command.Message,boolean)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteConsumerAdvisory(org.apache.activemq.command.DataStructure)",
            "org.apache.activemq.network.ConditionalNetworkBridgeFilterFactory$ConditionalNetworkBridgeFilter:boolean matchesForwardingFilter(org.apache.activemq.command.Message,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void flushToDisk()",
            "org.apache.activemq.broker.util.RedeliveryPlugin:void scheduleRedelivery(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,long,int)",
            "org.apache.activemq.broker.region.PrefetchSubscription$3:void onFailure()"
        ]
    },
    "org.slf4j.helpers.MessageFormatter:org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.slf4j.impl.Log4jLoggerAdapter:void warn(java.lang.String,java.lang.Object,java.lang.Object)",
            "org.slf4j.impl.Log4jLoggerAdapter:void info(java.lang.String,java.lang.Object,java.lang.Object)",
            "org.slf4j.impl.Log4jLoggerAdapter:void error(java.lang.String,java.lang.Object,java.lang.Object)",
            "org.slf4j.impl.Log4jLoggerAdapter:void debug(java.lang.String,java.lang.Object,java.lang.Object)",
            "org.slf4j.impl.Log4jLoggerAdapter:void trace(java.lang.String,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.slf4j.impl.Log4jLoggerAdapter:void error(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void duplicateFromStore(org.apache.activemq.command.Message,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteException(java.lang.Throwable)",
            "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap:void applyACL(org.apache.activemq.security.AuthorizationEntry,javax.naming.directory.SearchResult,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$PermissionType)"
        ]
    },
    "org.slf4j.impl.Log4jLoggerAdapter:void error(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.LockableServiceSupport:void stopBroker()",
            "org.apache.activemq.broker.region.RegionBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBrokerInfo(org.apache.activemq.command.BrokerInfo)"
        ]
    },
    "org.slf4j.impl.Log4jLoggerAdapter:void info(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.broker.BrokerPluginSupport:void stop()",
            "org.apache.activemq.proxy.ProxyConnector:void stop()",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:org.apache.activemq.command.TransactionId[] getPreparedTransactions(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:org.apache.activemq.command.ActiveMQDestination[] getDestinations()",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.region.TopicRegion:void doCleanup()",
            "org.apache.activemq.network.NetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.ActiveMQMessageConsumer$8:void run()",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:org.apache.activemq.broker.Connection[] getClients()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.scheduler.JobSchedulerStore getJobSchedulerStore()",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void afterPropertiesSet()",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void addBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.broker.region.policy.AbortSlowAckConsumerStrategy:void updateSlowConsumersList(java.util.List)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void start()",
            "org.apache.activemq.network.ForwardingBridge:void serviceRemoteException(java.lang.Throwable)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.jmx.AbortSlowConsumerStrategyView:void abortConnection(javax.management.ObjectName)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:org.apache.activemq.command.BrokerInfo[] getPeerBrokerInfos()",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void logSend(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:java.util.Set getDurableDestinations()",
            "org.apache.activemq.network.NetworkConnector:void handleStart()",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void addSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void removeSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.proxy.ProxyConnector:void start()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.store.PListStore getTempDataStore()",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void removeBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.broker.TransportConnector:void start()",
            "org.apache.activemq.plugin.DiscardingDLQBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void stop()",
            "org.apache.activemq.network.LdapNetworkConnector:void addConnector(javax.naming.directory.SearchResult)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBrokerInfo(org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.network.LdapNetworkConnector:void removeConnector(javax.naming.directory.SearchResult)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void preProcessDispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.broker.BrokerService$8:void run()",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)",
            "org.apache.activemq.plugin.ForcePersistencyModeBrokerPlugin:org.apache.activemq.broker.Broker installPlugin(org.apache.activemq.broker.Broker)",
            "org.apache.activemq.broker.TransportConnector:void stop()",
            "org.apache.activemq.network.jms.SimpleJmsQueueConnector:javax.jms.Destination createReplyToBridge(javax.jms.Destination,javax.jms.Connection,javax.jms.Connection)",
            "org.apache.activemq.broker.BrokerPluginSupport:void start()",
            "org.apache.activemq.network.jms.JmsConnector:void start()",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy:void abortSubscription(java.util.Map,boolean)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.BrokerService:void doStartPersistenceAdapter()",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.jmx.ManagementContext$1:void run()",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.transport.ws.WSTransportServer:void doStart()",
            "org.apache.activemq.plugin.SubQueueSelectorCacheBroker:void <init>(org.apache.activemq.broker.Broker,java.io.File)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void nowMasterBroker()",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.network.ForwardingBridge:void serviceLocalException(java.lang.Throwable)",
            "org.apache.activemq.network.jms.JmsConnector$1:boolean removeEldestEntry(java.util.Map$Entry)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void postProcessDispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.network.jms.JmsConnector:void stop()",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.usage.Usage)",
            "org.apache.activemq.network.jms.JmsConnector:void handleConnectionFailure(javax.jms.Connection)",
            "org.apache.activemq.network.jms.SimpleJmsTopicConnector:javax.jms.Destination createReplyToBridge(javax.jms.Destination,javax.jms.Connection,javax.jms.Connection)",
            "org.apache.activemq.broker.jmx.AbortSlowConsumerStrategyView:void abortConsumer(javax.management.ObjectName)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void stop()",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)"
        ]
    },
    "org.slf4j.impl.Log4jLoggerAdapter:void trace(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.plugin.DiscardingDLQBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)",
            "org.apache.activemq.thread.PooledTaskRunner$1:void run()",
            "org.apache.activemq.thread.DedicatedTaskRunner$1:void run()",
            "org.apache.activemq.transport.tcp.TcpTransport:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.amqp.AmqpProtocolConverter$ConsumerContext:void doRollback()",
            "org.apache.activemq.transport.amqp.AmqpProtocolConverter$ConsumerContext:void settle(org.apache.qpid.proton.engine.Delivery,int)",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.tcp.TcpTransport$1:void run()",
            "org.apache.activemq.transport.amqp.AmqpProtocolConverter$ConsumerContext:void onDelivery(org.apache.qpid.proton.engine.Delivery)",
            "org.apache.activemq.transport.amqp.AmqpTransportFilter:void sendToAmqp(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void writeCheck()",
            "org.apache.activemq.transport.failover.FailoverTransport:void handleConnectionControl(org.apache.activemq.command.ConnectionControl)",
            "org.apache.activemq.broker.jmx.ManagementContext:javax.management.MBeanServer findTigerMBeanServer()",
            "org.apache.activemq.jms.pool.PooledConnectionFactory$1:org.apache.activemq.jms.pool.ConnectionPool makeObject(org.apache.activemq.jms.pool.ConnectionKey)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doActualDispatch(org.apache.activemq.broker.region.cursors.PendingList)",
            "org.apache.activemq.transport.amqp.AmqpProtocolConverter:void onSessionClose(org.apache.qpid.proton.engine.Session)",
            "org.apache.activemq.jms.pool.PooledConnectionFactory$1:boolean validateObject(org.apache.activemq.jms.pool.ConnectionKey,org.apache.activemq.jms.pool.ConnectionPool)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.transport.amqp.AmqpProtocolConverter$ConsumerContext:void doCommit()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()",
            "org.apache.activemq.jms.pool.PooledConnectionFactory$1:void destroyObject(org.apache.activemq.jms.pool.ConnectionKey,org.apache.activemq.jms.pool.ConnectionPool)",
            "org.apache.activemq.transport.amqp.AmqpProtocolConverter:void onActiveMQCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.amqp.AmqpProtocolConverter$4:void onMessage(org.apache.qpid.proton.engine.Receiver,org.apache.qpid.proton.engine.Delivery,org.fusesource.hawtbuf.Buffer)",
            "org.apache.activemq.network.DurableConduitBridge:void setupStaticDestinations()",
            "org.apache.activemq.util.IdGenerator:void <clinit>()"
        ]
    },
    "org.slf4j.impl.Log4jLoggerAdapter:void warn(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportStatusDetector:void doCollection(org.apache.activemq.broker.TransportConnection)",
            "org.apache.activemq.network.DemandSubscription:void waitForCompletion()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName registerSlowConsumerStrategy(org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy)",
            "org.apache.activemq.broker.cluster.ConnectionSplitBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void registerProducer(javax.management.ObjectName,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.jmx.ProducerView)",
            "org.apache.activemq.broker.region.BaseDestination:void duplicateFromStore(org.apache.activemq.command.Message,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.LdapNetworkConnector:void addConnector(javax.naming.directory.SearchResult)",
            "org.apache.activemq.util.ThreadPoolUtils:void doShutdown(java.util.concurrent.ExecutorService,long)",
            "org.apache.activemq.broker.BrokerRegistry:org.apache.activemq.broker.BrokerService lookup(java.lang.String)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void recover()",
            "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap:void objectRenamed(javax.naming.event.NamingEvent,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$DestinationType,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$PermissionType)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBrokerInfo(org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.network.LdapNetworkConnector:void removeConnector(javax.naming.directory.SearchResult)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregisterProducer(javax.management.ObjectName)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregister(org.apache.activemq.transaction.XATransaction)",
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.store.jdbc.JDBCIOExceptionHandler:boolean hasLockOwnership()",
            "org.apache.activemq.network.ForwardingBridge:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregisterSubscription(javax.management.ObjectName,boolean)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void register(org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.jmx.ManagementContext:javax.management.MBeanServer findTigerMBeanServer()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void addInactiveSubscription(org.apache.activemq.util.SubscriptionKey,org.apache.activemq.command.SubscriptionInfo,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.BrokerService:void setPersistenceAdapter(org.apache.activemq.store.PersistenceAdapter)",
            "org.apache.activemq.broker.BrokerService:java.lang.Object getPort(java.util.Map)",
            "org.apache.activemq.broker.jmx.ManagementContext$1:void run()",
            "org.apache.activemq.broker.jmx.ManagementContext:void stop()",
            "org.apache.activemq.broker.jmx.ManagedTransportConnection:void unregisterMBean(javax.management.ObjectName)",
            "org.apache.activemq.broker.jmx.AbortSlowConsumerStrategyView:javax.management.ObjectName toObjectName(java.lang.String)",
            "org.apache.activemq.transport.tcp.TcpTransportFactory:org.apache.activemq.transport.Transport createTransport(java.net.URI,org.apache.activemq.wireformat.WireFormat)",
            "org.apache.activemq.leveldb.replicated.groups.ZKClient:void process(org.apache.zookeeper.WatchedEvent)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void registerRecoveredTransactionMBean(org.apache.activemq.transaction.XATransaction)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void registerDestination(javax.management.ObjectName,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.jmx.DestinationView)",
            "org.apache.activemq.transport.amqp.AmqpProtocolConverter:org.apache.qpid.proton.jms.InboundTransformer getInboundTransformer()",
            "org.apache.activemq.broker.region.AbstractRegion:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregisterDestination(javax.management.ObjectName)",
            "org.apache.activemq.broker.jmx.AbortSlowConsumerStrategyView:void abortConnection(javax.management.ObjectName)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void registerSubscription(javax.management.ObjectName,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.util.SubscriptionKey,org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.jmx.ManagedTransportConnection:void registerMBean(javax.management.ObjectName)",
            "org.apache.activemq.broker.jmx.AbortSlowConsumerStrategyView:void abortConsumer(javax.management.ObjectName)"
        ]
    },
    "org.slf4j.impl.Log4jLoggerAdapter:void debug(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void expireMessages()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.TransactionBroker:org.apache.activemq.command.TransactionId[] getPreparedTransactions(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.kahadb.KahaDBStore:void doStart()",
            "org.apache.activemq.transport.AbstractInactivityMonitor$3:void run()",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTCommand(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.transport.tcp.TcpTransport$1:void run()",
            "org.apache.activemq.broker.region.Queue:void doBrowse(java.util.List,int)",
            "org.apache.activemq.network.ForwardingBridge:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.jmx.ManagementContext:void start()",
            "org.apache.activemq.jms.pool.PooledConnectionFactory:void stop()",
            "org.apache.activemq.broker.TransactionBroker$PreparedDestinationCompletion:void afterCommit()",
            "org.apache.activemq.util.ThreadPoolUtils:java.util.List shutdownNow(java.util.concurrent.ExecutorService)",
            "org.apache.activemq.broker.TransactionBroker$PreparedDestinationCompletion:void afterRollback()",
            "org.apache.activemq.network.LdapNetworkConnector:void start()",
            "org.apache.activemq.broker.region.policy.AbortSlowAckConsumerStrategy:void updateSlowConsumersList(java.util.List)",
            "org.apache.activemq.leveldb.replicated.groups.ZKClient:void process(org.apache.zookeeper.WatchedEvent)",
            "org.apache.activemq.broker.region.AbstractRegion:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.transport.AbstractInactivityMonitor$1:void run()",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId,long)",
            "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap:void objectAdded(javax.naming.event.NamingEvent,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$DestinationType,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$PermissionType)",
            "org.apache.activemq.transport.amqp.AmqpProtocolConverter:void onActiveMQCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.broker.region.RegionBroker)",
            "org.apache.activemq.broker.jmx.ManagementContext:void unregisterMBean(javax.management.ObjectName)",
            "org.apache.activemq.jms.pool.PooledConnectionFactory:void start()",
            "org.apache.activemq.broker.region.Queue:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.transport.AbstractInactivityMonitor$4:void run()",
            "org.apache.activemq.memory.CacheEvictionUsageListener:boolean evictMessages()",
            "org.apache.activemq.broker.jmx.ManagementContext:void createConnector(javax.management.MBeanServer)",
            "org.apache.activemq.transport.tcp.TcpTransport:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.RegionBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.network.LdapNetworkConnector:java.lang.String toUUID(javax.naming.directory.SearchResult)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void discardExpiredMessage(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.jaas.LDAPLoginModule:boolean authenticate(java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.view.DotFileInterceptorSupport:void generateFile()",
            "org.apache.activemq.network.LdapNetworkConnector:java.net.URI toURI(javax.naming.directory.SearchResult)",
            "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap:void objectRemoved(javax.naming.event.NamingEvent,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$DestinationType,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$PermissionType)",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.jmx.ManagementContext:void stop()",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.network.DiscoveryNetworkConnector:void onServiceAdd(org.apache.activemq.command.DiscoveryEvent)",
            "org.apache.activemq.broker.region.AbstractRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void buildExistingSubscriptions()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void readCheck()",
            "org.apache.activemq.broker.TransactionBroker$1:void recover(org.apache.activemq.command.XATransactionId,org.apache.activemq.command.Message[],org.apache.activemq.command.MessageAck[])",
            "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.proxy.ProxyConnector$2:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.ProducerBrokerExchange:void setLastStoredSequenceId(long)",
            "org.apache.activemq.broker.TransportConnection:void start()"
        ]
    },
    "org.apache.activemq.util.ThreadPoolUtils:void doShutdown(java.util.concurrent.ExecutorService,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ThreadPoolUtils:void shutdownGraceful(java.util.concurrent.ExecutorService)",
            "org.apache.activemq.util.ThreadPoolUtils:void shutdown(java.util.concurrent.ExecutorService)",
            "org.apache.activemq.util.ThreadPoolUtils:void shutdownGraceful(java.util.concurrent.ExecutorService,long)"
        ]
    },
    "org.apache.activemq.usage.Usage:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageProducer:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ProducerId,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.region.Topic:void start()",
            "org.apache.activemq.usage.Usage:void addChild(org.apache.activemq.usage.Usage)",
            "org.apache.activemq.usage.SystemUsage:void start()",
            "org.apache.activemq.broker.region.Queue:void start()"
        ]
    },
    "org.apache.activemq.plugin.DiscardingDLQBrokerPlugin:org.apache.activemq.broker.Broker installPlugin(org.apache.activemq.broker.Broker)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.BaseDestination:void waitForSpace(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.usage.Usage,int,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void checkUsage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.BaseDestination:void waitForSpace(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.usage.Usage,java.lang.String)",
            "org.apache.activemq.broker.region.Topic:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicRegion:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.region.RegionBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TopicRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.util.TimeStampingBrokerPlugin:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.ConduitBridge:void removeDemandSubscription(org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteConsumerAdvisory(org.apache.activemq.command.DataStructure)"
        ]
    },
    "org.apache.activemq.network.LdapNetworkConnector:void objectRenamed(javax.naming.event.NamingEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.LdapNetworkConnector:void removeConnector(javax.naming.directory.SearchResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.LdapNetworkConnector:void objectRemoved(javax.naming.event.NamingEvent)",
            "org.apache.activemq.network.LdapNetworkConnector:void objectChanged(javax.naming.event.NamingEvent)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:boolean canDuplexDispatch(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteConsumerAdvisory(org.apache.activemq.command.DataStructure)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.broker.ProducerBrokerExchange:boolean canDispatch(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void removeBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void removeBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:boolean hasLowerPriority(org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:boolean duplicateSuppressionIsRequired(org.apache.activemq.network.DemandSubscription)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:org.apache.activemq.network.DemandSubscription doCreateDemandSubscription(org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:org.apache.activemq.network.DemandSubscription createDemandSubscription(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.network.ConduitBridge:org.apache.activemq.network.DemandSubscription createDemandSubscription(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.network.DurableConduitBridge:org.apache.activemq.network.DemandSubscription createDemandSubscription(org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.network.ConduitBridge:boolean addToAlreadyInterestedConsumers(org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.ConduitBridge:org.apache.activemq.network.DemandSubscription createDemandSubscription(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.network.DurableConduitBridge:org.apache.activemq.network.DemandSubscription createDemandSubscription(org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter:org.apache.activemq.store.PersistenceAdapter getMatchingPersistenceAdapter(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter:void removeQueueMessageStore(org.apache.activemq.command.ActiveMQQueue)",
            "org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter:org.apache.activemq.store.MessageStore createQueueMessageStore(org.apache.activemq.command.ActiveMQQueue)",
            "org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter:void removeTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)",
            "org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter:org.apache.activemq.store.TopicMessageStore createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void removeDemandSubscription(org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteConsumerAdvisory(org.apache.activemq.command.DataStructure)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:boolean removeDemandSubscriptionByLocalId(org.apache.activemq.command.ConsumerId)"
        ]
    },
    "org.apache.activemq.broker.region.policy.PriorityNetworkDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.RegionBroker:void addBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void addBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteException(java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport$3:void onException(java.io.IOException)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void doStartLocalAndRemoteBridges()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void collectBrokerInfos()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:boolean recoverMessage(org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:boolean recoverMessage(org.apache.activemq.command.Message,boolean)",
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:boolean recoverMessage(org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy:void abortSubscription(java.util.Map,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy:void abortConsumer(org.apache.activemq.broker.region.Subscription,boolean)",
            "org.apache.activemq.broker.region.policy.AbortSlowAckConsumerStrategy:void abortAllQualifiedSlowConsumers()",
            "org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy:void run()"
        ]
    },
    "org.apache.activemq.network.ConditionalNetworkBridgeFilterFactory$ConditionalNetworkBridgeFilter:boolean hasNoLocalConsumers(org.apache.activemq.command.Message,org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.ConditionalNetworkBridgeFilterFactory$ConditionalNetworkBridgeFilter:boolean matchesForwardingFilter(org.apache.activemq.command.Message,org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void removeSubscription(org.apache.activemq.network.DemandSubscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void removeDemandSubscription(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.network.ConduitBridge:void removeDemandSubscription(org.apache.activemq.command.ConsumerId)"
        ]
    },
    "org.apache.activemq.util.ClassLoadingAwareObjectInputStream:java.lang.Class load(java.lang.String,java.lang.ClassLoader[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ClassLoadingAwareObjectInputStream:java.lang.Class resolveProxyClass(java.lang.String[])",
            "org.apache.activemq.util.ClassLoadingAwareObjectInputStream:java.lang.Class resolveClass(java.io.ObjectStreamClass)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.util.ThreadPoolUtils:java.util.List shutdownNow(java.util.concurrent.ExecutorService)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.broker.region.Queue:void stop()",
            "org.apache.activemq.thread.TaskRunnerFactory:void shutdownNow()",
            "org.apache.activemq.store.kahadb.KahaDBStore:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void stop()"
        ]
    },
    "org.apache.activemq.broker.region.policy.AbortSlowAckConsumerStrategy:void abortAllQualifiedSlowConsumers()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.AbortSlowAckConsumerStrategy:void run()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:boolean recoverMessage(org.apache.activemq.command.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:boolean recoverMessage(org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.network.ConditionalNetworkBridgeFilterFactory$ConditionalNetworkBridgeFilter:boolean matchesForwardingFilter(org.apache.activemq.command.Message,org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void flushToDisk()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void onUsageChanged(org.apache.activemq.usage.Usage,int,int)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void release()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:boolean tryAddMessageLast(org.apache.activemq.broker.region.MessageReference,long)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription$3:void onFailure()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)"
        ]
    },
    "org.slf4j.impl.Log4jLoggerAdapter:void warn(java.lang.String,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter$2:void onResponse(org.apache.activemq.transport.mqtt.MQTTProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBrokerInfo(org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.KahaDBStore:void doStart()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregister(org.apache.activemq.transaction.XATransaction)",
            "org.apache.activemq.broker.region.Topic:void doBrowse(java.util.List,int)",
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.AbstractTempRegion:void doDispose(org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractTempRegion:void dispose(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.advisory.AdvisoryBroker:void handleFireFailure(java.lang.String,java.lang.Throwable)",
            "org.apache.activemq.broker.region.RegionBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.RegionBroker:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSession(org.apache.activemq.command.SessionId,long)",
            "org.apache.activemq.broker.region.RegionBroker:boolean isExpired(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:int recoverRolledBackAcks(org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,org.apache.activemq.store.kahadb.disk.page.Transaction,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.network.DiscoveryNetworkConnector:void setUri(java.net.URI)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$8:void run()",
            "org.apache.activemq.broker.region.TempQueue:void dispose(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.jmx.ManagementContext:void stop()",
            "org.apache.activemq.network.DiscoveryNetworkConnector:void onServiceAdd(org.apache.activemq.command.DiscoveryEvent)",
            "org.apache.activemq.broker.region.RegionBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter$3:void onResponse(org.apache.activemq.transport.mqtt.MQTTProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalException(org.apache.activemq.command.MessageDispatch,java.lang.Throwable)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$10:void run()",
            "org.apache.activemq.broker.region.AbstractRegion:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doPageInForDispatch(boolean,boolean)",
            "org.apache.activemq.broker.region.policy.QueryBasedSubscriptionRecoveryPolicy:void dispatchInitialMessage(javax.jms.Message,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.SubscriptionRecovery)",
            "org.apache.activemq.broker.region.Queue:void purge()",
            "org.apache.activemq.broker.BrokerService:java.lang.String getDefaultSocketURIString()",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId,long)",
            "org.apache.activemq.network.jms.JmsConnector$1:boolean removeEldestEntry(java.util.Map$Entry)",
            "org.apache.activemq.network.DiscoveryNetworkConnector:void onServiceRemove(org.apache.activemq.command.DiscoveryEvent)",
            "org.apache.activemq.util.IdGenerator:void <clinit>()",
            "org.apache.activemq.broker.region.Topic:void clearPendingAndDispatch(org.apache.activemq.broker.region.DurableTopicSubscription)"
        ]
    },
    "org.slf4j.impl.Log4jLoggerAdapter:void info(java.lang.String,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.IdGenerator:java.lang.String sanitizeHostName(java.lang.String)",
            "org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy:void abortSubscription(java.util.Map,boolean)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.network.DiscoveryNetworkConnector:void onServiceAdd(org.apache.activemq.command.DiscoveryEvent)",
            "org.apache.activemq.network.ForwardingBridge:void startBridge()",
            "org.apache.activemq.broker.region.RegionBroker:void purgeInactiveDestinations()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.network.ForwardingBridge:void start()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteConsumerAdvisory(org.apache.activemq.command.DataStructure)",
            "org.apache.activemq.broker.region.AbstractSubscription:boolean matches(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.network.jms.DestinationBridge:void onMessage(javax.jms.Message)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.TransportConnection$3:void run()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()",
            "org.apache.activemq.broker.BrokerService:boolean checkQueueSize(java.lang.String)",
            "org.apache.activemq.pool.PooledConnectionFactory$1$1:void onException(java.io.IOException)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.util.ThreadPoolUtils:boolean awaitTermination(java.util.concurrent.ExecutorService,long)"
        ]
    },
    "org.slf4j.impl.Log4jLoggerAdapter:void error(java.lang.String,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportStatusDetector:void doCollection(org.apache.activemq.broker.TransportConnection)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:org.apache.activemq.store.PList getDiskList()",
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void reset()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:boolean tryAddMessageLast(org.apache.activemq.broker.region.MessageReference,long)",
            "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap:void objectRenamed(javax.naming.event.NamingEvent,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$DestinationType,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$PermissionType)",
            "org.apache.activemq.broker.jmx.ManagementContext:javax.management.ObjectName createCustomComponentMBeanName(java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.region.RegionBroker:void purgeInactiveDestinations()",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBrokerInfo(org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregisterSubscription(org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName registerSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.BrokerService:void start()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void setupStaticDestinations()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregister(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void fillBatch()",
            "org.apache.activemq.broker.region.virtual.MirroredQueue:org.apache.activemq.broker.region.Destination intercept(org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.TransportConnection:void serviceTransportException(java.io.IOException)",
            "org.apache.activemq.broker.BrokerService$8:void run()",
            "org.apache.activemq.network.jms.SimpleJmsQueueConnector:javax.jms.Destination createReplyToBridge(javax.jms.Destination,javax.jms.Connection,javax.jms.Connection)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.CompositeData[] browse(org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.region.Topic$2:boolean recoverMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void register(org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:boolean hasLowerPriority(org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void addInactiveSubscription(org.apache.activemq.util.SubscriptionKey,org.apache.activemq.command.SubscriptionInfo,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap:void objectRemoved(javax.naming.event.NamingEvent,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$DestinationType,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$PermissionType)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void scheduledJob(java.lang.String,org.apache.activemq.util.ByteSequence)",
            "org.apache.activemq.broker.region.virtual.MirroredQueue:void remove(org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap:void query()",
            "org.apache.activemq.network.LdapNetworkConnector:void start()",
            "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap:void applyACL(org.apache.activemq.security.AuthorizationEntry,javax.naming.directory.SearchResult,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$PermissionType)",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:int getStoreSize()",
            "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap:void processQueryResults(org.apache.activemq.security.DefaultAuthorizationMap,javax.naming.NamingEnumeration,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$DestinationType,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$PermissionType)",
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:boolean hasNext()",
            "org.apache.activemq.broker.BrokerService$9$1:void uncaughtException(java.lang.Thread,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerService:void setBrokerName(java.lang.String)",
            "org.apache.activemq.broker.BrokerService:java.net.URI getVmConnectorURI()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void doStartLocalAndRemoteBridges()",
            "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap:void objectAdded(javax.naming.event.NamingEvent,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$DestinationType,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$PermissionType)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void registerSubscription(javax.management.ObjectName,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.util.SubscriptionKey,org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.plugin.SubQueueSelectorCacheBroker:void persistCache()",
            "org.apache.activemq.network.jms.SimpleJmsTopicConnector:javax.jms.Destination createReplyToBridge(javax.jms.Destination,javax.jms.Connection,javax.jms.Connection)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.network.DurableConduitBridge:void setupStaticDestinations()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:java.util.List getSubscriberMessages(org.apache.activemq.broker.jmx.SubscriptionView)"
        ]
    },
    "org.slf4j.impl.Log4jLoggerAdapter:void debug(java.lang.String,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.network.MBeanNetworkListener:void onStart(org.apache.activemq.network.NetworkBridge)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.region.TempQueue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.thread.TaskRunnerFactory:void init()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteException(java.lang.Throwable)",
            "org.apache.activemq.network.MBeanBridgeDestination:void purgeInactiveDestinationView(java.util.Map)",
            "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap:void objectRenamed(javax.naming.event.NamingEvent,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$DestinationType,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$PermissionType)",
            "org.apache.activemq.plugin.SubQueueSelectorCacheBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.transport.mqtt.MQTTProtocolConverter:void onMQTTCommand(org.fusesource.mqtt.codec.MQTTFrame)",
            "org.apache.activemq.broker.region.TopicSubscription:boolean isDuplicate(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.ProducerBrokerExchange:long getStoredSequenceIdForMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.advisory.AdvisoryBroker:void handleFireFailure(java.lang.String,java.lang.Throwable)",
            "org.apache.activemq.broker.region.policy.AbstractDeadLetterStrategy:boolean isSendToDeadLetterQueue(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.jmx.ManagementContext:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor$2:void run()",
            "org.apache.activemq.network.MBeanNetworkListener:void onStop(org.apache.activemq.network.NetworkBridge)",
            "org.apache.activemq.broker.region.RegionBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$FutureBrokerInfo:org.apache.activemq.command.BrokerInfo get()",
            "org.apache.activemq.broker.region.TopicSubscription:void discard(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:boolean removeDemandSubscriptionByLocalId(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.BaseDestination:void waitForSpace(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.usage.Usage,int,java.lang.String)",
            "org.apache.activemq.transport.amqp.AmqpProtocolConverter$4:void onMessage(org.apache.qpid.proton.engine.Receiver,org.apache.qpid.proton.engine.Delivery,org.fusesource.hawtbuf.Buffer)",
            "org.apache.activemq.broker.region.Queue$4:void run()",
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.network.DemandSubscription:void waitForCompletion()",
            "org.apache.activemq.proxy.ProxyConnection:void onFailure(java.io.IOException)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.plugin.DiscardingDLQBroker:void skipMessage(java.lang.String,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void addConsumerInfo(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteConsumerAdvisory(org.apache.activemq.command.DataStructure)",
            "org.apache.activemq.broker.TransportConnector:java.lang.String getPublishableConnectString()",
            "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap:void objectChanged(javax.naming.event.NamingEvent,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$DestinationType,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$PermissionType)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.network.jms.JmsConnector:void doInitializeConnection(boolean)",
            "org.apache.activemq.network.MBeanBridgeDestination:void stop()",
            "org.apache.activemq.network.NetworkConnector:void registerNetworkBridgeMBean(org.apache.activemq.network.NetworkBridge)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void trace(org.apache.activemq.command.DataStructure)",
            "org.apache.activemq.broker.region.QueueSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.util.RedeliveryPlugin:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)",
            "org.apache.activemq.broker.region.policy.DiscardingDeadLetterStrategy:boolean isSendToDeadLetterQueue(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.policy.PolicyEntry:void configure(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.region.TopicSubscription)",
            "org.apache.activemq.network.DiscoveryNetworkConnector:void onServiceAdd(org.apache.activemq.command.DiscoveryEvent)",
            "org.apache.activemq.broker.region.Queue:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,long)",
            "org.apache.activemq.broker.region.AbstractRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalException(org.apache.activemq.command.MessageDispatch,java.lang.Throwable)",
            "org.apache.activemq.transport.stomp.StompInactivityMonitor:boolean configuredOk()",
            "org.apache.activemq.broker.TransportConnection$4:void run()",
            "org.apache.activemq.network.NetworkConnector:void unregisterNetworkBridgeMBean(org.apache.activemq.network.NetworkBridge)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:long getStoredSequenceIdForMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.leveldb.replicated.groups.ZKClient$StateChangeDispatcher:void addEvent(org.apache.activemq.leveldb.replicated.groups.ZKClient$State,org.apache.activemq.leveldb.replicated.groups.ZKClient$State)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()",
            "org.apache.activemq.transport.amqp.AmqpProtocolConverter$4$1:void onResponse(org.apache.activemq.transport.amqp.IAmqpProtocolConverter,org.apache.activemq.command.Response)"
        ]
    },
    "org.slf4j.impl.Log4jLoggerAdapter:void trace(java.lang.String,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.amqp.AmqpProtocolConverter$1:void sentFrame(org.apache.qpid.proton.framing.TransportFrame)",
            "org.apache.activemq.thread.TaskRunnerFactory:void doExecuteNewThread(java.lang.Runnable,java.lang.String)",
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable,java.lang.String)",
            "org.apache.activemq.store.kahadb.MessageDatabase:void checkpointUpdate(org.apache.activemq.store.kahadb.disk.page.Transaction,boolean)",
            "org.apache.activemq.util.ClassLoadingAwareObjectInputStream:java.lang.Class load(java.lang.String,java.lang.ClassLoader[])",
            "org.apache.activemq.util.ThreadPoolUtils:void doShutdown(java.util.concurrent.ExecutorService,long)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.store.jdbc.TransactionContext:java.sql.Connection getConnection()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void shutdown(long)",
            "org.apache.activemq.broker.region.Queue:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.QueueMessageReference,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.transport.amqp.AmqpProtocolConverter$ProducerContext:void onMessage(org.apache.qpid.proton.engine.Receiver,org.apache.qpid.proton.engine.Delivery,org.fusesource.hawtbuf.Buffer)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doActualDispatch(org.apache.activemq.broker.region.cursors.PendingList)",
            "org.apache.activemq.thread.TaskRunnerFactory$1:java.lang.Thread newThread(java.lang.Runnable)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:boolean alreadyKnown(org.apache.activemq.util.SubscriptionKey)",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.store.jdbc.JDBCMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void setupStaticDestinations()",
            "org.apache.activemq.transport.amqp.AmqpProtocolConverter$ConsumerContext:void onDelivery(org.apache.qpid.proton.engine.Delivery)",
            "org.apache.activemq.thread.PooledTaskRunner:void shutdown(long)",
            "org.apache.activemq.network.ConditionalNetworkBridgeFilterFactory$ConditionalNetworkBridgeFilter:boolean matchesForwardingFilter(org.apache.activemq.command.Message,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.transport.amqp.AmqpProtocolConverter$1:void receivedFrame(org.apache.qpid.proton.framing.TransportFrame)"
        ]
    },
    "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap:void applyACL(org.apache.activemq.security.AuthorizationEntry,javax.naming.directory.SearchResult,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$PermissionType)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap:void objectAdded(javax.naming.event.NamingEvent,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$DestinationType,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$PermissionType)",
            "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap:void processQueryResults(org.apache.activemq.security.DefaultAuthorizationMap,javax.naming.NamingEnumeration,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$DestinationType,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$PermissionType)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerPluginSupport:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void stop()",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void stop()"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:org.apache.activemq.command.TransactionId[] getPreparedTransactions(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:org.apache.activemq.command.ActiveMQDestination[] getDestinations()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TopicRegion:void doCleanup()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicRegion$1:void run()"
        ]
    },
    "org.apache.activemq.network.NetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.NetworkConnector$1:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.network.DiscoveryNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer$8:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.SchedulerTimerTask:void run()"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:org.apache.activemq.broker.Connection[] getClients()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.scheduler.JobSchedulerStore getJobSchedulerStore()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker addInterceptors(org.apache.activemq.broker.Broker)",
            "org.apache.activemq.xbean.XBeanBrokerService:void ensureSystemUsageHasStore()",
            "org.apache.activemq.broker.BrokerService:void checkSystemUsageLimits()",
            "org.apache.activemq.broker.jmx.HealthView:java.util.List healthList()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.usage.SystemUsage getSystemUsage()"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void afterPropertiesSet()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void postConstruct()"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void addBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.policy.AbortSlowAckConsumerStrategy:void updateSlowConsumersList(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.AbortSlowAckConsumerStrategy:void run()"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.ForwardingBridge:void serviceRemoteException(java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.ForwardingBridge$2:void onException(java.io.IOException)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.AbortSlowConsumerStrategyView:void abortConnection(javax.management.ObjectName)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.AbortSlowConsumerStrategyView:void abortConnection(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:org.apache.activemq.command.BrokerInfo[] getPeerBrokerInfos()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void logSend(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:java.util.Set getDurableDestinations()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.NetworkConnector:void handleStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DiscoveryNetworkConnector:void handleStart()",
            "org.apache.activemq.network.NetworkConnector$1:void doStart()",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStart()"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void addSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void removeSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.proxy.ProxyConnector:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ProxyConnectorView:void start()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.store.PListStore getTempDataStore()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.xbean.XBeanBrokerService:void ensureSystemUsageHasStore()",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.store.PListStore getTempDataStore()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.usage.SystemUsage getSystemUsage()"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void removeBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnection:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportStatusDetector:void doCollection(org.apache.activemq.broker.TransportConnection)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.broker.TransportConnection:void start()",
            "org.apache.activemq.broker.jmx.ConnectionView:void stop()"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void preProcessDispatch(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.plugin.ForcePersistencyModeBrokerPlugin:org.apache.activemq.broker.Broker installPlugin(org.apache.activemq.broker.Broker)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.jms.SimpleJmsQueueConnector:javax.jms.Destination createReplyToBridge(javax.jms.Destination,javax.jms.Connection,javax.jms.Connection)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.jms.DestinationBridge:javax.jms.Destination processReplyToDestination(javax.jms.Destination)"
        ]
    },
    "org.apache.activemq.broker.BrokerPluginSupport:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void start()",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void start()"
        ]
    },
    "org.apache.activemq.network.jms.JmsConnector:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.JmsConnectorView:void start()"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:void doStartPersistenceAdapter()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startPersistenceAdapter(boolean)",
            "org.apache.activemq.broker.BrokerService:void access$000(org.apache.activemq.broker.BrokerService)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ManagementContext$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.ws.WSTransportServer:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.wss.WSSTransportServer:void doStart()"
        ]
    },
    "org.apache.activemq.plugin.SubQueueSelectorCacheBroker:void <init>(org.apache.activemq.broker.Broker,java.io.File)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.plugin.SubQueueSelectorCacheBrokerPlugin:org.apache.activemq.broker.Broker installPlugin(org.apache.activemq.broker.Broker)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void nowMasterBroker()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.ForwardingBridge:void serviceLocalException(java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.ForwardingBridge$1:void onException(java.io.IOException)",
            "org.apache.activemq.network.ForwardingBridge:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.ForwardingBridge$4:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.ForwardingBridge:void serviceRemoteCommand(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.network.jms.JmsConnector$1:boolean removeEldestEntry(java.util.Map$Entry)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void postProcessDispatch(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.jms.JmsConnector:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.JmsConnectorView:void stop()"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.usage.Usage)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.jms.JmsConnector:void handleConnectionFailure(javax.jms.Connection)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.jms.SimpleJmsTopicConnector$1:void onException(javax.jms.JMSException)",
            "org.apache.activemq.network.jms.SimpleJmsQueueConnector$2:void onException(javax.jms.JMSException)",
            "org.apache.activemq.network.jms.TopicBridge:void setConsumerConnection(javax.jms.TopicConnection)",
            "org.apache.activemq.network.jms.DestinationBridge:void onMessage(javax.jms.Message)",
            "org.apache.activemq.network.jms.SimpleJmsQueueConnector$1:void onException(javax.jms.JMSException)",
            "org.apache.activemq.network.jms.QueueBridge:void setConsumerConnection(javax.jms.QueueConnection)",
            "org.apache.activemq.network.jms.SimpleJmsTopicConnector$2:void onException(javax.jms.JMSException)"
        ]
    },
    "org.apache.activemq.network.jms.SimpleJmsTopicConnector:javax.jms.Destination createReplyToBridge(javax.jms.Destination,javax.jms.Connection,javax.jms.Connection)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.jms.DestinationBridge:javax.jms.Destination processReplyToDestination(javax.jms.Destination)"
        ]
    },
    "org.apache.activemq.broker.jmx.AbortSlowConsumerStrategyView:void abortConsumer(javax.management.ObjectName)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.AbortSlowConsumerStrategyView:void abortConsumer(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.tcp.TcpTransport:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.amqp.AmqpNioTransport:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.nio.NIOTransport:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.util.ServiceSupport:void stop()",
            "org.apache.activemq.transport.mqtt.MQTTNIOTransport:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.stomp.StompNIOTransport:void doStop(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpProtocolConverter$ConsumerContext:void doRollback()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.amqp.AmqpProtocolConverter$ConsumerContext:void settle(org.apache.qpid.proton.engine.Delivery,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.amqp.AmqpProtocolConverter$ConsumerContext:void pumpOutbound()",
            "org.apache.activemq.transport.amqp.AmqpProtocolConverter$ConsumerContext:void onDelivery(org.apache.qpid.proton.engine.Delivery)"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpTransport$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.amqp.AmqpProtocolConverter$ConsumerContext:void onDelivery(org.apache.qpid.proton.engine.Delivery)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor:void writeCheck()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor$2:void run()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagementContext:javax.management.MBeanServer findTigerMBeanServer()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagementContext:javax.management.MBeanServer findMBeanServer()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doActualDispatch(org.apache.activemq.broker.region.cursors.PendingList)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void doDispatch(org.apache.activemq.broker.region.cursors.PendingList)"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpProtocolConverter:void onSessionClose(org.apache.qpid.proton.engine.Session)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.amqp.AmqpProtocolConverter:void onFrame(org.fusesource.hawtbuf.Buffer)"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpProtocolConverter$ConsumerContext:void doCommit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.amqp.AmqpProtocolConverter:void onActiveMQCommand(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.amqp.AmqpProtocolConverter$4:void onMessage(org.apache.qpid.proton.engine.Receiver,org.apache.qpid.proton.engine.Delivery,org.fusesource.hawtbuf.Buffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.DurableConduitBridge:void setupStaticDestinations()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()"
        ]
    },
    "org.apache.activemq.util.IdGenerator:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportStatusDetector:void doCollection(org.apache.activemq.broker.TransportConnection)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportStatusDetector:void doCollection()"
        ]
    },
    "org.apache.activemq.network.DemandSubscription:void waitForCompletion()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport$10:void run()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName registerSlowConsumerStrategy(org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.ObjectName getSlowConsumerStrategy()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void registerProducer(javax.management.ObjectName,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.jmx.ProducerView)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerRegistry:org.apache.activemq.broker.BrokerService lookup(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void start()",
            "org.apache.activemq.broker.view.MessageBrokerViewRegistry:org.apache.activemq.broker.view.MessageBrokerView lookup(java.lang.String)",
            "org.apache.activemq.broker.view.MessageBrokerView:void <init>(java.lang.String)",
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.broker.BrokerService lookupBroker(org.apache.activemq.broker.BrokerRegistry,java.lang.String,int)",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry get(java.lang.String)",
            "org.apache.activemq.transport.vm.VMTransportFactory:boolean validateBroker(java.lang.String)"
        ]
    },
    "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap:void objectRenamed(javax.naming.event.NamingEvent,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$DestinationType,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$PermissionType)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$CachedLDAPAuthorizationMapNamespaceChangeListener:void objectRenamed(javax.naming.event.NamingEvent)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregisterProducer(javax.management.ObjectName)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregister(org.apache.activemq.transaction.XATransaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.RecoveredXATransactionView$1:void afterCommit()",
            "org.apache.activemq.broker.jmx.RecoveredXATransactionView$1:void afterRollback()"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCIOExceptionHandler:boolean hasLockOwnership()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregisterSubscription(javax.management.ObjectName,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void register(org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.jmx.ManagedTopicRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.jmx.ManagedQueueRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void addInactiveSubscription(org.apache.activemq.util.SubscriptionKey,org.apache.activemq.command.SubscriptionInfo,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName registerSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void buildExistingSubscriptions()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregisterSubscription(javax.management.ObjectName,boolean)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void setPersistenceAdapter(org.apache.activemq.store.PersistenceAdapter)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:java.lang.Object getPort(java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ManagementContext:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.broker.BrokerService:void doStartBroker()",
            "org.apache.activemq.transport.TransportLoggerFactory:void stop()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTransportConnection:void unregisterMBean(javax.management.ObjectName)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedTransportConnection:void stopAsync()"
        ]
    },
    "org.apache.activemq.broker.jmx.AbortSlowConsumerStrategyView:javax.management.ObjectName toObjectName(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.AbortSlowConsumerStrategyView:void abortConsumer(java.lang.String)",
            "org.apache.activemq.broker.jmx.AbortSlowConsumerStrategyView:void abortConnection(java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpTransportFactory:org.apache.activemq.transport.Transport createTransport(java.net.URI,org.apache.activemq.wireformat.WireFormat)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.leveldb.replicated.groups.ZKClient:void process(org.apache.zookeeper.WatchedEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void registerRecoveredTransactionMBean(org.apache.activemq.transaction.XATransaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker:void registerMBean(org.apache.activemq.transaction.XATransaction)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void registerDestination(javax.management.ObjectName,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.jmx.DestinationView)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void register(org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpProtocolConverter:org.apache.qpid.proton.jms.InboundTransformer getInboundTransformer()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.amqp.AmqpProtocolConverter$ProducerContext:void onMessage(org.apache.qpid.proton.engine.Receiver,org.apache.qpid.proton.engine.Delivery,org.fusesource.hawtbuf.Buffer)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregisterDestination(javax.management.ObjectName)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregister(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void registerSubscription(javax.management.ObjectName,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.util.SubscriptionKey,org.apache.activemq.broker.jmx.SubscriptionView)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName registerSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTransportConnection:void registerMBean(javax.management.ObjectName)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedTransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.jmx.ManagedTransportConnection:void <init>(org.apache.activemq.broker.TransportConnector,org.apache.activemq.transport.Transport,org.apache.activemq.broker.Broker,org.apache.activemq.thread.TaskRunnerFactory,org.apache.activemq.thread.TaskRunnerFactory,org.apache.activemq.broker.jmx.ManagementContext,javax.management.ObjectName)"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker:org.apache.activemq.command.TransactionId[] getPreparedTransactions(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.command.TransactionId[] getPreparedTransactions(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagementContext:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportLoggerFactory:void createTransportLoggerControl(int)",
            "org.apache.activemq.broker.BrokerService:void startManagementContext()"
        ]
    },
    "org.apache.activemq.jms.pool.PooledConnectionFactory:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.pool.PooledConnectionFactoryBean:void destroy()"
        ]
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.SchedulerTimerTask:void run()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.command.RemoveInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap:void objectAdded(javax.naming.event.NamingEvent,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$DestinationType,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$PermissionType)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap:void objectChanged(javax.naming.event.NamingEvent,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$DestinationType,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$PermissionType)",
            "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$CachedLDAPAuthorizationMapNamespaceChangeListener:void objectAdded(javax.naming.event.NamingEvent)",
            "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap:void objectRenamed(javax.naming.event.NamingEvent,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$DestinationType,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$PermissionType)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagementContext:void unregisterMBean(javax.management.ObjectName)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.broker.jmx.ManagedTransportConnection:void unregisterMBean(javax.management.ObjectName)",
            "org.apache.activemq.network.MBeanBridgeDestination:void purgeInactiveDestinationView(java.util.Map)",
            "org.apache.activemq.network.MBeanNetworkListener:void onStop(org.apache.activemq.network.NetworkBridge)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregisterSubscription(org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.network.NetworkConnector:void unregisterNetworkBridgeMBean(org.apache.activemq.network.NetworkBridge)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregisterProducer(javax.management.ObjectName)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregister(org.apache.activemq.transaction.XATransaction)",
            "org.apache.activemq.transport.TransportLoggerView:void unregister()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregisterDestination(javax.management.ObjectName)",
            "org.apache.activemq.broker.BrokerService:void unregisterNetworkConnectorMBean(org.apache.activemq.network.NetworkConnector)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void registerSubscription(javax.management.ObjectName,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.util.SubscriptionKey,org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.network.MBeanBridgeDestination:void stop()",
            "org.apache.activemq.transport.TransportLoggerFactory:void stop()",
            "org.apache.activemq.broker.BrokerService:void unregisterConnectorMBean(org.apache.activemq.broker.TransportConnector)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregisterSubscription(javax.management.ObjectName,boolean)"
        ]
    },
    "org.apache.activemq.jms.pool.PooledConnectionFactory:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.memory.CacheEvictionUsageListener:boolean evictMessages()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.memory.CacheEvictionUsageListener$1:boolean iterate()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagementContext:void createConnector(javax.management.MBeanServer)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagementContext:javax.management.MBeanServer findTigerMBeanServer()",
            "org.apache.activemq.broker.jmx.ManagementContext:javax.management.MBeanServer createMBeanServer()"
        ]
    },
    "org.apache.activemq.network.LdapNetworkConnector:java.lang.String toUUID(javax.naming.directory.SearchResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.LdapNetworkConnector:void addConnector(javax.naming.directory.SearchResult)",
            "org.apache.activemq.network.LdapNetworkConnector:void removeConnector(javax.naming.directory.SearchResult)"
        ]
    },
    "org.apache.activemq.jaas.LDAPLoginModule:boolean authenticate(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jaas.LDAPLoginModule:boolean login()"
        ]
    },
    "org.apache.activemq.broker.view.DotFileInterceptorSupport:void generateFile()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.network.LdapNetworkConnector:java.net.URI toURI(javax.naming.directory.SearchResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.LdapNetworkConnector:void addConnector(javax.naming.directory.SearchResult)"
        ]
    },
    "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap:void objectRemoved(javax.naming.event.NamingEvent,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$DestinationType,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$PermissionType)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$CachedLDAPAuthorizationMapNamespaceChangeListener:void objectRemoved(javax.naming.event.NamingEvent)",
            "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap:void objectChanged(javax.naming.event.NamingEvent,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$DestinationType,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$PermissionType)",
            "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap:void objectRenamed(javax.naming.event.NamingEvent,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$DestinationType,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$PermissionType)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TempQueueRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.jmx.ManagedQueueRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.jmx.ManagedTopicRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.TempTopicRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor:void readCheck()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor$1:void run()"
        ]
    },
    "org.apache.activemq.broker.ProducerBrokerExchange:void setLastStoredSequenceId(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.broker.ProducerBrokerExchange getProducerBrokerExchange(org.apache.activemq.command.ProducerId)"
        ]
    },
    "org.apache.activemq.util.ThreadPoolUtils:void shutdownGraceful(java.util.concurrent.ExecutorService)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.util.ThreadPoolUtils:void shutdown(java.util.concurrent.ExecutorService)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void stop()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stopMonitorThreads()",
            "org.apache.activemq.broker.LockableServiceSupport:void postStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.thread.TaskRunnerFactory:void shutdown()",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stopMonitorThread()",
            "org.apache.activemq.ActiveMQConnection:void close()",
            "org.apache.activemq.network.jms.JmsConnector:void stop()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()"
        ]
    },
    "org.apache.activemq.util.ThreadPoolUtils:void shutdownGraceful(java.util.concurrent.ExecutorService,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.TaskRunnerFactory:void shutdownGraceful()",
            "org.apache.activemq.ActiveMQMessageConsumer:void dispose()"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.usage.Usage:void addChild(org.apache.activemq.usage.Usage)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.usage.Usage:void start()"
        ]
    },
    "org.apache.activemq.usage.SystemUsage:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:void checkUsage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.BaseDestination:void waitForSpace(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.usage.Usage,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void checkUsage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.TopicRegion:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.region.TopicRegion:void doCleanup()"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.TopicRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.network.LdapNetworkConnector:void objectRemoved(javax.naming.event.NamingEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQMessage:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void removeBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void removeBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:boolean duplicateSuppressionIsRequired(org.apache.activemq.network.DemandSubscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void addConsumerInfo(org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:org.apache.activemq.network.DemandSubscription createDemandSubscription(org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void addConsumerInfo(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:org.apache.activemq.network.DemandSubscription createDemandSubscription(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.network.ConduitBridge:org.apache.activemq.network.DemandSubscription createDemandSubscription(org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.DurableConduitBridge:org.apache.activemq.network.DemandSubscription createDemandSubscription(org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void addConsumerInfo(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:org.apache.activemq.network.DemandSubscription createDemandSubscription(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter:void removeQueueMessageStore(org.apache.activemq.command.ActiveMQQueue)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter:org.apache.activemq.store.MessageStore createQueueMessageStore(org.apache.activemq.command.ActiveMQQueue)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter:void removeTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter:org.apache.activemq.store.TopicMessageStore createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:boolean removeDemandSubscriptionByLocalId(org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void addBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:void addBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void addBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$3:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport:void propagateFailureToExceptionListener(java.lang.Exception)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.vm.VMTransport:void doDispatch(org.apache.activemq.transport.vm.VMTransport,org.apache.activemq.transport.TransportListener,java.lang.Object)",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:boolean recoverMessage(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore:int recoverRolledBackAcks(org.apache.activemq.store.kahadb.MessageDatabase$StoredDestination,org.apache.activemq.store.kahadb.disk.page.Transaction,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore$5:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.jdbc.JDBCMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:boolean recoverMessageReference(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore$LastRecoveredAwareListener:boolean recoverMessage(long,byte[])",
            "org.apache.activemq.store.jdbc.JDBCMessageStore$2:boolean recoverMessage(long,byte[])",
            "org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore$4:void execute(org.apache.activemq.store.kahadb.disk.page.Transaction)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy:void abortConsumer(org.apache.activemq.broker.region.Subscription,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.AbortSlowConsumerStrategyView:void abortConnection(javax.management.ObjectName)",
            "org.apache.activemq.broker.jmx.AbortSlowConsumerStrategyView:void abortConsumer(javax.management.ObjectName)"
        ]
    },
    "org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.util.ClassLoadingAwareObjectInputStream:java.lang.Class resolveProxyClass(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.util.ClassLoadingAwareObjectInputStream:java.lang.Class resolveClass(java.io.ObjectStreamClass)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.thread.TaskRunnerFactory:void shutdownNow()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.tcp.TcpTransport:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.failover.FailoverTransport:void stop()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void stop()"
        ]
    },
    "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.policy.AbortSlowAckConsumerStrategy:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void release()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void release()",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.TopicSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractTempRegion:void doDispose(org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractTempRegion:void doPurge()"
        ]
    },
    "org.apache.activemq.broker.region.AbstractTempRegion:void dispose(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void handleFireFailure(java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.usage.Usage)",
            "org.apache.activemq.advisory.AdvisoryBroker:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.advisory.AdvisoryBroker:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.advisory.AdvisoryBroker:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisoryBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.advisory.AdvisoryBroker:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.advisory.AdvisoryBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)",
            "org.apache.activemq.advisory.AdvisoryBroker:void networkBridgeStopped(org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void networkBridgeStarted(org.apache.activemq.command.BrokerInfo,boolean,java.lang.String)",
            "org.apache.activemq.advisory.AdvisoryBroker:void nowMasterBroker()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSession(org.apache.activemq.command.SessionId,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId,long)",
            "org.apache.activemq.command.RemoveInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:boolean isExpired(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:boolean isExpired(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.QueueSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void discardExpiredMessage(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchPending()"
        ]
    },
    "org.apache.activemq.network.DiscoveryNetworkConnector:void setUri(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DiscoveryNetworkConnector:void <init>(java.net.URI)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$8:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$10:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.policy.QueryBasedSubscriptionRecoveryPolicy:void dispatchInitialMessage(javax.jms.Message,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.SubscriptionRecovery)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.QueryBasedSubscriptionRecoveryPolicy$1:void onMessage(javax.jms.Message)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:java.lang.String getDefaultSocketURIString()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.broker.TransportConnector:java.util.LinkedList getPeerBrokers()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()"
        ]
    },
    "org.apache.activemq.network.DiscoveryNetworkConnector:void onServiceRemove(org.apache.activemq.command.DiscoveryEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.util.IdGenerator:java.lang.String sanitizeHostName(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.IdGenerator:void <clinit>()"
        ]
    },
    "org.apache.activemq.network.ForwardingBridge:void startBridge()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.ForwardingBridge$3:void run()"
        ]
    },
    "org.apache.activemq.network.ForwardingBridge:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.AbstractSubscription:boolean matches(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:boolean recoverMessage(org.apache.activemq.command.Message,boolean)",
            "org.apache.activemq.broker.region.AbstractSubscription:boolean addRecoveredMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.Topic$2:boolean recoverMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.QueueBrowserSubscription:boolean matches(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.jms.DestinationBridge:void onMessage(javax.jms.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnection$3:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:boolean checkQueueSize(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void stopGracefully(java.lang.String,java.lang.String,long,long)"
        ]
    },
    "org.apache.activemq.pool.PooledConnectionFactory$1$1:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.util.ThreadPoolUtils:boolean awaitTermination(java.util.concurrent.ExecutorService,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ThreadPoolUtils:void doShutdown(java.util.concurrent.ExecutorService,long)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:org.apache.activemq.store.PList getDiskList()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor$DiskIterator:void <init>(org.apache.activemq.broker.region.cursors.FilePendingMessageCursor)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void clear()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:boolean tryAddMessageLast(org.apache.activemq.broker.region.MessageReference,long)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:int size()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void flushToDisk()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void remove(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagementContext:javax.management.ObjectName createCustomComponentMBeanName(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregisterSubscription(org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:void destroySubscription(org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.jmx.ManagedTopicRegion:void destroySubscription(org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:void destroySubscription(org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.jmx.ManagedQueueRegion:void destroySubscription(org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName registerSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.jmx.ManagedQueueRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.jmx.ManagedTopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void setupStaticDestinations()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()",
            "org.apache.activemq.network.DurableConduitBridge:void setupStaticDestinations()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregister(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedQueueRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.jmx.ManagedTopicRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap:void query()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap:void afterPropertiesSet()",
            "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$2:void run()"
        ]
    },
    "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap:void processQueryResults(org.apache.activemq.security.DefaultAuthorizationMap,javax.naming.NamingEnumeration,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$DestinationType,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$PermissionType)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap:void query()"
        ]
    },
    "org.apache.activemq.broker.BrokerService$9$1:void uncaughtException(java.lang.Thread,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:void setBrokerName(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.DefaultBrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.net.URI)",
            "org.apache.activemq.transport.peer.PeerTransportFactory$2:org.apache.activemq.broker.BrokerService createBroker(java.net.URI)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:java.net.URI getVmConnectorURI()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.jms.JmsConnector:void setBrokerService(org.apache.activemq.broker.BrokerService)",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.network.NetworkConnector addNetworkConnector(org.apache.activemq.network.NetworkConnector)",
            "org.apache.activemq.plugin.StatisticsBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteConsumerAdvisory(org.apache.activemq.command.DataStructure)",
            "org.apache.activemq.broker.region.RegionBroker:java.net.URI getVmConnectorURI()",
            "org.apache.activemq.broker.jmx.BrokerView:java.lang.String getVMURL()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.proxy.ProxyConnector addProxyConnector(org.apache.activemq.proxy.ProxyConnector)",
            "org.apache.activemq.network.LdapNetworkConnector:void addConnector(javax.naming.directory.SearchResult)",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()"
        ]
    },
    "org.apache.activemq.plugin.SubQueueSelectorCacheBroker:void persistCache()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.plugin.SubQueueSelectorCacheBroker:void run()"
        ]
    },
    "org.apache.activemq.thread.TaskRunnerFactory:void init()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.fanout.FanoutTransport:void <init>()",
            "org.apache.activemq.thread.TaskRunnerFactory:org.apache.activemq.thread.TaskRunner createTaskRunner(org.apache.activemq.thread.Task,java.lang.String)",
            "org.apache.activemq.transport.vm.VMTransport:org.apache.activemq.thread.TaskRunner getTaskRunner()",
            "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable,java.lang.String)",
            "org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent:void start()",
            "org.apache.activemq.transport.failover.FailoverTransport:void <init>()"
        ]
    },
    "org.apache.activemq.network.MBeanBridgeDestination:void purgeInactiveDestinationView(java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.MBeanBridgeDestination:void purgeInactiveDestinationViews()"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:boolean isDuplicate(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.ProducerBrokerExchange:long getStoredSequenceIdForMessage(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.ProducerBrokerExchange:boolean canDispatch(org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.policy.AbstractDeadLetterStrategy:boolean isSendToDeadLetterQueue(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor$2:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.SchedulerTimerTask:void run()"
        ]
    },
    "org.apache.activemq.network.MBeanNetworkListener:void onStop(org.apache.activemq.network.NetworkBridge)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$FutureBrokerInfo:org.apache.activemq.command.BrokerInfo get()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void collectBrokerInfos()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$FutureBrokerInfo:java.lang.Object get()"
        ]
    },
    "org.apache.activemq.plugin.DiscardingDLQBroker:void skipMessage(java.lang.String,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.plugin.DiscardingDLQBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void addConsumerInfo(org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteConsumerAdvisory(org.apache.activemq.command.DataStructure)"
        ]
    },
    "org.apache.activemq.broker.TransportConnector:java.lang.String getPublishableConnectString()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnector:void start()"
        ]
    },
    "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap:void objectChanged(javax.naming.event.NamingEvent,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$DestinationType,org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$PermissionType)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$CachedLDAPAuthorizationMapNamespaceChangeListener:void objectChanged(javax.naming.event.NamingEvent)"
        ]
    },
    "org.apache.activemq.network.jms.JmsConnector:void doInitializeConnection(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.jms.JmsConnector:void access$100(org.apache.activemq.network.jms.JmsConnector,boolean)"
        ]
    },
    "org.apache.activemq.network.MBeanBridgeDestination:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.NetworkConnector:void registerNetworkBridgeMBean(org.apache.activemq.network.NetworkBridge)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void trace(org.apache.activemq.command.DataStructure)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void postProcessDispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void addSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void stop()",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void start()",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)"
        ]
    },
    "org.apache.activemq.broker.region.QueueSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.QueueBrowserSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.policy.DiscardingDeadLetterStrategy:boolean isSendToDeadLetterQueue(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.stomp.StompInactivityMonitor:boolean configuredOk()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor:void startMonitorThreads()"
        ]
    },
    "org.apache.activemq.network.NetworkConnector:void unregisterNetworkBridgeMBean(org.apache.activemq.network.NetworkBridge)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:long getStoredSequenceIdForMessage(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:boolean canDuplexDispatch(org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.leveldb.replicated.groups.ZKClient$StateChangeDispatcher:void addEvent(org.apache.activemq.leveldb.replicated.groups.ZKClient$State,org.apache.activemq.leveldb.replicated.groups.ZKClient$State)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.leveldb.replicated.groups.ZKClient:void changeState(org.apache.activemq.leveldb.replicated.groups.ZKClient$State)"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpProtocolConverter$4$1:void onResponse(org.apache.activemq.transport.amqp.IAmqpProtocolConverter,org.apache.activemq.command.Response)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.amqp.AmqpProtocolConverter$1:void sentFrame(org.apache.qpid.proton.framing.TransportFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.thread.TaskRunnerFactory:void doExecuteNewThread(java.lang.Runnable,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable,java.lang.String)"
        ]
    },
    "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()",
            "org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent:void serviceFailed(org.apache.activemq.command.DiscoveryEvent)"
        ]
    },
    "org.apache.activemq.store.jdbc.TransactionContext:java.sql.Connection getConnection()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:java.lang.Object loadAdapter(org.apache.activemq.util.FactoryFinder,java.lang.String)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:org.apache.activemq.command.SubscriptionInfo doGetSubscriberEntry(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverPreparedOps(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecordDestination(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRemoveMessage(org.apache.activemq.store.jdbc.TransactionContext,long,org.apache.activemq.command.XATransactionId)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doAddMessage(org.apache.activemq.store.jdbc.TransactionContext,long,org.apache.activemq.command.MessageId,org.apache.activemq.command.ActiveMQDestination,byte[],long,byte,org.apache.activemq.command.XATransactionId)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverSubscription(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:long doGetLastAckedDurableSubscriberMessageId(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:long[] getStoreSequenceId(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.jdbc.adapter.BlobJDBCAdapter:byte[] doGetMessage(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doMessageIdScan(org.apache.activemq.store.jdbc.TransactionContext,int,org.apache.activemq.store.jdbc.JDBCMessageIdScanListener)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverNextMessagesWithPriority(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,long,long,int,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doSetLastAck(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.XATransactionId,java.lang.String,java.lang.String,long,long)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doClearLastAck(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,byte,java.lang.String,java.lang.String)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:byte[] doGetMessageById(org.apache.activemq.store.jdbc.TransactionContext,long)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doAddMessageReference(org.apache.activemq.store.jdbc.TransactionContext,long,org.apache.activemq.command.MessageId,org.apache.activemq.command.ActiveMQDestination,long,java.lang.String)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:org.apache.activemq.command.SubscriptionInfo[] doGetAllSubscriptions(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.store.jdbc.adapter.BlobJDBCAdapter:void doAddMessage(org.apache.activemq.store.jdbc.TransactionContext,long,org.apache.activemq.command.MessageId,org.apache.activemq.command.ActiveMQDestination,byte[],long,byte,org.apache.activemq.command.XATransactionId)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:int doGetMessageCount(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doCreateTables(org.apache.activemq.store.jdbc.TransactionContext)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doDeleteOldMessages(org.apache.activemq.store.jdbc.TransactionContext)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doCommitAddOp(org.apache.activemq.store.jdbc.TransactionContext,long)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:java.util.Set doGetDestinations(org.apache.activemq.store.jdbc.TransactionContext)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:long doGetLastMessageStoreSequenceId(org.apache.activemq.store.jdbc.TransactionContext)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverNextMessages(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,long,long,int,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:java.lang.String doGetMessageReference(org.apache.activemq.store.jdbc.TransactionContext,long)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:int doGetDurableSubscriberMessageCount(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,boolean)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecover(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doDropTables(org.apache.activemq.store.jdbc.TransactionContext)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:byte[] doGetMessage(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRemoveAllMessages(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:long doGetLastProducerSequenceId(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ProducerId)",
            "org.apache.activemq.store.jdbc.TransactionContext:void begin()",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doDeleteSubscription(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverNextMessages(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,long,long,int,boolean,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doSetSubscriberEntry(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.SubscriptionInfo,boolean,boolean)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doSetLastAckWithPriority(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.XATransactionId,java.lang.String,java.lang.String,long,long)"
        ]
    },
    "org.apache.activemq.thread.DedicatedTaskRunner:void shutdown(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void shutdown()"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpProtocolConverter$ProducerContext:void onMessage(org.apache.qpid.proton.engine.Receiver,org.apache.qpid.proton.engine.Delivery,org.fusesource.hawtbuf.Buffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.thread.TaskRunnerFactory$1:java.lang.Thread newThread(java.lang.Runnable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:boolean alreadyKnown(org.apache.activemq.util.SubscriptionKey)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void buildExistingSubscriptions()"
        ]
    },
    "org.apache.activemq.thread.PooledTaskRunner:void shutdown(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransport:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.thread.PooledTaskRunner:void shutdown()"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpProtocolConverter$1:void receivedFrame(org.apache.qpid.proton.framing.TransportFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TopicRegion$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.DiscoveryNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.NetworkConnector$1:void doStop(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker addInterceptors(org.apache.activemq.broker.Broker)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createBroker()"
        ]
    },
    "org.apache.activemq.xbean.XBeanBrokerService:void ensureSystemUsageHasStore()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.xbean.XBeanBrokerService:void afterPropertiesSet()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void checkSystemUsageLimits()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void doStartBroker()"
        ]
    },
    "org.apache.activemq.broker.jmx.HealthView:java.util.List healthList()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.HealthView:javax.management.openmbean.TabularData health()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.usage.SystemUsage getSystemUsage()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:void setMemoryLimit(long)",
            "org.apache.activemq.broker.view.MessageBrokerView:int getStorePercentUsage()",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.broker.Broker,org.apache.activemq.broker.scheduler.JobSchedulerStore)",
            "org.apache.activemq.broker.view.MessageBrokerView:int getTempPercentUsage()",
            "org.apache.activemq.broker.jmx.BrokerView:void setTempLimit(long)",
            "org.apache.activemq.broker.view.MessageBrokerView:int getMemoryPercentUsage()",
            "org.apache.activemq.plugin.StatisticsBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.jmx.BrokerView:int getJobSchedulerStorePercentUsage()",
            "org.apache.activemq.broker.jmx.BrokerView:void setJobSchedulerStoreLimit(long)",
            "org.apache.activemq.broker.jmx.BrokerView:int getStorePercentUsage()",
            "org.apache.activemq.broker.jmx.BrokerView:int getTempPercentUsage()",
            "org.apache.activemq.broker.jmx.BrokerView:long getMemoryLimit()",
            "org.apache.activemq.broker.jmx.BrokerView:long getJobSchedulerStoreLimit()",
            "org.apache.activemq.broker.jmx.BrokerView:void setStoreLimit(long)",
            "org.apache.activemq.broker.jmx.BrokerView:long getStoreLimit()",
            "org.apache.activemq.xbean.XBeanBrokerService:void ensureSystemUsageHasStore()",
            "org.apache.activemq.broker.BrokerService:void checkSystemUsageLimits()",
            "org.apache.activemq.broker.region.TempQueue:void initialize()",
            "org.apache.activemq.broker.view.MessageBrokerView:int getJobSchedulerStorePercentUsage()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.usage.SystemUsage getProducerSystemUsage()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.usage.SystemUsage getConsumerSystemUsage()",
            "org.apache.activemq.broker.jmx.BrokerView:int getMemoryPercentUsage()",
            "org.apache.activemq.broker.jmx.HealthView:java.util.List healthList()",
            "org.apache.activemq.broker.region.Queue:void initialize()",
            "org.apache.activemq.broker.jmx.BrokerView:long getTempLimit()"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void postConstruct()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.ForwardingBridge$2:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.AbortSlowConsumerStrategyView:void abortConnection(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.DiscoveryNetworkConnector:void handleStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.NetworkConnector$1:void doStart()"
        ]
    },
    "org.apache.activemq.broker.jmx.ProxyConnectorView:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.store.PListStore getTempDataStore()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void <init>(org.apache.activemq.broker.Broker,java.lang.String,boolean)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.store.PListStore getTempDataStore()",
            "org.apache.activemq.broker.region.TopicSubscription:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.usage.SystemUsage)"
        ]
    },
    "org.apache.activemq.broker.jmx.ConnectionView:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.jms.DestinationBridge:javax.jms.Destination processReplyToDestination(javax.jms.Destination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.jms.DestinationBridge:void onMessage(javax.jms.Message)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.JmsConnectorView:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:void startPersistenceAdapter(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void start()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void access$000(org.apache.activemq.broker.BrokerService)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService$2:void run()"
        ]
    },
    "org.apache.activemq.transport.wss.WSSTransportServer:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.plugin.SubQueueSelectorCacheBrokerPlugin:org.apache.activemq.broker.Broker installPlugin(org.apache.activemq.broker.Broker)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.ForwardingBridge$1:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.ForwardingBridge$4:void onCompletion(org.apache.activemq.transport.FutureResponse)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.JmsConnectorView:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.jms.SimpleJmsTopicConnector$1:void onException(javax.jms.JMSException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.jms.SimpleJmsQueueConnector$2:void onException(javax.jms.JMSException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.jms.TopicBridge:void setConsumerConnection(javax.jms.TopicConnection)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.jms.InboundTopicBridge:void setConsumerConnection(javax.jms.TopicConnection)",
            "org.apache.activemq.network.jms.OutboundTopicBridge:void setConsumerConnection(javax.jms.TopicConnection)"
        ]
    },
    "org.apache.activemq.network.jms.SimpleJmsQueueConnector$1:void onException(javax.jms.JMSException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.jms.QueueBridge:void setConsumerConnection(javax.jms.QueueConnection)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.jms.OutboundQueueBridge:void setConsumerConnection(javax.jms.QueueConnection)",
            "org.apache.activemq.network.jms.InboundQueueBridge:void setConsumerConnection(javax.jms.QueueConnection)"
        ]
    },
    "org.apache.activemq.network.jms.SimpleJmsTopicConnector$2:void onException(javax.jms.JMSException)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.AbortSlowConsumerStrategyView:void abortConsumer(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.amqp.AmqpNioTransport:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.nio.NIOTransport:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doStop(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTNIOTransport:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.stomp.StompNIOTransport:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.amqp.AmqpProtocolConverter$ConsumerContext:void pumpOutbound()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.amqp.AmqpProtocolConverter$ConsumerContext:void onDelivery(org.apache.qpid.proton.engine.Delivery)",
            "org.apache.activemq.transport.amqp.AmqpProtocolConverter$ConsumerContext:void onMessageDispatch(org.apache.activemq.command.MessageDispatch)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagementContext:javax.management.MBeanServer findMBeanServer()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagementContext:javax.management.MBeanServer getMBeanServer()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void doDispatch(org.apache.activemq.broker.region.cursors.PendingList)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void pageInMessages(boolean)",
            "org.apache.activemq.broker.region.Queue:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,long)"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpProtocolConverter:void onFrame(org.fusesource.hawtbuf.Buffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.amqp.AmqpProtocolConverter:void onAMQPData(java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.TransportStatusDetector:void doCollection()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportStatusDetector:void run()"
        ]
    },
    "org.apache.activemq.broker.jmx.DestinationView:javax.management.ObjectName getSlowConsumerStrategy()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregisterDestination(javax.management.ObjectName)"
        ]
    },
    "org.apache.activemq.broker.view.MessageBrokerViewRegistry:org.apache.activemq.broker.view.MessageBrokerView lookup(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.camel.component.broker.BrokerComponent:java.util.List completeEndpointPath(org.apache.camel.ComponentConfiguration,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.view.MessageBrokerView:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.broker.BrokerService lookupBroker(org.apache.activemq.broker.BrokerRegistry,java.lang.String,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry get(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.camel.component.broker.BrokerEndpoint:void doStart()"
        ]
    },
    "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$CachedLDAPAuthorizationMapNamespaceChangeListener:void objectRenamed(javax.naming.event.NamingEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.CompositeDestinationBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.RecoveredXATransactionView$1:void afterCommit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.RecoveredXATransactionView$1:void afterRollback()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:javax.management.ObjectName createDurableSubscriber(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.BrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.transport.TransportLoggerFactory:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ManagedTransportConnection:void stopAsync()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processShutdown(org.apache.activemq.command.ShutdownInfo)",
            "org.apache.activemq.broker.TransportConnection:void stop()",
            "org.apache.activemq.broker.TransportConnection:void serviceTransportException(java.io.IOException)",
            "org.apache.activemq.broker.TransportConnection:void serviceException(java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection$3:void run()"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker:void registerMBean(org.apache.activemq.transaction.XATransaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker:void access$100(org.apache.activemq.broker.TransactionBroker,org.apache.activemq.transaction.XATransaction)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.TransactionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.BrokerFilter:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTransportConnection:void <init>(org.apache.activemq.broker.TransportConnector,org.apache.activemq.transport.Transport,org.apache.activemq.broker.Broker,org.apache.activemq.thread.TaskRunnerFactory,org.apache.activemq.thread.TaskRunnerFactory,org.apache.activemq.broker.jmx.ManagementContext,javax.management.ObjectName)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedTransportConnector:org.apache.activemq.broker.Connection createConnection(org.apache.activemq.transport.Transport)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.command.TransactionId[] getPreparedTransactions(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.command.TransactionId[] getPreparedTransactions(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.transport.TransportLoggerFactory:void createTransportLoggerControl(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportLoggerFactory:org.apache.activemq.transport.TransportLogger createTransportLogger(org.apache.activemq.transport.Transport,int,org.slf4j.Logger,java.lang.String,boolean,boolean,int)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void startManagementContext()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void start()",
            "org.apache.activemq.broker.BrokerService:void doStartBroker()"
        ]
    },
    "org.apache.activemq.pool.PooledConnectionFactoryBean:void destroy()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.pool.PooledConnectionFactoryBean:void preDestroy()"
        ]
    },
    "org.apache.activemq.command.RemoveInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$CachedLDAPAuthorizationMapNamespaceChangeListener:void objectAdded(javax.naming.event.NamingEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.TransportLoggerView:void unregister()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportLogger:void finalize()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void unregisterNetworkConnectorMBean(org.apache.activemq.network.NetworkConnector)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:boolean removeNetworkConnector(org.apache.activemq.network.NetworkConnector)",
            "org.apache.activemq.broker.BrokerService:void stopAllConnectors(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void unregisterConnectorMBean(org.apache.activemq.broker.TransportConnector)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:boolean removeConnector(org.apache.activemq.broker.TransportConnector)",
            "org.apache.activemq.broker.BrokerService:void stopAllConnectors(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.memory.CacheEvictionUsageListener$1:boolean iterate()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagementContext:javax.management.MBeanServer createMBeanServer()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagementContext:javax.management.MBeanServer findMBeanServer()"
        ]
    },
    "org.apache.activemq.jaas.LDAPLoginModule:boolean login()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$CachedLDAPAuthorizationMapNamespaceChangeListener:void objectRemoved(javax.naming.event.NamingEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TempQueueRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedQueueRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.security.AbstractAuthenticationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.RegionBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTopicRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.broker.region.TempTopicRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.broker.ProducerBrokerExchange getProducerBrokerExchange(org.apache.activemq.command.ProducerId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor:void stopMonitorThreads()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onException(java.io.IOException)"
        ]
    },
    "org.apache.activemq.thread.TaskRunnerFactory:void shutdown()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.thread.DefaultThreadPools:void shutdown()",
            "org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent:void stop()",
            "org.apache.activemq.ActiveMQConnection:void close()"
        ]
    },
    "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stopMonitorThread()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.mqtt.MQTTInactivityMonitor:void stop()"
        ]
    },
    "org.apache.activemq.thread.TaskRunnerFactory:void shutdownGraceful()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.RegionBroker:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)"
        ]
    },
    "org.apache.activemq.command.ActiveMQMessage:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:org.apache.activemq.network.DemandSubscription createDemandSubscription(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void setupStaticDestinations()",
            "org.apache.activemq.network.DurableConduitBridge:void setupStaticDestinations()"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCTopicMessageStore$LastRecoveredAwareListener:boolean recoverMessage(long,byte[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverNextMessagesWithPriority(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,long,long,int,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverNextMessages(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,long,long,int,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.transport.nio.NIOSSLTransport:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void release()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doPageInForDispatch(boolean,boolean)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.QueueMessageReference getMatchingMessage(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.QueueMessageReference getMessage(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.AbstractTempRegion:void doPurge()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractTempRegion:void access$000(org.apache.activemq.broker.region.AbstractTempRegion)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:boolean isExpired(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:boolean isExpired(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.network.DiscoveryNetworkConnector:void <init>(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.network.NetworkConnector addNetworkConnector(java.net.URI)"
        ]
    },
    "org.apache.activemq.broker.region.policy.QueryBasedSubscriptionRecoveryPolicy$1:void onMessage(javax.jms.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnector:java.util.LinkedList getPeerBrokers()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnector:void addPeerBroker(org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.broker.TransportConnector:org.apache.activemq.command.ConnectionControl getConnectionControl()",
            "org.apache.activemq.broker.TransportConnector:void removePeerBroker(org.apache.activemq.command.BrokerInfo)"
        ]
    },
    "org.apache.activemq.network.ForwardingBridge$3:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.QueueBrowserSubscription:boolean matches(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor$DiskIterator:void <init>(org.apache.activemq.broker.region.cursors.FilePendingMessageCursor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:java.util.LinkedList pageInList(int)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void reset()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void clear()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:int size()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:int size()",
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:int matched()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void onUsageChanged(org.apache.activemq.usage.Usage,int,int)",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void gc()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void start()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void reset()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void remove(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void remove(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:void discard(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:void destroySubscription(org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTopicRegion:void destroySubscription(org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicRegion:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.region.AbstractRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:void destroySubscription(org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedQueueRegion:void destroySubscription(org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap:void afterPropertiesSet()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.security.CachedLDAPAuthorizationMap:void afterPropertiesSet()"
        ]
    },
    "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$2:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.DefaultBrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.peer.PeerTransportFactory$2:org.apache.activemq.broker.BrokerService createBroker(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.network.jms.JmsConnector:void setBrokerService(org.apache.activemq.broker.BrokerService)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.network.jms.JmsConnector addJmsConnector(org.apache.activemq.network.jms.JmsConnector)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.network.NetworkConnector addNetworkConnector(org.apache.activemq.network.NetworkConnector)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.network.NetworkConnector addNetworkConnector(java.net.URI)",
            "org.apache.activemq.broker.BrokerService:void setNetworkConnectors(java.util.List)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:java.net.URI getVmConnectorURI()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:java.net.URI getVmConnectorURI()"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:java.lang.String getVMURL()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.proxy.ProxyConnector addProxyConnector(org.apache.activemq.proxy.ProxyConnector)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void setProxyConnectors(java.util.List)",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.proxy.ProxyConnector addProxyConnector(java.net.URI)"
        ]
    },
    "org.apache.activemq.plugin.SubQueueSelectorCacheBroker:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.fanout.FanoutTransportFactory:org.apache.activemq.transport.fanout.FanoutTransport createTransport(java.util.Map)"
        ]
    },
    "org.apache.activemq.thread.TaskRunnerFactory:org.apache.activemq.thread.TaskRunner createTaskRunner(org.apache.activemq.thread.Task,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TempQueue:void initialize()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void <init>()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void start()",
            "org.apache.activemq.transport.vm.VMTransport:org.apache.activemq.thread.TaskRunner getTaskRunner()",
            "org.apache.activemq.broker.region.Topic:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.TopicMessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)",
            "org.apache.activemq.memory.CacheEvictionUsageListener:void <init>(org.apache.activemq.usage.Usage,int,int,org.apache.activemq.thread.TaskRunnerFactory)",
            "org.apache.activemq.ActiveMQSessionExecutor:void wakeup()",
            "org.apache.activemq.broker.TransportConnection:void start()",
            "org.apache.activemq.broker.region.Queue:void initialize()",
            "org.apache.activemq.transport.failover.FailoverTransport:void <init>()"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransport:org.apache.activemq.thread.TaskRunner getTaskRunner()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransport:void wakeup()"
        ]
    },
    "org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransportFactory:org.apache.activemq.transport.failover.FailoverTransport createTransport(java.util.Map)"
        ]
    },
    "org.apache.activemq.network.MBeanBridgeDestination:void purgeInactiveDestinationViews()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.MBeanBridgeDestination:void access$000(org.apache.activemq.network.MBeanBridgeDestination)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$FutureBrokerInfo:java.lang.Object get()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.security.SimpleCachedLDAPAuthorizationMap$CachedLDAPAuthorizationMapNamespaceChangeListener:void objectChanged(javax.naming.event.NamingEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.jms.JmsConnector:void access$100(org.apache.activemq.network.jms.JmsConnector,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.jms.JmsConnector$3:void run()",
            "org.apache.activemq.network.jms.JmsConnector$4:void run()",
            "org.apache.activemq.network.jms.JmsConnector$2:void run()",
            "org.apache.activemq.network.jms.JmsConnector$5:void run()"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void postProcessDispatch(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void addSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.QueueBrowserSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor:void startMonitorThreads()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.StompInactivityMonitor:void startMonitoring()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.transport.InactivityMonitor:void startMonitorThreads()"
        ]
    },
    "org.apache.activemq.leveldb.replicated.groups.ZKClient:void changeState(org.apache.activemq.leveldb.replicated.groups.ZKClient$State)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.leveldb.replicated.groups.ZKClient:void connect()",
            "org.apache.activemq.leveldb.replicated.groups.ZKClient:void close()",
            "org.apache.activemq.leveldb.replicated.groups.ZKClient:void process(org.apache.zookeeper.WatchedEvent)"
        ]
    },
    "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void triggerStartAsyncNetworkBridgeCreation()",
            "org.apache.activemq.broker.TransportConnection:void stopAsync()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteException(java.lang.Throwable)",
            "org.apache.activemq.transport.tcp.TcpTransport:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.broker.TransportConnection:void delayedStop(int,java.lang.String,java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnector$1:void onAccept(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalException(org.apache.activemq.command.MessageDispatch,java.lang.Throwable)",
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doHandshake()"
        ]
    },
    "org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent:void serviceFailed(org.apache.activemq.command.DiscoveryEvent)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:java.lang.Object loadAdapter(org.apache.activemq.util.FactoryFinder,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:org.apache.activemq.store.jdbc.JDBCAdapter createAdapter()",
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:org.apache.activemq.broker.Locker createDefaultLocker()"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:org.apache.activemq.command.SubscriptionInfo doGetSubscriberEntry(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverPreparedOps(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void recover(org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore)"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecordDestination(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCMessageStore:void recordDestinationCreation(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRemoveMessage(org.apache.activemq.store.jdbc.TransactionContext,long,org.apache.activemq.command.XATransactionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void commitRemove(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doAddMessage(org.apache.activemq.store.jdbc.TransactionContext,long,org.apache.activemq.command.MessageId,org.apache.activemq.command.ActiveMQDestination,byte[],long,byte,org.apache.activemq.command.XATransactionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:long doGetLastAckedDurableSubscriberMessageId(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCMessageStore:void recordDestinationCreation(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:long[] getStoreSequenceId(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:long[] getCachedStoreSequenceId(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:long[] getStoreSequenceIdForMessageId(org.apache.activemq.command.MessageId,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.BlobJDBCAdapter:byte[] doGetMessage(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doMessageIdScan(org.apache.activemq.store.jdbc.TransactionContext,int,org.apache.activemq.store.jdbc.JDBCMessageIdScanListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void initSequenceIdGenerator()",
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void createMessageAudit()"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverNextMessagesWithPriority(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,long,long,int,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doSetLastAck(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.XATransactionId,java.lang.String,java.lang.String,long,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void commitLastAck(org.apache.activemq.broker.ConnectionContext,long,long,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doClearLastAck(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,byte,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void rollbackLastAck(org.apache.activemq.broker.ConnectionContext,byte,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String)",
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void rollbackLastAck(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.jdbc.JDBCTopicMessageStore,org.apache.activemq.command.MessageAck,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:byte[] doGetMessageById(org.apache.activemq.store.jdbc.TransactionContext,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:long getLastMessageBrokerSequenceId()"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doAddMessageReference(org.apache.activemq.store.jdbc.TransactionContext,long,org.apache.activemq.command.MessageId,org.apache.activemq.command.ActiveMQDestination,long,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCMessageStore:void addMessageReference(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageId,long,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:org.apache.activemq.command.SubscriptionInfo[] doGetAllSubscriptions(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.BlobJDBCAdapter:void doAddMessage(org.apache.activemq.store.jdbc.TransactionContext,long,org.apache.activemq.command.MessageId,org.apache.activemq.command.ActiveMQDestination,byte[],long,byte,org.apache.activemq.command.XATransactionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:int doGetMessageCount(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCMessageStore:int getMessageCount()"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doCreateTables(org.apache.activemq.store.jdbc.TransactionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void deleteAllMessages()",
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void init()"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doDeleteOldMessages(org.apache.activemq.store.jdbc.TransactionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void cleanup()"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doCommitAddOp(org.apache.activemq.store.jdbc.TransactionContext,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void commitAdd(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:java.util.Set doGetDestinations(org.apache.activemq.store.jdbc.TransactionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:java.util.Set getDestinations()"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:long doGetLastMessageStoreSequenceId(org.apache.activemq.store.jdbc.TransactionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:long getLastMessageBrokerSequenceId()"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverNextMessages(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,long,long,int,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:java.lang.String doGetMessageReference(org.apache.activemq.store.jdbc.TransactionContext,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCMessageStore:java.lang.String getMessageReference(org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:int doGetDurableSubscriberMessageCount(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecover(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doDropTables(org.apache.activemq.store.jdbc.TransactionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void deleteAllMessages()"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:byte[] doGetMessage(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRemoveAllMessages(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:long doGetLastProducerSequenceId(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ProducerId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:long getLastProducerSequenceId(org.apache.activemq.command.ProducerId)"
        ]
    },
    "org.apache.activemq.store.jdbc.TransactionContext:void begin()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void beginTransaction(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void init()"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doDeleteSubscription(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void removeConsumerDestination(org.apache.activemq.command.ActiveMQQueue)",
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doSetSubscriberEntry(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.SubscriptionInfo,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:void addSubscription(org.apache.activemq.command.SubscriptionInfo,boolean)"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doSetLastAckWithPriority(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.XATransactionId,java.lang.String,java.lang.String,long,long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.thread.DedicatedTaskRunner:void shutdown()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void stop()",
            "org.apache.activemq.broker.region.Queue:void stop()",
            "org.apache.activemq.ActiveMQSessionExecutor:void stop()",
            "org.apache.activemq.broker.region.Topic:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:void stop()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void stop()"
        ]
    },
    "org.apache.activemq.thread.PooledTaskRunner:void shutdown()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void stop()",
            "org.apache.activemq.broker.region.Queue:void stop()",
            "org.apache.activemq.ActiveMQSessionExecutor:void stop()",
            "org.apache.activemq.broker.region.Topic:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:void stop()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void stop()"
        ]
    },
    "org.apache.activemq.broker.jmx.HealthView:javax.management.openmbean.TabularData health()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:void setMemoryLimit(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.MessageBrokerView:int getStorePercentUsage()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.scheduler.SchedulerBroker:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.broker.Broker,org.apache.activemq.broker.scheduler.JobSchedulerStore)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker addInterceptors(org.apache.activemq.broker.Broker)"
        ]
    },
    "org.apache.activemq.broker.view.MessageBrokerView:int getTempPercentUsage()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:void setTempLimit(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.MessageBrokerView:int getMemoryPercentUsage()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:int getJobSchedulerStorePercentUsage()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:void setJobSchedulerStoreLimit(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:int getStorePercentUsage()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:int getTempPercentUsage()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:long getMemoryLimit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:long getJobSchedulerStoreLimit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:void setStoreLimit(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:long getStoreLimit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TempQueue:void initialize()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)"
        ]
    },
    "org.apache.activemq.broker.view.MessageBrokerView:int getJobSchedulerStorePercentUsage()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.usage.SystemUsage getProducerSystemUsage()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void doStartPersistenceAdapter()",
            "org.apache.activemq.broker.region.BaseDestination:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.store.MessageStore,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.usage.SystemUsage getConsumerSystemUsage()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createRegionBroker(org.apache.activemq.broker.region.DestinationInterceptor)"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:int getMemoryPercentUsage()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:long getTempLimit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void <init>(org.apache.activemq.broker.Broker,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void <init>(org.apache.activemq.broker.Broker,java.lang.String,java.lang.String,int,org.apache.activemq.broker.region.DurableTopicSubscription)",
            "org.apache.activemq.broker.region.policy.FilePendingDurableSubscriberMessageStoragePolicy:org.apache.activemq.broker.region.cursors.PendingMessageCursor getSubscriberPendingMessageCursor(org.apache.activemq.broker.Broker,java.lang.String,java.lang.String,int,org.apache.activemq.broker.region.DurableTopicSubscription)",
            "org.apache.activemq.broker.region.policy.FilePendingSubscriberMessageStoragePolicy:org.apache.activemq.broker.region.cursors.PendingMessageCursor getSubscriberPendingMessageCursor(org.apache.activemq.broker.Broker,java.lang.String,int,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void start()",
            "org.apache.activemq.broker.region.policy.FilePendingQueueMessageStoragePolicy:org.apache.activemq.broker.region.cursors.PendingMessageCursor getQueuePendingMessageCursor(org.apache.activemq.broker.Broker,org.apache.activemq.broker.region.Queue)",
            "org.apache.activemq.broker.region.TopicSubscription:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.usage.SystemUsage)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.store.PListStore getTempDataStore()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.store.PListStore getTempDataStore()"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.usage.SystemUsage)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TempTopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerService$2:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.jms.InboundTopicBridge:void setConsumerConnection(javax.jms.TopicConnection)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.jms.SimpleJmsTopicConnector:javax.jms.Destination createReplyToBridge(javax.jms.Destination,javax.jms.Connection,javax.jms.Connection)"
        ]
    },
    "org.apache.activemq.network.jms.OutboundTopicBridge:void setConsumerConnection(javax.jms.TopicConnection)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.jms.SimpleJmsTopicConnector:javax.jms.Destination createReplyToBridge(javax.jms.Destination,javax.jms.Connection,javax.jms.Connection)"
        ]
    },
    "org.apache.activemq.network.jms.OutboundQueueBridge:void setConsumerConnection(javax.jms.QueueConnection)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.jms.SimpleJmsQueueConnector:javax.jms.Destination createReplyToBridge(javax.jms.Destination,javax.jms.Connection,javax.jms.Connection)"
        ]
    },
    "org.apache.activemq.network.jms.InboundQueueBridge:void setConsumerConnection(javax.jms.QueueConnection)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.jms.SimpleJmsQueueConnector:javax.jms.Destination createReplyToBridge(javax.jms.Destination,javax.jms.Connection,javax.jms.Connection)"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpProtocolConverter$ConsumerContext:void onMessageDispatch(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.amqp.AmqpProtocolConverter$ConsumerContext:void settle(org.apache.qpid.proton.engine.Delivery,int)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagementContext:javax.management.MBeanServer getMBeanServer()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagementContext:java.util.Set queryNames(javax.management.ObjectName,javax.management.QueryExp)",
            "org.apache.activemq.broker.jmx.ManagementContext:void start()",
            "org.apache.activemq.broker.jmx.ManagementContext:java.lang.Object getAttribute(javax.management.ObjectName,java.lang.String)",
            "org.apache.activemq.broker.jmx.ManagementContext:void stop()",
            "org.apache.activemq.broker.jmx.ManagementContext:javax.management.ObjectInstance getObjectInstance(javax.management.ObjectName)",
            "org.apache.activemq.broker.jmx.ManagementContext:javax.management.ObjectInstance registerMBean(java.lang.Object,javax.management.ObjectName)",
            "org.apache.activemq.broker.jmx.ManagementContext:java.lang.Object newProxyInstance(javax.management.ObjectName,java.lang.Class,boolean)"
        ]
    },
    "org.apache.activemq.transport.amqp.AmqpProtocolConverter:void onAMQPData(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportStatusDetector:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processShutdown(org.apache.activemq.command.ShutdownInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.command.ShutdownInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker:void access$100(org.apache.activemq.broker.TransactionBroker,org.apache.activemq.transaction.XATransaction)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker$1:void recover(org.apache.activemq.command.XATransactionId,org.apache.activemq.command.Message[],org.apache.activemq.command.MessageAck[])"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransactionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.TransactionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.BrokerFilter:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.TransactionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.BrokerFilter:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTransportConnector:org.apache.activemq.broker.Connection createConnection(org.apache.activemq.transport.Transport)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnector$1$1:void run()"
        ]
    },
    "org.apache.activemq.transport.TransportLoggerFactory:org.apache.activemq.transport.TransportLogger createTransportLogger(org.apache.activemq.transport.Transport,int,org.slf4j.Logger,java.lang.String,boolean,boolean,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportLoggerFactory:org.apache.activemq.transport.TransportLogger createTransportLogger(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.TransportLoggerFactory:org.apache.activemq.transport.TransportLogger createTransportLogger(org.apache.activemq.transport.Transport,java.lang.String,boolean,boolean,int)",
            "org.apache.activemq.transport.TransportLoggerFactory:org.apache.activemq.transport.TransportLogger createTransportLogger(org.apache.activemq.transport.Transport,org.slf4j.Logger)"
        ]
    },
    "org.apache.activemq.pool.PooledConnectionFactoryBean:void preDestroy()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.TransportLogger:void finalize()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:boolean removeNetworkConnector(org.apache.activemq.network.NetworkConnector)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:boolean removeNetworkConnector(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:boolean removeConnector(org.apache.activemq.broker.TransportConnector)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:boolean removeConnector(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.thread.DefaultThreadPools:void shutdown()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.AbstractTempRegion:void access$000(org.apache.activemq.broker.region.AbstractTempRegion)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractTempRegion$1:void run()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.network.NetworkConnector addNetworkConnector(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.LdapNetworkConnector:void addConnector(javax.naming.directory.SearchResult)",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.network.NetworkConnector addNetworkConnector(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.TransportConnector:void addPeerBroker(org.apache.activemq.command.BrokerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnector:org.apache.activemq.command.ConnectionControl getConnectionControl()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.TransportConnector:void updateClientClusterInfo()"
        ]
    },
    "org.apache.activemq.broker.TransportConnector:void removePeerBroker(org.apache.activemq.command.BrokerInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:java.util.LinkedList pageInList(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void reset()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void reset()",
            "org.apache.activemq.broker.region.TopicSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:int matched()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:int getPendingQueueSize()",
            "org.apache.activemq.broker.region.TopicSubscription:java.lang.String toString()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void remove(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.security.CachedLDAPAuthorizationMap:void afterPropertiesSet()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.network.jms.JmsConnector addJmsConnector(org.apache.activemq.network.jms.JmsConnector)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void processHelperProperties()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void setNetworkConnectors(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:java.net.URI getVmConnectorURI()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:java.net.URI getVmConnectorURI()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void setProxyConnectors(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.proxy.ProxyConnector addProxyConnector(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.proxy.ProxyConnector addProxyConnector(java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransportFactory:org.apache.activemq.transport.fanout.FanoutTransport createTransport(java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.fanout.FanoutTransportFactory:org.apache.activemq.transport.Transport createTransport(java.net.URI)"
        ]
    },
    "org.apache.activemq.memory.CacheEvictionUsageListener:void <init>(org.apache.activemq.usage.Usage,int,int,org.apache.activemq.thread.TaskRunnerFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSessionExecutor:void wakeup()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSessionExecutor:void executeFirst(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQSessionExecutor:void execute(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQSessionExecutor:void start()",
            "org.apache.activemq.ActiveMQSessionExecutor:void setDispatchedBySessionPool(boolean)",
            "org.apache.activemq.ActiveMQMessageConsumer:void start()"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransport:void wakeup()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void start()"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransportFactory:org.apache.activemq.transport.failover.FailoverTransport createTransport(java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.discovery.DiscoveryTransportFactory:org.apache.activemq.transport.Transport createTransport(org.apache.activemq.util.URISupport$CompositeData)",
            "org.apache.activemq.transport.failover.FailoverTransportFactory:org.apache.activemq.transport.Transport createTransport(org.apache.activemq.util.URISupport$CompositeData)"
        ]
    },
    "org.apache.activemq.network.MBeanBridgeDestination:void access$000(org.apache.activemq.network.MBeanBridgeDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.MBeanBridgeDestination$1:void run()"
        ]
    },
    "org.apache.activemq.network.jms.JmsConnector$3:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.jms.JmsConnector$4:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.jms.JmsConnector$2:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.network.jms.JmsConnector$5:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.stomp.StompInactivityMonitor:void startMonitoring()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void configureInactivityMonitor(java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.InactivityMonitor:void startMonitorThreads()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.transport.InactivityMonitor:void processOutboundWireFormatInfo(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.InactivityMonitor:void processInboundWireFormatInfo(org.apache.activemq.command.WireFormatInfo)"
        ]
    },
    "org.apache.activemq.leveldb.replicated.groups.ZKClient:void connect()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.leveldb.replicated.groups.ZKClient$ExpiredSessionRecovery:void run()",
            "org.apache.activemq.leveldb.replicated.groups.ZKClient:void doStart()",
            "org.apache.activemq.leveldb.replicated.groups.ZKClient:void tryConnect()"
        ]
    },
    "org.apache.activemq.leveldb.replicated.groups.ZKClient:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore:void doStop(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void triggerStartAsyncNetworkBridgeCreation()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void stopAsync()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processShutdown(org.apache.activemq.command.ShutdownInfo)",
            "org.apache.activemq.broker.jmx.ManagedTransportConnection:void stopAsync()",
            "org.apache.activemq.broker.TransportConnection:void stop()",
            "org.apache.activemq.broker.TransportConnection:void serviceTransportException(java.io.IOException)",
            "org.apache.activemq.broker.TransportConnection:void serviceException(java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection$3:void run()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void delayedStop(int,java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.transport.nio.NIOSSLTransport:void doHandshake()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void serviceRead()",
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:org.apache.activemq.store.jdbc.JDBCAdapter createAdapter()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:org.apache.activemq.store.jdbc.JDBCAdapter getAdapter()"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:org.apache.activemq.broker.Locker createDefaultLocker()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.LockableServiceSupport:org.apache.activemq.broker.Locker getLocker()"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void replayAcknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void recover(org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCMessageStore:void recordDestinationCreation(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCMessageStore:void <init>(org.apache.activemq.store.jdbc.JDBCPersistenceAdapter,org.apache.activemq.store.jdbc.JDBCAdapter,org.apache.activemq.wireformat.WireFormat,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.ActiveMQMessageAudit)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:void replayRemoveMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$7:java.util.concurrent.Future run(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$4:void run(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void removeMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.AbstractMessageStore:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void removeMessage(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$6:java.util.concurrent.Future run(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.ProxyMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void commitRemove(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore:void rollback(org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore$3:void run(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.AbstractMessageStore:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.AbstractMessageStore:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.AbstractMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,boolean)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void addMessage(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore:java.util.concurrent.Future asyncAddQueueMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void addMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:java.util.concurrent.Future asyncAddTopicMessage(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$3:void run(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$3:java.util.concurrent.Future run(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:long[] getCachedStoreSequenceId(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void rollbackLastAck(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.jdbc.JDBCTopicMessageStore,org.apache.activemq.command.MessageAck,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:long[] getStoreSequenceIdForMessageId(org.apache.activemq.command.MessageId,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.jdbc.JDBCMessageStore:void setBatch(org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void initSequenceIdGenerator()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void createMessageAudit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void doStart()"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalTopicMessageStore$2:void execute()",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.TopicMessageStore,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void replayAcknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore$8:java.util.concurrent.Future run(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void acknowledge(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.TopicMessageStore,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$5:void run(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore$5:void run(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore:void acknowledge(org.apache.activemq.store.TopicMessageStore,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void acknowledge(org.apache.activemq.store.TopicMessageStore,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void commitLastAck(org.apache.activemq.broker.ConnectionContext,long,long,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore$4:void run(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void rollbackLastAck(org.apache.activemq.broker.ConnectionContext,byte,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore$4:void rollback(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void rollbackLastAck(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.jdbc.JDBCTopicMessageStore,org.apache.activemq.command.MessageAck,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore$5:void rollback(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:long getLastMessageBrokerSequenceId()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:long getLastMessageBrokerSequenceId()"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCMessageStore:void addMessageReference(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageId,long,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCMessageStore:int getMessageCount()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyMessageStore:int getMessageCount()",
            "org.apache.activemq.store.AbstractMessageStore:boolean isEmpty()",
            "org.apache.activemq.store.journal.JournalMessageStore:int getMessageCount()",
            "org.apache.activemq.store.ProxyTopicMessageStore:int getMessageCount()"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void deleteAllMessages()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void deleteAllMessages()"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void init()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.LockableServiceSupport:void preStart()"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void cleanup()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter$3:void run()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:boolean doCheckpoint()"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void commitAdd(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore:void rollback(org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore$1:void run(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore$2:void run(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:java.util.Set getDestinations()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:java.util.Set getDestinations()"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCMessageStore:java.lang.String getMessageReference(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.ProxyTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:void replayRemoveMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.journal.JournalMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.ProxyMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.journal.JournalMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:long getLastProducerSequenceId(org.apache.activemq.command.ProducerId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void beginTransaction(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void beginTransaction(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore:void prepare(org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore:void rollback(org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$Tx:void commit()"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void removeConsumerDestination(org.apache.activemq.command.ActiveMQQueue)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void removeQueueMessageStore(org.apache.activemq.command.ActiveMQQueue)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:void addSubscription(org.apache.activemq.command.SubscriptionInfo,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void addSubscription(org.apache.activemq.command.SubscriptionInfo,boolean)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void addSubscription(org.apache.activemq.command.SubscriptionInfo,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQSessionExecutor:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void dispose()",
            "org.apache.activemq.ActiveMQSession:void stop()"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void <init>(org.apache.activemq.broker.Broker,java.lang.String,java.lang.String,int,org.apache.activemq.broker.region.DurableTopicSubscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo,boolean)",
            "org.apache.activemq.broker.region.policy.StorePendingDurableSubscriberMessageStoragePolicy:org.apache.activemq.broker.region.cursors.PendingMessageCursor getSubscriberPendingMessageCursor(org.apache.activemq.broker.Broker,java.lang.String,java.lang.String,int,org.apache.activemq.broker.region.DurableTopicSubscription)"
        ]
    },
    "org.apache.activemq.broker.region.policy.FilePendingDurableSubscriberMessageStoragePolicy:org.apache.activemq.broker.region.cursors.PendingMessageCursor getSubscriberPendingMessageCursor(org.apache.activemq.broker.Broker,java.lang.String,java.lang.String,int,org.apache.activemq.broker.region.DurableTopicSubscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.policy.FilePendingSubscriberMessageStoragePolicy:org.apache.activemq.broker.region.cursors.PendingMessageCursor getSubscriberPendingMessageCursor(org.apache.activemq.broker.Broker,java.lang.String,int,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.policy.FilePendingQueueMessageStoragePolicy:org.apache.activemq.broker.region.cursors.PendingMessageCursor getQueuePendingMessageCursor(org.apache.activemq.broker.Broker,org.apache.activemq.broker.region.Queue)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ManagementContext:java.util.Set queryNames(javax.management.ObjectName,javax.management.QueryExp)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ConnectionView:javax.management.ObjectName[] getProducers()",
            "org.apache.activemq.broker.jmx.SubscriptionView:javax.management.ObjectName getConnection()",
            "org.apache.activemq.broker.jmx.ConnectionView:javax.management.ObjectName[] getConsumers()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagementContext:java.lang.Object getAttribute(javax.management.ObjectName,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ManagementContext:javax.management.ObjectInstance getObjectInstance(javax.management.ObjectName)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ManagementContext:javax.management.ObjectInstance registerMBean(java.lang.Object,javax.management.ObjectName)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.AsyncAnnotatedMBean:void registerMBean(java.util.concurrent.ExecutorService,long,org.apache.activemq.broker.jmx.ManagementContext,java.lang.Object,javax.management.ObjectName)",
            "org.apache.activemq.broker.jmx.AnnotatedMBean:void registerMBean(org.apache.activemq.broker.jmx.ManagementContext,java.lang.Object,javax.management.ObjectName)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagementContext:java.lang.Object newProxyInstance(javax.management.ObjectName,java.lang.Class,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.plugin.StatisticsBroker:org.apache.activemq.broker.jmx.BrokerViewMBean getBrokerView()",
            "org.apache.activemq.plugin.StatisticsBroker:void sendSubStats(org.apache.activemq.broker.ConnectionContext,javax.management.ObjectName[],org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printSubscribers(java.io.PrintWriter,java.util.Map,java.util.Map,java.lang.String,javax.management.ObjectName[])",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:org.apache.activemq.broker.jmx.BrokerViewMBean getBrokerView()"
        ]
    },
    "org.apache.activemq.command.ShutdownInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.transport.TransportLoggerFactory:org.apache.activemq.transport.TransportLogger createTransportLogger(org.apache.activemq.transport.Transport)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportLoggerFactorySPI:org.apache.activemq.transport.Transport createTransportLogger(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.http.HttpTransportFactory:org.apache.activemq.transport.Transport compositeConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)"
        ]
    },
    "org.apache.activemq.transport.TransportLoggerFactory:org.apache.activemq.transport.TransportLogger createTransportLogger(org.apache.activemq.transport.Transport,java.lang.String,boolean,boolean,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportLoggerFactorySPI:org.apache.activemq.transport.Transport createTransportLogger(org.apache.activemq.transport.Transport,java.lang.String,boolean,boolean,int)"
        ]
    },
    "org.apache.activemq.transport.TransportLoggerFactory:org.apache.activemq.transport.TransportLogger createTransportLogger(org.apache.activemq.transport.Transport,org.slf4j.Logger)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:boolean removeNetworkConnector(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:boolean removeConnector(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.AbstractTempRegion$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.network.NetworkConnector addNetworkConnector(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.DefaultBrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.net.URI)",
            "org.apache.activemq.broker.jmx.BrokerView:java.lang.String addNetworkConnector(java.lang.String)",
            "org.apache.activemq.broker.BrokerService:void processHelperProperties()",
            "org.apache.activemq.transport.peer.PeerTransportFactory$2:org.apache.activemq.broker.BrokerService createBroker(java.net.URI)"
        ]
    },
    "org.apache.activemq.broker.TransportConnector:void updateClientClusterInfo()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TopicSubscription:int getPendingQueueSize()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.SubscriptionView:int getPendingQueueSize()"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.slf4j.helpers.MessageFormatter:void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void processHelperProperties()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void start()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.proxy.ProxyConnector addProxyConnector(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.DefaultBrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransportFactory:org.apache.activemq.transport.Transport createTransport(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.fanout.FanoutTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)",
            "org.apache.activemq.transport.fanout.FanoutTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.ActiveMQSessionExecutor:void executeFirst(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void redispatch(org.apache.activemq.ActiveMQDispatcher,org.apache.activemq.MessageDispatchChannel)"
        ]
    },
    "org.apache.activemq.ActiveMQSessionExecutor:void execute(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void dispatch(org.apache.activemq.command.MessageDispatch)"
        ]
    },
    "org.apache.activemq.ActiveMQSessionExecutor:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void start()"
        ]
    },
    "org.apache.activemq.ActiveMQSessionExecutor:void setDispatchedBySessionPool(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void setMessageListener(javax.jms.MessageListener)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void rollback()",
            "org.apache.activemq.ActiveMQMessageConsumer$7:void run()",
            "org.apache.activemq.ActiveMQMessageConsumer:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean,javax.jms.MessageListener)"
        ]
    },
    "org.apache.activemq.transport.discovery.DiscoveryTransportFactory:org.apache.activemq.transport.Transport createTransport(org.apache.activemq.util.URISupport$CompositeData)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.failover.FailoverTransportFactory:org.apache.activemq.transport.Transport createTransport(org.apache.activemq.util.URISupport$CompositeData)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)",
            "org.apache.activemq.transport.failover.FailoverTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.network.MBeanBridgeDestination$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.SchedulerTimerTask:void run()"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void configureInactivityMonitor(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompConnect(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.InactivityMonitor:void processOutboundWireFormatInfo(org.apache.activemq.command.WireFormatInfo)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)"
        ]
    },
    "org.apache.activemq.leveldb.replicated.groups.ZKClient$ExpiredSessionRecovery:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.leveldb.replicated.groups.ZKClient:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.leveldb.replicated.groups.ZKClient:void start()"
        ]
    },
    "org.apache.activemq.leveldb.replicated.groups.ZKClient:void tryConnect()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.leveldb.replicated.groups.ZKClient:void process(org.apache.zookeeper.WatchedEvent)"
        ]
    },
    "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:org.apache.activemq.store.jdbc.JDBCAdapter getAdapter()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void deleteAllMessages()",
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:org.apache.activemq.store.TopicMessageStore createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)",
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:long getLastProducerSequenceId(org.apache.activemq.command.ProducerId)",
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void cleanup()",
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:long getLastMessageBrokerSequenceId()",
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void initSequenceIdGenerator()",
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void recover(org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore)",
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void rollbackLastAck(org.apache.activemq.broker.ConnectionContext,byte,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String)",
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void init()",
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void commitAdd(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void removeConsumerDestination(org.apache.activemq.command.ActiveMQQueue)",
            "org.apache.activemq.store.journal.JournalPersistenceAdapterFactory:org.apache.activemq.store.jdbc.JDBCAdapter getAdapter()",
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void createMessageAudit()",
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:org.apache.activemq.store.MessageStore createQueueMessageStore(org.apache.activemq.command.ActiveMQQueue)",
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:java.util.Set getDestinations()",
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void rollbackLastAck(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.jdbc.JDBCTopicMessageStore,org.apache.activemq.command.MessageAck,java.lang.String,java.lang.String)",
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void commitRemove(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void commitLastAck(org.apache.activemq.broker.ConnectionContext,long,long,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.LockableServiceSupport:org.apache.activemq.broker.Locker getLocker()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.LockableServiceSupport:void postStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.broker.LockableServiceSupport:void preStart()",
            "org.apache.activemq.broker.LockableServiceSupport:void keepLockAlive()",
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:org.apache.activemq.broker.Locker getDatabaseLocker()",
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void setLockAcquireSleepInterval(long)",
            "org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter:void setDatabaseLockedWaitDelay(int)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCMessageStore:void <init>(org.apache.activemq.store.jdbc.JDBCPersistenceAdapter,org.apache.activemq.store.jdbc.JDBCAdapter,org.apache.activemq.wireformat.WireFormat,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.ActiveMQMessageAudit)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:void <init>(org.apache.activemq.store.jdbc.JDBCPersistenceAdapter,org.apache.activemq.store.jdbc.JDBCAdapter,org.apache.activemq.wireformat.WireFormat,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.ActiveMQMessageAudit)",
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:org.apache.activemq.store.MessageStore createQueueMessageStore(org.apache.activemq.command.ActiveMQQueue)"
        ]
    },
    "org.apache.activemq.store.AbstractMessageStore:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.kahadb.KahaDBTransactionStore:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.Queue:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.store.kahadb.MultiKahaDBTransactionStore:void removeAsyncMessage(org.apache.activemq.store.TransactionStore,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.ProxyMessageStore:void removeAsyncMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore:void rollback(org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore$3:void run(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.JDBCMessageStore:void setBatch(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyTopicMessageStore:void setBatch(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.ProxyMessageStore:void setBatch(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.journal.JournalMessageStore:void setBatch(org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void start()"
        ]
    },
    "org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore$4:void run(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore$4:void rollback(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore$5:void rollback(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter:long getLastMessageBrokerSequenceId()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.AbstractMessageStore:boolean isEmpty()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.ProxyMessageStore:boolean isEmpty()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:boolean isStoreEmpty()",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:boolean isStoreEmpty()",
            "org.apache.activemq.store.ProxyTopicMessageStore:boolean isEmpty()"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter:void deleteAllMessages()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter$3:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter:boolean doCheckpoint()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter$2:boolean iterate()"
        ]
    },
    "org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore$1:void run(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore$2:void run(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter:java.util.Set getDestinations()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter:void beginTransaction(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.TransactionTemplate:void run(org.apache.activemq.util.Callback)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()"
        ]
    },
    "org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore:void prepare(org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$Tx:void commit()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void removeQueueMessageStore(org.apache.activemq.command.ActiveMQQueue)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:void stop()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void setMessageListener(javax.jms.MessageListener)"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.policy.StorePendingDurableSubscriberMessageStoragePolicy:org.apache.activemq.broker.region.cursors.PendingMessageCursor getSubscriberPendingMessageCursor(org.apache.activemq.broker.Broker,java.lang.String,java.lang.String,int,org.apache.activemq.broker.region.DurableTopicSubscription)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ConnectionView:javax.management.ObjectName[] getProducers()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.SubscriptionView:javax.management.ObjectName getConnection()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ConnectionView:javax.management.ObjectName[] getConsumers()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.AsyncAnnotatedMBean:void registerMBean(java.util.concurrent.ExecutorService,long,org.apache.activemq.broker.jmx.ManagementContext,java.lang.Object,javax.management.ObjectName)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void addInactiveSubscription(org.apache.activemq.util.SubscriptionKey,org.apache.activemq.command.SubscriptionInfo,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName registerSlowConsumerStrategy(org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void registerProducer(javax.management.ObjectName,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.jmx.ProducerView)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void registerSubscription(javax.management.ObjectName,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.util.SubscriptionKey,org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void registerRecoveredTransactionMBean(org.apache.activemq.transaction.XATransaction)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void registerDestination(javax.management.ObjectName,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.jmx.DestinationView)"
        ]
    },
    "org.apache.activemq.broker.jmx.AnnotatedMBean:void registerMBean(org.apache.activemq.broker.jmx.ManagementContext,java.lang.Object,javax.management.ObjectName)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.network.MBeanBridgeDestination:void onInboundMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.network.MBeanNetworkListener:void onStart(org.apache.activemq.network.NetworkBridge)",
            "org.apache.activemq.transport.TransportLoggerFactory:void createTransportLoggerControl(int)",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector registerConnectorMBean(org.apache.activemq.broker.TransportConnector)",
            "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore:void init()",
            "org.apache.activemq.leveldb.LevelDBStore:void doStart()",
            "org.apache.activemq.broker.BrokerService:void registerNetworkConnectorMBean(org.apache.activemq.network.NetworkConnector)",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker addInterceptors(org.apache.activemq.broker.Broker)",
            "org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter:void doStart()",
            "org.apache.activemq.network.MBeanBridgeDestination:void onOutboundMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerService:void registerJmsConnectorMBean(org.apache.activemq.network.jms.JmsConnector)",
            "org.apache.activemq.broker.BrokerService:void registerProxyConnectorMBean(org.apache.activemq.proxy.ProxyConnector)",
            "org.apache.activemq.broker.jmx.ManagedTransportConnection:void registerMBean(javax.management.ObjectName)",
            "org.apache.activemq.transport.TransportLoggerView:void register()",
            "org.apache.activemq.broker.BrokerService:void startManagementContext()",
            "org.apache.activemq.network.NetworkConnector:void registerNetworkBridgeMBean(org.apache.activemq.network.NetworkBridge)"
        ]
    },
    "org.apache.activemq.plugin.StatisticsBroker:org.apache.activemq.broker.jmx.BrokerViewMBean getBrokerView()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.plugin.StatisticsBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printSubscribers(java.io.PrintWriter,java.util.Map,java.util.Map,java.lang.String,javax.management.ObjectName[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void generateFile(java.io.PrintWriter)"
        ]
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:org.apache.activemq.broker.jmx.BrokerViewMBean getBrokerView()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void generateFile(java.io.PrintWriter)"
        ]
    },
    "org.apache.activemq.transport.TransportLoggerFactorySPI:org.apache.activemq.transport.Transport createTransportLogger(org.apache.activemq.transport.Transport)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.http.HttpTransportFactory:org.apache.activemq.transport.Transport compositeConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.http.HttpTransportFactory:org.apache.activemq.transport.Transport serverConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.HashMap)"
        ]
    },
    "org.apache.activemq.transport.TransportLoggerFactorySPI:org.apache.activemq.transport.Transport createTransportLogger(org.apache.activemq.transport.Transport,java.lang.String,boolean,boolean,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.SubscriptionView:int getPendingQueueSize()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.fanout.FanoutTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.fanout.FanoutTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:void redispatch(org.apache.activemq.ActiveMQDispatcher,org.apache.activemq.MessageDispatchChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void rollback()",
            "org.apache.activemq.ActiveMQMessageConsumer:void setMessageListener(javax.jms.MessageListener)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void dispatch(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer$6:void run()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.SessionId,int,boolean,boolean)",
            "org.apache.activemq.ActiveMQMessageConsumer:void setMessageListener(javax.jms.MessageListener)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void setMessageListener(javax.jms.MessageListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.jms.pool.PooledSession:void setMessageListener(javax.jms.MessageListener)",
            "org.apache.activemq.ActiveMQTopicSession:void setMessageListener(javax.jms.MessageListener)",
            "org.apache.activemq.jms.pool.PooledSession:void close()",
            "org.apache.activemq.ActiveMQQueueSession:void setMessageListener(javax.jms.MessageListener)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer$7:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.SchedulerTimerTask:void run()"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.transport.failover.FailoverTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.leveldb.replicated.groups.ZKClient:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore:void init()"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:org.apache.activemq.store.TopicMessageStore createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:org.apache.activemq.store.TopicMessageStore createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapterFactory:org.apache.activemq.store.jdbc.JDBCAdapter getAdapter()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:org.apache.activemq.store.MessageStore createQueueMessageStore(org.apache.activemq.command.ActiveMQQueue)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:org.apache.activemq.store.MessageStore createQueueMessageStore(org.apache.activemq.command.ActiveMQQueue)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:org.apache.activemq.broker.Locker getDatabaseLocker()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void setLockAcquireSleepInterval(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter:void setDatabaseLockedWaitDelay(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:void <init>(org.apache.activemq.store.jdbc.JDBCPersistenceAdapter,org.apache.activemq.store.jdbc.JDBCAdapter,org.apache.activemq.wireformat.WireFormat,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.ActiveMQMessageAudit)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:org.apache.activemq.store.TopicMessageStore createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter$2:boolean iterate()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void setMessageListener(javax.jms.MessageListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.advisory.DestinationSource:void start()",
            "org.apache.activemq.ActiveMQMessageConsumer:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean,javax.jms.MessageListener)",
            "org.apache.activemq.jms.pool.PooledMessageConsumer:void setMessageListener(javax.jms.MessageListener)"
        ]
    },
    "org.apache.activemq.network.MBeanBridgeDestination:void onInboundMessage(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector registerConnectorMBean(org.apache.activemq.broker.TransportConnector)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector startTransportConnector(org.apache.activemq.broker.TransportConnector)"
        ]
    },
    "org.apache.activemq.leveldb.replicated.ElectingLevelDBStore:void init()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.leveldb.LevelDBStore:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.leveldb.replicated.MasterLevelDBStore:void doStart()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void registerNetworkConnectorMBean(org.apache.activemq.network.NetworkConnector)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void start()",
            "org.apache.activemq.broker.jmx.BrokerView:java.lang.String addNetworkConnector(java.lang.String)"
        ]
    },
    "org.apache.activemq.network.MBeanBridgeDestination:void onOutboundMessage(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:void registerJmsConnectorMBean(org.apache.activemq.network.jms.JmsConnector)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.network.jms.JmsConnector addJmsConnector(org.apache.activemq.network.jms.JmsConnector)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void registerProxyConnectorMBean(org.apache.activemq.proxy.ProxyConnector)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.proxy.ProxyConnector addProxyConnector(org.apache.activemq.proxy.ProxyConnector)"
        ]
    },
    "org.apache.activemq.transport.TransportLoggerView:void register()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportLoggerView:void <init>(org.apache.activemq.transport.TransportLogger,java.lang.String,int,org.apache.activemq.broker.jmx.ManagementContext)"
        ]
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void generateFile(java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.broker.view.DotFileInterceptorSupport:void generateFile()"
        ]
    },
    "org.apache.activemq.transport.http.HttpTransportFactory:org.apache.activemq.transport.Transport serverConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.HashMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQMessageConsumer$6:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.thread.SchedulerTimerTask:void run()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.SessionId,int,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.SessionId,int,boolean)",
            "org.apache.activemq.ActiveMQConnection:javax.jms.Session createSession(boolean,int)"
        ]
    },
    "org.apache.activemq.jms.pool.PooledSession:void setMessageListener(javax.jms.MessageListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQTopicSession:void setMessageListener(javax.jms.MessageListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueSession:void setMessageListener(javax.jms.MessageListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter:org.apache.activemq.store.TopicMessageStore createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:org.apache.activemq.store.MessageStore createMessageStore(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter:org.apache.activemq.store.MessageStore createQueueMessageStore(org.apache.activemq.command.ActiveMQQueue)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:org.apache.activemq.store.MessageStore createMessageStore(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.jms.pool.PooledMessageConsumer:void setMessageListener(javax.jms.MessageListener)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": []
    },
    "org.apache.activemq.leveldb.replicated.MasterLevelDBStore:void doStart()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void start()"
        ]
    },
    "org.apache.activemq.transport.TransportLoggerView:void <init>(org.apache.activemq.transport.TransportLogger,java.lang.String,int,org.apache.activemq.broker.jmx.ManagementContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.transport.TransportLoggerFactory:org.apache.activemq.transport.TransportLogger createTransportLogger(org.apache.activemq.transport.Transport,int,org.slf4j.Logger,java.lang.String,boolean,boolean,int)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.SessionId,int,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQXASession:void <init>(org.apache.activemq.ActiveMQXAConnection,org.apache.activemq.command.SessionId,int,boolean)"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter:org.apache.activemq.store.MessageStore createMessageStore(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void recover()"
        ]
    },
    "org.apache.activemq.ActiveMQXASession:void <init>(org.apache.activemq.ActiveMQXAConnection,org.apache.activemq.command.SessionId,int,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ],
        "vulCaller": [
            "org.apache.activemq.ActiveMQXAConnection:javax.jms.Session createSession(boolean,int)"
        ]
    }
}