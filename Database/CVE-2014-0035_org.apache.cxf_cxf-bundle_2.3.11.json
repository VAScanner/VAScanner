{
    "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()": {
        "isVulRoot": true,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void handleBinding()"
        ]
    },
    "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void handleBinding()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.ws.security.wss4j.PolicyBasedWSS4JOutInterceptor$PolicyBasedWSS4JOutInterceptorInternal:void handleMessage(org.apache.cxf.binding.soap.SoapMessage)"
        ]
    },
    "org.apache.cxf.ws.security.wss4j.PolicyBasedWSS4JOutInterceptor$PolicyBasedWSS4JOutInterceptorInternal:void handleMessage(org.apache.cxf.binding.soap.SoapMessage)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.ws.security.wss4j.PolicyBasedWSS4JOutInterceptor$PolicyBasedWSS4JOutInterceptorInternal:void handleMessage(org.apache.cxf.message.Message)"
        ]
    },
    "org.apache.cxf.ws.security.wss4j.PolicyBasedWSS4JOutInterceptor$PolicyBasedWSS4JOutInterceptorInternal:void handleMessage(org.apache.cxf.message.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.phase.PhaseInterceptorChain:boolean doIntercept(org.apache.cxf.message.Message)"
        ]
    },
    "org.apache.cxf.phase.PhaseInterceptorChain:boolean doIntercept(org.apache.cxf.message.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.binding.coloc.ColocInInterceptor:void handleMessage(org.apache.cxf.message.Message)",
            "org.apache.cxf.endpoint.ClientImpl:void invoke(org.apache.cxf.endpoint.ClientCallback,org.apache.cxf.service.model.BindingOperationInfo,java.lang.Object[],java.util.Map,org.apache.cxf.message.Exchange)",
            "org.apache.cxf.phase.PhaseInterceptorChain:boolean doInterceptStartingAfter(org.apache.cxf.message.Message,java.lang.String)",
            "org.apache.cxf.binding.coloc.ColocOutInterceptor:void invokeInboundChain(org.apache.cxf.message.Exchange,org.apache.cxf.endpoint.Endpoint)",
            "org.apache.cxf.transport.MultipleEndpointObserver:void onMessage(org.apache.cxf.message.Message)",
            "org.apache.cxf.endpoint.ClientImpl:java.lang.Object[] invoke(org.apache.cxf.service.model.BindingOperationInfo,java.lang.Object[],java.util.Map,org.apache.cxf.message.Exchange)",
            "org.apache.cxf.endpoint.ClientImpl:void onMessage(org.apache.cxf.message.Message)",
            "org.apache.cxf.phase.PhaseInterceptorChain:void resume()",
            "org.apache.cxf.phase.PhaseInterceptorChain:boolean doInterceptStartingAt(org.apache.cxf.message.Message,java.lang.String)",
            "org.apache.cxf.binding.coloc.ColocMessageObserver:void onMessage(org.apache.cxf.message.Message)",
            "org.apache.cxf.ws.addressing.ContextUtils:void rebaseResponse(org.apache.cxf.ws.addressing.EndpointReferenceType,org.apache.cxf.ws.addressing.AddressingProperties,org.apache.cxf.message.Message)",
            "org.apache.cxf.jaxws.handler.logical.LogicalHandlerInInterceptor:void handleAbort(org.apache.cxf.message.Message,org.apache.cxf.staxutils.W3CDOMStreamWriter)",
            "org.apache.cxf.transport.ChainInitiationObserver:void onMessage(org.apache.cxf.message.Message)",
            "org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver:void onMessage(org.apache.cxf.message.Message)",
            "org.apache.cxf.jaxrs.client.ClientMessageObserver:void onMessage(org.apache.cxf.message.Message)",
            "org.apache.cxf.interceptor.OutgoingChainInterceptor:void handleMessage(org.apache.cxf.message.Message)"
        ]
    },
    "org.apache.cxf.binding.coloc.ColocInInterceptor:void handleMessage(org.apache.cxf.message.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": []
    },
    "org.apache.cxf.endpoint.ClientImpl:void invoke(org.apache.cxf.endpoint.ClientCallback,org.apache.cxf.service.model.BindingOperationInfo,java.lang.Object[],java.util.Map,org.apache.cxf.message.Exchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.endpoint.ClientImpl:void invoke(org.apache.cxf.endpoint.ClientCallback,org.apache.cxf.service.model.BindingOperationInfo,java.lang.Object[])",
            "org.apache.cxf.endpoint.ClientImpl:void invoke(org.apache.cxf.endpoint.ClientCallback,org.apache.cxf.service.model.BindingOperationInfo,java.lang.Object[],java.util.Map)",
            "org.apache.cxf.endpoint.ClientImpl:void invoke(org.apache.cxf.endpoint.ClientCallback,org.apache.cxf.service.model.BindingOperationInfo,java.lang.Object[],org.apache.cxf.message.Exchange)"
        ]
    },
    "org.apache.cxf.phase.PhaseInterceptorChain:boolean doInterceptStartingAfter(org.apache.cxf.message.Message,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.endpoint.ClientImpl:void onMessage(org.apache.cxf.message.Message)",
            "org.apache.cxf.jaxws.handler.soap.SOAPHandlerInterceptor:void handleAbort(org.apache.cxf.binding.soap.SoapMessage,javax.xml.ws.handler.MessageContext)"
        ]
    },
    "org.apache.cxf.binding.coloc.ColocOutInterceptor:void invokeInboundChain(org.apache.cxf.message.Exchange,org.apache.cxf.endpoint.Endpoint)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.binding.coloc.ColocOutInterceptor:void handleMessage(org.apache.cxf.message.Message)"
        ]
    },
    "org.apache.cxf.transport.MultipleEndpointObserver:void onMessage(org.apache.cxf.message.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": []
    },
    "org.apache.cxf.endpoint.ClientImpl:java.lang.Object[] invoke(org.apache.cxf.service.model.BindingOperationInfo,java.lang.Object[],java.util.Map,org.apache.cxf.message.Exchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.endpoint.ClientImpl:java.lang.Object[] invoke(org.apache.cxf.service.model.BindingOperationInfo,java.lang.Object[],org.apache.cxf.message.Exchange)",
            "org.apache.cxf.endpoint.ClientImpl:java.lang.Object[] invoke(org.apache.cxf.service.model.BindingOperationInfo,java.lang.Object[],java.util.Map)"
        ]
    },
    "org.apache.cxf.endpoint.ClientImpl:void onMessage(org.apache.cxf.message.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.endpoint.ClientImpl$1$1:void run()",
            "org.apache.cxf.endpoint.ClientImpl$1:void onMessage(org.apache.cxf.message.Message)",
            "org.apache.cxf.ws.rm.Proxy$RMClient:void onMessage(org.apache.cxf.message.Message)"
        ]
    },
    "org.apache.cxf.phase.PhaseInterceptorChain:void resume()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": []
    },
    "org.apache.cxf.phase.PhaseInterceptorChain:boolean doInterceptStartingAt(org.apache.cxf.message.Message,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.endpoint.ClientImpl:void onMessage(org.apache.cxf.message.Message)"
        ]
    },
    "org.apache.cxf.binding.coloc.ColocMessageObserver:void onMessage(org.apache.cxf.message.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.binding.coloc.ColocOutInterceptor:void invokeColocObserver(org.apache.cxf.message.Message,org.apache.cxf.endpoint.Endpoint)"
        ]
    },
    "org.apache.cxf.ws.addressing.ContextUtils:void rebaseResponse(org.apache.cxf.ws.addressing.EndpointReferenceType,org.apache.cxf.ws.addressing.AddressingProperties,org.apache.cxf.message.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.ws.addressing.MAPAggregator:boolean mediate(org.apache.cxf.message.Message,boolean)",
            "org.apache.cxf.ws.addressing.MAPAggregator:void addRoleSpecific(org.apache.cxf.ws.addressing.AddressingPropertiesImpl,org.apache.cxf.message.Message,boolean,boolean)"
        ]
    },
    "org.apache.cxf.jaxws.handler.logical.LogicalHandlerInInterceptor:void handleAbort(org.apache.cxf.message.Message,org.apache.cxf.staxutils.W3CDOMStreamWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.jaxws.handler.logical.LogicalHandlerInInterceptor:void handleMessage(org.apache.cxf.message.Message)"
        ]
    },
    "org.apache.cxf.transport.ChainInitiationObserver:void onMessage(org.apache.cxf.message.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": []
    },
    "org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver:void onMessage(org.apache.cxf.message.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.binding.coloc.ColocOutInterceptor:void invokeInboundChain(org.apache.cxf.message.Exchange,org.apache.cxf.endpoint.Endpoint)",
            "org.apache.cxf.phase.PhaseInterceptorChain:boolean doIntercept(org.apache.cxf.message.Message)"
        ]
    },
    "org.apache.cxf.jaxrs.client.ClientMessageObserver:void onMessage(org.apache.cxf.message.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": []
    },
    "org.apache.cxf.interceptor.OutgoingChainInterceptor:void handleMessage(org.apache.cxf.message.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": []
    },
    "org.apache.cxf.endpoint.ClientImpl:void invoke(org.apache.cxf.endpoint.ClientCallback,org.apache.cxf.service.model.BindingOperationInfo,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.jaxws.JaxWsClientProxy:java.lang.Object invokeAsync(java.lang.reflect.Method,org.apache.cxf.service.model.BindingOperationInfo,java.lang.Object[])",
            "org.apache.cxf.endpoint.ClientImpl:void invokeWrapped(org.apache.cxf.endpoint.ClientCallback,javax.xml.namespace.QName,java.lang.Object[])",
            "org.apache.cxf.endpoint.ClientImpl:void invoke(org.apache.cxf.endpoint.ClientCallback,javax.xml.namespace.QName,java.lang.Object[])"
        ]
    },
    "org.apache.cxf.endpoint.ClientImpl:void invoke(org.apache.cxf.endpoint.ClientCallback,org.apache.cxf.service.model.BindingOperationInfo,java.lang.Object[],java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": []
    },
    "org.apache.cxf.endpoint.ClientImpl:void invoke(org.apache.cxf.endpoint.ClientCallback,org.apache.cxf.service.model.BindingOperationInfo,java.lang.Object[],org.apache.cxf.message.Exchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": []
    },
    "org.apache.cxf.jaxws.handler.soap.SOAPHandlerInterceptor:void handleAbort(org.apache.cxf.binding.soap.SoapMessage,javax.xml.ws.handler.MessageContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.jaxws.handler.soap.SOAPHandlerInterceptor:boolean handleMessageInternal(org.apache.cxf.binding.soap.SoapMessage)"
        ]
    },
    "org.apache.cxf.binding.coloc.ColocOutInterceptor:void handleMessage(org.apache.cxf.message.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": []
    },
    "org.apache.cxf.endpoint.ClientImpl:java.lang.Object[] invoke(org.apache.cxf.service.model.BindingOperationInfo,java.lang.Object[],org.apache.cxf.message.Exchange)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.endpoint.ClientImpl:java.lang.Object[] invoke(org.apache.cxf.service.model.BindingOperationInfo,java.lang.Object[])"
        ]
    },
    "org.apache.cxf.endpoint.ClientImpl:java.lang.Object[] invoke(org.apache.cxf.service.model.BindingOperationInfo,java.lang.Object[],java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.ws.rm.Proxy:java.lang.Object invoke(org.apache.cxf.service.model.OperationInfo,java.lang.Object[],java.util.Map)"
        ]
    },
    "org.apache.cxf.endpoint.ClientImpl$1$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.workqueue.SynchronousExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.cxf.endpoint.ClientImpl$1:void onMessage(org.apache.cxf.message.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": []
    },
    "org.apache.cxf.ws.rm.Proxy$RMClient:void onMessage(org.apache.cxf.message.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.endpoint.ClientImpl$1$1:void run()",
            "org.apache.cxf.endpoint.ClientImpl$1:void onMessage(org.apache.cxf.message.Message)"
        ]
    },
    "org.apache.cxf.binding.coloc.ColocOutInterceptor:void invokeColocObserver(org.apache.cxf.message.Message,org.apache.cxf.endpoint.Endpoint)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.binding.coloc.ColocOutInterceptor:void handleMessage(org.apache.cxf.message.Message)"
        ]
    },
    "org.apache.cxf.ws.addressing.MAPAggregator:boolean mediate(org.apache.cxf.message.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.ws.addressing.MAPAggregator:void handleMessage(org.apache.cxf.message.Message)"
        ]
    },
    "org.apache.cxf.ws.addressing.MAPAggregator:void addRoleSpecific(org.apache.cxf.ws.addressing.AddressingPropertiesImpl,org.apache.cxf.message.Message,boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.ws.addressing.MAPAggregator:void aggregate(org.apache.cxf.message.Message,boolean)"
        ]
    },
    "org.apache.cxf.jaxws.handler.logical.LogicalHandlerInInterceptor:void handleMessage(org.apache.cxf.message.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": []
    },
    "org.apache.cxf.jaxws.JaxWsClientProxy:java.lang.Object invokeAsync(java.lang.reflect.Method,org.apache.cxf.service.model.BindingOperationInfo,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.jaxws.JaxWsClientProxy:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])"
        ]
    },
    "org.apache.cxf.endpoint.ClientImpl:void invokeWrapped(org.apache.cxf.endpoint.ClientCallback,javax.xml.namespace.QName,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.endpoint.ClientImpl:void invokeWrapped(org.apache.cxf.endpoint.ClientCallback,java.lang.String,java.lang.Object[])",
            "org.apache.cxf.jaxws.DispatchImpl:java.util.concurrent.Future invokeAsync(java.lang.Object,javax.xml.ws.AsyncHandler)"
        ]
    },
    "org.apache.cxf.endpoint.ClientImpl:void invoke(org.apache.cxf.endpoint.ClientCallback,javax.xml.namespace.QName,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.endpoint.ClientImpl:void invoke(org.apache.cxf.endpoint.ClientCallback,java.lang.String,java.lang.Object[])"
        ]
    },
    "org.apache.cxf.jaxws.handler.soap.SOAPHandlerInterceptor:boolean handleMessageInternal(org.apache.cxf.binding.soap.SoapMessage)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.jaxws.handler.soap.SOAPHandlerInterceptor:boolean access$000(org.apache.cxf.jaxws.handler.soap.SOAPHandlerInterceptor,org.apache.cxf.binding.soap.SoapMessage)",
            "org.apache.cxf.jaxws.handler.soap.SOAPHandlerInterceptor:void handleMessage(org.apache.cxf.binding.soap.SoapMessage)"
        ]
    },
    "org.apache.cxf.endpoint.ClientImpl:java.lang.Object[] invoke(org.apache.cxf.service.model.BindingOperationInfo,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.ws.security.trust.STSClient:org.apache.cxf.ws.security.tokenstore.SecurityToken requestSecurityToken(java.lang.String,java.lang.String,java.lang.String,org.apache.cxf.ws.security.tokenstore.SecurityToken)",
            "org.apache.cxf.ws.security.trust.STSClient:boolean validateSecurityToken(org.apache.cxf.ws.security.tokenstore.SecurityToken,java.lang.String)",
            "org.apache.cxf.frontend.ClientProxy:java.lang.Object invokeSync(java.lang.reflect.Method,org.apache.cxf.service.model.BindingOperationInfo,java.lang.Object[])",
            "org.apache.cxf.endpoint.ClientImpl:java.lang.Object[] invoke(javax.xml.namespace.QName,java.lang.Object[])",
            "org.apache.cxf.ws.security.trust.STSClient:void cancelSecurityToken(org.apache.cxf.ws.security.tokenstore.SecurityToken)",
            "org.apache.cxf.endpoint.ClientImpl:java.lang.Object[] invokeWrapped(javax.xml.namespace.QName,java.lang.Object[])"
        ]
    },
    "org.apache.cxf.ws.rm.Proxy:java.lang.Object invoke(org.apache.cxf.service.model.OperationInfo,java.lang.Object[],java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.ws.rm.Proxy:void acknowledge(org.apache.cxf.ws.rm.DestinationSequence)",
            "org.apache.cxf.ws.rm.Proxy$1:void run()",
            "org.apache.cxf.ws.rm.Proxy:void lastMessage(org.apache.cxf.ws.rm.SourceSequence)",
            "org.apache.cxf.ws.rm.Proxy:void terminate(org.apache.cxf.ws.rm.SourceSequence)",
            "org.apache.cxf.ws.rm.Proxy:org.apache.cxf.ws.rm.CreateSequenceResponseType createSequence(org.apache.cxf.ws.addressing.v200408.EndpointReferenceType,org.apache.cxf.ws.addressing.RelatesToType,boolean)",
            "org.apache.cxf.ws.rm.Proxy:void ackRequested(org.apache.cxf.ws.rm.SourceSequence)",
            "org.apache.cxf.ws.rm.Proxy:void createSequenceResponse(org.apache.cxf.ws.rm.CreateSequenceResponseType)"
        ]
    },
    "org.apache.cxf.workqueue.SynchronousExecutor:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.endpoint.ClientImpl$1:void onMessage(org.apache.cxf.message.Message)",
            "org.apache.cxf.ws.rm.Proxy:org.apache.cxf.ws.rm.CreateSequenceResponseType createSequence(org.apache.cxf.ws.addressing.v200408.EndpointReferenceType,org.apache.cxf.ws.addressing.RelatesToType,boolean)",
            "org.apache.cxf.ws.rm.soap.RetransmissionQueueImpl$ResendCandidate:void initiate(boolean)"
        ]
    },
    "org.apache.cxf.ws.addressing.MAPAggregator:void handleMessage(org.apache.cxf.message.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": []
    },
    "org.apache.cxf.ws.addressing.MAPAggregator:void aggregate(org.apache.cxf.message.Message,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.ws.addressing.MAPAggregator:boolean mediate(org.apache.cxf.message.Message,boolean)"
        ]
    },
    "org.apache.cxf.jaxws.JaxWsClientProxy:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": []
    },
    "org.apache.cxf.endpoint.ClientImpl:void invokeWrapped(org.apache.cxf.endpoint.ClientCallback,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": []
    },
    "org.apache.cxf.jaxws.DispatchImpl:java.util.concurrent.Future invokeAsync(java.lang.Object,javax.xml.ws.AsyncHandler)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.jaxws.DispatchImpl:javax.xml.ws.Response invokeAsync(java.lang.Object)"
        ]
    },
    "org.apache.cxf.endpoint.ClientImpl:void invoke(org.apache.cxf.endpoint.ClientCallback,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": []
    },
    "org.apache.cxf.jaxws.handler.soap.SOAPHandlerInterceptor:boolean access$000(org.apache.cxf.jaxws.handler.soap.SOAPHandlerInterceptor,org.apache.cxf.binding.soap.SoapMessage)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.jaxws.handler.soap.SOAPHandlerInterceptor$1:void handleMessage(org.apache.cxf.binding.soap.SoapMessage)"
        ]
    },
    "org.apache.cxf.jaxws.handler.soap.SOAPHandlerInterceptor:void handleMessage(org.apache.cxf.binding.soap.SoapMessage)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.jaxws.handler.soap.SOAPHandlerInterceptor:void handleMessage(org.apache.cxf.message.Message)"
        ]
    },
    "org.apache.cxf.ws.security.trust.STSClient:org.apache.cxf.ws.security.tokenstore.SecurityToken requestSecurityToken(java.lang.String,java.lang.String,java.lang.String,org.apache.cxf.ws.security.tokenstore.SecurityToken)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.ws.security.trust.STSClient:org.apache.cxf.ws.security.tokenstore.SecurityToken requestSecurityToken(java.lang.String)",
            "org.apache.cxf.ws.security.trust.STSClient:void renewSecurityToken(org.apache.cxf.ws.security.tokenstore.SecurityToken)"
        ]
    },
    "org.apache.cxf.ws.security.trust.STSClient:boolean validateSecurityToken(org.apache.cxf.ws.security.tokenstore.SecurityToken,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.ws.security.trust.STSClient:boolean validateSecurityToken(org.apache.cxf.ws.security.tokenstore.SecurityToken)"
        ]
    },
    "org.apache.cxf.frontend.ClientProxy:java.lang.Object invokeSync(java.lang.reflect.Method,org.apache.cxf.service.model.BindingOperationInfo,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.jaxws.JaxWsClientProxy:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.cxf.frontend.ClientProxy:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])"
        ]
    },
    "org.apache.cxf.endpoint.ClientImpl:java.lang.Object[] invoke(javax.xml.namespace.QName,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.endpoint.ClientImpl:java.lang.Object[] invoke(java.lang.String,java.lang.Object[])"
        ]
    },
    "org.apache.cxf.ws.security.trust.STSClient:void cancelSecurityToken(org.apache.cxf.ws.security.tokenstore.SecurityToken)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.ws.security.policy.interceptors.SecureConversationInInterceptor$SecureConversationCancelInterceptor:void doCancel(org.apache.cxf.binding.soap.SoapMessage,org.apache.cxf.ws.policy.AssertionInfoMap,org.apache.cxf.ws.security.policy.model.SecureConversationToken)"
        ]
    },
    "org.apache.cxf.endpoint.ClientImpl:java.lang.Object[] invokeWrapped(javax.xml.namespace.QName,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.endpoint.ClientImpl:java.lang.Object[] invokeWrapped(java.lang.String,java.lang.Object[])",
            "org.apache.cxf.jaxws.DispatchImpl:java.lang.Object invoke(java.lang.Object,boolean)"
        ]
    },
    "org.apache.cxf.ws.rm.Proxy:void acknowledge(org.apache.cxf.ws.rm.DestinationSequence)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.ws.rm.DestinationSequence$DeferredAcknowledgment:void run()",
            "org.apache.cxf.ws.rm.Destination:void ackImmediately(org.apache.cxf.ws.rm.DestinationSequence,org.apache.cxf.message.Message)",
            "org.apache.cxf.ws.rm.DestinationSequence$ImmediateFallbackAcknowledgment:void run()"
        ]
    },
    "org.apache.cxf.ws.rm.Proxy$1:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.workqueue.SynchronousExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.cxf.ws.rm.Proxy:void lastMessage(org.apache.cxf.ws.rm.SourceSequence)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.ws.rm.RMEndpoint:void shutdown()"
        ]
    },
    "org.apache.cxf.ws.rm.Proxy:void terminate(org.apache.cxf.ws.rm.SourceSequence)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.ws.rm.SourceSequence:void setAcknowledged(org.apache.cxf.ws.rm.SequenceAcknowledgement)"
        ]
    },
    "org.apache.cxf.ws.rm.Proxy:org.apache.cxf.ws.rm.CreateSequenceResponseType createSequence(org.apache.cxf.ws.addressing.v200408.EndpointReferenceType,org.apache.cxf.ws.addressing.RelatesToType,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.ws.rm.RMManager:org.apache.cxf.ws.rm.SourceSequence getSequence(org.apache.cxf.ws.rm.Identifier,org.apache.cxf.message.Message,org.apache.cxf.ws.addressing.AddressingProperties)"
        ]
    },
    "org.apache.cxf.ws.rm.Proxy:void ackRequested(org.apache.cxf.ws.rm.SourceSequence)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": []
    },
    "org.apache.cxf.ws.rm.Proxy:void createSequenceResponse(org.apache.cxf.ws.rm.CreateSequenceResponseType)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.ws.rm.RMInInterceptor:void handle(org.apache.cxf.message.Message)"
        ]
    },
    "org.apache.cxf.ws.rm.soap.RetransmissionQueueImpl$ResendCandidate:void initiate(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.ws.rm.soap.RetransmissionQueueImpl$ResendCandidate$1ResendTask:void run()"
        ]
    },
    "org.apache.cxf.jaxws.DispatchImpl:javax.xml.ws.Response invokeAsync(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": []
    },
    "org.apache.cxf.jaxws.handler.soap.SOAPHandlerInterceptor$1:void handleMessage(org.apache.cxf.binding.soap.SoapMessage)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.jaxws.handler.soap.SOAPHandlerInterceptor$1:void handleMessage(org.apache.cxf.message.Message)"
        ]
    },
    "org.apache.cxf.jaxws.handler.soap.SOAPHandlerInterceptor:void handleMessage(org.apache.cxf.message.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": []
    },
    "org.apache.cxf.ws.security.trust.STSClient:org.apache.cxf.ws.security.tokenstore.SecurityToken requestSecurityToken(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.ws.security.policy.interceptors.IssuedTokenInterceptorProvider$IssuedTokenOutInterceptor:void handleMessage(org.apache.cxf.message.Message)",
            "org.apache.cxf.ws.security.trust.STSClient:org.apache.cxf.ws.security.tokenstore.SecurityToken requestSecurityToken()",
            "org.apache.cxf.ws.security.policy.interceptors.SecureConversationOutInterceptor:org.apache.cxf.ws.security.tokenstore.SecurityToken issueToken(org.apache.cxf.binding.soap.SoapMessage,org.apache.cxf.ws.policy.AssertionInfoMap,org.apache.cxf.ws.security.policy.model.SecureConversationToken)"
        ]
    },
    "org.apache.cxf.ws.security.trust.STSClient:void renewSecurityToken(org.apache.cxf.ws.security.tokenstore.SecurityToken)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.ws.security.policy.interceptors.SecureConversationOutInterceptor:void renewToken(org.apache.cxf.binding.soap.SoapMessage,org.apache.cxf.ws.policy.AssertionInfoMap,org.apache.cxf.ws.security.tokenstore.SecurityToken,org.apache.cxf.ws.security.policy.model.SecureConversationToken)"
        ]
    },
    "org.apache.cxf.ws.security.trust.STSClient:boolean validateSecurityToken(org.apache.cxf.ws.security.tokenstore.SecurityToken)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": []
    },
    "org.apache.cxf.frontend.ClientProxy:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": []
    },
    "org.apache.cxf.endpoint.ClientImpl:java.lang.Object[] invoke(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": []
    },
    "org.apache.cxf.ws.security.policy.interceptors.SecureConversationInInterceptor$SecureConversationCancelInterceptor:void doCancel(org.apache.cxf.binding.soap.SoapMessage,org.apache.cxf.ws.policy.AssertionInfoMap,org.apache.cxf.ws.security.policy.model.SecureConversationToken)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.ws.security.policy.interceptors.SecureConversationInInterceptor$SecureConversationCancelInterceptor:void handleMessage(org.apache.cxf.binding.soap.SoapMessage)"
        ]
    },
    "org.apache.cxf.endpoint.ClientImpl:java.lang.Object[] invokeWrapped(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": []
    },
    "org.apache.cxf.jaxws.DispatchImpl:java.lang.Object invoke(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.jaxws.DispatchImpl:void invokeOneWay(java.lang.Object)",
            "org.apache.cxf.jaxws.DispatchImpl:java.lang.Object invoke(java.lang.Object)"
        ]
    },
    "org.apache.cxf.ws.rm.DestinationSequence$DeferredAcknowledgment:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": []
    },
    "org.apache.cxf.ws.rm.Destination:void ackImmediately(org.apache.cxf.ws.rm.DestinationSequence,org.apache.cxf.message.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.ws.rm.Destination:void acknowledge(org.apache.cxf.message.Message)",
            "org.apache.cxf.ws.rm.Destination:void ackRequested(org.apache.cxf.message.Message)"
        ]
    },
    "org.apache.cxf.ws.rm.DestinationSequence$ImmediateFallbackAcknowledgment:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": []
    },
    "org.apache.cxf.ws.rm.RMEndpoint:void shutdown()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": []
    },
    "org.apache.cxf.ws.rm.SourceSequence:void setAcknowledged(org.apache.cxf.ws.rm.SequenceAcknowledgement)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": []
    },
    "org.apache.cxf.ws.rm.RMManager:org.apache.cxf.ws.rm.SourceSequence getSequence(org.apache.cxf.ws.rm.Identifier,org.apache.cxf.message.Message,org.apache.cxf.ws.addressing.AddressingProperties)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.ws.rm.RMOutInterceptor:void handle(org.apache.cxf.message.Message)"
        ]
    },
    "org.apache.cxf.ws.rm.RMInInterceptor:void handle(org.apache.cxf.message.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": []
    },
    "org.apache.cxf.ws.rm.soap.RetransmissionQueueImpl$ResendCandidate$1ResendTask:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": []
    },
    "org.apache.cxf.jaxws.handler.soap.SOAPHandlerInterceptor$1:void handleMessage(org.apache.cxf.message.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.phase.PhaseInterceptorChain:boolean doIntercept(org.apache.cxf.message.Message)"
        ]
    },
    "org.apache.cxf.ws.security.policy.interceptors.IssuedTokenInterceptorProvider$IssuedTokenOutInterceptor:void handleMessage(org.apache.cxf.message.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": []
    },
    "org.apache.cxf.ws.security.trust.STSClient:org.apache.cxf.ws.security.tokenstore.SecurityToken requestSecurityToken()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.ws.security.policy.interceptors.IssuedTokenInterceptorProvider$IssuedTokenOutInterceptor:void handleMessage(org.apache.cxf.message.Message)"
        ]
    },
    "org.apache.cxf.ws.security.policy.interceptors.SecureConversationOutInterceptor:org.apache.cxf.ws.security.tokenstore.SecurityToken issueToken(org.apache.cxf.binding.soap.SoapMessage,org.apache.cxf.ws.policy.AssertionInfoMap,org.apache.cxf.ws.security.policy.model.SecureConversationToken)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.ws.security.policy.interceptors.SecureConversationOutInterceptor:void handleMessage(org.apache.cxf.binding.soap.SoapMessage)"
        ]
    },
    "org.apache.cxf.ws.security.policy.interceptors.SecureConversationOutInterceptor:void renewToken(org.apache.cxf.binding.soap.SoapMessage,org.apache.cxf.ws.policy.AssertionInfoMap,org.apache.cxf.ws.security.tokenstore.SecurityToken,org.apache.cxf.ws.security.policy.model.SecureConversationToken)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.ws.security.policy.interceptors.SecureConversationOutInterceptor:void handleMessage(org.apache.cxf.binding.soap.SoapMessage)"
        ]
    },
    "org.apache.cxf.ws.security.policy.interceptors.SecureConversationInInterceptor$SecureConversationCancelInterceptor:void handleMessage(org.apache.cxf.binding.soap.SoapMessage)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.ws.security.policy.interceptors.SecureConversationInInterceptor$SecureConversationCancelInterceptor:void handleMessage(org.apache.cxf.message.Message)"
        ]
    },
    "org.apache.cxf.jaxws.DispatchImpl:void invokeOneWay(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": []
    },
    "org.apache.cxf.jaxws.DispatchImpl:java.lang.Object invoke(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": []
    },
    "org.apache.cxf.ws.rm.Destination:void acknowledge(org.apache.cxf.message.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.ws.rm.RMInInterceptor:void processSequence(org.apache.cxf.ws.rm.Destination,org.apache.cxf.message.Message)"
        ]
    },
    "org.apache.cxf.ws.rm.Destination:void ackRequested(org.apache.cxf.message.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.ws.rm.RMInInterceptor:void processAcknowledgmentRequests(org.apache.cxf.ws.rm.Destination,org.apache.cxf.message.Message)"
        ]
    },
    "org.apache.cxf.ws.rm.RMOutInterceptor:void handle(org.apache.cxf.message.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": []
    },
    "org.apache.cxf.ws.security.policy.interceptors.SecureConversationOutInterceptor:void handleMessage(org.apache.cxf.binding.soap.SoapMessage)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.ws.security.policy.interceptors.SecureConversationOutInterceptor:void handleMessage(org.apache.cxf.message.Message)"
        ]
    },
    "org.apache.cxf.ws.security.policy.interceptors.SecureConversationInInterceptor$SecureConversationCancelInterceptor:void handleMessage(org.apache.cxf.message.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.phase.PhaseInterceptorChain:boolean doIntercept(org.apache.cxf.message.Message)"
        ]
    },
    "org.apache.cxf.ws.rm.RMInInterceptor:void processSequence(org.apache.cxf.ws.rm.Destination,org.apache.cxf.message.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.ws.rm.RMInInterceptor:void handle(org.apache.cxf.message.Message)"
        ]
    },
    "org.apache.cxf.ws.rm.RMInInterceptor:void processAcknowledgmentRequests(org.apache.cxf.ws.rm.Destination,org.apache.cxf.message.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": [
            "org.apache.cxf.ws.rm.RMInInterceptor:void handle(org.apache.cxf.message.Message)"
        ]
    },
    "org.apache.cxf.ws.security.policy.interceptors.SecureConversationOutInterceptor:void handleMessage(org.apache.cxf.message.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler:void doEncryptBeforeSign()"
        ],
        "vulCaller": []
    }
}