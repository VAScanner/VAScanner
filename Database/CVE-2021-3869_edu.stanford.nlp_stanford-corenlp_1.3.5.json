{
    "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()": {
        "isVulRoot": true,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.french.FrenchTreeReader:void <init>(java.io.Reader,edu.stanford.nlp.trees.TreeFactory,edu.stanford.nlp.trees.TreeNormalizer)"
        ]
    },
    "edu.stanford.nlp.trees.international.french.FrenchTreeReader:void <init>(java.io.Reader,edu.stanford.nlp.trees.TreeFactory,edu.stanford.nlp.trees.TreeNormalizer)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.french.FrenchTreeReader:void <init>(java.io.Reader)"
        ]
    },
    "edu.stanford.nlp.util.XMLUtils:org.w3c.dom.Document readDocumentFromFile(java.lang.String)": {
        "isVulRoot": true,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:org.w3c.dom.Document readDocumentFromFile(java.lang.String)"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.XMLUtils:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.util.XMLUtils:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:org.w3c.dom.Document readDocumentFromFile(java.lang.String)"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getValidatingXmlParser(java.io.File)": {
        "isVulRoot": true,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getValidatingXmlParser(java.io.File)"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.XMLUtils:org.w3c.dom.Document readDocumentFromString(java.lang.String)": {
        "isVulRoot": true,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:org.w3c.dom.Document readDocumentFromString(java.lang.String)"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Document createDocument()": {
        "isVulRoot": true,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Document createDocument()",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.XMLUtils:void <clinit>()",
            "edu.stanford.nlp.time.SUTimeMain:org.w3c.dom.Document annotationToXmlDocument(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.time.XMLUtils:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Document createDocument()",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.SUTimeMain:org.w3c.dom.Document annotationToXmlDocument(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Document createDocument()",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:java.lang.String textToAnnotatedXml(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Element parseElement(java.lang.String)": {
        "isVulRoot": true,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Element parseElement(java.lang.String)"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.Timex:edu.stanford.nlp.time.Timex fromXml(java.lang.String)",
            "edu.stanford.nlp.time.GUTimeAnnotator:void annotate(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.time.HeidelTimeAnnotator:void annotate(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.time.Timex:edu.stanford.nlp.time.Timex fromXml(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Element parseElement(java.lang.String)"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.GUTimeAnnotator:void annotate(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Element parseElement(java.lang.String)"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.GUTimeAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.time.HeidelTimeAnnotator:void annotate(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Element parseElement(java.lang.String)"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.HeidelTimeAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)": {
        "isVulRoot": true,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDomReader:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument parseDocument(java.io.File)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDomReader:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument parseDocument(java.io.File)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument parseDocument(java.lang.String,boolean)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument parseDocument(java.lang.String,boolean,java.lang.String)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDomReader:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.international.french.FrenchTreeReader:void <init>(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.international.french.FrenchTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)"
        ]
    },
    "edu.stanford.nlp.time.SUTimeMain:java.lang.String textToAnnotatedXml(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Document createDocument()",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:void processTextFile(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.time.SUTimeMain:void processText(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.time.GUTimeAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Element parseElement(java.lang.String)"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.HeidelTimeAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Element parseElement(java.lang.String)"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument parseDocument(java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:java.util.List readDocument(java.lang.String,edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument:edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument parseDocument(java.lang.String,boolean,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:java.util.List readDocument(java.lang.String,edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDomReader:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.french.FrenchTreeReaderFactory:edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.MemoryTreebank:void processFile(java.io.File)",
            "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader,java.lang.String)",
            "edu.stanford.nlp.trees.international.french.FrenchTreeReader:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:boolean primeNextFile()"
        ]
    },
    "edu.stanford.nlp.time.SUTimeMain:void processTextFile(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Document createDocument()",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.time.SUTimeMain:void processText(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Document createDocument()",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:java.util.List readDocument(java.lang.String,edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:java.util.List readDocument(java.io.File,edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.trees.MemoryTreebank:void processFile(java.io.File)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.FilePathProcessor:void processPath(java.io.File,java.io.FileFilter,edu.stanford.nlp.util.FileProcessor)"
        ]
    },
    "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader)"
        ]
    },
    "edu.stanford.nlp.trees.international.french.FrenchTreeReader:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:boolean primeNextFile()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:edu.stanford.nlp.trees.Tree primeNextTree()",
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:void <init>(edu.stanford.nlp.trees.DiskTreebank)"
        ]
    },
    "edu.stanford.nlp.time.SUTimeMain:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.time.XMLUtils:org.w3c.dom.Document createDocument()",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:java.util.List readDocument(java.io.File,edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:edu.stanford.nlp.pipeline.Annotation read(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.util.FilePathProcessor:void processPath(java.io.File,java.io.FileFilter,edu.stanford.nlp.util.FileProcessor)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.MemoryTreebank:void loadPath(java.lang.String,java.io.FileFilter,java.lang.String)",
            "edu.stanford.nlp.trees.MemoryTreebank:void loadPath(java.io.File,java.io.FileFilter)",
            "edu.stanford.nlp.util.FilePathProcessor:void processPath(java.io.File,java.lang.String,boolean,edu.stanford.nlp.util.FileProcessor)",
            "edu.stanford.nlp.util.FilePathProcessor:void processPath(java.io.File,java.io.FileFilter,edu.stanford.nlp.util.FileProcessor)",
            "edu.stanford.nlp.util.FilePathProcessor:void processPath(java.lang.String,java.lang.String,boolean,edu.stanford.nlp.util.FileProcessor)"
        ]
    },
    "edu.stanford.nlp.trees.MemoryTreebank:void load(java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.tregex.TregexPattern:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:edu.stanford.nlp.trees.Tree primeNextTree()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:void <init>(edu.stanford.nlp.trees.DiskTreebank)",
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:edu.stanford.nlp.trees.Tree next()"
        ]
    },
    "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:void <init>(edu.stanford.nlp.trees.DiskTreebank)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:void <init>(edu.stanford.nlp.trees.DiskTreebank,edu.stanford.nlp.trees.DiskTreebank$1)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:edu.stanford.nlp.pipeline.Annotation read(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.pipeline.Annotation parse(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.MemoryTreebank:void loadPath(java.lang.String,java.io.FileFilter,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.MemoryTreebank:void loadPath(java.io.File,java.io.FileFilter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.FilteringTreebank:void loadPath(java.io.File,java.io.FileFilter)",
            "edu.stanford.nlp.trees.Treebank:void loadPath(java.io.File,java.lang.String,boolean)",
            "edu.stanford.nlp.trees.Treebank:void loadPath(java.lang.String,java.io.FileFilter)",
            "edu.stanford.nlp.trees.Treebank:void loadPath(java.lang.String,java.lang.String,boolean)"
        ]
    },
    "edu.stanford.nlp.util.FilePathProcessor:void processPath(java.io.File,java.lang.String,boolean,edu.stanford.nlp.util.FileProcessor)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.FilePathProcessor:void processPath(java.lang.String,java.lang.String,boolean,edu.stanford.nlp.util.FileProcessor)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.GrammaticalStructure:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.TregexPattern:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:edu.stanford.nlp.trees.Tree next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:java.lang.Object next()"
        ]
    },
    "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:void <init>(edu.stanford.nlp.trees.DiskTreebank,edu.stanford.nlp.trees.DiskTreebank$1)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.DiskTreebank:java.util.Iterator iterator()"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.pipeline.Annotation parse(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.ACEMentionExtractor:edu.stanford.nlp.dcoref.Document nextDoc()",
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.FilteringTreebank:void loadPath(java.io.File,java.io.FileFilter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.FilteringTreebank:void loadPath(java.io.File,java.io.FileFilter)"
        ]
    },
    "edu.stanford.nlp.trees.Treebank:void loadPath(java.io.File,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Treebank:void loadPath(java.io.File)"
        ]
    },
    "edu.stanford.nlp.trees.Treebank:void loadPath(java.lang.String,java.io.FileFilter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void main(java.lang.String[])",
            "edu.stanford.nlp.tagger.io.TreeTaggedFileReader:void <init>(edu.stanford.nlp.tagger.io.TaggedFileRecord)",
            "edu.stanford.nlp.parser.lexparser.TreebankAnnotator:java.util.List getTrees(java.lang.String,int,int,int,int)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.DiskTreebank makeSecondaryTreebank(java.lang.String,edu.stanford.nlp.parser.lexparser.Options,java.io.FileFilter)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:edu.stanford.nlp.trees.Treebank makeTreebank(java.lang.String,edu.stanford.nlp.parser.lexparser.Options,java.io.FileFilter)",
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:java.util.Set getEnglishSplitCategories(java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Treebank makeTreebank(java.lang.String,edu.stanford.nlp.parser.lexparser.Options,java.io.FileFilter)",
            "edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.Treebank:void loadPath(java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreeBinarizer:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.tregex.TregexPattern:void extractSubtrees(java.util.List,java.lang.String)",
            "edu.stanford.nlp.trees.tregex.TregexPattern:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreebankAnnotator:java.util.List getTrees(java.lang.String,int,int,int,int)",
            "edu.stanford.nlp.parser.lexparser.TreeBinarizer:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:void tallyTrees(java.util.Collection,double)",
            "edu.stanford.nlp.parser.metrics.LeafAncestorEval:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.NERFeatureFactory:java.util.Collection featuresC(edu.stanford.nlp.util.PaddedList,int)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$FunctionCallExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.trees.TreePrint:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.TransformingTreebank$TransformingTreebankIterator:edu.stanford.nlp.trees.Tree next()",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void triggerAllHooks(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.parser.metrics.UnlabeledAttachmentEval:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.Collection,double)",
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:void main(java.lang.String[])",
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:void cleanupTags(java.util.Collection)",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Iterable)",
            "edu.stanford.nlp.parser.metrics.Evalb:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.FilteringTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void saveTrees(java.util.Collection,double,java.util.Collection,double)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processEdge(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.parser.metrics.TaggingEval:void main(java.lang.String[])",
            "edu.stanford.nlp.util.StringUtils:java.lang.String join(java.lang.Iterable,java.lang.String)",
            "edu.stanford.nlp.trees.TransformingTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:java.util.List getTuningSet(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.FactoredLexicon,edu.stanford.nlp.parser.lexparser.TreebankLangParserParams)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processHook(edu.stanford.nlp.parser.lexparser.Hook)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.DiskTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void triggerHooks(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void tune(java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.FilteringTreebank$FilteringTreebankIterator:void primeNext()",
            "edu.stanford.nlp.trees.CompositeTreebank$CompositeTreebankIterator:edu.stanford.nlp.trees.Tree next()",
            "edu.stanford.nlp.trees.WordStemmer:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.Treebank:java.lang.String textualSummary(edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.tagger.io.TreeTaggedFileReader:void findNext()"
        ]
    },
    "edu.stanford.nlp.trees.DiskTreebank:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreebankAnnotator:java.util.List getTrees(java.lang.String,int,int,int,int)",
            "edu.stanford.nlp.parser.lexparser.TreeBinarizer:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.CompositeTreebank$CompositeTreebankIterator:void <init>(java.util.Collection,java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:void tallyTrees(java.util.Collection,double)",
            "edu.stanford.nlp.parser.metrics.LeafAncestorEval:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.NERFeatureFactory:java.util.Collection featuresC(edu.stanford.nlp.util.PaddedList,int)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$FunctionCallExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.trees.TreePrint:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void triggerAllHooks(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.parser.metrics.UnlabeledAttachmentEval:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.Collection,double)",
            "edu.stanford.nlp.trees.FilteringTreebank:java.util.Iterator iterator()",
            "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:void main(java.lang.String[])",
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:void cleanupTags(java.util.Collection)",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Iterable)",
            "edu.stanford.nlp.parser.metrics.Evalb:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.FilteringTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void saveTrees(java.util.Collection,double,java.util.Collection,double)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processEdge(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.parser.metrics.TaggingEval:void main(java.lang.String[])",
            "edu.stanford.nlp.tagger.io.TreeTaggedFileReader:void <init>(edu.stanford.nlp.tagger.io.TaggedFileRecord)",
            "edu.stanford.nlp.util.StringUtils:java.lang.String join(java.lang.Iterable,java.lang.String)",
            "edu.stanford.nlp.trees.TransformingTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:java.util.List getTuningSet(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.FactoredLexicon,edu.stanford.nlp.parser.lexparser.TreebankLangParserParams)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processHook(edu.stanford.nlp.parser.lexparser.Hook)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.DiskTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void triggerHooks(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void tune(java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.WordStemmer:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.Treebank:java.lang.String textualSummary(edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.TransformingTreebank:java.util.Iterator iterator()",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)"
        ]
    },
    "edu.stanford.nlp.dcoref.ACEMentionExtractor:edu.stanford.nlp.dcoref.Document nextDoc()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:double runAndScoreCoref(edu.stanford.nlp.dcoref.SieveCoreferenceSystem,edu.stanford.nlp.dcoref.MentionExtractor,java.util.Properties,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.Treebank:void loadPath(java.io.File)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.LeafAncestorEval:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.Treebank:void loadPath(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.io.TreeTaggedFileReader:void <init>(edu.stanford.nlp.tagger.io.TaggedFileRecord)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.io.TaggedFileRecord:edu.stanford.nlp.tagger.io.TaggedFileReader reader()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.TreebankAnnotator:java.util.List getTrees(java.lang.String,int,int,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreebankAnnotator:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.CNFTransformers:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.DiskTreebank makeSecondaryTreebank(java.lang.String,edu.stanford.nlp.parser.lexparser.Options,java.io.FileFilter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:edu.stanford.nlp.trees.Treebank makeTreebank(java.lang.String,edu.stanford.nlp.parser.lexparser.Options,java.io.FileFilter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:java.util.Set getEnglishSplitCategories(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreebankAnnotator:void <init>(edu.stanford.nlp.parser.lexparser.Options,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Treebank makeTreebank(java.lang.String,edu.stanford.nlp.parser.lexparser.Options,java.io.FileFilter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser trainFromTreebank(java.lang.String,java.io.FileFilter,edu.stanford.nlp.parser.lexparser.Options)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.TreeBinarizer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.TregexPattern:void extractSubtrees(java.util.List,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.tregex.TregexPattern:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:void tallyTrees(java.util.Collection,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:java.lang.Object extract(java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:java.lang.Object extract(java.util.Collection,double,java.util.Collection,double)"
        ]
    },
    "edu.stanford.nlp.parser.metrics.LeafAncestorEval:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.NERFeatureFactory:java.util.Collection featuresC(edu.stanford.nlp.util.PaddedList,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.NERFeatureFactory:java.util.Collection getCliqueFeatures(edu.stanford.nlp.util.PaddedList,int,edu.stanford.nlp.sequences.Clique)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$FunctionCallExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue evaluateNoTypeConversion(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions:java.lang.Object asObject(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequenceMatchResultExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Value attemptTypeConversion(edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue,edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$VarAssignmentExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringMatchResultExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(java.util.regex.MatchResult)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$WrappedExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:edu.stanford.nlp.ling.tokensregex.types.Value getValue(java.lang.String)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$ConditionalExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$FunctionCallExpression:edu.stanford.nlp.ling.tokensregex.types.Expression simplify(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$IfExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$VarExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AssignmentRule:void evaluate(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionNodePattern:boolean match(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Value doEvaluation(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$MethodCallExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.trees.TreePrint:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.TransformingTreebank$TransformingTreebankIterator:edu.stanford.nlp.trees.Tree next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TransformingTreebank$TransformingTreebankIterator:java.lang.Object next()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void triggerAllHooks(edu.stanford.nlp.parser.lexparser.Edge)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processEdge(edu.stanford.nlp.parser.lexparser.Edge)"
        ]
    },
    "edu.stanford.nlp.parser.metrics.UnlabeledAttachmentEval:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.Collection,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.Treebank,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:void cleanupTags(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:void cleanupTags(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:void cleanupTags(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Iterable)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.parser.metrics.Evalb:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.FilteringTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Treebank:int size()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void saveTrees(java.util.Collection,double,java.util.Collection,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void extract(java.util.Collection,double,java.util.Collection,double)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processEdge(edu.stanford.nlp.parser.lexparser.Edge)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processItem(edu.stanford.nlp.parser.lexparser.Item)"
        ]
    },
    "edu.stanford.nlp.parser.metrics.TaggingEval:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.StringUtils:java.lang.String join(java.lang.Iterable,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.StringUtils:java.util.Collection getNgrams(java.util.List,int,int)",
            "edu.stanford.nlp.ie.AcquisitionsPrior:double scoreOf(int[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$FunctionCallExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void runAndScoreCorefDist(java.lang.String,java.util.Properties,java.lang.String)",
            "edu.stanford.nlp.ling.tokensregex.NodePattern$ConjNodePattern:java.lang.String toString()",
            "edu.stanford.nlp.ie.machinereading.structure.AnnotationUtils:java.lang.String sentenceToString(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$MethodCallExpression:java.lang.String toString()",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$FunctionCallExpression:java.lang.String toString()",
            "edu.stanford.nlp.semgraph.SemanticGraph:java.lang.String toEnUncollapsedSentenceString()",
            "edu.stanford.nlp.ie.SeminarsPrior:double scoreOf(int[])",
            "edu.stanford.nlp.ling.tokensregex.NodePattern$DisjNodePattern:java.lang.String toString()",
            "edu.stanford.nlp.util.StringUtils:java.util.Properties argsToProperties(java.lang.String[],java.util.Map)",
            "edu.stanford.nlp.trees.GrammaticalStructure:void main(java.lang.String[])",
            "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.EntityBIO:java.lang.String toString(edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void serializeTextClassifier(java.lang.String)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void loadTextClassifier(java.lang.String,java.util.Properties)",
            "edu.stanford.nlp.util.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String)",
            "edu.stanford.nlp.util.StringUtils:java.lang.String join(java.lang.Iterable)",
            "edu.stanford.nlp.time.SUTimeMain:edu.stanford.nlp.util.CoreMap wordsToSentence(java.util.List)",
            "edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult:java.lang.String group(int)",
            "edu.stanford.nlp.sequences.TrueCasingForNISTDocumentReaderAndWriter:void printAnswers(java.util.List,java.io.PrintWriter)",
            "edu.stanford.nlp.ie.Entity:java.lang.String toString(edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.ie.BisequenceEmpiricalNERPrior$Entity:void <init>(int,java.util.List,int)",
            "edu.stanford.nlp.pipeline.Requirement:java.lang.String getMissingRequirement(java.util.Set)",
            "edu.stanford.nlp.stats.Counters:java.lang.String toSortedString(edu.stanford.nlp.stats.Counter,int,java.lang.String,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$AndPatternExpr:java.lang.String toString()",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$SequencePatternExpr:java.lang.String toString()",
            "edu.stanford.nlp.stats.Counters:java.lang.String toSortedByKeysString(edu.stanford.nlp.stats.Counter,java.lang.String,java.lang.String,java.lang.String)",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$OrPatternExpr:java.lang.String toString()",
            "edu.stanford.nlp.time.SUTime$ExplicitTemporalSet:java.lang.String toFormattedString(int)"
        ]
    },
    "edu.stanford.nlp.trees.TransformingTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.Treebank:int size()",
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:java.util.Set getSplitCategories(edu.stanford.nlp.trees.Treebank,boolean,int,double,double,edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.trees.Treebank:java.lang.String toString()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.FactoredLexicon:java.util.List getTuningSet(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.FactoredLexicon,edu.stanford.nlp.parser.lexparser.TreebankLangParserParams)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processHook(edu.stanford.nlp.parser.lexparser.Hook)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser$N5BiLexPCFGParser:void relaxTempHook()",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processItem(edu.stanford.nlp.parser.lexparser.Item)"
        ]
    },
    "edu.stanford.nlp.trees.DiskTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.Treebank:int size()",
            "edu.stanford.nlp.trees.international.french.DybroFrenchHeadFinder:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.tregex.TregexPattern:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.SisterAnnotationStats:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:java.util.Set getSplitCategories(edu.stanford.nlp.trees.Treebank,boolean,int,double,double,edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.trees.Treebank:java.lang.String toString()",
            "edu.stanford.nlp.trees.international.french.FrenchHeadFinder:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.machinereading.common.NoPunctuationHeadFinder:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.CollinsHeadFinder:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void triggerHooks(edu.stanford.nlp.parser.lexparser.Edge)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processEdge(edu.stanford.nlp.parser.lexparser.Edge)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void tune(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.Treebank,java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.FilteringTreebank$FilteringTreebankIterator:void primeNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.FilteringTreebank$FilteringTreebankIterator:edu.stanford.nlp.trees.Tree next()",
            "edu.stanford.nlp.trees.FilteringTreebank$FilteringTreebankIterator:void <init>(java.util.Iterator,edu.stanford.nlp.util.Filter)"
        ]
    },
    "edu.stanford.nlp.trees.CompositeTreebank$CompositeTreebankIterator:edu.stanford.nlp.trees.Tree next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.CompositeTreebank$CompositeTreebankIterator:java.lang.Object next()"
        ]
    },
    "edu.stanford.nlp.trees.WordStemmer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.Treebank:java.lang.String textualSummary(edu.stanford.nlp.trees.TreebankLanguagePack)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:double testOnTreebank(edu.stanford.nlp.trees.Treebank)",
            "edu.stanford.nlp.trees.Treebank:java.lang.String textualSummary()",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.Treebank,java.util.List)"
        ]
    },
    "edu.stanford.nlp.tagger.io.TreeTaggedFileReader:void findNext()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.io.TreeTaggedFileReader:void <init>(edu.stanford.nlp.tagger.io.TaggedFileRecord)",
            "edu.stanford.nlp.tagger.io.TreeTaggedFileReader:java.util.List next()"
        ]
    },
    "edu.stanford.nlp.trees.CompositeTreebank$CompositeTreebankIterator:void <init>(java.util.Collection,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.CompositeTreebank:java.util.Iterator iterator()"
        ]
    },
    "edu.stanford.nlp.trees.FilteringTreebank:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:void tallyTrees(java.util.Collection,double)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void tune(java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.Collection,double)",
            "edu.stanford.nlp.trees.FilteringTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void saveTrees(java.util.Collection,double,java.util.Collection,double)",
            "edu.stanford.nlp.trees.FilteringTreebank:java.util.Iterator iterator()"
        ]
    },
    "edu.stanford.nlp.trees.TransformingTreebank:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.CompositeTreebank$CompositeTreebankIterator:void <init>(java.util.Collection,java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:void tallyTrees(java.util.Collection,double)",
            "edu.stanford.nlp.ie.NERFeatureFactory:java.util.Collection featuresC(edu.stanford.nlp.util.PaddedList,int)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$FunctionCallExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.util.StringUtils:java.lang.String join(java.lang.Iterable,java.lang.String)",
            "edu.stanford.nlp.trees.TransformingTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void triggerAllHooks(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.Collection,double)",
            "edu.stanford.nlp.trees.FilteringTreebank:java.util.Iterator iterator()",
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:void cleanupTags(java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processHook(edu.stanford.nlp.parser.lexparser.Hook)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void triggerHooks(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Iterable)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void tune(java.util.Collection)",
            "edu.stanford.nlp.trees.FilteringTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void saveTrees(java.util.Collection,double,java.util.Collection,double)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processEdge(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.trees.Treebank:java.lang.String textualSummary(edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.trees.TransformingTreebank:java.util.Iterator iterator()",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)"
        ]
    },
    "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:double runAndScoreCoref(edu.stanford.nlp.dcoref.SieveCoreferenceSystem,edu.stanford.nlp.dcoref.MentionExtractor,java.util.Properties,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void main(java.lang.String[])",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void optimizeSieveOrdering(edu.stanford.nlp.dcoref.MentionExtractor,java.util.Properties,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.trees.Treebank:void loadPath(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.TaggingEval:void main(java.lang.String[])",
            "edu.stanford.nlp.tagger.io.TreeTaggedFileReader:void <init>(edu.stanford.nlp.tagger.io.TaggedFileRecord)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.DiskTreebank makeSecondaryTreebank(java.lang.String,edu.stanford.nlp.parser.lexparser.Options,java.io.FileFilter)",
            "edu.stanford.nlp.trees.TreePrint:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:edu.stanford.nlp.trees.Treebank makeTreebank(java.lang.String,edu.stanford.nlp.parser.lexparser.Options,java.io.FileFilter)",
            "edu.stanford.nlp.trees.TransformingTreebank:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.metrics.UnlabeledAttachmentEval:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.CollinsHeadFinder:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.international.french.DybroFrenchHeadFinder:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.FactoredLexicon:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.GrammaticalStructure:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.WordStemmer:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.SisterAnnotationStats:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.MemoryTreebank:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.metrics.Evalb:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.international.french.FrenchHeadFinder:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Treebank makeTreebank(java.lang.String,edu.stanford.nlp.parser.lexparser.Options,java.io.FileFilter)",
            "edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.machinereading.common.NoPunctuationHeadFinder:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.tagger.io.TaggedFileRecord:edu.stanford.nlp.tagger.io.TaggedFileReader reader()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TestClassifier:void test()",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.TreebankAnnotator:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.CNFTransformers:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.TreebankAnnotator:void <init>(edu.stanford.nlp.parser.lexparser.Options,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.TreebankAnnotator:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.CNFTransformers:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser trainFromTreebank(java.lang.String,java.io.FileFilter,edu.stanford.nlp.parser.lexparser.Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:java.lang.Object extract(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.Treebank,java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:java.lang.Object extract(java.util.Collection,double,java.util.Collection,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.Treebank,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.NERFeatureFactory:java.util.Collection getCliqueFeatures(edu.stanford.nlp.util.PaddedList,int,edu.stanford.nlp.sequences.Clique)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue evaluateNoTypeConversion(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Value attemptTypeConversion(edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue,edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions:java.lang.Object asObject(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CompositeExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule createExtractionRule(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$TokenPatternExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$TextPatternExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map)",
            "edu.stanford.nlp.time.TimeFormatter$TimePatternExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule:void update(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequenceMatchResultExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequenceMatchResultExtractor:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Value attemptTypeConversion(edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue,edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Value doEvaluation(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$VarAssignmentExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AssignmentRule:void evaluate(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringMatchResultExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(java.util.regex.MatchResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringMatchResultExtractor:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$WrappedExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$VarExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Value doEvaluation(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue evaluateNoTypeConversion(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions:java.lang.Object asObject(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequenceMatchResultExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Value attemptTypeConversion(edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue,edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$VarAssignmentExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringMatchResultExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(java.util.regex.MatchResult)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$WrappedExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:edu.stanford.nlp.ling.tokensregex.types.Value getValue(java.lang.String)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$IfExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:edu.stanford.nlp.ling.tokensregex.types.Value getValue(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$ConditionalExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$FunctionCallExpression:edu.stanford.nlp.ling.tokensregex.types.Expression simplify(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$WrappedExpression:edu.stanford.nlp.ling.tokensregex.types.Expression simplify(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue simplifyNoTypeConversion(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$MethodCallExpression:edu.stanford.nlp.ling.tokensregex.types.Expression simplify(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$IfExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$VarExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Value doEvaluation(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue evaluateNoTypeConversion(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$MethodCallExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions:java.lang.Object asObject(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequenceMatchResultExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Value attemptTypeConversion(edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue,edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringMatchResultExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(java.util.regex.MatchResult)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$WrappedExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:edu.stanford.nlp.ling.tokensregex.types.Value getValue(java.lang.String)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$IfExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$VarExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue evaluateNoTypeConversion(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions:java.lang.Object asObject(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequenceMatchResultExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Value attemptTypeConversion(edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue,edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$VarAssignmentExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringMatchResultExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(java.util.regex.MatchResult)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$WrappedExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:edu.stanford.nlp.ling.tokensregex.types.Value getValue(java.lang.String)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$ConditionalExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$IfExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$VarExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Value doEvaluation(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$MethodCallExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AssignmentRule:void evaluate(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AssignmentRule createAssignmentRule(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.ling.tokensregex.types.AssignableExpression,edu.stanford.nlp.ling.tokensregex.types.Expression)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionNodePattern:boolean match(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionNodePattern:boolean match(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Value doEvaluation(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$SimpleCachedExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$MethodCallExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue evaluateNoTypeConversion(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions:java.lang.Object asObject(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequenceMatchResultExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Value attemptTypeConversion(edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue,edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$VarAssignmentExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringMatchResultExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(java.util.regex.MatchResult)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$WrappedExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:edu.stanford.nlp.ling.tokensregex.types.Value getValue(java.lang.String)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$ConditionalExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$IfExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$VarExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$MethodCallExpression:edu.stanford.nlp.ling.tokensregex.types.Expression simplify(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Value doEvaluation(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$MethodCallExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.trees.TransformingTreebank$TransformingTreebankIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:void tallyTrees(java.util.Collection,double)",
            "edu.stanford.nlp.ie.NERFeatureFactory:java.util.Collection featuresC(edu.stanford.nlp.util.PaddedList,int)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$FunctionCallExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.util.StringUtils:java.lang.String join(java.lang.Iterable,java.lang.String)",
            "edu.stanford.nlp.trees.TransformingTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.trees.TransformingTreebank$TransformingTreebankIterator:edu.stanford.nlp.trees.Tree next()",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void triggerAllHooks(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.Collection,double)",
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:void cleanupTags(java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processHook(edu.stanford.nlp.parser.lexparser.Hook)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void triggerHooks(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Iterable)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void tune(java.util.Collection)",
            "edu.stanford.nlp.trees.FilteringTreebank$FilteringTreebankIterator:void primeNext()",
            "edu.stanford.nlp.trees.CompositeTreebank$CompositeTreebankIterator:edu.stanford.nlp.trees.Tree next()",
            "edu.stanford.nlp.trees.FilteringTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void saveTrees(java.util.Collection,double,java.util.Collection,double)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processEdge(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.trees.Treebank:java.lang.String textualSummary(edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.Collection,java.util.Collection)",
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.Treebank,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser trainFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:void cleanupTags(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:void cleanupTags(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:java.util.List extractExpressions(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:void cleanupTags(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.IntCounter:void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String)",
            "edu.stanford.nlp.stats.ClassicCounter:void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String)",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.Object)",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(java.lang.String,java.lang.Object)",
            "edu.stanford.nlp.util.logging.Redwood$RedwoodChannels:void prettyLog(java.lang.String,java.lang.Object)",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.util.Map)",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Iterable)",
            "edu.stanford.nlp.util.ArrayCoreMap:void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String)",
            "edu.stanford.nlp.stats.Counters$7:void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String)",
            "edu.stanford.nlp.util.Pair:void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String)",
            "edu.stanford.nlp.stats.Counters$6:void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String)",
            "edu.stanford.nlp.util.Quadruple:void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String)",
            "edu.stanford.nlp.util.Triple:void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String)",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.trees.Treebank:int size()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.DiskTreebank makeSecondaryTreebank(java.lang.String,edu.stanford.nlp.parser.lexparser.Options,java.io.FileFilter)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$FunctionCallExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void saveTrees(java.util.Collection,double,java.util.Collection,double)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.Treebank,java.util.List)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Treebank makeTreebank(java.lang.String,edu.stanford.nlp.parser.lexparser.Options,java.io.FileFilter)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void postMortem()",
            "edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void extract(java.util.Collection,double,java.util.Collection,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.Treebank,java.util.List)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void extract(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processItem(edu.stanford.nlp.parser.lexparser.Item)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:boolean parse(java.util.List)"
        ]
    },
    "edu.stanford.nlp.util.StringUtils:java.util.Collection getNgrams(java.util.List,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.StringUtils:java.util.Collection getNgramsString(java.lang.String,int,int)"
        ]
    },
    "edu.stanford.nlp.ie.AcquisitionsPrior:double scoreOf(int[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.EntityCachingAbstractSequencePrior:double[] scoresOf(int[],int)",
            "edu.stanford.nlp.sequences.FactoredSequenceModel:double scoreOf(int[])"
        ]
    },
    "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void runAndScoreCorefDist(java.lang.String,java.util.Properties,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void optimizeSieveOrdering(edu.stanford.nlp.dcoref.MentionExtractor,java.util.Properties,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.NodePattern$ConjNodePattern:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.structure.AnnotationUtils:java.lang.String sentenceToString(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.structure.AnnotationUtils:java.lang.String datasetToString(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$MethodCallExpression:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Pair:void save(java.io.DataOutputStream)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$FunctionCallExpression:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Pair:void save(java.io.DataOutputStream)",
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionNodePattern:java.lang.String toString()"
        ]
    },
    "edu.stanford.nlp.semgraph.SemanticGraph:java.lang.String toEnUncollapsedSentenceString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.SeminarsPrior:double scoreOf(int[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.EntityCachingAbstractSequencePrior:double[] scoresOf(int[],int)",
            "edu.stanford.nlp.sequences.FactoredSequenceModel:double scoreOf(int[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.NodePattern$DisjNodePattern:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$NodePatternExpr:java.lang.String toString()"
        ]
    },
    "edu.stanford.nlp.util.StringUtils:java.util.Properties argsToProperties(java.lang.String[],java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.StringUtils:java.util.Properties argsToProperties(java.lang.String[])",
            "edu.stanford.nlp.parser.metrics.Evalb:void main(java.lang.String[])",
            "edu.stanford.nlp.process.PTBTokenizer:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.EntityBIO:java.lang.String toString(edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.EntityCachingAbstractSequencePriorBIO:java.lang.String toString(int)",
            "edu.stanford.nlp.ie.EntityCachingAbstractSequencePriorBIO:void updateSequenceElement(int[],int,int)",
            "edu.stanford.nlp.ie.EntityCachingAbstractSequencePriorBIO:java.lang.String toString()"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:void serializeTextClassifier(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:void loadTextClassifier(java.lang.String,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.util.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$10:java.lang.String compute(java.lang.String[])",
            "edu.stanford.nlp.time.SUTimeMain:void processTimebankCsvSent(edu.stanford.nlp.pipeline.AnnotationPipeline,edu.stanford.nlp.time.SUTimeMain$TimebankSent,java.io.PrintWriter,edu.stanford.nlp.time.SUTimeMain$EvalStats)",
            "edu.stanford.nlp.time.SUTimeMain:void processTempEval2Doc(edu.stanford.nlp.pipeline.AnnotationPipeline,edu.stanford.nlp.pipeline.Annotation,java.util.Map,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter)",
            "edu.stanford.nlp.process.Americanize:void <clinit>()",
            "edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$14:edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env,java.util.List)",
            "edu.stanford.nlp.util.StringUtils:java.lang.String join(java.lang.Object[])",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void optimizeSieveOrdering(edu.stanford.nlp.dcoref.MentionExtractor,java.util.Properties,java.lang.String)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void serializeTextClassifier(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.util.StringUtils:java.lang.String join(java.lang.Iterable)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.PTBTokenizer:java.lang.String ptb2Text(java.util.List)",
            "edu.stanford.nlp.dcoref.Mention:java.lang.String getPattern(java.util.List)"
        ]
    },
    "edu.stanford.nlp.time.SUTimeMain:edu.stanford.nlp.util.CoreMap wordsToSentence(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:void processTempEval2Tab(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult:java.lang.String group(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$2:java.lang.Integer apply(java.util.regex.MatchResult)",
            "edu.stanford.nlp.time.TimeExpressionExtractors$IsoDateTimePatternFunc:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)",
            "edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult:java.lang.String group(java.lang.String)",
            "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$8:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)",
            "edu.stanford.nlp.time.TimeExpressionExtractors$DurationRule:edu.stanford.nlp.time.SUTime$Duration extractDuration(java.util.regex.MatchResult,java.lang.String)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$RegexMatchVarExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult:java.lang.String group()",
            "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$7:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)",
            "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$3:java.lang.Integer apply(java.util.regex.MatchResult)",
            "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$12:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)",
            "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$16:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)",
            "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$10:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)",
            "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$14:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)",
            "edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult:edu.stanford.nlp.ling.tokensregex.SequenceMatchResult$MatchedGroupInfo groupInfo(int)",
            "edu.stanford.nlp.time.TimeExpressionExtractors$DurationRule:edu.stanford.nlp.time.SUTime$Temporal extract(java.util.regex.MatchResult)",
            "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$6:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)",
            "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$4:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)",
            "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$17:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)",
            "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$13:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)",
            "edu.stanford.nlp.time.TimeExpressionExtractors$TemporalLookupFunc:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)"
        ]
    },
    "edu.stanford.nlp.sequences.TrueCasingForNISTDocumentReaderAndWriter:void printAnswers(java.util.List,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.Entity:java.lang.String toString(edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.EntityCachingAbstractSequencePrior:java.lang.String toString(int)",
            "edu.stanford.nlp.ie.EntityCachingAbstractSequencePrior:java.lang.String toString()"
        ]
    },
    "edu.stanford.nlp.ie.BisequenceEmpiricalNERPrior$Entity:void <init>(int,java.util.List,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.BisequenceEmpiricalNERPrior:java.util.List extractEntities(int[],java.util.List,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index,int)"
        ]
    },
    "edu.stanford.nlp.pipeline.Requirement:java.lang.String getMissingRequirement(java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters:java.lang.String toSortedString(edu.stanford.nlp.stats.Counter,int,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.stats.Counters:java.lang.String toSortedString(edu.stanford.nlp.stats.Counter,int,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern$AndPatternExpr:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern$SequencePatternExpr:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters:java.lang.String toSortedByKeysString(edu.stanford.nlp.stats.Counter,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern$OrPatternExpr:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Pair:void save(java.io.DataOutputStream)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$ExplicitTemporalSet:java.lang.String toFormattedString(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$PeriodicTemporalSet:java.lang.String toFormattedString(int)",
            "edu.stanford.nlp.time.SUTime$OrdinalTime:java.lang.String toFormattedString(int)",
            "edu.stanford.nlp.time.SUTime$RelativeTime:java.lang.String toFormattedString(int)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:java.util.Set getSplitCategories(edu.stanford.nlp.trees.Treebank,boolean,int,double,double,edu.stanford.nlp.trees.TreebankLanguagePack)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:java.util.Set getSplitCategories(edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.trees.TreebankLanguagePack)",
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter getSegmenterDataFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)"
        ]
    },
    "edu.stanford.nlp.trees.Treebank:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Pair:void save(java.io.DataOutputStream)",
            "edu.stanford.nlp.util.PaddedList:java.lang.String toString()"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser$N5BiLexPCFGParser:void relaxTempHook()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void triggerHooks(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void triggerAllHooks(edu.stanford.nlp.parser.lexparser.Edge)",
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void projectHooks(edu.stanford.nlp.parser.lexparser.Edge)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.french.DybroFrenchHeadFinder:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.SisterAnnotationStats:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.international.french.FrenchHeadFinder:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.common.NoPunctuationHeadFinder:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.CollinsHeadFinder:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.FilteringTreebank$FilteringTreebankIterator:edu.stanford.nlp.trees.Tree next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.FilteringTreebank$FilteringTreebankIterator:java.lang.Object next()"
        ]
    },
    "edu.stanford.nlp.trees.FilteringTreebank$FilteringTreebankIterator:void <init>(java.util.Iterator,edu.stanford.nlp.util.Filter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.FilteringTreebank:java.util.Iterator iterator()"
        ]
    },
    "edu.stanford.nlp.trees.CompositeTreebank$CompositeTreebankIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TransformingTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.trees.TransformingTreebank$TransformingTreebankIterator:edu.stanford.nlp.trees.Tree next()",
            "edu.stanford.nlp.trees.CompositeTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:double testOnTreebank(edu.stanford.nlp.trees.Treebank)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.Treebank:java.lang.String textualSummary()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.metrics.TaggingEval:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.metrics.LeafAncestorEval:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.metrics.UnlabeledAttachmentEval:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.metrics.Evalb:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter getSegmenterDataFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)"
        ]
    },
    "edu.stanford.nlp.tagger.io.TreeTaggedFileReader:java.util.List next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.io.TreeTaggedFileReader:java.lang.Object next()"
        ]
    },
    "edu.stanford.nlp.trees.CompositeTreebank:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.TransformingTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.trees.CompositeTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.trees.TransformingTreebank:java.util.Iterator iterator()",
            "edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer:edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)"
        ]
    },
    "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void optimizeSieveOrdering(edu.stanford.nlp.dcoref.MentionExtractor,java.util.Properties,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.ie.machinereading.common.DomReader:org.w3c.dom.Document readDocument(java.io.File)",
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.TransformingTreebank:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.MemoryTreebank:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.TestClassifier:void test()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TestClassifier:void <init>(edu.stanford.nlp.tagger.maxent.MaxentTagger,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger(edu.stanford.nlp.tagger.maxent.TaggerConfig)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CompositeExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule createExtractionRule(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule createExtractionRule(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String,java.lang.Object,edu.stanford.nlp.ling.tokensregex.types.Expression)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule createExtractionRule(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$Rule createRule(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$TokenPatternExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule createExtractionRule(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule createExtractionRule(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String,java.lang.Object,edu.stanford.nlp.ling.tokensregex.types.Expression)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$TextPatternExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule createExtractionRule(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule createExtractionRule(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String,java.lang.Object,edu.stanford.nlp.ling.tokensregex.types.Expression)"
        ]
    },
    "edu.stanford.nlp.time.TimeFormatter$TimePatternExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule createExtractionRule(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule createExtractionRule(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String,java.lang.Object,edu.stanford.nlp.ling.tokensregex.types.Expression)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule:void update(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequenceMatchResultExtractor:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequencePatternExtractRule:java.lang.Object apply(java.util.List)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequencePatternExtractRule:boolean extract(java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringMatchResultExtractor:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringPatternExtractRule:java.lang.Object apply(java.lang.String)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringPatternExtractRule:boolean extract(java.lang.String,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$WrappedExpression:edu.stanford.nlp.ling.tokensregex.types.Expression simplify(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$WrappedExpression:edu.stanford.nlp.ling.tokensregex.types.Expression simplify(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue simplifyNoTypeConversion(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue simplifyNoTypeConversion(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$Rule createRule(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$MethodCallExpression:edu.stanford.nlp.ling.tokensregex.types.Expression simplify(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$WrappedExpression:edu.stanford.nlp.ling.tokensregex.types.Expression simplify(edu.stanford.nlp.ling.tokensregex.Env)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue simplifyNoTypeConversion(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$MethodCallExpression:edu.stanford.nlp.ling.tokensregex.types.Expression simplify(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AssignmentRule createAssignmentRule(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.ling.tokensregex.types.AssignableExpression,edu.stanford.nlp.ling.tokensregex.types.Expression)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$Rule AssignmentRule(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionNodePattern:boolean match(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$NodePatternState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)",
            "edu.stanford.nlp.ling.tokensregex.NodePattern:java.lang.Object matchWithResult(java.lang.Object)",
            "edu.stanford.nlp.ling.tokensregex.NodePattern$NegateNodePattern:boolean match(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$SimpleCachedExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$FunctionCallExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue evaluateNoTypeConversion(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions:java.lang.Object asObject(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequenceMatchResultExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Value attemptTypeConversion(edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue,edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$VarAssignmentExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringMatchResultExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(java.util.regex.MatchResult)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$WrappedExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:edu.stanford.nlp.ling.tokensregex.types.Value getValue(java.lang.String)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$IfExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$VarExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Value doEvaluation(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$MethodCallExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.Collection,java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.Treebank,java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser trainFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser trainFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:java.util.List extractExpressions(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:java.util.List extractCoreMapsToList(java.util.List,edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.time.TimeExpressionExtractorImpl:java.util.List extractTimeExpressions(edu.stanford.nlp.util.CoreMap,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.stats.IntCounter:void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.stats.ClassicCounter:void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood$RedwoodChannels:void prettyLog(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.util.logging.PrettyLogger:void log(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood$Util:void prettyLog(java.lang.String,java.lang.Object)",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$RedwoodChannels:void prettyLog(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Object)",
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.util.Dictionary)"
        ]
    },
    "edu.stanford.nlp.util.ArrayCoreMap:void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.stats.Counters$7:void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.Pair:void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.stats.Counters$6:void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.Quadruple:void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.Triple:void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void postMortem()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void extract(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.parser.lexparser.GrammarCompactor,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.Treebank,java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:boolean parse(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:boolean parseInternal(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.util.StringUtils:java.util.Collection getNgramsString(java.lang.String,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.EntityCachingAbstractSequencePrior:double[] scoresOf(int[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.EntityCachingAbstractSequencePrior:double scoreOf(int[],int)",
            "edu.stanford.nlp.sequences.FactoredSequenceModel:double[] scoresOf(int[],int)",
            "edu.stanford.nlp.ie.EntityCachingAbstractSequencePrior:double[] getConditionalDistribution(int[],int)"
        ]
    },
    "edu.stanford.nlp.sequences.FactoredSequenceModel:double scoreOf(int[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:double sampleSequenceForward(edu.stanford.nlp.sequences.SequenceModel,int[],double,java.util.Set)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.structure.AnnotationUtils:java.lang.String datasetToString(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.Pair:void save(java.io.DataOutputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionNodePattern:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$NodePatternExpr:java.lang.String toString()"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern$NodePatternExpr:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.StringUtils:java.util.Properties argsToProperties(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void main(java.lang.String[])",
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.crf.CRFBiasedClassifier:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.regexp.NumberSequenceClassifier:void main(java.lang.String[])",
            "edu.stanford.nlp.pipeline.CustomAnnotationSerializer:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.QPTreeTransformer:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.CoordinationTransformer:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void main(java.lang.String[])",
            "edu.stanford.nlp.stats.MultiClassChunkEvalStats:void main(java.lang.String[])",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void main(java.lang.String[])",
            "edu.stanford.nlp.time.SUTimeMain:void main(java.lang.String[])",
            "edu.stanford.nlp.util.StringUtils:java.util.Properties argsToProperties(java.lang.String[],java.util.Map)",
            "edu.stanford.nlp.international.arabic.process.ArabicTokenizer:void main(java.lang.String[])",
            "edu.stanford.nlp.trees.GrammaticalStructure:void main(java.lang.String[])",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void <init>(java.lang.String)",
            "edu.stanford.nlp.classify.LogisticClassifier:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.pascal.ISODateInstance:void main(java.lang.String[])",
            "edu.stanford.nlp.dcoref.CoNLL2011DocumentReader:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.ClassifierCombiner:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.crf.CRFFeatureExporter:void main(java.lang.String[])",
            "edu.stanford.nlp.tagger.maxent.TaggerConfig:void <init>(java.lang.String[])",
            "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.process.PTBTokenizer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.EntityCachingAbstractSequencePriorBIO:java.lang.String toString(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.EntityCachingAbstractSequencePriorBIO:void updateSequenceElement(int[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.EntityCachingAbstractSequencePriorBIO:double[] scoresOf(int[],int)",
            "edu.stanford.nlp.sequences.FactoredSequenceListener:void updateSequenceElement(int[],int,int)"
        ]
    },
    "edu.stanford.nlp.ie.EntityCachingAbstractSequencePriorBIO:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$10:java.lang.String compute(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$StringFunction:edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env,java.util.List)"
        ]
    },
    "edu.stanford.nlp.time.SUTimeMain:void processTimebankCsvSent(edu.stanford.nlp.pipeline.AnnotationPipeline,edu.stanford.nlp.time.SUTimeMain$TimebankSent,java.io.PrintWriter,edu.stanford.nlp.time.SUTimeMain$EvalStats)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:void processTimebankCsv(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.time.SUTimeMain:void processTempEval2Doc(edu.stanford.nlp.pipeline.AnnotationPipeline,edu.stanford.nlp.pipeline.Annotation,java.util.Map,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:void processTempEval2Tab(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.process.Americanize:void <clinit>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$14:edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$FunctionCallExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.util.StringUtils:java.lang.String join(java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.TokenSequencePattern:edu.stanford.nlp.ling.tokensregex.TokenSequencePattern compile(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.process.PTBTokenizer:java.lang.String ptb2Text(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.process.PTBTokenizer:java.lang.String labelList2Text(java.util.List)"
        ]
    },
    "edu.stanford.nlp.dcoref.Mention:java.lang.String getPattern(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Mention:java.lang.String getPattern()",
            "edu.stanford.nlp.dcoref.Mention:java.lang.String[] getSplitPattern()"
        ]
    },
    "edu.stanford.nlp.time.SUTimeMain:void processTempEval2Tab(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:void processTempEval2(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$2:java.lang.Integer apply(java.util.regex.MatchResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$2:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.time.TimeExpressionExtractors$IsoDateTimePatternFunc:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractors$IsoDateTimePatternFunc:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult:java.lang.String group(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$9:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)",
            "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$6:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)"
        ]
    },
    "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$8:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$8:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.time.TimeExpressionExtractors$DurationRule:edu.stanford.nlp.time.SUTime$Duration extractDuration(java.util.regex.MatchResult,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractors$DurationRule:edu.stanford.nlp.time.SUTime$Temporal extract(java.util.regex.MatchResult)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$RegexMatchVarExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue evaluateNoTypeConversion(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions:java.lang.Object asObject(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequenceMatchResultExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Value attemptTypeConversion(edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue,edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$VarAssignmentExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringMatchResultExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(java.util.regex.MatchResult)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$WrappedExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:edu.stanford.nlp.ling.tokensregex.types.Value getValue(java.lang.String)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$ConditionalExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$IfExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$VarExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Value doEvaluation(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$MethodCallExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult:java.lang.String group()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$11:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)",
            "edu.stanford.nlp.time.TimeExpressionExtractors$DurationRule:edu.stanford.nlp.time.SUTime$Duration extractDuration(java.util.regex.MatchResult,java.lang.String)",
            "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$15:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)"
        ]
    },
    "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$7:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$7:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$3:java.lang.Integer apply(java.util.regex.MatchResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$3:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$12:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$12:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$16:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$16:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$10:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$10:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$14:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$14:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult:edu.stanford.nlp.ling.tokensregex.SequenceMatchResult$MatchedGroupInfo groupInfo(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:edu.stanford.nlp.ling.tokensregex.SequenceMatchResult$MatchedGroupInfo groupInfo(int)",
            "edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult:edu.stanford.nlp.ling.tokensregex.SequenceMatchResult$MatchedGroupInfo groupInfo()",
            "edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult:edu.stanford.nlp.ling.tokensregex.SequenceMatchResult$MatchedGroupInfo groupInfo(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.time.TimeExpressionExtractors$DurationRule:edu.stanford.nlp.time.SUTime$Temporal extract(java.util.regex.MatchResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractors$DurationRule:edu.stanford.nlp.time.SUTime$Temporal apply(java.lang.String)",
            "edu.stanford.nlp.time.TimeExpressionExtractors$DurationRule:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.List)"
        ]
    },
    "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$6:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$6:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$4:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$4:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$17:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$17:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$13:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$13:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.time.TimeExpressionExtractors$TemporalLookupFunc:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractors$TemporalLookupFunc:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ie.EntityCachingAbstractSequencePrior:java.lang.String toString(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.EntityCachingAbstractSequencePrior:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.BisequenceEmpiricalNERPrior:java.util.List extractEntities(int[],java.util.List,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.Counters:java.lang.String toSortedString(edu.stanford.nlp.stats.Counter,int,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.SUTime$PeriodicTemporalSet:java.lang.String toFormattedString(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Temporal:java.lang.String getTimexValue()",
            "edu.stanford.nlp.time.SUTime$PeriodicTemporalSet:java.lang.String toFormattedString(int)",
            "edu.stanford.nlp.time.SUTime$Temporal:java.util.Map getTimexAttributes(edu.stanford.nlp.time.SUTime$TimeIndex)",
            "edu.stanford.nlp.time.SUTime$OrdinalTime:java.lang.String toFormattedString(int)",
            "edu.stanford.nlp.time.SUTime$RelativeTime:java.lang.String toFormattedString(int)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$OrdinalTime:java.lang.String toFormattedString(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Temporal:java.lang.String toString()",
            "edu.stanford.nlp.time.SUTime$Range:java.lang.String toFormattedString(int)",
            "edu.stanford.nlp.time.SUTime$PeriodicTemporalSet:java.lang.String toFormattedString(int)",
            "edu.stanford.nlp.time.SUTime$OrdinalTime:java.lang.String toFormattedString(int)",
            "edu.stanford.nlp.time.SUTime$RelativeTime:java.lang.String toFormattedString(int)",
            "edu.stanford.nlp.time.SUTime$Temporal:java.lang.String toISOString()",
            "edu.stanford.nlp.time.SUTime$InexactTime:java.lang.String toFormattedString(int)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$RelativeTime:java.lang.String toFormattedString(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Temporal:java.lang.String toString()",
            "edu.stanford.nlp.time.SUTime$Range:java.lang.String toFormattedString(int)",
            "edu.stanford.nlp.time.SUTime$Temporal:java.lang.String getTimexValue()",
            "edu.stanford.nlp.time.SUTime$PeriodicTemporalSet:java.lang.String toFormattedString(int)",
            "edu.stanford.nlp.time.SUTime$Temporal:java.util.Map getTimexAttributes(edu.stanford.nlp.time.SUTime$TimeIndex)",
            "edu.stanford.nlp.time.SUTime$OrdinalTime:java.lang.String toFormattedString(int)",
            "edu.stanford.nlp.time.SUTime$RelativeTime:java.lang.String toFormattedString(int)",
            "edu.stanford.nlp.time.SUTime$Temporal:java.lang.String toISOString()",
            "edu.stanford.nlp.time.SUTime$InexactTime:java.lang.String toFormattedString(int)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:java.util.Set getSplitCategories(edu.stanford.nlp.trees.Treebank,double,edu.stanford.nlp.trees.TreebankLanguagePack)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:java.util.Set getEnglishSplitCategories(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter getSegmenterDataFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void <init>(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)"
        ]
    },
    "edu.stanford.nlp.util.PaddedList:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void projectHooks(edu.stanford.nlp.parser.lexparser.Edge)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.BiLexPCFGParser:void processEdge(edu.stanford.nlp.parser.lexparser.Edge)"
        ]
    },
    "edu.stanford.nlp.trees.FilteringTreebank$FilteringTreebankIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor:void tallyTrees(java.util.Collection,double)",
            "edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar:void tune(java.util.Collection)",
            "edu.stanford.nlp.trees.FilteringTreebank$FilteringTreebankIterator:void primeNext()",
            "edu.stanford.nlp.parser.lexparser.BaseLexicon:void train(java.util.Collection,double)",
            "edu.stanford.nlp.trees.FilteringTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)",
            "edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor:void saveTrees(java.util.Collection,double,java.util.Collection,double)"
        ]
    },
    "edu.stanford.nlp.trees.CompositeTreebank:void apply(edu.stanford.nlp.trees.TreeVisitor)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ParentAnnotationStats:java.util.Set getSplitCategories(edu.stanford.nlp.trees.Treebank,boolean,int,double,double,edu.stanford.nlp.trees.TreebankLanguagePack)"
        ]
    },
    "edu.stanford.nlp.tagger.io.TreeTaggedFileReader:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TestClassifier:void test()",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger(java.lang.Iterable,java.io.BufferedWriter,edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TestClassifier:void <init>(edu.stanford.nlp.tagger.maxent.MaxentTagger,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.TestClassifier:void <init>(edu.stanford.nlp.tagger.maxent.MaxentTagger)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger(edu.stanford.nlp.tagger.maxent.TaggerConfig)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule createExtractionRule(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String,java.lang.Object,edu.stanford.nlp.ling.tokensregex.types.Expression)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$Rule ExpressionExtractorRule(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$Rule createRule(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$Rule Rule(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CompositeExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$TokenPatternExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$TextPatternExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$TokenPatternExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr,edu.stanford.nlp.ling.tokensregex.types.Expression)",
            "edu.stanford.nlp.time.TimeFormatter$TimePatternExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env,java.util.Map)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CompositeExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr,edu.stanford.nlp.ling.tokensregex.types.Expression)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$TextPatternExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String,edu.stanford.nlp.ling.tokensregex.types.Expression)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequencePatternExtractRule:java.lang.Object apply(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequencePatternExtractRule:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequencePatternExtractRule:boolean extract(java.util.List,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequencePatternExtractRule:boolean extract(java.lang.Object,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringPatternExtractRule:java.lang.Object apply(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringPatternExtractRule:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringPatternExtractRule:boolean extract(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringPatternExtractRule:boolean extract(java.lang.Object,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$Rule AssignmentRule(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$Rule Rule(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern$NodePatternState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$State:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.NodePattern:java.lang.Object matchWithResult(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$NodePatternState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.NodePattern$NegateNodePattern:boolean match(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$NodePatternState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)",
            "edu.stanford.nlp.ling.tokensregex.NodePattern:java.lang.Object matchWithResult(java.lang.Object)",
            "edu.stanford.nlp.ling.tokensregex.NodePattern$NegateNodePattern:boolean match(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser trainFromTreebank(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.parser.lexparser.LexicalizedParser trainFromTreebank(java.lang.String,java.io.FileFilter,edu.stanford.nlp.parser.lexparser.Options)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:java.util.List extractCoreMapsToList(java.util.List,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:java.util.List extractCoreMaps(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.time.TimeExpressionExtractorImpl:java.util.List extractTimeExpressions(edu.stanford.nlp.util.CoreMap,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractorImpl:java.util.List extractTimeExpressionCoreMaps(edu.stanford.nlp.util.CoreMap,java.lang.String,edu.stanford.nlp.time.SUTime$TimeIndex)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$RedwoodChannels:void prettyLog(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.Redwood$Util:void prettyLog(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.util.logging.PrettyLogger:void log(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.Redwood$Util:void prettyLog(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.util.Dictionary)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.logging.PrettyLogger:void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels,java.lang.String,java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:boolean parseInternal(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:boolean parse(java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.EntityCachingAbstractSequencePrior:double scoreOf(int[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sequences.FactoredSequenceModel:double[] scoresOf(int[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:edu.stanford.nlp.util.Pair samplePositionHelper(edu.stanford.nlp.sequences.SequenceModel,int[],int,double)",
            "edu.stanford.nlp.sequences.FactoredSequenceModel:double scoreOf(int[],int)"
        ]
    },
    "edu.stanford.nlp.ie.EntityCachingAbstractSequencePrior:double[] getConditionalDistribution(int[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler:double sampleSequenceForward(edu.stanford.nlp.sequences.SequenceModel,int[],double,java.util.Set)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:int[] findBestUsingAnnealing(edu.stanford.nlp.sequences.SequenceModel,edu.stanford.nlp.sequences.CoolingSchedule,int[])",
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:double sampleSequenceForward(edu.stanford.nlp.sequences.SequenceModel,int[])"
        ]
    },
    "edu.stanford.nlp.ie.ner.CMMClassifier:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFBiasedClassifier:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.regexp.NumberSequenceClassifier:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.CustomAnnotationSerializer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.QPTreeTransformer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.CoordinationTransformer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.stats.MultiClassChunkEvalStats:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.international.arabic.process.ArabicTokenizer:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void <init>(edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.parser.lexparser.Lexicon,edu.stanford.nlp.parser.lexparser.ParserQueryFactory)",
            "edu.stanford.nlp.pipeline.POSTaggerAnnotator:edu.stanford.nlp.tagger.maxent.MaxentTagger loadModel(java.lang.String,boolean)",
            "edu.stanford.nlp.parser.lexparser.FactoredParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.classify.LogisticClassifier:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.pascal.ISODateInstance:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.ClassifierCombiner:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFFeatureExporter:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.tagger.maxent.TaggerConfig:void <init>(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.EntityCachingAbstractSequencePriorBIO:double[] scoresOf(int[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.EntityCachingAbstractSequencePriorBIO:double scoreOf(int[],int)",
            "edu.stanford.nlp.ie.EntityCachingAbstractSequencePriorBIO:double[] getConditionalDistribution(int[],int)",
            "edu.stanford.nlp.sequences.FactoredSequenceModel:double[] scoresOf(int[],int)"
        ]
    },
    "edu.stanford.nlp.sequences.FactoredSequenceListener:void updateSequenceElement(int[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:double samplePosition(edu.stanford.nlp.sequences.SequenceModel,int[],int,double)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$StringFunction:edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$FunctionCallExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.time.SUTimeMain:void processTimebankCsv(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.TokenSequencePattern:edu.stanford.nlp.ling.tokensregex.TokenSequencePattern compile(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.TokenSequencePattern:edu.stanford.nlp.ling.tokensregex.TokenSequencePattern compile(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.process.PTBTokenizer:java.lang.String labelList2Text(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.Mention:java.lang.String getPattern()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Mention:java.lang.String[] getSplitPattern()"
        ]
    },
    "edu.stanford.nlp.dcoref.Mention:java.lang.String[] getSplitPattern()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.Rules:boolean entityCorefDictionary(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries,int,int)"
        ]
    },
    "edu.stanford.nlp.time.SUTimeMain:void processTempEval2(edu.stanford.nlp.pipeline.AnnotationPipeline,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$2:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractors$TemporalComposeObjFunc:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)"
        ]
    },
    "edu.stanford.nlp.time.TimeExpressionExtractors$IsoDateTimePatternFunc:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractors$TemporalComposeFunc:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)",
            "edu.stanford.nlp.time.TimeExpressionExtractors$GenericTimePatternExtractor:edu.stanford.nlp.time.SUTime$Temporal extract(java.util.regex.MatchResult)"
        ]
    },
    "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$9:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$9:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$8:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractors$GenericTimePatternExtractor:edu.stanford.nlp.time.SUTime$Temporal extract(java.util.regex.MatchResult)"
        ]
    },
    "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$11:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$11:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$15:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$15:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$7:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractors$GenericTimePatternExtractor:edu.stanford.nlp.time.SUTime$Temporal extract(java.util.regex.MatchResult)"
        ]
    },
    "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$3:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractors$TemporalComposeObjFunc:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)"
        ]
    },
    "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$12:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractors$GenericTimePatternExtractor:edu.stanford.nlp.time.SUTime$Temporal extract(java.util.regex.MatchResult)"
        ]
    },
    "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$16:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractors$GenericTimePatternExtractor:edu.stanford.nlp.time.SUTime$Temporal extract(java.util.regex.MatchResult)"
        ]
    },
    "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$10:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractors$GenericTimePatternExtractor:edu.stanford.nlp.time.SUTime$Temporal extract(java.util.regex.MatchResult)"
        ]
    },
    "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$14:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractors$GenericTimePatternExtractor:edu.stanford.nlp.time.SUTime$Temporal extract(java.util.regex.MatchResult)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatcher:edu.stanford.nlp.ling.tokensregex.SequenceMatchResult$MatchedGroupInfo groupInfo(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$RegexMatchResultVarExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult:edu.stanford.nlp.ling.tokensregex.SequenceMatchResult$MatchedGroupInfo groupInfo(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult:edu.stanford.nlp.ling.tokensregex.SequenceMatchResult$MatchedGroupInfo groupInfo()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult:edu.stanford.nlp.ling.tokensregex.SequenceMatchResult$MatchedGroupInfo groupInfo(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$RegexMatchResultVarExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.time.TimeExpressionExtractors$DurationRule:edu.stanford.nlp.time.SUTime$Temporal apply(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractors$DurationRule:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.time.TimeExpressionExtractors$DurationRule:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractors$DurationRule:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$6:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractors$GenericTimePatternExtractor:edu.stanford.nlp.time.SUTime$Temporal extract(java.util.regex.MatchResult)"
        ]
    },
    "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$4:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractors$GenericTimePatternExtractor:edu.stanford.nlp.time.SUTime$Temporal extract(java.util.regex.MatchResult)"
        ]
    },
    "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$17:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractors$GenericTimePatternExtractor:edu.stanford.nlp.time.SUTime$Temporal extract(java.util.regex.MatchResult)"
        ]
    },
    "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$13:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractors$GenericTimePatternExtractor:edu.stanford.nlp.time.SUTime$Temporal extract(java.util.regex.MatchResult)"
        ]
    },
    "edu.stanford.nlp.time.TimeExpressionExtractors$TemporalLookupFunc:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractors$TemporalComposeFunc:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)",
            "edu.stanford.nlp.time.TimeExpressionExtractors$GenericTimePatternExtractor:edu.stanford.nlp.time.SUTime$Temporal extract(java.util.regex.MatchResult)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Temporal:java.lang.String getTimexValue()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Temporal:java.util.Map getTimexAttributes(edu.stanford.nlp.time.SUTime$TimeIndex)",
            "edu.stanford.nlp.time.SUTime$PeriodicTemporalSet:java.util.Map getTimexAttributes(edu.stanford.nlp.time.SUTime$TimeIndex)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Temporal:java.util.Map getTimexAttributes(edu.stanford.nlp.time.SUTime$TimeIndex)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Range:java.util.Map getTimexAttributes(edu.stanford.nlp.time.SUTime$TimeIndex)",
            "edu.stanford.nlp.time.SUTime$RelativeTime:java.util.Map getTimexAttributes(edu.stanford.nlp.time.SUTime$TimeIndex)",
            "edu.stanford.nlp.time.SUTime$PeriodicTemporalSet:java.util.Map getTimexAttributes(edu.stanford.nlp.time.SUTime$TimeIndex)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Temporal:java.lang.String toString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.util.Pair:void save(java.io.DataOutputStream)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Range:java.lang.String toFormattedString(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Temporal:java.lang.String getTimexValue()",
            "edu.stanford.nlp.time.SUTime$PeriodicTemporalSet:java.lang.String toFormattedString(int)",
            "edu.stanford.nlp.time.SUTime$Temporal:java.util.Map getTimexAttributes(edu.stanford.nlp.time.SUTime$TimeIndex)",
            "edu.stanford.nlp.time.SUTime$OrdinalTime:java.lang.String toFormattedString(int)",
            "edu.stanford.nlp.time.SUTime$RelativeTime:java.lang.String toFormattedString(int)",
            "edu.stanford.nlp.time.SUTime$InexactTime:java.lang.String toFormattedString(int)",
            "edu.stanford.nlp.time.SUTime$TimeWithRange:java.lang.String toFormattedString(int)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$Temporal:java.lang.String toISOString()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$CompositePartialTime:org.joda.time.format.DateTimeFormatter getFormatter(int)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$InexactTime:java.lang.String toFormattedString(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Temporal:java.lang.String toString()",
            "edu.stanford.nlp.time.SUTime$Range:java.lang.String toFormattedString(int)",
            "edu.stanford.nlp.time.SUTime$PeriodicTemporalSet:java.lang.String toFormattedString(int)",
            "edu.stanford.nlp.time.SUTime$OrdinalTime:java.lang.String toFormattedString(int)",
            "edu.stanford.nlp.time.SUTime$RelativeTime:java.lang.String toFormattedString(int)",
            "edu.stanford.nlp.time.SUTime$Temporal:java.lang.String toISOString()",
            "edu.stanford.nlp.time.SUTime$InexactTime:java.lang.String toFormattedString(int)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void <init>(edu.stanford.nlp.trees.Treebank,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.util.Index,edu.stanford.nlp.util.Index)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger(java.lang.Iterable,java.io.BufferedWriter,edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger(java.io.BufferedReader,java.io.BufferedWriter,java.lang.String,edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle)",
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger()"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.TestClassifier:void <init>(edu.stanford.nlp.tagger.maxent.MaxentTagger)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTest(edu.stanford.nlp.tagger.maxent.TaggerConfig)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void main(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$Rule ExpressionExtractorRule(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$Rule Rule(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$Rule Rule(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:java.util.List RuleList(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$TokenPatternExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr,edu.stanford.nlp.ling.tokensregex.types.Expression)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule createTokenPatternRule(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr,edu.stanford.nlp.ling.tokensregex.types.Expression)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CompositeExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr,edu.stanford.nlp.ling.tokensregex.types.Expression)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$TextPatternExtractRuleCreator:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String,edu.stanford.nlp.ling.tokensregex.types.Expression)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule createTextPatternRule(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String,edu.stanford.nlp.ling.tokensregex.types.Expression)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequencePatternExtractRule:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapToListFunctionApplier:java.lang.Object apply(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapFunctionApplier:java.lang.Object apply(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequencePatternExtractRule:boolean extract(java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule:boolean extract(java.lang.Object,java.util.List)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapExtractRule:boolean extract(edu.stanford.nlp.util.CoreMap,java.util.List)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapToListExtractRule:boolean extract(edu.stanford.nlp.util.CoreMap,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringPatternExtractRule:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapFunctionApplier:java.lang.Object apply(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringPatternExtractRule:boolean extract(java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapExtractRule:boolean extract(edu.stanford.nlp.util.CoreMap,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern$State:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$RepeatState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$State:boolean match0(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates)",
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$State:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:java.util.List extractCoreMaps(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:java.util.List extractCoreMapsMergedWithTokens(edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.pipeline.TokensRegexAnnotator:java.util.List extract(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.time.TimeExpressionExtractorImpl:java.util.List extractTimeExpressionCoreMaps(edu.stanford.nlp.util.CoreMap,java.lang.String,edu.stanford.nlp.time.SUTime$TimeIndex)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeAnnotator:java.util.List annotateSingleSentence(edu.stanford.nlp.util.CoreMap,java.lang.String,edu.stanford.nlp.time.SUTime$TimeIndex)",
            "edu.stanford.nlp.time.TimeExpressionExtractorImpl:java.util.List extractTimeExpressionCoreMaps(edu.stanford.nlp.util.CoreMap,java.lang.String)",
            "edu.stanford.nlp.time.TimeAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.util.logging.Redwood$Util:void prettyLog(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:boolean parse(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:boolean parseAndReport(java.util.List,java.io.PrintWriter)",
            "edu.stanford.nlp.pipeline.ParserAnnotator:edu.stanford.nlp.trees.Tree doOneSentence(java.util.List,java.util.List)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Tree parseTree(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.ParsingThreadsafeProcessor:edu.stanford.nlp.parser.lexparser.ParserQuery process(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.RerankingParserQuery:boolean parse(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Tree parse(java.util.List)"
        ]
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler:edu.stanford.nlp.util.Pair samplePositionHelper(edu.stanford.nlp.sequences.SequenceModel,int[],int,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:double sampleSequenceForward(edu.stanford.nlp.sequences.SequenceModel,int[],double,java.util.Set)",
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:double samplePosition(edu.stanford.nlp.sequences.SequenceModel,int[],int,double)",
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:edu.stanford.nlp.util.Pair access$000(edu.stanford.nlp.sequences.SequenceGibbsSampler,edu.stanford.nlp.sequences.SequenceModel,int[],int,double)"
        ]
    },
    "edu.stanford.nlp.sequences.FactoredSequenceModel:double scoreOf(int[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler:int[] findBestUsingAnnealing(edu.stanford.nlp.sequences.SequenceModel,edu.stanford.nlp.sequences.CoolingSchedule,int[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classifyGibbsUsingPrior(java.util.List,edu.stanford.nlp.sequences.SequenceModel,edu.stanford.nlp.sequences.SequenceListener,double,double)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classifyGibbsUsingPrior(java.util.List,edu.stanford.nlp.sequences.SequenceModel[],edu.stanford.nlp.sequences.SequenceListener[],double[])",
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:int[] findBestUsingAnnealing(edu.stanford.nlp.sequences.SequenceModel,edu.stanford.nlp.sequences.CoolingSchedule)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classifyGibbs(java.util.List,edu.stanford.nlp.util.Triple)"
        ]
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler:double sampleSequenceForward(edu.stanford.nlp.sequences.SequenceModel,int[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:double sampleSequenceRepeatedly(edu.stanford.nlp.sequences.SequenceModel,int[],int)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void <init>(edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.parser.lexparser.Lexicon,edu.stanford.nlp.parser.lexparser.ParserQueryFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void <init>(edu.stanford.nlp.parser.lexparser.LexicalizedParser)"
        ]
    },
    "edu.stanford.nlp.pipeline.POSTaggerAnnotator:edu.stanford.nlp.tagger.maxent.MaxentTagger loadModel(java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.POSTaggerAnnotator:void <init>(java.lang.String,boolean,int)",
            "edu.stanford.nlp.pipeline.POSTaggerAnnotator:void <init>(java.lang.String,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.ie.EntityCachingAbstractSequencePriorBIO:double scoreOf(int[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.EntityCachingAbstractSequencePriorBIO:double[] getConditionalDistribution(int[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler:double samplePosition(edu.stanford.nlp.sequences.SequenceModel,int[],int,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:double sampleSequenceBackward(edu.stanford.nlp.sequences.SequenceModel,int[],double)",
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:double sampleSequenceForward(edu.stanford.nlp.sequences.SequenceModel,int[],double,java.util.Set)",
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:double samplePosition(edu.stanford.nlp.sequences.SequenceModel,int[],int)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.TokenSequencePattern:edu.stanford.nlp.ling.tokensregex.TokenSequencePattern compile(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.Rules:boolean entityCorefDictionary(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries,java.util.Set,edu.stanford.nlp.dcoref.Semantics)",
            "edu.stanford.nlp.dcoref.Rules:boolean entityClusterAllCorefDictionary(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Dictionaries,int,int)"
        ]
    },
    "edu.stanford.nlp.time.TimeExpressionExtractors$TemporalComposeObjFunc:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractors$TemporalComposeObjFunc:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.time.TimeExpressionExtractors$TemporalComposeFunc:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractors$TemporalComposeFunc:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.time.TimeExpressionExtractors$GenericTimePatternExtractor:edu.stanford.nlp.time.SUTime$Temporal extract(java.util.regex.MatchResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractors$TimePatternExtractor:edu.stanford.nlp.time.SUTime$Temporal apply(java.lang.String)",
            "edu.stanford.nlp.time.TimeExpressionExtractors$TimePatternExtractor:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.List)",
            "edu.stanford.nlp.time.TimeExpressionExtractors$TimePatternExtractor:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$9:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractors$GenericTimePatternExtractor:edu.stanford.nlp.time.SUTime$Temporal extract(java.util.regex.MatchResult)"
        ]
    },
    "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$11:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractors$GenericTimePatternExtractor:edu.stanford.nlp.time.SUTime$Temporal extract(java.util.regex.MatchResult)"
        ]
    },
    "edu.stanford.nlp.time.EnglishTimeExpressionPatterns$15:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractors$GenericTimePatternExtractor:edu.stanford.nlp.time.SUTime$Temporal extract(java.util.regex.MatchResult)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.types.Expressions$RegexMatchResultVarExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue evaluateNoTypeConversion(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions:java.lang.Object asObject(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequenceMatchResultExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Value attemptTypeConversion(edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue,edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$VarAssignmentExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringMatchResultExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(java.util.regex.MatchResult)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$WrappedExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:edu.stanford.nlp.ling.tokensregex.types.Value getValue(java.lang.String)",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$ConditionalExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$IfExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$VarExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue:edu.stanford.nlp.ling.tokensregex.types.Value doEvaluation(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])",
            "edu.stanford.nlp.ling.tokensregex.types.Expressions$MethodCallExpression:edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env,java.lang.Object[])"
        ]
    },
    "edu.stanford.nlp.time.TimeExpressionExtractors$DurationRule:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractors$DurationRule:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$PeriodicTemporalSet:java.util.Map getTimexAttributes(edu.stanford.nlp.time.SUTime$TimeIndex)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.SUTime$Range:java.util.Map getTimexAttributes(edu.stanford.nlp.time.SUTime$TimeIndex)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.SUTime$RelativeTime:java.util.Map getTimexAttributes(edu.stanford.nlp.time.SUTime$TimeIndex)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.SUTime$TimeWithRange:java.lang.String toFormattedString(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Temporal:java.lang.String toString()",
            "edu.stanford.nlp.time.SUTime$Range:java.lang.String toFormattedString(int)",
            "edu.stanford.nlp.time.SUTime$PeriodicTemporalSet:java.lang.String toFormattedString(int)",
            "edu.stanford.nlp.time.SUTime$OrdinalTime:java.lang.String toFormattedString(int)",
            "edu.stanford.nlp.time.SUTime$RelativeTime:java.lang.String toFormattedString(int)",
            "edu.stanford.nlp.time.SUTime$Temporal:java.lang.String toISOString()",
            "edu.stanford.nlp.time.SUTime$InexactTime:java.lang.String toFormattedString(int)"
        ]
    },
    "edu.stanford.nlp.time.SUTime$CompositePartialTime:org.joda.time.format.DateTimeFormatter getFormatter(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$PartialTime:java.lang.String toFormattedString(int)"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger(java.io.BufferedReader,java.io.BufferedWriter,java.lang.String,edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTagger()"
        ]
    },
    "edu.stanford.nlp.tagger.maxent.MaxentTagger:void runTest(edu.stanford.nlp.tagger.maxent.TaggerConfig)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.tagger.maxent.MaxentTagger:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:java.util.List RuleList(edu.stanford.nlp.ling.tokensregex.Env)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:void updateExpressionExtractor(edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor,java.io.Reader)",
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor getExpressionExtractor(edu.stanford.nlp.ling.tokensregex.Env,java.io.Reader)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule createTokenPatternRule(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr,edu.stanford.nlp.ling.tokensregex.types.Expression)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$Rule ExpressionExtractorRule(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule createTextPatternRule(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String,edu.stanford.nlp.ling.tokensregex.types.Expression)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$Rule ExpressionExtractorRule(edu.stanford.nlp.ling.tokensregex.Env)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapToListFunctionApplier:java.lang.Object apply(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapToListFunctionApplier:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapFunctionApplier:java.lang.Object apply(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapFunctionApplier:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule:boolean extract(java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapExtractRule:boolean extract(edu.stanford.nlp.util.CoreMap,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapExtractRule:boolean extract(java.lang.Object,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapToListExtractRule:boolean extract(edu.stanford.nlp.util.CoreMap,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapToListExtractRule:boolean extract(java.lang.Object,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern$RepeatState:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean,edu.stanford.nlp.ling.tokensregex.SequencePattern$State)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequencePattern$State:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates,boolean)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern$State:boolean match0(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.SequencePattern$State:boolean match(int,edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:java.util.List extractCoreMapsMergedWithTokens(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.TokensRegexAnnotator:java.util.List extract(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.pipeline.TokensRegexAnnotator:java.util.List extract(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.TokensRegexAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.time.TimeAnnotator:java.util.List annotateSingleSentence(edu.stanford.nlp.util.CoreMap,java.lang.String,edu.stanford.nlp.time.SUTime$TimeIndex)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.time.TimeExpressionExtractorImpl:java.util.List extractTimeExpressionCoreMaps(edu.stanford.nlp.util.CoreMap,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.regexp.NumberSequenceClassifier:java.util.List runSUTime(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.time.TimeAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery:boolean parseAndReport(java.util.List,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:double testOnTreebank(edu.stanford.nlp.trees.Treebank)",
            "edu.stanford.nlp.parser.lexparser.ParseFiles:void parseFiles(java.lang.String[],int,boolean,edu.stanford.nlp.process.TokenizerFactory,java.lang.String,java.lang.String,edu.stanford.nlp.util.Function,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.RerankingParserQuery:boolean parseAndReport(java.util.List,java.io.PrintWriter)",
            "edu.stanford.nlp.parser.lexparser.ParsingThreadsafeProcessor:edu.stanford.nlp.parser.lexparser.ParserQuery process(java.util.List)"
        ]
    },
    "edu.stanford.nlp.pipeline.ParserAnnotator:edu.stanford.nlp.trees.Tree doOneSentence(java.util.List,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ParserAnnotator:void doOneSentence(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Tree parseTree(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.ParsingThreadsafeProcessor:edu.stanford.nlp.parser.lexparser.ParserQuery process(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ParsingThreadsafeProcessor:java.lang.Object process(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.RerankingParserQuery:boolean parse(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ParserAnnotator:edu.stanford.nlp.trees.Tree doOneSentence(java.util.List,java.util.List)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Tree parseTree(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.ParsingThreadsafeProcessor:edu.stanford.nlp.parser.lexparser.ParserQuery process(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void main(java.lang.String[])",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Tree parse(java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Tree parse(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser$1:edu.stanford.nlp.trees.Tree process(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:java.util.List parseMultiple(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Tree apply(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Tree parseStrings(java.util.List)",
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Tree parse(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler:edu.stanford.nlp.util.Pair access$000(edu.stanford.nlp.sequences.SequenceGibbsSampler,edu.stanford.nlp.sequences.SequenceModel,int[],int,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.SequenceGibbsSampler$1:java.util.List process(java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classifyGibbsUsingPrior(java.util.List,edu.stanford.nlp.sequences.SequenceModel,edu.stanford.nlp.sequences.SequenceListener,double,double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classifyGibbsUsingPrior(java.util.List,edu.stanford.nlp.sequences.SequenceModel[],edu.stanford.nlp.sequences.SequenceListener[],double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler:int[] findBestUsingAnnealing(edu.stanford.nlp.sequences.SequenceModel,edu.stanford.nlp.sequences.CoolingSchedule)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classifyGibbs(java.util.List,edu.stanford.nlp.util.Triple)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classifyGibbs(java.util.List)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classify(java.util.List,edu.stanford.nlp.util.Triple)"
        ]
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler:double sampleSequenceRepeatedly(edu.stanford.nlp.sequences.SequenceModel,int[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:java.util.List collectSamples(edu.stanford.nlp.sequences.SequenceModel,int,int,int[])",
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:double sampleSequenceRepeatedly(edu.stanford.nlp.sequences.SequenceModel,int)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:void <init>(edu.stanford.nlp.parser.lexparser.LexicalizedParser)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.pipeline.POSTaggerAnnotator:void <init>(java.lang.String,boolean,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.POSTaggerAnnotator:void <init>(java.lang.String,boolean)"
        ]
    },
    "edu.stanford.nlp.pipeline.POSTaggerAnnotator:void <init>(java.lang.String,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLP$4:edu.stanford.nlp.pipeline.Annotator create()"
        ]
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler:double sampleSequenceBackward(edu.stanford.nlp.sequences.SequenceModel,int[],double)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:double sampleSequenceBackward(edu.stanford.nlp.sequences.SequenceModel,int[])"
        ]
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler:double samplePosition(edu.stanford.nlp.sequences.SequenceModel,int[],int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries,java.util.Set,edu.stanford.nlp.dcoref.Semantics)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void coreference(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve)"
        ]
    },
    "edu.stanford.nlp.dcoref.Rules:boolean entityClusterAllCorefDictionary(edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Dictionaries,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve:boolean coreferent(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.CorefCluster,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.dcoref.Dictionaries,java.util.Set,edu.stanford.nlp.dcoref.Semantics)"
        ]
    },
    "edu.stanford.nlp.time.TimeExpressionExtractors$TemporalComposeObjFunc:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractors$TemporalComposeFunc:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.regex.MatchResult)"
        ]
    },
    "edu.stanford.nlp.time.TimeExpressionExtractors$TemporalComposeFunc:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractors$GenericTimePatternExtractor:edu.stanford.nlp.time.SUTime$Temporal extract(java.util.regex.MatchResult)"
        ]
    },
    "edu.stanford.nlp.time.TimeExpressionExtractors$TimePatternExtractor:edu.stanford.nlp.time.SUTime$Temporal apply(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractors$TimePatternExtractor:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.time.TimeExpressionExtractors$TimePatternExtractor:edu.stanford.nlp.time.SUTime$Temporal apply(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractors$TimePatternExtractor:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.time.TimeExpressionExtractors$TimePatternExtractor:edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractors$TimePatternExtractor:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.time.TimeExpressionExtractors$DurationRule:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.SUTime$PartialTime:java.lang.String toFormattedString(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTime$Temporal:java.lang.String toString()",
            "edu.stanford.nlp.time.SUTime$Range:java.lang.String toFormattedString(int)",
            "edu.stanford.nlp.time.SUTime$PeriodicTemporalSet:java.lang.String toFormattedString(int)",
            "edu.stanford.nlp.time.SUTime$OrdinalTime:java.lang.String toFormattedString(int)",
            "edu.stanford.nlp.time.SUTime$RelativeTime:java.lang.String toFormattedString(int)",
            "edu.stanford.nlp.time.SUTime$Temporal:java.lang.String toISOString()",
            "edu.stanford.nlp.time.SUTime$InexactTime:java.lang.String toFormattedString(int)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:void updateExpressionExtractor(edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor,java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor createExtractorFromFiles(edu.stanford.nlp.ling.tokensregex.Env,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser:edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor getExpressionExtractor(edu.stanford.nlp.ling.tokensregex.Env,java.io.Reader)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor createExtractorFromString(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String)",
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor createExtractorFromFile(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapToListFunctionApplier:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression$SingleAnnotationExtractor:void annotate(edu.stanford.nlp.ling.tokensregex.MatchedExpression)",
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression$SingleAnnotationExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapFunctionApplier:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression$SingleAnnotationExtractor:void annotate(edu.stanford.nlp.ling.tokensregex.MatchedExpression)",
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression$SingleAnnotationExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapExtractRule:boolean extract(java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule:boolean extract(java.lang.Object,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapToListExtractRule:boolean extract(java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule:boolean extract(java.lang.Object,java.util.List)"
        ]
    },
    "edu.stanford.nlp.pipeline.TokensRegexAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.regexp.NumberSequenceClassifier:java.util.List runSUTime(edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.regexp.NumberSequenceClassifier:java.util.List classifyWithSUTime(java.util.List,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ParseFiles:void parseFiles(java.lang.String[],int,boolean,edu.stanford.nlp.process.TokenizerFactory,java.lang.String,java.lang.String,edu.stanford.nlp.util.Function,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.ParseFiles:void parseFiles(java.lang.String[],int,boolean,edu.stanford.nlp.process.TokenizerFactory,java.lang.String,java.lang.String,edu.stanford.nlp.util.Function,java.lang.String,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.TreePrint,edu.stanford.nlp.parser.lexparser.ParserQueryFactory)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.RerankingParserQuery:boolean parseAndReport(java.util.List,java.io.PrintWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.EvaluateTreebank:double testOnTreebank(edu.stanford.nlp.trees.Treebank)",
            "edu.stanford.nlp.parser.lexparser.ParseFiles:void parseFiles(java.lang.String[],int,boolean,edu.stanford.nlp.process.TokenizerFactory,java.lang.String,java.lang.String,edu.stanford.nlp.util.Function,java.lang.String)",
            "edu.stanford.nlp.parser.lexparser.ParsingThreadsafeProcessor:edu.stanford.nlp.parser.lexparser.ParserQuery process(java.util.List)"
        ]
    },
    "edu.stanford.nlp.pipeline.ParserAnnotator:void doOneSentence(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ParserAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.pipeline.ParserAnnotator:void access$000(edu.stanford.nlp.pipeline.ParserAnnotator,edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ParsingThreadsafeProcessor:java.lang.Object process(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser$1:edu.stanford.nlp.trees.Tree process(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser$1:java.lang.Object process(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:java.util.List parseMultiple(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Tree apply(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:java.lang.Object apply(java.lang.Object)",
            "edu.stanford.nlp.pipeline.ParserAnnotator:edu.stanford.nlp.trees.Tree doOneSentence(java.util.List)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Tree parseStrings(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:edu.stanford.nlp.trees.Tree parse(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler$1:java.util.List process(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.SequenceGibbsSampler$1:java.lang.Object process(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classifyGibbs(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classify(java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classify(java.util.List,edu.stanford.nlp.util.Triple)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void classifyAndWriteAnswers(java.util.Collection,java.util.List,java.io.PrintWriter,edu.stanford.nlp.sequences.DocumentReaderAndWriter)"
        ]
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler:java.util.List collectSamples(edu.stanford.nlp.sequences.SequenceModel,int,int,int[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:int[] findBestUsingSampling(edu.stanford.nlp.sequences.SequenceModel,int,int,int[])",
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:java.util.List collectSamples(edu.stanford.nlp.sequences.SequenceModel,int,int)"
        ]
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler:double sampleSequenceRepeatedly(edu.stanford.nlp.sequences.SequenceModel,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.POSTaggerAnnotator:void <init>(java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.POSTaggerAnnotator:void <init>(boolean)"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP$4:edu.stanford.nlp.pipeline.Annotator create()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorPool:edu.stanford.nlp.pipeline.Annotator get(java.lang.String)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLP$4:java.lang.Object create()"
        ]
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler:double sampleSequenceBackward(edu.stanford.nlp.sequences.SequenceModel,int[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void coreference(edu.stanford.nlp.dcoref.Document,edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:java.util.Map coref(edu.stanford.nlp.dcoref.Document)"
        ]
    },
    "edu.stanford.nlp.time.TimeExpressionExtractors$TimePatternExtractor:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpression$2:edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor createExtractorFromFiles(edu.stanford.nlp.ling.tokensregex.Env,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.GenericTimeExpressionPatterns:edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor createExtractor()",
            "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor createExtractorFromFiles(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor createExtractorFromString(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor createExtractorFromFile(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.MatchedExpression$SingleAnnotationExtractor:void annotate(edu.stanford.nlp.ling.tokensregex.MatchedExpression)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression$SingleAnnotationExtractor:void annotate(edu.stanford.nlp.ling.tokensregex.MatchedExpression,java.util.List)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationMatchedFilter:boolean accept(edu.stanford.nlp.ling.tokensregex.MatchedExpression)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.MatchedExpression$SingleAnnotationExtractor:edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression$SingleAnnotationExtractor:java.lang.Object apply(java.lang.Object)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$BasicSequenceExtractRule:boolean extract(java.util.List,java.util.List)",
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationMatchedFilter:boolean accept(edu.stanford.nlp.ling.tokensregex.MatchedExpression)"
        ]
    },
    "edu.stanford.nlp.ie.regexp.NumberSequenceClassifier:java.util.List classifyWithSUTime(java.util.List,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.regexp.NumberSequenceClassifier:java.util.List classifyWithGlobalInformation(java.util.List,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.ParseFiles:void parseFiles(java.lang.String[],int,boolean,edu.stanford.nlp.process.TokenizerFactory,java.lang.String,java.lang.String,edu.stanford.nlp.util.Function,java.lang.String,edu.stanford.nlp.parser.lexparser.Options,edu.stanford.nlp.trees.TreePrint,edu.stanford.nlp.parser.lexparser.ParserQueryFactory)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.parser.lexparser.LexicalizedParser:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.pipeline.ParserAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.pipeline.ParserAnnotator:void access$000(edu.stanford.nlp.pipeline.ParserAnnotator,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ParserAnnotator$ParserAnnotatorProcessor:edu.stanford.nlp.util.CoreMap process(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser$1:java.lang.Object process(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.parser.lexparser.LexicalizedParser:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure$LazyLoadTreesByParsing$1:edu.stanford.nlp.trees.Tree next()"
        ]
    },
    "edu.stanford.nlp.pipeline.ParserAnnotator:edu.stanford.nlp.trees.Tree doOneSentence(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler$1:java.lang.Object process(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classify(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier$2:java.util.List process(java.util.List)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List segmentString(java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.crf.CRFBiasedClassifier:java.util.List classify(java.util.List)",
            "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classifyWithGlobalInformation(java.util.List,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:void classifyAndWriteAnswers(java.util.Collection,java.util.List,java.io.PrintWriter,edu.stanford.nlp.sequences.DocumentReaderAndWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifierEvaluator:double evaluate(double[])",
            "edu.stanford.nlp.ie.crf.CRFClassifierEvaluator:void outputToCmd(java.io.OutputStream)"
        ]
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler:int[] findBestUsingSampling(edu.stanford.nlp.sequences.SequenceModel,int,int,int[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.sequences.SequenceGibbsSampler:int[] bestSequence(edu.stanford.nlp.sequences.SequenceModel)"
        ]
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler:java.util.List collectSamples(edu.stanford.nlp.sequences.SequenceModel,int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.POSTaggerAnnotator:void <init>(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.POSTaggerAnnotator:void <init>()",
            "edu.stanford.nlp.time.SUTimeMain:edu.stanford.nlp.pipeline.AnnotationPipeline getPipeline(java.util.Properties,boolean)"
        ]
    },
    "edu.stanford.nlp.pipeline.AnnotatorPool:edu.stanford.nlp.pipeline.Annotator get(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void construct(java.util.Properties,boolean)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:edu.stanford.nlp.pipeline.Annotator getExistingAnnotator(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP$4:java.lang.Object create()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:java.util.Map coref(edu.stanford.nlp.dcoref.Document)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.DeterministicCorefAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:double runAndScoreCoref(edu.stanford.nlp.dcoref.SieveCoreferenceSystem,edu.stanford.nlp.dcoref.MentionExtractor,java.util.Properties,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.time.TimeExpression$2:edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpression$2:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.time.GenericTimeExpressionPatterns:edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor createExtractor()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractorImpl:void init(edu.stanford.nlp.time.Options)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor:edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor createExtractorFromFiles(edu.stanford.nlp.ling.tokensregex.Env,java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.TokensRegexAnnotator:void <init>(java.lang.String,java.util.Properties)",
            "edu.stanford.nlp.pipeline.TokensRegexAnnotator:void <init>(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.MatchedExpression$SingleAnnotationExtractor:void annotate(edu.stanford.nlp.ling.tokensregex.MatchedExpression,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression:boolean extractAnnotation(edu.stanford.nlp.util.CoreMap,java.util.Map)",
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression:boolean extractAnnotation(java.util.List,java.util.Map)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationMatchedFilter:boolean accept(edu.stanford.nlp.ling.tokensregex.MatchedExpression)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationMatchedFilter:boolean accept(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.MatchedExpression$SingleAnnotationExtractor:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$BasicSequenceExtractRule:boolean extract(java.util.List,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$BasicSequenceExtractRule:boolean extract(java.lang.Object,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.regexp.NumberSequenceClassifier:java.util.List classifyWithGlobalInformation(java.util.List,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.NERClassifierCombiner:void recognizeNumberSequences(java.util.List,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.ie.regexp.NumberSequenceClassifier:java.util.List classify(java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree parse(java.util.List)",
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree findSyntacticHead(edu.stanford.nlp.ie.machinereading.structure.EntityMention,edu.stanford.nlp.trees.Tree,java.util.List)"
        ]
    },
    "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.Tree findSyntacticHead(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.trees.Tree,java.util.List)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List)"
        ]
    },
    "edu.stanford.nlp.pipeline.ParserAnnotator$ParserAnnotatorProcessor:edu.stanford.nlp.util.CoreMap process(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ParserAnnotator$ParserAnnotatorProcessor:java.lang.Object process(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure$LazyLoadTreesByParsing$1:edu.stanford.nlp.trees.Tree next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure$LazyLoadTreesByParsing$1:java.lang.Object next()"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier$2:java.util.List process(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier$2:java.lang.Object process(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List segmentString(java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List segmentString(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFBiasedClassifier:java.util.List classify(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier$2:java.util.List process(java.util.List)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List classifySentence(java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.crf.CRFClassifier:java.util.List classifyWithGlobalInformation(java.util.List,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFClassifierEvaluator:double evaluate(double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.crf.CRFClassifierEvaluator:void outputToCmd(java.io.OutputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.optimization.CmdEvaluator:void evaluateCmd(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.sequences.SequenceGibbsSampler:int[] bestSequence(edu.stanford.nlp.sequences.SequenceModel)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.POSTaggerAnnotator:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.SUTimeMain:edu.stanford.nlp.pipeline.AnnotationPipeline getPipeline(java.util.Properties,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP:void construct(java.util.Properties,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void <init>(java.lang.String,boolean)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void <init>(java.util.Properties,boolean)"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP:edu.stanford.nlp.pipeline.Annotator getExistingAnnotator(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.pipeline.Annotator getParser()",
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.pipeline.Annotator getParser()"
        ]
    },
    "edu.stanford.nlp.pipeline.DeterministicCorefAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.time.TimeExpression$2:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression$SingleAnnotationExtractor:void annotate(edu.stanford.nlp.ling.tokensregex.MatchedExpression)"
        ]
    },
    "edu.stanford.nlp.time.TimeExpressionExtractorImpl:void init(edu.stanford.nlp.time.Options)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractorImpl:void <init>()",
            "edu.stanford.nlp.time.TimeExpressionExtractorImpl:void init(java.lang.String,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.pipeline.TokensRegexAnnotator:void <init>(java.lang.String,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.TokensRegexAnnotator:void <init>(java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.pipeline.TokensRegexAnnotator:void <init>(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.MatchedExpression:boolean extractAnnotation(edu.stanford.nlp.util.CoreMap,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression:boolean extractAnnotation(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.MatchedExpression:boolean extractAnnotation(java.util.List,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.MatchedExpression:boolean extractAnnotation(edu.stanford.nlp.ling.tokensregex.Env,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationMatchedFilter:boolean accept(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule:boolean accept(edu.stanford.nlp.ling.tokensregex.MatchedExpression)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$BasicSequenceExtractRule:boolean extract(java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapExtractRule:boolean extract(edu.stanford.nlp.util.CoreMap,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.NERClassifierCombiner:void recognizeNumberSequences(java.util.List,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.NERClassifierCombiner:java.util.List classifyWithGlobalInformation(java.util.List,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.ie.regexp.NumberSequenceClassifier:java.util.List classify(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier$2:java.util.List process(java.util.List)",
            "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:java.util.List applySpecializedNER(java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree parse(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree parseStrings(java.util.List)",
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree originalFindSyntacticHead(edu.stanford.nlp.ie.machinereading.structure.EntityMention,edu.stanford.nlp.trees.Tree,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree findSyntacticHead(edu.stanford.nlp.ie.machinereading.structure.EntityMention,edu.stanford.nlp.trees.Tree,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:int assignSyntacticHead(edu.stanford.nlp.ie.machinereading.structure.EntityMention,edu.stanford.nlp.trees.Tree,java.util.List,boolean)"
        ]
    },
    "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.Tree findSyntacticHead(edu.stanford.nlp.dcoref.Mention,edu.stanford.nlp.trees.Tree,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:void findHead(edu.stanford.nlp.util.CoreMap,java.util.List)",
            "edu.stanford.nlp.dcoref.MentionExtractor:java.util.List arrange(edu.stanford.nlp.pipeline.Annotation,java.util.List,java.util.List,java.util.List,boolean)"
        ]
    },
    "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.ParserAnnotator$ParserAnnotatorProcessor:java.lang.Object process(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.trees.GrammaticalStructure$LazyLoadTreesByParsing$1:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper$GsIterator:void primeGs()"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier$2:java.lang.Object process(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswers(java.util.Collection,java.io.PrintWriter,edu.stanford.nlp.sequences.DocumentReaderAndWriter)"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List segmentString(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ChineseSegmenterAnnotator:void runSegmentation(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List classifySentence(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.TrueCaseAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.optimization.CmdEvaluator:void evaluateCmd(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifierEvaluator:double evaluate(double[])",
            "edu.stanford.nlp.optimization.CmdEvaluator:double evaluate(double[])"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP:void <init>(java.lang.String,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void <init>(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP:void <init>(java.util.Properties,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.MentionExtractor:edu.stanford.nlp.pipeline.StanfordCoreNLP loadStanfordProcessor(java.util.Properties)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void <init>(java.util.Properties)",
            "edu.stanford.nlp.ie.machinereading.domains.ace.AceReader:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.pipeline.Annotator getParser()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.pipeline.Annotator getParser()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.time.TimeExpressionExtractorImpl:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeAnnotator:void <init>()",
            "edu.stanford.nlp.time.TimeExpressionExtractorFactory:edu.stanford.nlp.time.TimeExpressionExtractor create(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.time.TimeExpressionExtractorImpl:void init(java.lang.String,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractorImpl:void <init>(java.lang.String,java.util.Properties)",
            "edu.stanford.nlp.ie.regexp.NumberSequenceClassifier:void <init>(java.util.Properties,boolean,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.pipeline.TokensRegexAnnotator:void <init>(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.MatchedExpression:boolean extractAnnotation(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpression:boolean extractAnnotation(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.MatchedExpression:boolean extractAnnotation(edu.stanford.nlp.ling.tokensregex.Env,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpression:boolean extractAnnotation(edu.stanford.nlp.ling.tokensregex.Env,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule:boolean accept(edu.stanford.nlp.ling.tokensregex.MatchedExpression)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule:boolean accept(java.lang.Object)"
        ]
    },
    "edu.stanford.nlp.ie.NERClassifierCombiner:java.util.List classifyWithGlobalInformation(java.util.List,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List classifySentenceWithGlobalInformation(java.util.List,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CoreMap)",
            "edu.stanford.nlp.ie.NERClassifierCombiner:java.util.List classify(java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:java.util.List applySpecializedNER(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree parseStrings(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree originalFindSyntacticHead(edu.stanford.nlp.ie.machinereading.structure.EntityMention,edu.stanford.nlp.trees.Tree,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree findSyntacticHead(edu.stanford.nlp.ie.machinereading.structure.EntityMention,edu.stanford.nlp.trees.Tree,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:int assignSyntacticHead(edu.stanford.nlp.ie.machinereading.structure.EntityMention,edu.stanford.nlp.trees.Tree,java.util.List,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:void preProcessSentences(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:void findHead(edu.stanford.nlp.util.CoreMap,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:java.util.List extractPredictedMentions(edu.stanford.nlp.pipeline.Annotation,int,edu.stanford.nlp.dcoref.Dictionaries)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:java.util.List filterPredictedMentions(java.util.List,edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.dcoref.Dictionaries)"
        ]
    },
    "edu.stanford.nlp.dcoref.MentionExtractor:java.util.List arrange(edu.stanford.nlp.pipeline.Annotation,java.util.List,java.util.List,java.util.List,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.MentionExtractor:edu.stanford.nlp.dcoref.Document arrange(edu.stanford.nlp.pipeline.Annotation,java.util.List,java.util.List,java.util.List,java.util.List,boolean)"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper$GsIterator:void primeGs()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper$GsIterator:edu.stanford.nlp.trees.GrammaticalStructure next()",
            "edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper$GsIterator:void <init>(edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper)"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswers(java.util.Collection,java.io.PrintWriter,edu.stanford.nlp.sequences.DocumentReaderAndWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswers(edu.stanford.nlp.objectbank.ObjectBank,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswers(java.lang.String,java.io.OutputStream,edu.stanford.nlp.sequences.DocumentReaderAndWriter)"
        ]
    },
    "edu.stanford.nlp.pipeline.ChineseSegmenterAnnotator:void runSegmentation(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ChineseSegmenterAnnotator:void doOneSentence(edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.pipeline.TrueCaseAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.optimization.CmdEvaluator:double evaluate(double[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.MentionExtractor:edu.stanford.nlp.pipeline.StanfordCoreNLP loadStanfordProcessor(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.ACEMentionExtractor:void <init>(edu.stanford.nlp.dcoref.Dictionaries,java.util.Properties,edu.stanford.nlp.dcoref.Semantics)",
            "edu.stanford.nlp.dcoref.MUCMentionExtractor:void <init>(edu.stanford.nlp.dcoref.Dictionaries,java.util.Properties,edu.stanford.nlp.dcoref.Semantics)",
            "edu.stanford.nlp.dcoref.CoNLLMentionExtractor:void <init>(edu.stanford.nlp.dcoref.Dictionaries,java.util.Properties,edu.stanford.nlp.dcoref.Semantics)"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP:void <init>(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void main(java.lang.String[])",
            "edu.stanford.nlp.pipeline.StanfordCoreNLP:void <init>()",
            "edu.stanford.nlp.pipeline.CustomAnnotationSerializer:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.time.TimeAnnotator:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.TimeExpressionExtractorFactory:edu.stanford.nlp.time.TimeExpressionExtractor create(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractorFactory:edu.stanford.nlp.time.TimeExpressionExtractor create()",
            "edu.stanford.nlp.time.TimeExpressionExtractorFactory:edu.stanford.nlp.time.TimeExpressionExtractor createExtractor()"
        ]
    },
    "edu.stanford.nlp.time.TimeExpressionExtractorImpl:void <init>(java.lang.String,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeAnnotator:void <init>(java.lang.String,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.ie.regexp.NumberSequenceClassifier:void <init>(java.util.Properties,boolean,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.NERClassifierCombiner:void <init>(boolean,boolean,java.util.Properties,java.lang.String[])",
            "edu.stanford.nlp.ie.regexp.NumberSequenceClassifier:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.regexp.NumberSequenceClassifier:void <init>()",
            "edu.stanford.nlp.ie.NERClassifierCombiner:void <init>(java.util.Properties)",
            "edu.stanford.nlp.ie.regexp.NumberSequenceClassifier:void <init>(boolean)"
        ]
    },
    "edu.stanford.nlp.time.TimeExpression:boolean extractAnnotation(edu.stanford.nlp.ling.tokensregex.Env,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.TimeExpression:boolean extractAnnotation(edu.stanford.nlp.ling.tokensregex.Env,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule:boolean accept(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:java.util.List classifySentenceWithGlobalInformation(java.util.List,edu.stanford.nlp.util.CoreMap,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.NERCombinerAnnotator:edu.stanford.nlp.util.CoreMap doOneSentence(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.util.CoreMap)"
        ]
    },
    "edu.stanford.nlp.ie.NERClassifierCombiner:java.util.List classify(java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:void preProcessSentences(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.pipeline.Annotation parse(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:java.util.List extractPredictedMentions(edu.stanford.nlp.pipeline.Annotation,int,edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.CoNLLMentionExtractor:edu.stanford.nlp.dcoref.Document nextDoc()",
            "edu.stanford.nlp.pipeline.DeterministicCorefAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)",
            "edu.stanford.nlp.dcoref.MUCMentionExtractor:edu.stanford.nlp.dcoref.Document nextDoc()",
            "edu.stanford.nlp.dcoref.ACEMentionExtractor:edu.stanford.nlp.dcoref.Document nextDoc()"
        ]
    },
    "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:java.util.List filterPredictedMentions(java.util.List,edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.dcoref.Dictionaries)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.MentionExtractor:edu.stanford.nlp.dcoref.Document arrange(edu.stanford.nlp.pipeline.Annotation,java.util.List,java.util.List,java.util.List,java.util.List,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.CoNLLMentionExtractor:edu.stanford.nlp.dcoref.Document nextDoc()",
            "edu.stanford.nlp.dcoref.MentionExtractor:edu.stanford.nlp.dcoref.Document arrange(edu.stanford.nlp.pipeline.Annotation,java.util.List,java.util.List,java.util.List)",
            "edu.stanford.nlp.dcoref.MUCMentionExtractor:edu.stanford.nlp.dcoref.Document nextDoc()",
            "edu.stanford.nlp.dcoref.ACEMentionExtractor:edu.stanford.nlp.dcoref.Document nextDoc()"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper$GsIterator:edu.stanford.nlp.trees.GrammaticalStructure next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper$GsIterator:java.lang.Object next()"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper$GsIterator:void <init>(edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper:java.util.Iterator iterator()"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswers(edu.stanford.nlp.objectbank.ObjectBank,edu.stanford.nlp.sequences.DocumentReaderAndWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswers(java.util.Collection,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswers(java.lang.String,java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswers(java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyStdin(edu.stanford.nlp.sequences.DocumentReaderAndWriter)"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswers(java.lang.String,java.io.OutputStream,edu.stanford.nlp.sequences.DocumentReaderAndWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.ChineseSegmenterAnnotator:void doOneSentence(edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.ChineseSegmenterAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.dcoref.ACEMentionExtractor:void <init>(edu.stanford.nlp.dcoref.Dictionaries,java.util.Properties,edu.stanford.nlp.dcoref.Semantics)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.ACEMentionExtractor:void <init>(edu.stanford.nlp.dcoref.Dictionaries,java.util.Properties,edu.stanford.nlp.dcoref.Semantics,edu.stanford.nlp.classify.LogisticClassifier)"
        ]
    },
    "edu.stanford.nlp.dcoref.MUCMentionExtractor:void <init>(edu.stanford.nlp.dcoref.Dictionaries,java.util.Properties,edu.stanford.nlp.dcoref.Semantics)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.MUCMentionExtractor:void <init>(edu.stanford.nlp.dcoref.Dictionaries,java.util.Properties,edu.stanford.nlp.dcoref.Semantics,edu.stanford.nlp.classify.LogisticClassifier)"
        ]
    },
    "edu.stanford.nlp.dcoref.CoNLLMentionExtractor:void <init>(edu.stanford.nlp.dcoref.Dictionaries,java.util.Properties,edu.stanford.nlp.dcoref.Semantics)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.CoNLLMentionExtractor:void <init>(edu.stanford.nlp.dcoref.Dictionaries,java.util.Properties,edu.stanford.nlp.dcoref.Semantics,edu.stanford.nlp.classify.LogisticClassifier)"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.time.TimeExpressionExtractorFactory:edu.stanford.nlp.time.TimeExpressionExtractor create()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.TimeExpressionExtractorFactory:java.lang.Object create()"
        ]
    },
    "edu.stanford.nlp.time.TimeExpressionExtractorFactory:edu.stanford.nlp.time.TimeExpressionExtractor createExtractor()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.regexp.NumberSequenceClassifier:void <init>(java.util.Properties,boolean,java.util.Properties)"
        ]
    },
    "edu.stanford.nlp.time.TimeAnnotator:void <init>(java.lang.String,java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.time.SUTimeMain:edu.stanford.nlp.pipeline.AnnotationPipeline getPipeline(java.util.Properties,boolean)"
        ]
    },
    "edu.stanford.nlp.ie.NERClassifierCombiner:void <init>(boolean,boolean,java.util.Properties,java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.StanfordCoreNLP$6:edu.stanford.nlp.pipeline.Annotator create()"
        ]
    },
    "edu.stanford.nlp.ie.regexp.NumberSequenceClassifier:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.QuantifiableEntityNormalizer:java.util.List applySpecializedNER(java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.NERClassifierCombiner:void <init>(java.util.Properties)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.NERCombinerAnnotator:void <init>(boolean)"
        ]
    },
    "edu.stanford.nlp.ie.regexp.NumberSequenceClassifier:void <init>(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.NERClassifierCombiner:void <init>(boolean,boolean,java.lang.String[])",
            "edu.stanford.nlp.ie.NERClassifierCombiner:void <init>(boolean,boolean,edu.stanford.nlp.ie.AbstractSequenceClassifier[])"
        ]
    },
    "edu.stanford.nlp.pipeline.NERCombinerAnnotator:edu.stanford.nlp.util.CoreMap doOneSentence(edu.stanford.nlp.pipeline.Annotation,edu.stanford.nlp.util.CoreMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.NERCombinerAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.dcoref.CoNLLMentionExtractor:edu.stanford.nlp.dcoref.Document nextDoc()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:double runAndScoreCoref(edu.stanford.nlp.dcoref.SieveCoreferenceSystem,edu.stanford.nlp.dcoref.MentionExtractor,java.util.Properties,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.dcoref.MUCMentionExtractor:edu.stanford.nlp.dcoref.Document nextDoc()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:double runAndScoreCoref(edu.stanford.nlp.dcoref.SieveCoreferenceSystem,edu.stanford.nlp.dcoref.MentionExtractor,java.util.Properties,java.lang.String)"
        ]
    },
    "edu.stanford.nlp.dcoref.MentionExtractor:edu.stanford.nlp.dcoref.Document arrange(edu.stanford.nlp.pipeline.Annotation,java.util.List,java.util.List,java.util.List)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.DeterministicCorefAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper$GsIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.trees.GrammaticalStructure:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswers(java.util.Collection,edu.stanford.nlp.sequences.DocumentReaderAndWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswers(java.util.Collection)"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswers(java.lang.String,java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswers(java.lang.String,edu.stanford.nlp.sequences.DocumentReaderAndWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.ner.CMMClassifier:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.crf.CRFBiasedClassifier:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.regexp.NumberSequenceClassifier:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.crf.CRFClassifier:void main(java.lang.String[])",
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswers(java.lang.String)"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyStdin(edu.stanford.nlp.sequences.DocumentReaderAndWriter)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyStdin()"
        ]
    },
    "edu.stanford.nlp.pipeline.ChineseSegmenterAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.dcoref.ACEMentionExtractor:void <init>(edu.stanford.nlp.dcoref.Dictionaries,java.util.Properties,edu.stanford.nlp.dcoref.Semantics,edu.stanford.nlp.classify.LogisticClassifier)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.dcoref.MUCMentionExtractor:void <init>(edu.stanford.nlp.dcoref.Dictionaries,java.util.Properties,edu.stanford.nlp.dcoref.Semantics,edu.stanford.nlp.classify.LogisticClassifier)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.dcoref.CoNLLMentionExtractor:void <init>(edu.stanford.nlp.dcoref.Dictionaries,java.util.Properties,edu.stanford.nlp.dcoref.Semantics,edu.stanford.nlp.classify.LogisticClassifier)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.dcoref.SieveCoreferenceSystem:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.time.TimeExpressionExtractorFactory:java.lang.Object create()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP$6:edu.stanford.nlp.pipeline.Annotator create()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.AnnotatorPool:edu.stanford.nlp.pipeline.Annotator get(java.lang.String)",
            "edu.stanford.nlp.pipeline.StanfordCoreNLP$6:java.lang.Object create()"
        ]
    },
    "edu.stanford.nlp.pipeline.NERCombinerAnnotator:void <init>(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.NERCombinerAnnotator:void <init>()"
        ]
    },
    "edu.stanford.nlp.ie.NERClassifierCombiner:void <init>(boolean,boolean,java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.NERClassifierCombiner:void <init>(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.NERClassifierCombiner:void <init>(boolean,boolean,edu.stanford.nlp.ie.AbstractSequenceClassifier[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.NERClassifierCombiner:void <init>(edu.stanford.nlp.ie.AbstractSequenceClassifier[])"
        ]
    },
    "edu.stanford.nlp.pipeline.NERCombinerAnnotator:void annotate(edu.stanford.nlp.pipeline.Annotation)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.machinereading.GenericDataSetReader:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)",
            "edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder:edu.stanford.nlp.trees.Tree parse(java.util.List,java.util.List)"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswers(java.util.Collection)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyAndWriteAnswers(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.AbstractSequenceClassifier:void classifyStdin()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.ie.crf.CRFClassifier:void main(java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.pipeline.StanfordCoreNLP$6:java.lang.Object create()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.NERCombinerAnnotator:void <init>()": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.ie.NERClassifierCombiner:void <init>(java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": [
            "edu.stanford.nlp.pipeline.NERCombinerAnnotator:void <init>(boolean,java.lang.String[])"
        ]
    },
    "edu.stanford.nlp.ie.NERClassifierCombiner:void <init>(edu.stanford.nlp.ie.AbstractSequenceClassifier[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    },
    "edu.stanford.nlp.pipeline.NERCombinerAnnotator:void <init>(boolean,java.lang.String[])": {
        "isVulRoot": false,
        "srcRoot": [
            "edu.stanford.nlp.util.XMLUtils:javax.xml.parsers.DocumentBuilder getXmlParser()"
        ],
        "vulCaller": []
    }
}