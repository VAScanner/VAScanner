{
    "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": true,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpOpenListener:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.server.protocol.ajp.AjpReadListener:void sendMessages(byte[][])",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.server.protocol.ajp.AjpReadListener$2:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpOpenListener:void handleEvent(org.xnio.StreamConnection)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpOpenListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener:void sendMessages(byte[][])": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleCPing()",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleInternalServerError()",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleBadRequest()"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.protocol.ajp.AjpReadListener$2:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpReadListener$2:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpOpenListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.proxy.ProxyProtocolReadListener:void callOpenListener(org.xnio.StreamConnection,io.undertow.connector.PooledByteBuffer)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener:void handleCPing()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener:void handleInternalServerError()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener:void handleBadRequest()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener$2:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.protocol.proxy.ProxyProtocolReadListener:void callOpenListener(org.xnio.StreamConnection,io.undertow.connector.PooledByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.proxy.ProxyProtocolReadListener:void proxyAccept(java.net.SocketAddress,java.net.SocketAddress,io.undertow.connector.PooledByteBuffer)"
        ]
    },
    "io.undertow.server.protocol.proxy.ProxyProtocolReadListener:void proxyAccept(java.net.SocketAddress,java.net.SocketAddress,io.undertow.connector.PooledByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.proxy.ProxyProtocolReadListener:void parseProxyProtocolV2(io.undertow.connector.PooledByteBuffer,java.util.concurrent.atomic.AtomicBoolean)",
            "io.undertow.server.protocol.proxy.ProxyProtocolReadListener:void parseProxyProtocolV1(io.undertow.connector.PooledByteBuffer,java.util.concurrent.atomic.AtomicBoolean)"
        ]
    },
    "io.undertow.server.protocol.proxy.ProxyProtocolReadListener:void parseProxyProtocolV2(io.undertow.connector.PooledByteBuffer,java.util.concurrent.atomic.AtomicBoolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.proxy.ProxyProtocolReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.server.protocol.proxy.ProxyProtocolReadListener:void parseProxyProtocolV1(io.undertow.connector.PooledByteBuffer,java.util.concurrent.atomic.AtomicBoolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.proxy.ProxyProtocolReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.server.protocol.proxy.ProxyProtocolReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.proxy.ProxyProtocolReadListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.proxy.ProxyProtocolReadListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ],
        "vulCaller": []
    }
}