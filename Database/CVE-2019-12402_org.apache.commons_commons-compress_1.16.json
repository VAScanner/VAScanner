{
    "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)": {
        "isVulRoot": true,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:java.nio.ByteBuffer getName(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeCentralDirectoryEnd()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void addUnicodeExtraFields(org.apache.commons.compress.archivers.zip.ZipArchiveEntry,boolean,java.nio.ByteBuffer)",
            "org.apache.commons.compress.archivers.tar.TarUtils:int formatNameBytes(java.lang.String,byte[],int,int,org.apache.commons.compress.archivers.zip.ZipEncoding)",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:boolean handleLongName(org.apache.commons.compress.archivers.tar.TarArchiveEntry,java.lang.String,java.util.Map,java.lang.String,byte,java.lang.String)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:byte[] createCentralFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry,java.nio.ByteBuffer,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData,boolean)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeCString(java.lang.String)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:java.nio.ByteBuffer getName(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeLocalFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry,boolean)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void rewriteSizesAndCrc(boolean)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:byte[] createCentralFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeCentralDirectoryEnd()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void finish()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void addUnicodeExtraFields(org.apache.commons.compress.archivers.zip.ZipArchiveEntry,boolean,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeLocalFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry,boolean)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarUtils:int formatNameBytes(java.lang.String,byte[],int,int,org.apache.commons.compress.archivers.zip.ZipEncoding)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveEntry:void writeEntryHeader(byte[],org.apache.commons.compress.archivers.zip.ZipEncoding,boolean)",
            "org.apache.commons.compress.archivers.tar.TarUtils:int formatNameBytes(java.lang.String,byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:boolean handleLongName(org.apache.commons.compress.archivers.tar.TarArchiveEntry,java.lang.String,java.util.Map,java.lang.String,byte,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:byte[] createCentralFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry,java.nio.ByteBuffer,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:byte[] createCentralFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeCString(java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeOldAsciiEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeOldBinaryEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,boolean)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeNewEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeLocalFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeLocalFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry,boolean)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void rewriteSizesAndCrc(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void closeEntry(boolean,boolean)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:byte[] createCentralFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeCentralDirectoryInChunks()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeCentralFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void finish()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void close()"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:void writeEntryHeader(byte[],org.apache.commons.compress.archivers.zip.ZipEncoding,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)",
            "org.apache.commons.compress.archivers.tar.TarArchiveEntry:void writeEntryHeader(byte[])"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarUtils:int formatNameBytes(java.lang.String,byte[],int,int)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveEntry:void writeEntryHeader(byte[],org.apache.commons.compress.archivers.zip.ZipEncoding,boolean)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void writePaxHeaders(org.apache.commons.compress.archivers.tar.TarArchiveEntry,java.lang.String,java.util.Map)",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:boolean handleLongName(org.apache.commons.compress.archivers.tar.TarArchiveEntry,java.lang.String,java.util.Map,java.lang.String,byte,java.lang.String)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeOldAsciiEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeHeader(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeOldBinaryEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeHeader(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeNewEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeHeader(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeLocalFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void addRawArchiveEntry(org.apache.commons.compress.archivers.zip.ZipArchiveEntry,java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void closeEntry(boolean,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void closeArchiveEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void closeCopiedEntry(boolean)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeCentralDirectoryInChunks()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void finish()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeCentralFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveEntry:void writeEntryHeader(byte[])": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void writePaxHeaders(org.apache.commons.compress.archivers.tar.TarArchiveEntry,java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeHeader(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void finish()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": [
            "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void addRawArchiveEntry(org.apache.commons.compress.archivers.zip.ZipArchiveEntry,java.io.InputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream:void writeTo(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream)",
            "org.apache.commons.compress.archivers.zip.ZipFile:void copyRawEntries(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void closeArchiveEntry()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry,boolean)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void closeCopiedEntry(boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void addRawArchiveEntry(org.apache.commons.compress.archivers.zip.ZipArchiveEntry,java.io.InputStream)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void finish()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void close()"
        ]
    },
    "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.zip.ScatterZipOutputStream:void writeTo(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.zip.ZipFile:void copyRawEntries(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate)": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void close()": {
        "isVulRoot": false,
        "srcRoot": [
            "org.apache.commons.compress.archivers.zip.NioZipEncoding:java.nio.ByteBuffer encode(java.lang.String)"
        ],
        "vulCaller": []
    }
}