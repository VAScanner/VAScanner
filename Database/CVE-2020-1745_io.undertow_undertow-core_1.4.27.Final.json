{
    "io.undertow.server.protocol.ajp.AjpOpenListener:void <init>(io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)": {
        "isVulRoot": true,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpOpenListener:void <init>(io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.server.protocol.ajp.AjpRequestParser:void <init>(java.lang.String,boolean,int,int,boolean,boolean)"
        ],
        "vulCaller": [
            "io.undertow.Undertow:void start()",
            "io.undertow.server.protocol.ajp.AjpOpenListener:void <init>(org.xnio.Pool,org.xnio.OptionMap)",
            "io.undertow.server.protocol.ajp.AjpOpenListener:void <init>(io.undertow.connector.ByteBufferPool)"
        ]
    },
    "io.undertow.Undertow:void start()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpOpenListener:void <init>(io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.server.protocol.ajp.AjpRequestParser:void <init>(java.lang.String,boolean,int,int,boolean,boolean)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.protocol.ajp.AjpOpenListener:void <init>(org.xnio.Pool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpOpenListener:void <init>(io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.server.protocol.ajp.AjpRequestParser:void <init>(java.lang.String,boolean,int,int,boolean,boolean)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpOpenListener:void <init>(org.xnio.Pool)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpOpenListener:void <init>(io.undertow.connector.ByteBufferPool)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpOpenListener:void <init>(io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.server.protocol.ajp.AjpRequestParser:void <init>(java.lang.String,boolean,int,int,boolean,boolean)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.protocol.ajp.AjpRequestParser:void <init>(java.lang.String,boolean,int,int,boolean,boolean)": {
        "isVulRoot": true,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpRequestParser:void <init>(java.lang.String,boolean,int,int,boolean,boolean)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpOpenListener:void setUndertowOptions(org.xnio.OptionMap)",
            "io.undertow.server.protocol.ajp.AjpOpenListener:void <init>(io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpOpenListener:void setUndertowOptions(org.xnio.OptionMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpRequestParser:void <init>(java.lang.String,boolean,int,int,boolean,boolean)"
        ],
        "vulCaller": [
            "io.undertow.Undertow$ListenerInfo:void setServerOptions(org.xnio.OptionMap)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpRequestParser:void parse(java.nio.ByteBuffer,io.undertow.server.protocol.ajp.AjpRequestParseState,io.undertow.server.HttpServerExchange)": {
        "isVulRoot": true,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpRequestParser:void parse(java.nio.ByteBuffer,io.undertow.server.protocol.ajp.AjpRequestParseState,io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpRequestParser:void parse(java.nio.ByteBuffer,io.undertow.server.protocol.ajp.AjpRequestParseState,io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpOpenListener:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleCPing()",
            "io.undertow.server.protocol.ajp.AjpReadListener$2:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpOpenListener:void <init>(org.xnio.Pool)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpOpenListener:void <init>(io.undertow.connector.ByteBufferPool,org.xnio.OptionMap)",
            "io.undertow.server.protocol.ajp.AjpRequestParser:void <init>(java.lang.String,boolean,int,int,boolean,boolean)"
        ],
        "vulCaller": []
    },
    "io.undertow.Undertow$ListenerInfo:void setServerOptions(org.xnio.OptionMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpRequestParser:void <init>(java.lang.String,boolean,int,int,boolean,boolean)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.protocol.ajp.AjpOpenListener:void handleEvent(org.xnio.StreamConnection)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpRequestParser:void parse(java.nio.ByteBuffer,io.undertow.server.protocol.ajp.AjpRequestParseState,io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpOpenListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener:void handleCPing()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpRequestParser:void parse(java.nio.ByteBuffer,io.undertow.server.protocol.ajp.AjpRequestParseState,io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener$2:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpRequestParser:void parse(java.nio.ByteBuffer,io.undertow.server.protocol.ajp.AjpRequestParseState,io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpReadListener$2:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpRequestParser:void parse(java.nio.ByteBuffer,io.undertow.server.protocol.ajp.AjpRequestParseState,io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.protocol.ajp.AjpOpenListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpRequestParser:void parse(java.nio.ByteBuffer,io.undertow.server.protocol.ajp.AjpRequestParseState,io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.proxy.ProxyProtocolReadListener:void callOpenListener(org.xnio.StreamConnection,io.undertow.connector.PooledByteBuffer)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener$2:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpRequestParser:void parse(java.nio.ByteBuffer,io.undertow.server.protocol.ajp.AjpRequestParseState,io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    },
    "io.undertow.server.protocol.proxy.ProxyProtocolReadListener:void callOpenListener(org.xnio.StreamConnection,io.undertow.connector.PooledByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpRequestParser:void parse(java.nio.ByteBuffer,io.undertow.server.protocol.ajp.AjpRequestParseState,io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.proxy.ProxyProtocolReadListener:void proxyAccept(java.net.SocketAddress,java.net.SocketAddress,io.undertow.connector.PooledByteBuffer)"
        ]
    },
    "io.undertow.server.protocol.proxy.ProxyProtocolReadListener:void proxyAccept(java.net.SocketAddress,java.net.SocketAddress,io.undertow.connector.PooledByteBuffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpRequestParser:void parse(java.nio.ByteBuffer,io.undertow.server.protocol.ajp.AjpRequestParseState,io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.proxy.ProxyProtocolReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.server.protocol.proxy.ProxyProtocolReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpRequestParser:void parse(java.nio.ByteBuffer,io.undertow.server.protocol.ajp.AjpRequestParseState,io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": [
            "io.undertow.server.protocol.proxy.ProxyProtocolReadListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.proxy.ProxyProtocolReadListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.undertow.server.protocol.ajp.AjpRequestParser:void parse(java.nio.ByteBuffer,io.undertow.server.protocol.ajp.AjpRequestParseState,io.undertow.server.HttpServerExchange)"
        ],
        "vulCaller": []
    }
}