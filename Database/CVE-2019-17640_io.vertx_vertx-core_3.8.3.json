{
    "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)": {
        "isVulRoot": true,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.eventbus.impl.clustered.ClusteredEventBus:io.vertx.core.eventbus.ReplyException access$400(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.eventbus.impl.MessageImpl)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void deliverMessageLocally(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)"
        ]
    },
    "io.vertx.core.eventbus.impl.clustered.ClusteredEventBus:io.vertx.core.eventbus.ReplyException access$400(io.vertx.core.eventbus.impl.clustered.ClusteredEventBus,io.vertx.core.eventbus.impl.MessageImpl)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1:void handle(io.vertx.core.buffer.Buffer)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void deliverMessageLocally(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.eventbus.impl.clustered.ClusteredEventBus:void onSubsReceived(io.vertx.core.AsyncResult,io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)",
            "io.vertx.core.eventbus.impl.clustered.ClusteredEventBus:void sendOrPub(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void sendOrPub(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)",
            "io.vertx.core.eventbus.impl.clustered.ClusteredEventBus:void clusteredSendReply(io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)",
            "io.vertx.core.eventbus.impl.clustered.ClusteredEventBus:void sendToSubs(io.vertx.core.spi.cluster.ChoosableIterable,io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)"
        ]
    },
    "io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1:void handle(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.eventbus.impl.clustered.ClusteredEventBus:void onSubsReceived(io.vertx.core.AsyncResult,io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.eventbus.impl.clustered.ClusteredEventBus:void lambda$sendOrPub$8(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.clustered.ClusteredEventBus:void lambda$null$6(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.eventbus.impl.clustered.ClusteredEventBus:void sendOrPub(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext:void next()"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void sendOrPub(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl:void sendReply(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext,io.vertx.core.eventbus.impl.MessageImpl)",
            "io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext:void next()"
        ]
    },
    "io.vertx.core.eventbus.impl.clustered.ClusteredEventBus:void clusteredSendReply(io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.eventbus.impl.clustered.ClusteredEventBus:void sendReply(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext,io.vertx.core.eventbus.impl.MessageImpl)"
        ]
    },
    "io.vertx.core.eventbus.impl.clustered.ClusteredEventBus:void sendToSubs(io.vertx.core.spi.cluster.ChoosableIterable,io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.eventbus.impl.clustered.ClusteredEventBus:void onSubsReceived(io.vertx.core.AsyncResult,io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext)"
        ]
    },
    "io.vertx.core.eventbus.impl.clustered.ClusteredEventBus$1:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.parsetools.impl.RecordParserImpl:void handleParsing()"
        ]
    },
    "io.vertx.core.eventbus.impl.clustered.ClusteredEventBus:void lambda$sendOrPub$8(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.eventbus.impl.clustered.ClusteredEventBus:void lambda$null$6(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext:void next()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext:void next()",
            "io.vertx.core.eventbus.impl.EventBusImpl:void sendOrPubInternal(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void sendReply(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void sendReply(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext,io.vertx.core.eventbus.impl.MessageImpl)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext:void next()"
        ]
    },
    "io.vertx.core.eventbus.impl.clustered.ClusteredEventBus:void sendReply(io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext,io.vertx.core.eventbus.impl.MessageImpl)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$OutboundDeliveryContext:void next()"
        ]
    },
    "io.vertx.core.parsetools.impl.RecordParserImpl:void handleParsing()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.parsetools.impl.RecordParserImpl:void lambda$handler$0(java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void handle(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:io.vertx.core.parsetools.RecordParser fetch(long)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void sendOrPubInternal(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.EventBus send(java.lang.String,java.lang.Object,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.MessageProducerImpl:io.vertx.core.eventbus.MessageProducer write(java.lang.Object,io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.EventBus publish(java.lang.String,java.lang.Object,io.vertx.core.eventbus.DeliveryOptions)",
            "io.vertx.core.eventbus.impl.MessageProducerImpl:void doReceiveCredit(int)",
            "io.vertx.core.eventbus.impl.MessageProducerImpl:void doSend(java.lang.Object,io.vertx.core.Handler,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void sendReply(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.eventbus.impl.MessageImpl:void sendReply(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.parsetools.impl.RecordParserImpl:void lambda$handler$0(java.lang.Void)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.parsetools.impl.RecordParserImpl:void handle(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.parsetools.impl.RecordParserImpl:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.parsetools.impl.RecordParserImpl:io.vertx.core.parsetools.RecordParser fetch(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.parsetools.impl.RecordParserImpl:io.vertx.core.streams.ReadStream fetch(long)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:io.vertx.core.parsetools.RecordParser resume()"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.EventBus send(java.lang.String,java.lang.Object,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.EventBus send(java.lang.String,java.lang.Object,io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.EventBus send(java.lang.String,java.lang.Object,io.vertx.core.eventbus.DeliveryOptions)",
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.EventBus send(java.lang.String,java.lang.Object)"
        ]
    },
    "io.vertx.core.eventbus.impl.MessageProducerImpl:io.vertx.core.eventbus.MessageProducer write(java.lang.Object,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.eventbus.impl.MessageProducerImpl:io.vertx.core.eventbus.MessageProducer write(java.lang.Object)",
            "io.vertx.core.eventbus.impl.MessageProducerImpl:io.vertx.core.streams.WriteStream write(java.lang.Object,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.EventBus publish(java.lang.String,java.lang.Object,io.vertx.core.eventbus.DeliveryOptions)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.EventBus publish(java.lang.String,java.lang.Object)"
        ]
    },
    "io.vertx.core.eventbus.impl.MessageProducerImpl:void doReceiveCredit(int)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.eventbus.impl.MessageProducerImpl:void lambda$new$0(io.vertx.core.eventbus.Message)"
        ]
    },
    "io.vertx.core.eventbus.impl.MessageProducerImpl:void doSend(java.lang.Object,io.vertx.core.Handler,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.eventbus.impl.MessageProducerImpl:io.vertx.core.eventbus.MessageProducer send(java.lang.Object)",
            "io.vertx.core.eventbus.impl.MessageProducerImpl:io.vertx.core.eventbus.MessageProducer send(java.lang.Object,io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.MessageProducerImpl:io.vertx.core.eventbus.MessageProducer write(java.lang.Object,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.eventbus.impl.MessageImpl:void sendReply(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.eventbus.impl.MessageImpl:void fail(int,java.lang.String)",
            "io.vertx.core.eventbus.impl.MessageImpl:void reply(java.lang.Object,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.parsetools.impl.RecordParserImpl:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.parsetools.impl.RecordParserImpl:io.vertx.core.streams.ReadStream fetch(long)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.parsetools.impl.RecordParserImpl:io.vertx.core.parsetools.RecordParser resume()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.parsetools.impl.RecordParserImpl:io.vertx.core.streams.ReadStream resume()"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.EventBus send(java.lang.String,java.lang.Object,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.EventBus send(java.lang.String,java.lang.Object,io.vertx.core.eventbus.DeliveryOptions)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.EventBus send(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.eventbus.impl.HandlerRegistration:void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)"
        ]
    },
    "io.vertx.core.eventbus.impl.MessageProducerImpl:io.vertx.core.eventbus.MessageProducer write(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.eventbus.impl.MessageProducerImpl:io.vertx.core.streams.WriteStream write(java.lang.Object)"
        ]
    },
    "io.vertx.core.eventbus.impl.MessageProducerImpl:io.vertx.core.streams.WriteStream write(java.lang.Object,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.EventBus publish(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.eventbus.impl.MessageProducerImpl:void lambda$new$0(io.vertx.core.eventbus.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.eventbus.impl.HandlerRegistration:void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)"
        ]
    },
    "io.vertx.core.eventbus.impl.MessageProducerImpl:io.vertx.core.eventbus.MessageProducer send(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.eventbus.impl.MessageProducerImpl:io.vertx.core.eventbus.MessageProducer send(java.lang.Object,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.eventbus.impl.MessageImpl:void fail(int,java.lang.String)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.eventbus.impl.MessageImpl:void reply(java.lang.Object,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.eventbus.impl.MessageImpl:void reply(java.lang.Object)",
            "io.vertx.core.eventbus.impl.MessageImpl:void reply(java.lang.Object,io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.MessageImpl:void reply(java.lang.Object,io.vertx.core.eventbus.DeliveryOptions)"
        ]
    },
    "io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$new$2(java.lang.Object)"
        ]
    },
    "io.vertx.core.parsetools.impl.RecordParserImpl:io.vertx.core.streams.ReadStream resume()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.eventbus.impl.HandlerRegistration:void deliver(io.vertx.core.Handler,io.vertx.core.eventbus.Message,io.vertx.core.impl.ContextInternal)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.eventbus.impl.HandlerRegistration:void lambda$checkNextTick$5(java.lang.Void)",
            "io.vertx.core.eventbus.impl.HandlerRegistration:void handle(io.vertx.core.eventbus.Message)"
        ]
    },
    "io.vertx.core.eventbus.impl.MessageProducerImpl:io.vertx.core.streams.WriteStream write(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.eventbus.impl.MessageImpl:void reply(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.eventbus.impl.MessageImpl:void reply(java.lang.Object,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.eventbus.impl.MessageImpl:void reply(java.lang.Object,io.vertx.core.eventbus.DeliveryOptions)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.net.impl.NetSocketImpl:void lambda$new$2(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.streams.impl.InboundBuffer:void handleEvent(io.vertx.core.Handler,java.lang.Object)"
        ]
    },
    "io.vertx.core.eventbus.impl.HandlerRegistration:void lambda$checkNextTick$5(java.lang.Void)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:boolean executeTask(java.lang.Object,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.eventbus.impl.HandlerRegistration:void handle(io.vertx.core.eventbus.Message)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.eventbus.impl.HandlerRegistration:void handle(java.lang.Object)",
            "io.vertx.core.eventbus.impl.EventBusImpl$InboundDeliveryContext:void next()"
        ]
    },
    "io.vertx.core.streams.impl.InboundBuffer:void handleEvent(io.vertx.core.Handler,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.streams.impl.InboundBuffer:void drain()",
            "io.vertx.core.streams.impl.InboundBuffer:boolean emitPending()",
            "io.vertx.core.streams.impl.InboundBuffer:boolean write(java.lang.Object)"
        ]
    },
    "io.vertx.core.impl.ContextImpl:boolean executeTask(java.lang.Object,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.impl.WorkerContext:void lambda$wrapTask$0(io.vertx.core.spi.metrics.PoolMetrics,java.lang.Object,java.lang.Object,io.vertx.core.Handler)",
            "io.vertx.core.impl.EventLoopContext:void execute(java.lang.Object,io.vertx.core.Handler)",
            "io.vertx.core.impl.EventLoopContext:void lambda$executeAsync$0(io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.eventbus.impl.HandlerRegistration:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$InboundDeliveryContext:void next()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$deliverToHandler$5(io.vertx.core.eventbus.impl.HandlerHolder,io.vertx.core.eventbus.DeliveryContext,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$InboundDeliveryContext:void next()"
        ]
    },
    "io.vertx.core.streams.impl.InboundBuffer:void drain()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.streams.impl.InboundBuffer:void lambda$fetch$0(java.lang.Void)"
        ]
    },
    "io.vertx.core.streams.impl.InboundBuffer:boolean emitPending()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.streams.impl.InboundBuffer:boolean write(java.lang.Iterable)",
            "io.vertx.core.streams.impl.InboundBuffer:boolean write(java.lang.Object)"
        ]
    },
    "io.vertx.core.streams.impl.InboundBuffer:boolean write(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.NettyFileUpload:void end()",
            "io.vertx.core.http.impl.NettyFileUpload:void receiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doRead$4(java.nio.ByteBuffer,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.Http1xClientConnection$StreamImpl:boolean handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleMessage(java.lang.Object)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleContent(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.VertxHttp2Stream:boolean onDataRead(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.http.impl.Http1xClientConnection$StreamImpl:boolean endResponse(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.VertxHttp2Stream:void onEnd(io.vertx.core.MultiMap)"
        ]
    },
    "io.vertx.core.impl.WorkerContext:void lambda$wrapTask$0(io.vertx.core.spi.metrics.PoolMetrics,java.lang.Object,java.lang.Object,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.impl.TaskQueue:void run()"
        ]
    },
    "io.vertx.core.impl.EventLoopContext:void execute(java.lang.Object,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:void executeFromIO(java.lang.Object,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.impl.EventLoopContext:void lambda$executeAsync$0(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$deliverToHandler$5(io.vertx.core.eventbus.impl.HandlerHolder,io.vertx.core.eventbus.DeliveryContext,java.lang.Void)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:boolean executeTask(java.lang.Object,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.streams.impl.InboundBuffer:void lambda$fetch$0(java.lang.Void)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:boolean executeTask(java.lang.Object,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.streams.impl.InboundBuffer:boolean write(java.lang.Iterable)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.http.impl.Http1xConnectionBase:void handleWsFrame(io.netty.handler.codec.http.websocketx.WebSocketFrame)"
        ]
    },
    "io.vertx.core.http.impl.NettyFileUpload:void end()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.http.impl.NettyFileUpload:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.vertx.core.http.impl.NettyFileUpload:void setContent(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.vertx.core.http.impl.NettyFileUpload:void receiveData(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.http.impl.NettyFileUpload:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.vertx.core.http.impl.NettyFileUpload:void setContent(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doRead$4(java.nio.ByteBuffer,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$0(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$1(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)"
        ]
    },
    "io.vertx.core.http.impl.Http1xClientConnection$StreamImpl:boolean handleChunk(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.http.impl.Http1xClientConnection$StreamImpl:boolean access$1700(io.vertx.core.http.impl.Http1xClientConnection$StreamImpl,io.vertx.core.buffer.Buffer)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.http.impl.Http1xServerConnection:void handleEnd()"
        ]
    },
    "io.vertx.core.net.impl.NetSocketImpl:void handleMessage(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:boolean executeTask(java.lang.Object,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.Http1xServerConnection$1:void handleMessage(java.lang.Object)",
            "io.vertx.core.http.impl.Http1xClientConnection$1:void handleMessage(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerRequestImpl:void handleContent(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.http.impl.Http1xServerConnection:void handleContent(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.VertxHttp2Stream:boolean onDataRead(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.http.impl.Http2ConnectionBase:void lambda$onDataRead$9(io.vertx.core.buffer.Buffer,io.vertx.core.http.impl.VertxHttp2Stream,int[],java.lang.Void)"
        ]
    },
    "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.net.impl.VertxHandler:void lambda$channelInactive$4(java.lang.Void)",
            "io.vertx.core.http.impl.Http1xServerConnection$1:void handleClosed()",
            "io.vertx.core.http.impl.Http1xClientConnection$1:void handleClosed()"
        ]
    },
    "io.vertx.core.http.impl.Http1xClientConnection$StreamImpl:boolean endResponse(io.netty.handler.codec.http.LastHttpContent)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.http.impl.Http1xClientConnection$StreamImpl:boolean access$000(io.vertx.core.http.impl.Http1xClientConnection$StreamImpl,io.netty.handler.codec.http.LastHttpContent)"
        ]
    },
    "io.vertx.core.http.impl.VertxHttp2Stream:void onEnd(io.vertx.core.MultiMap)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.http.impl.Http2ClientConnection$Http2ClientStream:void handleHeaders(io.netty.handler.codec.http2.Http2Headers,io.vertx.core.http.StreamPriority,boolean)",
            "io.vertx.core.http.impl.VertxHttp2Stream:void onEnd()"
        ]
    },
    "io.vertx.core.impl.TaskQueue:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.impl.ContextImpl:void executeFromIO(java.lang.Object,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.dns.impl.DnsClientImpl$Query:void handle(io.netty.handler.codec.dns.DnsResponse)",
            "io.vertx.core.http.impl.HttpServerChannelInitializer:void handleException(io.netty.channel.Channel,java.lang.Throwable)",
            "io.vertx.core.dns.impl.DnsClientImpl$Query:void lambda$run$3(io.netty.channel.ChannelFuture)",
            "io.vertx.core.http.impl.HttpServerChannelInitializer:void configureHttp1(io.netty.channel.ChannelPipeline,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.ChannelFutureListenerAdapter:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.vertx.core.impl.ContextImpl:void executeFromIO(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.VertxHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.vertx.core.http.impl.Http1xClientConnection:void lambda$toWebSocket$3(io.netty.handler.codec.http.websocketx.WebSocketVersion,io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.http.impl.Http1xConnectionBase:void handleWsFrame(io.netty.handler.codec.http.websocketx.WebSocketFrame)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.http.impl.Http1xClientConnection:void handleMessage(java.lang.Object)",
            "io.vertx.core.http.impl.Http1xServerConnection:void handleMessage(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.NettyFileUpload:void addContent(io.netty.buffer.ByteBuf,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.http.impl.NettyFileUpload:void setContent(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$0(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:boolean executeTask(java.lang.Object,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$1(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:boolean executeTask(java.lang.Object,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.Http1xClientConnection$StreamImpl:boolean access$1700(io.vertx.core.http.impl.Http1xClientConnection$StreamImpl,io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.http.impl.Http1xClientConnection:void handleResponseChunk(io.vertx.core.buffer.Buffer)"
        ]
    },
    "io.vertx.core.http.impl.Http1xServerConnection:void handleEnd()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.http.impl.Http1xServerConnection:void handleContent(java.lang.Object)",
            "io.vertx.core.http.impl.Http1xServerConnection:void handleMessage(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.Http1xServerConnection$1:void handleMessage(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:boolean executeTask(java.lang.Object,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.Http1xClientConnection$1:void handleMessage(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:boolean executeTask(java.lang.Object,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.Http1xServerConnection:void handleContent(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.http.impl.Http1xServerConnection:void handleMessage(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.Http2ConnectionBase:void lambda$onDataRead$9(io.vertx.core.buffer.Buffer,io.vertx.core.http.impl.VertxHttp2Stream,int[],java.lang.Void)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.net.impl.VertxHandler:void lambda$channelInactive$4(java.lang.Void)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:boolean executeTask(java.lang.Object,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.Http1xServerConnection$1:void handleClosed()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.net.impl.VertxHandler:void lambda$channelInactive$4(java.lang.Void)"
        ]
    },
    "io.vertx.core.http.impl.Http1xClientConnection$1:void handleClosed()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.net.impl.VertxHandler:void lambda$channelInactive$4(java.lang.Void)"
        ]
    },
    "io.vertx.core.http.impl.Http1xClientConnection$StreamImpl:boolean access$000(io.vertx.core.http.impl.Http1xClientConnection$StreamImpl,io.netty.handler.codec.http.LastHttpContent)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.http.impl.Http1xClientConnection:void handleResponseEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.Http1xClientConnection$1:void handleMessage(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.Http2ClientConnection$Http2ClientStream:void handleHeaders(io.netty.handler.codec.http2.Http2Headers,io.vertx.core.http.StreamPriority,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.http.impl.Http2ClientConnection:void lambda$onHeadersRead$0(io.vertx.core.http.impl.Http2ClientConnection$Http2ClientStream,io.netty.handler.codec.http2.Http2Headers,io.vertx.core.http.StreamPriority,boolean,java.lang.Void)",
            "io.vertx.core.http.impl.Http2ClientConnection:void lambda$onHeadersRead$1(io.vertx.core.http.impl.Http2ClientConnection$Http2ClientStream,io.netty.handler.codec.http2.Http2Headers,boolean,java.lang.Void)"
        ]
    },
    "io.vertx.core.http.impl.VertxHttp2Stream:void onEnd()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.http.impl.Http2ConnectionBase:void lambda$onDataRead$10(io.vertx.core.http.impl.VertxHttp2Stream,java.lang.Void)",
            "io.vertx.core.http.impl.Http2ServerConnection:void lambda$onHeadersRead$0(io.vertx.core.http.impl.VertxHttp2Stream,java.lang.Void)",
            "io.vertx.core.http.impl.Http2ClientConnection$Http2ClientStream:void handleHeaders(io.netty.handler.codec.http2.Http2Headers,io.vertx.core.http.StreamPriority,boolean)"
        ]
    },
    "io.vertx.core.dns.impl.DnsClientImpl$Query:void handle(io.netty.handler.codec.dns.DnsResponse)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpServerChannelInitializer:void handleException(io.netty.channel.Channel,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerChannelInitializer:void access$200(io.vertx.core.http.impl.HttpServerChannelInitializer,io.netty.channel.Channel,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerChannelInitializer:void lambda$initChannel$0(io.netty.channel.ChannelPipeline,io.netty.channel.Channel,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.dns.impl.DnsClientImpl$Query:void lambda$run$3(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpServerChannelInitializer:void configureHttp1(io.netty.channel.ChannelPipeline,io.vertx.core.net.impl.HandlerHolder)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerChannelInitializer:void configureHttp1OrH2C(io.netty.channel.ChannelPipeline,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.http.impl.Http1xUpgradeToH2CHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.vertx.core.net.impl.ChannelFutureListenerAdapter:void operationComplete(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.net.impl.ChannelFutureListenerAdapter:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.vertx.core.impl.ContextImpl:void executeFromIO(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.dns.impl.DnsClientImpl$Query:void handle(io.netty.handler.codec.dns.DnsResponse)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void notifyException(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$connected$12(io.netty.channel.Channel,io.vertx.core.net.impl.HandlerHolder,io.vertx.core.net.impl.NetSocketImpl)",
            "io.vertx.core.net.impl.VertxHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.vertx.core.net.impl.NetClientImpl:void failed(io.vertx.core.impl.ContextInternal,io.netty.channel.Channel,java.lang.Throwable,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.VertxHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$6(io.netty.channel.Channel,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,io.vertx.core.net.impl.NetSocketImpl)",
            "io.vertx.core.http.impl.HttpServerChannelInitializer:void configureHttp1(io.netty.channel.ChannelPipeline,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void run()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$addFuture$5(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.VertxHandler:void channelWritabilityChanged(io.netty.channel.ChannelHandlerContext)",
            "io.vertx.core.net.impl.VertxHandler:void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$webSocket$3(io.vertx.core.http.WebSocketConnectOptions,io.vertx.core.Handler,io.vertx.core.impl.ContextInternal,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connect$7(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextInternal,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$1:void lambda$initChannel$1(io.vertx.core.net.impl.HandlerHolder,io.netty.channel.Channel,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$doConnect$3(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,io.vertx.core.net.SocketAddress,int,java.lang.String,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.net.impl.VertxHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.http.impl.Http1xClientConnection:void lambda$toWebSocket$3(io.netty.handler.codec.http.websocketx.WebSocketVersion,io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker,io.vertx.core.Handler,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.http.impl.WebSocketHandshakeInboundHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.vertx.core.http.impl.WebSocketHandshakeInboundHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.vertx.core.http.impl.Http1xClientConnection:void handleMessage(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:boolean executeTask(java.lang.Object,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.Http1xServerConnection:void handleMessage(java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:boolean executeTask(java.lang.Object,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.Http1xClientConnection:void handleResponseChunk(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.http.impl.Http1xClientConnection:void handleHttpMessage(io.netty.handler.codec.http.HttpObject)"
        ]
    },
    "io.vertx.core.http.impl.Http1xClientConnection:void handleResponseEnd(io.netty.handler.codec.http.LastHttpContent)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.http.impl.Http1xClientConnection:void handleHttpMessage(io.netty.handler.codec.http.HttpObject)"
        ]
    },
    "io.vertx.core.http.impl.Http2ClientConnection:void lambda$onHeadersRead$0(io.vertx.core.http.impl.Http2ClientConnection$Http2ClientStream,io.netty.handler.codec.http2.Http2Headers,io.vertx.core.http.StreamPriority,boolean,java.lang.Void)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.http.impl.Http2ClientConnection:void lambda$onHeadersRead$1(io.vertx.core.http.impl.Http2ClientConnection$Http2ClientStream,io.netty.handler.codec.http2.Http2Headers,boolean,java.lang.Void)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.http.impl.Http2ConnectionBase:void lambda$onDataRead$10(io.vertx.core.http.impl.VertxHttp2Stream,java.lang.Void)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.http.impl.Http2ServerConnection:void lambda$onHeadersRead$0(io.vertx.core.http.impl.VertxHttp2Stream,java.lang.Void)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpServerChannelInitializer:void access$200(io.vertx.core.http.impl.HttpServerChannelInitializer,io.netty.channel.Channel,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerChannelInitializer$1:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerChannelInitializer:void lambda$initChannel$0(io.netty.channel.ChannelPipeline,io.netty.channel.Channel,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.net.impl.SslHandshakeCompletionHandler:void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerChannelInitializer:void configureHttp1OrH2C(io.netty.channel.ChannelPipeline,io.vertx.core.net.impl.HandlerHolder)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerChannelInitializer:void handleHttp1(io.netty.channel.Channel)"
        ]
    },
    "io.vertx.core.http.impl.Http1xUpgradeToH2CHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.net.impl.ChannelFutureListenerAdapter:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.datagram.impl.DatagramSocketImpl:void notifyException(io.vertx.core.Handler,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramSocketImpl:io.vertx.core.datagram.DatagramSocket listenMulticastGroup(java.lang.String,java.lang.String,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:io.vertx.core.datagram.DatagramSocket unlistenMulticastGroup(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:io.vertx.core.datagram.DatagramSocket blockMulticastGroup(java.lang.String,java.lang.String,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:io.vertx.core.datagram.DatagramSocket listenMulticastGroup(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:io.vertx.core.datagram.DatagramSocket unlistenMulticastGroup(java.lang.String,java.lang.String,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:io.vertx.core.datagram.DatagramSocket blockMulticastGroup(java.lang.String,java.lang.String,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.net.impl.NetServerImpl:void lambda$connected$12(io.netty.channel.Channel,io.vertx.core.net.impl.HandlerHolder,io.vertx.core.net.impl.NetSocketImpl)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.net.impl.VertxHandler:void setConnection(io.vertx.core.net.impl.ConnectionBase)"
        ]
    },
    "io.vertx.core.net.impl.VertxHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.net.impl.NetClientImpl:void failed(io.vertx.core.impl.ContextInternal,io.netty.channel.Channel,java.lang.Throwable,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.net.impl.NetClientImpl:void lambda$doConnect$3(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,io.vertx.core.net.SocketAddress,int,java.lang.String,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.net.impl.VertxHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$6(io.netty.channel.Channel,io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,io.vertx.core.net.impl.NetSocketImpl)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.net.impl.VertxHandler:void setConnection(io.vertx.core.net.impl.ConnectionBase)"
        ]
    },
    "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void run()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.net.impl.ConnectionBase:void lambda$addFuture$5(io.vertx.core.Handler,io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.net.impl.VertxHandler:void channelWritabilityChanged(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.net.impl.VertxHandler:void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:void lambda$webSocket$3(io.vertx.core.http.WebSocketConnectOptions,io.vertx.core.Handler,io.vertx.core.impl.ContextInternal,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.http.impl.ConnectionManager:void lambda$getConnection$7(io.vertx.core.http.impl.ConnectionManager$Endpoint,java.lang.Object,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connect$7(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextInternal,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$getConnectionForRequest$4(io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.net.impl.NetServerImpl$1:void lambda$initChannel$1(io.vertx.core.net.impl.HandlerHolder,io.netty.channel.Channel,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.net.impl.SslHandshakeCompletionHandler:void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.vertx.core.net.impl.NetClientImpl:void lambda$doConnect$3(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,io.vertx.core.net.SocketAddress,int,java.lang.String,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.net.impl.ChannelProvider:void lambda$connect$1(io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.http.impl.WebSocketHandshakeInboundHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.http.impl.WebSocketHandshakeInboundHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.http.impl.Http1xClientConnection:void handleHttpMessage(io.netty.handler.codec.http.HttpObject)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.http.impl.Http1xClientConnection:void handleMessage(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerChannelInitializer$1:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.net.impl.SslHandshakeCompletionHandler:void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpServerChannelInitializer:void handleHttp1(io.netty.channel.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerChannelInitializer:void access$100(io.vertx.core.http.impl.HttpServerChannelInitializer,io.netty.channel.Channel)",
            "io.vertx.core.http.impl.HttpServerChannelInitializer:void lambda$initChannel$0(io.netty.channel.ChannelPipeline,io.netty.channel.Channel,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerChannelInitializer:void initChannel(io.netty.channel.Channel)"
        ]
    },
    "io.vertx.core.datagram.impl.DatagramSocketImpl:io.vertx.core.datagram.DatagramSocket listenMulticastGroup(java.lang.String,java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.datagram.impl.DatagramSocketImpl:io.vertx.core.datagram.DatagramSocket unlistenMulticastGroup(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.datagram.impl.DatagramSocketImpl:io.vertx.core.datagram.DatagramSocket blockMulticastGroup(java.lang.String,java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.datagram.impl.DatagramSocketImpl:io.vertx.core.datagram.DatagramSocket listenMulticastGroup(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.datagram.impl.DatagramSocketImpl:io.vertx.core.datagram.DatagramSocket unlistenMulticastGroup(java.lang.String,java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.datagram.impl.DatagramSocketImpl:io.vertx.core.datagram.DatagramSocket blockMulticastGroup(java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.net.impl.VertxHandler:void setConnection(io.vertx.core.net.impl.ConnectionBase)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.net.impl.VertxHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.vertx.core.http.impl.ConnectionManager:void lambda$getConnection$7(io.vertx.core.http.impl.ConnectionManager$Endpoint,java.lang.Object,io.vertx.core.Handler,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.http.impl.pool.Pool:void lambda$nextTask$1(io.vertx.core.http.impl.pool.Waiter)",
            "io.vertx.core.http.impl.pool.Pool:void lambda$nextTask$0(io.vertx.core.http.impl.pool.Waiter,io.vertx.core.http.impl.pool.Pool$Holder)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:void lambda$getConnectionForRequest$4(io.vertx.core.Handler,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.http.impl.ConnectionManager:void lambda$getConnection$7(io.vertx.core.http.impl.ConnectionManager$Endpoint,java.lang.Object,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.net.impl.ChannelProvider:void lambda$connect$1(io.vertx.core.Handler,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.net.impl.ChannelProvider$1:void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerChannelInitializer:void access$100(io.vertx.core.http.impl.HttpServerChannelInitializer,io.netty.channel.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerChannelInitializer$1:void configure(io.netty.channel.ChannelHandlerContext,boolean)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerChannelInitializer:void initChannel(io.netty.channel.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerImpl$1:void initChannel(io.netty.channel.Channel)"
        ]
    },
    "io.vertx.core.net.impl.VertxHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.http.impl.pool.Pool:void lambda$nextTask$1(io.vertx.core.http.impl.pool.Waiter)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.http.impl.pool.Pool:void checkPendingTasks()"
        ]
    },
    "io.vertx.core.http.impl.pool.Pool:void lambda$nextTask$0(io.vertx.core.http.impl.pool.Waiter,io.vertx.core.http.impl.pool.Pool$Holder)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": [
            "io.vertx.core.http.impl.pool.Pool:void checkPendingTasks()"
        ]
    },
    "io.vertx.core.net.impl.ChannelProvider$1:void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpServerChannelInitializer$1:void configure(io.netty.channel.ChannelHandlerContext,boolean)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpServerImpl$1:void initChannel(io.netty.channel.Channel)": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    },
    "io.vertx.core.http.impl.pool.Pool:void checkPendingTasks()": {
        "isVulRoot": false,
        "srcRoot": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.ReplyException deliverMessageLocally(io.vertx.core.eventbus.impl.MessageImpl)"
        ],
        "vulCaller": []
    }
}