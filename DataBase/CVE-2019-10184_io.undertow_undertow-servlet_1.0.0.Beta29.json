{
    "io.undertow.servlet.handlers.security.ServletSecurityConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": true,
        "vulCaller": [
            "io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityRoleHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.SSLInformationAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.FilterHandler$FilterChainImpl:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.FilterHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletDispatchingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletChain,io.undertow.servlet.handlers.ServletRequestContext,javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.SessionRestoringHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.servlet.handlers.security.SSLInformationAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": true,
        "vulCaller": [
            "io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityRoleHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.SSLInformationAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.FilterHandler$FilterChainImpl:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.FilterHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletDispatchingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletChain,io.undertow.servlet.handlers.ServletRequestContext,javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.SessionRestoringHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.servlet.handlers.security.ServletSecurityRoleHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": true,
        "vulCaller": [
            "io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityRoleHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.SSLInformationAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.FilterHandler$FilterChainImpl:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.FilterHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletDispatchingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletChain,io.undertow.servlet.handlers.ServletRequestContext,javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.SessionRestoringHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": true,
        "vulCaller": [
            "io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityRoleHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.SSLInformationAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.FilterHandler$FilterChainImpl:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.FilterHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletDispatchingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletChain,io.undertow.servlet.handlers.ServletRequestContext,javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.SessionRestoringHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.servlet.handlers.FilterHandler$FilterChainImpl:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": true,
        "vulCaller": [
            "io.undertow.servlet.handlers.FilterHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)": {
        "isVulRoot": true,
        "vulCaller": [
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchToPath(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletPathMatch,javax.servlet.DispatcherType)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchToServlet(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchMockRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void access$000(io.undertow.servlet.handlers.ServletInitialHandler,io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)"
        ]
    },
    "io.undertow.servlet.handlers.SessionRestoringHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": true,
        "vulCaller": [
            "io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityRoleHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.SSLInformationAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.FilterHandler$FilterChainImpl:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.FilterHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletDispatchingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletChain,io.undertow.servlet.handlers.ServletRequestContext,javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.SessionRestoringHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.servlet.handlers.ServletDispatchingHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": true,
        "vulCaller": [
            "io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityRoleHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.SSLInformationAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.FilterHandler$FilterChainImpl:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.FilterHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletDispatchingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletChain,io.undertow.servlet.handlers.ServletRequestContext,javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.SessionRestoringHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.servlet.handlers.FilterHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": true,
        "vulCaller": [
            "io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityRoleHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.SSLInformationAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.FilterHandler$FilterChainImpl:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.FilterHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletDispatchingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletChain,io.undertow.servlet.handlers.ServletRequestContext,javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.SessionRestoringHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletChain,io.undertow.servlet.handlers.ServletRequestContext,javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)"
        ]
    },
    "io.undertow.servlet.handlers.ServletInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityRoleHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.SSLInformationAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.FilterHandler$FilterChainImpl:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.FilterHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletDispatchingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletChain,io.undertow.servlet.handlers.ServletRequestContext,javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.SessionRestoringHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchToPath(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletPathMatch,javax.servlet.DispatcherType)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.AsyncContextImpl$2$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.spec.RequestDispatcherImpl:void forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.spec.RequestDispatcherImpl:void error(javax.servlet.ServletRequest,javax.servlet.ServletResponse,java.lang.String,java.lang.Throwable,java.lang.String)"
        ]
    },
    "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchToServlet(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.RequestDispatcherImpl:void forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.spec.RequestDispatcherImpl:void include(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
        ]
    },
    "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchMockRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.RequestDispatcherImpl:void mock(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
        ]
    },
    "io.undertow.servlet.handlers.ServletInitialHandler:void access$000(io.undertow.servlet.handlers.ServletInitialHandler,io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.ServletInitialHandler$1$1:java.lang.Object run()",
            "io.undertow.servlet.handlers.ServletInitialHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.servlet.spec.AsyncContextImpl$2$1:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityRoleHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.SSLInformationAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.FilterHandler$FilterChainImpl:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.FilterHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletDispatchingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletChain,io.undertow.servlet.handlers.ServletRequestContext,javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.SessionRestoringHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.servlet.spec.RequestDispatcherImpl:void forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.security.ServletFormAuthenticationMechanism:java.lang.Integer servePage(io.undertow.server.HttpServerExchange,java.lang.String)"
        ]
    },
    "io.undertow.servlet.spec.RequestDispatcherImpl:void error(javax.servlet.ServletRequest,javax.servlet.ServletResponse,java.lang.String,java.lang.Throwable,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.RequestDispatcherImpl:void error(javax.servlet.ServletRequest,javax.servlet.ServletResponse,java.lang.String,java.lang.String)",
            "io.undertow.servlet.spec.RequestDispatcherImpl:void error(javax.servlet.ServletRequest,javax.servlet.ServletResponse,java.lang.String)",
            "io.undertow.servlet.spec.RequestDispatcherImpl:void error(javax.servlet.ServletRequest,javax.servlet.ServletResponse,java.lang.String,java.lang.Throwable)"
        ]
    },
    "io.undertow.servlet.spec.RequestDispatcherImpl:void include(javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.spec.RequestDispatcherImpl:void mock(javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.handlers.ServletInitialHandler$1$1:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.ServletInitialHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.servlet.handlers.ServletInitialHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityRoleHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.SSLInformationAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.FilterHandler$FilterChainImpl:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.FilterHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletDispatchingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletChain,io.undertow.servlet.handlers.ServletRequestContext,javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.SessionRestoringHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.servlet.handlers.security.ServletFormAuthenticationMechanism:java.lang.Integer servePage(io.undertow.server.HttpServerExchange,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.spec.RequestDispatcherImpl:void error(javax.servlet.ServletRequest,javax.servlet.ServletResponse,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.HttpServletResponseImpl:void sendError(int,java.lang.String)"
        ]
    },
    "io.undertow.servlet.spec.RequestDispatcherImpl:void error(javax.servlet.ServletRequest,javax.servlet.ServletResponse,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.spec.RequestDispatcherImpl:void error(javax.servlet.ServletRequest,javax.servlet.ServletResponse,java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletChain,io.undertow.servlet.handlers.ServletRequestContext,javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
        ]
    },
    "io.undertow.servlet.spec.HttpServletResponseImpl:void sendError(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.HttpServletResponseImpl:void sendError(int)"
        ]
    },
    "io.undertow.servlet.spec.HttpServletResponseImpl:void sendError(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityRoleHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.DefaultServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletChain,io.undertow.servlet.handlers.ServletRequestContext,javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.spec.AsyncContextImpl$TimeoutTask:void run()",
            "io.undertow.servlet.spec.AsyncContextImpl:void handleError(java.lang.Throwable)",
            "io.undertow.servlet.websockets.WebSocketServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.handlers.DefaultServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.spec.AsyncContextImpl$TimeoutTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.AsyncContextImpl$4:void run()",
            "io.undertow.servlet.spec.AsyncContextImpl$5:void run()",
            "io.undertow.servlet.spec.AsyncContextImpl$TaskDispatchRunnable:void run()"
        ]
    },
    "io.undertow.servlet.spec.AsyncContextImpl:void handleError(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletChain,io.undertow.servlet.handlers.ServletRequestContext,javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
        ]
    },
    "io.undertow.servlet.websockets.WebSocketServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.spec.AsyncContextImpl$4:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.AsyncContextImpl$4:void run()",
            "io.undertow.servlet.spec.AsyncContextImpl$5:void run()",
            "io.undertow.servlet.spec.AsyncContextImpl$TaskDispatchRunnable:void run()",
            "io.undertow.servlet.spec.AsyncContextImpl:void start(java.lang.Runnable)"
        ]
    },
    "io.undertow.servlet.spec.AsyncContextImpl$5:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.AsyncContextImpl$4:void run()",
            "io.undertow.servlet.spec.AsyncContextImpl$5:void run()",
            "io.undertow.servlet.spec.AsyncContextImpl$TaskDispatchRunnable:void run()"
        ]
    },
    "io.undertow.servlet.spec.AsyncContextImpl$TaskDispatchRunnable:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.AsyncContextImpl$4:void run()",
            "io.undertow.servlet.spec.AsyncContextImpl$5:void run()",
            "io.undertow.servlet.spec.AsyncContextImpl$TaskDispatchRunnable:void run()",
            "io.undertow.servlet.spec.AsyncContextImpl:void processAsyncTask()"
        ]
    },
    "io.undertow.servlet.spec.AsyncContextImpl:void start(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.spec.AsyncContextImpl:void processAsyncTask()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.AsyncContextImpl:void initialRequestDone()",
            "io.undertow.servlet.spec.AsyncContextImpl:void addAsyncTask(java.lang.Runnable)",
            "io.undertow.servlet.spec.AsyncContextImpl:void access$800(io.undertow.servlet.spec.AsyncContextImpl)"
        ]
    },
    "io.undertow.servlet.spec.AsyncContextImpl:void initialRequestDone()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.AsyncContextImpl$1:void run()",
            "io.undertow.servlet.spec.AsyncContextImpl:void completeInternal()"
        ]
    },
    "io.undertow.servlet.spec.AsyncContextImpl:void addAsyncTask(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.AsyncContextImpl:void doDispatch(java.lang.Runnable)",
            "io.undertow.servlet.spec.ServletInputStreamImpl$ServletInputStreamChannelListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.servlet.spec.ServletInputStreamImpl:void setReadListener(javax.servlet.ReadListener)",
            "io.undertow.servlet.spec.ServletOutputStreamImpl$WriteChannelListener:void handleEvent(org.xnio.channels.StreamSinkChannel)"
        ]
    },
    "io.undertow.servlet.spec.AsyncContextImpl:void access$800(io.undertow.servlet.spec.AsyncContextImpl)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.AsyncContextImpl$TaskDispatchRunnable:void run()"
        ]
    },
    "io.undertow.servlet.spec.AsyncContextImpl$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.AsyncContextImpl$4:void run()",
            "io.undertow.servlet.spec.AsyncContextImpl$5:void run()",
            "io.undertow.servlet.spec.AsyncContextImpl$TaskDispatchRunnable:void run()"
        ]
    },
    "io.undertow.servlet.spec.AsyncContextImpl:void completeInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.AsyncContextImpl:void complete()"
        ]
    },
    "io.undertow.servlet.spec.AsyncContextImpl:void doDispatch(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.AsyncContextImpl:void dispatchAsyncRequest(io.undertow.servlet.api.ServletDispatcher,io.undertow.servlet.handlers.ServletPathMatch,io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.spec.AsyncContextImpl:void completeInternal()"
        ]
    },
    "io.undertow.servlet.spec.ServletInputStreamImpl$ServletInputStreamChannelListener:void handleEvent(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.ServletInputStreamImpl$ServletInputStreamChannelListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.servlet.spec.ServletInputStreamImpl:void setReadListener(javax.servlet.ReadListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.spec.ServletOutputStreamImpl$WriteChannelListener:void handleEvent(org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.ServletOutputStreamImpl$WriteChannelListener:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.servlet.spec.ServletOutputStreamImpl:void setWriteListener(javax.servlet.WriteListener)"
        ]
    },
    "io.undertow.servlet.spec.AsyncContextImpl:void complete()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.AsyncContextImpl$TimeoutTask:void run()",
            "io.undertow.servlet.spec.AsyncContextImpl:void handleError(java.lang.Throwable)"
        ]
    },
    "io.undertow.servlet.spec.AsyncContextImpl:void dispatchAsyncRequest(io.undertow.servlet.api.ServletDispatcher,io.undertow.servlet.handlers.ServletPathMatch,io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.AsyncContextImpl:void dispatch(javax.servlet.ServletContext,java.lang.String)"
        ]
    },
    "io.undertow.servlet.spec.ServletInputStreamImpl$ServletInputStreamChannelListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.spec.ServletOutputStreamImpl$WriteChannelListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.spec.ServletOutputStreamImpl:void setWriteListener(javax.servlet.WriteListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.spec.AsyncContextImpl:void dispatch(javax.servlet.ServletContext,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.AsyncContextImpl:void dispatch()",
            "io.undertow.servlet.spec.AsyncContextImpl:void dispatch(java.lang.String)"
        ]
    },
    "io.undertow.servlet.spec.AsyncContextImpl:void dispatch()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.spec.AsyncContextImpl:void dispatch(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    }
}