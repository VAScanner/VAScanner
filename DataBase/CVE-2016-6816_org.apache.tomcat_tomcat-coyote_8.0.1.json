{
    "org.apache.coyote.http11.InternalAprInputBuffer:boolean parseHeader()": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.coyote.http11.InternalAprInputBuffer:boolean parseHeaders()"
        ]
    },
    "org.apache.coyote.http11.InternalAprInputBuffer:boolean parseRequestLine(boolean)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper)"
        ]
    },
    "org.apache.coyote.http11.InternalInputBuffer:boolean parseHeader()": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.coyote.http11.InternalInputBuffer:boolean parseHeaders()"
        ]
    },
    "org.apache.coyote.http11.InternalInputBuffer:boolean parseRequestLine(boolean)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper)"
        ]
    },
    "org.apache.coyote.http11.InternalAprInputBuffer:boolean parseHeaders()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper)"
        ]
    },
    "org.apache.coyote.http11.AbstractHttp11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol$AbstractConnectionHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper,org.apache.tomcat.util.net.SocketStatus)"
        ]
    },
    "org.apache.coyote.http11.InternalInputBuffer:boolean parseHeaders()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper)"
        ]
    },
    "org.apache.coyote.AbstractProtocol$AbstractConnectionHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper,org.apache.tomcat.util.net.SocketStatus)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11AprProtocol$Http11ConnectionHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper,org.apache.tomcat.util.net.SocketStatus)",
            "org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper,org.apache.tomcat.util.net.SocketStatus)",
            "org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper,org.apache.tomcat.util.net.SocketStatus)",
            "org.apache.tomcat.util.net.AprEndpoint$SocketProcessor:void doRun()",
            "org.apache.tomcat.util.net.AprEndpoint$SocketWithOptionsProcessor:void run()",
            "org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor:void run()",
            "org.apache.tomcat.util.net.NioEndpoint$SocketProcessor:void doRun(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$KeyAttachment)"
        ]
    },
    "org.apache.coyote.http11.Http11AprProtocol$Http11ConnectionHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper,org.apache.tomcat.util.net.SocketStatus)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint$SocketProcessor:void doRun()",
            "org.apache.tomcat.util.net.AprEndpoint$SocketWithOptionsProcessor:void run()"
        ]
    },
    "org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper,org.apache.tomcat.util.net.SocketStatus)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$SocketProcessor:void doRun(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$KeyAttachment)"
        ]
    },
    "org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper,org.apache.tomcat.util.net.SocketStatus)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor:void run()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$SocketProcessor:void doRun()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint$SocketProcessor:void run()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$SocketWithOptionsProcessor:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.AprEndpoint:boolean processSocketWithOptions(long)",
            "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller:boolean events()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()"
        ]
    },
    "org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor:void run()",
            "org.apache.tomcat.util.net.JIoEndpoint:boolean processSocket(java.net.Socket)",
            "org.apache.tomcat.util.net.JIoEndpoint:void processSocket(org.apache.tomcat.util.net.SocketWrapper,org.apache.tomcat.util.net.SocketStatus,boolean)",
            "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller:boolean events()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$SocketProcessor:void doRun(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$KeyAttachment)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$SocketProcessor:void run()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$SocketProcessor:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.AprEndpoint$SocketProcessor:void doRun()",
            "org.apache.tomcat.util.net.AprEndpoint:boolean processSocket(long,org.apache.tomcat.util.net.SocketStatus)",
            "org.apache.tomcat.util.net.AprEndpoint:void processSocket(org.apache.tomcat.util.net.SocketWrapper,org.apache.tomcat.util.net.SocketStatus,boolean)",
            "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller:boolean events()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()"
        ]
    },
    "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AbstractAjpProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.http11.AbstractHttp11Processor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint:boolean processSocketWithOptions(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint$Acceptor:void run()"
        ]
    },
    "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller:boolean events()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller:void run()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNioChannel:int handshake(boolean,boolean)",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult handshakeUnwrap(boolean)",
            "org.apache.tomcat.util.net.SecureNioChannel:int read(java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.SecureNioChannel:int write(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.tomcat.util.net.JIoEndpoint:boolean processSocket(java.net.Socket)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.JIoEndpoint$Acceptor:void run()"
        ]
    },
    "org.apache.tomcat.util.net.JIoEndpoint:void processSocket(org.apache.tomcat.util.net.SocketWrapper,org.apache.tomcat.util.net.SocketStatus,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AbstractAjpProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.http11.Http11Processor:void actionInternal(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.tomcat.util.net.AbstractEndpoint:void executeNonBlockingDispatches(org.apache.tomcat.util.net.SocketWrapper)",
            "org.apache.tomcat.util.net.JIoEndpoint$AsyncTimeout:void run()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$SocketProcessor:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller:boolean events()",
            "org.apache.tomcat.util.net.NioEndpoint$SocketProcessor:void doRun(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$KeyAttachment)",
            "org.apache.tomcat.util.net.NioEndpoint:boolean processSocket(org.apache.tomcat.util.net.NioChannel,org.apache.tomcat.util.net.SocketStatus,boolean)",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint:boolean processSocket(long,org.apache.tomcat.util.net.SocketStatus)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11AprProtocol$Http11ConnectionHandler:void longPoll(org.apache.tomcat.util.net.SocketWrapper,org.apache.coyote.Processor)",
            "org.apache.tomcat.util.net.AprEndpoint$Poller:void destroy()",
            "org.apache.tomcat.util.net.AprEndpoint$Poller:void add(long,int,int)",
            "org.apache.tomcat.util.net.AprEndpoint$Poller:void maintain()",
            "org.apache.tomcat.util.net.AprEndpoint$Poller:void run()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint:void processSocket(org.apache.tomcat.util.net.SocketWrapper,org.apache.tomcat.util.net.SocketStatus,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AbstractAjpProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.http11.Http11AprProcessor:void actionInternal(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.tomcat.util.net.AbstractEndpoint:void executeNonBlockingDispatches(org.apache.tomcat.util.net.SocketWrapper)",
            "org.apache.tomcat.util.net.AprEndpoint$AsyncTimeout:void run()"
        ]
    },
    "org.apache.coyote.ajp.AbstractAjpProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.Request:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.Response:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http11.AbstractHttp11Processor:void action(org.apache.coyote.ActionCode,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.Request:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.Response:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$Acceptor:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller:boolean events()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()"
        ]
    },
    "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.AbstractEndpoint:void startAcceptorThreads()",
            "org.apache.tomcat.util.net.AprEndpoint:void startInternal()",
            "org.apache.tomcat.util.net.JIoEndpoint:void startInternal()",
            "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller:boolean events()",
            "org.apache.tomcat.util.net.NioBlockingSelector:void open(java.nio.channels.Selector)",
            "org.apache.tomcat.util.net.NioEndpoint:void startInternal()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNioChannel:int handshake(boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$SocketProcessor:void doRun(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$KeyAttachment)",
            "org.apache.tomcat.util.net.SecureNioChannel:void rehandshake(long)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult handshakeUnwrap(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNioChannel:int handshake(boolean,boolean)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNioChannel:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpNioProcessor:int readSocket(byte[],int,int,boolean)",
            "org.apache.coyote.http11.upgrade.NioServletInputStream:int fillReadBuffer(boolean)",
            "org.apache.coyote.http11.InternalNioInputBuffer:int readSocket(boolean,boolean)",
            "org.apache.tomcat.util.net.NioBlockingSelector:int read(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,long)",
            "org.apache.tomcat.util.net.NioSelectorPool:int read(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long,boolean)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNioChannel:int write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioBlockingSelector:int write(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,long)",
            "org.apache.tomcat.util.net.NioSelectorPool:int write(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long,boolean)"
        ]
    },
    "org.apache.tomcat.util.net.JIoEndpoint$Acceptor:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller:boolean events()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:void actionInternal(org.apache.coyote.ActionCode,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11Processor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.AbstractEndpoint:void executeNonBlockingDispatches(org.apache.tomcat.util.net.SocketWrapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11Processor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.JIoEndpoint$AsyncTimeout:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller:boolean events()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint:boolean processSocket(org.apache.tomcat.util.net.NioChannel,org.apache.tomcat.util.net.SocketStatus,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$Poller:void add(org.apache.tomcat.util.net.NioChannel,int)",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:void cancelledKey(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.SocketStatus)",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:boolean processKey(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$KeyAttachment)",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:void timeout(int,boolean)",
            "org.apache.tomcat.util.net.NioEndpoint:boolean dispatchForEvent(org.apache.tomcat.util.net.NioChannel,org.apache.tomcat.util.net.SocketStatus,boolean)"
        ]
    },
    "org.apache.coyote.http11.Http11AprProtocol$Http11ConnectionHandler:void longPoll(org.apache.tomcat.util.net.SocketWrapper,org.apache.coyote.Processor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol$AbstractConnectionHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper,org.apache.tomcat.util.net.SocketStatus)"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$Poller:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint:void stopInternal()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$Poller:void add(long,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint$Poller:void add(long,int,boolean,boolean)",
            "org.apache.tomcat.util.net.AprEndpoint$Poller:void run()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$Poller:void maintain()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint$Poller:void run()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$Poller:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller:boolean events()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()"
        ]
    },
    "org.apache.coyote.http11.Http11AprProcessor:void actionInternal(org.apache.coyote.ActionCode,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11Processor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$AsyncTimeout:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller:boolean events()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()"
        ]
    },
    "org.apache.coyote.Request:void action(org.apache.coyote.ActionCode,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.Request:void setReadListener(javax.servlet.ReadListener)",
            "org.apache.coyote.Request:boolean isFinished()",
            "org.apache.coyote.RequestInfo:java.lang.String getRemoteAddr()"
        ]
    },
    "org.apache.coyote.Response:void action(org.apache.coyote.ActionCode,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.AbstractOutputBuffer:void flush()",
            "org.apache.coyote.http11.AbstractOutputBuffer:void endRequest()",
            "org.apache.coyote.Response:void reset()",
            "org.apache.coyote.Response:void finish()",
            "org.apache.coyote.Response:void acknowledge()",
            "org.apache.coyote.Response:void sendHeaders()",
            "org.apache.coyote.Response:long getBytesWritten(boolean)",
            "org.apache.coyote.Response:void setWriteListener(javax.servlet.WriteListener)",
            "org.apache.coyote.Response:boolean checkRegisterForWrite(boolean)"
        ]
    },
    "org.apache.tomcat.util.net.AbstractEndpoint:void startAcceptorThreads()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint:void startInternal()",
            "org.apache.tomcat.util.net.JIoEndpoint:void startInternal()",
            "org.apache.tomcat.util.net.NioEndpoint:void startInternal()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void start()"
        ]
    },
    "org.apache.tomcat.util.net.JIoEndpoint:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void start()"
        ]
    },
    "org.apache.tomcat.util.net.NioBlockingSelector:void open(java.nio.channels.Selector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioSelectorPool:void open()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void start()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNioChannel:void rehandshake(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11NioProcessor:void actionInternal(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.ajp.AjpNioProcessor:int readSocket(byte[],int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpNioProcessor:boolean read(byte[],int,int,boolean)"
        ]
    },
    "org.apache.coyote.http11.upgrade.NioServletInputStream:int fillReadBuffer(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.NioServletInputStream:boolean doIsReady()",
            "org.apache.coyote.http11.upgrade.NioServletInputStream:int doRead(boolean,byte[],int,int)"
        ]
    },
    "org.apache.coyote.http11.InternalNioInputBuffer:int readSocket(boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.InternalNioInputBuffer:boolean fill(boolean,boolean)"
        ]
    },
    "org.apache.tomcat.util.net.NioBlockingSelector:int read(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioSelectorPool:int read(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long,boolean)"
        ]
    },
    "org.apache.tomcat.util.net.NioSelectorPool:int read(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioSelectorPool:int read(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long)"
        ]
    },
    "org.apache.tomcat.util.net.NioBlockingSelector:int write(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioSelectorPool:int write(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long,boolean)"
        ]
    },
    "org.apache.tomcat.util.net.NioSelectorPool:int write(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpNioProcessor:int output(byte[],int,int,boolean)",
            "org.apache.coyote.http11.upgrade.NioServletOutputStream:int doWriteInternal(boolean,byte[],int,int)",
            "org.apache.coyote.http11.InternalNioOutputBuffer:int writeToSocket(java.nio.ByteBuffer,boolean,boolean)",
            "org.apache.tomcat.util.net.SecureNioChannel:boolean flush(boolean,java.nio.channels.Selector,long)"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$Poller:void add(org.apache.tomcat.util.net.NioChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.NioServletOutputStream:int doWriteInternal(boolean,byte[],int,int)",
            "org.apache.coyote.http11.InternalNioOutputBuffer:void registerWriteInterest()",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:void add(org.apache.tomcat.util.net.NioChannel)",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:boolean processSendfile(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$KeyAttachment,boolean)",
            "org.apache.tomcat.util.net.NioEndpoint$SocketProcessor:void doRun(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$KeyAttachment)",
            "org.apache.tomcat.util.net.NioEndpoint:boolean dispatchForEvent(org.apache.tomcat.util.net.NioChannel,org.apache.tomcat.util.net.SocketStatus,boolean)"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$Poller:void cancelledKey(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.SocketStatus)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$Poller:boolean processKey(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$KeyAttachment)",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:boolean processSendfile(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$KeyAttachment,boolean)",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:void timeout(int,boolean)",
            "org.apache.tomcat.util.net.NioEndpoint$PollerEvent:void run()",
            "org.apache.tomcat.util.net.NioEndpoint$SocketProcessor:void doRun(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$KeyAttachment)"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$Poller:boolean processKey(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$KeyAttachment)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$Poller:void run()",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:void timeout(int,boolean)"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$Poller:void timeout(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$Poller:void run()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint:boolean dispatchForEvent(org.apache.tomcat.util.net.NioChannel,org.apache.tomcat.util.net.SocketStatus,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11NioProcessor:void actionInternal(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.tomcat.util.net.NioEndpoint:void processSocket(org.apache.tomcat.util.net.SocketWrapper,org.apache.tomcat.util.net.SocketStatus,boolean)"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void stop()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$Poller:void add(long,int,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpAprProcessor:void registerForEvent(boolean,boolean)",
            "org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler:void release(org.apache.tomcat.util.net.SocketWrapper,org.apache.coyote.Processor,boolean,boolean)",
            "org.apache.coyote.http11.upgrade.AprServletOutputStream:int doWriteInternal(byte[],int,int)",
            "org.apache.coyote.http11.Http11AprProcessor:void registerForEvent(boolean,boolean)",
            "org.apache.coyote.http11.Http11AprProtocol$Http11ConnectionHandler:void release(org.apache.tomcat.util.net.SocketWrapper,org.apache.coyote.Processor,boolean,boolean)",
            "org.apache.coyote.http11.Http11AprProtocol$Http11ConnectionHandler:void longPoll(org.apache.tomcat.util.net.SocketWrapper,org.apache.coyote.Processor)",
            "org.apache.coyote.http11.InternalAprOutputBuffer:void registerWriteInterest()",
            "org.apache.tomcat.util.net.AprEndpoint$Sendfile:void run()",
            "org.apache.tomcat.util.net.AprEndpoint$SocketWithOptionsProcessor:void run()"
        ]
    },
    "org.apache.coyote.Request:void setReadListener(javax.servlet.ReadListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.Request:boolean isFinished()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.RequestInfo:java.lang.String getRemoteAddr()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.RequestInfo:java.lang.String getRemoteAddrForwarded()"
        ]
    },
    "org.apache.coyote.http11.AbstractOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:long end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(int)",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(byte[],int,int)",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.AbstractOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.Response:void doWrite(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.http11.AbstractOutputBuffer:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11Processor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http11.AbstractOutputBuffer:void endRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11Processor:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.http11.AbstractHttp11Processor:void endRequest()"
        ]
    },
    "org.apache.coyote.Response:void reset()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper)"
        ]
    },
    "org.apache.coyote.Response:void finish()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.Response:void acknowledge()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.Response:void sendHeaders()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.Response:long getBytesWritten(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.Response:void setWriteListener(javax.servlet.WriteListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.Response:boolean checkRegisterForWrite(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AbstractAjpProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState asyncDispatch(org.apache.tomcat.util.net.SocketStatus)",
            "org.apache.coyote.http11.AbstractHttp11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState asyncDispatch(org.apache.tomcat.util.net.SocketStatus)",
            "org.apache.coyote.Response:boolean isReady()"
        ]
    },
    "org.apache.tomcat.util.net.AbstractEndpoint:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol:void start()"
        ]
    },
    "org.apache.tomcat.util.net.NioSelectorPool:void open()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint:void bind()"
        ]
    },
    "org.apache.coyote.http11.Http11NioProcessor:void actionInternal(org.apache.coyote.ActionCode,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11Processor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.ajp.AjpNioProcessor:boolean read(byte[],int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AbstractAjpProcessor:boolean readMessage(org.apache.coyote.ajp.AjpMessage,boolean)"
        ]
    },
    "org.apache.coyote.http11.upgrade.NioServletInputStream:boolean doIsReady()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.AbstractServletInputStream:boolean isReady()"
        ]
    },
    "org.apache.coyote.http11.upgrade.NioServletInputStream:int doRead(boolean,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.AbstractServletInputStream:int read(byte[],int,int)",
            "org.apache.coyote.http11.upgrade.AbstractServletInputStream:int readInternal()"
        ]
    },
    "org.apache.coyote.http11.InternalNioInputBuffer:boolean fill(boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.InternalNioInputBuffer$SocketInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.InternalNioInputBuffer:boolean parseRequestLine(boolean)",
            "org.apache.coyote.http11.InternalNioInputBuffer:org.apache.coyote.http11.InternalNioInputBuffer$HeaderParseStatus parseHeader()",
            "org.apache.coyote.http11.InternalNioInputBuffer:org.apache.coyote.http11.InternalNioInputBuffer$HeaderParseStatus skipLine()",
            "org.apache.coyote.http11.InternalNioInputBuffer:boolean fill(boolean)"
        ]
    },
    "org.apache.tomcat.util.net.NioSelectorPool:int read(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpNioProcessor:int readSocket(byte[],int,int,boolean)",
            "org.apache.coyote.http11.upgrade.NioServletInputStream:int fillReadBuffer(boolean)",
            "org.apache.coyote.http11.InternalNioInputBuffer:int readSocket(boolean,boolean)"
        ]
    },
    "org.apache.coyote.ajp.AjpNioProcessor:int output(byte[],int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AbstractAjpProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper)",
            "org.apache.coyote.ajp.AbstractAjpProcessor:boolean refillReadBuffer(boolean)",
            "org.apache.coyote.ajp.AbstractAjpProcessor:void prepareResponse()",
            "org.apache.coyote.ajp.AbstractAjpProcessor:void flush(boolean)",
            "org.apache.coyote.ajp.AbstractAjpProcessor:void finish()",
            "org.apache.coyote.ajp.AbstractAjpProcessor:void writeResponseMessage(boolean)"
        ]
    },
    "org.apache.coyote.http11.upgrade.NioServletOutputStream:int doWriteInternal(boolean,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.NioServletOutputStream:int doWrite(boolean,byte[],int,int)"
        ]
    },
    "org.apache.coyote.http11.InternalNioOutputBuffer:int writeToSocket(java.nio.ByteBuffer,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.InternalNioOutputBuffer:void sendAck()",
            "org.apache.coyote.http11.InternalNioOutputBuffer:void addToBB(byte[],int,int)",
            "org.apache.coyote.http11.InternalNioOutputBuffer:boolean flushBuffer(boolean)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNioChannel:boolean flush(boolean,java.nio.channels.Selector,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.NioServletOutputStream:void doFlush()",
            "org.apache.coyote.http11.InternalNioOutputBuffer:int writeToSocket(java.nio.ByteBuffer,boolean,boolean)"
        ]
    },
    "org.apache.coyote.http11.InternalNioOutputBuffer:void registerWriteInterest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractOutputBuffer:boolean isReady()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$Poller:void add(org.apache.tomcat.util.net.NioChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpNioProtocol$AjpConnectionHandler:void release(org.apache.tomcat.util.net.SocketWrapper,org.apache.coyote.Processor,boolean,boolean)",
            "org.apache.coyote.http11.Http11NioProcessor:void actionInternal(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler:void release(org.apache.tomcat.util.net.SocketWrapper,org.apache.coyote.Processor,boolean,boolean)",
            "org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler:void longPoll(org.apache.tomcat.util.net.SocketWrapper,org.apache.coyote.Processor)"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$Poller:boolean processSendfile(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$KeyAttachment,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11NioProcessor:boolean breakKeepAliveLoop(org.apache.tomcat.util.net.SocketWrapper)",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:boolean processKey(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$KeyAttachment)"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$PollerEvent:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller:boolean events()",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:boolean events()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$Poller:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller:boolean events()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint:void processSocket(org.apache.tomcat.util.net.SocketWrapper,org.apache.tomcat.util.net.SocketStatus,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AbstractAjpProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.tomcat.util.net.AbstractEndpoint:void executeNonBlockingDispatches(org.apache.tomcat.util.net.SocketWrapper)"
        ]
    },
    "org.apache.tomcat.util.net.AbstractEndpoint:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol:void stop()",
            "org.apache.tomcat.util.net.AprEndpoint:void unbind()",
            "org.apache.tomcat.util.net.JIoEndpoint:void unbind()",
            "org.apache.tomcat.util.net.NioEndpoint:void unbind()"
        ]
    },
    "org.apache.coyote.ajp.AjpAprProcessor:void registerForEvent(boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AbstractAjpProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.ajp.AbstractAjpProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState asyncDispatch(org.apache.tomcat.util.net.SocketStatus)"
        ]
    },
    "org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler:void release(org.apache.tomcat.util.net.SocketWrapper,org.apache.coyote.Processor,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol$AbstractConnectionHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper,org.apache.tomcat.util.net.SocketStatus)"
        ]
    },
    "org.apache.coyote.http11.upgrade.AprServletOutputStream:int doWriteInternal(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.AprServletOutputStream:int doWrite(boolean,byte[],int,int)"
        ]
    },
    "org.apache.coyote.http11.Http11AprProcessor:void registerForEvent(boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11Processor:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.http11.AbstractHttp11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState asyncDispatch(org.apache.tomcat.util.net.SocketStatus)"
        ]
    },
    "org.apache.coyote.http11.Http11AprProtocol$Http11ConnectionHandler:void release(org.apache.tomcat.util.net.SocketWrapper,org.apache.coyote.Processor,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11AprProtocol$Http11ConnectionHandler:void longPoll(org.apache.tomcat.util.net.SocketWrapper,org.apache.coyote.Processor)",
            "org.apache.coyote.AbstractProtocol$AbstractConnectionHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper,org.apache.tomcat.util.net.SocketStatus)"
        ]
    },
    "org.apache.coyote.http11.InternalAprOutputBuffer:void registerWriteInterest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractOutputBuffer:boolean isReady()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$Sendfile:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller:boolean events()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()"
        ]
    },
    "org.apache.coyote.RequestInfo:java.lang.String getRemoteAddrForwarded()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:long end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(int)",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(byte[],int,int)",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.AbstractOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.Response:void doWrite(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedOutputFilter:long end()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.GzipOutputFilter:long end()",
            "org.apache.coyote.http11.AbstractOutputBuffer:void endRequest()"
        ]
    },
    "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.util.mime.QuotedPrintableDecoder:int decode(byte[],java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(int)"
        ]
    },
    "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:int output(byte[],int,int,boolean)",
            "org.apache.coyote.http11.upgrade.BioServletOutputStream:int doWrite(boolean,byte[],int,int)",
            "org.apache.coyote.http11.InternalOutputBuffer$OutputStreamOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalOutputBuffer:void commit()",
            "org.apache.coyote.http11.InternalOutputBuffer:void realWriteBytes(byte[],int,int)",
            "org.apache.tomcat.util.http.fileupload.util.Streams:long copy(java.io.InputStream,java.io.OutputStream,boolean,byte[])",
            "org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream:void writeTo(java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.IOUtils:long copyLarge(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(byte[],int,int)"
        ]
    },
    "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:long end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(int)",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(byte[],int,int)",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.AbstractOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.Response:void doWrite(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.Response:void doWrite(org.apache.tomcat.util.buf.ByteChunk)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http11.AbstractHttp11Processor:void endRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper)"
        ]
    },
    "org.apache.coyote.ajp.AbstractAjpProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState asyncDispatch(org.apache.tomcat.util.net.SocketStatus)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol$AbstractConnectionHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper,org.apache.tomcat.util.net.SocketStatus)"
        ]
    },
    "org.apache.coyote.http11.AbstractHttp11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState asyncDispatch(org.apache.tomcat.util.net.SocketStatus)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol$AbstractConnectionHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper,org.apache.tomcat.util.net.SocketStatus)"
        ]
    },
    "org.apache.coyote.Response:boolean isReady()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.Response:void setWriteListener(javax.servlet.WriteListener)"
        ]
    },
    "org.apache.coyote.AbstractProtocol:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11AprProtocol:void start()",
            "org.apache.coyote.http11.Http11NioProtocol:void start()",
            "org.apache.coyote.http11.Http11Protocol:void start()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint:void bind()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void init()",
            "org.apache.tomcat.util.net.AbstractEndpoint:void start()"
        ]
    },
    "org.apache.coyote.ajp.AbstractAjpProcessor:boolean readMessage(org.apache.coyote.ajp.AjpMessage,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AbstractAjpProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper)",
            "org.apache.coyote.ajp.AbstractAjpProcessor:boolean receive(boolean)"
        ]
    },
    "org.apache.coyote.http11.upgrade.AbstractServletInputStream:boolean isReady()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http11.upgrade.AbstractServletInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http11.upgrade.AbstractServletInputStream:int readInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.AbstractServletInputStream:int read()",
            "org.apache.coyote.http11.upgrade.AbstractServletInputStream:int readLine(byte[],int,int)"
        ]
    },
    "org.apache.coyote.http11.InternalNioInputBuffer$SocketInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.BufferedInputFilter:void setRequest(org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int readBytes()",
            "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.IdentityInputFilter:long end()",
            "org.apache.coyote.http11.AbstractInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.InternalAprInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.http11.InternalNioInputBuffer:boolean parseRequestLine(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper)"
        ]
    },
    "org.apache.coyote.http11.InternalNioInputBuffer:org.apache.coyote.http11.InternalNioInputBuffer$HeaderParseStatus parseHeader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.InternalNioInputBuffer:boolean parseHeaders()"
        ]
    },
    "org.apache.coyote.http11.InternalNioInputBuffer:org.apache.coyote.http11.InternalNioInputBuffer$HeaderParseStatus skipLine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.InternalNioInputBuffer:org.apache.coyote.http11.InternalNioInputBuffer$HeaderParseStatus parseHeader()"
        ]
    },
    "org.apache.coyote.http11.InternalNioInputBuffer:boolean fill(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractInputBuffer:int available()",
            "org.apache.coyote.http11.Http11Processor:void setRequestLineReadTimeout()"
        ]
    },
    "org.apache.coyote.ajp.AbstractAjpProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol$AbstractConnectionHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper,org.apache.tomcat.util.net.SocketStatus)"
        ]
    },
    "org.apache.coyote.ajp.AbstractAjpProcessor:boolean refillReadBuffer(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AbstractAjpProcessor$SocketInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.ajp.AbstractAjpProcessor:boolean available()"
        ]
    },
    "org.apache.coyote.ajp.AbstractAjpProcessor:void prepareResponse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AbstractAjpProcessor$SocketOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.ajp.AbstractAjpProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.ajp.AbstractAjpProcessor:void finish()"
        ]
    },
    "org.apache.coyote.ajp.AbstractAjpProcessor:void flush(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AbstractAjpProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.ajp.AbstractAjpProcessor:void finish()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AbstractAjpProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.ajp.AbstractAjpProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper)"
        ]
    },
    "org.apache.coyote.ajp.AbstractAjpProcessor:void writeResponseMessage(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AbstractAjpProcessor:void writeData(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.ajp.AbstractAjpProcessor:void flushBufferedData()"
        ]
    },
    "org.apache.coyote.http11.upgrade.NioServletOutputStream:int doWrite(boolean,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.AbstractServletOutputStream:void writeInternal(byte[],int,int)"
        ]
    },
    "org.apache.coyote.http11.InternalNioOutputBuffer:void sendAck()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11Processor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http11.InternalNioOutputBuffer:void addToBB(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.InternalNioOutputBuffer:void commit()",
            "org.apache.coyote.http11.InternalNioOutputBuffer:void access$000(org.apache.coyote.http11.InternalNioOutputBuffer,byte[],int,int)"
        ]
    },
    "org.apache.coyote.http11.InternalNioOutputBuffer:boolean flushBuffer(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState asyncDispatch(org.apache.tomcat.util.net.SocketStatus)",
            "org.apache.coyote.http11.AbstractOutputBuffer:void flush()",
            "org.apache.coyote.http11.AbstractOutputBuffer:void endRequest()",
            "org.apache.coyote.http11.InternalNioOutputBuffer:void addToBB(byte[],int,int)"
        ]
    },
    "org.apache.coyote.http11.upgrade.NioServletOutputStream:void doFlush()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http11.AbstractOutputBuffer:boolean isReady()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11Processor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.ajp.AjpNioProtocol$AjpConnectionHandler:void release(org.apache.tomcat.util.net.SocketWrapper,org.apache.coyote.Processor,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol$AbstractConnectionHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper,org.apache.tomcat.util.net.SocketStatus)"
        ]
    },
    "org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler:void release(org.apache.tomcat.util.net.SocketWrapper,org.apache.coyote.Processor,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol$AbstractConnectionHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper,org.apache.tomcat.util.net.SocketStatus)"
        ]
    },
    "org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler:void longPoll(org.apache.tomcat.util.net.SocketWrapper,org.apache.coyote.Processor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol$AbstractConnectionHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper,org.apache.tomcat.util.net.SocketStatus)"
        ]
    },
    "org.apache.coyote.http11.Http11NioProcessor:boolean breakKeepAliveLoop(org.apache.tomcat.util.net.SocketWrapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper)"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$Poller:boolean events()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$Poller:void run()"
        ]
    },
    "org.apache.coyote.AbstractProtocol:void stop()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.net.AprEndpoint:void unbind()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void stop()",
            "org.apache.tomcat.util.net.AbstractEndpoint:void destroy()"
        ]
    },
    "org.apache.tomcat.util.net.JIoEndpoint:void unbind()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void stop()",
            "org.apache.tomcat.util.net.AbstractEndpoint:void destroy()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint:void unbind()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void stop()",
            "org.apache.tomcat.util.net.AbstractEndpoint:void destroy()"
        ]
    },
    "org.apache.coyote.http11.upgrade.AprServletOutputStream:int doWrite(boolean,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.AbstractServletOutputStream:void writeInternal(byte[],int,int)"
        ]
    },
    "org.apache.coyote.http11.filters.GzipOutputFilter:long end()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.GzipOutputFilter:long end()",
            "org.apache.coyote.http11.AbstractOutputBuffer:void endRequest()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.util.mime.QuotedPrintableDecoder:int decode(byte[],java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.util.mime.MimeUtility:java.lang.String decodeWord(java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.util.mime.QuotedPrintableDecoder:int decode(byte[],java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(int)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:int output(byte[],int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AbstractAjpProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper)",
            "org.apache.coyote.ajp.AbstractAjpProcessor:boolean refillReadBuffer(boolean)",
            "org.apache.coyote.ajp.AbstractAjpProcessor:void prepareResponse()",
            "org.apache.coyote.ajp.AbstractAjpProcessor:void flush(boolean)",
            "org.apache.coyote.ajp.AbstractAjpProcessor:void finish()",
            "org.apache.coyote.ajp.AbstractAjpProcessor:void writeResponseMessage(boolean)"
        ]
    },
    "org.apache.coyote.http11.upgrade.BioServletOutputStream:int doWrite(boolean,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.AbstractServletOutputStream:void writeInternal(byte[],int,int)"
        ]
    },
    "org.apache.coyote.http11.InternalOutputBuffer$OutputStreamOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:long end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(int)",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(byte[],int,int)",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.AbstractOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.Response:void doWrite(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.http11.InternalOutputBuffer:void commit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11Processor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http11.InternalOutputBuffer:void realWriteBytes(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.http.fileupload.util.Streams:long copy(java.io.InputStream,java.io.OutputStream,boolean,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.util.Streams:long copy(java.io.InputStream,java.io.OutputStream,boolean)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream:void writeTo(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream:void thresholdReached()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.IOUtils:long copyLarge(java.io.InputStream,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.IOUtils:int copy(java.io.InputStream,java.io.OutputStream)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:int output(byte[],int,int,boolean)",
            "org.apache.coyote.http11.upgrade.BioServletOutputStream:int doWrite(boolean,byte[],int,int)",
            "org.apache.coyote.http11.InternalOutputBuffer$OutputStreamOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalOutputBuffer:void commit()",
            "org.apache.coyote.http11.InternalOutputBuffer:void realWriteBytes(byte[],int,int)",
            "org.apache.tomcat.util.http.fileupload.util.Streams:long copy(java.io.InputStream,java.io.OutputStream,boolean,byte[])",
            "org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream:void writeTo(java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.IOUtils:long copyLarge(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(byte[],int,int)"
        ]
    },
    "org.apache.coyote.http11.Http11AprProtocol:void start()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http11.Http11NioProtocol:void start()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http11.Http11Protocol:void start()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.net.AbstractEndpoint:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol:void init()"
        ]
    },
    "org.apache.coyote.ajp.AbstractAjpProcessor:boolean receive(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AbstractAjpProcessor$SocketInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.ajp.AbstractAjpProcessor:boolean refillReadBuffer(boolean)",
            "org.apache.coyote.ajp.AbstractAjpProcessor:void finish()"
        ]
    },
    "org.apache.coyote.http11.upgrade.AbstractServletInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http11.upgrade.AbstractServletInputStream:int readLine(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http11.filters.BufferedInputFilter:void setRequest(org.apache.coyote.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractInputBuffer:void addActiveFilter(org.apache.coyote.http11.InputFilter)"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedInputFilter:int readBytes()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:boolean parseChunkHeader()",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:void parseCRLF(boolean)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:boolean parseHeader()"
        ]
    },
    "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.BufferedInputFilter:void setRequest(org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int readBytes()",
            "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.IdentityInputFilter:long end()",
            "org.apache.coyote.http11.AbstractInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.InternalAprInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.http11.filters.IdentityInputFilter:long end()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractInputBuffer:void endRequest()"
        ]
    },
    "org.apache.coyote.http11.AbstractInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.BufferedInputFilter:void setRequest(org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int readBytes()",
            "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.IdentityInputFilter:long end()",
            "org.apache.coyote.http11.AbstractInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.InternalAprInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.http11.InternalAprInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.BufferedInputFilter:void setRequest(org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int readBytes()",
            "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.IdentityInputFilter:long end()",
            "org.apache.coyote.http11.AbstractInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.InternalAprInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.buf.ByteChunk)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http11.InternalNioInputBuffer:boolean parseHeaders()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper)"
        ]
    },
    "org.apache.coyote.http11.AbstractInputBuffer:int available()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11Processor:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.http11.AbstractHttp11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState asyncDispatch(org.apache.tomcat.util.net.SocketStatus)"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:void setRequestLineReadTimeout()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper)"
        ]
    },
    "org.apache.coyote.ajp.AbstractAjpProcessor$SocketInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.BufferedInputFilter:void setRequest(org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int readBytes()",
            "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.IdentityInputFilter:long end()",
            "org.apache.coyote.http11.AbstractInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.InternalAprInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.ajp.AbstractAjpProcessor:boolean available()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AbstractAjpProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.ajp.AbstractAjpProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState asyncDispatch(org.apache.tomcat.util.net.SocketStatus)"
        ]
    },
    "org.apache.coyote.ajp.AbstractAjpProcessor$SocketOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:long end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(int)",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(byte[],int,int)",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.AbstractOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.Response:void doWrite(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.ajp.AbstractAjpProcessor:void writeData(org.apache.tomcat.util.buf.ByteChunk)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AbstractAjpProcessor:void access$200(org.apache.coyote.ajp.AbstractAjpProcessor,org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.ajp.AbstractAjpProcessor:void flushBufferedData()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AbstractAjpProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState asyncDispatch(org.apache.tomcat.util.net.SocketStatus)",
            "org.apache.coyote.ajp.AbstractAjpProcessor:void writeData(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.http11.upgrade.AbstractServletOutputStream:void writeInternal(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.AbstractServletOutputStream:void write(int)",
            "org.apache.coyote.http11.upgrade.AbstractServletOutputStream:void write(byte[],int,int)",
            "org.apache.coyote.http11.upgrade.AbstractServletOutputStream:void onWritePossible()"
        ]
    },
    "org.apache.coyote.http11.InternalNioOutputBuffer:void commit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11Processor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http11.InternalNioOutputBuffer:void access$000(org.apache.coyote.http11.InternalNioOutputBuffer,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.InternalNioOutputBuffer$SocketOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)"
        ]
    },
    "org.apache.tomcat.util.net.AbstractEndpoint:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol:void destroy()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.util.mime.MimeUtility:java.lang.String decodeWord(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.util.mime.MimeUtility:java.lang.String decodeText(java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.util.Streams:long copy(java.io.InputStream,java.io.OutputStream,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.util.Streams:java.lang.String asString(java.io.InputStream)",
            "org.apache.tomcat.util.http.fileupload.util.Streams:java.lang.String asString(java.io.InputStream,java.lang.String)",
            "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.util.List parseRequest(org.apache.tomcat.util.http.fileupload.RequestContext)",
            "org.apache.tomcat.util.http.fileupload.MultipartStream:int readBodyData(java.io.OutputStream)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream:void thresholdReached()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void checkThreshold(int)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.IOUtils:int copy(java.io.InputStream,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem:void write(java.io.File)"
        ]
    },
    "org.apache.coyote.AbstractProtocol:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11JsseProtocol:void init()"
        ]
    },
    "org.apache.coyote.http11.AbstractInputBuffer:void addActiveFilter(org.apache.coyote.http11.InputFilter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11Processor:boolean addInputFilter(org.apache.coyote.http11.InputFilter[],java.lang.String)",
            "org.apache.coyote.http11.AbstractHttp11Processor:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.http11.AbstractHttp11Processor:void prepareRequest()",
            "org.apache.coyote.http11.Http11AprProcessor:void actionInternal(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.http11.Http11NioProcessor:void actionInternal(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.http11.Http11Processor:void actionInternal(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.BufferedInputFilter:void setRequest(org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:long end()",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int readBytes()",
            "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.IdentityInputFilter:long end()",
            "org.apache.coyote.http11.AbstractInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.InternalAprInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedInputFilter:boolean parseChunkHeader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedInputFilter:void parseCRLF(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:boolean parseChunkHeader()",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:boolean parseHeader()"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedInputFilter:boolean parseHeader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedInputFilter:void parseEndChunk()"
        ]
    },
    "org.apache.coyote.http11.AbstractInputBuffer:void endRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11Processor:void endRequest()"
        ]
    },
    "org.apache.coyote.ajp.AbstractAjpProcessor:void access$200(org.apache.coyote.ajp.AbstractAjpProcessor,org.apache.tomcat.util.buf.ByteChunk)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AbstractAjpProcessor$SocketOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)"
        ]
    },
    "org.apache.coyote.http11.upgrade.AbstractServletOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http11.upgrade.AbstractServletOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http11.upgrade.AbstractServletOutputStream:void onWritePossible()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.AbstractProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState upgradeDispatch(org.apache.tomcat.util.net.SocketStatus)"
        ]
    },
    "org.apache.coyote.http11.InternalNioOutputBuffer$SocketOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:long end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(int)",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(byte[],int,int)",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.AbstractOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.Response:void doWrite(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.AbstractProtocol:void destroy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.http.fileupload.util.mime.MimeUtility:java.lang.String decodeText(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.ParameterParser:java.util.Map parse(char[],int,int,char)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.util.Streams:java.lang.String asString(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.http.fileupload.util.Streams:java.lang.String asString(java.io.InputStream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.util.List parseRequest(org.apache.tomcat.util.http.fileupload.RequestContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.util.Map parseParameterMap(org.apache.tomcat.util.http.fileupload.RequestContext)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.MultipartStream:int readBodyData(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.MultipartStream:int discardBodyData()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void checkThreshold(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(int)",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(byte[])",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(byte[],int,int)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem:void write(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http11.AbstractHttp11JsseProtocol:void init()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http11.AbstractHttp11Processor:boolean addInputFilter(org.apache.coyote.http11.InputFilter[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11Processor:void prepareRequest()"
        ]
    },
    "org.apache.coyote.http11.AbstractHttp11Processor:void prepareRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper)"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedInputFilter:long end()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractInputBuffer:void endRequest()"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedInputFilter:void parseEndChunk()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)"
        ]
    },
    "org.apache.coyote.http11.upgrade.AbstractProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState upgradeDispatch(org.apache.tomcat.util.net.SocketStatus)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol$AbstractConnectionHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapper,org.apache.tomcat.util.net.SocketStatus)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.ParameterParser:java.util.Map parse(char[],int,int,char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.ParameterParser:java.util.Map parse(char[],char)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.util.Map parseParameterMap(org.apache.tomcat.util.http.fileupload.RequestContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.servlet.ServletFileUpload:java.util.Map parseParameterMap(javax.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.MultipartStream:int discardBodyData()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl:boolean findNextItem()",
            "org.apache.tomcat.util.http.fileupload.MultipartStream:boolean skipPreamble()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.InternalOutputBuffer:void sendAck()",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(byte[])"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.ParameterParser:java.util.Map parse(char[],char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.ParameterParser:java.util.Map parse(java.lang.String,char)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.servlet.ServletFileUpload:java.util.Map parseParameterMap(javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl:boolean findNextItem()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl:void <init>(org.apache.tomcat.util.http.fileupload.FileUploadBase,org.apache.tomcat.util.http.fileupload.RequestContext)",
            "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl:boolean hasNext()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.MultipartStream:boolean skipPreamble()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl:boolean findNextItem()"
        ]
    },
    "org.apache.coyote.http11.InternalOutputBuffer:void sendAck()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11Processor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.ParameterParser:java.util.Map parse(java.lang.String,char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem:java.lang.String getCharSet()",
            "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.lang.String getFileName(java.lang.String)",
            "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.lang.String getFieldName(java.lang.String)",
            "org.apache.tomcat.util.http.fileupload.ParameterParser:java.util.Map parse(java.lang.String,char[])"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl:void <init>(org.apache.tomcat.util.http.fileupload.FileUploadBase,org.apache.tomcat.util.http.fileupload.RequestContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.FileUploadBase:org.apache.tomcat.util.http.fileupload.FileItemIterator getItemIterator(org.apache.tomcat.util.http.fileupload.RequestContext)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl:org.apache.tomcat.util.http.fileupload.FileItemStream next()",
            "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.util.List parseRequest(org.apache.tomcat.util.http.fileupload.RequestContext)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem:java.lang.String getCharSet()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem:java.lang.String getString()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.lang.String getFileName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.lang.String getFileName(org.apache.tomcat.util.http.fileupload.FileItemHeaders)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.lang.String getFieldName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.lang.String getFieldName(org.apache.tomcat.util.http.fileupload.FileItemHeaders)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.ParameterParser:java.util.Map parse(java.lang.String,char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.FileUploadBase:byte[] getBoundary(java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.FileUploadBase:org.apache.tomcat.util.http.fileupload.FileItemIterator getItemIterator(org.apache.tomcat.util.http.fileupload.RequestContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.servlet.ServletFileUpload:org.apache.tomcat.util.http.fileupload.FileItemIterator getItemIterator(javax.servlet.http.HttpServletRequest)",
            "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.util.List parseRequest(org.apache.tomcat.util.http.fileupload.RequestContext)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl:org.apache.tomcat.util.http.fileupload.FileItemStream next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.util.List parseRequest(org.apache.tomcat.util.http.fileupload.RequestContext)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem:java.lang.String getString()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.lang.String getFileName(org.apache.tomcat.util.http.fileupload.FileItemHeaders)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl:boolean findNextItem()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.lang.String getFieldName(org.apache.tomcat.util.http.fileupload.FileItemHeaders)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl:boolean findNextItem()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.FileUploadBase:byte[] getBoundary(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl:void <init>(org.apache.tomcat.util.http.fileupload.FileUploadBase,org.apache.tomcat.util.http.fileupload.RequestContext)",
            "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl:boolean findNextItem()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.servlet.ServletFileUpload:org.apache.tomcat.util.http.fileupload.FileItemIterator getItemIterator(javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": []
    }
}